package org.opentestsystem.rdw.reporting.assessment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.AssessmentItem;
import org.opentestsystem.rdw.reporting.common.model.DepthOfKnowledge;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Arrays;
import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcAssessmentItemRepositoryIT {

    private static final DepthOfKnowledge depthOfKnowledge = DepthOfKnowledge.builder()
            .level(1)
            .referenceUrl("dok1")
            .build();

    private static final AssessmentItem item1 = AssessmentItem.builder()
            .id(-1)
            .bankItemKey("200-3391")
            .claimCode("1")
            .targetId(-11)
            .targetCode("t1")
            .difficultyCode("E")
            .depthOfKnowledge(depthOfKnowledge)
            .mathPracticeCode("-1")
            .maximumPoints(3)
            .commonCoreStandardIds(of("S-ID.1"))
            .optionsCount(3)
            .answerKey("C")
            .type("MS")
            .build();

    private static final AssessmentItem item2 = AssessmentItem.builder()
            .id(-2)
            .bankItemKey("200-3392")
            .claimCode("1")
            .targetId(-12)
            .targetCode("t2")
            .difficultyCode("D")
            .depthOfKnowledge(depthOfKnowledge)
            .mathPracticeCode("-1")
            .maximumPoints(4)
            .commonCoreStandardIds(of("S-ID.3"))
            .optionsCount(0)
            .answerKey(null)
            .type("EQ")
            .build();
    private static final AssessmentItem item3 = AssessmentItem.builder()
            .id(-3)
            .bankItemKey("200-3393")
            .claimCode("2")
            .targetId(-21)
            .targetCode("t3")
            .difficultyCode("M")
            .depthOfKnowledge(depthOfKnowledge)
            .mathPracticeCode("-1")
            .maximumPoints(5)
            .commonCoreStandardIds(of("S-ID.4", "S-ID.7"))
            .optionsCount(2)
            .answerKey("B")
            .type("MC")
            .build();
    private static final AssessmentItem item7 = AssessmentItem.builder()
            .id(-7)
            .bankItemKey("200-3397")
            .claimCode("4")
            .targetId(-34)
            .targetCode("t3")
            .difficultyCode("M")
            .depthOfKnowledge(depthOfKnowledge)
            .mathPracticeCode("-1")
            .maximumPoints(5)
            .commonCoreStandardIds(of("S-ID.4", "S-ID.7"))
            .optionsCount(0)
            .answerKey("Hand")
            .type("WER")
            .performanceTaskWritingType("Narrative")
            .build();

    @Autowired
    private JdbcAssessmentItemRepository repository;

    @Test
    public void findAllForAssessmentShouldBeEmptyForMissingAssessment() {
        assertThat(repository.findAllForAssessment(0L)).isEmpty();
    }

    @Test
    public void findAllForAssessmentShouldFindAllItems() {
        List<AssessmentItem> actual = repository.findAllForAssessment(-1L);

        assertThat(actual).size().isEqualTo(4);
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(item1, item2, item3, item7);
    }

    @Test
    public void itShouldFindAssessmentItemsByExam() {
        List<AssessmentItem> actual = repository.findAllForExam(-1L);
        assertThat(actual).size().isEqualTo(4);
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(item1, item2, item3, item7);
    }

    @Test
    public void itShouldFindAllForAssessmentAndTypes() {
        List<AssessmentItem> actual = repository.findAllForAssessmentAndTypes(-1L, Arrays.asList("MS", "MC"));
        assertThat(actual).size().isEqualTo(2);
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(item1, item3)
                .doesNotContain(item7);
    }

    @Test
    public void itShouldReturnEmptyWhenFailingToFindAssessmentItemsByExam() {
        assertThat(repository.findAllForExam(1234L)).isEmpty();
    }

}