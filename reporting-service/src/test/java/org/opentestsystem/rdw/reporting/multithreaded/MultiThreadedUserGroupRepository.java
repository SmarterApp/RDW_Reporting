package org.opentestsystem.rdw.reporting.multithreaded;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.multithreaded.MultiThreadedTest;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.group.Group;
import org.opentestsystem.rdw.reporting.group.JdbcUserGroupRepository;
import org.opentestsystem.rdw.reporting.group.UserGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.UUID;

import static com.google.common.collect.Lists.newArrayList;

@Profile("mtTest")
@Import({JdbcUserGroupRepository.class, ReportingSystemSettings.class})
@Component
public class MultiThreadedUserGroupRepository extends MultiThreadedTest {
    @Autowired
    private UserGroupRepository repository;

    private User user = User.builderExt()
            .id("testUser")
            .username("testUser")
            .password("[REDACTED]")
            .username("testUser").build();

    @Override
    protected void before() {
        final List<String> sqls = newArrayList(
                "INSERT IGNORE into school_year (year) VALUES (1999)",
                "INSERT INTO student (id, ssid, update_import_id, updated, migrate_id) VALUES (-1, '-1', -1, now(), -1), (-30,-'30', -1, now(), -1)"
        );
        for (final String sql : Lists.reverse(sqls)) {
            getJdbcTemplate().getJdbcOperations().execute(sql);
        }
    }

    @Override
    protected void work() {
        repository.findAll(user);
        repository.update(
                repository.create("testUser", Group.builder()
                        .userCreated(true)
                        .name(UUID.randomUUID().toString())
                        .subjectCodes(ImmutableSet.of("Math"))
                        .studentIds(ImmutableSet.of(-30L))
                        .build()
                ).copy()
                        .studentIds(ImmutableSet.of(-1L, -30L))
                        .build()
        );
    }

    @Override
    protected void cleanUp() {
        final List<String> sqls = newArrayList(
                "DELETE gm FROM teacher_student_group_membership gm JOIN  teacher_student_group g ON g.id = gm.teacher_student_group_id where g.user_login = 'testUser'",
                "DELETE FROM student WHERE id < 0",
                "DELETE FROM teacher_student_group where user_login = 'testUser'"
        );
        for (final String sql : sqls) {
            getJdbcTemplate().getJdbcOperations().execute(sql);
        }
    }
}
