package org.opentestsystem.rdw.reporting.instructionalresource;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Iterables;
import com.google.common.collect.Sets;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.District;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.DistrictGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.SchoolGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.State;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.System;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcInstructionalResourceRepository.class})
@Sql(scripts = {
        "classpath:integration-test-data.sql",
        "classpath:instructional-resource-test-data.sql"
})
@ActiveProfiles("test")
public class JdbcInstructionalResourceRepositoryIT {

    private static final Set<InstructionalResource> SystemResources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/assessment-wide")
                    .performanceLevel(0)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/1")
                    .performanceLevel(1)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/2")
                    .performanceLevel(2)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/3")
                    .performanceLevel(3)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/4")
                    .performanceLevel(4)
                    .build())
            .build();

    private static final Set<InstructionalResource> StateResources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/assessment-wide")
                    .performanceLevel(0)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/1")
                    .performanceLevel(1)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/2")
                    .performanceLevel(2)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/3")
                    .performanceLevel(3)
                    .build())
            .add(InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/4")
                    .performanceLevel(4)
                    .build())
            .build();

    private static final Set<InstructionalResource> DistrictGroup1Resources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(DistrictGroup)
                    .resource("http://ica1/districtgroup1/assessment-wide")
                    .organizationName("districtGroup1")
                    .performanceLevel(0)
                    .build())
            .build();

    private static final Set<InstructionalResource> District1Resources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(District)
                    .resource("http://ica1/district1/assessment-wide")
                    .organizationName("district1")
                    .performanceLevel(0)
                    .build())
            .build();

    private static final Set<InstructionalResource> District3Resources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(District)
                    .resource("http://ica1/district3/assessment-wide")
                    .organizationName("district3")
                    .performanceLevel(0)
                    .build())
            .build();


    private static final Set<InstructionalResource> SchoolGroup1Resources = ImmutableSet.<InstructionalResource>builder()
            .add(InstructionalResource.builder()
                    .organizationLevel(SchoolGroup)
                    .resource("http://ica1/schoolgroup1/assessment-wide")
                    .organizationName("schoolGroup1")
                    .performanceLevel(0)
                    .build())
            .build();

    @Autowired
    private JdbcInstructionalResourceRepository repository;

    @Test
    public void itShouldFetchInstructionalResourcesForTheSystemAndState() {
        final Collection<InstructionalResource> resources = repository.findByAssessmentAndSchool(-1, -30L);
        assertThat(resources).hasSize(SystemResources.size() + StateResources.size());
        assertThat(resources)
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(Sets.union(SystemResources, StateResources));

    }

    @Test
    public void itShouldIncludeDistrictGroupAndDistrictAndSchoolGroupResources() {
        final Collection<InstructionalResource> resources = repository.findByAssessmentAndSchool(-1, -20L);
        assertThat(resources).hasSize(SystemResources.size() + StateResources.size() + DistrictGroup1Resources.size() + District1Resources.size() + SchoolGroup1Resources.size());

        assertThat(resources)
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(Iterables.concat(SystemResources, StateResources, DistrictGroup1Resources, District1Resources, SchoolGroup1Resources));
    }

    @Test
    public void itShouldIncludeDistrictResources() {
        final Collection<InstructionalResource> resources = repository.findByAssessmentAndSchool(-1, -40L);
        assertThat(resources).hasSize(SystemResources.size() + StateResources.size() + District3Resources.size());

        assertThat(resources)
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(Iterables.concat(SystemResources, StateResources, District3Resources));
    }
}