package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.student.JdbcStudentEthnicityRepository;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataLoadingRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;


@Import({JdbcGroupExamWithTargetScoreRepository.class, JdbcStudentEthnicityRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcGroupExamWithTargetScoreRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupExamWithTargetScoreRepository repository;

    private GroupExamSearch.Builder search() {
        return GroupExamSearch.builder()
                .groupId(new UserGroupId(-20L, null))
                .schoolYear(1997)
                .assessmentId(-4);
    }

    private GroupExamSearch.Builder userGroupSearch() {
        return GroupExamSearch.builder()
                .groupId(new UserGroupId(null,-200L))
                .schoolYear(1997)
                .assessmentId(-4);
    }

    @Override
    protected User.Builder userBuilder() {
        // every test wants statewide group permissions
        // also, to avoid multiple district embargo entries, grant state permissions for embargo
        // (previous to phase 6, the school_year being before current negated embargo settings)
        final Map<String, Permission> permissionMap = newHashMap();
        permissionMap.putAll(groupStatewide);
        permissionMap.put(TestDataLoadingRead, new Permission(TestDataLoadingRead, PermissionScope.STATEWIDE));

        return super.userBuilder()
            .permissionsById(permissionMap);
    }

    private User.Builder user2Builder() {
        return userBuilder().username("someone-20@somewhere.com");
    }

    @Test
    public void findAllForAssessmentShouldFindAll() {
        final List<ExamWithTargetScore> examWithTargetScores = repository.findAllByGroupExamSearch(
            user2Builder().build(), search().build());
        assertThat(examWithTargetScores.size()).isEqualTo(10);
        assertThat(examWithTargetScores.stream().map(ExamWithTargetScore::getTargetId).collect(toList())).containsExactlyInAnyOrder(-11, -12, -21, -22, -31, -32, -33, -34, -41, -43);
        assertThat(examWithTargetScores.stream().map(ExamWithTargetScore::getId).collect(toList())).containsOnly(-7L);
    }

    @Test
    public void findAllForAssessmentByUserGroupShouldFindAll() {
        final List<ExamWithTargetScore> examWithTargetScores = repository.findAllByGroupExamSearch(
            user2Builder().build(), userGroupSearch().build());
        assertThat(examWithTargetScores.size()).isEqualTo(10);
        assertThat(examWithTargetScores.stream().map(ExamWithTargetScore::getTargetId).collect(toList())).containsExactlyInAnyOrder(-11, -12, -21, -22, -31, -32, -33, -34, -41, -43);
        assertThat(examWithTargetScores.stream().map(ExamWithTargetScore::getId).collect(toList())).containsOnly(-7L);
    }

    @Test
    public void findAllShouldFindNothingForUserWithoutGroupAccess() {
        final GroupExamSearch search = search().groupId(new UserGroupId(-10L, null)).build();

        //user with a different group access
        assertThat(repository.findAllByGroupExamSearch(userBuilder().build(), search)).isEmpty();

        //uer with PII access without groups
        assertThat(repository.findAllByGroupExamSearch(
                User.builderExt()
                        .id("userId")
                        .username("another@somewhere.com")
                        .password("redacted")
                        .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                        .build(), search)).isEmpty();
    }

    @Test
    public void findAllByUserGroupShouldFindNothingForUserWithoutGroupAccess() {
        final GroupExamSearch search = userGroupSearch().groupId(new UserGroupId(null, -100L)).build();

        //user with a different group access
        assertThat(repository.findAllByGroupExamSearch(userBuilder().build(), search)).isEmpty();

        //uer with PII access without groups
        assertThat(repository.findAllByGroupExamSearch(
                User.builderExt()
                        .id("userId")
                        .username("another@somewhere.com")
                        .password("redacted")
                        .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                        .build(), search)).isEmpty();
    }
}
