package org.opentestsystem.rdw.reporting.filter;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.ImmutableStudentFilter;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.StudentFilterType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.StudentFilterType.PrimaryLanguage;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserExamSearchFilterController.class)
public class UserExamSearchFilterControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserExamSearchFilterService service;

    @Test
    public void itShouldReturnTheServiceProvidedValue() throws Exception {

        when(service.get(any(User.class))).thenReturn(
            ExamSearchFilters.builder()
                    .schoolYears(ImmutableList.of(1, 2))
                    .subjects(ImmutableList.of("s1", "s2"))
                    .studentFilters(ImmutableList.of(
                            ImmutableStudentFilter.builder()
                                    .id(Gender)
                                    .values(ImmutableList.of("g1"))
                                    .build(),
                            ImmutableStudentFilter.builder()
                                    .id(PrimaryLanguage)
                                    .values(ImmutableList.of("l1", "l2"))
                                    .build()
                    ))
                .build()
        );

        mvc.perform(get("/examSearchFilters"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.schoolYears").isArray())
                .andExpect(jsonPath("$.schoolYears[0]").value(1))
                .andExpect(jsonPath("$.schoolYears[1]").value(2))
                .andExpect(jsonPath("$.subjects").isArray())
                .andExpect(jsonPath("$.subjects[0]").value("s1"))
                .andExpect(jsonPath("$.subjects[1]").value("s2"))
                .andExpect(jsonPath("$.studentFilters").isArray())
                .andExpect(jsonPath("$.studentFilters[0].id").value("Gender"))
                .andExpect(jsonPath("$.studentFilters[0].values").isArray())
                .andExpect(jsonPath("$.studentFilters[0].values[0]").value("g1"));
    }

}
