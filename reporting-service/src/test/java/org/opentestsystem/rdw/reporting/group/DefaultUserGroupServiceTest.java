package org.opentestsystem.rdw.reporting.group;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.student.Student;
import org.opentestsystem.rdw.reporting.student.StudentRepository;
import org.opentestsystem.rdw.reporting.student.StudentSearch;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.NoSuchElementException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultUserGroupServiceTest {

    @MockBean
    private UserGroupRepository repository;

    @MockBean
    private StudentRepository studentRepository;

    @MockBean
    private User user;

    private DefaultUserGroupService service;

    private Group.Builder group1 = group()
            .id(1L)
            .name("group1")
            .subjectCodes(ImmutableSet.of("subject1"))
            .studentIds(ImmutableSet.of(1L, 2L));

    private Group.Builder group() {
        return Group.builder().userCreated(true);
    }

    @Before
    public void before() {
        when(user.getUsername()).thenReturn("username");
        when(repository.findOne(any(User.class), eq(1L))).thenReturn(group1.build());
        when(studentRepository.findAll(any(User.class), any(StudentSearch.class))).thenReturn(ImmutableList.of(
                Student.builder().id(1L).build(),
                Student.builder().id(2L).build()
        ));
        this.service = new DefaultUserGroupService(repository, studentRepository);
    }

    @Test
    public void getGroupsShouldReturnSetOfGroups() {

        when(repository.findAll(any(User.class))).thenReturn(newArrayList(group1.build()));

        assertThat(service.getGroups(user))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(group1.build());
    }

    @Test
    public void getGroupShouldResolveStudents() {

        final Student student = Student.builder().id(1L).build();
        final Group before = group1.build();
        final Group after = group1.studentIds(null).students(ImmutableSet.of(student)).build();

        when(repository.findOne(any(User.class), eq(1L))).thenReturn(before);
        when(studentRepository.findAll(any(User.class), any(StudentSearch.class))).thenReturn(ImmutableList.of(student));

        assertThat(service.getGroup(user, 1L)).isEqualToComparingFieldByFieldRecursively(after);
    }

    @Test
    public void createShouldForwardCreatedGroup() {
        final Group forward = group1.build();
        when(repository.create(any(String.class), any(Group.class))).thenReturn(forward);
        assertThat(service.createGroup(user, forward)).isEqualToComparingFieldByFieldRecursively(forward);
    }

    @Test
    public void updateShouldCallRepositoryUpdate() {
        service.updateGroup(user, group1.build());
        verify(repository).update(refEq(group1.build()));
    }

    @Test
    public void deleteShouldCallRepositoryDelete() {
        service.deleteGroup(user, 1L);
        verify(repository).delete(eq(1L));
    }

    @Test(expected = NoSuchElementException.class)
    public void getGroupShouldThrowWhenGroupDoesntExist() {
        when(repository.findOne(any(User.class), any(Long.class))).thenReturn(null);
        service.getGroup(user, 999L);
    }

    @Test(expected = RuntimeException.class)
    public void createShouldThrowWhenUserDoesNotHaveAccessToOneOrMoreRequestedStudents() {
        when(studentRepository.findAll(any(User.class), any(StudentSearch.class))).thenReturn(ImmutableList.of());
        service.createGroup(user, group1.build());
    }

    @Test(expected = RuntimeException.class)
    public void updateShouldThrowWhenUserDoesNotHaveAccessToOneOrMoreRequestedStudents() {
        when(repository.findOne(any(User.class), any(Long.class))).thenReturn(group1.build());
        when(studentRepository.findAll(any(User.class), any(StudentSearch.class))).thenReturn(ImmutableList.of());
        service.updateGroup(user, group1.build());
    }

    @Test(expected = NoSuchElementException.class)
    public void deleteShouldThrowWhenGroupDoesntExist() {
        when(repository.findOne(any(User.class), any(Long.class))).thenReturn(null);
        service.deleteGroup(user, 999L);
    }

}
