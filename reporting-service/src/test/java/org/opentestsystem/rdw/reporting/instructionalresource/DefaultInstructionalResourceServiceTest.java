package org.opentestsystem.rdw.reporting.instructionalresource;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.ApplicationProperties;
import org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.District;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.DistrictGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.SchoolGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.State;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.System;

@RunWith(MockitoJUnitRunner.class)
public class DefaultInstructionalResourceServiceTest {

    @Mock
    private InstructionalResourceRepository repository;
    @Mock
    private ApplicationProperties properties;
    @Mock
    private ApplicationProperties.StateProperties stateProperties;

    private DefaultInstructionalResourceService service;

    @Before
    public void setup() {
        service = new DefaultInstructionalResourceService(repository, properties);
    }

    @Test
    public void itShouldDelegateToTheRepositoryAndMapOrderedResults() {
        final String stateName = "California";
        final List<InstructionalResource> repoResult = new ArrayList<>();
        repoResult.add(ir(System, 0));
        repoResult.add(ir(State, 0));
        repoResult.add(ir(DistrictGroup, 1));
        repoResult.add(ir(District, 1));
        repoResult.add(ir(SchoolGroup, 3));

        Collections.shuffle(repoResult);
        when(properties.getState()).thenReturn(stateProperties);
        when(stateProperties.getName()).thenReturn(stateName);
        when(repository.findByAssessmentAndSchool(123, 456))
                .thenReturn(repoResult);

        assertThat(service.findByAssessmentAndSchool(123, 456))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        ir(System, 0),
                        ir(State, 0, stateName),
                        ir(DistrictGroup, 1),
                        ir(District, 1),
                        ir(SchoolGroup, 3));
    }

    private static InstructionalResource ir(final OrganizationLevel level, final int performanceLevel) {
        return ir(level, performanceLevel, null);
    }

    private static InstructionalResource ir(final OrganizationLevel level, final int performanceLevel, final String stateName) {
        InstructionalResource.Builder builder = InstructionalResource.builder()
                .organizationLevel(level)
                .performanceLevel(performanceLevel)
                .resource("http://" + level.name() + "/" + performanceLevel)
                .organizationName(level.name());
        if (level.equals(OrganizationLevel.State)) {
            builder.organizationName(stateName);
        }
        return builder.build();
    }
}