package org.opentestsystem.rdw.reporting.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = GroupController.class)
public class GroupControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupService service;

    @Test
    public void itShouldReturnWhatServiceReturns() throws Exception {

        final Group group1 = Group.builder().id(1L).subjectCode("s1").schoolId(1).name("g1").build();
        final Group group2 = Group.builder().id(2L).subjectCode("s2").schoolId(2).name("g2").build();
        final Set<Group> groups = newHashSet(group1, group2);

        when(service.getGroups(any(User.class))).thenReturn(groups);

        mvc.perform(get("/groups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[?(@.id==1 && @.subjectCode=='s1' && @.name=='g1' && @.schoolId==1)]").exists())
                .andExpect(jsonPath("$[?(@.id==2 && @.subjectCode=='s2' && @.name=='g2' && @.schoolId==2)]").exists());
    }

}