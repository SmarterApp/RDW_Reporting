package org.opentestsystem.rdw.reporting.group;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = UserGroupController.class)
public class UserGroupControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserGroupService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void getGroupsShouldReturnGroups() throws Exception {

        final Group group1 = Group.builder().id(1L).name("g1").userCreated(true).build();
        final Group group2 = Group.builder().id(2L).name("g2").userCreated(true).build();
        final Set<Group> groups = newHashSet(group1, group2);

        when(service.getGroups(any(User.class))).thenReturn(groups);

        mvc.perform(get("/userGroups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[?(@.id==1 && @.name=='g1' && @.userCreated==true)]").exists())
                .andExpect(jsonPath("$[?(@.id==2 && @.name=='g2' && @.userCreated==true)]").exists());
    }

    @Test
    public void getGroupShouldReturnAGroup() throws Exception {

        final Group group = Group.builder().id(1L).name("g1").build();

        when(service.getGroup(any(User.class), eq(1L))).thenReturn(group);

        mvc.perform(get("/userGroups/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("g1"));
    }

    @Test
    public void getGroupShouldReturn404WhenGroupIsMissing() throws Exception {

        when(service.getGroup(any(User.class), eq(1L))).thenThrow(new NoSuchElementException());

        mvc.perform(get("/userGroups/1"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createGroupShouldReturnTheGroup() throws Exception {

        final Group groupWithoutId = Group.builder().name("g1").build();
        final Group groupWithId = Group.builder().id(1L).name("g1").build();

        when(service.createGroup(any(User.class), refEq(groupWithoutId))).thenReturn(groupWithId);

        mvc.perform(post("/userGroups")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(groupWithoutId)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("g1"));
    }

    @Test
    public void updateGroupShouldCallService() throws Exception {

        final Group group = Group.builder().id(1L).name("g1").build();

        mvc.perform(put("/userGroups")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(group)))
                .andExpect(status().isOk());

        verify(service).updateGroup(any(User.class), refEq(group));

    }

    @Test
    public void deleteGroupShouldCallService() throws Exception {

        final Group group = Group.builder().id(1L).name("g1").build();

        mvc.perform(delete("/userGroups/1"))
                .andExpect(status().isOk());

        verify(service).deleteGroup(any(User.class), eq(1L));

    }


}