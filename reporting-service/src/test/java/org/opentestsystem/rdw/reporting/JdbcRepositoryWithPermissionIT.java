package org.opentestsystem.rdw.reporting;

import com.google.common.collect.ImmutableMap;
import org.junit.After;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;
import java.util.UUID;

import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public abstract class JdbcRepositoryWithPermissionIT {

    @Autowired
    private TenantProperties tenantProperties;

    protected final static Map<String, Permission> individualStatewide = ImmutableMap.copyOf(permissions(individualOf(PermissionScope.STATEWIDE)));
    protected final static Map<String, Permission> groupStatewide = ImmutableMap.copyOf(permissions(groupOf(PermissionScope.STATEWIDE)));

    protected User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone-10@somewhere.com")
                .password("redacted");
    }

    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    protected TenantProperties getTenantProperties() {
        return tenantProperties;
    }
}