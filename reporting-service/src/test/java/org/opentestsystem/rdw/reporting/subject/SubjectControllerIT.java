package org.opentestsystem.rdw.reporting.subject;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.service.SubjectDefinitionService;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = SubjectController.class)
public class SubjectControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SubjectService subjectService;

    @MockBean
    private SubjectDefinitionService definitionService;

    @Test
    public void itShouldReturnSubjects() throws Exception {
        when(subjectService.getSubjectCodes()).thenReturn(ImmutableList.of("subject_a", "subject_b", "subject_c"));

        mvc.perform(get("/subjects"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(3)))
                .andExpect(jsonPath("$[0]").value("subject_a"))
                .andExpect(jsonPath("$[1]").value("subject_b"))
                .andExpect(jsonPath("$[2]").value("subject_c"));
    }

    @Test
    public void itShouldReturnSubjectDefinitions() throws Exception {
        final SubjectDefinition icaMath = SubjectDefinition.builder()
                .asmtTypeCode("ica")
                .subjectCode("Math")
                .performanceLevelCount(4)
                .performanceLevelStandardCutoff(3)
                .claimScorePerformanceLevelCount(3)
                .build();
        final SubjectDefinition iabEla = SubjectDefinition.builder()
                .asmtTypeCode("iab")
                .subjectCode("ELA")
                .performanceLevelCount(3)
                .build();
        when(definitionService.findAll()).thenReturn(ImmutableList.of(icaMath, iabEla));

        mvc.perform(get("/subjects/definitions"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].asmtTypeCode").value("ica"))
                .andExpect(jsonPath("$[0].subjectCode").value("Math"))
                .andExpect(jsonPath("$[0].performanceLevelCount").value(4))
                .andExpect(jsonPath("$[0].performanceLevelStandardCutoff").value(3))
                .andExpect(jsonPath("$[0].claimScorePerformanceLevelCount").value(3))
                .andExpect(jsonPath("$[1].asmtTypeCode").value("iab"))
                .andExpect(jsonPath("$[1].subjectCode").value("ELA"))
                .andExpect(jsonPath("$[1].performanceLevelCount").value(3))
                .andExpect(jsonPath("$[1].performanceLevelStandardCutoff").doesNotExist())
                .andExpect(jsonPath("$[1].claimScorePerformanceLevelCount").doesNotExist());
    }
}
