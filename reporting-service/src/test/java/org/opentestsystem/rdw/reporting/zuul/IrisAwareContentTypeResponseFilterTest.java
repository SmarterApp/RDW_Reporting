package org.opentestsystem.rdw.reporting.zuul;

import com.netflix.zuul.context.RequestContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.bind.annotation.RequestMethod;

import static org.assertj.core.api.Assertions.assertThat;

public class IrisAwareContentTypeResponseFilterTest {
    private RequestContext requestContext;
    private IrisAwareContentTypeResponseFilter filter;
    private MockHttpServletRequest request;
    private MockHttpServletResponse response;

    @Before
    public void setup() {
        filter = new IrisAwareContentTypeResponseFilter();

        response = new MockHttpServletResponse();
        request = new MockHttpServletRequest(RequestMethod.POST.name(), "/iris/pages/api/resources.axd");

        request.addParameter("file", "image.png");
        request.addParameter("path", "test/path/here/");

        requestContext = new RequestContext();
        requestContext.setRequest(request);
        requestContext.setResponse(response);

        RequestContext.testSetCurrentContext(requestContext);
    }

    @After
    public void tearDown() {
        RequestContext.testSetCurrentContext(null);
    }

    @Test
    public void itShouldNotFilterNonIrisRequests() {
        request.setRequestURI("/somewhere/else");
        final boolean actual = filter.shouldFilter();

        assertThat(actual).isFalse();
    }

    @Test
    public void itShouldNotFilterNonResourceRequests() {
        request.setRequestURI("/iris/pages/api");
        final boolean actual = filter.shouldFilter();

        assertThat(actual).isFalse();
    }

    @Test
    public void itShouldNotFilterIfContentTypeIsAlreadySet() {
        response.setContentType("image/jpeg");
        final boolean actual = filter.shouldFilter();

        assertThat(actual).isFalse();
    }

    @Test
    public void itShouldFilterResourceRequestWithMissingContentType() {
        final boolean actual = filter.shouldFilter();
        assertThat(actual).isTrue();
    }

    @Test
    public void itShouldSetContentTypeFromFileName() {
        filter.run();
        assertThat(requestContext.getResponse().getHeader(HttpHeaders.CONTENT_TYPE)).isEqualToIgnoringCase("image/png");
    }

    @Test
    public void itShouldIgnoreIfNoFileQueryParam() {
        request.removeAllParameters();

        filter.run();
        assertThat(requestContext.getResponse().getHeader(HttpHeaders.CONTENT_TYPE)).isNull();
    }
}
