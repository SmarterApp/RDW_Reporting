package org.opentestsystem.rdw.reporting.exam.student;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;


/**
 * Test all possible combinations of the 'permission' clause with the school year outside of the embargoed one
 * All tests are with one existing student since the purpose is to test the permission portion of the SQL only.
 */
@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Import(JdbcStudentExamRepository.class)
@Sql(scripts = {"classpath:reporting-permissions-integration-test-data.sql"})
public class JdbcExamPermissionIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private StudentExamRepository repository;

    @Autowired
    private JdbcTemplate template;

    private int examCount;
    private int mathExamCount;

    private int school10ExamCount;
    private int school10MathExamCount;

    private int schoolGroup10ExamCount;
    private int schoolGroup10MathExamCount;

    private int district20ExamCount;
    private int district20MathExamCount;

    private int districtGroup10ExamCount;
    private int districtGroup10MathExamCount;

    @Before
    public void setUp() {
        examCount = template.queryForObject("SELECT count(*) FROM exam e WHERE e.student_id = -1", Integer.class);
        mathExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN asmt a ON e.asmt_id = a.id WHERE e.student_id = -1 AND a.subject_id = 1", Integer.class);

        school10ExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN school s ON e.school_id = s.id WHERE s.id = -10 AND e.student_id = -1", Integer.class);
        school10MathExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN asmt a ON e.asmt_id = a.id JOIN school s ON e.school_id = s.id WHERE s.id = -10 AND e.student_id = -1 AND a.subject_id = 1", Integer.class);

        schoolGroup10ExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN school s ON e.school_id = s.id WHERE s.school_group_id = -10 AND e.student_id = -1", Integer.class);
        schoolGroup10MathExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN asmt a ON e.asmt_id = a.id JOIN school s ON e.school_id = s.id WHERE s.school_group_id = -10 AND e.student_id = -1 AND a.subject_id = 1", Integer.class);

        district20ExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN school s ON e.school_id = s.id WHERE s.district_id = -20 AND e.student_id = -1", Integer.class);
        district20MathExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN asmt a ON e.asmt_id = a.id JOIN school s ON e.school_id = s.id WHERE s.district_id = -20 AND e.student_id = -1 AND a.subject_id = 1", Integer.class);

        districtGroup10ExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN school s ON e.school_id = s.id WHERE s.district_group_id = -10 AND e.student_id = -1", Integer.class);
        districtGroup10MathExamCount = template.queryForObject("SELECT count(*) FROM exam e JOIN asmt a ON e.asmt_id = a.id JOIN school s ON e.school_id = s.id WHERE s.district_group_id = -10 AND e.student_id = -1  AND a.subject_id = 1", Integer.class);
    }

    @Test
    public void itShouldFindExamsForUserWithPIIPermission() {

        //check that the data is set up properly for this test
        assertThat(examCount).isGreaterThan(0);
        assertThat(school10ExamCount).isGreaterThan(0);
        assertThat(schoolGroup10ExamCount).isGreaterThan(0);
        assertThat(district20ExamCount).isGreaterThan(0);
        assertThat(districtGroup10ExamCount).isGreaterThan(0);


        assertThat(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), -1L).size()).isEqualTo(examCount);

        //each test verifies valid and invalid organization
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-10L)))).build(), -1L).size()).isEqualTo(school10ExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-10L)))).build(), -1L).size()).isEqualTo(schoolGroup10ExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districts(-20L)))).build(), -1L).size()).isEqualTo(district20ExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districts(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districtGroups(-10L)))).build(), -1L).size()).isEqualTo(districtGroup10ExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districtGroups(-99L)))).build(), -1L)).isEmpty();
    }

    @Test
    public void itShouldFindNothingForUserWithoutRequiredPermission() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", new PermissionScope.Builder().statewide(true).build()))).build(), -1L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", schools(-10L)))).build(), -1L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", districts(-20L)))).build(), -1L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", schoolGroups(-10L)))).build(), -1L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", districtGroups(-10L)))).build(), -1L)).isEmpty();
    }

    @Test
    public void itShouldFindExamsForUserWithPIIPermissionAndTransferEnabled() {
        final int countExamWithoutTransfer = template.queryForObject("SELECT count(*) FROM exam e JOIN school s ON e.school_id = s.id " +
                "WHERE s.id = -40 AND e.student_id = -100", Integer.class);

        final int countExamTransfers = template.queryForObject("SELECT count(*) FROM exam e JOIN student st ON st.id = e.student_id JOIN school s ON st.inferred_school_id = s.id " +
                "WHERE s.id = -40 AND e.student_id = -100 AND e.school_id <> st.inferred_school_id", Integer.class);

        //check that the data is set up properly for this test
        assertThat(countExamTransfers).isGreaterThan(0);
        assertThat(countExamWithoutTransfer).isGreaterThan(0);

        getSystemSettings().setTransferAccessEnabled(false);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districts(-30L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districtGroups(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer);

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer + countExamTransfers);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer + countExamTransfers);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districts(-30L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer + countExamTransfers);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districtGroups(-40L)))).build(), -100L).size()).isEqualTo(countExamWithoutTransfer + countExamTransfers);

        //verify that transfer flag requires a valid organization
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-99L)))).build(), -100L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-99L)))).build(), -100L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districts(-99L)))).build(), -100L)).isEmpty();
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(districtGroups(-99L)))).build(), -100L)).isEmpty();
    }

    @Test
    public void itShouldFindExamsForUserWithGroupPermission() {

        // verify that it is restricted to the group subject
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).build(), -1L).size()).isEqualTo(mathExamCount);

        //each test verifies valid and invalid organization
        assertThat(school10MathExamCount).isLessThan(mathExamCount);

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).build(), -1L).size()).isEqualTo(school10MathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L, -20L, -30L, -40L)))).build(), -1L).size()).isEqualTo(mathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schoolGroups(-10L)))).build(), -1L).size()).isEqualTo(schoolGroup10MathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schoolGroups(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(districts(-20L)))).build(), -1L).size()).isEqualTo(district20MathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(districts(-99L)))).build(), -1L)).isEmpty();

        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(districtGroups(-10L)))).build(), -1L).size()).isEqualTo(districtGroup10MathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(districtGroups(-99L)))).build(), -1L)).isEmpty();

        // verify that it is restricted to the group user
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).username("someoneelse@somewhere.com").build(), -1L)).isEmpty();
    }

    @Test
    public void itShouldFindExamsForUserWithGroupPermissionAndTransferAccessEnabled() {

        //each test verifies valid and invalid organization
        assertThat(school10MathExamCount).isLessThan(mathExamCount);

        //verify data before enabling access
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).build(), -1L).size()).isEqualTo(school10MathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L, -20L, -30L, -40L)))).build(), -1L).size()).isEqualTo(mathExamCount);

        getSystemSettings().setTransferAccessEnabled(true);


        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).build(), -1L).size()).isEqualTo(mathExamCount);
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-99L)))).build(), -1L)).isEmpty();

        // verify that it is restricted to the group user
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).username("someoneelse@somewhere.com").build(), -1L)).isEmpty();
    }

    @Test
    public void itShouldFindExamsForUserWithBothGroupAndPiiPermission() {

        //check the data with just group permission
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).build(), -1L).size()).isLessThan(examCount);

        // PII allows for a view outside of the group
        final Map<String, Permission> multiplePermissions = Stream.concat(groupStatewide.entrySet().stream(), individualStatewide.entrySet().stream())
                .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue()));
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(multiplePermissions).build(), -1L).size()).isEqualTo(examCount);
    }
}