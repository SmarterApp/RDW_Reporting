package org.opentestsystem.rdw.reporting.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultGroupServiceTest {

    @MockBean
    private GroupRepository repository;

    private DefaultGroupService service;

    @Before
    public void before() {
        this.service = new DefaultGroupService(repository);
    }

    @Test
    public void itShouldForwardsUserInfo() throws Exception {
        final Group group = Group.builder().id(10L).subjectCode("Math").build();
        final User user = statewideGroupUser()
                .build();

        when(repository.findAllForUsername(user.getUsername())).thenReturn(newArrayList(group));
        assertThat(service.getGroups(user))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(group);
    }

    @Test
    public void itShouldFindGroupById() throws Exception {
        final Group group = Group.builder().id(10L).subjectCode("Math").build();
        final User user = statewideGroupUser()
                .build();

        when(repository.findOneByUsernameAndId(user.getUsername(), 10)).thenReturn(group);
        assertThat(service.getGroup(user, 10))
                .isEqualTo(group);
    }

    @Test
    public void itShouldReturnEmptyResultsWhenNotPermitted() {
        final User user = User.builderExt()
                .id("user")
                .username("user")
                .password("password").permissionsById(ImmutableMap.of())
                .build();
        assertThat(service.getGroups(user)).isEmpty();

        final Group expected = Group.builder().build();
        final Group group = Group.builder().id(10L).subjectCode("Math").build();
        when(repository.findOneByUsernameAndId(user.getUsername(), 10)).thenReturn(group);
        assertThat(service.getGroup(user, 10))
                .isEqualToComparingFieldByField(expected);
    }

    private User.Builder statewideGroupUser() {
        return User.builderExt()
                .id("user")
                .username("user")
                .password("password")
                .permissionsById(ImmutableMap.of(
                        GroupPiiRead, new Permission(GroupPiiRead, PermissionScope.STATEWIDE)
                ));
    }

}
