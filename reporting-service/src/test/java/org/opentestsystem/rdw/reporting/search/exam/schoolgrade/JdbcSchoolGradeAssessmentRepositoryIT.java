package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeAssessmentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeAssessmentRepositoryIT {

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcSchoolGradeAssessmentRepository repository;

    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    private SchoolGradeAssessmentSearch.Builder search() {
        return SchoolGradeAssessmentSearch.builder()
                .schoolId(-30)
                .gradeId(-1)
                .schoolYear(1997);
    }

    @Test
    public void findLatestShouldFindTheLatestExam() throws Exception {
        final Assessment actual = repository.findLatest(PermissionScope.STATEWIDE, search().build());
        assertThat(actual).isEqualTo(TestData.ASSESSMENTS_BY_ID.get(-3L));
    }

    @Test
    public void findLatestOfBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(
                PermissionScope.builder().addSchoolId(-100).build(), search().build())).isNull();
    }

    @Test
    public void findLatestOfBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, search().schoolId(-40).build())).isNull();
    }

    @Test
    public void findLatestOfBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, search().gradeId(-2).build())).isNull();
    }

    @Test
    public void findLatestOfAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, search().schoolYear(2016).build())).isNull();
    }

    @Test
    public void itShouldFindAllAssessmentsRespectingTransferAccess() throws Exception {
        final SchoolGradeAssessmentSearch query = search()
                .schoolId(-40)
                .schoolYear(1998)
                .build();
        final List<Assessment> withoutTransfer = repository.findAll(PermissionScope.STATEWIDE, query);
        assertThat(withoutTransfer.stream().map(Assessment::getId))
                .containsOnly(-2L);

        tenantProperties.setTransferAccessEnabled(true);
        final List<Assessment> withTransfer = repository.findAll(PermissionScope.STATEWIDE, query);
        assertThat(withTransfer.stream().map(Assessment::getId))
                .containsOnly(-1L, -2L);
    }
}
