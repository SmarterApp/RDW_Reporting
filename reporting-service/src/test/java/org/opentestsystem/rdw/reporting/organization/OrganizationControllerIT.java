package org.opentestsystem.rdw.reporting.organization;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(OrganizationController.class)
public class OrganizationControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private OrganizationService service;

    @Test
    public void schoolsShouldReturnWhatServiceReturns() throws Exception {

        when(service.getSchools(any(User.class), any(OrganizationQuery.class))).thenReturn(
                ImmutableList.of(
                        School.builder().id(1L).name("schoolName1").schoolGroupId(1L).districtGroupId(2L).districtId(3).build(),
                        School.builder().id(2L).name("schoolName2").schoolGroupId(4L).districtGroupId(5L).districtId(6).build()
                )
        );

        mvc.perform(get("/organizations/schools"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].name").value("schoolName1"))
                .andExpect(jsonPath("$[0].schoolGroupId").value("1"))
                .andExpect(jsonPath("$[0].districtGroupId").value("2"))
                .andExpect(jsonPath("$[0].districtId").value("3"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].name").value("schoolName2"))
                .andExpect(jsonPath("$[1].schoolGroupId").value("4"))
                .andExpect(jsonPath("$[1].districtGroupId").value("5"))
                .andExpect(jsonPath("$[1].districtId").value("6"))
        ;
    }

    @Test
    public void schoolGroupsShouldReturnWhatServiceReturns() throws Exception {

        when(service.getSchoolGroups(any(User.class))).thenReturn(
                ImmutableList.of(
                        SchoolGroup.builder().id(1L).name("schoolGroup1").districtGroupId(2L).districtId(3L).build(),
                        SchoolGroup.builder().id(2L).name("schoolGroup2").districtGroupId(5L).districtId(6L).build()
                )
        );

        mvc.perform(get("/organizations/schoolGroups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].name").value("schoolGroup1"))
                .andExpect(jsonPath("$[0].districtGroupId").value("2"))
                .andExpect(jsonPath("$[0].districtId").value("3"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].name").value("schoolGroup2"))
                .andExpect(jsonPath("$[1].districtGroupId").value("5"))
                .andExpect(jsonPath("$[1].districtId").value("6"))
        ;
    }

    @Test
    public void districtsShouldReturnWhatServiceReturns() throws Exception {

        when(service.getDistricts(any(User.class))).thenReturn(
                ImmutableList.of(
                        District.builder().id(1L).name("districtName1").districtGroupId(2L).build(),
                        District.builder().id(2L).name("districtName2").districtGroupId(5L).build()
                )
        );

        mvc.perform(get("/organizations/districts"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].name").value("districtName1"))
                .andExpect(jsonPath("$[0].districtGroupId").value("2"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].name").value("districtName2"))
                .andExpect(jsonPath("$[1].districtGroupId").value("5"))
        ;
    }

    @Test
    public void districtGroupsShouldReturnWhatServiceReturns() throws Exception {

        when(service.getDistrictGroups(any(User.class))).thenReturn(
                ImmutableList.of(
                        DistrictGroup.builder().id(1L).name("districtGroupName1").build(),
                        DistrictGroup.builder().id(2L).name("districtGroupName2").build()
                )
        );

        mvc.perform(get("/organizations/districtGroups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].name").value("districtGroupName1"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].name").value("districtGroupName2"))
        ;
    }
}
