package org.opentestsystem.rdw.reporting.target;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Optional;

import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(TargetController.class)
@WithMockUser(username = "test")
public class TargetControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TargetService service;

    @Test
    public void getShouldReturnTarget() throws Exception {
        Target actual = Target.builder()
                .id(1)
                .description("test")
                .build();

        when(service.get(anyInt()))
                .thenReturn(Optional.of(actual));

        mvc.perform(get("/api/targets/1"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(jsonPath("$.id").value("1"))
                .andExpect(jsonPath("$.description").value("test"));
    }

    @Test
    public void getShouldReturn404IfNotFound() throws Exception {
        when(service.get(anyInt()))
                .thenReturn(Optional.empty());

        mvc.perform(get("/api/targets/1"))
                .andExpect(status().is(404));
    }
}
