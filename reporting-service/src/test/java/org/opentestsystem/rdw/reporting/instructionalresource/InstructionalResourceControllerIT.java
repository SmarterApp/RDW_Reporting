package org.opentestsystem.rdw.reporting.instructionalresource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.District;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.DistrictGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.SchoolGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.State;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.System;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(InstructionalResourceController.class)
public class InstructionalResourceControllerIT extends UserAwareControllerSupport {
    private static final long AssessmentId = 123;
    private static final long SchoolId = 456;

    @Autowired
    private MockMvc mvc;

    @MockBean
    private InstructionalResourceService service;

    @Test
    public void itShouldSendAnEmptyPayloadWhenNoResultsAreFound() throws Exception {
        when(service.findByAssessmentAndSchool(AssessmentId, SchoolId))
                .thenReturn(new ArrayList<>());

        mvc.perform(get("/instructional-resources?assessmentId=123&schoolId=456"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(0)));
    }

    @Test
    public void itShouldReturnOrderedInstructionalResources() throws Exception {
        final List<InstructionalResource> resources = new ArrayList<>();
        resources.add(InstructionalResource.builder()
                .resource("http://system/assessment-wide")
                .organizationLevel(System)
                .performanceLevel(0)
                .build());
        resources.add(InstructionalResource.builder()
                .resource("http://state/assessment-wide")
                .organizationLevel(State)
                .performanceLevel(0)
                .build());
        resources.add(InstructionalResource.builder()
                .resource("http://district-group/assessment-wide")
                .organizationLevel(DistrictGroup)
                .organizationName("District Group")
                .performanceLevel(0)
                .build());
        resources.add(InstructionalResource.builder()
                .resource("http://district/assessment-wide")
                .organizationLevel(District)
                .organizationName("District")
                .performanceLevel(0)
                .build());
        resources.add(InstructionalResource.builder()
                .resource("http://school-group/assessment-wide")
                .organizationLevel(SchoolGroup)
                .organizationName("School Group")
                .performanceLevel(0)
                .build());
        resources.add(InstructionalResource.builder()
                .resource("http://school-group/performance-level-3")
                .organizationLevel(SchoolGroup)
                .organizationName("School Group")
                .performanceLevel(3)
                .build());

        when(service.findByAssessmentAndSchool(AssessmentId, SchoolId))
                .thenReturn(resources);

        mvc.perform(get("/instructional-resources?assessmentId=123&schoolId=456"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(6)))
                .andExpect(jsonPath("$[0].organizationLevel").value("System"))
                .andExpect(jsonPath("$[0].resource").value("http://system/assessment-wide"))
                .andExpect(jsonPath("$[0].performanceLevel").value(0))
                .andExpect(jsonPath("$[5].organizationName", equalTo("School Group")));
    }
}