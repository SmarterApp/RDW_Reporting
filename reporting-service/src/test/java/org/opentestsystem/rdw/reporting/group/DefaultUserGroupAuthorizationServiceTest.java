package org.opentestsystem.rdw.reporting.group;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultUserGroupAuthorizationServiceTest {

    private final DefaultUserGroupAuthorizationService service = new DefaultUserGroupAuthorizationService();

    private User user(Permission... permissions) {
        return User.builder()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(permissions(permissions))
                .build();
    }

    @Test
    public void itShouldAllowSchoolLevelPii() {
        final PermissionSource schoolLevelIndividualPii = user(individualOf(
                PermissionScope.builder().addSchoolId(1).build()
        ));
        final PermissionSource schoolLevelGroupPii = user(groupOf(
                PermissionScope.builder().addSchoolId(1).build()
        ));

        assertThat(service.isAuthorized(schoolLevelIndividualPii)).isTrue();
        assertThat(service.isAuthorized(schoolLevelGroupPii)).isTrue();
    }

    @Test
    public void itShouldNotAllowNonSchoolLevelPii() {
        final PermissionSource empty = user();
        final PermissionSource schoolGroup = user(individualOf(
                PermissionScope.builder().addSchoolGroupId(1).build()
        ));
        final PermissionSource district = user(individualOf(
                PermissionScope.builder().addDistrictId(1).build()
        ));
        final PermissionSource districtGroup = user(individualOf(
                PermissionScope.builder().addDistrictGroupId(1).build()
        ));
        final PermissionSource statewide = user(individualOf(
                PermissionScope.STATEWIDE
        ));

        assertThat(service.isAuthorized(empty)).isFalse();
        assertThat(service.isAuthorized(schoolGroup)).isFalse();
        assertThat(service.isAuthorized(district)).isFalse();
        assertThat(service.isAuthorized(districtGroup)).isFalse();
        assertThat(service.isAuthorized(statewide)).isFalse();
    }

}
