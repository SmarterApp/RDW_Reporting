package org.opentestsystem.rdw.reporting.filter;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ImmutableStudentFilter;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFilter;
import org.opentestsystem.rdw.reporting.common.security.ReportingPermission;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.elas.ElasService;
import org.opentestsystem.rdw.reporting.ethnicity.EthnicityService;
import org.opentestsystem.rdw.reporting.gender.GenderService;
import org.opentestsystem.rdw.reporting.language.LanguageService;
import org.opentestsystem.rdw.reporting.militaryconnected.MilitaryConnectedService;
import org.opentestsystem.rdw.reporting.schoolyear.SchoolYearService;
import org.opentestsystem.rdw.reporting.subject.SubjectService;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.EnglishLanguageAcquisitionStatus;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.IndividualEducationPlan;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.LimitedEnglishProficiency;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.MilitaryStudentIdentifier;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.PrimaryLanguage;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Section504;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultUserExamSearchFilterServiceTest {

    private List<StudentFilter> studentFilters;

    @MockBean
    private ReportingSystemSettings settings;

    @MockBean
    private SchoolYearService schoolYearService;

    @MockBean
    private EthnicityService ethnicityService;

    @MockBean
    private GenderService genderService;

    @MockBean
    private ElasService elasService;

    @MockBean
    private LanguageService languageService;

    @MockBean
    private MilitaryConnectedService militaryConnectedService;

    @MockBean
    private SubjectService subjectService;

    private DefaultUserExamSearchFilterService service;

    private User user(final String permission) {
        return User.builderExt()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(
                        ImmutableMap.<String, Permission>builder()
                                .put(permission, new Permission(permission, PermissionScope.STATEWIDE))
                                .build()
                )
                .build();
    }

    private User embargoAdmin() {
        return user(ReportingPermission.EmbargoRead);
    }

    private User schoolAdmin() {
        return user(ReportingPermission.IndividualPiiRead);
    }

    private User teacher() {
        return user(ReportingPermission.GroupPiiRead);
    }

    @Before
    public void before() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of());
        when(schoolYearService.getSchoolYears()).thenReturn(ImmutableList.of(1, 2, 3));
        when(ethnicityService.getEthnicityCodes()).thenReturn(ImmutableList.of("ethnicity1", "ethnicity2"));
        when(genderService.getGenderCodes()).thenReturn(ImmutableList.of("gender1", "gender2"));
        when(elasService.getElasCodes()).thenReturn(ImmutableList.of("elas1", "elas2"));
        when(languageService.getLanguageCodes()).thenReturn(ImmutableList.of("language1", "language2"));
        when(militaryConnectedService.getMilitaryConnectedCodes()).thenReturn(ImmutableList.of("m1", "m2"));
        when(subjectService.getSubjectCodes()).thenReturn(ImmutableList.of("subject1", "subject2"));

        final List<String> strictBooleans = ImmutableList.of("yes", "no");
        this.studentFilters = ImmutableList.of(
                ImmutableStudentFilter.builder()
                        .id(EconomicDisadvantage)
                        .values(strictBooleans)
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(EnglishLanguageAcquisitionStatus)
                        .values(elasService.getElasCodes())
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(Ethnicity)
                        .values(ethnicityService.getEthnicityCodes())
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(Gender)
                        .values(genderService.getGenderCodes())
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(IndividualEducationPlan)
                        .values(strictBooleans)
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(LimitedEnglishProficiency)
                        .values(strictBooleans)
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(MigrantStatus)
                        .values(strictBooleans)
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(MilitaryStudentIdentifier)
                        .values(militaryConnectedService.getMilitaryConnectedCodes())
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(PrimaryLanguage)
                        .values(languageService.getLanguageCodes())
                        .build(),
                ImmutableStudentFilter.builder()
                        .id(Section504)
                        .values(strictBooleans)
                        .build()
        );

        this.service = new DefaultUserExamSearchFilterService(
                settings,
                this.schoolYearService,
                this.ethnicityService,
                this.genderService,
                this.elasService,
                this.languageService,
                this.militaryConnectedService,
                this.subjectService
        );
    }

    @Test
    public void itShouldReturnValuesFromServices() {
        final ExamSearchFilters actual = service.get(schoolAdmin());
        final ExamSearchFilters expected = ExamSearchFilters.builder()
                .schoolYears(schoolYearService.getSchoolYears())
                .subjects(subjectService.getSubjectCodes())
                .studentFilters(studentFilters)
                .build();
        assertThat(actual).isEqualToComparingFieldByFieldRecursively(expected);
    }

    @Test
    public void itShouldNotFilterOutAdminFiltersWhenNoPermissionLevelIsSet() {
        assertThat(service.get(teacher()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);

        assertThat(service.get(schoolAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);

        assertThat(service.get(embargoAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);
    }

    @Test
    public void itShouldNotFilterOutAdminFiltersWhenSetToEnabled() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Enabled
        ));

        assertThat(service.get(teacher()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);

        assertThat(service.get(schoolAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);

        assertThat(service.get(embargoAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);
    }

    @Test
    public void itShouldFilterOutAdminFiltersForTeachers() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Admin
        ));

        final List<StudentFilter> expected = studentFilters.stream()
                .filter(filter -> filter.getId() != Gender)
                .collect(toList());

        assertThat(service.get(teacher()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(schoolAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFilters);

        assertThat(service.get(embargoAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);
    }

    @Test
    public void itShouldFilterOutDisabledFiltersForEveryone() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Disabled
        ));

        final List<StudentFilter> expected = studentFilters.stream()
                .filter(filter -> filter.getId() != Gender)
                .collect(toList());

        assertThat(service.get(teacher()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(schoolAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(embargoAdmin()).getStudentFilters())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);
    }

}
