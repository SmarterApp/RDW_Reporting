package org.opentestsystem.rdw.reporting.exam.schoolgrade;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.model.ExamItem;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;


@Import(JdbcSchoolGradeExamItemRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcSchoolGradeExamItemRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private SchoolGradeExamItemRepository repository;

    private SchoolGradeExamSearch.Builder search() {
        return SchoolGradeExamSearch.builder()
                .schoolId(-10)
                .gradeId(-1)
                .assessmentId(-1)
                .schoolYear(1997);
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingAssessment() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(individualStatewide).build(), search().assessmentId(0).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingYear() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(individualStatewide).build(), search().schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingSchool() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(individualStatewide).build(), search().schoolId(-100).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingGrade() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(individualStatewide).build(), search().gradeId(-100).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldReturnAllItems() {
        final Collection<ExamItem> examItems = repository.findAllExamItemScoresForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().build());
        assertThat(examItems)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItem.builder()
                                .examId(-1)
                                .itemId(-1)
                                .points(0)
                                .position(1)
                                .response("A")
                                .build(),
                        ExamItem.builder()
                                .examId(-1)
                                .itemId(-2)
                                .points(1)
                                .position(2)
                                .response("D")
                                .writingTraitScores(2, 3, 1)
                                .build()
                );
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccess() {
        final SchoolGradeExamSearch query = search()
                .schoolYear(1998)
                .schoolId(-40)
                .build();

        final User user = userBuilder.permissionsById(individualStatewide).build();
        assertThat(repository.findAllExamItemScoresForAssessment(user, query)).isEmpty();

        getReportingSystemProperties().setTransferAccessEnabled(true);
        assertThat(repository.findAllExamItemScoresForAssessment(user, query).stream().map(ExamItem::getExamId)).containsOnly(-100L);
    }
}