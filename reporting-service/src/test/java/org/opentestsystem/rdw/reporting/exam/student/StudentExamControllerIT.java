package org.opentestsystem.rdw.reporting.exam.student;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.StudentHistoryExamWrapper;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.TestData.MATH;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(StudentExamController.class)
public class StudentExamControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private StudentExamService service;

    @Test
    public void getStudentExamsShouldReturn404WhenStudentNotFound() throws Exception {
        when(service.getExams(any(User.class), eq(123L))).thenThrow(new NoSuchElementException(""));
        mvc.perform(get("/students/123/exams"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getStudentExamsShouldReturnHistoryWhenFound() throws Exception {
        final Student student = student(1);
        final StudentHistoryExamWrapper wrapper1 = wrapper(1);
        final StudentHistoryExamWrapper wrapper2 = wrapper(2);

        when(service.getExams(any(User.class), eq(123L))).thenReturn(
                new StudentExamHistory(
                        student,
                        ImmutableSet.of(wrapper1, wrapper2)
                )
        );

        mvc.perform(get("/students/123/exams"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.student.id").value((int) student.getId()))
                .andExpect(jsonPath("$.exams.[*].assessment[?(@.id==1)].id").exists())
                .andExpect(jsonPath("$.exams.[*].assessment[?(@.id==2)].id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==1)].id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==2)].id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==1)].school.id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==2)].school.id").exists());
    }

    @Test
    public void itShouldRetrieveAStudentWithExams() throws Exception {
        final Student student = student(1);
        when(service.findStudentWithExams(any(User.class), eq("a")))
                .thenReturn(student);

        mvc.perform(get("/students/a?hasExams=true"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value((int) student.getId()));
    }

    @Test
    public void itShouldReturnA404IfAStudentWithExamsCannotBeFound() throws Exception {
        when(service.findStudentWithExams(any(User.class), eq("a")))
                .thenThrow(new NoSuchElementException("Bad Juju"));

        mvc.perform(get("/students/a?hasExams=true"))
                .andExpect(status().isNotFound());
    }

    private Student student(final int id) {
        return Student.builder()
                .id(id)
                .build();
    }

    private StudentHistoryExamWrapper wrapper(final int id) {
        return new StudentHistoryExamWrapper.Builder()
                .assessment(assessment(id))
                .exam(exam(id, school(id)))
                .build();
    }

    private Assessment assessment(final int id) {
        return Assessment.builder()
                .id(id)
                .type(AssessmentType.IAB)
                .subjectCode(MATH)
                .build();
    }

    private School school(final long id) {
        return School.builder()
                .id(id)
                .districtId(id)
                .name("school" + id)
                .build();
    }

    private Exam exam(final int id, final School school) {
        return Exam.builder()
                .id(id)
                .school(school)
                .build();
    }

}