package org.opentestsystem.rdw.reporting.exam.schoolgrade;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import(JdbcSchoolGradeAssessmentRepository.class)
public class JdbcSchoolGradeAssessmentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private SchoolGradeAssessmentRepository repository;

    private SchoolGradeAssessmentSearch.Builder search() {
        return SchoolGradeAssessmentSearch.builder()
                .schoolId(-30)
                .gradeId(-1)
                .schoolYear(1997);
    }

    @Test
    public void findLatestShouldFindTheLatestExam() throws Exception {
        final Assessment actual = repository.findLatest(userBuilder.permissionsById(individualStatewide).build(), search().build());
        assertThat(actual).isEqualTo(TestData.ALL_ASSESSMENTS_BY_ID.get(-3L));
    }

    @Test
    public void findLatestOfBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(userBuilder.permissionsById(permissions(individualOf(schools(-100L)))).build(), search().build())).isNull();
    }

    @Test
    public void findLatestOfBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(userBuilder.permissionsById(individualStatewide).build(), search().schoolId(-40).build())).isNull();
    }

    @Test
    public void findLatestOfBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(userBuilder.permissionsById(individualStatewide).build(), search().gradeId(-2).build())).isNull();
    }

    @Test
    public void findLatestOfAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(userBuilder.permissionsById(individualStatewide).build(), search().schoolYear(2016).build())).isNull();
    }

    @Test
    public void itShouldFindAllAssessmentsRespectingTransferAccess() throws Exception {
        final SchoolGradeAssessmentSearch query = search()
                .schoolId(-40)
                .schoolYear(1998)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build();
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-2L);

        getTenantProperties().setTransferAccessEnabled(true);
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-1L, -2L);
    }
}
