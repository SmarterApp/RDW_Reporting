package org.opentestsystem.rdw.reporting.search.item;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ExamItemController.class)
@WithMockUser(username = "test")
public class ExamItemControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ExamItemService service;

    @Test
    public void itShouldReturn404WhenNotFound() throws Exception {
        when(service.getScoringGuide("abc"))
                .thenThrow(new NoSuchElementException());

        mvc.perform(get("/examitems/abc/scoring"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldReturnScoreguidsWhenFound() throws Exception {

        when(service.getScoringGuide("abc"))
                .thenReturn(ExamItemScoringGuide.builder()
                        .answerKey(AnswerKey.builder()
                                .description("a_description")
                                .name("a_name")
                                .value("a_value")
                                .build()
                        )
                        .exemplars(newArrayList(
                                ScoringCriterion.builder()
                                        .scorepoint("e1_scorepoint")
                                        .template("e1_template")
                                        .build()
                        ))
                        .rubrics(newArrayList(
                                ScoringCriterion.builder()
                                        .scorepoint("r1_scorepoint")
                                        .template("r1_template")
                                        .build()
                                )
                        )
                        .build());

        mvc.perform(get("/examitems/abc/scoring"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.answerKey.description").value("a_description"))
                .andExpect(jsonPath("$.answerKey.name").value("a_name"))
                .andExpect(jsonPath("$.answerKey.value").value("a_value"))
                .andExpect(jsonPath("$.exemplars", hasSize(1)))
                .andExpect(jsonPath("$.exemplars[?(@.scorepoint=='e1_scorepoint' && @.template=='e1_template')]").exists())
                .andExpect(jsonPath("$.rubrics", hasSize(1)))
                .andExpect(jsonPath("$.rubrics[?(@.scorepoint=='r1_scorepoint' && @.template=='r1_template')]").exists());
    }

}
