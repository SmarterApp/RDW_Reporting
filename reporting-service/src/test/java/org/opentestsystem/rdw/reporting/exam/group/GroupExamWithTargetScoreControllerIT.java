package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = GroupExamWithTargetScoreController.class)
public class GroupExamWithTargetScoreControllerIT extends UserAwareControllerSupport {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupExamWithTargetScoreService examWithTargetScoreService;

    @Test
    public void itShouldCallService() throws Exception {
        when(examWithTargetScoreService.getExams(any(), any())).thenReturn(ImmutableList.of(
                ExamWithTargetScore.builder()
                        .gradeCode("g1")
                        .administrativeConditionCode("Standardized")
                        .completenessCode("Complete")
                        .id(1)
                        .schoolYear(1997)
                        .sessionId("session1")
                        .dateTime(Instants.from("1997-01-01"))
                        .scaleScore(
                                ScaleScore.builder().level(1).value(2000).standardError(20.0).build()
                        )
                        .school(School.builder().id(99L).build())
                        .targetId(32)
                        .standardMetRelativeResidualScore(1.1)
                        .studentRelativeResidualScore(-0.95)
                        .build())
        );

        mvc.perform(get("/examsWithTargetScores?groupId=1&assessmentId=4&schoolYear=1997"))
                .andExpect(jsonPath("$.*", hasSize(1)))
                .andExpect(jsonPath("$[0].id", equalTo(1)))
                .andExpect(status().isOk());
    }
}
