package org.opentestsystem.rdw.reporting.standard;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;

import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CommonCoreStandardController.class)
@WithMockUser(username = "test")
public class CommonCoreStandardControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private CommonCoreStandardService service;

    @Test
    public void getCommonCoreStandardsByItemIdShouldReturnSingle() throws Exception {
        CommonCoreStandard actual = CommonCoreStandard
                .builder()
                .code("2.2331")
                .description("test-code")
                .id(2)
                .build();

        when(service.getAllByItemId(anyInt()))
                .thenReturn(ImmutableList.of(actual));

        mvc.perform(get("/commonCoreStandards?itemId=-1"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(jsonPath("$[0].code").value("2.2331"))
                .andExpect(jsonPath("$[0].description").value("test-code"));
    }

    @Test
    public void getCommonCoreStandardsByItemIdShouldReturnMultiple() throws Exception {
        when(service.getAllByItemId(anyInt()))
                .thenReturn(ImmutableList.of(CommonCoreStandard
                                .builder()
                                .code("2.2331")
                                .description("test-code")
                                .id(2)
                                .build(),
                        CommonCoreStandard
                                .builder()
                                .code("A-REI.3")
                                .description("test-codes2")
                                .id(3)
                                .build()));

        mvc.perform(get("/commonCoreStandards?itemId=-1"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(jsonPath("$[0].code").value("2.2331"))
                .andExpect(jsonPath("$[0].description").value("test-code"))
                .andExpect(jsonPath("$[1].code").value("A-REI.3"))
                .andExpect(jsonPath("$[1].description").value("test-codes2"));
    }

    @Test
    public void getCommonCoreStandardsByItemIdNoneFoundShouldReturnEmptyArray() throws Exception {
        when(service.getAllByItemId(anyInt()))
                .thenReturn(Collections.emptyList());

        mvc.perform(get("/commonCoreStandards?itemId=-1"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string("[]"));
    }

}
