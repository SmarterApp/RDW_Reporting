package org.opentestsystem.rdw.reporting.embargo;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Loading;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Reviewing;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(EmbargoController.class)
public class EmbargoControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private EmbargoService service;

    @Test
    public void schoolsShouldReturnWhatServiceReturns() throws Exception {

        when(service.hasEmbargoedOrganizations(any(User.class)))
            .thenReturn(ImmutableMap.of(Loading, true, Reviewing, true));

        mvc.perform(get("/organizations/embargoed"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("Loading").value(true))
                .andExpect(jsonPath("Reviewing").value(true))
        ;
    }

}
