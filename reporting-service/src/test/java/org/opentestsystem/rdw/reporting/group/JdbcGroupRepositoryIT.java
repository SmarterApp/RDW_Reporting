package org.opentestsystem.rdw.reporting.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcGroupRepository.class, ITDataSourceConfiguration.class})
@Sql(scripts = {"groups.sql"})
@ActiveProfiles("test")
public class JdbcGroupRepositoryIT {

    @Autowired
    private JdbcGroupRepository repository;

    @Test
    public void itShouldFindAllGroups() {
        final List<Group> groups = repository.findAllForUsername("user-login");
        assertThat(groups)
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Group.builder().id(-10).name("IT Student Group 1").schoolName("Test School 1").schoolId(-20).subjectCode("subject_1").build(),
                        Group.builder().id(-20).name("IT Student Group 2").schoolName("Test School 1").schoolId(-20).subjectCode("subject_2").build()
                );
    }

    @Test
    public void itShouldCorrectNullSubjectToZero() {
        assertThat(repository.findAllForUsername("user-login-2"))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Group.builder().id(-30).name("IT Student Group 3").schoolName("Test School 1").schoolId(-20).subjectCode(null).build()
                );
    }

    @Test
    public void itShouldFindSpecifiedGroup() {
        final Group group = repository.findOneByUsernameAndId("user-login", -10);
        assertThat(group)
                .isEqualToComparingFieldByField(
                        Group.builder().id(-10).name("IT Student Group 1").schoolName("Test School 1").schoolId(-20).subjectCode("subject_1").studentCount(1).build()
                );
    }

}