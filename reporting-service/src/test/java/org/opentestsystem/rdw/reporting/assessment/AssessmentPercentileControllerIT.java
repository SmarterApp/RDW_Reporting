package org.opentestsystem.rdw.reporting.assessment;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDate;

import static com.google.common.collect.ImmutableList.of;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(AssessmentPercentileController.class)
@WithMockUser(username = "test")
public class AssessmentPercentileControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private AssessmentPercentileService service;

    @Test
    public void itShouldReturnPercentile() throws Exception {
        when(service.findAllForAssessment(any(AssessmentPercentileRequest.class))).thenReturn(of(
                Percentile.builder()
                        .assessmentId(-2)
                        .startDate(LocalDate.parse("1996-01-01"))
                        .endDate(LocalDate.parse("1997-01-07"))
                        .mean(2410)
                        .standardDeviation(89)
                        .count(11)
                        .percentileScores(ImmutableList.of(
                                PercentileScore.builder().percentileRank(5).score(1113).build(),
                                PercentileScore.builder().percentileRank(10).score(2003).build(),
                                PercentileScore.builder().percentileRank(20).score(2325).build(),
                                PercentileScore.builder().percentileRank(25).score(2358).build(),
                                PercentileScore.builder().percentileRank(90).score(2370).build(),
                                PercentileScore.builder().percentileRank(95).score(2578).build())
                        ).build(),
                Percentile.builder()
                        .assessmentId(-2)
                        .startDate(LocalDate.parse("2016-01-02"))
                        .endDate(LocalDate.parse("2018-06-30"))
                        .mean(2421)
                        .standardDeviation(78)
                        .count(22)
                        .percentileScores(ImmutableList.of(
                                PercentileScore.builder().percentileRank(5).score(1121).build(),
                                PercentileScore.builder().percentileRank(10).score(2313).build(),
                                PercentileScore.builder().percentileRank(15).score(2332).build(),
                                PercentileScore.builder().percentileRank(95).score(2358).build())
                        ).build()
        ));

        mvc.perform(get("/assessment-percentiles?assessmentId=-2&startDate=1996-01-01&endDate=1997-01-07"))
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$[0].mean", equalTo(2410)))
                .andExpect(status().isOk());
    }
}