package org.opentestsystem.rdw.reporting.assessment;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AssessmentPercentileRequestArgumentResolverTest {

    @Mock
    private MethodParameter methodParameter;

    @Mock
    private ModelAndViewContainer mavContainer;

    @Mock
    private NativeWebRequest webRequest;

    @Mock
    private WebDataBinderFactory binderFactory;

    private Map<String, String> parameters;

    private AssessmentPercentileRequestArgumentResolver resolver;

    @Before
    public void setup() {
        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> AssessmentPercentileRequest.class);

        parameters = new HashMap<>();
        when(webRequest.getParameter(anyString()))
                .thenAnswer(invocation -> parameters
                        .get(invocation.getArgumentAt(0, String.class)));

        resolver = new AssessmentPercentileRequestArgumentResolver();
    }

    @Test
    public void itShouldParseAnAssessmentQuery() throws Exception {

        final AssessmentPercentileRequest request = AssessmentPercentileRequest.builder()
                .assessmentId(-2)
                .startDate(LocalDate.parse("1996-01-01"))
                .endDate(LocalDate.parse("1996-01-01"))
                .build();

        parameters.put("assessmentId", "-2");
        parameters.put("startDate", "1996-01-01");
        parameters.put("endDate", "1996-01-01");

        final AssessmentPercentileRequest query = (AssessmentPercentileRequest) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(query).isEqualToComparingFieldByField(request);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireEndDateToBeAfterStartDate() throws Exception {
        parameters.put("assessmentId", "-2");
        parameters.put("endDate", "1996-01-01");
        parameters.put("startDate", "1997-01-07");

        resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
    }
}
