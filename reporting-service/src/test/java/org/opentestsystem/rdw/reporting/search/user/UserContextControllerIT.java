package org.opentestsystem.rdw.reporting.search.user;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.search.group.Group;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserContextController.class)
@WithMockUser(username = "test")
public class UserContextControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserContextService service;

    @Test
    public void itShouldReturnWhatServiceReturns() throws Exception {

        when(service.getUserContext(any(User.class))).thenReturn(
                UserContext.builder()
                        .firstName("First Name")
                        .lastName("Last Name")
                        .permissions(ImmutableSet.of("p1", "p2"))
                        .schools(ImmutableSet.of(
                                School.builder().id(1).name("school1").build(),
                                School.builder().id(2).name("school2").build()
                        ))
                        .groups(ImmutableSet.of(
                                Group.builder().id(2).name("group2").schoolName("school2").subjectCode("Math").build(),
                                Group.builder().id(1).name("group1").schoolName("school1").subjectCode(null).build()
                        ))
                        .build()
        );

        mvc.perform(get("/user"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.firstName").value("First Name"))
                .andExpect(jsonPath("$.lastName").value("Last Name"))
                .andExpect(jsonPath("$.permissions[?(@=='p1')]").exists())
                .andExpect(jsonPath("$.permissions[?(@=='p2')]").exists())
                .andExpect(jsonPath("$.schools[?(@.id==1 && @.name=='school1')]").exists())
                .andExpect(jsonPath("$.schools[?(@.id==2 && @.name=='school2')]").exists())
                .andExpect(jsonPath("$.groups[?(@.id==1 && !@.subjectCode && @.name=='group1' && @.schoolName=='school1')]").exists())
                .andExpect(jsonPath("$.groups[?(@.id==2 && @.subjectCode=='Math' && @.name=='group2' && @.schoolName=='school2')]").exists())
        ;
    }
}