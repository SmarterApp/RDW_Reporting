package org.opentestsystem.rdw.reporting;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.StudentContext;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

public final class TestData {

    public static final List<School> SCHOOLS = ImmutableList.of(
            School.builder().id(-10L).districtId(-10).name("school1").build(),
            School.builder().id(-20L).districtId(-10).name("school2").schoolGroupId(-10L).build(),
            School.builder().id(-30L).districtId(-20).name("school3").districtGroupId(-10L).build(),
            School.builder().id(-40L).districtId(-30).name("school4").districtGroupId(-10L).build()
    );

    public static final List<Assessment> STUDENT10_ASSESSMENTS = ImmutableList.of(
            assessmentBuilder1().build(),
            assessmentBuilder2().build(),
            assessmentBuilder3().build(),
            assessmentBuilder4().build()
    );

    public static final List<Assessment> STUDENT10_GROUP10_ASSESSMENTS = ImmutableList.of(
            assessmentBuilder1().build(),
            assessmentBuilder2().build(),
            assessmentBuilder3().build()
    );

    public static final List<Assessment> STUDENT10_GROUP10_ASSESSMENTS_WITH_CUT_POINTS = ImmutableList.of(
            assessmentBuilder1().cutPoints(newArrayList(100, 200, 300, 400, 500)).build(),
            assessmentBuilder2().cutPoints(newArrayList(1, 0, 2, 0, 3)).build(),
            assessmentBuilder3().cutPoints(newArrayList(1000, 2000, 3000, 4000, 5000)).build()
    );

    public static final List<Assessment> ALL_ASSESSMENTS_WITH_CUT_POINTS = ImmutableList.of(
            assessmentBuilder1().cutPoints(newArrayList(100, 200, 300, 400, 500)).build(),
            assessmentBuilder2().cutPoints(newArrayList(1, 0, 2, 0, 3)).build(),
            assessmentBuilder3().cutPoints(newArrayList(1000, 2000, 3000, 4000, 5000)).build(),
            assessmentBuilder4().cutPoints(newArrayList(1000, 2000, 3000, 4000, 5000)).build()
    );
    public static final List<Exam> STUDENT10_EXAMS = ImmutableList.of(
            exam1().schoolYear(1997).build(),
            exam2().schoolYear(1997).build(),
            exam3().schoolYear(1997).build(),
            exam4().schoolYear(1997).build(),
            exam5().schoolYear(1997).build(),
            exam6().schoolYear(1997).build(),
            exam8().schoolYear(1997).build()
    );

    public static final List<Exam> STUDENT10_GROUP10_EXAMS = ImmutableList.of(
            exam1().schoolYear(1997).build(),
            exam2().schoolYear(1997).build(),
            exam3().schoolYear(1997).build(),
            exam4().schoolYear(1997).build(),
            exam5().schoolYear(1997).build(),
            exam6().schoolYear(1997).build()
    );

    public static final List<Exam> EXAMS = ImmutableList.of(
            exam1()
                    .student(student().build())
                    .studentContext(studentContext().build())
                    .build(),
            exam2()
                    .student(student().build())
                    .studentContext(studentContext().build())
                    .build(),
            exam3()
                    .student(student().build())
                    .studentContext(studentContext().build())
                    .build(),
            exam4()
                    .student(student().build())
                    .studentContext(studentContext().build())
                    .build(),
            exam5()
                    .student(student().build())
                    .studentContext(studentContext().build())
                    .build(),
            exam6()
                    .student(student().build())
                    .studentContext(studentContext()
                            .iep(true)
                            .lep(true)
                            .section504(true)
                            .economicDisadvantage(true)
                            .build()

                    )
                    .build(),
            exam8()
                    .student(student().build())
                    .studentContext(studentContext()
                            .iep(true)
                            .lep(true)
                            .section504(true)
                            .economicDisadvantage(true)
                            .build()

                    )
                    .build()
    );
    public static final ImmutableMap<Long, Assessment> ALL_ASSESSMENTS_BY_ID = Maps.uniqueIndex(ALL_ASSESSMENTS_WITH_CUT_POINTS, Assessment::getId);
    public static final ImmutableMap<Long, Exam> EXAMS_BY_ID = Maps.uniqueIndex(EXAMS, Exam::getId);

    public static Student.Builder student() {
        return Student.builder()
                .id(-1)
                .ssid("student1_ssid")
                .firstName("student1_firstName")
                .lastName("student1_lastName")
                .genderCode("g1")
                .ethnicityCodes(ImmutableSet.of());
    }

    public static StudentContext.Builder studentContext() {
        return StudentContext.builder()
                .iep(false)
                .lep(false)
                .section504(false)
                .economicDisadvantage(false)
                .migrantStatus(null);
    }

    public static Assessment.Builder assessmentBuilder1() {
        return Assessment.builder()
                .id(-1L)
                .type(AssessmentType.ICA)
                .label("ica1")
                .gradeCode("g1")
                .schoolYear(1997)
                .subject(Subject.MATH)
                .claimCodes(newArrayList("ica_claim1", "ica_claim2", "ica_claim3", "ica_claim4"));
    }

    public static Assessment.Builder assessmentBuilder2() {
        return Assessment.builder()
                .id(-2L)
                .type(AssessmentType.IAB)
                .label("iab1")
                .gradeCode("g1")
                .schoolYear(1997)
                .subject(Subject.MATH)
                .claimCodes(null);
    }

    public static Assessment.Builder assessmentBuilder3() {
        return Assessment.builder()
                .id(-3L)
                .type(AssessmentType.SUMMATIVE)
                .label("sum1")
                .gradeCode("g1")
                .schoolYear(1997)
                .subject(Subject.MATH)
                .claimCodes(newArrayList("sum_claim1", "sum_claim2", "sum_claim3"));
    }

    public static Assessment.Builder assessmentBuilder4() {
        return Assessment.builder()
                .id(-4L)
                .type(AssessmentType.SUMMATIVE)
                .label("sum2")
                .gradeCode("g1")
                .schoolYear(1997)
                .subject(Subject.ELA)
                .claimCodes(newArrayList("sum_claim1", "sum_claim2", "sum_claim3"));
    }

    public static Exam.Builder exam() {
        return Exam.builder()
                .gradeCode("g1")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete");
    }

    public static Exam.Builder exam1() {
        return exam()
                .id(-1)
                .schoolYear(1997)
                .sessionId("session1")
                .dateTime(Instants.from("1997-01-01"))
                .scaleScore(
                        ScaleScore.builder().level(1).value(2000).standardError(20).build()
                )
                .claimScaleScores(newArrayList(
                        ScaleScore.builder().level(1).value(100).standardError(10).build(),
                        ScaleScore.builder().level(2).value(200).standardError(20).build(),
                        ScaleScore.builder().level(3).value(300).standardError(30).build(),
                        ScaleScore.builder().level(4).value(400).standardError(40).build()
                ))
                .school(SCHOOLS.get(0));
    }

    public static Exam.Builder exam2() {
        return exam()
                .id(-2)
                .schoolYear(1997)
                .sessionId("session2")
                .dateTime(Instants.from("1997-01-01"))
                .gradeCode("g2")
                .scaleScore(
                        ScaleScore.builder().level(2).value(2100).standardError(21).build()
                )
                .claimScaleScores(null)
                .school(SCHOOLS.get(0));
    }

    public static Exam.Builder exam3() {
        return exam()
                .id(-3)
                .schoolYear(1997)
                .sessionId("session3")
                .dateTime(Instants.from("1997-01-01"))
                .gradeCode("g3")
                .scaleScore(
                        ScaleScore.builder().level(3).value(2200).standardError(22).build()
                )
                .claimScaleScores(newArrayList(
                        ScaleScore.builder().level(1).value(1000).standardError(100).build(),
                        ScaleScore.builder().level(2).value(2000).standardError(200).build(),
                        ScaleScore.builder().level(3).value(3000).standardError(300).build()
                ))
                .school(SCHOOLS.get(1));
    }

    public static Exam.Builder exam4() {
        return exam()
                .id(-4)
                .schoolYear(1997)
                .sessionId("session4")
                .dateTime(Instants.from("1997-01-02"))
                .scaleScore(
                        ScaleScore.builder().level(1).value(2300).standardError(23).build()
                )
                .claimScaleScores(newArrayList(
                        ScaleScore.builder().level(1).value(1100).standardError(110).build(),
                        ScaleScore.builder().level(2).value(2100).standardError(210).build(),
                        ScaleScore.builder().level(3).value(3100).standardError(310).build()
                ))
                .school(SCHOOLS.get(2));
    }

    public static Exam.Builder exam5() {
        return exam()
                .id(-5)
                .schoolYear(1997)
                .sessionId("session5")
                .dateTime(Instants.from("1997-01-05"))
                .scaleScore(
                        ScaleScore.builder().level(2).value(2400).standardError(24).build()
                )
                .claimScaleScores(newArrayList(
                        ScaleScore.builder().level(1).value(1200).standardError(120).build(),
                        ScaleScore.builder().level(2).value(2200).standardError(220).build(),
                        ScaleScore.builder().level(3).value(3200).standardError(320).build()
                ))
                .school(SCHOOLS.get(2));
    }

    public static Exam.Builder exam6() {
        return exam()
                .id(-6)
                .schoolYear(1997)
                .sessionId("session6")
                .dateTime(Instants.from("1997-01-03"))
                .administrativeConditionCode("Standardized")
                .completenessCode("Partial")
                .scaleScore(null)
                .claimScaleScores(newArrayList(null, null, null))
                .school(SCHOOLS.get(2));
    }

    public static Exam.Builder exam8() {
        return exam()
                .id(-8)
                .schoolYear(1997)
                .sessionId("session6")
                .dateTime(Instants.from("1997-01-03"))
                .administrativeConditionCode("Standardized")
                .completenessCode("Partial")
                .scaleScore(null)
                .claimScaleScores(newArrayList(null, null, null))
                .school(SCHOOLS.get(2));
    }
}
