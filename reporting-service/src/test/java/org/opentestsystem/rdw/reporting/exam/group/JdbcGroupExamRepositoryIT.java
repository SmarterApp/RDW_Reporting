package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@Import(JdbcGroupExamRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcGroupExamRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupExamRepository repository;

    private GroupExamSearch.Builder search() {
        return GroupExamSearch.builder()
                .groupId(-10L)
                .assessmentId(-1)
                .schoolYear(1997);
    }

    private GroupExamSearch.Builder userGroupSearch() {
        return GroupExamSearch.builder()
                .userGroupId(-10L)
                .assessmentId(-1)
                .schoolYear(1997);
    }

    @Test
    public void findAllForAssessmentShouldFindAll() {
        assertThat(repository.findAllForAssessment(userBuilder().permissionsById(groupStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(TestData.EXAMS_BY_ID.get(-1L));
    }

    @Test
    public void findAllForAssessmentByUserGroupShouldFindAll() {
        assertThat(repository.findAllForAssessment(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(TestData.EXAMS_BY_ID.get(-1L));
    }

    @Test
    public void findAllShouldFindNothingForUserWithoutGroupAccess() {
        final GroupExamSearch search = search().groupId(-20L).build();

        //user with a different group access
        assertThat(repository.findAllForAssessment(userBuilder().permissionsById(groupStatewide).build(), search)).isEmpty();

        //uer with PII access without groups
        assertThat(repository.findAllForAssessment(
                User.builder()
                        .id(UUID.randomUUID().toString())
                        .username("another@somewhere.com")
                        .password("redacted")
                        .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                        .build(), search)).isEmpty();
    }

    @Test
    public void findAllByUserGroupShouldFindNothingForUserWithoutGroupAccess() {
        final GroupExamSearch search = userGroupSearch().userGroupId(-20L).build();

        //user with a different group access
        assertThat(repository.findAllForAssessment(userBuilder().permissionsById(groupStatewide).build(), search)).isEmpty();

        //uer with PII access without groups
        assertThat(repository.findAllForAssessment(
                User.builder()
                        .id("userId")
                        .username("another@somewhere.com")
                        .password("redacted")
                        .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                        .build(), search)).isEmpty();
    }

    @Test
    public void findAllForAssessmentShouldRespectTransferAccess() {
        final GroupExamSearch query = search()
                .schoolYear(1998)
                .groupId(-100L)
                .build();

        final User user = userBuilder().permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).isEmpty();

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).containsOnly(-100L);
    }

    @Test
    public void findAllForAssessmentByUserGroupShouldRespectTransferAccess() {
        final GroupExamSearch query = userGroupSearch()
                .schoolYear(1998)
                .userGroupId(-100L)
                .build();

        final User user = userBuilder().permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).isEmpty();

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).containsOnly(-100L);
    }
}