package org.opentestsystem.rdw.reporting.exam.schoolgrade;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(SchoolGradeExamController.class)
public class SchoolGradeExamControllerIT extends UserAwareControllerSupport {

    private static final SchoolGradeExamSearch search = SchoolGradeExamSearch.builder()
            .schoolId(1)
            .gradeId(2)
            .assessmentId(3)
            .schoolYear(4)
            .build();

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SchoolGradeExamService service;

    @Test
    public void getAllForAssessmentShouldReturnEmptyWhenNoResultsAreFound() throws Exception {
        when(service.getExams(any(User.class), refEq(search))).thenReturn(ImmutableList.of());

        mvc.perform(get("/schools/1/assessmentGrades/2/assessments/3/exams?schoolYear=4"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(0)));
    }

    @Test
    public void getAllForAssessmentShouldReturnAllAssessmentsWhenFound() throws Exception {

        final Exam exam1 = Exam.builder().id(100).build();
        final Exam exam2 = Exam.builder().id(200).build();

        when(service.getExams(any(User.class), refEq(search))).thenReturn(ImmutableList.of(exam1, exam2));

        mvc.perform(get("/schools/1/assessmentGrades/2/assessments/3/exams?schoolYear=4"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].id").value(exam1.getId()))
                .andExpect(jsonPath("$[1].id").value(exam2.getId()));
    }

}