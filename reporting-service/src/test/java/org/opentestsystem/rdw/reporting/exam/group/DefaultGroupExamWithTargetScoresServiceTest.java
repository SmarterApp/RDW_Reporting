package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.assessment.AssessmentTargetRepository;
import org.opentestsystem.rdw.reporting.common.model.Target;
import org.opentestsystem.rdw.reporting.common.web.security.User;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.data.MapEntry.entry;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupExamWithTargetScoresServiceTest {

    @Mock
    private GroupExamWithTargetScoreRepository examWithTargetScoreRepository;

    @Mock
    private AssessmentTargetRepository assessmentTargetRepository;

    @Mock
    private GroupExamSearch search;

    @Mock
    private User user;

    private GroupExamWithTargetScoreService service;
    private static final int assessmentId = 4;

    private static final List<Target> assessment4Targets = ImmutableList.of(
            Target.builder().id(32).assessmentId(assessmentId).includeInReport(false).naturalId("MD|D").claimCode("3").build(),
            Target.builder().id(11).assessmentId(assessmentId).includeInReport(true).naturalId("NBT|E-3").claimCode("1").build());


    @Before
    public void setUp() {

        service = new DefaultGroupExamWithTargetScoresService(examWithTargetScoreRepository, assessmentTargetRepository);
        when(assessmentTargetRepository.findAllByAssessmentId(assessmentId)).thenReturn(assessment4Targets);
        when(search.getAssessmentId()).thenReturn(assessmentId);
    }

    @Test
    public void itShouldUseRepositoriesAndMergeResults() {
        final ExamWithTargetScore exam1 = mock(ExamWithTargetScore.class);
        final ExamWithTargetScore exam11 = mock(ExamWithTargetScore.class);
        final ExamWithTargetScore exam2 = mock(ExamWithTargetScore.class);

        when(exam1.getTargetId()).thenReturn(11);
        when(exam11.getTargetId()).thenReturn(11);
        when(exam2.getTargetId()).thenReturn(32);

        final List<ExamWithTargetScore> examWithTargetScores = ImmutableList.of(exam1, exam2, exam11);
        when(examWithTargetScoreRepository.findAllByGroupExamSearch(user, search)).thenReturn(examWithTargetScores);


        assertThat(service.getExams(user, search))
                .containsOnly(
                        entry(assessment4Targets.get(0), ImmutableSet.of(exam2)),
                        entry(assessment4Targets.get(1), ImmutableSet.of(exam1, exam11)));
    }
}