package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.web.security.User;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupExamWithTargetScoresServiceTest {

    @Mock
    private GroupExamWithTargetScoreRepository examWithTargetScoreRepository;
    @Mock
    private GroupAssessmentRepository groupAssessmentRepository;
    private GroupExamWithTargetScoreService service;

    @Mock
    private GroupExamSearch search;
    @Mock
    private User user;

    @Before
    public void createService() {
        when(search.getAssessmentId()).thenReturn(42);
        when(groupAssessmentRepository.findTargetReportEnabled(42)).thenReturn(Boolean.TRUE);

        service = new DefaultGroupExamWithTargetScoresService(examWithTargetScoreRepository, groupAssessmentRepository);
    }

    @Test
    public void itShouldUseRepositoriesAndMergeResults() {
        final ExamWithTargetScore exam1 = mock(ExamWithTargetScore.class);
        final ExamWithTargetScore exam2 = mock(ExamWithTargetScore.class);

        final List<ExamWithTargetScore> examWithTargetScores = ImmutableList.of(exam1, exam2);
        when(examWithTargetScoreRepository.findAllByGroupExamSearch(user, search)).thenReturn(examWithTargetScores);

        assertThat(service.getExams(user, search)).containsOnly(exam1, exam2);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotReturnIfTargetReportIsNotEnabled() {
        when(groupAssessmentRepository.findTargetReportEnabled(42)).thenReturn(Boolean.FALSE);
        service.getExams(user, search);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotReturnIfAssessmentIdIsUnknown() {
        when(groupAssessmentRepository.findTargetReportEnabled(42)).thenReturn(null);
        service.getExams(user, search);
    }
}
