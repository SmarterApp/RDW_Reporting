package org.opentestsystem.rdw.reporting.embargo;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataLoadingRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;

@Import(JdbcEmbargoRepository.class)
@Sql(scripts = {
        "classpath:integration-test-data.sql",
        "classpath:embargo-test-data.sql"
})
public class JdbcEmbargoRepositoryIT extends JdbcRepositoryWithPermissionIT {

    private static final long LOADING_DISTRICT = -100L;
    private static final long REVIEWING_DISTRICT = -101L;
    private static final long RELEASED_DISTRICT = -102L;

    @Autowired
    private JdbcEmbargoRepository repository;

    private User loadingUser;
    private User reviewingUser;
    private User normalUser;

    @Before
    public void setup() {
        final PermissionScope loadingScope = PermissionScopes.statewide();
        Permission loadingPermission = new Permission(TestDataLoadingRead, loadingScope);

        loadingUser = userBuilder()
            .permissionsById(ImmutableMap.<String, Permission>builder()
                .put(TestDataLoadingRead, loadingPermission)
                .build())
            .build();

        final PermissionScope reviewingScope =
            PermissionScopes.districts(LOADING_DISTRICT, REVIEWING_DISTRICT, RELEASED_DISTRICT);
        Permission reviewingPermission = new Permission(TestDataReviewingRead, reviewingScope);

        reviewingUser = userBuilder()
            .permissionsById(ImmutableMap.<String, Permission>builder()
                .put(TestDataReviewingRead, reviewingPermission)
                .build())
            .build();

        normalUser = userBuilder().build();

    }

    private EmbargoIndividualSearch searchFor(int year, long districtId) {
        return EmbargoIndividualSearch.builder()
            .schoolYear(year)
            .districtId(districtId)
            .build();
    }

    @Test
    public void aUserWithoutTestDataReviewingReadShouldNeverBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(normalUser, searchFor(1997, LOADING_DISTRICT))).isFalse();
        assertThat(repository.hasEmbargoAccess(normalUser, searchFor(1997, REVIEWING_DISTRICT))).isFalse();
        assertThat(repository.hasEmbargoAccess(normalUser, searchFor(1997, RELEASED_DISTRICT))).isFalse();
    }

    @Test
    public void aUserWithTestDataReviewingReadForAReviewingDistrictShouldBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(reviewingUser, searchFor(1997, REVIEWING_DISTRICT))).isTrue();
    }

    @Test
    public void aUserWithTestDataReviewingReadForALoadingDistrictShouldNotBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(reviewingUser, searchFor(1997, LOADING_DISTRICT))).isFalse();
    }

    @Test
    public void aUserWithTestDataLoadingReadForAReviewingDistrictShouldBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(loadingUser, searchFor(1997, REVIEWING_DISTRICT))).isTrue();
    }

    @Test
    public void aUserWithTestDataLoadingReadForALoadingDistrictShouldBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(loadingUser, searchFor(1997, LOADING_DISTRICT))).isTrue();
    }

    @Test
    public void allUsersForAReleasedDistrictShouldNotBeEmbargoed() {
        assertThat(repository.hasEmbargoAccess(loadingUser, searchFor(1997, RELEASED_DISTRICT))).isFalse();
        assertThat(repository.hasEmbargoAccess(reviewingUser, searchFor(1997, RELEASED_DISTRICT))).isFalse();
        assertThat(repository.hasEmbargoAccess(normalUser, searchFor(1997, RELEASED_DISTRICT))).isFalse();
    }
}
