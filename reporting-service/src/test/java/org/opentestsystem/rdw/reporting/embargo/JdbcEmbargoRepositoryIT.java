package org.opentestsystem.rdw.reporting.embargo;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;

@Import(JdbcEmbargoRepository.class)
@Sql(scripts = {
        "classpath:integration-test-data.sql",
        "classpath:embargo-test-data.sql"
})
public class JdbcEmbargoRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private JdbcEmbargoRepository repository;

    private Permission embargoedPermission;
    private Permission nonEmbargoedPermission;

    @Before
    public void setup() {
        final PermissionScope embargoedScope = PermissionScopes.districts(-10L);
        embargoedPermission = new Permission(TestDataReviewingRead, embargoedScope);

        final PermissionScope nonEmbargoedScope = PermissionScopes.districts(-100L);
        nonEmbargoedPermission = new Permission(TestDataReviewingRead, nonEmbargoedScope);
    }

    @Test
    public void aUserWithoutEmbargoReadShouldNeverBeEmbargoed() {
        final User user = userBuilder.build();
        assertThat(repository.hasEmbargoAccess(user)).isFalse();
    }

    @Test
    public void aUserWithEmbargoReadForAnEmbargoedDistrictShouldBeEmbargoed() {
        final User user = userBuilder
                .permissionsById(ImmutableMap.<String, Permission>builder()
                        .put(TestDataReviewingRead, embargoedPermission)
                        .build())
                .build();

        assertThat(repository.hasEmbargoAccess(user)).isTrue();
    }

    @Test
    public void aUserWithEmbargoReadForANonEmbargoedDistrictShouldNotBeEmbargoed() {
        final User user = userBuilder
                .permissionsById(ImmutableMap.<String, Permission>builder()
                        .put(TestDataReviewingRead, nonEmbargoedPermission)
                        .build())
                .build();

        assertThat(repository.hasEmbargoAccess(user)).isFalse();
    }

    @Test
    public void aUserWithEmbargoReadForBothNonEmbargoedAndEmbargoedDistrictsShouldBeEmbargoed() {
        final PermissionScope multiEmbargoedScope = PermissionScopes.districts(-10L, -100L);
        final User user = userBuilder
                .permissionsById(ImmutableMap.<String, Permission>builder()
                        .put(TestDataReviewingRead, new Permission(TestDataReviewingRead, multiEmbargoedScope))
                        .build())
                .build();

        assertThat(repository.hasEmbargoAccess(user)).isTrue();
    }

    @Test
    public void aStateEmbargoReadUserWithAnyEmbargoedDistrictsShouldBeEmbargoed() {
        final User user = userBuilder
                .permissionsById(ImmutableMap.<String, Permission>builder()
                        .put(TestDataReviewingRead, new Permission(TestDataReviewingRead, PermissionScopes.statewide()))
                        .build())
                .build();

        assertThat(repository.hasEmbargoAccess(user)).isTrue();
    }
}