package org.opentestsystem.rdw.reporting.exam.group;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import(JdbcGroupAssessmentRepository.class)
public class JdbcGroupAssessmentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupAssessmentRepository repository;

    private GroupAssessmentSearch.Builder search() {
        return GroupAssessmentSearch.builder()
                .groupGrant(new GroupGrant(-10L, 99999)) //TODO: the last parameter is outdated and needs to be removed
                .schoolYear(1997);
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search()
                .groupGrant(new GroupGrant(0, 99999)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search()
                .schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_GROUP10_ASSESSMENTS_WITH_CUT_POINTS);
    }

    @Test
    public void findAllShouldFindAllForGroupWithAllSubjects() throws Exception {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupGrant(new GroupGrant(-30L, 99999)).schoolYear(1997).build()).size()).isEqualTo(2);
    }

    @Test
    public void itShouldFindAllRespectingTransferAccess() {
        final GroupAssessmentSearch query = search()
                .schoolYear(1998)
                .groupGrant(new GroupGrant(-100L, 99999)) //TODO: the last parameter is outdated and needs to be removed
                .build();

        final User user = userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-2L);

        getTenantProperties().setTransferAccessEnabled(true);
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-1L, -2L);
    }
}