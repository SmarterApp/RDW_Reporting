package org.opentestsystem.rdw.reporting.exam.group;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.security.GroupGrant;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupAssessmentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcGroupAssessmentRepositoryIT {
    private static final Map<String, Permission> stateWidePermission = permissions(groupOf(PermissionScope.STATEWIDE));

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcGroupAssessmentRepository repository;

    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    private GroupAssessmentSearch.Builder search() {
        return GroupAssessmentSearch.builder()
                .groupGrant(new GroupGrant(-10L, 1))
                .schoolYear(1997);
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAll(stateWidePermission, search()
                .groupGrant(new GroupGrant(0, 1)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAll(stateWidePermission, search()
                .schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMismatchingSubject() throws Exception {
        assertThat(repository.findAll(stateWidePermission, search()
                .groupGrant(new GroupGrant(-10, 2)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAll(stateWidePermission, search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.ASSESSMENTS);
    }

    @Test
    public void itShouldFindAllRespectingTransferAccess() {
        final GroupAssessmentSearch query = search()
                .schoolYear(1998)
                .groupGrant(new GroupGrant(-100L, 1))
                .build();

        final List<Assessment> withoutTransfer = repository.findAll(permissions(groupOf(schools(-40L))), query);
        assertThat(withoutTransfer.stream().map(Assessment::getId))
                .containsOnly(-2L);

        tenantProperties.setTransferAccessEnabled(true);
        final List<Assessment> withTransfer = repository.findAll(permissions(groupOf(schools(-40L))), query);
        assertThat(withTransfer.stream().map(Assessment::getId))
                .containsOnly(-1L, -2L);
    }

}