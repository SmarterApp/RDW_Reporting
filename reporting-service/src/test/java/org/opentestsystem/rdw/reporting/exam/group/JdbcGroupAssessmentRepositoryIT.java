package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.MeasuredAssessment;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.group.GroupRepository;
import org.opentestsystem.rdw.reporting.group.JdbcGroupRepository;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@Import({
        JdbcGroupAssessmentRepository.class,
        JdbcGroupRepository.class
})
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcGroupAssessmentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupAssessmentRepository repository;

    @Autowired
    private GroupRepository groupRepository;

    private GroupAssessmentSearch.Builder search() {
        return GroupAssessmentSearch.builder()
                .groupId(new UserGroupId(-10L, null))
                .schoolYear(1997);
    }

    private GroupAssessmentSearch.Builder userGroupSearch() {
        return GroupAssessmentSearch.builder()
                .groupId(new UserGroupId(null, -100L))
                .schoolYear(1997);
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), search()
                .groupId(new UserGroupId(0L, null)).build())).isEmpty();
    }

    @Test
    public void findAllMeasuredAssessmentsShouldFindNothingForMissingGroup() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search()
                .groupId(new UserGroupId(0L, null)).build())).isEmpty();
    }

    @Test
    public void findAllForUserGroupShouldFindNothingForMissingGroup() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch()
                .groupId(new UserGroupId(null, 0L)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), search()
                .schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllMeasuredAssessmentsShouldFindNothingForMissingYear() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search()
                .schoolYear(1990).build())).isEmpty();
    }

    @Test
    public void findAllForUserGroupShouldFindNothingForMissingYear() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch()
                .schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_GROUP10_ASSESSMENTS_WITH_CUT_POINTS);
    }

    @Test
    public void findAllForUserGroupShouldFindAll() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_GROUP10_ASSESSMENTS_WITH_CUT_POINTS);
    }

    @Test
    public void itShouldFindAllMeasuredAssessments() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_MEASURED_ASSESSMENTS);
    }

    @Test
    public void findAllMeasuredAssessmentsForUserGropuShouldFindAll() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_MEASURED_ASSESSMENTS);
    }

    @Test
    public void itShouldFindOnlyScoredMeasuredAssessments() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search().groupId(new UserGroupId(-50L, null)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT5_MEASURED_ASSESSMENTS);
    }

    @Test
    public void findAllMeasuredAssessmentsForUserGroupShouldOnlyFindScoredAssessments() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().groupId(new UserGroupId(null, -500L)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT5_MEASURED_ASSESSMENTS);
    }

    @Test
    public void itShouldFindAllScaleScoreMeasuredAssessments() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search().groupId(new UserGroupId(-60L, null)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT6_MEASURED_ASSESSMENTS);
    }

    @Test
    public void findAllMeasuredAssessmentsForUserGroupShouldFindAllScaleScores() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().groupId(new UserGroupId(null, -600L)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT6_MEASURED_ASSESSMENTS);
    }

    @Test
    public void itShouldFindAllScaleScoreStdErrMeasuredAssessments() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), search().groupId(new UserGroupId(-70L, null)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENTS_MEASURED_ASSESSMENTS);
    }

    @Test
    public void findAllMeasuredAssessmentsForUserGroupShouldFindAllScaleScoreStandardError() {
        assertThat(repository.findAllMeasuredAssessments(userBuilder().permissionsById(groupStatewide).build(), userGroupSearch().groupId(new UserGroupId(null, -700L)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENTS_MEASURED_ASSESSMENTS);
    }

    @Test
    public void itShouldCountMeasuredAssessmentsAndBeDifferentThanStudentGroupSize() {
        final User user = userBuilder().permissionsById(groupStatewide).build();
        final List<MeasuredAssessment> measuredAssessments = repository.findAllMeasuredAssessments(user, search().groupId(new UserGroupId(-80L, null)).build());
        assertThat(measuredAssessments)
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT6_MEASURED_ASSESSMENTS);

        assertThat(groupRepository.findOneByUsernameAndId(user.getUsername(), -80))
                .hasFieldOrPropertyWithValue("studentCount", 2);
    }

    @Test
    public void findAllShouldFindAllForGroupWithAllSubjects() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupId(new UserGroupId(-30L, null)).schoolYear(1997).build()).size()).isEqualTo(2);
    }

    @Test
    public void findAllForUserGroupShouldFindAllForGroupWithAllSubjects() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupId(new UserGroupId(null, -300L)).schoolYear(1997).build()).size()).isEqualTo(2);
    }

    @Test
    public void findAllShouldFindAllForGroupWithOneSubject() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupId(new UserGroupId(-90L, null)).schoolYear(1997).build()).size()).isEqualTo(1);
    }

    @Test
    public void findAllForUserGroupShouldFindAllForGroupWithOneSubject() {
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupId(new UserGroupId(null, -900L)).schoolYear(1997).build()).size()).isEqualTo(1);
    }

    @Test
    public void findLatestShouldFindTheLatestExam() {
        final Assessment actual = repository.findLatest(userBuilder().permissionsById(groupStatewide).build(), GroupAssessmentSearch.builder().groupId(new UserGroupId(-30L, null)).schoolYear(1997).build());
        assertThat(actual).isEqualTo(TestData.ALL_ASSESSMENTS_BY_ID.get(-1));
    }

    @Test
    public void findLatestForUserGroupShouldFindTheLatestExam() {
        final Assessment actual = repository.findLatest(userBuilder().permissionsById(groupStatewide).build(), GroupAssessmentSearch.builder().groupId(new UserGroupId(null, -300L)).schoolYear(1997).build());
        assertThat(actual).isEqualTo(TestData.ALL_ASSESSMENTS_BY_ID.get(-1));
    }

    @Test
    public void findLatestShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(new UserGroupId(-20L, null)).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findLatest(userBuilder().permissionsById(groupStatewide).build(), search)).isNull();

        //uer with PII access without groups
        assertThat(repository.findLatest(User.builderExt()
                .id("userId")
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide()))).build(), search)).isNull();
    }

    @Test
    public void findLatestForUserGroupShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(new UserGroupId(null, 200L)).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findLatest(userBuilder().permissionsById(groupStatewide).build(), search)).isNull();

        //uer with PII access without groups
        assertThat(repository.findLatest(User.builderExt()
                .id("userId")
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide()))).build(), search)).isNull();
    }

    @Test
    public void findAllShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(new UserGroupId(-20L, null)).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), search)).isEmpty();

        //user with PII access without groups
        assertThat(repository.findAll(User.builderExt()
                .id("userId")
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                .build(), search)).isEmpty();
    }

    @Test
    public void findAllForUserGroupShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(new UserGroupId(null, -200L)).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findAll(userBuilder().permissionsById(groupStatewide).build(), search)).isEmpty();

        //user with PII access without groups
        assertThat(repository.findAll(User.builderExt()
                .id("userId")
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                .build(), search)).isEmpty();
    }

    @Test
    public void findAllShouldFindAllRespectingTransferAccess() {
        final GroupAssessmentSearch query = search()
                .schoolYear(1998)
                .groupId(new UserGroupId(-100L, null))
                .build();

        final User user = userBuilder().permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-2);

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-1, -2);
    }

    @Test
    public void findAllForUserGroupShouldFindAllRespectingTransferAccess() {
        final GroupAssessmentSearch query = userGroupSearch()
                .schoolYear(1998)
                .groupId(new UserGroupId(null, -1000L))
                .build();

        final User user = userBuilder().permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-2);

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-1, -2);
    }

    @Test
    public void itShouldFindTargetReportEnabled() {
        assertThat(repository.findTargetReportEnabled(-1L)).isFalse();
        assertThat(repository.findTargetReportEnabled(-2L)).isFalse();
        assertThat(repository.findTargetReportEnabled(-3L)).isTrue();
        assertThat(repository.findTargetReportEnabled(-4L)).isTrue();

        // or not ...
        assertThat(repository.findTargetReportEnabled(-432L)).isNull();
    }
}
