package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.MeasuredAssessment;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@Import(JdbcGroupAssessmentRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcGroupAssessmentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupAssessmentRepository repository;

    private GroupAssessmentSearch.Builder search() {
        return GroupAssessmentSearch.builder()
                .groupId(-10L)
                .schoolYear(1997);
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search()
                .groupId(0).build())).isEmpty();

        assertThat(repository.findAllMeasuredAssessments(userBuilder.permissionsById(groupStatewide).build(), search()
                .groupId(0).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search()
                .schoolYear(1996).build())).isEmpty();

        assertThat(repository.findAllMeasuredAssessments(userBuilder.permissionsById(groupStatewide).build(), search()
                .schoolYear(1996).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_GROUP10_ASSESSMENTS_WITH_CUT_POINTS);
    }

    @Test
    public void itShouldFindAllMeasurements() {
        final List<MeasuredAssessment> measuredAssessments = repository.findAllMeasuredAssessments(userBuilder.permissionsById(groupStatewide).build(), search().build());
        assertThat(measuredAssessments)
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT10_MEASURED_ASSESSMENTS);
    }

    @Test
    public void findAllShouldFindAllForGroupWithAllSubjects() {
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(),
                GroupAssessmentSearch.builder().groupId(-30L).schoolYear(1997).build()).size()).isEqualTo(2);
    }

    @Test
    public void findLatestShouldFindTheLatestExam() {
        final Assessment actual = repository.findLatest(userBuilder.permissionsById(groupStatewide).build(), GroupAssessmentSearch.builder().groupId(-30L).schoolYear(1997).build());
        assertThat(actual).isEqualTo(TestData.ALL_ASSESSMENTS_BY_ID.get(-1L));
    }

    @Test
    public void findLatestShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(-20L).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findLatest(userBuilder.permissionsById(groupStatewide).build(), search)).isNull();

        //uer with PII access without groups
        assertThat(repository.findLatest(User.builder()
                .id(UUID.randomUUID().toString())
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide()))).build(), search)).isNull();
    }

    @Test
    public void findAllShouldFindNothingForUserWithNoAccessToGroup() {
        final GroupAssessmentSearch search = GroupAssessmentSearch.builder().groupId(-20L).schoolYear(1997).build();

        //user with a different group access
        assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), search)).isEmpty();

        //uer with PII access without groups
        assertThat(repository.findAll(User.builder()
                .id(UUID.randomUUID().toString())
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                .build(), search)).isEmpty();
    }

    @Test
    public void itShouldFindAllRespectingTransferAccess() {
        final GroupAssessmentSearch query = search()
                .schoolYear(1998)
                .groupId(-100L)
                .build();

        final User user = userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build();
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-2L);

        getSystemSettings().setTransferAccessEnabled(true);
        assertThat(repository.findAll(user, query).stream().map(Assessment::getId)).containsOnly(-1L, -2L);
    }
}