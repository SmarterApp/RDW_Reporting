package org.opentestsystem.rdw.reporting.student;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.assertj.core.api.AssertionsForClassTypes;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;

@Import(JdbcStudentRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcStudentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private StudentRepository repository;

    private StudentSearch.Builder search() {
        return StudentSearch.builder();
    }

    private Student.Builder student(final long id) {
        final String idString = Long.toString(Math.abs(id));
        return Student.builder()
                .id(id)
                .ssid("student" + idString + "_ssid")
                .firstName("student" + idString + "_firstName")
                .lastName("student" + idString + "_lastName")
                .genderCode("g1")
                .englishLanguageAcquisitionStatusCode(null)
                .individualEducationPlan(false)
                .limitedEnglishProficiency(false)
                .section504(false)
                .migrantStatus(null);
    }

    private final Student student1 = student(-1).build();
    private final Student student2 = student(-2)
            .individualEducationPlan(true)
            .limitedEnglishProficiency(true)
            .section504(true)
            .build();
    private final Student student4 = student(-4).build();
    private final Student student5 = student(-5).build();
    private final Student student6 = student(-6).build();
    private final Student student100 = student(-100)
            .ssid("transfer_1")
            .firstName("to_school4")
            .lastName("from_school3")
            .build();

    private final List<Student> AllStudentsWithExams = ImmutableList.of(
            student1,
            student2,
            student4,
            student5,
            student6,
            student100
    ).stream()
            .sorted(comparing(Student::getLastName)
                    .thenComparing(Student::getFirstName)
                    .thenComparing(Student::getSsid)
            ).collect(toList());

    @Test
    public void findAllShouldFindAllStudentsWhenNoFiltersAreSet() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(AllStudentsWithExams);
    }

    @Test
    public void findAllShouldApplySchoolFilterWhenSet() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().schoolId(-10L).build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student4);
    }

    @Test
    public void findAllShouldApplyGroupFilterWhenSet() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().groupId(-10L).build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student1);
    }

    @Test
    public void findAllShouldApplyStudentFilterWhenSet() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().studentIds(newArrayList(-1L, -2L)).build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student1, student2);
    }

}