package org.opentestsystem.rdw.reporting.student;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.assertj.core.api.Assertions;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import({JdbcStudentRepository.class, JdbcStudentEthnicityRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcStudentRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private StudentRepository repository;

    @Autowired
    private JdbcTemplate template;

    private StudentSearch.Builder search() {
        return StudentSearch.builder();
    }

    private final StudentSearch emptySearch = search().build();

    private Student.Builder student(final long id) {
        final String idString = Long.toString(Math.abs(id));
        return Student.builder()
                .id(id)
                .ssid("student" + idString + "_ssid")
                .firstName("student" + idString + "_firstName")
                .lastName("student" + idString + "_lastName")
                .genderCode("g1")
                .economicDisadvantage(false)
                .englishLanguageAcquisitionStatusCode(null)
                .individualEducationPlan(false)
                .limitedEnglishProficiency(false)
                .section504(false)
                .languageCode(null)
                .militaryConnectedCode(null)
                .migrantStatus(null);
    }

    private final Student student1 = student(-1)
            .ethnicityCodes(ImmutableSet.of("ethnicity-29", "ethnicity-28"))
            .build();
    private final Student student2 = student(-2)
            .economicDisadvantage(true)
            .individualEducationPlan(true)
            .limitedEnglishProficiency(true)
            .section504(true)
            .ethnicityCodes(ImmutableSet.of("ethnicity-27"))
            .build();
    private final Student student4 = student(-4).build();
    private final Student student5 = student(-5).build();
    private final Student student6 = student(-6).build();
    private final Student student100 = student(-100)
            .ssid("transfer_1")
            .firstName("to_school4")
            .lastName("from_school3")
            .individualEducationPlan(null)
            .limitedEnglishProficiency(null)
            .section504(null)
            .languageCode(null)
            .militaryConnectedCode(null)
            .build();

    private final List<Student> AllStudentsWithExams = ImmutableList.of(
            student1,
            student2,
            student4,
            student5,
            student6,
            student100
    ).stream()
            .sorted(comparing(Student::getLastName)
                    .thenComparing(Student::getFirstName)
                    .thenComparing(Student::getSsid)
            ).collect(toList());

    @Test
    public void itShouldFindAllStudentsWithExamsWhenNoFiltersAreSet() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                emptySearch
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(AllStudentsWithExams);
    }

    @Test
    public void itShouldFindExamsForUserWithPIIPermission() {

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(individualStatewide).build(), emptySearch).size()).isEqualTo(AllStudentsWithExams.size());

        //each test verifies valid and invalid organization
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schools(-10L)))).build(), emptySearch).size()).isEqualTo(1);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schools(-10L, -20L, -30L, -40L)))).build(), emptySearch).size()).isEqualTo(4);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schools(-10L, -20L, -30L, -40L, -50L)))).build(), emptySearch).size()).isEqualTo(AllStudentsWithExams.size());
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schools(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-40L)))).build(), emptySearch).size()).isEqualTo(1);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(districts(-20L)))).build(), emptySearch).size()).isEqualTo(2);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(districts(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(districtGroups(-40L)))).build(), emptySearch).size()).isEqualTo(2);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(individualOf(districtGroups(-99L)))).build(), emptySearch)).isEmpty();
    }

    @Test
    public void itShouldFindExamsForUserWithGroupPermission() {

        // verify that it is restricted to the group subject
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).build(), emptySearch).size()).isEqualTo(AllStudentsWithExams.size());

        //each test verifies valid and invalid organization
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).build(), emptySearch).size()).isEqualTo(1);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schools(-10L, -20L, -30L, -40L)))).build(), emptySearch).size()).isEqualTo(4);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schools(-10L, -20L, -30L, -40L, -50L)))).build(), emptySearch).size()).isEqualTo(AllStudentsWithExams.size());
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schools(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schoolGroups(-40L)))).build(), emptySearch).size()).isEqualTo(1);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(schoolGroups(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(districts(-20L)))).build(), emptySearch).size()).isEqualTo(2);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(districts(-99L)))).build(), emptySearch)).isEmpty();

        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(districtGroups(-40L)))).build(), emptySearch).size()).isEqualTo(2);
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(groupOf(districtGroups(-99L)))).build(), emptySearch)).isEmpty();

        // verify that it is restricted to the group user
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(groupStatewide).username("someoneelse@somewhere.com").build(), emptySearch)).isEmpty();
    }

    @Test
    public void itShouldFindBySchoolId() {
        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().schoolId(-10L).build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student4);
    }

    @Sql(scripts = {"classpath:integration-test-data.sql"}, statements = {"update student_group set subject_id = 2 where id = -10"})
    @Test
    public void itShouldFindByStudentGroupIgnoringGroupSubject() {
        //verify that the test data is set up as expected: the group's subject does not match student's latest exam subject
        assertThat(template.queryForObject(
                "SELECT a.subject_id\n" +
                        "FROM exam e\n" +
                        "  LEFT OUTER JOIN exam e2 ON e.student_id = e2.student_id AND (e.completed_at < e2.completed_at OR (e.completed_at = e2.completed_at AND e.id < e2.id))\n" +
                        "  JOIN asmt a ON a.id = e.asmt_id\n" +
                        "WHERE e2.student_id IS NULL AND e.student_id = -1", Integer.class)).isEqualTo(1);

        final List<Student> actual = repository.findAll(
                userBuilder.permissionsById(individualStatewide).build(),
                search().groupId(-10L).build()
        );
        assertThat(actual)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student1);
    }

    @Test
    public void itShouldFindByStudentIdsAndFilterOutStudentsBasedOnPermissions() {
        assertThat(repository.findAll(
                userBuilder.permissionsById(permissions(individualOf(schools(-10L)))).build(), newArrayList(-1L, -2L, -3L, -4L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student4);

        assertThat(repository.findAll(
                userBuilder.permissionsById(permissions(groupOf(schools(-10L)))).build(), newArrayList(-1L, -2L, -3L, -4L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(student4);
    }

    @Test
    public void itShouldFindNothingForUserWithoutRequiredPermission() {
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", new PermissionScope.Builder().statewide(true).build()))).build(), emptySearch)).isEmpty();
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", schools(-10L)))).build(), emptySearch)).isEmpty();
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", districts(-20L)))).build(), emptySearch)).isEmpty();
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", schoolGroups(-10L)))).build(), emptySearch)).isEmpty();
        Assertions.assertThat(repository.findAll(userBuilder.permissionsById(permissions(new Permission("UNKNOWN", districtGroups(-10L)))).build(), emptySearch)).isEmpty();
    }
}
