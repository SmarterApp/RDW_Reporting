package org.opentestsystem.rdw.reporting.group;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcUserGroupRepository.class, ITDataSourceConfiguration.class})
@Sql(scripts = {"user-groups.sql"})
@ActiveProfiles("test")
public class JdbcUserGroupRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private UserGroupRepository repository;

    private User user1 = userBuilder().username("user1").build();
    private Group.Builder group1 = group().id(-10L).name("group1").subjectCodes(ImmutableSet.of("subject1"));
    private Group.Builder group2 = group().id(-20L).name("group2").subjectCodes(ImmutableSet.of("subject2"));
    private Group.Builder group3 = group().id(-30L).name("group3").subjectCodes(ImmutableSet.of("subject1"));

    private Group.Builder group() {
        return Group.builder().userCreated(true);
    }

    @Test
    public void findAllShouldReturnAllGroupsAssociatedWithTheUser() {
        assertThat(repository.findAll(user1))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        group1.subjectCode("subject1").build(),
                        group2.subjectCode("subject2").build()
                );
    }

    @Test
    public void findOneShouldReturnGroupIfPresentAndUserOwnsIt() {
        assertThat(repository.findOne(user1, group1.build().getId()))
                .isEqualToComparingFieldByFieldRecursively(
                        group1.studentIds(ImmutableSet.of(-10L, -20L)).build()
                );
    }

    @Test
    public void findOneShouldReturnNullIfGroupIsAbsent() {
        assertThat(repository.findOne(user1, -999L)).isNull();
    }

    @Test
    public void findOneShouldReturnNullIfGroupIsPresentButUserDoesntOwnIt() {
        assertThat(repository.findOne(user1, group3.build().getId())).isNull();
    }

    @Test
    public void createShouldInsert() {
        final Group.Builder creation = group()
                .name("-900")
                .subjectCodes(ImmutableSet.of("subject1"))
                .studentIds(ImmutableSet.of(-30L));

        final Group actual = repository.create(user1.getUsername(), creation.build());
        final Group expected = creation.id(actual.getId()).build();

        assertThat(actual.getId()).isNotNull();
        assertThat(repository.findOne(user1, actual.getId()))
                .isEqualToComparingFieldByFieldRecursively(expected);
    }

    @Test
    public void itShouldAllowDuplicateGroupNamesPerUser() {
        final Group.Builder creation = group()
                .name("testDuplicateName")
                .subjectCodes(ImmutableSet.of("subject1"))
                .studentIds(ImmutableSet.of(-30L));

        final Group group1 = repository.create(user1.getUsername(), creation.build());
        final Group group2 = repository.create(user1.getUsername(), creation.build());
        assertThat(group1.getId()).isNotEqualTo(group2.getId());
    }

    @Test
    public void updateShouldUpdate() {
        final Group update = group()
                .id(-10L)
                .name("newGroupName")
                .subjectCodes(ImmutableSet.of("subject2"))
                .studentIds(ImmutableSet.of(-20L, -30L))
                .build();

        repository.update(update);

        assertThat(repository.findOne(user1, update.getId()))
                .isEqualToComparingFieldByFieldRecursively(update);
    }

    @Test
    public void deleteShouldDelete() {
        final long groupId = -10;

        assertThat(repository.findOne(user1, groupId)).isNotNull();

        repository.delete(groupId);

        assertThat(repository.findOne(user1, groupId)).isNull();
    }

}
