package org.opentestsystem.rdw.reporting.student;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = StudentController.class)
public class StudentControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private StudentService service;

    @Test
    public void itShouldReturnWhatServiceReturns() throws Exception {

        final Student student1 = Student.builder().id(1).firstName("firstName1").build();
        final Student student2 = Student.builder().id(2).firstName("firstName2").build();
        final List<Student> students = newArrayList(student1, student2);

        final StudentSearch search = StudentSearch.builder().schoolId(1L).build();

        when(service.getStudents(any(User.class), refEq(search))).thenReturn(students);

        mvc.perform(get("/students?schoolId=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[?(@.id==1 && @.firstName=='firstName1')]").exists())
                .andExpect(jsonPath("$[?(@.id==2 && @.firstName=='firstName2')]").exists());
    }

}