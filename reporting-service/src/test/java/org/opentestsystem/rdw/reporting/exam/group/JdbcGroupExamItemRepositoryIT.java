package org.opentestsystem.rdw.reporting.exam.group;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.model.ExamItem;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;

import java.util.Collection;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import(JdbcGroupExamItemRepository.class)
public class JdbcGroupExamItemRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private GroupExamItemRepository repository;

    private GroupExamSearch.Builder search() {
        return GroupExamSearch.builder()
                .groupGrant(new GroupGrant(-10L, 1))
                .schoolYear(1997)
                .assessmentId(-1);
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingAssessment() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(groupStatewide).build(), search().assessmentId(0).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingYear() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(groupStatewide).build(), search().schoolYear(2016).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingGroup() {
        assertThat(repository.findAllExamItemScoresForAssessment(
                userBuilder.permissionsById(groupStatewide).build(), search().groupGrant(new GroupGrant(0, 1)).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldReturnAllItems() {
        final Collection<ExamItem> examItems = repository.findAllExamItemScoresForAssessment(userBuilder.permissionsById(groupStatewide).build(), search().build());
        assertThat(examItems)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItem.builder()
                                .examId(-1)
                                .itemId(-1)
                                .points(0)
                                .position(1)
                                .response("A")
                                .build(),
                        ExamItem.builder()
                                .examId(-1)
                                .itemId(-2)
                                .points(1)
                                .position(2)
                                .response("D")
                                .writingTraitScores(2, 3, 1)
                                .build()
                );
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccess() {

        final GroupExamSearch query = search()
                .schoolYear(1998)
                .groupGrant(new GroupGrant(-100, 1))
                .build();

        final User user = userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build();
        final List<ExamItem> withoutTransfer = repository.findAllExamItemScoresForAssessment(user, query);
        assertThat(withoutTransfer).isEmpty();

        getTenantProperties().setTransferAccessEnabled(true);
        final List<ExamItem> withTransfer = repository.findAllExamItemScoresForAssessment(user, query);
        assertThat(withTransfer.stream().map(ExamItem::getExamId))
                .containsOnly(-100L);
    }
}