package org.opentestsystem.rdw.reporting.assessment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.LocalDate;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentPercentileRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcAssessmentPercentileRepositoryIT {

    @Autowired
    private AssessmentPercentileRepository repository;

    @Test
    public void itShouldFindAllForAssessment() {
        assertThat(repository.findAllForAssessment(-2)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(Percentile.builder()
                                .assessmentId(-2)
                                .startDate(LocalDate.parse("1996-01-01"))
                                .endDate(LocalDate.parse("1997-01-07"))
                                .mean(2410)
                                .standardDeviation(89)
                                .count(11)
                                .percentileScores(of(
                                        PercentileScore.builder().percentileRank(5).score(1113).build(),
                                        PercentileScore.builder().percentileRank(10).score(2003).build(),
                                        PercentileScore.builder().percentileRank(20).score(2325).build(),
                                        PercentileScore.builder().percentileRank(25).score(2358).build(),
                                        PercentileScore.builder().percentileRank(90).score(2370).build(),
                                        PercentileScore.builder().percentileRank(95).score(2578).build())
                                ).build(),
                        Percentile.builder()
                                .assessmentId(-2)
                                .startDate(LocalDate.parse("2016-01-02"))
                                .endDate(LocalDate.parse("2018-06-30"))
                                .mean(2421)
                                .standardDeviation(78)
                                .count(22)
                                .percentileScores(of(
                                        PercentileScore.builder().percentileRank(5).score(1121).build(),
                                        PercentileScore.builder().percentileRank(10).score(2313).build(),
                                        PercentileScore.builder().percentileRank(15).score(2332).build(),
                                        PercentileScore.builder().percentileRank(95).score(2358).build())
                                ).build());
    }

    @Test
    public void itShouldReturnEmptyListWhenNotFound() {
        assertThat(repository.findAllForAssessment(-7)).isEmpty();
    }
}