package org.opentestsystem.rdw.reporting.assessment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.LocalDate;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentPercentileRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcAssessmentPercentileRepositoryIT {

    @Autowired
    private AssessmentPercentileRepository repository;

    private static final LocalDate percentile1StartDate = LocalDate.parse("1996-01-01");
    private static final LocalDate percentile1EndDate = LocalDate.parse("1997-01-07");

    private static final LocalDate percentile2StartDate = LocalDate.parse("2016-01-02");
    private static final LocalDate percentile2EndDate = LocalDate.parse("2018-06-30");

    private static final Percentile percentile1 = Percentile.builder()
            .assessmentId(-2)
            .startDate(percentile1StartDate)
            .endDate(percentile1EndDate)
            .mean(2410)
            .standardDeviation(89)
            .count(11)
            .percentileScores(of(
                    PercentileScore.builder().percentileRank(5).score(1113).build(),
                    PercentileScore.builder().percentileRank(10).score(2003).build(),
                    PercentileScore.builder().percentileRank(20).score(2325).build(),
                    PercentileScore.builder().percentileRank(25).score(2358).build(),
                    PercentileScore.builder().percentileRank(90).score(2370).build(),
                    PercentileScore.builder().percentileRank(95).score(2578).build())
            ).build();

    private static final Percentile percentile2 = Percentile.builder()
            .assessmentId(-2)
            .startDate(percentile2StartDate)
            .endDate(percentile2EndDate)
            .mean(2421)
            .standardDeviation(78)
            .count(22)
            .percentileScores(of(
                    PercentileScore.builder().percentileRank(5).score(1121).build(),
                    PercentileScore.builder().percentileRank(10).score(2313).build(),
                    PercentileScore.builder().percentileRank(15).score(2332).build(),
                    PercentileScore.builder().percentileRank(95).score(2358).build())
            ).build();

    @Test
    public void itShouldFindAllForAssessmentBasedOnOverlappingDateRange() {
        final AssessmentPercentileRequest.Builder requestBuilder = AssessmentPercentileRequest.builder()
                .assessmentId(-2)
                .startDate(percentile1StartDate)
                .endDate(percentile2EndDate);

        assertThat(repository.findAllForAssessment(requestBuilder.build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(percentile1, percentile2);

        assertThat(repository.findAllForAssessment(requestBuilder
                .startDate(percentile1StartDate.plusDays(1))
                .endDate(percentile2EndDate.minusDays(1)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(percentile1, percentile2);

        assertThat(repository.findAllForAssessment(requestBuilder
                .startDate(percentile2StartDate.plusDays(1))
                .endDate(percentile2EndDate.minusDays(1)).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(percentile2);

        assertThat(repository.findAllForAssessment(requestBuilder
                .startDate(percentile2StartDate)
                .endDate(percentile2StartDate).build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(percentile2);

        assertThat(repository.findAllForAssessment(requestBuilder
                .startDate(percentile1EndDate.plusDays(1))
                .endDate(percentile2StartDate.minusDays(1)).build()))
                .isEmpty();
    }

    @Test
    public void itShouldReturnEmptyListWhenNotFound() {
        final AssessmentPercentileRequest request = AssessmentPercentileRequest.builder()
                .assessmentId(-7)
                .startDate(percentile1StartDate)
                .endDate(percentile2EndDate)
                .build();
        assertThat(repository.findAllForAssessment(request)).isEmpty();
    }
}