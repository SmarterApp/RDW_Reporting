package org.opentestsystem.rdw.reporting.item;

import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.reporting.artifact.ArtifactRepository;

import javax.imageio.ImageIO;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultExamItemServiceTest {

    private static final String simpleItemId = "187-2044";
    private static final String imageItemId = "187-1889";
    private static final String multiItemId = "187-2638";
    private static final String noRubricItemId = "187-2661";
    private DefaultExamItemService service;

    @Before
    public void before() throws Exception {
        final ArtifactRepository repository = mock(ArtifactRepository.class);
        when(repository.getItemXml(anyString())).thenAnswer(new Answer<InputStream>() {
            @Override
            public InputStream answer(final InvocationOnMock invocation) throws Throwable {
                final String id = (String) invocation.getArguments()[0];
                // TODO would like to reuse existing duplicate items under classpath:/items/...
                return this.getClass().getResourceAsStream(MessageFormat.format("/{0}.xml", id));
            }
        });
        when(repository.getArtifactFromItemDirectory(anyString(), anyString())).thenReturn(CreateMockImageInputStream());

        service = new DefaultExamItemService(repository);
    }

    @Test
    public void getScoringGuideShouldReturnRubricLoadedFromStringConstant() {
        final ScoringCriterion rubrics = service.getScoringGuide(simpleItemId).getRubrics().get(0);
        assertThat(rubrics.getTemplate()).hasSize(1603);
    }

    @Test
    public void getScoringGuideShouldReturnsRubricWhenLoadedFromFileAndEncodeImages() {
        final ScoringCriterion rubric = service.getScoringGuide(imageItemId).getRubrics().get(0);
        assertThat(rubric.getTemplate()).contains("src=\"data:image/png;base64,");
    }

    @Test
    public void getScoringGuideWithMultiplesShouldReturnAll() {
        assertThat(service.getScoringGuide(multiItemId).getRubrics())
                .usingElementComparatorOnFields("scorepoint")
                .containsExactly(
                        ScoringCriterion.builder().scorepoint("4").build(),
                        ScoringCriterion.builder().scorepoint("3").build(),
                        ScoringCriterion.builder().scorepoint("2").build(),
                        ScoringCriterion.builder().scorepoint("1").build(),
                        ScoringCriterion.builder().scorepoint("0").build()
                );
    }

    @Test
    public void getByIdSWithNoScoringCriteriaShouldReturnEmptyCollection() {
        assertThat(service.getScoringGuide(noRubricItemId).getRubrics()).isEmpty();
    }

    @Test(expected = RuntimeException.class)
    public void getScoringGuideFileNotFoundShouldThrowException() {
        service.getScoringGuide("11815-1515005");
    }

    @Test
    public void getScoringGuideShouldReturnExemplars() {
        assertThat(service.getScoringGuide(multiItemId).getExemplars())
                .usingElementComparatorOnFields("template", "scorepoint")
                .containsExactly(
                        ScoringCriterion.builder().template("<p style=\"\"> </p>").scorepoint("4").build(),
                        ScoringCriterion.builder().template("<p style=\"\"> </p>").scorepoint("3").build(),
                        ScoringCriterion.builder().template("<p style=\"\"> </p>").scorepoint("2").build(),
                        ScoringCriterion.builder().template("<p style=\"\"> </p>").scorepoint("1").build(),
                        ScoringCriterion.builder().template("<p style=\"\"> </p>").scorepoint("0").build()
                );
    }

    @Test
    public void getScoringGuideShouldReturnAnswerKey() {
        assertThat(service.getScoringGuide(noRubricItemId).getAnswerKey().getValue()).isEqualTo("A,E,F");
    }

    @Test
    public void getScoringGuideShouldNotReturnAnswerKeyForItemTypeWER() {
        assertThat(service.getScoringGuide(multiItemId).getAnswerKey()).isNull();
    }

    private InputStream CreateMockImageInputStream() throws IOException {
        final BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
        final Graphics graphics = image.createGraphics();
        graphics.drawRect(2, 2, 50, 50);
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ImageIO.write(image, "png", outputStream);
        return new ByteArrayInputStream(outputStream.toByteArray());
    }

}
