package org.opentestsystem.rdw.reporting.exam.schoolgrade;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.student.JdbcStudentEthnicityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;


@Import({JdbcSchoolGradeExamRepository.class, JdbcStudentEthnicityRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcSchoolGradeExamRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private SchoolGradeExamRepository repository;

    private SchoolGradeExamSearch.Builder search() {
        return SchoolGradeExamSearch.builder()
                .schoolId(-10)
                .gradeId(-1)
                .assessmentId(-1)
                .schoolYear(1997);
    }

    @Test
    public void findAllForAssessmentShouldFindAll() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(TestData.EXAMS_BY_ID.get(-1L));
    }

    @Test
    public void findAllForAssessmentShouldRespectTransferAccess() {
        final SchoolGradeExamSearch query = search()
                .schoolYear(1998)
                .schoolId(-40)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build();
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).isEmpty();

        getReportingSystemProperties().setTransferAccessEnabled(true);
        assertThat(repository.findAllForAssessment(user, query).stream().map(Exam::getId)).containsOnly(-100L);
    }

    @Test
    public void findAllForAssessmentForBadPermissionsShouldFindNothing() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(permissions(groupOf(schools(-100L)))).build(), search().build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolShouldFindNothing() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().schoolId(-400).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolGradeShouldFindNothing() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().gradeId(-2).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentAssessmentShouldFindNothing() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().assessmentId(-20).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentYearShouldFindNothing() {
        assertThat(repository.findAllForAssessment(userBuilder.permissionsById(individualStatewide).build(), search().schoolYear(2016).build())).isEmpty();
    }
}
