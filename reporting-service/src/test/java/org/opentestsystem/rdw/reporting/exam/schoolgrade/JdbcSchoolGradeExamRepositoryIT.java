package org.opentestsystem.rdw.reporting.exam.schoolgrade;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeExamRepositoryIT {
    private static final Map<String, Permission> stateWidePermission = permissions(individualOf(PermissionScope.STATEWIDE));

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcSchoolGradeExamRepository repository;


    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    private SchoolGradeExamSearch.Builder search() {
        return SchoolGradeExamSearch.builder()
                .schoolId(-10)
                .gradeId(-1)
                .assessmentId(-1)
                .schoolYear(1997);

    }

    @Test
    public void findAllForAssessmentShouldFindAll() throws Exception {
        assertThat(repository.findAllForAssessment(stateWidePermission, search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(TestData.EXAMS_BY_ID.get(-1L));
    }

    @Test
    public void findAllForAssessmentShouldRespectTransferAccess() throws Exception {
        final SchoolGradeExamSearch query = search()
                .schoolYear(1998)
                .schoolId(-40)
                .build();

        final List<Exam> withoutTransfer = repository.findAllForAssessment(stateWidePermission, query);
        assertThat(withoutTransfer.stream().map(Exam::getId))
                .isEmpty();

        tenantProperties.setTransferAccessEnabled(true);
        final List<Exam> withTransfer = repository.findAllForAssessment(stateWidePermission, query);
        assertThat(withTransfer.stream().map(Exam::getId))
                .containsOnly(-100L);
    }

    @Test
    public void findAllForAssessmentForBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(permissions(individualOf(schools(-100L))), search().build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(stateWidePermission, search().schoolId(-40).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(stateWidePermission, search().gradeId(-2).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentAssessmentShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(stateWidePermission, search().assessmentId(-20).build())).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(stateWidePermission, search().schoolYear(2016).build())).isEmpty();
    }

}
