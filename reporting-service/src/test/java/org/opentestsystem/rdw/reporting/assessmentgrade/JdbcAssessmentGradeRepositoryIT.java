package org.opentestsystem.rdw.reporting.assessmentgrade;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.assessmentgrade.JdbcAssessmentGradeRepository;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Grade;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentGradeRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcAssessmentGradeRepositoryIT {

    @Autowired
    private JdbcAssessmentGradeRepository repository;

    private final Grade grade1 = new Grade(-1, "g1");

    @Test
    public void findAllForSchoolShouldReturnAll() throws Exception {
        assertThat(repository.findAllForSchool(PermissionScope.STATEWIDE, -10L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(grade1);
    }

    @Test
    public void findAllForSchoolShouldBeEmptyForMismatchingSchool() throws Exception {
        assertThat(repository.findAllForSchool(PermissionScope.STATEWIDE, -100L)).isEmpty();
    }

    @Test
    public void findAllForSchoolShouldBeEmptyIfPermissionScopeDoesntPermit() throws Exception {
        assertThat(repository.findAllForSchool(PermissionScope.builder().addSchoolId(-100).build(), -10L)).isEmpty();
    }

}
