package org.opentestsystem.rdw.reporting.assessmentgrade;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.model.Grade;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import(JdbcAssessmentGradeRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcAssessmentGradeRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private AssessmentGradeRepository repository;

    private final Grade grade1 = Grade.builder().id(-1).code("g1").sequence(1).build();

    @Test
    public void findAllForSchoolShouldReturnAll() throws Exception {
        assertThat(repository.findAllForSchool(userBuilder.permissionsById(individualStatewide).build(), -10L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(grade1);
    }

    @Test
    public void findAllForSchoolShouldBeEmptyForMismatchingSchool() throws Exception {
        assertThat(repository.findAllForSchool(userBuilder.permissionsById(individualStatewide).build(), -100L)).isEmpty();
    }

    @Test
    public void findAllForSchoolShouldBeEmptyIfPermissionScopeDoesntPermit() throws Exception {
        assertThat(repository.findAllForSchool(userBuilder.permissionsById(permissions(individualOf(schools(-100L)))).build(), -10L)).isEmpty();
    }
}
