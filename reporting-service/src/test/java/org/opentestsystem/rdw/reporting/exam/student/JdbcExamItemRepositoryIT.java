package org.opentestsystem.rdw.reporting.exam.student;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.common.model.ExamItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;


@Import(JdbcExamItemRepository.class)
@Sql(scripts = {"classpath:integration-test-data.sql"})
public class JdbcExamItemRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private ExamItemRepository repository;

    @Test
    public void itShouldReturnAnEmptyListIfNoResultsFound() throws Exception {
        assertThat(repository.findAllByExamId(userBuilder.permissionsById(individualStatewide).build(), 123L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnEmptyExamItemIfNotInGroupSubject() throws Exception {
        assertThat(repository.findAllByExamId(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), -1L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnExamItemIfInGroupSubject() throws Exception {
        assertThat(repository.findAllByExamId(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), -7L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnEmptyExamItemIfNotInGroup() throws Exception {
        assertThat(repository.findAllByExamId(userBuilder.permissionsById(groupStatewide).build(), -7L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnEmptyExamItemIfSummativeType() throws Exception {
        assertThat(repository.findAllByExamId(userBuilder.permissionsById(groupStatewide).build(), -9L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnExamItemIfInGroup() throws Exception {
        verifyExamItemsForStudent1(repository.findAllByExamId(userBuilder.permissionsById(groupStatewide).build(), -1L));
    }

    @Test
    public void itShouldRetrieveExamItemsForStudentAndExam() throws Exception {
        verifyExamItemsForStudent1(repository.findAllByExamId(userBuilder.permissionsById(individualStatewide).build(), -1L));
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccessIndividual() {
        final List<ExamItem> withoutTransfer = repository.findAllByExamId(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100);
        assertThat(withoutTransfer).isEmpty();

        getTenantProperties().setTransferAccessEnabled(true);
        final List<ExamItem> withTransfer = repository.findAllByExamId(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100);
        assertThat(withTransfer.stream().map(ExamItem::getExamId))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccessGroup() {

        final List<ExamItem> withoutTransfer = repository.findAllByExamId(userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build(), -100);
        assertThat(withoutTransfer).isEmpty();

        getTenantProperties().setTransferAccessEnabled(true);
        final List<ExamItem> withTransfer = repository.findAllByExamId(userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build(), -100);
        assertThat(withTransfer.stream().map(ExamItem::getExamId))
                .containsOnly(-100L);
    }

    private void verifyExamItemsForStudent1(final List<ExamItem> examItems) {
        assertThat(examItems)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItem.builder()
                                .itemId(-1L)
                                .examId(-1L)
                                .points(0)
                                .position(1)
                                .response("A")
                                .build(),
                        ExamItem.builder()
                                .itemId(-2L)
                                .examId(-1L)
                                .points(1)
                                .position(2)
                                .response("D")
                                .writingTraitScores(2, 3, 1)
                                .build());
    }
}