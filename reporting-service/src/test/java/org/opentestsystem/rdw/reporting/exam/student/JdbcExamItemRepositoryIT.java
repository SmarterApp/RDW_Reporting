package org.opentestsystem.rdw.reporting.exam.student;

import com.google.common.collect.ImmutableSet;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.ExamItem;
import org.opentestsystem.rdw.reporting.exam.WritingTraitScores;
import org.opentestsystem.rdw.reporting.exam.student.JdbcExamItemRepository;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamItemRepositoryIT {

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcExamItemRepository repository;

    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    @Test
    public void itShouldReturnAnEmptyListIfNoResultsFound() throws Exception {
        assertThat(repository.findAllByExamId(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), 123L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnEmptyExamItemIfNotInGroupSubject() throws Exception {
        assertThat(repository.findAllByExamId(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), -1L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnExamItemIfInGroupSubject() throws Exception {
        assertThat(repository.findAllByExamId(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), -7L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnEmptyExamItemIfNotInGroup() throws Exception {
        assertThat(repository.findAllByExamId(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-10L), -7L)).isEmpty();
    }

    @Test
    public void itShouldReturnAnExamItemIfInGroup() throws Exception {
        assertThat(repository.findAllByExamId(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-10L), -1L)).isNotEmpty();
    }

    @Test
    public void itShouldRetrieveExamItemsForStudentAndExam() throws Exception {
        assertThat(repository.findAllByExamId(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), -1L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItem.builder()
                                .itemId(-1L)
                                .examId(-1L)
                                .points(0)
                                .position(1)
                                .response("A")
                                .build(),
                        ExamItem.builder()
                                .itemId(-2L)
                                .examId(-1L)
                                .points(1)
                                .position(2)
                                .response("D")
                                .writingTraitScores(2, 3, 1)
                                .build());
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccessIndividual() {
        final PermissionScope school4Scope = PermissionScope.builder()
                .addSchoolId(-40)
                .build();

        final List<ExamItem> withoutTransfer = repository.findAllByExamId(permissions(individualOf(school4Scope)), ImmutableSet.of(), -100);
        assertThat(withoutTransfer).isEmpty();

        tenantProperties.setTransferAccessEnabled(true);
        final List<ExamItem> withTransfer = repository.findAllByExamId(permissions(individualOf(school4Scope)), ImmutableSet.of(), -100);
        assertThat(withTransfer.stream().map(ExamItem::getExamId))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldFindAllExamItemsRespectingTransferAccessGroup() {
        final PermissionScope school4Scope = PermissionScope.builder()
                .addSchoolId(-40)
                .build();

        final List<ExamItem> withoutTransfer = repository.findAllByExamId(permissions(groupOf(school4Scope)), ImmutableSet.of(-100L), -100);
        assertThat(withoutTransfer).isEmpty();

        tenantProperties.setTransferAccessEnabled(true);
        final List<ExamItem> withTransfer = repository.findAllByExamId(permissions(groupOf(school4Scope)), ImmutableSet.of(-100L), -100);
        assertThat(withTransfer.stream().map(ExamItem::getExamId))
                .containsOnly(-100L);
    }
}