package org.opentestsystem.rdw.reporting.exam.student;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.JdbcRepositoryWithPermissionIT;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@Import(JdbcStudentExamRepository.class)
public class JdbcStudentExamRepositoryIT extends JdbcRepositoryWithPermissionIT {

    @Autowired
    private StudentExamRepository repository;

    @Test
    public void findAllForStudentShouldReturnEmptyForMissingStudent() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), 0L)).isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnNullIfStudentIsNotInAnyGroup() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).username("someoneelse@somewhere.com").build(), -1L)).isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnIfStudentIsInGroup() {
        verifyExamsForStudent1(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).build(), -1L), TestData.STUDENT10_GROUP10_EXAMS, TestData.STUDENT10_GROUP10_ASSESSMENTS);
    }

    @Test
    public void findAllForStudentShouldReturnNullIfStudentIsInGroupButHasNoAsmtForSubject() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), -1L)).isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnIfStudentIsInGroupAndHasAsmtForSubject() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), -2L)).isNotEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnAllExamsForExistingStudent() {
        verifyExamsForStudent1(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), -1L), TestData.STUDENT10_EXAMS, TestData.STUDENT10_ASSESSMENTS);
    }

    @Test
    public void itShouldFindAllForStudentRespectingTransferAccessIndividual() {
        final List<StudentHistoryExamWrapper> withoutTransfer = repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100L);
        assertThat(withoutTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-101L);

        getTenantProperties().setTransferAccessEnabled(true);
        final List<StudentHistoryExamWrapper> withTransfer = repository.findAllForStudent(userBuilder.permissionsById(permissions(individualOf(schools(-40L)))).build(), -100L);
        assertThat(withTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-100L, -101L);
    }

    @Test
    public void itShouldFindAllForStudentRespectingTransferAccessGroup() {
        final List<StudentHistoryExamWrapper> withoutTransfer = repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build(), -100L);
        assertThat(withoutTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-101L);

        getTenantProperties().setTransferAccessEnabled(true);
        final List<StudentHistoryExamWrapper> withTransfer = repository.findAllForStudent(userBuilder.permissionsById(permissions(groupOf(schools(-40L)))).build(), -100L);
        assertThat(withTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-100L, -101L);
    }

    @Test
    public void itShouldDetermineIfAnExamExistsForAStudent() {
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(individualStatewide).build(), "unknown_ssid"))
                .isNull();
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(individualStatewide).build(), "student1_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(individualStatewide).build(), "student3_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnNullIfStudentIsNotInGroup() {
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(groupStatewide).username("someoneelse@somewhere.com").build(), "student1_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnIfStudentIsInGroup() {
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(groupStatewide).build(), "student1_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
    }

    @Test
    public void itShouldReturnNullIfStudentIsInGroupButHasNoAsmtForSubject() {
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), "student1_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnIfStudentIsInGroupAndHasAsmtForSubject() {
        assertThat(repository.findStudentWithExams(userBuilder.permissionsById(groupStatewide).username("someone-20@somewhere.com").build(), "student2_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
    }

    private void verifyExamsForStudent1(final List<StudentHistoryExamWrapper> wrappers, final List<Exam> expectedExams, final List<Assessment> expectedAssessments) {
        final List<Exam> exams = newArrayList();
        final List<Assessment> assessments = newArrayList();
        wrappers.forEach(wrapper -> {
            exams.add(wrapper.getExam());
            assessments.add(wrapper.getAssessment());
        });

        assertThat(exams)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(expectedExams);
        assertThat(assessments)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(expectedAssessments);
    }
}