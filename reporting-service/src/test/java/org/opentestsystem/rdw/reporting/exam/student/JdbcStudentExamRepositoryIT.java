package org.opentestsystem.rdw.reporting.exam.student;

import com.google.common.collect.ImmutableSet;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.student.JdbcStudentExamRepository;
import org.opentestsystem.rdw.reporting.exam.student.StudentHistoryExamWrapper;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentExamRepositoryIT {

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcStudentExamRepository repository;

    @After
    public void clearState() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    @Test
    public void findAllForStudentShouldReturnEmptyForMissingStudent() throws Exception {
        assertThat(repository.findAllForStudent(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), 0L)).isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnNullIfStudentIsNotInGroup() throws Exception {
        assertThat(repository.findAllForStudent(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-30L), -1L))
                .isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnIfStudentIsInGroup() throws Exception {
        assertThat(repository.findAllForStudent(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-10L), -1L))
                .isNotEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnNullIfStudentIsInGroupButHasNoAsmtForSubject() throws Exception {
        assertThat(repository.findAllForStudent(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), -1L))
                .isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnIfStudentIsInGroupAndHasAsmtForSubject() throws Exception {
        assertThat(repository.findAllForStudent(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), -2L))
                .isNotEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnAllExamsForExistingStudent() throws Exception {

        final List<StudentHistoryExamWrapper> wrappers = repository.findAllForStudent(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), -1L);
        final List<Exam> exams = newArrayList();
        final List<Assessment> assessments = newArrayList();
        wrappers.forEach(wrapper -> {
            exams.add(wrapper.getExam());
            assessments.add(wrapper.getAssessment());
        });

        assertThat(exams)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT_EXAMS);
        assertThat(assessments)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT_ASSESSMENTS);
    }

    @Test
    public void itShouldFindAllForStudentRespectingTransferAccessIndividual() {
        final PermissionScope school4Scope = PermissionScope.builder()
                .addSchoolId(-40)
                .build();

        final List<StudentHistoryExamWrapper> withoutTransfer = repository.findAllForStudent(permissions(individualOf(school4Scope)), ImmutableSet.of(), -100L);
        assertThat(withoutTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-101L);

        tenantProperties.setTransferAccessEnabled(true);
        final List<StudentHistoryExamWrapper> withTransfer = repository.findAllForStudent(permissions(individualOf(school4Scope)), ImmutableSet.of(), -100L);
        assertThat(withTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-100L, -101L);
    }

    @Test
    public void itShouldFindAllForStudentRespectingTransferAccessGroup() {
        final PermissionScope school4Scope = PermissionScope.builder()
                .addSchoolId(-40)
                .build();

        final List<StudentHistoryExamWrapper> withoutTransfer = repository.findAllForStudent(permissions(groupOf(school4Scope)), ImmutableSet.of(-100L), -100L);
        assertThat(withoutTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-101L);

        tenantProperties.setTransferAccessEnabled(true);
        final List<StudentHistoryExamWrapper> withTransfer = repository.findAllForStudent(permissions(groupOf(school4Scope)), ImmutableSet.of(-100L), -100L);
        assertThat(withTransfer.stream().map(history -> history.getExam().getId()))
                .containsOnly(-100L, -101L);
    }

    @Test
    public void itShouldDetermineIfAnExamExistsForAStudent() throws Exception {
        assertThat(repository.findStudentWithExams(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), "unknown_ssid"))
                .isNull();
        assertThat(repository.findStudentWithExams(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), "student1_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
        assertThat(repository.findStudentWithExams(permissions(individualOf(PermissionScope.STATEWIDE)), ImmutableSet.of(), "student3_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnNullIfStudentIsNotInGroup() throws Exception {
        assertThat(repository.findStudentWithExams(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-30L), "student1_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnIfStudentIsInGroup() throws Exception {
        assertThat(repository.findStudentWithExams(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-10L), "student1_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
    }

    @Test
    public void itShouldReturnNullIfStudentIsInGroupButHasNoAsmtForSubject() throws Exception {
        assertThat(repository.findStudentWithExams(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), "student1_ssid"))
                .isNull();
    }

    @Test
    public void itShouldReturnIfStudentIsInGroupAndHasAsmtForSubject() throws Exception {
        assertThat(repository.findStudentWithExams(permissions(groupOf(PermissionScope.STATEWIDE)), ImmutableSet.of(-20L), "student2_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
    }

}