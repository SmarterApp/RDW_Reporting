sql:
  embargo:
    existsForSchool: >-
      SELECT EXISTS(
        SELECT 1
        FROM school s
          JOIN district_embargo de ON de.district_id = s.district_id
        WHERE de.individual <> 2
          AND CASE coalesce(de.individual, 0)
            WHEN 0 THEN :state_embargo_loading = 1 OR s.district_id IN (:district_ids_embargo_loading)
            WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR s.district_id IN (:district_ids_embargo_loading) OR s.district_id IN (:district_ids_embargo_reviewing)
          END
        LIMIT 1) AS embargo_enabled

    existsForSchoolYearAndDistrict: >-
      SELECT EXISTS(
        SELECT 1
            FROM school_year y
              JOIN district d
              JOIN subject s
              LEFT JOIN district_embargo de ON
                      y.year = de.school_year and
                      d.id = de.district_id and
                      s.id = de.subject_id
            WHERE
              y.year = :school_year AND
              d.id = :district_id AND
              CASE coalesce(de.individual, 0)
                WHEN 0 THEN :state_embargo_loading = 1 OR d.id IN (:district_ids_embargo_loading)
                WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR d.id IN (:district_ids_embargo_loading) OR d.id IN (:district_ids_embargo_reviewing)
              END
        LIMIT 1) AS embargo_enabled

  student:
    # It finds all students with one of the following: school id, or groups id or student ids, and uses a student's latest exam to complete
    # the students' demographic data. Note: there is no embargo or transfer student logic here because it is about students, not exams.
    findAll:
      SELECT
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname,
        st.gender_code,
        e.economic_disadvantage,
        e.iep,
        e.lep,
        e.language_code,
        e.military_connected_code,
        e.elas_code,
        e.section504,
        e.migrant_status
      FROM student st
        JOIN school sc ON st.inferred_school_id = sc.id
        JOIN exam e ON st.id = e.student_id
        LEFT OUTER JOIN exam e2 ON e.student_id = e2.student_id AND (e.completed_at < e2.completed_at OR (e.completed_at = e2.completed_at AND e.id < e2.id))
      WHERE
        e2.student_id IS NULL
        AND
        ( :group_id IS NULL
          OR EXISTS(
              SELECT 1
              FROM student_group_membership sgm
                JOIN student_group sg ON sg.id = sgm.student_group_id
              WHERE sgm.student_id = st.id AND sg.id = :group_id
          )
        )
        AND (:school_id IS NULL OR sc.id = :school_id)
        AND (:search_student_ids IS FALSE OR st.id IN (:student_ids))
        AND
        (
         (1 = :individual_statewide OR sc.district_group_id IN (:individual_district_group_ids) OR sc.district_id IN (:individual_district_ids) OR sc.school_group_id IN (:individual_school_group_ids) OR sc.id IN (:individual_school_ids))
         OR
         (
           EXISTS(
               SELECT 1
               FROM student_group_membership gm
                 JOIN student_group sg ON sg.id = gm.student_group_id
                 JOIN user_student_group usg ON usg.student_group_id = gm.student_group_id
               WHERE gm.student_id = st.id AND usg.user_login = :user_login
           )
           AND
           (
             (1 = :group_statewide OR sc.district_group_id IN (:group_district_group_ids) OR sc.district_id IN (:group_district_ids) OR sc.school_group_id IN (:group_school_group_ids) OR sc.id IN (:group_school_ids))
           )
         )
        )
      ORDER BY st.last_or_surname, st.first_name, st.ssid;

  exam:
    findAllByStudentId: >-
      SELECT
        ${sql.snippet.claimAndAltScoreColumns},
        ${sql.snippet.exam}
      WHERE e.student_id = :student_id
       AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    existsForStudentId: >-
      SELECT
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname
      FROM student st
        JOIN exam e ON e.student_id = st.id
        JOIN asmt a ON a.id = e.asmt_id
        JOIN school s ON e.school_id = s.id
        JOIN school isch ON st.inferred_school_id = isch.id
        LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
      WHERE st.ssid = :student_ssid
      AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
      LIMIT 1

    findExamLevelTraitScoresByExamIds: >-
      SELECT ets.exam_id, ets.trait_id, st.purpose, st.category, st.max_score, ets.score, ets.condition_code
      FROM exam_trait_score ets
        JOIN subject_trait st on ets.trait_id = st.id
      WHERE ets.exam_id IN (:exam_ids)
      ORDER BY exam_id, purpose, category

  examItem:
    findAllForExam: >-
      ${sql.reporting.snippet.selectFromExamItem}
      WHERE e.id = :exam_id
      AND a.type_id != 3
      AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  group:
    assessment:
      findAll: >-
        SELECT distinct
          ${sql.reporting.snippet.assessmentColumns}
        FROM exam e
          JOIN asmt a ON e.asmt_id=a.id
          JOIN school s ON e.school_id = s.id
          JOIN subject su ON a.subject_id = su.id
          JOIN student st ON e.student_id = st.id
          JOIN school isch ON st.inferred_school_id = isch.id
          JOIN subject_asmt_type sat on su.id = sat.subject_id AND a.type_id = sat.asmt_type_id
          LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
          $[groupJoinPlaceholder]
        WHERE e.school_year = :school_year
          AND $[groupFilterPlaceholder]
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

      # NOTE that we're grouping by a.id and selecting the max(e.completed_at) timestamp
      # to improve final ordering performance
      findLatestExam: >-
        SELECT
          ${sql.reporting.snippet.assessmentColumns},
          max(e.completed_at) as max_completed
        FROM exam e
          JOIN asmt a ON e.asmt_id=a.id
          JOIN school s ON e.school_id=s.id
          JOIN subject su ON a.subject_id = su.id
          JOIN student st ON e.student_id = st.id
          JOIN school isch ON st.inferred_school_id = isch.id
          JOIN subject_asmt_type sat on su.id = sat.subject_id AND a.type_id = sat.asmt_type_id
          LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
          $[groupJoinPlaceholder]
        WHERE e.school_year = :school_year
          AND $[groupFilterPlaceholder]
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
        GROUP BY a.id
        ORDER BY max_completed desc
        LIMIT 1

    exam:
      findAllForAssessment: >-
        SELECT
          ${sql.snippet.claimAndAltScoreColumns},
          ${sql.snippet.exam}
          $[groupJoinPlaceholder]
        WHERE a.id = :assessment_id
          AND e.school_year = :school_year
          AND $[groupFilterPlaceholder]
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    examWithTargetScore:
      findAllForAssessment: >-
        SELECT
         ${sql.snippet.examColumns},
          st.gender_code as student_gender_code,
          ets.target_id,
          ets.standard_met_relative_residual_score,
          ets.student_relative_residual_score
        FROM exam e
          JOIN student st on st.id = e.student_id
          JOIN asmt a on e.asmt_id = a.id
          JOIN school s on e.school_id = s.id
          JOIN school isch on st.inferred_school_id = isch.id
          JOIN exam_target_score ets on ets.exam_id = e.id
          JOIN target t on t.id = ets.target_id
          LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
          $[groupJoinPlaceholder]
         WHERE a.id = :assessment_id
            AND e.school_year = :school_year
            AND $[groupFilterPlaceholder]
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    measuredAssessment:
      findAll: >-
        SELECT
          count(*) as tested,
          a.name,
          a.label,
          su.code as subject_code,
          a.type_id,
          a.school_year,
          g.code as grade_code,
          e.asmt_id as id,
          max(e.completed_at) as completed_at,
          round(avg(e.scale_score)) AS score,
          round(stddev_samp(e.scale_score)/sqrt(count(*))) as std_err,
          sum(CASE WHEN e.performance_level = 1 THEN 1 ELSE 0 END) AS level1,
          sum(CASE WHEN e.performance_level = 2 THEN 1 ELSE 0 END) AS level2,
          sum(CASE WHEN e.performance_level = 3 THEN 1 ELSE 0 END) AS level3
        FROM exam e
          JOIN asmt a ON a.id = e.asmt_id
          JOIN grade g ON g.id = a.grade_id
          JOIN school s ON e.school_id=s.id
          JOIN subject su ON a.subject_id=su.id
          JOIN student st ON st.id=e.student_id
          JOIN school isch ON st.inferred_school_id = isch.id
        WHERE e.id in (
          -- latest scored IAB exam per student, assessment and exam school year
          SELECT
            e1.id
          FROM (
                 SELECT e.id, e.student_id, e.asmt_id, e.school_year, e.completed_at
                 FROM exam e
                   JOIN asmt a ON a.id = e.asmt_id
                   JOIN student st ON st.id = e.student_id
                   $[groupJoinPlaceholder]
                 WHERE e.type_id = 2
                       AND e.school_year = :school_year
                       AND e.scale_score IS NOT NULL
                       AND e.scale_score_std_err IS NOT NULL
                       AND e.performance_level IS NOT NULL
                       AND $[groupFilterPlaceholder]
               ) AS e1 LEFT OUTER JOIN
            ( SELECT e.id, e.student_id, e.asmt_id, e.school_year, e.completed_at
              FROM exam e
                JOIN asmt a ON a.id = e.asmt_id
                JOIN student st ON st.id = e.student_id
                $[groupJoinPlaceholder]
            WHERE e.type_id = 2
                  AND e.school_year = :school_year
                  AND e.scale_score IS NOT NULL
                  AND e.scale_score_std_err IS NOT NULL
                  AND e.performance_level IS NOT NULL
                  AND $[groupFilterPlaceholder]
            ) AS e2
              ON e1.student_id = e2.student_id  AND e1.asmt_id = e2.asmt_id AND e1.school_year = e2.school_year
                 AND ( e1.completed_at < e2.completed_at OR (e1.completed_at = e2.completed_at AND e1.id < e2.id))
          WHERE e2.student_id IS NULL
        )
        AND ${sql.snippet.studentExamPermissionWithoutEmbargo}
        GROUP BY e.asmt_id;

    examItem:
      findAllExamItemScoresForAssessment:
        ${sql.reporting.snippet.selectFromExamItem}
        $[groupJoinPlaceholder]
        WHERE e.asmt_id = :assessment_id
          AND e.school_year = :school_year
          AND $[groupFilterPlaceholder]
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  schoolgrade:
    assessment:
      findAll: >-
        SELECT distinct
          ${sql.reporting.snippet.assessmentColumns}
        FROM exam e
          JOIN asmt a ON e.asmt_id=a.id
          JOIN school s ON e.school_id=s.id
          JOIN subject su ON a.subject_id = su.id
          JOIN student st ON e.student_id = st.id
          JOIN school isch ON st.inferred_school_id = isch.id
          JOIN subject_asmt_type sat on su.id = sat.subject_id AND a.type_id = sat.asmt_type_id
          LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
        WHERE e.school_year = :school_year
        AND e.school_id = :school_id
        AND a.grade_id = :grade_id
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

      # NOTE that we're grouping by a.id and selecting the max(e.completed_at) timestamp
      # to improve final ordering performance
      findLatestExam: >-
        SELECT
          ${sql.reporting.snippet.assessmentColumns},
          max(e.completed_at) as max_completed
        FROM exam e
          JOIN asmt a ON e.asmt_id=a.id
          JOIN school s ON e.school_id=s.id
          JOIN subject su ON a.subject_id = su.id
          JOIN student st ON e.student_id = st.id
          JOIN school isch ON st.inferred_school_id = isch.id
          JOIN subject_asmt_type sat on su.id = sat.subject_id AND a.type_id = sat.asmt_type_id
          LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
        WHERE e.school_year = :school_year
        AND e.school_id = :school_id
        AND a.grade_id = :grade_id
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
        GROUP BY a.id
        ORDER BY max_completed desc
        LIMIT 1

    exam:
      findAllForAssessment: >-
        SELECT
          ${sql.snippet.claimAndAltScoreColumns},
          ${sql.snippet.exam}
        WHERE a.id = :assessment_id
        AND a.grade_id = :grade_id
        AND e.school_year = :school_year
        AND (s.id = :school_id OR (1 = :allow_transfer_access AND isch.id = :school_id))
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    examItem:
      findAllExamItemScoresForAssessment:
        ${sql.reporting.snippet.selectFromExamItem}
        WHERE e.asmt_id = :assessment_id
        AND e.school_year = :school_year
        AND a.grade_id = :grade_id
        AND (s.id = :school_id OR (1 = :allow_transfer_access AND isch.id = :school_id))
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  assessment:
    grade:
      findAllForSchool: >-
        SELECT id, code, sequence
        FROM grade g WHERE EXISTS (
            SELECT a.grade_id
            FROM exam e
              JOIN asmt a ON a.id = e.asmt_id
              JOIN school s ON e.school_id = s.id
              JOIN student st ON e.student_id = st.id
              JOIN school isch ON st.inferred_school_id = isch.id
              LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
            WHERE e.school_id = :school_id
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
            AND g.id=a.grade_id
        )

  reporting:
    snippet:
      assessmentColumns: >-
        a.id,
        a.name,
        a.label,
        a.grade_code,
        a.type_id,
        a.school_year,
        ${sql.snippet.asmtScoreCodeColumns},
        a.min_score,
        a.max_score,
        a.cut_point_1,
        a.cut_point_2,
        a.cut_point_3,
        a.cut_point_4,
        a.cut_point_5,
        EXISTS(SELECT 1 FROM item i WHERE i.asmt_id = a.id AND i.type = 'WER') as has_wer_item,
        su.code as subject_code,
        sat.target_report,
        sat.printed_report,
        sat.trait_report

      selectFromExamItem: >-
       SELECT
          ei.id,
          ei.exam_id,
          ei.item_id,
          ei.score,
          ei.position,
          ei.response,
          ei.trait_evidence_elaboration_score,
          ei.trait_organization_purpose_score,
          ei.trait_conventions_score
        FROM exam_item ei
        JOIN exam e ON ei.exam_id=e.id
        JOIN asmt a ON e.asmt_id=a.id
        JOIN school s ON e.school_id=s.id
        JOIN student st ON st.id=e.student_id
        JOIN school isch ON st.inferred_school_id = isch.id
        LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id

      # recall district embargo flag values: 0 (Loading, default), 1 (Reviewing), 2 (Released)
      studentExamPermissionWithEmbargo: >-
        ${sql.snippet.studentExamPermissionWithoutEmbargo}
        AND (
          e.type_id <> 3
          OR CASE coalesce(de.individual, 0)
            WHEN 0 THEN :state_embargo_loading = 1 OR s.district_id IN (:district_ids_embargo_loading)
            WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR s.district_id IN (:district_ids_embargo_loading) OR s.district_id IN (:district_ids_embargo_reviewing)
            WHEN 2 THEN 1
          END
        )
