sql:
  embargo:
    existsForSchool: >-
      SELECT EXISTS(
        SELECT 1
        FROM school sc
        WHERE sc.embargo_enabled = 1
          AND ${sql.snippet.basicPermission}
        LIMIT 1) AS embargo_enabled

  exam:
    findAllByStudentId: >-
      SELECT
        e.iep,
        e.lep,
        e.section504,
        e.migrant_status,
        ${sql.snippet.claimColumns},
        ${sql.snippet.exam}
      WHERE e.student_id = :student_id
       AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    existsForStudentId: >-
      SELECT
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname
      FROM student st
        JOIN exam e ON e.student_id = st.id
        JOIN asmt a ON a.id = e.asmt_id
        JOIN school s ON e.school_id = s.id
        JOIN school isch ON st.inferred_school_id = isch.id
      WHERE st.ssid = :student_ssid
      AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
      LIMIT 1

  examItem:
      findAllForExam: >-
        ${sql.reporting.snippet.selectFromExamItem}
        WHERE e.id = :exam_id
        AND a.type_id != 3
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  group:
    assessment:
      findAll: >-
          SELECT distinct
            ${sql.reporting.snippet.assessmentColumns}
          FROM asmt a
            JOIN exam e ON e.asmt_id = a.id
            JOIN student_group_membership sgm ON e.student_id = sgm.student_id
            JOIN student_group sg ON sg.id = sgm.student_group_id
            JOIN user_student_group usg ON usg.student_group_id = sg.id
            JOIN school s ON e.school_id = s.id
            JOIN student st ON e.student_id = st.id
            JOIN school isch ON st.inferred_school_id = isch.id
          WHERE e.school_year = :school_year
            AND a.id = e.asmt_id
            AND sg.id = :group_id
            AND usg.user_login = :user_login
            AND (sg.subject_id is null OR a.subject_id = sg.subject_id)
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

      findLatestExam: >-
          SELECT
           ${sql.reporting.snippet.assessmentColumns}
          FROM exam e
            JOIN asmt a ON e.asmt_id=a.id
            JOIN student_group_membership sgm ON e.student_id=sgm.student_id
            JOIN student_group sg ON sg.id = sgm.student_group_id
            JOIN user_student_group usg ON usg.student_group_id = sg.id
            JOIN school s ON e.school_id=s.id
            JOIN student st ON e.student_id = st.id
            JOIN school isch ON st.inferred_school_id = isch.id
          WHERE e.school_year = :school_year
            AND sgm.student_group_id = :group_id
            AND usg.user_login = :user_login
            AND (sg.subject_id is null OR a.subject_id = sg.subject_id)
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
          ORDER BY e.completed_at desc
          LIMIT 1
    exam:
      findAllForAssessment: >-
        SELECT
          e.iep,
          e.lep,
          e.section504,
          e.migrant_status,
          ${sql.snippet.claimColumns},
          ${sql.snippet.exam}
        JOIN student_group_membership sgm ON e.student_id=sgm.student_id
        JOIN student_group sg ON sg.id = sgm.student_group_id
        JOIN user_student_group usg ON usg.student_group_id = sg.id
        WHERE a.id = :assessment_id
          AND e.school_year = :school_year
          AND sg.id = :group_id
          AND usg.user_login = :user_login
          AND (sg.subject_id is null OR a.subject_id = sg.subject_id)
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    measuredassessment:
      findAll: >-
        SELECT
          count(*) as tested,
          a.label as asmt_label,
          a.subject_id as asmt_subject_id,
          a.type_id as asmt_type_id,
          a.school_year as asmt_school_year,
          g.code as asmt_grade_code,
          asmt_id as asmt_id,
          max(completed_at) as completed_at,
          round(avg(scale_score)) AS score,
          round(stddev_samp(scale_score)/sqrt(count(*))) as std_err,
          sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1,
          sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2,
          sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3
        FROM (
          -- latest IAB exam and completed_at per student, iab and school year
          SELECT
            e1.asmt_id,
            e1.completed_at,
            e1.scale_score,
            e1.scale_score_std_err,
            e1.performance_level,
            e1.school_id,
            e1.student_id
          FROM exam AS e1
            LEFT OUTER JOIN exam AS e2 ON e1.student_id = e2.student_id
                                          AND e1.asmt_id = e2.asmt_id
                                          AND e1.school_year = e2.school_year
                                          AND (e1.completed_at < e2.completed_at OR (e1.completed_at = e2.completed_at AND e1.id < e2.id))
          WHERE e2.student_id IS NULL
                AND e1.school_year = :school_year
                AND e1.type_id = 2 -- IABs only
                AND e1.student_id IN(
                    SELECT student_id
                      FROM student_group_membership gm JOIN  user_student_group usg ON usg.student_group_id = gm.student_group_id
                      WHERE gm.student_group_id = :group_id AND usg.user_login = :user_login
                )
        ) e
          JOIN asmt a ON a.id = e.asmt_id
          JOIN grade g ON g.id = a.grade_id
          JOIN school s ON e.school_id=s.id
          JOIN student st ON st.id=e.student_id
          JOIN school isch ON st.inferred_school_id = isch.id
        WHERE
          ${sql.snippet.studentExamPermissionWithoutEmbargo} -- this is for IAB only, embargo is not applicable to IABs
        GROUP BY asmt_id;

    examItem:
        findAllExamItemScoresForAssessment:
          ${sql.reporting.snippet.selectFromExamItem}
            JOIN student_group_membership sgm ON e.student_id=sgm.student_id
            JOIN student_group sg ON sg.id = sgm.student_group_id
            JOIN user_student_group usg ON usg.student_group_id = sg.id
          WHERE e.asmt_id = :assessment_id
            AND e.school_year = :school_year
            AND sg.id = :group_id
            AND usg.user_login = :user_login
            AND (sg.subject_id is null OR a.subject_id = sg.subject_id)
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  schoolgrade:
    assessment:
      findAll: >-
        SELECT ${sql.reporting.snippet.assessmentColumns}
        FROM asmt a
        WHERE EXISTS (
            SELECT e.asmt_id
            FROM exam e
              JOIN school s ON e.school_id = s.id
              JOIN student st ON e.student_id = st.id
              JOIN school isch ON st.inferred_school_id = isch.id
            WHERE e.school_year = :school_year
            AND a.id = e.asmt_id
            AND (s.id = :school_id OR (1 = :allow_transfer_access AND isch.id = :school_id))
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
        )
        AND a.grade_id = :grade_id

      findLatestExam: >-
        SELECT 
          ${sql.reporting.snippet.assessmentColumns}
        FROM exam e
          JOIN asmt a ON e.asmt_id=a.id
          JOIN school s ON e.school_id=s.id
          JOIN student st ON e.student_id = st.id
          JOIN school isch ON st.inferred_school_id = isch.id
        WHERE e.school_year = :school_year
        AND e.school_id = :school_id
        AND a.grade_id = :grade_id
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
        ORDER BY e.completed_at desc
        LIMIT 1

    exam:
      findAllForAssessment: >-
        SELECT
          e.iep,
          e.lep,
          e.section504,
          e.migrant_status,
          ${sql.snippet.claimColumns},
          ${sql.snippet.exam}
        WHERE a.id = :assessment_id
        AND a.grade_id = :grade_id
        AND e.school_year = :school_year
        AND (s.id = :school_id OR (1 = :allow_transfer_access AND isch.id = :school_id))
        AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

    examItem:
        findAllExamItemScoresForAssessment:
          ${sql.reporting.snippet.selectFromExamItem}
          WHERE e.asmt_id = :assessment_id
          AND e.school_year = :school_year
          AND a.grade_id = :grade_id
          AND (s.id = :school_id OR (1 = :allow_transfer_access AND isch.id = :school_id))
          AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}

  assessment:
    grade:
      findAllForSchool: >-
        SELECT id, code
        FROM grade g WHERE EXISTS (
            SELECT a.grade_id
            FROM exam e
              JOIN asmt a ON a.id = e.asmt_id
              JOIN school s ON e.school_id = s.id
              JOIN student st ON e.student_id = st.id
              JOIN school isch ON st.inferred_school_id = isch.id
            WHERE e.school_id = :school_id
            AND ${sql.reporting.snippet.studentExamPermissionWithEmbargo}
            AND g.id=a.grade_id
        )

  reporting:
    snippet:
      assessmentColumns: >-
          a.id,
          a.label,
          a.grade_code,
          a.type_id,
          a.subject_id,
          a.school_year,
          a.claim1_score_code,
          a.claim2_score_code,
          a.claim3_score_code,
          a.claim4_score_code,
          a.min_score,
          a.max_score,
          a.cut_point_1,
          a.cut_point_2,
          a.cut_point_3

      selectFromExamItem: >-
           SELECT
              ei.id,
              ei.exam_id,
              ei.item_id,
              ei.score,
              ei.position,
              ei.response,
              ei.trait_evidence_elaboration_score,
              ei.trait_organization_purpose_score,
              ei.trait_conventions_score
            FROM exam_item ei
            JOIN exam e ON ei.exam_id=e.id
            JOIN asmt a ON e.asmt_id=a.id
            JOIN school s ON e.school_id=s.id
            JOIN student st ON st.id=e.student_id
            JOIN school isch ON st.inferred_school_id = isch.id
            
      studentExamPermissionWithEmbargo: >-
          ${sql.snippet.studentExamPermissionWithoutEmbargo}
          AND
          (
             e.school_year < ${reporting.school-year}
             OR e.type_id <> 3
             OR s.embargo_enabled = 0
             OR 1 = :state_embargo_admin
             OR s.district_id IN (:district_embargo_admin_ids)
          )
