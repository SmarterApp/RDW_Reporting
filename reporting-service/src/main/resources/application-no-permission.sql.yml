sql:
  school_year:
    findAll: >-
      select year from school_year order by year desc;

  group:
    findAllForUsername: >-
      select
        sg.id,
        sg.name,
        sc.name as school_name,
        sc.id as school_id,
        s.code as subject_code
      from user_student_group usg
        join student_group sg on sg.id = usg.student_group_id
        join school sc on sc.id = sg.school_id
        left join subject s on s.id = sg.subject_id
      where user_login=:user_login

    findOneByUsernameAndId: >-
      select
        sg.id,
        sg.name,
        sc.name as school_name,
        sc.id as school_id,
        s.code as subject_code,
        count(sgm.student_id) as students
      from user_student_group usg
        join student_group sg on sg.id = usg.student_group_id
        join school sc on sc.id = sg.school_id
        join student_group_membership sgm on sgm.student_group_id = usg.student_group_id
        left join subject s on s.id = sg.subject_id
      where user_login=:user_login
        and sg.id=:group_id
      group by sg.id

  teacherGroup:
    findAllByUsername: >-
      SELECT
        tsg.id,
        tsg.name,
        s.code as subject_code
      FROM teacher_student_group tsg
        LEFT JOIN subject s ON s.id = tsg.subject_id
      WHERE tsg.user_login = :user_login
        AND tsg.school_year = :school_year
      GROUP BY tsg.id

    findOneByUsernameAndId: >-
      SELECT
        tsg.id,
        tsg.name,
        s.code as subject_code,
        GROUP_CONCAT(tsgm.student_id SEPARATOR '|') AS student_ids
      FROM teacher_student_group tsg
        LEFT JOIN subject s ON s.id = tsg.subject_id
        LEFT JOIN teacher_student_group_membership tsgm ON tsgm.teacher_student_group_id = tsg.id
      WHERE tsg.id = :id
        AND tsg.user_login = :user_login
        AND tsg.school_year = :school_year
      GROUP BY tsg.id

    create: >-
      INSERT INTO teacher_student_group (name, subject_id, school_year, user_login)
      SELECT
        :name,
        CASE WHEN (:subject_code IS NULL)
          THEN NULL
          ELSE (SELECT id from subject where code = :subject_code) END,
        :school_year,
        :user_login

    update: >-
      UPDATE teacher_student_group tsg
      LEFT JOIN subject s ON s.code = :subject_code
      SET
        name = :name,
        subject_id = s.id
      WHERE tsg.id = :id
        AND tsg.school_year = :school_year

    delete: >-
      DELETE FROM teacher_student_group
      WHERE id = :id
        AND school_year = :school_year

  teacherGroupMembership:
    findAllStudentIdsByGroupId: >-
      SELECT student_id
      FROM teacher_student_group_membership
      WHERE teacher_student_group_id = :group_id

    create: >-
      INSERT INTO teacher_student_group_membership (teacher_student_group_id, student_id)
      VALUES (:group_id, :student_id)

    delete: >-
      DELETE FROM teacher_student_group_membership
      WHERE teacher_student_group_id = :group_id
        AND student_id = :student_id

    deleteAllByGroupId: >-
      DELETE FROM teacher_student_group_membership
      WHERE teacher_student_group_id = :group_id

  assessment:
    item:
      findAllForAssessment: >-
        ${sql.reporting.snippet.selectFromItem}
          join asmt a on i.asmt_id=a.id
        where i.asmt_id=:assessment_id
        and (1=:includeAllItemTypes or i.type in (:types))

      findAllForExam: >-
        ${sql.reporting.snippet.selectFromItem}
          join exam e on e.asmt_id = i.asmt_id
        where e.id=:exam_id

    percentile:
      findAllForAssessment: >-
        SELECT start_date,
          end_date,
          count,
          ROUND(mean) AS mean,
          ROUND(standard_deviation) AS standard_deviation,
          percentile_rank,
          ROUND(score) AS score
        FROM percentile p
          JOIN percentile_score ps ON ps.percentile_id = p.id
        where p.asmt_id = :assessmentId AND :endDate >= start_date AND end_date >= :startDate
        ORDER BY start_date, percentile_rank

    target:
      findAllForAssessment: >-
         SELECT t.id, t.natural_id, c.code as claim_code, at.asmt_id, at.include_in_report
            FROM asmt_target at
              JOIN target t ON at.target_id =  t.id
              JOIN claim c ON c.id = t.claim_id
            WHERE at.asmt_id = :asmt_id

  student:
    findOneById: >-
      select id,
        ssid,
        first_name,
        last_or_surname
      from student s
      where s.id=:studentId
       and exists (select 1 from exam e where e.student_id = s.id)

  elas:
    findAll: >-
      select code
      from elas
      order by id

  ethnicity:
    findAllCodes: >-
      select code
      from ethnicity
      order by id

    findEthnicityCodesByStudentIds: >-
      select student_id, ethnicity_code
      from student_ethnicity
      where student_id in (:student_ids)

    findEthnicityCodesByStudentId: >-
      select e.code
      from student_ethnicity se
        join ethnicity e on se.ethnicity_id=e.id
      where se.student_id=:student_id

  gender:
    findAll: >-
      select code
      from gender
      order by id

  language:
    findAll: >-
      select code
      from language
      order by display_order

  subject:
    findAll: >-
      select code
      from subject
      order by id

  status:
    readTest: >-
      SELECT code FROM asmt_type

  instructionalResource:
    findAllByAssessmentIdAndSchoolId: >-
      SELECT
        ir.performance_level,
        ir.resource,
        ir.org_level,
        NULL AS org_name
      FROM instructional_resource ir
        JOIN asmt
          ON asmt.name = ir.asmt_name
      WHERE asmt.id = :asmt_id
        AND
        (
          ir.org_level = 'System'
          OR ir.org_level = 'State'
        )
      UNION SELECT
        ir.performance_level,
        ir.resource,
        ir.org_level,
        coalesce(district_group.name, district.name, school_group.name) AS org_name
      FROM instructional_resource ir
        JOIN asmt
          ON asmt.name = ir.asmt_name
        JOIN school
        LEFT JOIN district_group
          ON ir.org_level = 'DistrictGroup'
          AND district_group.id = school.district_group_id
          AND district_group.id = ir.org_id
        LEFT JOIN district
          ON ir.org_level = 'District'
          AND district.id = school.district_id
          AND district.id = ir.org_id
        LEFT JOIN school_group
          ON ir.org_level = 'SchoolGroup'
          AND school_group.id = school.school_group_id
          AND school_group.id = ir.org_id
      WHERE asmt.id = :asmt_id
        AND school.id = :school_id
        AND
        (
          (ir.org_level = 'DistrictGroup' AND district_group.id IS NOT NULL)
          OR (ir.org_level = 'District' AND district.id IS NOT NULL)
          OR (ir.org_level = 'SchoolGroup' AND school_group.id IS NOT NULL)
        )

  reporting:
    snippet:
        selectFromItem: >-
           SELECT
              i.id,
              i.natural_id,
              i.position,
              i.difficulty_code,
              i.max_points,
              i.claim_code,
              i.target_id,
              t.natural_id as target_natural_id,
              i.math_practice_code,
              i.allow_calc,
              i.common_core_standard_ids,
              i.answer_key,
              i.options_count,
              i.type,
              i.performance_task_writing_type,
              dok.level as dok_level,
              dok.reference as dok_reference
            FROM item i
              JOIN depth_of_knowledge dok ON dok.id = i.dok_id
              JOIN target t ON t.id = i.target_id
