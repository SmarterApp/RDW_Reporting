package org.opentestsystem.rdw.reporting.filter;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Set;

/**
 * Represents all of the possible attributes a reporting client can filter exams on
 */
public class ExamFilterOptions {

    private Set<Integer> schoolYears;
    private Set<String> ethnicities;
    private List<String> genders;
    private List<String> elasCodes;
    private List<String> subjects;

    private ExamFilterOptions() {}

    /**
     * @return all school years available for searching and filtering
     */
    public Set<Integer> getSchoolYears() {
        return schoolYears;
    }

    /**
     * @return all student ethnicities available for searching and filtering
     */
    public Set<String> getEthnicities() {
        return ethnicities;
    }

    /**
     * @return all student genders available for searching and filtering
     */
    public List<String> getGenders() {
        return genders;
    }

    /**
     * @return all student elas (english language acquisition status) codes for searching and filtering
     */
    public List<String> getElasCodes() {
        return elasCodes;
    }

    /**
     * @return all subjects for searching and filtering
     */
    public List<String> getSubjects() {
        return subjects;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Set<Integer> schoolYears;
        private Set<String> ethnicities;
        private List<String> genders;
        private List<String> elasCodes;
        private List<String> subjects;

        private Builder() {
        }

        public Builder schoolYears(final Iterable<Integer> schoolYears) {
            this.schoolYears = schoolYears != null ? ImmutableSet.copyOf(schoolYears) : ImmutableSet.of();
            return this;
        }

        public Builder ethnicities(final Iterable<String> ethnicities) {
            this.ethnicities = ethnicities != null ? ImmutableSet.copyOf(ethnicities) : ImmutableSet.of();
            return this;
        }

        public Builder genders(final Iterable<String> genders) {
            this.genders = genders != null ? ImmutableList.copyOf(genders) : ImmutableList.of();
            return this;
        }

        public Builder elasCodes(final Iterable<String> elasCodes) {
            this.elasCodes = elasCodes != null ? ImmutableList.copyOf(elasCodes) : ImmutableList.of();
            return this;
        }

        public Builder subjects(final Iterable<String> subjects) {
            this.subjects = subjects != null ? ImmutableList.copyOf(subjects) : ImmutableList.of();
            return this;
        }

        public ExamFilterOptions build() {
            final ExamFilterOptions examFilterOptions = new ExamFilterOptions();
            examFilterOptions.schoolYears = schoolYears;
            examFilterOptions.ethnicities = ethnicities;
            examFilterOptions.genders = genders;
            examFilterOptions.elasCodes = elasCodes;
            examFilterOptions.subjects = subjects;
            return examFilterOptions;
        }
    }

}
