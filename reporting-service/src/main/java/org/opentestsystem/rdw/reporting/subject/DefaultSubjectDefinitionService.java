package org.opentestsystem.rdw.reporting.subject;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.repository.ClaimRepository;
import org.opentestsystem.rdw.reporting.common.repository.SubjectDefinitionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Default implementation of a SubjectDefinitionService.
 */
@Service
public class DefaultSubjectDefinitionService implements SubjectDefinitionService {

    private final SubjectDefinitionRepository definitionRepository;
    private final ClaimRepository claimRepository;

    @Autowired
    public DefaultSubjectDefinitionService(final SubjectDefinitionRepository definitionRepository,
                                           final ClaimRepository claimRepository) {
        this.definitionRepository = definitionRepository;
        this.claimRepository = claimRepository;
    }

    @Override
    @Cacheable("subjectdefinitions")
    public Collection<SubjectDefinition> findAll() {
        final Collection<SubjectDefinition> definitions = definitionRepository.findAll();

        //Fetch and index claims by subject and assessment type code
        final Map<String, Map<String, List<String>>> claimsBySubjectAndAsmtType = new HashMap<>();
        claimRepository.findAll()
                .forEach(claim -> {
                    final Map<String, List<String>> byAssessmentType = claimsBySubjectAndAsmtType
                            .computeIfAbsent(claim.getSubjectCode(), k -> new HashMap<>());
                    final List<String> claimCodes = byAssessmentType
                            .computeIfAbsent(claim.getAssessmentTypeCode(), k -> new ArrayList<>());
                    claimCodes.add(claim.getCode());
                });

        //Add ordered claims to subject definitions
        return definitions.stream()
                .map(definition -> {
                    final List<String> claimCodes = claimsBySubjectAndAsmtType
                            .getOrDefault(definition.getSubjectCode(), ImmutableMap.of())
                            .getOrDefault(definition.getAsmtTypeCode(), ImmutableList.of());
                    return claimCodes.isEmpty() ? definition : definition.copy().scorableClaims(claimCodes).build();
                })
                .collect(Collectors.toList());
    }
}
