package org.opentestsystem.rdw.reporting.student;

import com.google.common.collect.ImmutableSet;

import java.util.Set;

public class Student {

    private long id;
    private String ssid;
    private String firstName;
    private String lastName;
    private String genderCode;
    private String languageCode;
    private String militaryConnectedCode;
    private Set<String> ethnicityCodes;
    private String englishLanguageAcquisitionStatusCode;
    private Boolean individualEducationPlan;
    private Boolean limitedEnglishProficiency;
    private Boolean section504;
    private Boolean migrantStatus;

    /**
     * @return the student entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the student's SSID
     */
    public String getSsid() {
        return ssid;
    }

    /**
     * @return the student's given name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * @return the student's family name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * @return the student's gender code
     */
    public String getGenderCode() {
        return genderCode;
    }

    /**
     * @return the student's language code
     */
    public String getLanguageCode() {
        return languageCode;
    }

    /**
     * @return the student's military connected code
     */
    public String getMilitaryConnectedCode() { return militaryConnectedCode; }

    /**
     * @return the student's ethnicities as codes
     */
    public Set<String> getEthnicityCodes() {
        return ethnicityCodes;
    }

    /**
     * @return the elas (english language acquistion status) code of the student at the time of the exam
     */
    public String getEnglishLanguageAcquisitionStatusCode() {
        return englishLanguageAcquisitionStatusCode;
    }

    /**
     * @return <code>true</code> if the the student had an Individual Education Plan according to the IDEA act at the time of the exam
     */
    public Boolean isIndividualEducationPlan() {
        return individualEducationPlan;
    }

    /**
     * @return <code>true</code> if the the student was considered to have limited english proficiency at the time of the exam
     */
    public Boolean isLimitedEnglishProficiency() {
        return limitedEnglishProficiency;
    }

    /**
     * @return <code>true</code> if the student was a beneficiary of disability aids under the Section 504 of the Rehabilitation Act of 1973
     */
    public Boolean isSection504() {
        return section504;
    }

    /**
     * @return <code>true</code> if the student or student's family was considered migratory at the time of the exam
     */
    public Boolean isMigrantStatus() {
        return migrantStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder for Student
     */
    public static class Builder {
        private long id;
        private String ssid;
        private String firstName;
        private String lastName;
        private String genderCode;
        private String languageCode;
        private String militaryConnectedCode;
        private Iterable<String> ethnicityCodes;
        private String englishLanguageAcquisitionStatusCode;
        private Boolean individualEducationPlan;
        private Boolean limitedEnglishProficiency;
        private Boolean section504;
        private Boolean migrantStatus;

        public long getId() {
            return id;
        }

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder ssid(final String ssid) {
            this.ssid = ssid;
            return this;
        }

        public Builder firstName(final String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(final String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder genderCode(final String genderCode) {
            this.genderCode = genderCode;
            return this;
        }

        public Builder languageCode(final String languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder militaryConnectedCode(final String militaryConnectedCode) {
            this.militaryConnectedCode = militaryConnectedCode;
            return this;
        }

        public Builder ethnicityCodes(final Iterable<String> ethnicityCodes) {
            this.ethnicityCodes = ethnicityCodes;
            return this;
        }

        public Builder englishLanguageAcquisitionStatusCode(final String englishLanguageAcquisitionStatusCode) {
            this.englishLanguageAcquisitionStatusCode = englishLanguageAcquisitionStatusCode;
            return this;
        }

        public Builder individualEducationPlan(final Boolean individualEducationPlan) {
            this.individualEducationPlan = individualEducationPlan;
            return this;
        }

        public Builder limitedEnglishProficiency(final Boolean limitedEnglishProficiency) {
            this.limitedEnglishProficiency = limitedEnglishProficiency;
            return this;
        }

        public Builder section504(final Boolean section504) {
            this.section504 = section504;
            return this;
        }

        public Builder migrantStatus(final Boolean migrantStatus) {
            this.migrantStatus = migrantStatus;
            return this;
        }

        public Student build() {
            final Student student = new Student();
            student.id = id;
            student.ssid = ssid;
            student.firstName = firstName;
            student.lastName = lastName;
            student.genderCode = genderCode;
            student.languageCode = languageCode;
            student.militaryConnectedCode = militaryConnectedCode;
            student.ethnicityCodes = ethnicityCodes != null ? ImmutableSet.copyOf(ethnicityCodes) : ImmutableSet.of();
            student.englishLanguageAcquisitionStatusCode = englishLanguageAcquisitionStatusCode;
            student.individualEducationPlan = individualEducationPlan;
            student.limitedEnglishProficiency = limitedEnglishProficiency;
            student.section504 = section504;
            student.migrantStatus = migrantStatus;
            return student;
        }

    }

}
