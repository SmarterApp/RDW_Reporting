package org.opentestsystem.rdw.reporting.group;

import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static java.util.stream.Collectors.toSet;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.safeSplit;


@Repository
class JdbcTeacherGroupRepository implements TeacherGroupRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.teacherGroup.findAllByUsername}")
    private String findAllQuery;

    @Value("${sql.teacherGroup.findOneByUsernameAndId}")
    private String findOneQuery;

    @Value("${sql.teacherGroup.create}")
    private String createQuery;

    @Value("${sql.teacherGroup.update}")
    private String updateQuery;

    @Value("${sql.teacherGroup.delete}")
    private String deleteQuery;


    JdbcTeacherGroupRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Group> findAll(final PermissionSource permissionSource) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValue("user_login", permissionSource.getUsername()),
                (row, index) -> Group.builder()
                        .id(row.getLong("id"))
                        .name(row.getString("name"))
                        .schoolId(row.getInt("school_id"))
                        .schoolName(row.getString("school_name"))
                        .subjectCode(row.getString("subject_code"))
                        .teacherCreated(true)
                        .build()
        );
    }

    @Override
    public TeacherGroup findOne(final PermissionSource permissionSource, final long groupId) {
        try {
            return template.queryForObject(
                    findOneQuery,
                    new MapSqlParameterSource()
                            .addValue("user_login", permissionSource.getUsername())
                            .addValue("id", groupId),
                    (row, index) -> {
                        final List<String> studentIdStrings = safeSplit(row.getString("student_ids"), "|");
                        final Set<Long> studentIds = studentIdStrings != null
                                ? studentIdStrings.stream().map(Long::valueOf).collect(toSet())
                                : newHashSet();

                        return TeacherGroup.builder()
                                .id(row.getLong("id"))
                                .name(row.getString("name"))
                                .school(School.builder()
                                        .id(row.getLong("school_id"))
                                        .name(row.getString("school_name"))
                                        .build()
                                )
                                .studentIds(studentIds)
                                .subjectCodes(decodeSubjects(row.getInt("subject_id")))
                                .build();
                    }
            );
        } catch (final Exception exception) {
            return null;
        }
    }

    @Override
    public TeacherGroup create(final String username, final TeacherGroup group) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        template.update(
                createQuery,
                new MapSqlParameterSource()
                        .addValue("user_login", username)
                        .addValue("name", group.getName())
                        .addValue("school_id", group.getSchoolId())
                        .addValue("subject_id", encodeSubjects(group.getSubjectCodes())),
                keyHolder
        );
        return group.copy()
                .id(keyHolder.getKey().longValue())
                .build();
    }

    @Override
    public void update(final TeacherGroup group) {
        template.update(
                updateQuery,
                new MapSqlParameterSource()
                        .addValue("id", group.getId())
                        .addValue("name", group.getName())
                        .addValue("subject_id", encodeSubjects(group.getSubjectCodes()))
        );
    }

    @Override
    public void delete(final long groupId) {
        template.update(
                deleteQuery,
                new MapSqlParameterSource()
                        .addValue("id", groupId)
        );
    }

    // TODO use subject repository to map back and forth
    private Integer encodeSubjects(final Set<String> subjectCodes) {
        if (subjectCodes == null || subjectCodes.size() > 1) {
            return null;
        }
        return (int) Subject.valueOf(subjectCodes.iterator().next()).id();
    }

    private Set<String> decodeSubjects(final Integer subjectId) {
        if (subjectId == null) {
            return Arrays.stream(Subject.values())
                    .map(Subject::code)
                    .collect(toSet());
        }
        return newHashSet(Subject.valueOf(subjectId).code());
    }

}
