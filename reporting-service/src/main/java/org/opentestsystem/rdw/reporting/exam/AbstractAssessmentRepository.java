package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

public abstract class AbstractAssessmentRepository<T extends AbstractAssessmentSearch> implements AssessmentRepository<T> {

    protected final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final String findLatestQuery;
    private final String findAllQuery;

    protected AbstractAssessmentRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final SecurityParameterProvider securityParameterProvider,
            @NotNull final String findLatestQuery,
            @NotNull final String findAllQuery) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.findLatestQuery = findLatestQuery;
        this.findAllQuery = findAllQuery;
    }

    abstract protected Map<String, Object> getParameters(final T search);

    protected Map<String, Object> createParameters(@NotNull final PermissionSource permissionSource, final T search) {
        final Map<String, Object> parameters = newHashMap();
        parameters.putAll(securityParameterProvider.getSecurityParameters(permissionSource));
        parameters.put("school_year", search.getSchoolYear());
        parameters.putAll(getParameters(search));
        return parameters;
    }

    public Assessment findLatest(@NotNull final PermissionSource permissionSource, @NotNull final T search) {
        try {
            return template.queryForObject(findLatestQuery, createParameters(permissionSource, search), this::buildAssessment);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
    }

    public List<Assessment> findAll(@NotNull final PermissionSource permissionSource, @NotNull final T search) {
        return template.query(findAllQuery, createParameters(permissionSource, search), this::buildAssessment);
    }

    private Assessment buildAssessment(final ResultSet row, final int index) throws SQLException {
        return Assessments.map(row, Assessment.builder())
                .werItem(row.getBoolean("has_wer_item"))
                .cutPoints(ImmutableList.of(
                        row.getInt("min_score"),
                        row.getInt("cut_point_1"),
                        row.getInt("cut_point_2"),
                        row.getInt("cut_point_3"),
                        row.getInt("max_score")
                ))
                .build();
    }

}
