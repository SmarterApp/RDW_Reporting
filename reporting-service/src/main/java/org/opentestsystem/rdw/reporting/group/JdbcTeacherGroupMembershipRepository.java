package org.opentestsystem.rdw.reporting.group;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.stream.StreamSupport;


@Repository
class JdbcTeacherGroupMembershipRepository implements TeacherGroupMembershipRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.teacherGroupMembership.findAllStudentIdsByGroupId}")
    private String findAllStudentIdsByGroupIdQuery;

    @Value("${sql.teacherGroupMembership.create}")
    private String createQuery;

    @Value("${sql.teacherGroupMembership.delete}")
    private String deleteQuery;

    @Value("${sql.teacherGroupMembership.deleteAllByGroupId}")
    private String deleteAllByGroupIdQuery;


    JdbcTeacherGroupMembershipRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Long> findAllStudentIdsByGroupId(final long groupId) {
        return template.queryForList(
                findAllStudentIdsByGroupIdQuery,
                new MapSqlParameterSource("group_id", groupId),
                Long.class
        );
    }

    @Override
    public void createAll(final long groupId, final Iterable<Long> studentIds) {
        template.batchUpdate(
                createQuery,
                StreamSupport.stream(studentIds.spliterator(), false)
                        .map(studentId -> new MapSqlParameterSource()
                                .addValue("group_id", groupId)
                                .addValue("student_id", studentId)
                        )
                        .toArray(MapSqlParameterSource[]::new)
        );
    }

    @Override
    public void deleteAll(final long groupId, final Iterable<Long> studentIds) {
        template.batchUpdate(
                deleteQuery,
                StreamSupport.stream(studentIds.spliterator(), false)
                        .map(studentId -> new MapSqlParameterSource()
                                .addValue("group_id", groupId)
                                .addValue("student_id", studentId)
                        )
                        .toArray(MapSqlParameterSource[]::new)
        );
    }

    @Override
    public void deleteAllByGroupId(final long groupId) {
        template.update(
                deleteAllByGroupIdQuery,
                new MapSqlParameterSource()
                        .addValue("group_id", groupId)
        );
    }

}
