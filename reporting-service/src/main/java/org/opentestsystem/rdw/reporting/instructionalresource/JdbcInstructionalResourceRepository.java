package org.opentestsystem.rdw.reporting.instructionalresource;

import org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collection;

/**
 * JDBC implementation of an InstructionalResourceRepository.
 */
@Repository
class JdbcInstructionalResourceRepository implements InstructionalResourceRepository {

    @Value("${sql.instructionalResource.findAllByAssessmentIdAndSchoolId}")
    private String findAllByAssessmentIdAndSchoolId;

    @Value("${sql.instructionalResource.findAllByAssessmentId}")
    private String findAllByAssessmentId;

    private final NamedParameterJdbcTemplate template;

    @Autowired
    public JdbcInstructionalResourceRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Collection<InstructionalResource> findByAssessmentAndSchool(final long assessmentId, final long schoolId) {
        return template.query(
                findAllByAssessmentIdAndSchoolId,
                new MapSqlParameterSource()
                        .addValue("asmt_id", assessmentId)
                        .addValue("school_id", schoolId),
                (row, rowNum) ->
                        InstructionalResource.builder()
                                .resource(row.getString("resource"))
                                .organizationLevel(OrganizationLevel.valueOf(row.getString("org_level")))
                                .organizationName(row.getString("org_name"))
                                .performanceLevel(row.getInt("performance_level"))
                                .build()
        );
    }

    @Override
    public Collection<InstructionalResource> findByAssessment(final long assessmentId) {
        return template.query(
                findAllByAssessmentId,
                new MapSqlParameterSource()
                        .addValue("asmt_id", assessmentId),
                (row, rowNum) ->
                        InstructionalResource.builder()
                                .resource(row.getString("resource"))
                                .organizationLevel(OrganizationLevel.valueOf(row.getString("org_level")))
                                .organizationName(row.getString("org_name"))
                                .performanceLevel(row.getInt("performance_level"))
                                .build()
        );
    }
}
