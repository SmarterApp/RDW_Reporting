package org.opentestsystem.rdw.reporting.assessment;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static java.util.stream.Collectors.toList;

@Repository
class JdbcAssessmentPercentileRepository implements AssessmentPercentileRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.assessment.percentile.findAllForAssessment}")
    private String findAllForAssessmentQuery;

    @Autowired
    public JdbcAssessmentPercentileRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Percentile> findAllForAssessment(final AssessmentPercentileRequest request) {
        return template.query(
                findAllForAssessmentQuery,
                new MapSqlParameterSource("assessmentId", request.getAssessmentId())
                        .addValue("startDate", request.getStartDate())
                        .addValue("endDate", request.getEndDate()),
                (resultSet) -> {
                    return buildPercentiles(resultSet, request.getAssessmentId());
                });
    }

    private static List<Percentile> buildPercentiles(final ResultSet resultSet, final int assessmentId) throws SQLException {
        final Map<LocalDate, Percentile.Builder> percentileByStartDate = newHashMap();

        while (resultSet.next()) {
            final LocalDate startDate = resultSet.getDate("start_date").toLocalDate();
            percentileByStartDate.computeIfAbsent(startDate, (sub) -> {
                try {
                    return Percentile.builder()
                            .assessmentId(assessmentId)
                            .startDate(startDate)
                            .endDate(resultSet.getDate("end_date").toLocalDate())
                            .mean(resultSet.getInt("mean"))
                            .standardDeviation(resultSet.getInt("standard_deviation"))
                            .count(resultSet.getInt("count"));

                } catch (final SQLException e) {
                    throw new RuntimeException(e);
                }
            });

            percentileByStartDate.get(startDate).percentileScore(PercentileScore.builder()
                    .score(resultSet.getInt("score"))
                    .percentileRank(resultSet.getInt("percentile_rank"))
                    .build());
        }
        return percentileByStartDate.values().stream().map(b -> (b.build())).collect(toList());
    }
}