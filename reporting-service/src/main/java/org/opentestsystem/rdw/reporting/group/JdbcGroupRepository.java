package org.opentestsystem.rdw.reporting.group;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

@Repository
public class JdbcGroupRepository implements GroupRepository {

    @Value("${sql.group.findAllForUsername}")
    private String findAllForUsernameQuery;

    @Value("${sql.group.findOneByUsernameAndId}")
    private String findOneByUsernameAndId;

    private final NamedParameterJdbcTemplate template;

    @Autowired
    public JdbcGroupRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    public List<Group> findAllForUsername(final String username) {
        return template.query(
                findAllForUsernameQuery,
                new MapSqlParameterSource()
                        .addValue("user_login", username),
                (results, index) -> Group.builder()
                        .id(results.getLong("id"))
                        .name(results.getString("name"))
                        .schoolName(results.getString("school_name"))
                        .schoolId(results.getInt("school_id"))
                        .subjectCode(results.getString("subject_code")) // null subject ID is converted to 0
                        .build());
    }

    public Group findOneByUsernameAndId(final String username, final int groupId) {
        return template.queryForObject(
                findOneByUsernameAndId,
                new MapSqlParameterSource()
                        .addValue("user_login", username)
                        .addValue("group_id", groupId),
                (result, index) -> Group.builder()
                        .id(result.getLong("id"))
                        .name(result.getString("name"))
                        .schoolName(result.getString("school_name"))
                        .schoolId(result.getInt("school_id"))
                        .subjectCode(result.getString("subject_code")) // null subject ID is converted to 0
                        .studentCount(result.getInt("students"))
                        .build());
    }

}
