package org.opentestsystem.rdw.reporting;

import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.multitenant.datasource.TenantDataSourceOverrideResolver;
import org.opentestsystem.rdw.multitenant.datasource.TenantDatasourceOverride;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

@Configuration
@EnableTransactionManagement
public class WritableDataSourceConfiguration {

    /**
     * DataSourceProperties
     *
     * @return DataSourceProperties
     */
    @Bean(name = "writableDataSourceElements")
    @ConfigurationProperties("spring.writable_datasource")
    public DataSourceElements writableDataSourceElements() {
        return new DataSourceElements();
    }

    /**
     * TenantDataSourceOverrideResolver
     *
     * @param writableDataSourceElements DataSourceElements
     * @return TenantDataSourceOverrideResolver
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "writableTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver writableTenantDataSourceOverrideResolver(@Qualifier("writableDataSourceElements") DataSourceElements writableDataSourceElements) {
        return createTenantDataSourceOverrideResolver(writableDataSourceElements);
    }

    /**
     * Data source for the data warehouse.
     *
     * @param dataSourceElements               reporting DataSourceElements
     * @param tenantDataSourceOverrideResolver reporting TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Bean(name = "writableDataSource")
    public DataSource dataSource(@Qualifier("writableDataSourceElements") DataSourceElements dataSourceElements,
                                 @Qualifier("writableTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElements, tenantDataSourceOverrideResolver);
    }

    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean
    public NamedParameterJdbcTemplate writableJdbcTemplate(
            @Qualifier("writableDataSource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The reporting transaction manager
     */
    @Bean
    public PlatformTransactionManager writableDatasourceTransactionManager(
            @Qualifier("writableDataSource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    private TenantDataSourceOverrideResolver createTenantDataSourceOverrideResolver(DataSourceElements dataSourceElements) {
        return tenantId -> {
            DataSourceUrlParts dataSourceUrlParts = dataSourceElements.getUrlParts();
            //This a temporary implementation
            //shortly we will use permanent storage or configuration
            //to determine the overrides, for now simply re-use the
            //default configuration regardless of tenant
            final String url = String.format("%s//%s/%s?%s",
                    dataSourceUrlParts.getProtocol(),
                    dataSourceUrlParts.getHosts(),
                    dataSourceUrlParts.getDatabase(),
                    dataSourceUrlParts.getProperties());
            final String username = dataSourceElements.getUsername();
            final String password = dataSourceElements.getPassword();
            return new TenantDatasourceOverride(username, password, url);
        };
    }

}
