package org.opentestsystem.rdw.reporting.artifact;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Repository;

import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;

/**
 * A resource-loader backed implementation of {@link ArtifactRepository}.
 */
@Repository
public class DefaultArtifactRepository implements ArtifactRepository {
    private ArtifactRepositorySettings properties;
    private ResourceLoader resourceLoader;

    @Autowired
    public DefaultArtifactRepository(final ResourceLoader resourceLoader, final ArtifactRepositorySettings artifactRepositorySettings) {
        this.properties = artifactRepositorySettings;
        this.resourceLoader = resourceLoader;
    }

    @Override
    public InputStream getItemXml(final String id) throws IOException {
        return getArtifactFromItemDirectory(id, MessageFormat.format(properties.getExamItem().getFileName(), id));
    }

    @Override
    public InputStream getArtifactFromItemDirectory(final String id, final String artifactName) throws IOException {
        return getArtifact(MessageFormat.format(properties.getExamItem().getDirectory(), id) + artifactName);
    }

    private InputStream getArtifact(final String fullyQualifiedPath) throws IOException {
        String rootAndPath = properties.getRoot() + fullyQualifiedPath;
        try {
            return this.resourceLoader.getResource(rootAndPath).getInputStream();
        } catch (final Exception e) {
            throw new IOException("Unable to get resource:  " + rootAndPath, e);
        }
    }
}
