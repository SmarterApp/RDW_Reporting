package org.opentestsystem.rdw.reporting.exam.group;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.UserGroupSqlProvider;
import org.opentestsystem.rdw.reporting.exam.AbstractExamRepository;
import org.opentestsystem.rdw.reporting.student.StudentEthnicityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Admin;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Teacher;

@Repository
class JdbcGroupExamRepository extends AbstractExamRepository<GroupExamSearch> implements GroupExamRepository {

    private final String findAllForAssessmentTeacherGroupQuery;
    private final String findAllForAssessmentlAdminGroupQuery;

    @Autowired
    JdbcGroupExamRepository(
            final NamedParameterJdbcTemplate template,
            final UserGroupSqlProvider userGroupSqlProvider,
            final SecurityParameterProvider securityParameterProvider,
            final StudentEthnicityRepository ethnicityRepository,
            @Value("${sql.group.exam.findAllForAssessment}") final String findAllForAssessmentQuery) {
        super(template, securityParameterProvider, findAllForAssessmentQuery, ethnicityRepository);

        this.findAllForAssessmentTeacherGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllForAssessmentQuery, Teacher);
        this.findAllForAssessmentlAdminGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllForAssessmentQuery, Admin);
    }

    @Override
    protected String getFindAllForAssessmentQuery(@NotNull final GroupExamSearch search) {
        return search.getGroupId().getType() == Admin ? findAllForAssessmentlAdminGroupQuery : findAllForAssessmentTeacherGroupQuery;
    }

    @Override
    protected Map<String, Object> getParameters(final GroupExamSearch search) {
        final Map<String, Object> parameters = new HashMap<>();
        parameters.put("group_id", search.getGroupId().getId());
        return parameters;
    }
}
