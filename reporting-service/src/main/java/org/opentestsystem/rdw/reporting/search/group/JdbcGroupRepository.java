package org.opentestsystem.rdw.reporting.search.group;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
public class JdbcGroupRepository implements GroupRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.group.findAllForUsername}")
    private String findAllForUsernameQuery;

    @Autowired
    public JdbcGroupRepository(@NotNull final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public List<Group> findAllForUsername(final String username, final Collection<Long> groupIds) {
        return jdbcTemplate.query(findAllForUsernameQuery,
                new MapSqlParameterSource()
                        .addValue("user_login", username)
                        .addValue("group_ids", nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS)),
                (results, index) -> Group.builder()
                        .id(results.getLong("id"))
                        .name(results.getString("name"))
                        .schoolName(results.getString("school_name"))
                        .schoolId(results.getInt("school_id"))
                        .subjectCode(results.getString("subject_code")) // null subject ID is converted to 0
                        .build());
    }

}
