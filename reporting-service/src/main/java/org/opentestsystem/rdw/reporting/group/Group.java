package org.opentestsystem.rdw.reporting.group;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.student.Student;

import java.util.Collection;
import java.util.Set;

import static com.google.common.base.MoreObjects.toStringHelper;

public class Group {

    private Long id;
    private String name;
    private String schoolName;
    private Integer schoolId;
    private School school;
    private String subjectCode;
    private Set<String> subjectCodes;
    private Set<Long> studentIds;
    private Set<Student> students;
    private Integer studentCount;
    private boolean userCreated;

    private Group() {
    }

    /**
     * @return the group's entity ID
     */
    public Long getId() {
        return id;
    }

    /**
     * @return the group's name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the group's school entity ID
     */
    public Integer getSchoolId() {
        return schoolId;
    }

    /**
     * @deprecated use {@link Group#getSchool()}
     */
    public String getSchoolName() {
        return schoolName;
    }

    /**
     * @return the group's school.
     */
    public School getSchool() {
        return school;
    }

    /**
     * @deprecated use {@link Group#getSubjectCodes()}
     * @return the group's subject code
     */
    public String getSubjectCode() {
        return subjectCode;
    }

    /**
     * @return the group's subject code
     */
    public Set<String> getSubjectCodes() {
        return subjectCodes;
    }

    /**
     * @return the group's student IDs
     */
    public Set<Long> getStudentIds() {
        return studentIds;
    }

    /**
     * @return the group's students
     */
    public Set<Student> getStudents() {
        return students;
    }

    /**
     * @return the total students in the group
     */
    public Integer getStudentCount() {
        return studentCount;
    }

    /**
     * @return <code>true</code> if the group was created by a user instead of an admin for the user
     */
    private boolean isUserCreated() {
        return userCreated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public Builder copy() {
        return builder()
                .id(id)
                .name(name)
                .schoolId(schoolId)
                .schoolName(schoolName)
                .school(school)
                .subjectCode(subjectCode)
                .subjectCodes(subjectCodes)
                .studentIds(studentIds)
                .students(students)
                .studentCount(studentCount)
                .userCreated(userCreated);
    }

    @Override
    public String toString() {
        return toStringHelper(this)
                .add("id", getId())
                .add("name", getName())
                .add("schoolName", getSchoolName())
                .add("schoolId", getSchoolId())
                .add("school", getSchool())
                .add("subjectCode", getSubjectCode())
                .add("subjectCodes", getSubjectCodes())
                .add("studentIds", getStudentIds())
                .add("students", getStudents())
                .add("studentCount", getStudentCount())
                .add("userCreated", isUserCreated())
                .toString();
    }

    public static class Builder {

        private Long id;
        private String name;
        private String schoolName;
        private Integer schoolId;
        private School school;
        private String subjectCode;
        private Collection<String> subjectCodes;
        private Iterable<Long> studentIds;
        private Iterable<Student> students;
        private Integer studentCount;
        private boolean userCreated;

        public Group build() {
            final Group group = new Group();
            group.id = id;
            group.name = name;
            group.schoolName = schoolName;
            group.schoolId = schoolId;
            group.school = school;
            group.subjectCode = subjectCode;
            group.subjectCodes = subjectCodes != null && !subjectCodes.isEmpty() ? ImmutableSet.copyOf(subjectCodes) : null;
            group.studentIds = studentIds != null ? ImmutableSet.copyOf(studentIds) : ImmutableSet.of();
            group.students = students != null ? ImmutableSet.copyOf(students) : ImmutableSet.of();
            group.studentCount = studentCount;
            group.userCreated = userCreated;
            return group;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder schoolName(final String schoolName) {
            this.schoolName = schoolName;
            return this;
        }

        public Builder schoolId(final Integer schoolId) {
            this.schoolId = schoolId;
            return this;
        }

        public Builder school(final School school) {
            this.school = school;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder subjectCodes(final Collection<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder studentIds(final Iterable<Long> studentIds) {
            this.studentIds = studentIds;
            return this;
        }

        public Builder students(final Iterable<Student> students) {
            this.students = students;
            return this;
        }

        public Builder studentCount(final Integer studentCount) {
            this.studentCount = studentCount;
            return this;
        }

        public Builder userCreated(final boolean userCreated) {
            this.userCreated = userCreated;
            return this;
        }

    }

}
