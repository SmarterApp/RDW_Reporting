package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.jdbc.MeasuredAssessments;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.MeasuredAssessment;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.exam.AbstractAssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

@Repository
class JdbcGroupAssessmentRepository extends AbstractAssessmentRepository<GroupAssessmentSearch> implements GroupAssessmentRepository {

    @Value("${sql.group.measuredAssessment.findAll}")
    private String findAllMeasuredAssessmentQuery;

    @Autowired
    JdbcGroupAssessmentRepository(
            final NamedParameterJdbcTemplate template,
            final SecurityParameterProvider securityParameterProvider,
            @Value("${sql.group.assessment.findLatestExam}") final String findLatestQuery,
            @Value("${sql.group.assessment.findAll}") final String findAllQuery) {
        super(template, securityParameterProvider, findLatestQuery, findAllQuery);
    }

    @Override
    protected Map<String, Object> getParameters(final GroupAssessmentSearch search) {
        return ImmutableMap.of("group_id", search.getGroupId());
    }

    @Override
    public List<MeasuredAssessment> findAllMeasuredAssessments(@NotNull final PermissionSource permissionSource, @NotNull final GroupAssessmentSearch search) {
        return template.query(findAllMeasuredAssessmentQuery, createParameters(permissionSource, search), this::buildMeasuredAssessment);
    }

    protected MeasuredAssessment buildMeasuredAssessment(final ResultSet row, final int index) throws SQLException {
        return MeasuredAssessments.map(row, MeasuredAssessment.builder())
                .build();
    }

}
