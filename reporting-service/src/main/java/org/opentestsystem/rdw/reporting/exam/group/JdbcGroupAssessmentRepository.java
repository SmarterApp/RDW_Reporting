package org.opentestsystem.rdw.reporting.exam.group;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.jdbc.MeasuredAssessments;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.MeasuredAssessment;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.UserGroupSqlProvider;
import org.opentestsystem.rdw.reporting.exam.AbstractAssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Admin;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Teacher;

@Repository
class JdbcGroupAssessmentRepository extends AbstractAssessmentRepository<GroupAssessmentSearch> implements GroupAssessmentRepository {

    private final String findAllMeasuredAssessmentTeacherGroupsQuery;
    private final String findAllMeasuredAssessmentAdminGroupsQuery;

    private final String findLatestTeacherGroupQuery;
    private final String findLatestAdminGroupQuery;
    private final String findAllTeacherGroupQuery;
    private final String findAllAdminGroupQuery;

    @Autowired
    JdbcGroupAssessmentRepository(
            final NamedParameterJdbcTemplate template,
            final UserGroupSqlProvider userGroupSqlProvider,
            final SecurityParameterProvider securityParameterProvider,
            @Value("${sql.group.assessment.findLatestExam}") final String findLatestQuery,
            @Value("${sql.group.assessment.findAll}") final String findAllQuery,
            @Value("${sql.group.measuredAssessment.findAll}") final String findAllMeasuredAssessmentQuery) {
        super(template, securityParameterProvider, findLatestQuery, findAllQuery);

        findAllMeasuredAssessmentTeacherGroupsQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllMeasuredAssessmentQuery, Teacher);
        findAllMeasuredAssessmentAdminGroupsQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllMeasuredAssessmentQuery, Admin);

        findLatestTeacherGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findLatestQuery, Teacher);
        findLatestAdminGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findLatestQuery, Admin);

        findAllTeacherGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllQuery, Teacher);
        findAllAdminGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllQuery, Admin);
    }

    @Override
    protected String getFindLatestQueryString(@NotNull final GroupAssessmentSearch search) {
        return search.getGroupId().getType() == Admin ? findLatestAdminGroupQuery : findLatestTeacherGroupQuery;
    }

    @Override
    protected String getFindAllQueryString(@NotNull final GroupAssessmentSearch search) {
        return search.getGroupId().getType() == Admin ? findAllAdminGroupQuery : findAllTeacherGroupQuery;
    }

    @Override
    protected Map<String, Object> getParameters(final GroupAssessmentSearch search) {
        final Map<String, Object> parameters = newHashMap();
        parameters.put("group_id", search.getGroupId().getId());
        return parameters;
    }

    @Override
    public List<MeasuredAssessment> findAllMeasuredAssessments(@NotNull final PermissionSource permissionSource, @NotNull final GroupAssessmentSearch search) {
        return ImmutableList.copyOf(template.query(search.getGroupId().getType() == Admin ?
                        findAllMeasuredAssessmentAdminGroupsQuery :
                        findAllMeasuredAssessmentTeacherGroupsQuery,
                createParameters(permissionSource, search), this::buildMeasuredAssessment));
    }

    private MeasuredAssessment buildMeasuredAssessment(final ResultSet row, final int index) throws SQLException {
        return MeasuredAssessments.map(row, MeasuredAssessment.builder()).build();
    }
}
