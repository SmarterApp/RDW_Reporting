package org.opentestsystem.rdw.reporting.organization;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.EnumSet;
import java.util.List;
import java.util.stream.Collectors;

import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

@Service
class DefaultOrganizationService implements OrganizationService {
    private static final int Unlimited = Integer.MAX_VALUE;

    private final OrganizationRepository repository;

    @Autowired()
    public DefaultOrganizationService(@NotNull final OrganizationRepository repository) {
        this.repository = repository;
    }

    @Override
    public List<School> getSchools(@NotNull final User user, final OrganizationQuery query) {
        final Permission permission = user.getPermissionsById().get(IndividualPiiRead);

        // This method is not PreAuthorized because it is pulled at login time.  Need to check
        // permissions here.
        if (permission == null) {
            return ImmutableList.of();
        }

        final OrganizationQuery schoolQuery = OrganizationQuery.builder()
                .copy(query)
                .types(EnumSet.of(OrganizationType.School))
                .build();

        final Collection<Organization> organizations = repository.findAll(permission.getScope(), schoolQuery);
        return ImmutableList.copyOf(organizations.stream()
                .map(School.class::cast)
                .collect(Collectors.toList()));
    }

    @Override
    public List<SchoolGroup> getSchoolGroups(@NotNull final User user) {
        final Permission permission = user.getPermissionsById().get(IndividualPiiRead);
        final OrganizationQuery schoolGroupQuery = OrganizationQuery.builder()
                .types(EnumSet.of(OrganizationType.SchoolGroup))
                .limit(Unlimited)
                .build();

        final Collection<Organization> organizations = repository.findAll(permission.getScope(), schoolGroupQuery);
        return ImmutableList.copyOf(organizations.stream()
                .map(SchoolGroup.class::cast)
                .collect(Collectors.toList()));
    }

    @Override
    public List<District> getDistricts(@NotNull final User user) {
        final Permission permission = user.getPermissionsById().get(IndividualPiiRead);
        final OrganizationQuery districtQuery = OrganizationQuery.builder()
                .types(EnumSet.of(OrganizationType.District))
                .limit(Unlimited)
                .build();

        final Collection<Organization> organizations = repository.findAll(permission.getScope(), districtQuery);
        return ImmutableList.copyOf(organizations.stream()
                .map(District.class::cast)
                .collect(Collectors.toList()));
    }

    @Override
    public List<DistrictGroup> getDistrictGroups(@NotNull final User user) {
        final Permission permission = user.getPermissionsById().get(IndividualPiiRead);
        final OrganizationQuery districtGroupQuery = OrganizationQuery.builder()
                .types(EnumSet.of(OrganizationType.DistrictGroup))
                .limit(Unlimited)
                .build();

        final Collection<Organization> organizations = repository.findAll(permission.getScope(), districtGroupQuery);
        return ImmutableList.copyOf(organizations.stream()
                .map(DistrictGroup.class::cast)
                .collect(Collectors.toList()));
    }

    @Override
    public List<Organization> getOrganizations(@NotNull final User user, final OrganizationQuery query) {
        final Permission permission = user.getPermissionsById().get(IndividualPiiRead);
        return ImmutableList.copyOf(repository.findAll(permission.getScope(), query));
    }

}
