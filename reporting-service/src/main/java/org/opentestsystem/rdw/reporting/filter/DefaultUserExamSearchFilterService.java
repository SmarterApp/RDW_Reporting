package org.opentestsystem.rdw.reporting.filter;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ImmutableStudentFilter;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFilter;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.opentestsystem.rdw.reporting.common.security.ReportingPermission;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.elas.ElasService;
import org.opentestsystem.rdw.reporting.ethnicity.EthnicityService;
import org.opentestsystem.rdw.reporting.gender.GenderService;
import org.opentestsystem.rdw.reporting.language.LanguageService;
import org.opentestsystem.rdw.reporting.militaryconnected.MilitaryConnectedService;
import org.opentestsystem.rdw.reporting.schoolyear.SchoolYearService;
import org.opentestsystem.rdw.reporting.subject.SubjectService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;

import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.EnglishLanguageAcquisitionStatus;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.IndividualEducationPlan;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.LimitedEnglishProficiency;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.MilitaryStudentIdentifier;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.PrimaryLanguage;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.Section504;

/**
 * Default implementation of the {@link UserExamSearchFilterService}
 * This service filters student filters based on the reporting system configuration and user permissions
 */
@Service
class DefaultUserExamSearchFilterService implements UserExamSearchFilterService {

    private static final List<String> StrictBooleans = ImmutableList.of("yes", "no");
    private final ReportingSystemSettings settings;
    private final SchoolYearService schoolYearService;
    private final SubjectService subjectService;
    private final Map<StudentFieldType, Supplier<List<String>>> valueSuppliersByStudentFilterType;

    @Autowired
    DefaultUserExamSearchFilterService(
            @NotNull final ReportingSystemSettings settings,
            @NotNull final SchoolYearService schoolYearService,
            @NotNull final EthnicityService ethnicityService,
            @NotNull final GenderService genderService,
            @NotNull final ElasService elasService,
            @NotNull final LanguageService languageService,
            @NotNull final MilitaryConnectedService militaryConnectedService,
            @NotNull final SubjectService subjectService) {

        final Supplier<List<String>> getStrictBooleans = () -> StrictBooleans;
        this.valueSuppliersByStudentFilterType = ImmutableMap.<StudentFieldType, Supplier<List<String>>>builder()
                .put(EconomicDisadvantage, getStrictBooleans)
                .put(EnglishLanguageAcquisitionStatus, elasService::getElasCodes)
                .put(Ethnicity, ethnicityService::getEthnicityCodes)
                .put(Gender, genderService::getGenderCodes)
                .put(IndividualEducationPlan, getStrictBooleans)
                .put(LimitedEnglishProficiency, getStrictBooleans)
                .put(MigrantStatus, getStrictBooleans)
                .put(MilitaryStudentIdentifier, militaryConnectedService::getMilitaryConnectedCodes)
                .put(PrimaryLanguage, languageService::getLanguageCodes)
                .put(Section504, getStrictBooleans)
                .build();

        this.settings = settings;
        this.schoolYearService = schoolYearService;
        this.subjectService = subjectService;
    }

    @Override
    public ExamSearchFilters get(final User user) {
        return ExamSearchFilters.builder()
                .schoolYears(schoolYearService.getSchoolYears())
                .studentFilters(createStudentFilters(user))
                .subjects(subjectService.getSubjectCodes())
                .build();
    }

    private List<StudentFilter> createStudentFilters(final User user) {
        final ImmutableList.Builder<StudentFilter> filters = ImmutableList.builder();
        for (final StudentFieldType type : StudentFieldType.values()) {
            final SearchFieldPermissionLevel permissionLevel = settings.getStudentFields().get(type);

            // Add the filter if
            // 1. There is no entry in the settings map (the default permission level is "everyone")
            // 2. The permission level is explicitly set to enabled
            // 3. The permission level is set to admin and the user has individual PII read permission
            if (permissionLevel == null
            || permissionLevel == SearchFieldPermissionLevel.Enabled
            || (
                    permissionLevel == SearchFieldPermissionLevel.Admin
                    && user.getPermissionsById().containsKey(ReportingPermission.IndividualPiiRead)
            )) {
                filters.add(ImmutableStudentFilter.builder()
                        .id(type)
                        .values(valueSuppliersByStudentFilterType.get(type).get())
                        .build()
                );
            }
        }
        return filters.build();
    }

}
