package org.opentestsystem.rdw.reporting.student;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.safeSplit;

@Repository
class JdbcStudentRepository implements StudentRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.student.findAll}")
    private String findAllQuery;

    JdbcStudentRepository(final NamedParameterJdbcTemplate template,
                          final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public List<Student> findAll(@NotNull final PermissionSource permissionSource,
                                 @NotNull final StudentSearch search) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionSource))
                        .addValue("group_id", search.getGroupId())
                        .addValue("school_id", search.getSchoolId()),
                (row, index) -> Student.builder()
                        .id(row.getLong("id"))
                        .ssid(row.getString("ssid"))
                        .firstName(row.getString("first_name"))
                        .lastName(row.getString("last_or_surname"))
                        .genderCode(row.getString("gender_code"))
                        .ethnicityCodes(safeSplit(row.getString("ethnicity_codes"), "|"))
                        .englishLanguageAcquisitionStatusCode(row.getString("elas_code"))
                        .individualEducationPlan(row.getBoolean("iep"))
                        .limitedEnglishProficiency(getNullable(row, row.getBoolean("lep")))
                        .section504(getNullable(row, row.getBoolean("section504")))
                        .migrantStatus(getNullable(row, row.getBoolean("migrant_status")))
                        .build()
        );
    }

}
