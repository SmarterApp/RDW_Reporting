package org.opentestsystem.rdw.reporting.student;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.springframework.util.CollectionUtils.isEmpty;

@Repository
class JdbcStudentRepository implements StudentRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final StudentEthnicityRepository ethnicityRepository;

    @Value("${sql.student.findAll}")
    private String findAllQuery;

    JdbcStudentRepository(final NamedParameterJdbcTemplate template,
                          final SecurityParameterProvider securityParameterProvider,
                          final StudentEthnicityRepository ethnicityRepository) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.ethnicityRepository = ethnicityRepository;
    }

    @Override
    public List<Student> findAll(@NotNull final PermissionSource permissionSource,
                                 @NotNull final StudentSearch search) {
        return findAll(permissionSource, search, null);
    }

    @Override
    public List<Student> findAll(final PermissionSource permissionSource, final Collection<Long> studentIds) {
        return findAll(permissionSource, null, studentIds);
    }

    private List<Student> findAll(@NotNull final PermissionSource permissionSource,
                                  @NotNull final StudentSearch search,
                                  @NotNull final Collection<Long> studentIdsToSearch) {

        final List<Student.Builder> studentBuilders = newArrayList();
        final Set<Long> studentIds = newHashSet();

        // SQL returns a sorted list, need to preserve the order
        template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionSource))
                        .addValue("group_id", search == null ? null : search.getGroupId())
                        .addValue("school_id", search == null ? null : search.getSchoolId())
                        .addValue("search_student_ids", !isEmpty(studentIdsToSearch))
                        .addValue("student_ids", nullOrEmptyToDefault(studentIdsToSearch, null)),
                (row, index) -> {
                    final Long studentId = row.getLong("id");
                    studentIds.add(studentId);
                    studentBuilders.add(Student.builder()
                            .id(studentId)
                            .ssid(row.getString("ssid"))
                            .firstName(row.getString("first_name"))
                            .lastName(row.getString("last_or_surname"))
                            .genderCode(row.getString("gender_code"))
                            .englishLanguageAcquisitionStatusCode(row.getString("elas_code"))
                            .individualEducationPlan(row.getBoolean("iep"))
                            .limitedEnglishProficiency(getNullable(row, row.getBoolean("lep")))
                            .section504(getNullable(row, row.getBoolean("section504")))
                            .migrantStatus(getNullable(row, row.getBoolean("migrant_status"))));
                    return row;
                });

        final Map<Long, Set<String>> ethnicityCodesByStudentId = ethnicityRepository.findEthnicityCodesByStudentIds(studentIds);
        return studentBuilders
                .stream()
                .map(b -> b.ethnicityCodes(ethnicityCodesByStudentId.get(b.getId())).build())
                .collect(toList());
    }
}
