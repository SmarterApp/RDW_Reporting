package org.opentestsystem.rdw.reporting.organization;

import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.model.SchoolsWrapper;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;
import java.util.Set;

/**
 * Service responsible for managing schools
 */
public interface OrganizationService {

    /**
     * Gets all the organizations the user has access to and
     * filters them by the organization query
     *
     * @param user  the user accessing the organizations
     * @param query the organization query
     * @return all the matching organizations the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Set<Organization> getOrganizations(@NotNull User user, OrganizationQuery query);

    /**
     * Gets all the schools the user has access to
     *
     * @param user the user accessing the schools
     * @return all the schools the user has access to
     */
    Set<School> getSchools(@NotNull User user);

    /**
     * Gets all the school groups the user has access to
     *
     * @param user the user accessing the schools
     * @return all the school groups the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Set<SchoolGroup> getSchoolGroups(@NotNull User user);

    /**
     * Gets all the districts the user has access to
     *
     * @param user the user accessing the schools
     * @return all the districts the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Set<District> getDistricts(@NotNull User user);

    /**
     * Gets all the district groups the user has access to
     *
     * @param user the user accessing the schools
     * @return all the district groups the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Set<DistrictGroup> getDistrictGroups(@NotNull User user);

    /**
     * Gets the schools the user has access to if the number of schools is less than or equal tp the limit
     *
     * @param user the user accessing the schools
     * @param query the query containing the limit
     * @return the schools if the number of schools are less or equal to the limit
     */
    SchoolsWrapper getSchoolsWithinLimit(@NotNull User user, OrganizationQuery query);

    /**
     * Gets the school by the school id
     *
     * @param user the user accessing the school
     * @param schoolId the school id
     * @return the school
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    School getSchool(@NotNull User user, int schoolId);
}
