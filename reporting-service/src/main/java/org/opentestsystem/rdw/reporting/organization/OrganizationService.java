package org.opentestsystem.rdw.reporting.organization;

import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * Service responsible for managing schools
 */
public interface OrganizationService {

    /**
     * Gets all the organizations the user has access to and
     * filters them by the organization query
     *
     * @param user  the user accessing the organizations
     * @param query the organization query
     * @return all the matching organizations the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    List<Organization> getOrganizations(@NotNull User user, OrganizationQuery query);

    /**
     * Gets the schools the user has access to limited by the query
     *
     * @param user  the user accessing the schools
     * @param query the query parameters. Note that query.types will be set to School
     * @return all the schools that the user has queries for and has access to
     */
    List<School> getSchools(@NotNull User user, OrganizationQuery query);

    /**
     * Gets all the school groups the user has access to
     *
     * @param user the user accessing the schools
     * @return all the school groups the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    List<SchoolGroup> getSchoolGroups(@NotNull User user);

    /**
     * Gets all the districts the user has access to
     *
     * @param user the user accessing the schools
     * @return all the districts the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    List<District> getDistricts(@NotNull User user);

    /**
     * Gets all the district groups the user has access to
     *
     * @param user the user accessing the schools
     * @return all the district groups the user has access to
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    List<DistrictGroup> getDistrictGroups(@NotNull User user);

}
