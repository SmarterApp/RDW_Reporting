package org.opentestsystem.rdw.reporting.exam.group;

import org.opentestsystem.rdw.reporting.assessment.AssessmentTargetRepository;
import org.opentestsystem.rdw.reporting.common.model.Target;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static java.util.stream.Collectors.toMap;

@Service
class DefaultGroupExamWithTargetScoresService implements GroupExamWithTargetScoreService {

    private final GroupExamWithTargetScoreRepository examWithTargetScoreRepository;
    private final AssessmentTargetRepository assessmentTargetRepository;

    @Autowired
    DefaultGroupExamWithTargetScoresService(final GroupExamWithTargetScoreRepository examWithTargetScoreRepository,
                                            final AssessmentTargetRepository assessmentTargetRepository) {
        this.examWithTargetScoreRepository = examWithTargetScoreRepository;
        this.assessmentTargetRepository = assessmentTargetRepository;
    }

    public Map<Target, Set<ExamWithTargetScore>> getExams(@NotNull final User user,
                                                          @NotNull final GroupExamSearch search) {
        final Map<Target, Set<ExamWithTargetScore>> examsByTarget = newHashMap();

        final Map<Integer, Target> targetsById = assessmentTargetRepository.
                findAllByAssessmentId(search.getAssessmentId())
                .stream()
                .collect(toMap(Target::getId, t -> t));

        for (final ExamWithTargetScore exam : examWithTargetScoreRepository.findAllByGroupExamSearch(user, search)) {
            examsByTarget.computeIfAbsent(targetsById.get(exam.getTargetId()), id -> newHashSet()).add(exam);
        }

        return examsByTarget;
    }
}