package org.opentestsystem.rdw.reporting.group;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.student.Student;
import org.opentestsystem.rdw.reporting.student.StudentRepository;
import org.opentestsystem.rdw.reporting.student.StudentSearch;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;


@Service
class DefaultUserGroupService implements UserGroupService {

    private final UserGroupRepository repository;
    private final StudentRepository studentRepository;

    DefaultUserGroupService(final UserGroupRepository repository,
                            final StudentRepository studentRepository) {
        this.repository = repository;
        this.studentRepository = studentRepository;
    }

    @Override
    public List<Group> getGroups(final User user) {
        return ImmutableList.copyOf(repository.findAll(user));
    }

    @Override
    public Group getGroup(final User user, final long groupId) {
        final Group group = checkGroupAccess(user, groupId);

        // Resolve group student IDs to student objects
        // Filter out students the user no longer has access to
        final Set<Student> students = ImmutableSet.copyOf(
                studentRepository.findAll(user, StudentSearch.builder()
                        .studentIds(group.getStudentIds())
                        .build()
                )
        );

        // Replace student IDs with student objects
        return group.copy()
                .studentIds(null)
                .students(students)
                .build();
    }

    @Override
    public Group createGroup(final User user, final Group group) {
        checkStudentAccess(user, group.getStudentIds());
        return repository.create(user.getUsername(), group);
    }

    @Override
    public void updateGroup(final User user, final Group group) {
        checkGroupAccess(user, group.getId());
        checkStudentAccess(user, group.getStudentIds());
        repository.update(group);
    }

    @Override
    public void deleteGroup(final User user, final long groupId) {
        checkGroupAccess(user, groupId);
        repository.delete(groupId);
    }

    /**
     * Makes sure that the user has rights to add the students to a group
     *
     * @param user       the user creating or modifying a group
     * @param studentIds the IDs of the students the group is being composed of
     * @throws RuntimeException when the user does not have access rights one or more of the given students
     */
    private void checkStudentAccess(final User user, final Collection<Long> studentIds) {
        final Set<Long> entitledStudentIds = ImmutableSet.copyOf(studentRepository.findAllIdsByUsername(user));
        if (!entitledStudentIds.containsAll(studentIds)) {
            throw new RuntimeException(String.format(
                    "Error creating group: User \"%s\" does not have access to one or more of the provided student IDs",
                    user.getUsername()
            ));
        }
    }

    /**
     * Makes sure that the user has rights to the given group
     *
     * @param user    the user updating the group
     * @param groupId the group ID
     * @throws RuntimeException when the user does not have access rights for the given group
     */
    private Group checkGroupAccess(final User user, final long groupId) {
        final Group group = repository.findOne(user, groupId);
        if (group == null) {
            throw new NoSuchElementException(String.format(
                    "Error updating group: User \"%s\" does not have access group with ID: %s",
                    user.getUsername(), groupId
            ));
        }
        return group;
    }

}
