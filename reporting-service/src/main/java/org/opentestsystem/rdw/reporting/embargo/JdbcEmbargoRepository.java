package org.opentestsystem.rdw.reporting.embargo;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

/**
 * Default JDBC implementation of an EmbargoRepository.
 */
@Repository
public class JdbcEmbargoRepository implements EmbargoRepository {
    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.embargo.existsForSchool}")
    private String existsForSchoolQuery;

    @Autowired
    public JdbcEmbargoRepository(final NamedParameterJdbcTemplate template,
                                 final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public boolean hasEmbargoAccess(final PermissionSource permissionSource) {
        return template.queryForObject(
                existsForSchoolQuery,
                new MapSqlParameterSource().addValues(securityParameterProvider.getSecurityParameters(permissionSource)),
                Boolean.class);
    }
}
