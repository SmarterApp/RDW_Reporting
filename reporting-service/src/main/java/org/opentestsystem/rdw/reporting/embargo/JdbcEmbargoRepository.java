package org.opentestsystem.rdw.reporting.embargo;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Loading;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Reviewing;

/**
 * Default JDBC implementation of an EmbargoRepository.
 */
@Repository
public class JdbcEmbargoRepository implements EmbargoRepository {
    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.embargo.loadingVisibleForSchool}")
    private String loadingVisibleForSchoolQuery;

    @Value("${sql.embargo.reviewingVisibleForSchool}")
    private String reviewingVisibleForSchoolQuery;

    @Value("${sql.embargo.loadingVisibleForSchoolYearAndDistrict}")
    private String loadingVisibleForSchoolYearAndDistrict;

    @Value("${sql.embargo.reviewingVisibleForSchoolYearAndDistrict}")
    private String reviewingVisibleForSchoolYearAndDistrict;

    @Autowired
    public JdbcEmbargoRepository(final NamedParameterJdbcTemplate template,
                                 final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public Map<EmbargoStatus, Boolean> hasEmbargoAccess(final PermissionSource permissionSource) {
        final boolean loading = template.queryForObject(
            loadingVisibleForSchoolQuery,
                new MapSqlParameterSource().addValues(securityParameterProvider.getSecurityParameters(permissionSource)),
                Boolean.class);

        final boolean reviewing = template.queryForObject(
            reviewingVisibleForSchoolQuery,
            new MapSqlParameterSource().addValues(securityParameterProvider.getSecurityParameters(permissionSource)),
            Boolean.class);

        return ImmutableMap.of(Loading, loading, Reviewing, reviewing);
    }

    @Override
    public Map<EmbargoStatus, Boolean> hasEmbargoAccess(
        final PermissionSource permissionSource, EmbargoIndividualSearch search) {

        final boolean loading = template.queryForObject(
            loadingVisibleForSchoolYearAndDistrict,
            createParameters(permissionSource, search),
            Boolean.class);

        final boolean reviewing = template.queryForObject(
            reviewingVisibleForSchoolYearAndDistrict,
            createParameters(permissionSource, search),
            Boolean.class);

        return ImmutableMap.of(Loading, loading, Reviewing, reviewing);
    }

    protected Map<String, Object> createParameters(final PermissionSource permissionSource, final EmbargoIndividualSearch search) {
        final Map<String, Object> parameters = newHashMap();
        parameters.putAll(securityParameterProvider.getSecurityParameters(permissionSource));
        parameters.put("school_year", search.getSchoolYear());
        parameters.put("district_id", search.getDistrictId());
        return parameters;
    }
}
