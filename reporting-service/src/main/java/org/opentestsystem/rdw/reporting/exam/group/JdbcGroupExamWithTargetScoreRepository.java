package org.opentestsystem.rdw.reporting.exam.group;

import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.jdbc.StudentContexts;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.Student.Builder;
import org.opentestsystem.rdw.reporting.common.model.StudentContext;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.UserGroupSqlProvider;
import org.opentestsystem.rdw.reporting.student.StudentEthnicityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Streams.mapWithIndex;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Admin;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Teacher;

@Repository
class JdbcGroupExamWithTargetScoreRepository implements GroupExamWithTargetScoreRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final StudentEthnicityRepository ethnicityRepository;

    private final String findAllForAssessmentTeacherGroupQuery;
    private final String findAllForAssessmentAdminGroupQuery;

    @Autowired
    public JdbcGroupExamWithTargetScoreRepository(
            final NamedParameterJdbcTemplate template,
            final UserGroupSqlProvider userGroupSqlProvider,
            final SecurityParameterProvider securityParameterProvider,
            final StudentEthnicityRepository ethnicityRepository,
            @Value("${sql.group.examWithTargetScore.findAllForAssessment}") final String findAllForAssessmentQuery) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.ethnicityRepository = ethnicityRepository;

        this.findAllForAssessmentTeacherGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllForAssessmentQuery, Teacher);
        this.findAllForAssessmentAdminGroupQuery = userGroupSqlProvider.getSqlForGroupOfType(findAllForAssessmentQuery, Admin);

    }

    @Override
    public List<ExamWithTargetScore> findAllByGroupExamSearch(final PermissionSource permissionSource,
                                                              final GroupExamSearch search) {
        final List<Student.Builder> studentBuilders = newArrayList();
        final List<ExamWithTargetScore.Builder> examBuilders = newArrayList();

        template.query(
                search.getGroupId().getType() == Admin ? findAllForAssessmentAdminGroupQuery : findAllForAssessmentTeacherGroupQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionSource))
                        .addValue("school_year", search.getSchoolYear())
                        .addValue("assessment_id", search.getAssessmentId())
                        .addValue("group_id", search.getGroupId().getId()),
                (row, index) -> {
                    examBuilders.add(Exams.map(row, ExamWithTargetScore.builder()
                                    .targetId(row.getInt("target_id"))
                                    .studentRelativeResidualScore(getNullable(row, row.getDouble("student_relative_residual_score")))
                                    .standardMetRelativeResidualScore(getNullable(row, row.getDouble("standard_met_relative_residual_score")))
                                    .studentContext(StudentContexts.map(row, StudentContext.builder()).build()),
                            permissionSource.getPermissionsById()));

                    studentBuilders.add(Student.builder()
                            .id(row.getLong("student_id"))
                            .genderCode(row.getString("student_gender_code")));
                    return row;

                }
        );

        final Map<Long, Set<String>> ethnicityCodesByStudentId = ethnicityRepository
                .findEthnicityCodesByStudentIds(studentBuilders.stream().map(Builder::getId).collect(toList()));

        return mapWithIndex(examBuilders.stream(),
                (b, index) -> b.student(studentBuilders.get((int) index)
                        .ethnicityCodes(ethnicityCodesByStudentId.get(studentBuilders.get((int) index).getId())).build())
                        .build())
                .collect(toList());
    }
}