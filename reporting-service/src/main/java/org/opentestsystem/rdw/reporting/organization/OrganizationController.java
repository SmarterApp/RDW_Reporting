package org.opentestsystem.rdw.reporting.organization;

import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.constraints.NotNull;
import java.util.Set;

@RestController
@RequestMapping("/organizations")
public class OrganizationController {

    private final OrganizationService service;

    @Autowired
    public OrganizationController(@NotNull final OrganizationService service) {
        this.service = service;
    }

    @GetMapping("/schools")
    public Set<School> getSchools(@AuthenticationPrincipal final User user, final OrganizationQuery query) {
        return service.getSchools(user, query);
    }

    @GetMapping("/schoolGroups")
    public Set<SchoolGroup> getSchoolGroups(@AuthenticationPrincipal final User user) {
        return service.getSchoolGroups(user);
    }

    @GetMapping("/districts")
    public Set<District> getDistricts(@AuthenticationPrincipal final User user) {
        return service.getDistricts(user);
    }

    @GetMapping("/districtGroups")
    public Set<DistrictGroup> getDistrictGroups(@AuthenticationPrincipal final User user) {
        return service.getDistrictGroups(user);
    }

    @GetMapping
    public Set<Organization> get(
            @AuthenticationPrincipal final User user,
            final OrganizationQuery query) {
        return service.getOrganizations(user, query);
    }
}
