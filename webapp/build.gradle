import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id "com.moowork.node" version "1.1.1"
}

apply plugin: 'org.springframework.boot'

dependencies {
    compile project(':rdw-reporting-common')
    compile 'org.opentestsystem.rdw.common:rdw-common-security:0.0.1-SNAPSHOT'
    compile 'org.opentestsystem.rdw.common:rdw-common-utils:0.0.1-SNAPSHOT'
    optional 'org.springframework.boot:spring-boot-configuration-processor'
    runtime 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.cloud:spring-cloud-starter-aws'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.cloud:spring-cloud-starter-config:1.2.3.RELEASE'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:1.5.3.RELEASE'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.7'
    compile 'com.google.guava:guava:21.0'
    compile 'mysql:mysql-connector-java'
    compile 'org.apache.commons:commons-io:1.3.2'
    testCompile 'junit:junit'
    testCompile 'org.assertj:assertj-core:3.6+'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile 'org.springframework.security:spring-security-test'
}

node {
    version = '7.10.0'
    npmVersion = '4.5.0'
    download = true
    workDir = file("${project.projectDir}/src/main/webapp")
    nodeModulesDir = file("${project.projectDir}/src/main/webapp")
}

//Hopefully this allows us to hot add resources
bootRun {
    addResources = true
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

// generate coverage report automatically (./build/reports/jacoco/test/html/index.html)
test.finalizedBy(jacocoTestReport)

//This is the build task for the Front End (Fe) and only compiles when the inputs change
task buildFe(type: NpmTask) {
    inputs.files(fileTree('src/main/webapp/node_modules'))
    inputs.files(fileTree('src/main/webapp/src'))
    inputs.files(fileTree('src/main/webapp/e2e'))
    inputs.file('src/main/webapp/package.json')
    inputs.file('src/main/webapp/karma.conf.js')
    inputs.file('src/main/webapp/angular-cli.json')
    inputs.file('src/main/webapp/tslint.json')
    inputs.file('src/main/webapp/protractor.conf.js')

    outputs.dir('build/resources/static')

    dependsOn npm_install
    args = ['run', 'build']
}

// The processResources task takes care of gathering all of the resources in the project to the target directory.
// In order to get the front end resources in to the final jar, the front end needs to be built
// before all of the other resources are processed in order to get the static resouces in the right place
processResources.dependsOn buildFe

// trigger creation of build-info.properties
classes.dependsOn(createBuildInfoFile)


// task to build the docker image
task buildImage(type:DockerBuildImage, dependsOn:[build, createDockerfile]) {
    dockerFile = createDockerfile.destFile
    inputDir = project.file('build/docker/')
    tag = "fwsbac/${project.name}"
    doFirst {
        copy {
            from jar
            into inputDir
        }
    }
}