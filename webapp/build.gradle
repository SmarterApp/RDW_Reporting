plugins {
    id "com.moowork.node" version "1.1.1"
}

apply plugin: 'org.springframework.boot'

createDockerfile {
    environmentVariable("MAX_HEAP_SIZE", "-Xmx768m")
}

dependencies {
    compile project(':rdw-reporting-common')
    compile project(':rdw-reporting-common-web')
    compile 'org.opentestsystem.rdw.common:rdw-common-model'
    compile 'org.opentestsystem.rdw.common:rdw-common-security'
    compile 'org.opentestsystem.rdw.common:rdw-common-status'
    compile 'org.opentestsystem.rdw.common:rdw-common-utils'
    runtime 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-zuul'
    compile 'org.springframework.security.extensions:spring-security-saml2-core'
    compile 'org.springframework.session:spring-session'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'com.google.guava:guava'
    compile 'mysql:mysql-connector-java'
    compile 'commons-io:commons-io'

    testCompile project(path: ':rdw-reporting-common', configuration: 'tests')
    testCompile project(path: ':rdw-reporting-common-web', configuration: 'tests')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile 'org.springframework.security:spring-security-test'
}

node {
    version = '8.9.1'
    npmVersion = '5.5.1'
    download = true
    workDir = file("${project.projectDir}/src/main/webapp")
    nodeModulesDir = file("${project.projectDir}/src/main/webapp")
}

//Hopefully this allows us to hot add resources
bootRun {
    addResources = true
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

// generate coverage report automatically (./build/reports/jacoco/test/html/index.html)
test.finalizedBy(jacocoTestReport)

//This is the build task for the Front End (Fe) and only compiles when the inputs change
task buildFe(type: NpmTask) {
    inputs.files(fileTree("src/main/webapp/src"))
    inputs.file("src/main/webapp/package.json")
    workingDir = file("src/main/webapp")
    outputs.dir('build/resources/static')
    dependsOn npm_install
    args = project.hasProperty('prod')
            ? ['run', 'build-prod']
            : ['run', 'build']
    // move build from dist to static resources
    doLast {
        copy { from "src/main/webapp/dist" into "src/main/resources/static" }
        delete "src/main/webapp/dist"
    }
}

task testFe(type: NpmTask) {
    inputs.files(fileTree("src/main/webapp/src"))
    inputs.file("src/main/webapp/package.json")
    workingDir = file("src/main/webapp")
    outputs.dir('build/resources/static')
    dependsOn npm_install
    args = ['run', 'test-ci']
}

task gzipBundles(dependsOn: buildFe) {
    doLast {
        FileTree tree = fileTree(dir: "${project.projectDir}/src/main/resources/static/", includes: ["**/*.bundle.js", "**/*.bundle.css"])
        tree.each { File file ->
            String fileName = file.getName()
            println "$fileName => ${fileName}.gz"
            ant.gzip(src: file, destfile: file.toString() + ".gz")
        }
    }
}

// The processResources task takes care of gathering all of the resources in the project to the target directory.
// In order to get the front end resources in to the final jar, the front end needs to be built
// before all of the other resources are processed in order to get the static resouces in the right place
// processResources.dependsOn gzipBundles