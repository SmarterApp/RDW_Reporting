package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGradeRepository.class})
@Sql(scripts = {"school-grade-search-data.sql"})
@ActiveProfiles("test")
public class JdbcGradeRepositoryIT {

    @Autowired
    private JdbcGradeRepository repository;

    private final Grade grade1 = new Grade(-1, "g1");
    private final Grade grade2 = new Grade(-2, "g2");

    @Test
    public void findAllForSchoolShouldReturnAll() throws Exception {
        assertThat(repository.findAllForSchool(PermissionScope.STATEWIDE, -10L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(grade1, grade2);
    }

    @Test
    public void findAllForSchoolShouldBeEmptyForMismatchingSchool() throws Exception {
        assertThat(repository.findAllForSchool(PermissionScope.STATEWIDE, -100L)).isEmpty();
    }

    @Test
    public void findAllForSchoolShouldBeEmptyIfPermissionScopeDoesntPermit() throws Exception {
        assertThat(repository.findAllForSchool(new PermissionScope(null, ImmutableSet.of(-100L)), -10L)).isEmpty();
    }

}
