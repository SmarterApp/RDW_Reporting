package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.security.GroupGrant;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupExamRepository.class, JdbcEthnicityRepository.class})
@Sql(statements = {
        "INSERT INTO gender (id, code) VALUES (-1, 'g1');\n",
        "INSERT INTO district (id, natural_id, name) VALUES (-1, 'district1', 'district1');\n",
        "INSERT INTO school (id, district_id, natural_id, name, import_id) VALUES (-1, -1, 's1', 's1', -1);\n",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, gender_id, birthday, import_id) VALUES (-1, '-1', 'student1', 'student1', -1, '2017-01-01 00:00:00.000000', -1);\n",
        "INSERT INTO subject (id, code) VALUES (-1, 'subject1');\n",
        "INSERT INTO grade (id, code, name) VALUES (-1, 'g1', 'grade1');\n",
        "INSERT INTO completeness (id, code) VALUES (-1, 'c1');\n",
        "INSERT INTO administration_condition (id, code) VALUES (-1, 'ac1');\n",
        "INSERT INTO asmt_type (id, code, name) VALUES (-1, 'type1', 'type1');\n",
        "INSERT INTO asmt_type (id, code, name) VALUES (-2, 'type2', 'type2');\n",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) VALUES (-1, -1, 'a', -1, -1, 2017, 'a', 'a', 'a', -1);\n",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) VALUES (-2, -2, 'b', -1, -1, 2017, 'b', 'b', 'b', -1);\n",
        "INSERT INTO student_group (id, name, school_id, school_year, subject_id, import_id) VALUES (-1, 'group1', -1, 2017, -1, -1);\n",
        "INSERT INTO student_group_membership (student_group_id, student_id) VALUES (-1, -1);\n",
        "INSERT INTO exam (id, type_id, grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage, school_year, asmt_id, asmt_version, completeness_id, administration_condition_id, session_id, scale_score, scale_score_std_err, performance_level, completed_at, import_id) " +
                "VALUES (-1, -1, -1, -1, -1, 0, 0, 0, 0, 2017, -1, 'v1', -1, -1, 'session1', 2000, 20, 1, '2017-01-01 00:00:00.000000', -1);",
})
@ActiveProfiles("test")
public class JdbcGroupExamRepositoryIT {

    @Autowired
    GroupExamRepository repository;

    List<Assessment> getExpectedAssessmentsForFindAll() {
        return ImmutableList.of(
                Assessment.builder()
                        .id(-1L)
                        .typeId(-1L)
                        .name("a")
                        .gradeId(-1L)
                        .schoolYear(2017)
                        .subjectId(-1L)
                        .cutPoints(ImmutableList.of(
                                0L, 0L, 0L, 0L, 0L
                        ))
                        .build()
        );
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAll(createSecurityContext(0L, 1L), 2017))
                .isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAll(createSecurityContext(-1L, -1L), 2016))
                .isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMismatchingSubject() throws Exception {
        assertThat(repository.findAll(createSecurityContext(-1L, -2L), 2017))
                .isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        List<Assessment> actual = repository.findAll(createSecurityContext(-1L, -1L), 2017);
        assertThat(actual)
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(getExpectedAssessmentsForFindAll());
    }

    private GroupSecurityContext createSecurityContext(final long groupId, final long subjectId) {
        return new GroupSecurityContext(
                new GroupGrant(groupId, subjectId),
                new PermissionScope(null, null)
        );
    }
}