package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.DistrictAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.SchoolAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.Teacher;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSandboxRoleRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSandboxRoleRepositoryIT {

    @Autowired
    private JdbcSandboxRoleRepository repository;

    @Test
    public void findAllShouldReturnAllRolesOrderedForDisplay() {
        assertThat(repository.findAll())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        SandboxRole.builder()
                                .id("teacher_schoolNat1")
                                .type(Teacher)
                                .organization(Organization.builder()
                                        .id(-10L)
                                        .name("school1")
                                        .naturalId("schoolNat1")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("teacher_schoolNat2")
                                .type(Teacher)
                                .organization(Organization.builder()
                                        .id(-11L)
                                        .name("school2")
                                        .naturalId("schoolNat2")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("teacher_schoolNat3")
                                .type(Teacher)
                                .organization(Organization.builder()
                                        .id(-12L)
                                        .name("school3")
                                        .naturalId("schoolNat3")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("school_schoolNat1")
                                .type(SchoolAdministrator)
                                .organization(Organization.builder()
                                        .id(-10L)
                                        .name("school1")
                                        .naturalId("schoolNat1")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("school_schoolNat2")
                                .type(SchoolAdministrator)
                                .organization(Organization.builder()
                                        .id(-11L)
                                        .name("school2")
                                        .naturalId("schoolNat2")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("school_schoolNat3")
                                .type(SchoolAdministrator)
                                .organization(Organization.builder()
                                        .id(-12L)
                                        .name("school3")
                                        .naturalId("schoolNat3")
                                        .organizationType(School)
                                        .build())
                                .build(),
                        SandboxRole.builder()
                                .id("district_districtNat1")
                                .type(DistrictAdministrator)
                                .organization(Organization.builder()
                                        .id(-10L)
                                        .name("district1")
                                        .naturalId("districtNat1")
                                        .organizationType(District)
                                        .build())
                                .build()
                );
    }

    @Test
    public void findByIdShouldFindOneIfPresent() {
        assertThat(repository.findById("teacher_schoolNat1"))
                .isEqualToComparingFieldByFieldRecursively(
                        SandboxRole.builder()
                                .id("teacher_schoolNat1")
                                .type(Teacher)
                                .organization(Organization.builder()
                                        .id(-10L)
                                        .name("school1")
                                        .naturalId("schoolNat1")
                                        .organizationType(School)
                                        .build())
                                .build()
                );
    }

    @Test
    public void findByIdShouldBeNullIfIDIsMissing() {
        assertThat(repository.findById("not there")).isNull();
    }

}
