package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcDistrictRepository.class})
@Sql(scripts = "school-grade-search-data.sql")
@ActiveProfiles("test")
public class JdbcDistrictRepositoryIT {

    @Autowired
    private JdbcDistrictRepository repository;

    // district ID of -1 is reserved
    private final ExamLocation district1 = new ExamLocation(-10, "district1");
    private final ExamLocation district2 = new ExamLocation(-20, "district2");
    private final ExamLocation district3 = new ExamLocation(-30, "district3");

    @Test
    public void findAllStatewidePermissionScopeShouldReturnAllDistricts() throws Exception {
        assertThat(repository.findAll(PermissionScope.STATEWIDE))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district1, district2, district3);
    }

    @Test
    public void findAllDistrictPermissionScopeShouldReturnSetDistricts() throws Exception {
        assertThat(repository.findAll(new PermissionScope(ImmutableSet.of(-10L, -20L), null)))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district1,district3);
    }

    @Test
    public void findAllMismatchingDistrictPermissionScopeShouldReturnEmpty() throws Exception {
        assertThat(repository.findAll(new PermissionScope(ImmutableSet.of(-50L), null))).isEmpty();
    }

    @Test
    public void findAllSchoolPermissionScopeShouldReturnDistrictsOfSetSchools() throws Exception {
        assertThat(repository.findAll(new PermissionScope(null, ImmutableSet.of(-30L, -40L))))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district2, district3);
    }

    @Test
    public void findAllMismatchingSchoolPermissionScopeShouldReturnEmpty() throws Exception {
        assertThat(repository.findAll(new PermissionScope(null, ImmutableSet.of(-50L)))).isEmpty();
    }

}
