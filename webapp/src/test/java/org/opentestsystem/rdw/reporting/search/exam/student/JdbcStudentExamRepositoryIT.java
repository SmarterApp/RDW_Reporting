package org.opentestsystem.rdw.reporting.search.exam.student;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentExamRepositoryIT {


    @Autowired
    private JdbcStudentExamRepository repository;

    @Test
    public void findAllForStudentShouldReturnEmptyForMissingStudent() throws Exception {
        assertThat(repository.findAllForStudent(PermissionScope.STATEWIDE, 0L)).isEmpty();
    }

    @Test
    public void findAllForStudentShouldReturnAllExamsForExistingStudent() throws Exception {

        final List<StudentHistoryExamWrapper> wrappers = repository.findAllForStudent(PermissionScope.STATEWIDE, -1L);
        final List<Exam> exams = newArrayList();
        final List<Assessment> assessments = newArrayList();
        final List<Organization> schools = newArrayList();
        wrappers.forEach(wrapper -> {
            exams.add(wrapper.getExam());
            assessments.add(wrapper.getAssessment());
            schools.add(wrapper.getSchool());
        });

        assertThat(exams)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT_EXAMS);
        assertThat(assessments)
                .isNotEmpty()
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.STUDENT_ASSESSMENTS);
    }

    @Test
    public void itShouldDetermineIfAnExamExistsForAStudent() throws Exception {
        assertThat(repository.findStudentWithExams(PermissionScope.STATEWIDE, "unknown_ssid"))
                .isNull();
        assertThat(repository.findStudentWithExams(PermissionScope.STATEWIDE, "student1_ssid"))
                .isNotNull()
                .isInstanceOf(Student.class);
        assertThat(repository.findStudentWithExams(PermissionScope.STATEWIDE, "student2_ssid"))
                .isNull();
    }

}