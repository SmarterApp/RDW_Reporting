package org.opentestsystem.rdw.reporting.report;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.messaging.Message;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
@SpringBootTest
@DirtiesContext
public class DefaultExamReportProcessorSourceIT {

    @Autowired
    private Source sourceChannel;

    @Autowired
    private MessageCollector messageCollector;

    private DefaultExamReportProcessorSource source;

    @Before
    public void before() {
        source = new DefaultExamReportProcessorSource(sourceChannel);
    }

    @Test
    @SuppressWarnings("unchecked")
    public void sendShouldSendRequest() {
        final BatchExamReportRequestHolder expected = new BatchExamReportRequestHolder(null, null);
        source.send(expected);
        final Message<BatchExamReportRequestHolder> actual = (Message<BatchExamReportRequestHolder>) messageCollector.forChannel(sourceChannel.output()).poll();
        assertThat(actual.getPayload()).isEqualTo(expected);
    }

}
