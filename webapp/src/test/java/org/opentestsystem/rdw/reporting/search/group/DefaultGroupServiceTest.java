package org.opentestsystem.rdw.reporting.search.group;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultGroupServiceTest {

    @MockBean
    private GroupRepository repository;

    private DefaultGroupService service;

    @Before
    public void before() {
        this.service = new DefaultGroupService(repository);
    }

    @Test
    public void itShouldForwardCorrectUsername() throws Exception {
        final User user = User.builder()
                .id("user")
                .username("user")
                .permissionsById(ImmutableMap.of(
                        "GROUP_PII_READ", new Permission("GROUP_PII_READ", PermissionScope.STATEWIDE)
                ))
                .build();

        final List<Group> groups = newArrayList(Group.builder().id(10L).build());
        when(repository.findAllForUsername("user")).thenReturn(groups);
        assertThat(service.getGroups(user))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(groups);
    }

}
