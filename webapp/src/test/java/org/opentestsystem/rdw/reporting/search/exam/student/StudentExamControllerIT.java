package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(StudentExamController.class)
@WithMockUser(username = "test")
public class StudentExamControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private StudentExamService service;

    @Test
    public void getStudentExamsShouldReturn404WhenStudentNotFound() throws Exception {
        when(service.getExams(any(User.class), eq(123L))).thenThrow(new NoSuchElementException(""));
        mvc.perform(get("/api/students/123/exams"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getStudentExamsShouldReturnHistoryWhenFound() throws Exception {
        final Student student = Student.builder().id(123).build();
        final StudentHistoryExamWrapper wrapper1 = new StudentHistoryExamWrapper.Builder()
                .assessment(Assessment.builder().id(1).build())
                .exam(Exam.builder().id(1).build())
                .school(new Organization(1, "School A"))
                .build();
        final StudentHistoryExamWrapper wrapper2 = new StudentHistoryExamWrapper.Builder()
                .assessment(Assessment.builder().id(2).build())
                .exam(Exam.builder().id(2).build())
                .school(new Organization(2, "School B"))
                .build();

        when(service.getExams(any(User.class), eq(123L))).thenReturn(
                new StudentExamHistory(
                        student,
                        ImmutableSet.of(wrapper1, wrapper2)
                )
        );

        mvc.perform(get("/api/students/123/exams"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.student.id").value((int) student.getId()))
                .andExpect(jsonPath("$.exams.[*].assessment[?(@.id==1)].id").exists())
                .andExpect(jsonPath("$.exams.[*].assessment[?(@.id==2)].id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==1)].id").exists())
                .andExpect(jsonPath("$.exams.[*].exam[?(@.id==2)].id").exists())
                .andExpect(jsonPath("$.exams.[*].school[?(@.id==1)].id").exists())
                .andExpect(jsonPath("$.exams.[*].school[?(@.id==2)].id").exists());
    }

    @Test
    public void itShouldRetrieveAStudentWithExams() throws Exception {
        final Student student = Student.builder().id(1).build();
        when(service.findStudentWithExams(any(User.class), eq("a")))
                .thenReturn(student);

        mvc.perform(get("/api/students/a?hasExams=true"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value((int) student.getId()));
    }

    @Test
    public void itShouldReturnA404IfAStudentWithExamsCannotBeFound() throws Exception {
        final Student student = Student.builder().id(1).build();
        when(service.findStudentWithExams(any(User.class), eq("a")))
                .thenThrow(new NoSuchElementException("Bad Juju"));

        mvc.perform(get("/api/students/a?hasExams=true"))
                .andExpect(status().isNotFound());
    }
}