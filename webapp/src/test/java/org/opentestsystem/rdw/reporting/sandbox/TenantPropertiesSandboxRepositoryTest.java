package org.opentestsystem.rdw.reporting.sandbox;

import com.google.common.collect.Maps;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TenantPropertiesSandboxRepositoryTest {

    private static final Tenant tenant = Tenant.builder()
            .id("a")
            .key("A")
            .build();

    private static final Tenant sandbox = Tenant.builder()
            .id("b")
            .key("B")
            .sandbox(true)
            .build();

    @Mock
    private TenantProperties tenantProperties;

    private TenantPropertiesSandboxRepository repository;

    @Before
    public void before() {
        when(tenantProperties.getTenants()).thenReturn(Maps.uniqueIndex(
                newArrayList(
                        tenant,
                        sandbox
                ),
                Tenant::getId
        ));
        repository = new TenantPropertiesSandboxRepository(tenantProperties);
    }

    @Test
    public void findAllShouldFilterOutTenants() {
        assertThat(repository.findAll())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(sandbox);
    }

    @Test
    public void findByKeyShouldReturnTheTenantForTheKeyIfPresent() {
        assertThat(repository.findByKey(sandbox.getKey()))
                .isEqualToComparingFieldByFieldRecursively(sandbox);
    }

    @Test
    public void findByKeyShouldReturnNullIfNoSandboxHasTheKey() {
        assertThat(repository.findByKey(tenant.getKey())).isNull();
    }
}
