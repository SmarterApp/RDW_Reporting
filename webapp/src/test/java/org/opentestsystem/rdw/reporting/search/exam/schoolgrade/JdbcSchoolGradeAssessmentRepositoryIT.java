package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeAssessmentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeAssessmentRepositoryIT {

    @Autowired
    private JdbcSchoolGradeAssessmentRepository repository;

    @Test
    public void findLatestShouldFindTheLatestExam() throws Exception {
        final Assessment actual = repository.findLatest(PermissionScope.STATEWIDE, -30, -1, 2017);
        assertThat(actual).isNotNull();
        assertThat(actual.getId()).isEqualTo(-3);
    }

    @Test
    public void findLatestOfBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(
                new PermissionScope(null, ImmutableSet.of(-100L)), -30, -1, 2017)).isNull();
    }

    @Test
    public void findLatestOfBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -40, -1, 2017)).isNull();
    }

    @Test
    public void findLatestOfBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -30, -2, 2017)).isNull();
    }

    @Test
    public void findLatestOfAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -30, -1, 2016)).isNull();
    }

}
