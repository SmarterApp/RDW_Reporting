package org.opentestsystem.rdw.reporting.report.export;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamExportRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamExportRepositoryIT {

    @Autowired
    private JdbcExamExportRepository repository;

    @Test
    public void findAllForOneSchoolShouldReturnOnlyThatSchoolsExams() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .schoolIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);

        assertThat(exports).hasSize(2);
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -1)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -2)).isTrue();
    }

    @Test
    public void findAllForOneDistrictShouldReturnOnlyThatDistrictsExams() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .districtIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);

        assertThat(exports).hasSize(3);
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -1)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -2)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -3)).isTrue();
    }

    @Test
    public void findAllForOneSchoolGroupShouldReturnOnlyThatSchoolGroupsExams() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .schoolGroupIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);

        assertThat(exports).hasSize(1);
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -3)).isTrue();
    }

    @Test
    public void findAllForOneDistrictGroupShouldReturnOnlyThatDistrictGroupsExams() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .districtGroupIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);

        assertThat(exports).hasSize(4);
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -4)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -5)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -6)).isTrue();
        assertThat(exports.stream().anyMatch(x -> x.getExam().getId() == -7)).isTrue();
    }

    @Test
    public void findAllForMultipleQueryShouldReturnMultipleExams() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .schoolIds(ImmutableSet.of(-10L))
                .schoolGroupIds(ImmutableSet.of(-10L))
                .districtIds(ImmutableSet.of(-10L))
                .districtGroupIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);
        assertThat(exports).hasSize(7);
    }

    @Test
    public void findAllForOneSchoolNotPermissableSchoolGroupShouldReturnEmptyList() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .schoolGroupIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(schoolGroups(-20L), query);

        assertThat(exports).isEmpty();
    }

    @Test
    public void findAllForOneSchoolNotPermissableSchoolShouldReturnEmptyList() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .schoolIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(schools(-20L), query);

        assertThat(exports).isEmpty();
    }

    @Test
    public void findAllForOneSchoolNotPermissableDistrictShouldReturnEmptyList() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .districtIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(districts(-20L), query);

        assertThat(exports).isEmpty();
    }

    @Test
    public void findAllForOneSchoolNotPermissableDistrictGroupsShouldReturnEmptyList() throws Exception {
        final ExamExportQuery query = ExamExportQuery.builder()
                .districtGroupIds(ImmutableSet.of(-10L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(districtGroups(-20L), query);

        assertThat(exports).isEmpty();
    }

    @Test
    public void findAllExamExportsMapsAllFields() throws Exception {
        ExamExportQuery query = ExamExportQuery.builder()
                .schoolIds(ImmutableSet.of(-20L))
                .build();

        final List<ExamExport> exports = repository.findAllExamExports(PermissionScope.STATEWIDE, query);
        assertThat(exports).hasSize(1);

        final ExamExport actualExport = exports.get(0);

        assertThat(actualExport).isEqualToComparingFieldByFieldRecursively(
                ExamExport.builder()
                        .school(ExamExport.School.builder()
                                .name("school2")
                                .naturalId("schoolNat2")
                                .ncesId("externalId2")
                                .districtName("district1")
                                .districtNaturalId("districtNat1")
                                .build())
                        .assessment(ExamExport.Assessment.builder()
                                .subject(Subject.MATH)
                                .name("sum1")
                                .type(AssessmentType.SUMMATIVE)
                                .build())
                        .exam(TestData
                                .exam3()
                                .student(TestData.student().build())
                                .studentContext(TestData.studentContext().build())
                                .build())
                        .build()
        );
    }
}


