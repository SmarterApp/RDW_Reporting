package org.opentestsystem.rdw.reporting.security.auth;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.GroupGrant;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.security.Grant;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.security.Grant.EntityLevel.DISTRICT;
import static org.opentestsystem.rdw.security.Grant.EntityLevel.INSTITUTION;
import static org.opentestsystem.rdw.security.Grant.EntityLevel.STATE;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultAuthorizationServiceTest {

    private static final String stateA = "stateA";

    @MockBean
    private PermissionService permissionService;

    @MockBean
    private DistrictRepository districtRepository;

    @MockBean
    private InstitutionRepository institutionRepository;

    @MockBean
    private GroupGrantRepository groupMembershipRepository;

    private DefaultAuthorizationService authorizationService;

    @Before
    public void before() throws Exception {
        authorizationService = new DefaultAuthorizationService(
                stateA,
                permissionService,
                districtRepository,
                institutionRepository,
                groupMembershipRepository
        );

        when(permissionService.getPermissionsByRole()).thenReturn(ImmutableMap.of(
                "a", ImmutableSet.of("a"),
                "b", ImmutableSet.of("b"),
                "c", ImmutableSet.of("c"),
                "d", ImmutableSet.of("d", "f"),
                "e", ImmutableSet.of()
        ));
        when(districtRepository.findAllIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));
        when(institutionRepository.findAllIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));
        when(groupMembershipRepository.findAllForUsername("a")).thenReturn(ImmutableList.of(new GroupGrant(1L, 1)));
    }

    @Test
    public void getGrantsShouldIgnoreInvalidEntityLevels() throws Exception {
        final String[] encodedGrants = {"|something|roleA|invalid|||||||||||||||"};
        assertThat(authorizationService.getGrants(encodedGrants)).isEmpty();
    }

    @Test
    public void getGrantsShouldIgnoreGrantsWithUnsupportedEntityLevel() throws Exception {
        final String[] encodedGrants = {"|districtGroupA|roleA|DISTRICT_GROUP|||||stateA||districtGroupA||||||||", "|schoolGroupA|roleA|INSTITUTION_GROUP|||||stateA||||districtA||schoolGroupA||||"};
        assertThat(authorizationService.getGrants(encodedGrants)).isEmpty();
    }

    @Test
    public void getGrantsShouldOnlyIncludeGrantsForTheSpecifiedState() throws Exception {
        final String[] encodedGrants = {"|stateA|roleA|STATE|||||stateA||||||||||", "|stateB|roleA|STATE|||||stateB||||||||||"};
        assertThat(authorizationService.getGrants(encodedGrants))
                .containsExactlyInAnyOrder(
                        Grant.builder().entityId(stateA).role("roleA").entityLevel(STATE).stateId(stateA).build()
                );
    }

    @Test
    public void getPermissionsShouldCorrectlyDerivePermissionsFromGrants() throws Exception {
        final List<Grant> grants = ImmutableList.of(
                Grant.builder().entityId("a").role("a").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("b").entityLevel(DISTRICT).stateId("a").districtId("a").build(),
                Grant.builder().entityId("a").role("c").entityLevel(INSTITUTION).stateId("a").districtId("a").institutionId("a").build(),
                Grant.builder().entityId("a").role("d").entityLevel(DISTRICT).stateId("a").districtId("a").build(),
                Grant.builder().entityId("a").role("d").entityLevel(INSTITUTION).stateId("a").districtId("a").institutionId("a").build()
        );

        assertThat(authorizationService.getPermissions(grants))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", new PermissionScope(null, null)),
                        new Permission("b", new PermissionScope(ImmutableSet.of(1L), null)),
                        new Permission("c", new PermissionScope(null, ImmutableSet.of(1L))),
                        new Permission("d", new PermissionScope(ImmutableSet.of(1L), ImmutableSet.of(1L))),
                        new Permission("f", new PermissionScope(ImmutableSet.of(1L), ImmutableSet.of(1L)))
                );
    }

    @Test
    public void getPermissionsShouldIgnoreOrganizationsForWhichThereIsNoEntityID() throws Exception {
        final List<Grant> grants = ImmutableList.of(
                Grant.builder().entityId("missing_school").role("a").entityLevel(INSTITUTION).stateId("a").districtId("2").institutionId("missing_school").build(),
                Grant.builder().entityId("missing_district").role("a").entityLevel(DISTRICT).stateId("a").districtId("missing_district").build()
        );

        assertThat(authorizationService.getPermissions(grants)).isEmpty();
    }

    @Test
    public void getPermissionsShouldAllowButIgnoreOrganizationsForWhichThereIsNoEntityID() throws Exception {
        final List<Grant> grants = ImmutableList.of(
                Grant.builder().entityId("a").role("a").entityLevel(INSTITUTION).stateId("a").districtId("2").institutionId("a").build(),
                Grant.builder().entityId("missing_district").role("a").entityLevel(DISTRICT).stateId("a").districtId("missing_district").build()
        );

        assertThat(authorizationService.getPermissions(grants))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", new PermissionScope(null, ImmutableSet.of(1L)))
                );
    }

    @Test
    public void getPermissionsShouldUnionPermissionScopesOfRepeatingPermissions() throws Exception {

        when(districtRepository.findAllIds(ImmutableSet.of("2", "4"))).thenReturn(ImmutableMap.of("2", 2L, "4", 4L));
        when(institutionRepository.findAllIds(ImmutableSet.of("1", "3"))).thenReturn(ImmutableMap.of("1", 1L, "3", 3L));

        final List<Grant> grants = ImmutableList.of(
                Grant.builder().entityId("1").role("a").entityLevel(INSTITUTION).stateId("a").districtId("2").institutionId("1").build(),
                Grant.builder().entityId("2").role("a").entityLevel(DISTRICT).stateId("a").districtId("2").build(),
                Grant.builder().entityId("3").role("a").entityLevel(INSTITUTION).stateId("a").districtId("4").institutionId("3").build(),
                Grant.builder().entityId("4").role("a").entityLevel(DISTRICT).stateId("a").districtId("4").build()
        );

        assertThat(authorizationService.getPermissions(grants))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", new PermissionScope(ImmutableSet.of(2L, 4L), ImmutableSet.of(1L, 3L)))
                );
    }

    @Test
    public void getPermissionsShouldProduceStateLevelPermissionScopeForUnionWithStateLevel() throws Exception {

        final List<Grant> grants = ImmutableList.of(
                Grant.builder().entityId("a").role("a").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("a").entityLevel(DISTRICT).stateId("a").districtId("a").build()
        );

        assertThat(authorizationService.getPermissions(grants))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new Permission("a", PermissionScope.STATEWIDE));
    }

    @Test
    public void getAuthoritiesShouldReturnAllDespiteEntityLevel() throws Exception {
        assertThat(authorizationService.getAuthorities(ImmutableList.of(
                Grant.builder().entityId("a").role("a").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("b").entityLevel(DISTRICT).stateId("a").districtId("a").build(),
                Grant.builder().entityId("a").role("c").entityLevel(INSTITUTION).stateId("a").districtId("a").institutionId("a").build()
        ))).containsExactlyInAnyOrder(
                new SimpleGrantedAuthority("ROLE_A"),
                new SimpleGrantedAuthority("PERM_A"),
                new SimpleGrantedAuthority("ROLE_B"),
                new SimpleGrantedAuthority("PERM_B"),
                new SimpleGrantedAuthority("ROLE_C"),
                new SimpleGrantedAuthority("PERM_C")
        );
    }

    @Test
    public void getAuthoritiesShouldIgnoreRolesNotProvidedByThePermissionService() throws Exception {
        assertThat(authorizationService.getAuthorities(ImmutableList.of(
                Grant.builder().entityId("a").role("z").entityLevel(STATE).stateId("a").build()
        ))).isEmpty();
    }

    @Test
    public void getAuthoritiesShouldNotFailIfThereAreNoPermissionsForAGivenRole() throws Exception {
        assertThat(authorizationService.getAuthorities(ImmutableList.of(
                Grant.builder().entityId("a").role("e").entityLevel(STATE).stateId("a").build()
        ))).containsExactlyInAnyOrder(
                new SimpleGrantedAuthority("ROLE_E")
        );
    }

    @Test
    public void getAuthoritiesShouldReturnAllStateLevelRolesAndPermissions() throws Exception {
        assertThat(authorizationService.getAuthorities(ImmutableList.of(
                Grant.builder().entityId("a").role("a").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("b").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("c").entityLevel(STATE).stateId("a").build(),
                Grant.builder().entityId("a").role("d").entityLevel(STATE).stateId("a").build()
        ))).containsExactlyInAnyOrder(
                new SimpleGrantedAuthority("ROLE_A"),
                new SimpleGrantedAuthority("PERM_A"),
                new SimpleGrantedAuthority("ROLE_B"),
                new SimpleGrantedAuthority("PERM_B"),
                new SimpleGrantedAuthority("ROLE_C"),
                new SimpleGrantedAuthority("PERM_C"),
                new SimpleGrantedAuthority("ROLE_D"),
                new SimpleGrantedAuthority("PERM_D"),
                new SimpleGrantedAuthority("PERM_F")
        );
    }

    @Test
    public void getGroupsByIdShouldReturnEmptyIfTheUserDoesNotHaveGroupPII() throws Exception {
        assertThat(authorizationService.getGroups(ImmutableSet.of(), "a")).isEmpty();
    }

    @Test
    public void getGroupsByIdShouldReturnAllOfTheGroupsAssociatedWithTheUsernameForUsersWithGroupPII() throws Exception {
        assertThat(authorizationService.getGroups(ImmutableSet.of(new Permission("GROUP_PII_READ", PermissionScope.STATEWIDE)), "a"))
                .containsExactlyInAnyOrder(new GroupGrant(1L, 1));
    }

}