package org.opentestsystem.rdw.reporting.security.session;

import org.junit.Before;
import org.junit.Test;
import org.opensaml.Configuration;
import org.opensaml.DefaultBootstrap;
import org.opensaml.saml2.core.Response;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.parse.BasicParserPool;
import org.springframework.mock.web.MockHttpServletRequest;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.servlet.http.HttpServletRequest;
import java.io.InputStream;

import static org.assertj.core.api.Assertions.assertThat;

public class SamlHttpSessionStorageTest {

    private SamlHttpSessionStorage storage;
    private HttpServletRequest request;

    @Before
    public void setup() {
        request = new MockHttpServletRequest();
        storage = new SamlHttpSessionStorage(request);
    }

    @Test
    public void itShouldStoreAndRetrieveALargeSamlResponse() throws Exception {
        final Response source = readResponseFromResource("/samlResponse.large.xml");
        storage.storeMessage("messageId", source);

        final Response retrieved = (Response) storage.retrieveMessage("messageId");
        assertThat(retrieved).isNotNull();
        assertThat(retrieved.getAssertions()).hasSameSizeAs(source.getAssertions());
        assertThat(retrieved.getOrderedChildren()).hasSameSizeAs(source.getOrderedChildren());
    }

    @Test
    public void itShouldListAllStoredMessages() throws Exception {
        final Response source = readResponseFromResource("/samlResponse.large.xml");
        storage.storeMessage("messageId", source);

        assertThat(storage.getAllMessages()).containsOnly("messageId");
    }

    private Response readResponseFromResource(final String resource) throws Exception {
        try (final InputStream is = this.getClass().getResourceAsStream(resource)) {
            DefaultBootstrap.bootstrap();
            final BasicParserPool pool = new BasicParserPool();
            pool.setNamespaceAware(true);
            final Document document = pool.parse(is);
            final Element root = document.getDocumentElement();

            final UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
            final Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(root);
            return (Response) unmarshaller.unmarshall(root);
        }
    }
}