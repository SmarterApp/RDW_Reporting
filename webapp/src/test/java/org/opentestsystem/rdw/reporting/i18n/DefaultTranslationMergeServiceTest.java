package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.i18n.TranslationProvider;

import java.util.Locale;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTranslationMergeServiceTest {

    private Set<TranslationProvider> providers;
    private ObjectMapper objectMapper;
    private DefaultTranslationMergeService mergeService;

    @Before
    public void setup() throws Exception {
        objectMapper = new ObjectMapper();

        final String providerAJson = "{\"parent\":{\"childA\":\"providerAValueA\",\"childB\":\"providerAValueB\"}}";
        final String providerBJson = "{\"parent\":{\"childB\":\"providerBValueB\",\"childC\":\"providerBValueC\"}}";
        providers = of(provider(10, providerBJson), provider(20, providerAJson));

        mergeService = new DefaultTranslationMergeService(providers, objectMapper);
    }

    @Test
    public void itShouldMergeMessageSourcesIntoJson() {
        final ObjectNode messages = mergeService.getLocaleMessages(Locale.forLanguageTag("es"));
        assertThat(messages).hasSize(1);

        final ObjectNode parentNode = (ObjectNode) messages.get("parent");
        assertThat(parentNode).hasSize(3);
        assertThat(parentNode.get("childA").asText()).isEqualTo("providerAValueA");
        assertThat(parentNode.get("childB").asText()).isEqualTo("providerAValueB");
        assertThat(parentNode.get("childC").asText()).isEqualTo("providerBValueC");
    }

    @Test
    public void itShouldRequestResourcesFromTheConfiguredLocation() {
        mergeService.getLocaleMessages(Locale.forLanguageTag("es"));

        for (final TranslationProvider provider : providers) {
            verify(provider).getMessages(Locale.forLanguageTag("es"));
        }
    }

    private TranslationProvider provider(final int order, final String content) throws Exception {
        final TranslationProvider provider = mock(TranslationProvider.class, "Order_" + order);
        when(provider.getOrder()).thenReturn(order);

        final ObjectNode value = (ObjectNode) objectMapper.readTree(content);
        when(provider.getMessages(any(Locale.class))).thenReturn(value);
        return provider;
    }
}