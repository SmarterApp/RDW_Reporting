package org.opentestsystem.rdw.reporting.report.group;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.report.ExamReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.security.GroupGrant;
import org.opentestsystem.rdw.reporting.report.ExamReportToken;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Locale;
import java.util.NoSuchElementException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(GroupExamReportController.class)
public class GroupExamReportControllerIT {

    private static final GroupExamReportRequest request = GroupExamReportRequest.builder()
            .groupGrant(new GroupGrant(1L, 2))
            .subject(Subject.MATH)
            .schoolYear(2)
            .assessmentType(ExamReportAssessmentType.ICA)
            .options(new PrintOptions(false))
            .language(new Locale("eng"))
            .build();

    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupExamReportService service;

    private User user = User.builder()
            .id("testUser")
            .groupsById(ImmutableMap.of(1L, new GroupGrant(1L, 1)))
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void getExamReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.queueExamReports(any(User.class), any(GroupExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(get("/api/groups/1/examReports?assessmentType=ICA&subject=MATH&schoolYear=2&language=eng&grayscale=false&order=STUDENT_NAME")
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getExamReportShouldReturnHandle() throws Exception {
        when(service.queueExamReports(any(User.class), any(GroupExamReportRequest.class)))
                .thenReturn(new ExamReportToken("handle"));

        mvc.perform(get("/api/groups/1/examReports?assessmentType=ICA&subject=MATH&schoolYear=2&language=eng&grayscale=false&order=STUDENT_NAME")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value("handle"));
    }

}