package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeExamRepository.class})
@Sql(scripts = {"classpath:school-grade-search-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeExamRepositoryIT {

    @Autowired
    private JdbcSchoolGradeExamRepository repository;

    @Test
    public void findAllForAssessmentShouldFindAll() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -10, -1, -1, 2017))
                .usingElementComparatorOnFields("id")
                .containsExactlyInAnyOrder(
                        Exam.builder().id(-1).build()
                );
    }

    @Test
    public void findAllForAssessmentForBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(
                new PermissionScope(null, ImmutableSet.of(-100L)), -10, -1, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -40, -1, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -30, -2, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentAssessmentShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -10, -1, -20, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -30, -1, -1, 2016)).isEmpty();
    }

}
