package org.opentestsystem.rdw.reporting.services.impl;

import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.reporting.model.AnswerKey;
import org.opentestsystem.rdw.reporting.model.ScoringCriterion;
import org.opentestsystem.rdw.reporting.repository.ArtifactRepository;
import org.opentestsystem.rdw.reporting.service.impl.DefaultExamItemService;

import javax.imageio.ImageIO;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultExamItemServiceTest {
    private DefaultExamItemService service;
    private final String simpleItemId = "187-2044";
    private final String imageItemId = "187-1889";
    private final String multiItemId = "187-2638";
    private final String noRubricItemId = "187-2661";

    @Before
    public void before() throws IOException {
        final ArtifactRepository repository = mock(ArtifactRepository.class);
        when(repository.getItemXml(anyString())).thenAnswer(new Answer<InputStream>() {
            @Override
            public InputStream answer(final InvocationOnMock invocation) throws Throwable {
                final String id = (String) invocation.getArguments()[0];
                return this.getClass().getResourceAsStream("/" + id + ".xml");
            }
        });
        when(repository.getArtifactFromItemDirectory(anyString(), anyString())).thenReturn(CreateMockImageInputStream());

        service = new DefaultExamItemService(repository);
    }

    @Test
    public void getScoringGuideShouldReturnRubricLoadedFromStringConstant() {
        ScoringCriterion rubrics = service.getScoringGuide(simpleItemId).getRubrics().get(0);

        assertThat(rubrics.getName()).isEqualTo("Rubric");
        assertThat(rubrics.getTemplate()).hasSize(1603);
    }

    @Test
    public void getScoringGuideShouldReturnsRubricWhenLoadedFromFileAndEncodeImages() {
        ScoringCriterion rubric = service.getScoringGuide(imageItemId).getRubrics().get(0);

        assertThat(rubric.getName()).isEqualTo(" Rubric");
        assertThat(rubric.getTemplate()).contains("src=\"data:image/png;base64,");
    }

    @Test
    public void getScoringGuideWithMultiplesShouldReturnAll() {
        List<ScoringCriterion> rubrics = service.getScoringGuide(multiItemId).getRubrics();
        assertThat(rubrics).hasSize(5);

        assertThat(rubrics.get(0).getName()).isEqualTo(" Rubric4");
        assertThat(rubrics.get(0).getScorepoint()).isEqualTo("4");

        assertThat(rubrics.get(1).getName()).isEqualTo(" Rubric3");
        assertThat(rubrics.get(1).getScorepoint()).isEqualTo("3");

        assertThat(rubrics.get(2).getName()).isEqualTo(" Rubric2");
        assertThat(rubrics.get(2).getScorepoint()).isEqualTo("2");

        assertThat(rubrics.get(3).getName()).isEqualTo(" Rubric1");
        assertThat(rubrics.get(3).getScorepoint()).isEqualTo("1");

        assertThat(rubrics.get(4).getName()).isEqualTo(" Rubric0");
        assertThat(rubrics.get(4).getScorepoint()).isEqualTo("0");
    }

    @Test
    public void getByIdSWithNoScoringCriteriaShouldReturnEmptyCollection() {
        List<ScoringCriterion> rubrics = service.getScoringGuide(noRubricItemId).getRubrics();
        assertThat(rubrics).isEmpty();
    }

    @Test(expected=RuntimeException.class)
    public void getScoringGuideFileNotFoundShouldThrowException() {
        service.getScoringGuide("11815-1515005");
    }

    @Test
    public void getScoringGuideShouldReturnExemplars() {
        List<ScoringCriterion> exemplars = service.getScoringGuide(multiItemId).getExemplars();
        assertThat(exemplars).hasSize(5);

        assertThat(exemplars.get(0).getTemplate()).isEqualTo("<p style=\"\"> </p>");
        assertThat(exemplars.get(0).getScorepoint()).isEqualTo("4");

        assertThat(exemplars.get(1).getTemplate()).isEqualTo("<p style=\"\"> </p>");
        assertThat(exemplars.get(1).getScorepoint()).isEqualTo("3");

        assertThat(exemplars.get(2).getTemplate()).isEqualTo("<p style=\"\"> </p>");
        assertThat(exemplars.get(2).getScorepoint()).isEqualTo("2");

        assertThat(exemplars.get(3).getTemplate()).isEqualTo("<p style=\"\"> </p>");
        assertThat(exemplars.get(3).getScorepoint()).isEqualTo("1");

        assertThat(exemplars.get(4).getTemplate()).isEqualTo("<p style=\"\"> </p>");
        assertThat(exemplars.get(4).getScorepoint()).isEqualTo("0");
    }

    @Test
    public void getScoringGuideShouldReturnAnswerKey() {
        AnswerKey answerKey = service.getScoringGuide(noRubricItemId).getAnswerKey();
        assertThat(answerKey.getValue()).isEqualTo("A,E,F");
    }

    @Test
    public void getScoringGuideShouldNotReturnAnswerKeyForItemTypeWER() {
        AnswerKey answerKey = service.getScoringGuide(multiItemId).getAnswerKey();
        assertThat(answerKey).isNull();
    }

    private InputStream CreateMockImageInputStream() throws IOException {
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
        Graphics graphics = image.createGraphics();
        graphics.drawRect(2, 2, 50, 50);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        ImageIO.write(image, "png", os);

        return new ByteArrayInputStream(os.toByteArray());
    }
}
