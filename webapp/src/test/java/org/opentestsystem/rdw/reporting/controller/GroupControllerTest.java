package org.opentestsystem.rdw.reporting.controller;

import java.util.List;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.group.Group;
import org.opentestsystem.rdw.reporting.group.GroupController;
import org.opentestsystem.rdw.reporting.security.User;
import org.opentestsystem.rdw.reporting.group.GroupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(GroupController.class)
@WithMockUser(username = "test")
public class GroupControllerTest {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupService groupService;

    @Test
    public void itShouldUseServiceToFindAll() throws Exception {
        final List<Group> groups = newArrayList();
        groups.add(Group.builder().name("group1").schoolName("school1").id(1).build());
        groups.add(Group.builder().name("group2").schoolName("school2").id(2).build());

        when(groupService.getGroups(any(User.class))).thenReturn(groups);
        mvc.perform(get("/api/groups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id", equalTo(1)))
                .andExpect(jsonPath("$[0].name", equalTo("group1")))
                .andExpect(jsonPath("$[0].schoolName", equalTo("school1")))
                .andExpect(jsonPath("$[1].id", equalTo(2)))
                .andExpect(jsonPath("$[1].name", equalTo("group2")))
                .andExpect(jsonPath("$[1].schoolName", equalTo("school2")));
    }
}