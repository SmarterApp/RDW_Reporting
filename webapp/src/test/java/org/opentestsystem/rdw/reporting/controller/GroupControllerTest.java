package org.opentestsystem.rdw.reporting.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.group.Group;
import org.opentestsystem.rdw.reporting.group.GroupController;
import org.opentestsystem.rdw.reporting.group.GroupService;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Sets.newHashSet;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(GroupController.class)
@WithMockUser(username = "test")
public class GroupControllerTest {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupService groupService;

    @Test
    public void itShouldUseServiceToFindAll() throws Exception {
        final Group group0 = Group.builder().id(1).name("group0").schoolName("school0").subjectId(0L).build();
        final Group group1 = Group.builder().id(2).name("group1").schoolName("school1").subjectId(1L).build();

        when(groupService.getGroups(any(User.class))).thenReturn(newHashSet(group0, group1));

        mvc.perform(get("/api/groups"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id", equalTo(group0.getId())))
                .andExpect(jsonPath("$[0].name", equalTo(group0.getName())))
                .andExpect(jsonPath("$[0].schoolName", equalTo(group0.getSchoolName())))
                .andExpect(jsonPath("$[0].subjectId", equalTo(group0.getSubjectId())))
                .andExpect(jsonPath("$[1].id", equalTo(group1.getId())))
                .andExpect(jsonPath("$[1].name", equalTo(group1.getName())))
                .andExpect(jsonPath("$[1].schoolName", equalTo(group1.getSchoolName())))
                .andExpect(jsonPath("$[1].subjectId", equalTo(group1.getSubjectId())));
    }
}