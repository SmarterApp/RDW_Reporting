package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.reporting.TestTenantPropertiesConfiguration;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Locale;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = TranslationController.class)
@Import(TestTenantPropertiesConfiguration.class)
public class TranslationControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private TranslationJsonService translationService;

    @MockBean
    private TenantProperties tenantProperties;

    @Before
    public void setup() throws Exception {
        final Tenant tenant = Tenant.builder()
            .key("CA")
            .id("CA")
            .name("California")
            .sandbox(false)
            .build();
        final String json = "{\"parent\":{\"childA\":\"valueA\",\"childB\":\"valueB\"}}";
        final ObjectNode translations = (ObjectNode) new ObjectMapper().readTree(json);
        when(translationService.getLocaleMessages(Locale.ENGLISH)).thenReturn(translations);
        when(translationService.getTenantDefaultLocaleMessages(Locale.ENGLISH)).thenReturn(translations);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.of("CA", tenant));
    }

    @Test
    public void itShouldUseServiceToGetTranslations() throws Exception {
        mvc.perform(get("/api/translations/en"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(1)))
                .andExpect(jsonPath("$.parent.*", hasSize(2)))
                .andExpect(jsonPath("$.parent.childA", equalTo("valueA")))
                .andExpect(jsonPath("$.parent.childB", equalTo("valueB")));

        verify(translationService).getLocaleMessages(Locale.ENGLISH);
    }

    @Test
    public void itShouldUseServiceToGetDefaultTranslationsForTenant() throws Exception {
        mvc.perform(get("/api/translations/tenantDefaults/en?tenantKey=CA"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.*", hasSize(1)))
            .andExpect(jsonPath("$.parent.*", hasSize(2)))
            .andExpect(jsonPath("$.parent.childA", equalTo("valueA")))
            .andExpect(jsonPath("$.parent.childB", equalTo("valueB")));

        verify(translationService).getTenantDefaultLocaleMessages(Locale.ENGLISH);
    }

    @Test
    public void itShouldErrorOnGetDefaultTranslationForUnknownTenant() throws Exception {
        mvc.perform(get("/api/translations/tenantDefaults/en?tenantKey=XX"))
            .andExpect(status().isBadRequest());
    }
}
