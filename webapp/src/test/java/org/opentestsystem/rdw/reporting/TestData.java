package org.opentestsystem.rdw.reporting;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.ScaleScore;
import org.opentestsystem.rdw.reporting.exam.StudentContext;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

public final class TestData {

    public static final List<Assessment> ASSESSMENTS = ImmutableList.of(
            Assessment.builder()
                    .id(-1L)
                    .type(AssessmentType.ICA)
                    .name("ica1")
                    .gradeId(-1)git
                    .schoolYear(2017)
                    .subject(Subject.MATH)
                    .cutPoints(newArrayList(10, 11, 12, 13, 14))
                    .claimCodes(newArrayList("ica_claim1", "ica_claim2", "ica_claim3", "ica_claim4"))
                    .build(),
            Assessment.builder()
                    .id(-2L)
                    .type(AssessmentType.IAB)
                    .name("iab1")
                    .gradeId(-1)
                    .schoolYear(2017)
                    .subject(Subject.MATH)
                    .cutPoints(newArrayList(20, 21, 22, 23, 24))
                    .claimCodes(null)
                    .build(),
            Assessment.builder()
                    .id(-3L)
                    .type(AssessmentType.SUMMATIVE)
                    .name("sum1")
                    .gradeId(-1)
                    .schoolYear(2017)
                    .subject(Subject.MATH)
                    .cutPoints(newArrayList(30, 31, 32, 33, 34))
                    .claimCodes(newArrayList("sum_claim1", "sum_claim2", "sum_claim3"))
                    .build()
    );

    public static final List<Exam> EXAMS = ImmutableList.of(
            Exam.builder()
                    .id(-1)
                    .assessmentId(-1L)
                    .sessionId("session1")
                    .dateTime(instant("2017-01-01"))
                    .opportunity(0L)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-1)
                            .iep(false)
                            .lep(false)
                            .section504(false)
                            .economicDisadvantage(false)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(1)
                    .completenessId(2)
                    .scaleScore(
                            ScaleScore.builder().level(1).value(2000).standardError(20).build()
                    )
                    .claimScaleScores(newArrayList(
                            ScaleScore.builder().level(1).value(100).standardError(10).build(),
                            ScaleScore.builder().level(2).value(200).standardError(20).build(),
                            ScaleScore.builder().level(3).value(300).standardError(30).build(),
                            ScaleScore.builder().level(4).value(400).standardError(40).build()
                    ))
                    .build(),
            Exam.builder()
                    .id(-2)
                    .assessmentId(-2L)
                    .sessionId("session2")
                    .dateTime(instant("2017-01-01"))
                    .opportunity(1L)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-2)
                            .iep(false)
                            .lep(false)
                            .section504(false)
                            .economicDisadvantage(false)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(1)
                    .completenessId(2)
                    .scaleScore(
                            ScaleScore.builder().level(2).value(2100).standardError(21).build()
                    )
                    .claimScaleScores(null)
                    .build(),
            Exam.builder()
                    .id(-3)
                    .assessmentId(-3L)
                    .sessionId("session3")
                    .dateTime(instant("2017-01-01"))
                    .opportunity(2L)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-3)
                            .iep(false)
                            .lep(false)
                            .section504(false)
                            .economicDisadvantage(false)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(1)
                    .completenessId(2)
                    .scaleScore(
                            ScaleScore.builder().level(3).value(2200).standardError(22).build()
                    )
                    .claimScaleScores(newArrayList(
                            ScaleScore.builder().level(1).value(1000).standardError(100).build(),
                            ScaleScore.builder().level(2).value(2000).standardError(200).build(),
                            ScaleScore.builder().level(3).value(3000).standardError(300).build()
                    ))
                    .build(),
            Exam.builder()
                    .id(-4)
                    .assessmentId(-3L)
                    .sessionId("session4")
                    .dateTime(instant("2017-01-02"))
                    .opportunity(3L)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-1)
                            .iep(false)
                            .lep(false)
                            .section504(false)
                            .economicDisadvantage(false)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(1)
                    .completenessId(2)
                    .scaleScore(
                            ScaleScore.builder().level(1).value(2300).standardError(23).build()
                    )
                    .claimScaleScores(newArrayList(
                            ScaleScore.builder().level(1).value(1100).standardError(110).build(),
                            ScaleScore.builder().level(2).value(2100).standardError(210).build(),
                            ScaleScore.builder().level(3).value(3100).standardError(310).build()
                    ))
                    .build(),
            Exam.builder()
                    .id(-5)
                    .assessmentId(-3L)
                    .sessionId("session5")
                    .dateTime(instant("2017-01-05"))
                    .opportunity(4L)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-1)
                            .iep(false)
                            .lep(false)
                            .section504(false)
                            .economicDisadvantage(false)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(1)
                    .completenessId(2)
                    .scaleScore(
                            ScaleScore.builder().level(2).value(2400).standardError(24).build()
                    )
                    .claimScaleScores(newArrayList(
                            ScaleScore.builder().level(1).value(1200).standardError(120).build(),
                            ScaleScore.builder().level(2).value(2200).standardError(220).build(),
                            ScaleScore.builder().level(3).value(3200).standardError(320).build()
                    ))
                    .build(),
            Exam.builder()
                    .id(-6)
                    .assessmentId(-3L)
                    .sessionId("session6")
                    .dateTime(instant("2017-01-03"))
                    .opportunity(null)
                    .studentContext(StudentContext.builder()
                            .schoolYear(2017)
                            .gradeId(-1)
                            .iep(true)
                            .lep(true)
                            .section504(true)
                            .economicDisadvantage(true)
                            .migrantStatus(null)
                            .build()
                    )
                    .administrativeConditionId(2)
                    .completenessId(1)
                    .scaleScore(null)
                    .claimScaleScores(newArrayList(null, null, null))
                    .build()
    );

    public static final ImmutableMap<Long, Assessment> ASSESSMENTS_BY_ID = Maps.uniqueIndex(ASSESSMENTS, Assessment::getId);
    public static final ImmutableMap<Long, Exam> EXAMS_BY_ID = Maps.uniqueIndex(EXAMS, Exam::getId);

    private static Instant instant(final String value) {
        return LocalDate.parse(value).atStartOfDay().toInstant(ZoneOffset.ofHours(-8));
    }


}
