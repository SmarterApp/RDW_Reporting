package org.opentestsystem.rdw.reporting.search.school;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(SchoolController.class)
@WithMockUser(username = "test")
public class SchoolControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SchoolService service;

    @Test
    public void getSchoolsShouldReturnEmptyWhenNoneFound() throws Exception {
        when(service.getSchoolsWithNameMatching(any(User.class), eq("text")))
                .thenReturn(ImmutableSet.of());

        mvc.perform(get("/api/schools?name=text"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(0)));
    }

    @Test
    public void getLatestShouldReturnLatestWhenFound() throws Exception {

        final Organization org1 = new Organization(1L, "org1");
        final Organization org2 = new Organization(2L, "org2");

        when(service.getSchoolsWithNameMatching(any(User.class), eq("text")))
                .thenReturn(ImmutableSet.of(org1, org2));

        mvc.perform(get("/api/schools?name=text"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[?(@.id==1)].id").value((int) org1.getId()))
                .andExpect(jsonPath("$[?(@.id==1)].name").value(org1.getName()))
                .andExpect(jsonPath("$[?(@.id==2)].id").value((int) org2.getId()))
                .andExpect(jsonPath("$[?(@.id==2)].name").value(org2.getName()));
    }

}