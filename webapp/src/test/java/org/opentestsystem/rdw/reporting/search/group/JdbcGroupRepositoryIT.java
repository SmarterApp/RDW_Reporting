package org.opentestsystem.rdw.reporting.search.group;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcGroupRepository.class, ITDataSourceConfiguration.class})
@Sql(scripts = {"groups.sql"})
@ActiveProfiles("test")
public class JdbcGroupRepositoryIT {

    @Autowired
    private JdbcGroupRepository repository;

    @Test
    public void itShouldFindAllGroups() {
        assertThat(repository.findAllForUsername("user-login", ImmutableSet.of(-10L, -20L)))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Group.builder().id(-10).name("IT Student Group 1").schoolName("Test School 1").subjectId(-1).build(),
                        Group.builder().id(-20).name("IT Student Group 2").schoolName("Test School 1").subjectId(-2).build()
                );
    }

    @Test
    public void itShouldCorrectNullSubjectToZero() {
        assertThat(repository.findAllForUsername("user-login-2", ImmutableSet.of(-30L)))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Group.builder().id(-30).name("IT Student Group 3").schoolName("Test School 1").subjectId(0).build()
                );
    }

    @Test
    public void itShouldFilterOutUnassignedGroupGrants() throws Exception {
        assertThat(repository.findAllForUsername("user-login", ImmutableSet.of())).isEmpty();
    }

    @Test
    public void itShouldFilterOutUnmatchedGroupGrants() throws Exception {
        assertThat(repository.findAllForUsername("user-login", ImmutableSet.of(-30L))).isEmpty();
    }

}