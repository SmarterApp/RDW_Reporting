package org.opentestsystem.rdw.reporting.services.impl;

import com.google.common.collect.Sets;
import java.util.Locale;
import java.util.Set;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.model.Translation;
import org.opentestsystem.rdw.reporting.repository.TranslationRepository;
import org.opentestsystem.rdw.reporting.service.TranslationService;
import org.opentestsystem.rdw.reporting.service.impl.TranslationServiceImpl;

import static java.util.stream.Collectors.toMap;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class TranslationServiceImplTest {

    private static final Set<Translation> englishTranslations = Sets.newHashSet(
            Translation.builder().withLocale(Locale.ENGLISH).withCode("a").withMessage("A").build(),
            Translation.builder().withLocale(Locale.ENGLISH).withCode("b").withMessage("B").build()
    );
    private static final Set<Translation> japaneseTranslations = Sets.newHashSet(
            Translation.builder().withLocale(Locale.JAPANESE).withCode("c").withMessage("C").build()
    );
    private Set<Translation> translations;
    private TranslationRepository repository;
    private TranslationService service;

    @Before
    public void before() {
        repository = mock(TranslationRepository.class);
        service = new TranslationServiceImpl(repository);
        translations = Sets.newHashSet();
        translations.addAll(englishTranslations);
        translations.addAll(japaneseTranslations);
        when(repository.getTranslations()).thenReturn(translations);
        when(repository.getTranslationsForLocale(Locale.ENGLISH)).thenReturn(englishTranslations);
        when(repository.getTranslationsForLocale(Locale.JAPANESE)).thenReturn(japaneseTranslations);
    }

    @Test
    public void getTranslationsReturnsAllTranslations() throws Exception {
        assertThat(service.getTranslations(), equalTo(translations));
    }

    @Test
    public void getTranslationsForLocaleEnglishReturnsJustEnglish() throws Exception {
        assertThat(service.getTranslationsForLocale(Locale.ENGLISH),
                equalTo(englishTranslations.stream().collect(toMap(Translation::getCode, Translation::getMessage))));
    }

    @Test
    public void getTranslationsForLocaleJapaneseReturnsJustJapanese() throws Exception {
        assertThat(service.getTranslationsForLocale(Locale.JAPANESE),
                equalTo(japaneseTranslations.stream().collect(toMap(Translation::getCode, Translation::getMessage))));
    }

}