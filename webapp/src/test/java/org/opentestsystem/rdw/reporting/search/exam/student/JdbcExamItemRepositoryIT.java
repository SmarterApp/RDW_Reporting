package org.opentestsystem.rdw.reporting.search.exam.student;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.ExamItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@Ignore("fiddling with connection issue; remove if you see this")
@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamItemRepositoryIT {

    @Autowired
    private JdbcExamItemRepository repository;

    @Test
    public void itShouldReturnAnEmptyListIfNoResultsFound() throws Exception {
        assertThat(repository.findAllByExamId(PermissionScope.STATEWIDE, 123L)).isEmpty();
    }

    @Test
    public void itShouldRetrieveExamItemsForStudentAndExam() throws Exception {
        assertThat(repository.findAllByExamId(PermissionScope.STATEWIDE, -1L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItem.builder()
                                .itemId(-1L)
                                .examId(-1L)
                                .points(0)
                                .position(1)
                                .response("A")
                                .build(),
                        ExamItem.builder()
                                .itemId(-2L)
                                .examId(-1L)
                                .points(1)
                                .position(2)
                                .response("D")
                                .build());
    }

}