package org.opentestsystem.rdw.reporting.security.sandbox;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.sql.ResultSet;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {
        ITDataSourceConfiguration.class,
        JdbcSandboxUserGroupRepository.class
})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSandboxUserGroupRepositoryIT {

    @Autowired
    private NamedParameterJdbcTemplate template;

    @Autowired
    private SandboxUserGroupRepository repository;

    @Test
    public void createShouldInsertRecordIfTheGroupIsPresent() throws Exception {
        repository.create("sandy", "school1 g1");

        assertThat(
                template.getJdbcOperations().query(
                        "select * from user_student_group",
                        (row, rowNumber) -> new UserStudentGroup(
                                row.getString("user_login"),
                                row.getLong("student_group_id")
                        )
                )
        ).usingRecursiveFieldByFieldElementComparator()
                .containsExactly(new UserStudentGroup("sandy", -10L));
    }

    @Test
    public void createShouldNotInsertRecordIfTheGroupIsAbsent() {
        repository.create("sandy", "not there");

        assertThat(
                template.getJdbcOperations().query(
                        "select * from user_student_group",
                        (row, rowNumber) -> row
                )
        ).isEmpty();
    }

    // used to capture results
    public class UserStudentGroup {
        public String userLogin;
        public Long studentGroupId;

        private UserStudentGroup(
                final String userLogin,
                final Long studentGroupId) {
            this.userLogin = userLogin;
            this.studentGroupId = studentGroupId;
        }
    }
}
