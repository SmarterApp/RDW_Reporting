package org.opentestsystem.rdw.reporting.report.client;

import com.amazonaws.util.StringInputStream;
import org.junit.Before;
import org.junit.Test;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.web.client.RestTemplate;

import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

public class DefaultReportWebServiceClientTest {

    private static final String baseURL = "http://url";
    private DefaultReportWebServiceClient client;
    private MockRestServiceServer server;

    @Before
    public void before() {
        final RestTemplate template = new RestTemplate();
        this.server = MockRestServiceServer.bindTo(template).build();
        this.client = new DefaultReportWebServiceClient(baseURL, template);
    }

    @Test(expected = RuntimeException.class)
    public void getReportsShouldThrowExceptionWhenRequestFails() {
        server.expect(requestTo(baseURL + "/api/reports?user=USER_ID"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withStatus(HttpStatus.INTERNAL_SERVER_ERROR));
        client.getReports("USER_ID");
    }

    @Test
    public void getReportsShouldHitCorrectEndpointAndSendCorrectParameters() {
        server.expect(requestTo(baseURL + "/api/reports?user=USER_ID"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("[{\"id\": 1}]", MediaType.APPLICATION_JSON));
        client.getReports("USER_ID");
        server.verify();
    }

    @Test(expected = RuntimeException.class)
    public void createReportShouldThrowExceptionWhenRequestFails() {
        server.expect(requestTo(baseURL + "/api/reports"))
                .andExpect(method(HttpMethod.POST))
                .andRespond(withStatus(HttpStatus.INTERNAL_SERVER_ERROR));
        client.createReport(null);
    }

    @Test
    public void createReportShouldHitCorrectEndpointAndSendCorrectParameters() {
        server.expect(requestTo(baseURL + "/api/reports"))
                .andExpect(method(HttpMethod.POST))
                .andRespond(withSuccess("{\"id\": 1}", MediaType.APPLICATION_JSON));
        client.createReport(null);
        server.verify();
    }

    @Test(expected = RuntimeException.class)
    public void getReportShouldThrowExceptionWhenRequestFails() {
        server.expect(requestTo(baseURL + "/api/reports/1/content"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withStatus(HttpStatus.INTERNAL_SERVER_ERROR));
        client.getReport(1);
    }

    @Test
    public void getReportShouldHitCorrectEndpointAndSendCorrectParameters() throws Exception {
        server.expect(requestTo(baseURL + "/api/reports/1/content"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess(new InputStreamResource(new StringInputStream("PDF?")), MediaType.APPLICATION_PDF));
        client.getReport(1);
        server.verify();
    }

}
