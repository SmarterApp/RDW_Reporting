package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcEthnicityRepository.class, ITDataSourceConfiguration.class})
@Sql(statements = {
        "INSERT INTO ethnicity (id, code) VALUES (-1, 'ethnicity_1');\n",
        "INSERT INTO ethnicity (id, code) VALUES (-2, 'ethnicity_2');\n",
        "INSERT INTO ethnicity (id, code) VALUES (-3, 'ethnicity_3');\n",
        "INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (-1, -1)",
        "INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (-1, -2)"
})
@ActiveProfiles("test")
public class JdbcEthnicityRepositoryIT {

    @Autowired
    private JdbcEthnicityRepository repository;

    @Test
    public void itShouldReturnEmptyForMissingStudent() throws Exception {
        assertThat(repository.findEthnicityCodesForStudentIds(ImmutableSet.of(1L))).isEmpty();
    }

    @Test
    public void itShouldReturnAllStudentEthnicities() throws Exception {
        final Collection<Long> studentIds = ImmutableSet.of(-1L);
        final Map<Long, List<String>> expected = ImmutableMap.of(-1L, ImmutableList.of("ethnicity_1", "ethnicity_2"));
        assertThat(repository.findEthnicityCodesForStudentIds(studentIds))
                .containsAllEntriesOf(expected);
    }

}