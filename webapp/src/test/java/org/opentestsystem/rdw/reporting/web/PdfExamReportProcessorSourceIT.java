package org.opentestsystem.rdw.reporting.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.export.PdfExamReportRequest;
import org.opentestsystem.rdw.reporting.common.export.PdfOptions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.messaging.Message;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Locale;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
@SpringBootTest
@DirtiesContext
public class PdfExamReportProcessorSourceIT {

    @Autowired
    private Source sourceChannel;

    @Autowired
    private MessageCollector messageCollector;

    private PdfExamReportProcessorSource source;

    @Before
    public void before() {
        source = new PdfExamReportProcessorSource(sourceChannel);
    }

    @Test
    @SuppressWarnings("unchecked")
    public void sendShouldSendRequest() {
        final PdfExamReportRequest expected = new PdfExamReportRequest(newArrayList(1L, 2L), Locale.JAPAN, new PdfOptions(true));
        source.send(expected);
        final Message<PdfExamReportRequest> actual = (Message<PdfExamReportRequest>) messageCollector.forChannel(sourceChannel.output()).poll();
        assertThat(actual.getPayload()).isEqualTo(expected);
    }

}
