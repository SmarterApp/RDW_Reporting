package org.opentestsystem.rdw.reporting.organization;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.organization.JdbcOrganizationRepository;
import org.opentestsystem.rdw.reporting.organization.model.Organization;
import org.opentestsystem.rdw.reporting.organization.model.School;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcOrganizationRepository.class})
@Sql(scripts = {"schools.sql"})
@ActiveProfiles("test")
public class JdbcOrganizationRepositoryIT {

    private final School school1 = new School(-10, "school1", new Organization(-10, "district1"));
    private final School school2 = new School(-20, "school2", new Organization(-10, "district1"));
    private final School school3 = new School(-30, "school3", new Organization(-20, "district2"));
    private final School school4 = new School(-40, "school4", new Organization(-20, "district2"));

    @Autowired
    private JdbcOrganizationRepository repository;


    @Test
    public void itShouldReturnAllSchoolsForStatewidePermissionScope() throws Exception {
        assertThat(repository.findAllSchools(statewide()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2, school3, school4);
    }

    @Test
    public void itShouldReturnOneDistrictsSchoolsForOneDistrictPermissionScope() throws Exception {
        assertThat(repository.findAllSchools(districts(-10L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2);
    }

    @Test
    public void itShouldReturnExactSchoolsForSchoolsPermissionScope() throws Exception {
        List<School> schools = repository.findAllSchools(schools(-40L));

        assertThat(schools)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school4);
    }

    @Test
    public void itShouldReturnEmptyForPermissionScopeWithMissingDistricts() throws Exception {
        assertThat(repository.findAllSchools(districts(-100L))).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyForPermissionScopeWithMissingSchools() throws Exception {
        assertThat(repository.findAllSchools(schools(-100L))).isEmpty();
    }

}
