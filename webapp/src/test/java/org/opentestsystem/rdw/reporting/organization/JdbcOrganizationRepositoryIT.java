package org.opentestsystem.rdw.reporting.organization;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcOrganizationRepository.class})
@Sql(scripts = {"schools.sql"})
@ActiveProfiles("test")
public class JdbcOrganizationRepositoryIT {

    // --- Schools ---
    private final School school1 = School.builder()
            .id(-10)
            .name("school1")
            .schoolGroupId(-10L)
            .districtId(-10)
            .districtGroupId(-50L)
            .build();

    private final School school2 = School.builder()
            .id(-20)
            .name("school2")
            .districtId(-10)
            .districtGroupId(-50L)
            .build();

    private final School school3 = School.builder()
            .id(-30)
            .name("school3")
            .schoolGroupId(-20L)
            .districtId(-20)
            .districtGroupId(-40L)
            .build();

    private final School school4 = School.builder()
            .id(-40)
            .name("school4")
            .schoolGroupId(-20L)
            .districtId(-20)
            .districtGroupId(-40L)
            .build();

    private final School school5 = School.builder()
            .id(-50)
            .name("school5")
            .districtId(-30)
            .build();

    // --- School Groups ---
    private final SchoolGroup schoolGroup1 = SchoolGroup.builder()
            .id(-10)
            .name("schoolGroup1")
            .districtId(-10)
            .districtGroupId(-50L)
            .build();

    private final SchoolGroup schoolGroup2 = SchoolGroup.builder()
            .id(-20)
            .name("schoolGroup2")
            .districtId(-20)
            .districtGroupId(-40L)
            .build();

    // --- Districts ---
    private final District district1 = District.builder()
            .id(-10)
            .name("district1")
            .districtGroupId(-50L)
            .build();

    private final District district2 = District.builder()
            .id(-20)
            .name("district2")
            .districtGroupId(-40L)
            .build();

    private final District district3 = District.builder()
            .id(-30)
            .name("district3")
            .build();

    // --- District Groups ---
    private final DistrictGroup districtGroup1 = new DistrictGroup(-40, "districtGroup1");
    private final DistrictGroup districtGroup2 = new DistrictGroup(-50, "districtGroup2");

    @Autowired
    private JdbcOrganizationRepository repository;

    // --- Schools ---
    @Test
    public void itShouldReturnAllSchoolsForStatewidePermissionScope() throws Exception {
        assertThat(repository.findAllSchools(statewide()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2, school3, school4, school5);
    }

    @Test
    public void itShouldReturnOneDistrictsSchoolsForOneDistrictPermissionScope() throws Exception {
        assertThat(repository.findAllSchools(districts(-10L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2);
    }

    @Test
    public void itShouldReturnExactSchoolsForSchoolsPermissionScope() throws Exception {
        final List<School> schools = repository.findAllSchools(schools(-40L));

        assertThat(schools)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school4);
    }

    @Test
    public void itShouldReturnEmptyForPermissionScopeWithMissingDistricts() throws Exception {
        assertThat(repository.findAllSchools(districts(-100L))).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyForPermissionScopeWithMissingSchools() throws Exception {
        assertThat(repository.findAllSchools(schools(-100L))).isEmpty();
    }

    // --- School Groups ---
    @Test
    public void itShouldReturnAllSchoolGroupsForStatewidePermissionScope() {
        assertThat(repository.findAllSchoolGroups(statewide()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(schoolGroup1, schoolGroup2);
    }

    @Test
    public void itShouldReturnOneSchoolGroupForOneDistrictPermissionScope() throws Exception {
        assertThat(repository.findAllSchoolGroups(districts(-10L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(schoolGroup1);
    }

    @Test
    public void itShouldReturnExactSchoolsGroupForSchoolsPermissionScope() throws Exception {
        final List<SchoolGroup> districts = repository.findAllSchoolGroups(schools(-40L));

        assertThat(districts)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(schoolGroup2);
    }

    @Test
    public void itShouldReturnEmptySchoolGroupsForPermissionScopeWithMissingDistricts() throws Exception {
        assertThat(repository.findAllSchoolGroups(districts(-100L))).isEmpty();
    }

    @Test
    public void itShouldReturnEmptySchoolGroupsForPermissionScopeWithMissingSchools() throws Exception {
        assertThat(repository.findAllSchoolGroups(schools(-100L))).isEmpty();
    }

    // --- Districts ---
    @Test
    public void itShouldReturnAllDistrictsForStatewidePermissionScope() throws Exception {
        assertThat(repository.findAllDistricts(statewide()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district1, district2, district3);
    }

    @Test
    public void itShouldReturnOneDistrictForOneDistrictPermissionScope() throws Exception {
        assertThat(repository.findAllDistricts(districts(-10L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district1);
    }

    @Test
    public void itShouldReturnExactSchoolsDistrictForSchoolsPermissionScope() throws Exception {
        final List<District> districts = repository.findAllDistricts(schools(-40L));

        assertThat(districts)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(district2);
    }

    @Test
    public void itShouldReturnEmptyDistrictsForPermissionScopeWithMissingDistricts() throws Exception {
        assertThat(repository.findAllDistricts(districts(-100L))).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyDistrictsForPermissionScopeWithMissingSchools() throws Exception {
        assertThat(repository.findAllDistricts(schools(-100L))).isEmpty();
    }


    // ---- District Groups
    @Test
    public void itShouldReturnAllDistrictGroupsForStatewidePermissionScope() {
        assertThat(repository.findAllDistrictGroups(statewide()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(districtGroup1, districtGroup2);
    }

    @Test
    public void itShouldReturnOneDistrictGroupForOneDistrictPermissionScope() throws Exception {
        assertThat(repository.findAllDistrictGroups(districts(-10L)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(districtGroup2);
    }

    @Test
    public void itShouldReturnExactDistrictsGroupForSchoolsPermissionScope() throws Exception {
        final List<DistrictGroup> districts = repository.findAllDistrictGroups(schools(-40L));

        assertThat(districts)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(districtGroup1);
    }

    @Test
    public void itShouldReturnEmptyDistrictGroupsForPermissionScopeWithMissingDistricts() throws Exception {
        assertThat(repository.findAllDistrictGroups(districts(-100L))).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyDistrictGroupsForPermissionScopeWithMissingSchools() throws Exception {
        assertThat(repository.findAllDistrictGroups(schools(-100L))).isEmpty();
    }
}
