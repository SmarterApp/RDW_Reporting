package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.i18n.CompositeTranslationProvider;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
public class TranslationProviderBackedTranslationJsonServiceTest {

    @Mock
    private CompositeTranslationProvider provider;

    private TranslationProviderBackedTranslationJsonService service;

    @Before
    public void setup() throws Exception {
        final Properties defaultProperties = PropertiesLoaderUtils.loadAllProperties("i18n/test_en.properties");
        final Map<String, String> defaultTranslations = defaultProperties.entrySet().stream()
            .collect(Collectors.toMap(entry -> entry.getKey().toString(), entry -> entry.getValue().toString()));
        when(provider.getTranslationsByCodeDefaultsOnly(any(Locale.class))).thenReturn(defaultTranslations);

        final Properties allProperties = PropertiesLoaderUtils.loadAllProperties("i18n/test_en.properties");
        allProperties.setProperty("report.student.grade.label", "Level:");
        final Map<String, String> allTranslations = allProperties.entrySet().stream()
                .collect(Collectors.toMap(entry -> entry.getKey().toString(), entry -> entry.getValue().toString()));
        when(provider.getTranslationsByCode(any(Locale.class))).thenReturn(allTranslations);

        service = new TranslationProviderBackedTranslationJsonService(provider);
    }

    @Test
    public void itShouldReturnTranslationsAsJson() {
        ObjectNode node = service.getLocaleMessages(Locale.US);
        assertThat(node).hasSize(1);

        node = (ObjectNode) node.get("report");
        assertThat(node).hasSize(3);
        assertThat(node.get("student")).hasSize(5);
        assertThat(node.get("enrollment-grade")).hasSize(4);
        assertThat(node.get("enrollment-grade").get("03").asText()).isEqualTo("3");
        assertThat(node.get("student").get("grade").get("label").asText()).isEqualTo("Level:");
    }

    @Test
    public void itShouldReturnDefaultTranslationsAsJson() {
        ObjectNode node = service.getTenantDefaultLocaleMessages(Locale.US);
        assertThat(node).hasSize(1);

        node = (ObjectNode) node.get("report");
        assertThat(node).hasSize(3);
        assertThat(node.get("student")).hasSize(5);
        assertThat(node.get("enrollment-grade")).hasSize(4);
        assertThat(node.get("enrollment-grade").get("03").asText()).isEqualTo("3");
        assertThat(node.get("student").get("grade").get("label").asText()).isEqualTo("Grade:");
    }
}
