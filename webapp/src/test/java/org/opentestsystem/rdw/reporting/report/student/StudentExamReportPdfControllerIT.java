package org.opentestsystem.rdw.reporting.report.student;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.report.ExamReportPdfMessage;
import org.opentestsystem.rdw.reporting.common.report.ExamReportPdfMessageConverter;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReport;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Locale;
import java.util.NoSuchElementException;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.refEq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(StudentExamReportPdfController.class)
@WithMockUser(username = "test")
public class StudentExamReportPdfControllerIT {

    private static final StudentExamReportPdfRequest request = StudentExamReportPdfRequest.builder()
            .studentId(1L)
            .subject(Subject.MATH)
            .schoolYear(2)
            .assessmentType(ExamReportAssessmentType.ICA)
            .options(new PrintOptions(false))
            .language(new Locale("eng"))
            .build();

    @Autowired
    private MockMvc mvc;

    @MockBean
    private User user;

    @MockBean
    private StudentExamReportPdfService service;

    @MockBean
    private ExamReportPdfMessageConverter converter;

    @Test
    public void getExamReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.getExamReport(any(User.class), any(StudentExamReportPdfRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(get("/api/students/1/examReport?assessmentType=ICA&subject=MATH&schoolYear=2&language=eng&grayscale=false"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getExamReportShouldReturnPdf() throws Exception {

        final IcaReport report = IcaReport.builder()
                .student(Student.builder()
                        .firstName("first")
                        .lastName("last")
                        .build()
                )
                .build();

        when(service.getExamReport(any(User.class), any(StudentExamReportPdfRequest.class)))
                .thenReturn(new ExamReportPdfMessage(report, request));

        mvc.perform(get("/api/students/1/examReport?assessmentType=ICA&subject=MATH&schoolYear=2&language=eng&grayscale=false"))
                .andExpect(status().isOk());
    }

}