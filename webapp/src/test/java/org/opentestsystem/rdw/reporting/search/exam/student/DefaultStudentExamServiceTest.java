package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultStudentExamServiceTest {

    @MockBean
    private User user;

    @MockBean
    private StudentRepository studentRepository;

    @MockBean
    private StudentExamRepository examRepository;

    private DefaultStudentExamService service;

    @Before
    public void before() {

        when(user.getPermissionsById())
                .thenReturn(ImmutableMap.of(
                        "GROUP_PII_READ", new Permission("GROUP_PII_READ", PermissionScope.STATEWIDE)
                ));

        this.service = new DefaultStudentExamService(studentRepository, examRepository);
    }

    @Test(expected = NoSuchElementException.class)
    public void getExamsShouldThrowExceptionWhenStudentNotFound() throws Exception {
        when(studentRepository.findOneById(123L)).thenReturn(null);
        service.getExams(user, 123L);
    }

    @Test(expected = NoSuchElementException.class)
    public void getExamsShouldThrowExceptionWhenStudentFoundButExamsNotFound() throws Exception {
        when(studentRepository.findOneById(123L)).thenReturn(Student.builder().id(1).build());
        when(examRepository.findAllForStudent(user.getPermissionsById(), user.getGroupsById().keySet(), 1)).thenReturn(ImmutableList.of());
        service.getExams(user, 123L);
    }

    @Test
    public void getExamsShouldReturnHistoryWhenStudentFoundWithExams() throws Exception {

        final Student student = Student.builder().id(1).build();
        final StudentHistoryExamWrapper wrapper1 = new StudentHistoryExamWrapper.Builder()
                .assessment(Assessment.builder().id(1).build())
                .exam(Exam.builder().id(2).build())
                .school(new Organization(3, "School A"))
                .build();
        final StudentHistoryExamWrapper wrapper2 = new StudentHistoryExamWrapper.Builder()
                .assessment(Assessment.builder().id(4).build())
                .exam(Exam.builder().id(5).build())
                .school(new Organization(6, "School B"))
                .build();

        final List<StudentHistoryExamWrapper> exams = ImmutableList.of(wrapper1, wrapper2);

        when(studentRepository.findOneById(123L)).thenReturn(student);
        when(examRepository.findAllForStudent(user.getPermissionsById(), user.getGroupsById().keySet(), 1)).thenReturn(exams);

        final StudentExamHistory actual = service.getExams(user, 123L);

        assertThat(actual).isNotNull();
        assertThat(actual.getStudent()).isEqualToComparingFieldByFieldRecursively(student);
        assertThat(actual.getExams().stream().map(w -> w.getExam().getId())).containsExactly(2L, 5L);
        assertThat(actual.getExams().stream().map(w -> w.getAssessment().getId())).containsExactly(1L, 4L);
    }

    @Test
    public void itShouldReturnAStudentWithExams() throws Exception {
        final Student student = Student.builder().id(1).build();
        when(examRepository.findStudentWithExams(user.getPermissionsById(), user.getGroupsById().keySet(), "a"))
                .thenReturn(student);

        assertThat(service.findStudentWithExams(user, "a")).isEqualTo(student);
    }



    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowIfStudentCannotBeFound() throws Exception {
        when(examRepository.findStudentWithExams(permissions(individualOf(PermissionScope.STATEWIDE)), user.getGroupsById().keySet(), "a"))
                .thenReturn(null);

        service.findStudentWithExams(user, "a");
    }

}