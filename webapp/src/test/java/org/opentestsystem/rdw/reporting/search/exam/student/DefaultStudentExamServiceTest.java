package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.security.Permission;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultStudentExamServiceTest {

    @MockBean
    private User user;

    @MockBean
    private StudentRepository studentRepository;

    @MockBean
    private StudentExamRepository examRepository;

    @MockBean
    private StudentAssessmentRepository assessmentRepository;

    private DefaultStudentExamService service;

    @Before
    public void before() {

        when(user.getPermissionsById())
                .thenReturn(ImmutableMap.of(
                        "INDIVIDUAL_PII_READ", new Permission("INDIVIDUAL_PII_READ", PermissionScope.STATEWIDE)
                ));

        this.service = new DefaultStudentExamService(studentRepository, examRepository, assessmentRepository);
    }

    @Test(expected = NoSuchElementException.class)
    public void getExamsShouldThrowExceptionWhenStudentNotFound() throws Exception {
        when(studentRepository.findOneBySsid("a")).thenReturn(null);
        service.getExams(user, "a");
    }

    @Test
    public void getExamsShouldReturnEmptyHistoryWhenStudentFoundButExamsNotFound() throws Exception {
        when(studentRepository.findOneBySsid("a")).thenReturn(Student.builder().id(1).build());
        when(examRepository.findAllForStudent(PermissionScope.STATEWIDE, 1)).thenReturn(ImmutableList.of());
        assertThat(service.getExams(user, "a"))
                .isEqualToComparingFieldByFieldRecursively(
                        new StudentExamHistory(
                                Student.builder().id(1).build(),
                                ImmutableList.of()
                        )
                );
    }

    @Test
    public void getExamsShouldReturnHistoryWhenStudentFoundWithExams() throws Exception {

        final Student student = Student.builder().id(1).build();
        final StudentHistoryExamWrapper wrapper1 = new StudentHistoryExamWrapper.Builder()
                .withAssessment(Assessment.builder().id(1).build())
                .withExam(Exam.builder().id(2).assessmentId(1L).build())
                .withSchool(new Organization(3, "School A"))
                .build();
        final StudentHistoryExamWrapper wrapper2 = new StudentHistoryExamWrapper.Builder()
                .withAssessment(Assessment.builder().id(4).build())
                .withExam(Exam.builder().id(5).assessmentId(4L).build())
                .withSchool(new Organization(6, "School B"))
                .build();

        final List<StudentHistoryExamWrapper> exams = ImmutableList.of(wrapper1, wrapper2);

        when(studentRepository.findOneBySsid("a")).thenReturn(student);
        when(examRepository.findAllForStudent(PermissionScope.STATEWIDE, 1)).thenReturn(exams);

        final StudentExamHistory actual = service.getExams(user, "a");

        assertThat(actual).isNotNull();
        assertThat(actual.getStudent()).isEqualToComparingFieldByFieldRecursively(student);
        assertThat(actual.getExams().stream().map(wrapper -> wrapper.getExam().getId()))
                .containsOnly(2L, 5L);
        assertThat(actual.getExams().stream().map(wrapper -> wrapper.getAssessment().getId()))
                .containsOnly(1L, 4L);

    }

    @Test
    public void itShouldReturnAStudentWithExams() throws Exception {
        final Student student = Student.builder().id(1).build();
        when(examRepository.findStudentWithExams(PermissionScope.STATEWIDE, "a"))
                .thenReturn(student);

        assertThat(service.findStudentWithExams(user, "a")).isEqualTo(student);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowIfStudentCannotBeFound() throws Exception {
        when(examRepository.findStudentWithExams(PermissionScope.STATEWIDE, "a"))
                .thenReturn(null);

        service.findStudentWithExams(user, "a");
    }

}