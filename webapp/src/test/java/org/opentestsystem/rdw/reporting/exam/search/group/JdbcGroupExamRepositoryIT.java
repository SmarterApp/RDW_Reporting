package org.opentestsystem.rdw.reporting.exam.search.group;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.security.GroupSecurityContexts.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupExamRepository.class})
@Sql(statements = {
        "INSERT INTO gender (id, code) VALUES (-1, 'g1');\n",
        "INSERT INTO district (id, natural_id, name) VALUES (-1, 'district1', 'district1');\n",
        "INSERT INTO school (id, district_id, natural_id, name, import_id) VALUES (-1, -1, 's1', 's1', -1);\n",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, gender_id, birthday, import_id) VALUES (-1, '-1', 'student1', 'student1', -1, '2017-01-01 00:00:00.000000', -1);\n",
        "INSERT INTO grade (id, code, name) VALUES (-1, 'g1', 'grade1');\n",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) VALUES (-1, 1, 'ica1', -1, 1, 2017, 'ica1', 'ica1', 'ica1', -1);\n",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) VALUES (-2, 2, 'iab1', -1, 1, 2017, 'iab1', 'iab1', 'iab1', -1);\n",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) VALUES (-3, 3, 'sum1', -1, 1, 2017, 'sum1', 'sum1', 'sum1', -1);\n",
        "INSERT INTO student_group (id, name, school_id, school_year, subject_id, import_id) VALUES (-1, 'group1', -1, 2017, 1, -1);\n",
        "INSERT INTO student_group_membership (student_group_id, student_id) VALUES (-1, -1);\n",
        "INSERT INTO exam (id, type_id, grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage," +
                "school_year, asmt_id, asmt_version, completeness_id, administration_condition_id, session_id," +
                "scale_score, scale_score_std_err, performance_level, completed_at, import_id," +
                "claim1_category, claim1_scale_score, claim1_scale_score_std_err," +
                "claim2_category, claim2_scale_score, claim2_scale_score_std_err," +
                "claim3_category, claim3_scale_score, claim3_scale_score_std_err," +
                "claim4_category, claim4_scale_score, claim4_scale_score_std_err) " +
                "VALUES (-1, 1, -1, -1, -1, 0, 0, 0, 0, 2017, -1, 'v1', 2, 1, 'session1', 2000, 20, 1, '2017-01-01 00:00:00.000000', -1," +
                "2, 2000, 20, 2, 2000, 20, 2, 2000, 20, 2, 2000, 20);",
        "INSERT INTO exam (id, type_id, grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage," +
                "school_year, asmt_id, asmt_version, completeness_id, administration_condition_id, session_id," +
                "scale_score, scale_score_std_err, performance_level, completed_at, import_id," +
                "claim1_category, claim1_scale_score, claim1_scale_score_std_err," +
                "claim2_category, claim2_scale_score, claim2_scale_score_std_err," +
                "claim3_category, claim3_scale_score, claim3_scale_score_std_err) " +
                "VALUES (-2, 3, -1, -1, -1, 0, 0, 0, 0, 2017, -2, 'v1', 2, 1, 'session1', 2000, 20, 1, '2017-01-01 00:00:00.000000', -1," +
                "2, 2000, 20, 2, 2000, 20, 2, 2000, 20);",
        "INSERT INTO exam (id, type_id, grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage," +
                "school_year, asmt_id, asmt_version, completeness_id, administration_condition_id, session_id," +
                "scale_score, scale_score_std_err, performance_level, completed_at, import_id) " +
                "VALUES (-3, 2, -1, -1, -1, 0, 0, 0, 0, 2017, -3, 'v1', 2, 1, 'session1', 2000, 20, 1, '2017-01-01 00:00:00.000000', -1);",
})
@ActiveProfiles("test")
public class JdbcGroupExamRepositoryIT {

    @Autowired
    private GroupExamRepository repository;

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAllAssessments(statewide(new GroupGrant(0L, 1L)), 2017)).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAllAssessments(statewide(new GroupGrant(-1L, 1L)), 2016)).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMismatchingSubject() throws Exception {
        assertThat(repository.findAllAssessments(statewide(new GroupGrant(-1L, 2L)), 2017)).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAllAssessments(statewide(new GroupGrant(-1L, 1L)), 2017))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Assessment.builder()
                                .id(-1L)
                                .type(AssessmentType.ICA)
                                .name("ica1")
                                .gradeId(-1L)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(ImmutableList.of(
                                        0L, 0L, 0L, 0L, 0L
                                ))
                                .build(),
                        Assessment.builder()
                                .id(-2L)
                                .type(AssessmentType.IAB)
                                .name("iab1")
                                .gradeId(-1L)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(null)
                                .build(),
                        Assessment.builder()
                                .id(-3L)
                                .type(AssessmentType.SUMMATIVE)
                                .name("sum1")
                                .gradeId(-1L)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(ImmutableList.of(
                                        0L, 0L, 0L, 0L, 0L
                                ))
                                .build()
                );
    }

}