package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.exam.AssessmentItem;
import org.opentestsystem.rdw.reporting.exam.ExamItemScore;
import org.opentestsystem.rdw.reporting.search.exam.GroupExamItemScores;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(SchoolGradeExamItemController.class)
@WithMockUser(username = "test")
public class SchoolGradeExamItemControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SchoolGradeExamItemService service;

    @Test
    public void getAllForAssessmentShouldReturnEmptyWhenNoResultsAreFound() throws Exception {
        when(service.getExamItemScores(any(User.class), eq(1L), eq(2), eq(3L), eq(4)))
                .thenReturn(new GroupExamItemScores(ImmutableList.of(), ImmutableList.of()));

        mvc.perform(get("/api/schools/1/assessmentGrades/2/assessments/3/examitems?schoolYear=4"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessmentItems", hasSize(0)))
                .andExpect(jsonPath("$.examItems", hasSize(0)));
    }

    @Test
    public void getAllForAssessmentShouldReturnAllAssessmentsWhenFound() throws Exception {

        final AssessmentItem assessmentItem = AssessmentItem.builder().id(900).build();
        final ExamItemScore examItem = ExamItemScore.builder().id(200).build();

        when(service.getExamItemScores(any(User.class), eq(1L), eq(2), eq(3L), eq(4)))
                .thenReturn(new GroupExamItemScores(ImmutableList.of(assessmentItem), ImmutableList.of(examItem)));

        mvc.perform(get("/api/schools/1/assessmentGrades/2/assessments/3/examitems?schoolYear=4"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessmentItems", hasSize(1)))
                .andExpect(jsonPath("$.assessmentItems[0].id").value(assessmentItem.getId()))
                .andExpect(jsonPath("$.examItems", hasSize(1)))
                .andExpect(jsonPath("$.examItems[0].id").value(examItem.getId()));
    }

}