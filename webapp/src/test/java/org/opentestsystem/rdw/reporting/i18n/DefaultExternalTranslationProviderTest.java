package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.UrlResource;

import java.util.Locale;

import static com.google.common.io.Resources.getResource;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultExternalTranslationProviderTest {

    @Mock
    private ResourceLoader resourceLoader;

    private DefaultExternalTranslationProvider provider;

    @Before
    public void setup() {
        final ObjectMapper objectMapper = new ObjectMapper();
        final ReportingSystemSettings tenantProperties = new ReportingSystemSettings();
        tenantProperties.setTranslationLocation("i18n/");

        when(resourceLoader.getResource(anyString()))
                .thenAnswer(invocation -> {
                    final String location = invocation.getArgument(0);
                    try {
                        return new UrlResource(getResource(location));
                    } catch (final Exception notFound) {
                        return new UrlResource("file://no/existing/file.json");
                    }
                });

        provider = new DefaultExternalTranslationProvider(tenantProperties, resourceLoader, objectMapper);
    }

    @Test
    public void itShouldProvideTranslations() {
        final ObjectNode messages = provider.getMessages(Locale.forLanguageTag("es"));

        assertThat(messages).hasSize(1);

        final ObjectNode parentNode = (ObjectNode) messages.get("parent");
        assertThat(parentNode).hasSize(2);
        assertThat(parentNode.get("childA").asText()).isEqualTo("childAJsonValue");
        assertThat(parentNode.get("childB").asText()).isEqualTo("childBJsonValue");
    }

    @Test
    public void itShouldHandleAMissingResource() {
        final ObjectNode messages = provider.getMessages(Locale.forLanguageTag("vi"));
        assertThat(messages).isEmpty();
    }
}