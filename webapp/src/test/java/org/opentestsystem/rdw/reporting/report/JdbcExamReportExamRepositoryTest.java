package org.opentestsystem.rdw.reporting.report;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.empty;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamReportExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamReportExamRepositoryTest {


    @Autowired
    private JdbcExamReportExamRepository repository;

    // existsForSchool tests

    @Test
    public void existsForSchoolShouldBeTrueForValidInput() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(statewide(), -10, -1, 2017)).isTrue();
    }

    @Test
    public void existsForSchoolShouldBeFalseForGoodSchoolPermissionScope() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(schools(-10L), -10, -1, 2017)).isTrue();
    }

    @Test
    public void existsForSchoolShouldBeFalseForGoodDistrictPermissionScope() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(districts(-10L), -10, -1, 2017)).isTrue();
    }

    @Test
    public void existsForSchoolShouldBeFalseForEmptyPermissionScope() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(empty(), -10, -1, 2017)).isFalse();
    }

    @Test
    public void existsForSchoolShouldBeFalseForBadSchoolPermissionScope() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(schools(0L), -10, -1, 2017)).isFalse();
    }

    @Test
    public void existsForSchoolShouldBeFalseForBadDistrictPermissionScope() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(districts(0L), -10, -1, 2017)).isFalse();
    }

    @Test
    public void existsForSchoolShouldBeFalseForBadSchool() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(statewide(), 0, -1, 2017)).isFalse();
    }

    @Test
    public void existsForSchoolShouldBeFalseForBadGrade() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(statewide(), -10L, 0, 2017)).isFalse();
    }

    @Test
    public void existsForSchoolShouldBeFalseForBadYear() throws Exception {
        assertThat(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(statewide(), -10L, -1, 0)).isFalse();
    }

    // existsForGroup tests

    @Test
    public void existsForGroupShouldBeTrueForValidInput() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(statewide(), -10, 1, 2017)).isTrue();
    }

    @Test
    public void existsForGroupShouldBeFalseForGoodSchoolPermissionScope() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(schools(-10L), -10, 1, 2017)).isTrue();
    }

    @Test
    public void existsForGroupShouldBeFalseForGoodDistrictPermissionScope() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(districts(-10L), -10, 1, 2017)).isTrue();
    }

    @Test
    public void existsForGroupShouldBeFalseForEmptyPermissionScope() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(empty(), -10, -1, 2017)).isFalse();
    }

    @Test
    public void existsForGroupShouldBeFalseForBadSchoolPermissionScope() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(schools(0L), -10, 1, 2017)).isFalse();
    }

    @Test
    public void existsForGroupShouldBeFalseForBadDistrictPermissionScope() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(districts(0L), -10, 1, 2017)).isFalse();
    }

    @Test
    public void existsForGroupShouldBeFalseForBadGroup() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(statewide(), 0, 1, 2017)).isFalse();
    }

    @Test
    public void existsForGroupShouldBeFalseForBadSubject() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(statewide(), -10L, -1, 2017)).isFalse();
    }

    @Test
    public void existsForGroupShouldBeFalseForBadYear() throws Exception {
        assertThat(repository.existsForGroupAndSchoolYear(statewide(), -10L, 1, 0)).isFalse();
    }

}