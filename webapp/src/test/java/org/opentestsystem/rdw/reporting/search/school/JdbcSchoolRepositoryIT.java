package org.opentestsystem.rdw.reporting.search.school;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.util.ReflectionTestUtils;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolRepositoryIT {

    private final Organization school1 = new Organization(-10, "school1");
    private final Organization school2 = new Organization(-20, "school2");
    private final Organization school3 = new Organization(-30, "school3");
    private final Organization school4 = new Organization(-40, "school4");

    @Autowired
    private JdbcSchoolRepository repository;

    @Test
    public void itShouldReturnEmptyForNameMismatch() throws Exception {
        assertThat(repository.findAllForNameContainingText(PermissionScope.STATEWIDE, "not-there")).isEmpty();
    }

    @Test
    public void itShouldReturnAllForPartiallyMatchingAllNames() throws Exception {
        assertThat(repository.findAllForNameContainingText(PermissionScope.STATEWIDE, "ool"))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2, school3, school4);
    }

    @Test
    public void itShouldReturnAllForPartiallyMatchingName() throws Exception {
        assertThat(repository.findAllForNameContainingText(PermissionScope.STATEWIDE, "ool1"))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1);
    }

    @Test
    public void itShouldReturnAllForExactMatchingName() throws Exception {
        assertThat(repository.findAllForNameContainingText(PermissionScope.STATEWIDE, "school1"))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1);
    }

    @Test
    public void itShouldReturnAllForExactMatchingNameIgnoringCase() throws Exception {
        assertThat(repository.findAllForNameContainingText(PermissionScope.STATEWIDE, "ScHoOL1"))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1);
    }

    @Test
    public void itShouldReturnEmptyForBadSchoolPermissions() throws Exception {
        assertThat(repository.findAllForNameContainingText(
                new PermissionScope(ImmutableSet.of(-100L), null), "school1")).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyForBadDistrictPermissions() throws Exception {
        assertThat(repository.findAllForNameContainingText(
                new PermissionScope(null, ImmutableSet.of(-100L)), "school1")).isEmpty();
    }

    @Test
    public void itShouldLimitResults() throws Exception {
        ReflectionTestUtils.setField(repository, "findAllForNameContainingTextLimit", 1);
        assertThat(repository.findAllForNameContainingText(
                PermissionScope.STATEWIDE, "school")).hasSize(1);
    }

}
