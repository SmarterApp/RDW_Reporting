package org.opentestsystem.rdw.reporting.report;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.GroupGrant;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.report.client.ReportWebServiceClient;
import org.opentestsystem.rdw.reporting.security.User;

import java.time.Instant;
import java.util.List;
import java.util.NoSuchElementException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

public class DefaultExamReportServiceTest {

    private PermissionScope permissivePermissionScope = statewide();
    private ReportWebServiceClient client;
    private ExamReportExamRepository repository;
    private DefaultExamReportService service;
    private Report report = Report.builder()
            .id(1L)
            .status(ReportStatus.RUNNING)
            .created(Instant.now())
            .label("label")
            .build();


    @Before
    public void before() {
        client = mock(ReportWebServiceClient.class);
        repository = mock(ExamReportExamRepository.class);
        service = new DefaultExamReportService(client, repository);
    }

    @Test(expected = NoSuchElementException.class)
    public void createSchoolGradeReportShouldThrowExceptionWhenThereRepositoryReturnsEmpty() throws Exception {

        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .schoolId(10)
                .gradeId(1)
                .schoolYear(2017)
                .build();

        when(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(
                permissivePermissionScope, request.getSchoolId(), request.getGradeId(), request.getSchoolYear()))
                .thenReturn(false);

        service.createReport(individualPiiUser(), request);
    }

    @Test
    public void createSchoolGradeReportShouldCallWebServiceClient() throws Exception {

        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .schoolId(10)
                .gradeId(1)
                .schoolYear(2017)
                .build();

        when(repository.existsForSchoolAndAssessmentGradeAndSchoolYear(
                permissivePermissionScope, request.getSchoolId(), request.getGradeId(), request.getSchoolYear()))
                .thenReturn(true);

        when(client.createReport(any(BatchExamReportRequestHolder.class))).thenReturn(report);

        assertThat(service.createReport(individualPiiUser(), request)).isEqualToComparingFieldByField(report);
    }

    @Test(expected = NoSuchElementException.class)
    public void createGroupReportShouldThrowExceptionWhenThereRepositoryReturnsEmpty() throws Exception {

        final GroupExamReportRequest request = GroupExamReportRequest.builder()
                .groupGrant(new GroupGrant(1, 1))
                .schoolYear(2017)
                .build();

        when(repository.existsForGroupAndSchoolYear(
                permissivePermissionScope, request.getGroupGrant().getId(), request.getGroupGrant().getSubjectId(), request.getSchoolYear()))
                .thenReturn(false);

        service.createReport(groupPiiUser(), request);
    }

    @Test
    public void createGroupReportShouldCallWebServiceClient() throws Exception {

        final GroupExamReportRequest request = GroupExamReportRequest.builder()
                .groupGrant(new GroupGrant(1, 1))
                .schoolYear(2017)
                .build();

        when(repository.existsForGroupAndSchoolYear(
                permissivePermissionScope, request.getGroupGrant().getId(), request.getGroupGrant().getSubjectId(), request.getSchoolYear()))
                .thenReturn(true);

        when(client.createReport(any(BatchExamReportRequestHolder.class))).thenReturn(report);

        assertThat(service.createReport(groupPiiUser(), request)).isEqualToComparingFieldByField(report);
    }

    @Test
    public void getReportsPassesCorrectParams() throws Exception {
        final User user = individualPiiUser();
        final List<Report> reports = newArrayList(report);
        when(client.getReports(user.getUsername())).thenReturn(reports);
        assertThat(service.getReports(user)).isEqualTo(reports);
    }

    private User individualPiiUser() {
        return User.builder()
                .id("user")
                .username("username")
                .permissionsById(permissions(individualOf(permissivePermissionScope)))
                .build();
    }

    private User groupPiiUser() {
        return User.builder()
                .id("user")
                .username("username")
                .permissionsById(permissions(groupOf(permissivePermissionScope)))
                .build();
    }

}