package org.opentestsystem.rdw.reporting.search.exam.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.ExamItemScore;
import org.opentestsystem.rdw.reporting.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.security.GroupSecurityContexts.statewide;


@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupExamItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcGroupExamItemRepositoryIT {

    @Autowired
    private JdbcGroupExamItemRepository repository;

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingAssessment() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                statewide(new GroupGrant(-1L, 1)), 0, 2017)).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingYear() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                statewide(new GroupGrant(-1L, 1)), -1, 2016)).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingGroup() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                statewide(new GroupGrant(0L, 1)), -1, 2017)).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingGroupSubject() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                statewide(new GroupGrant(-1L, 2)), -1, 2017)).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldReturnAllItems() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                statewide(new GroupGrant(-1L, 1)), -1, 2017))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItemScore.builder()
                                .id(-1)
                                .examId(-1)
                                .itemId(-1)
                                .points(0L)
                                .position(1)
                                .build(),
                        ExamItemScore.builder()
                                .id(-2)
                                .examId(-1)
                                .itemId(-2)
                                .points(1L)
                                .position(2)
                                .build()
                );
    }

}