package org.opentestsystem.rdw.reporting.exam;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentItemRepository.class})
@Sql(statements = {
        "INSERT INTO grade (id, code, name) VALUES (-1, 'g1', 'grade1');",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) " +
                "VALUES (-1, 1, 'ica1', -1, 1, 2017, 'ica1', 'ica1', 'ica1', -1);",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) " +
                "VALUES (-2, 2, 'iab1', -1, 1, 2017, 'iab1', 'iab1', 'iab1', -1);",
        "INSERT INTO asmt (id, type_id, natural_id, grade_id, subject_id, school_year, name, label, version, import_id) " +
                "VALUES (-3, 3, 'sum1', -1, 1, 2017, 'sum1', 'sum1', 'sum1', -1);",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-1, 1, 'c1', 'c1', 'c1');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (-1, -1, 't1', 't1');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (-2, -1, 't2', 't2');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (-3, -1, 't3', 't3');",
        "INSERT INTO math_practice (practice, description) VALUES (-1, 'mp1');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id, description, reference) VALUES (-1, 1, 1, 'dok1', 'dok1')",
        "INSERT INTO item (id, claim_id, claim_code, target_id, target_code, natural_id, asmt_id, math_practice, dok_id, difficulty_code, max_points) VALUES " +
                "(-1, -1,'claim', -1, 'target', 'i1', -1, -1, -1, 'E', 3),"+
                "(-2, -1,'claim', -2, 'target', 'i2', -1, -1, -1, 'D', 4)," +
                "(-3, -1,'claim', -3, 'target', 'i3', -1, -1, -1, 'M', 5);"
})
@ActiveProfiles("test")
public class JdbcAssessmentItemRepositoryIT {

    @Autowired
    private JdbcAssessmentItemRepository repository;

    @Test
    public void findAllForAssessmentShouldBeEmptyForMissingAssessment() throws Exception {
        assertThat(repository.findAllForAssessment(0L)).isEmpty();
    }

    @Test
    public void findAllForAssessmentShouldFindAllItems() throws Exception {
        assertThat(repository.findAllForAssessment(-1L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        AssessmentItem.builder()
                                .id(-1)
                                .claim("c1")
                                .target("t1")
                                .difficultyCode("E")
                                .maximumPoints(3)
                                .build(),
                        AssessmentItem.builder()
                                .id(-2)
                                .claim("c1")
                                .target("t2")
                                .difficultyCode("D")
                                .maximumPoints(4)
                                .build(),
                        AssessmentItem.builder()
                                .id(-3)
                                .claim("c1")
                                .target("t3")
                                .difficultyCode("M")
                                .maximumPoints(5)
                                .build()
                );
    }

}