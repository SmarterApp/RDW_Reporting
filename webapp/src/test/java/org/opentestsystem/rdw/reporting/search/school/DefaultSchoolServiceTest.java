package org.opentestsystem.rdw.reporting.search.school;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.security.Permission;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultSchoolServiceTest {

    @MockBean
    private SchoolRepository repository;

    @MockBean
    private User user;

    private DefaultSchoolService service;

    @Before
    public void before() {

        when(user.getPermissionsById())
                .thenReturn(ImmutableMap.of(
                        "PII_READ", new Permission("PII_READ", PermissionScope.STATEWIDE)
                ));

        this.service = new DefaultSchoolService(repository);
    }

    @Test
    public void itShouldTrimSearch() throws Exception {
        service.getSchoolsWithNameMatching(user, "   \t\ntext\t\n   ");
        verify(repository).findAllForNameContainingText(PermissionScope.STATEWIDE, "text");
    }

    @Test
    public void itShouldLowerCaseSearch() throws Exception {
        service.getSchoolsWithNameMatching(user, "TEXT");
        verify(repository).findAllForNameContainingText(PermissionScope.STATEWIDE, "text");
    }

    @Test
    public void itShouldNotSearchForNullSearch() throws Exception {
        service.getSchoolsWithNameMatching(user, null);
        verify(repository, times(0))
                .findAllForNameContainingText(any(PermissionScope.class), any(String.class));
    }

    @Test
    public void itShouldNotSearchForEmptySearch() throws Exception {
        service.getSchoolsWithNameMatching(user, "");
        verify(repository, times(0))
                .findAllForNameContainingText(any(PermissionScope.class), any(String.class));
    }

    @Test
    public void itShouldNotSearchForWhitespaceOnlySearch() throws Exception {
        service.getSchoolsWithNameMatching(user, "  \t\n    ");
        verify(repository, times(0))
                .findAllForNameContainingText(any(PermissionScope.class), any(String.class));
    }

    @Test
    public void itShouldForwardCorrectPermission() throws Exception {
        service.getSchoolsWithNameMatching(user, "text");
        verify(repository).findAllForNameContainingText(PermissionScope.STATEWIDE, "text");
    }

}
