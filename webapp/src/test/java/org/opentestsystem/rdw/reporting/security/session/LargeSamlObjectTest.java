package org.opentestsystem.rdw.reporting.security.session;

import org.junit.Test;
import org.opensaml.Configuration;
import org.opensaml.DefaultBootstrap;
import org.opensaml.saml2.core.Response;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.parse.BasicParserPool;
import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.InputStream;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * In production, there was a situation where a user had 400 role grants as part of their SAML configuration.
 * That produced a SAML response object that serialized to >64k causing an error. This test reproduces the
 * problem and validates the solution.<br/>
 */
public class LargeSamlObjectTest {

    @Test
    public void defaultCanSerializeALargeSAMLResponseValue() throws Exception {
        final JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();

        final Response response = readResponseFromResource("/samlResponse.large.xml");
        assertThat(response).isNotNull();

        final LargeSamlObject<Response> source = new LargeSamlObject<>(response);
        final byte[] data = serializer.serialize(source);
        assertThat(data.length).isGreaterThan(65535);

        final LargeSamlObject<Response> deserialized = (LargeSamlObject<Response>) serializer.deserialize(data);
        assertThat(deserialized).isEqualTo(source);
        assertThat(deserialized.getObject().getAssertions()).hasSameSizeAs(response.getAssertions());
        assertThat(deserialized.getObject().getOrderedChildren()).hasSameSizeAs(response.getOrderedChildren());
    }

    private Response readResponseFromResource(final String resource) throws Exception {
        try (final InputStream is = this.getClass().getResourceAsStream(resource)) {
            DefaultBootstrap.bootstrap();
            final BasicParserPool pool = new BasicParserPool();
            pool.setNamespaceAware(true);
            final Document document = pool.parse(is);
            final Element root = document.getDocumentElement();

            final UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
            final Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(root);
            return (Response) unmarshaller.unmarshall(root);
        }
    }
}
