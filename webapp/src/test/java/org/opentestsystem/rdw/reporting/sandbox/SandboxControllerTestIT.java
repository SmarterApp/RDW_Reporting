package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.DistrictAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.Teacher;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(value = SandboxController.class, secure = false)
public class SandboxControllerTestIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SandboxService service;

    @Test
    public void itShouldReturnSandboxData() throws Exception {
        final Sandbox sandbox = Sandbox.builder()
                .label("Sandy")
                .key("SA")
                .roles(newArrayList(
                        SandboxRole.builder()
                                .type(DistrictAdministrator)
                                .id("district admin")
                                .build(),
                        SandboxRole.builder()
                                .type(Teacher)
                                .id("teacher")
                                .gradeCode("03")
                                .build()
                ))
                .build();

        when(service.getSandboxes()).thenReturn(newArrayList(sandbox));

        mvc.perform(get("/api/sandboxes")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$.[0].key").value(sandbox.getKey()))
                .andExpect(jsonPath("$.[0].label").value(sandbox.getLabel()))
                .andExpect(jsonPath("$.[0].roles", hasSize(sandbox.getRoles().size())))
                .andExpect(jsonPath("$.[0].roles[0].id").value(sandbox.getRoles().get(0).getId()));
    }


}
