package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Set;

import static org.hamcrest.core.IsCollectionContaining.hasItem;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(value = SandboxController.class, secure = false)
public class SandboxControllerTestIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SandboxService service;

    @Test
    public void itShouldReturnSandboxData() throws  Exception{
        Set<Sandbox> sandboxes = DefaultSandboxService.getMockSandboxSet();
        when(service.getSandboxes()).thenReturn(sandboxes);

        mvc.perform(get("/api/sandboxes")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.[*].label").exists())
                .andExpect(jsonPath("$.[*].key").exists())
                .andExpect(jsonPath("$.[*].sandboxRoles").exists())
                .andExpect(jsonPath("$.[*].label", hasItem("California Sandbox")))
                .andExpect(jsonPath("$.[*].label", hasItem("Michigan Sandbox")));

        verify(service).getSandboxes();
    }


}