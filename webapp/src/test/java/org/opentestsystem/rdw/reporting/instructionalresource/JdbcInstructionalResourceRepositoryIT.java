package org.opentestsystem.rdw.reporting.instructionalresource;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;
import java.util.SortedSet;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.District;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.DistrictGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.SchoolGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.State;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.System;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcInstructionalResourceRepository.class})
@Sql(scripts = {
        "classpath:integration-test-data.sql",
        "classpath:instructional-resource-test-data.sql"
})
@ActiveProfiles("test")
public class JdbcInstructionalResourceRepositoryIT {

    private static final Map<Integer, InstructionalResource> SystemResources = ImmutableMap.<Integer, InstructionalResource>builder()
            .put(0, InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/assessment-wide")
                    .build())
            .put(1, InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/1")
                    .build())
            .put(2, InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/2")
                    .build())
            .put(3, InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/3")
                    .build())
            .put(4, InstructionalResource.builder()
                    .organizationLevel(System)
                    .resource("http://ica1/system/performance/4")
                    .build())
            .build();

    private static final Map<Integer, InstructionalResource> StateResources = ImmutableMap.<Integer, InstructionalResource>builder()
            .put(0, InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/assessment-wide")
                    .build())
            .put(1, InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/1")
                    .build())
            .put(2, InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/2")
                    .build())
            .put(3, InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/3")
                    .build())
            .put(4, InstructionalResource.builder()
                    .organizationLevel(State)
                    .resource("http://ica1/state/performance/4")
                    .build())
            .build();

    private static final Map<Integer, InstructionalResource> DistrictGroup1Resources = ImmutableMap.<Integer, InstructionalResource>builder()
            .put(0, InstructionalResource.builder()
                    .organizationLevel(DistrictGroup)
                    .resource("http://ica1/districtgroup1/assessment-wide")
                    .organizationName("districtGroup1")
                    .build())
            .build();

    private static final Map<Integer, InstructionalResource> District2Resources = ImmutableMap.<Integer, InstructionalResource>builder()
            .put(0, InstructionalResource.builder()
                    .organizationLevel(District)
                    .resource("http://ica1/district2/assessment-wide")
                    .organizationName("district2")
                    .build())
            .build();

    private static final Map<Integer, InstructionalResource> SchoolGroup1Resources = ImmutableMap.<Integer, InstructionalResource>builder()
            .put(0, InstructionalResource.builder()
                    .organizationLevel(SchoolGroup)
                    .resource("http://ica1/schoolgroup1/assessment-wide")
                    .organizationName("schoolGroup1")
                    .build())
            .build();

    @Autowired
    private JdbcInstructionalResourceRepository repository;

    @Test
    public void itShouldFetchInstructionalResourcesForTheSystemAndState() {
        final Map<Integer, SortedSet<InstructionalResource>> resources = repository.findByAssessmentAndSchool(-1, -10);
        assertThat(resources).hasSize(5);
        assertThat(resources.get(0))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(0), StateResources.get(0));
        assertThat(resources.get(1))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(1), StateResources.get(1));
        assertThat(resources.get(2))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(2), StateResources.get(2));
        assertThat(resources.get(3))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(3), StateResources.get(3));
        assertThat(resources.get(4))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(4), StateResources.get(4));
    }

    @Test
    public void itShouldIncludeDistrictGroupAndDistrictResources() {
        final Map<Integer, SortedSet<InstructionalResource>> resources = repository.findByAssessmentAndSchool(-1, -30);
        assertThat(resources).hasSize(5);

        assertThat(resources.get(0))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(0), StateResources.get(0), DistrictGroup1Resources.get(0), District2Resources.get(0));
    }

    @Test
    public void itShouldIncludeSchoolGroupResources() {
        final Map<Integer, SortedSet<InstructionalResource>> resources = repository.findByAssessmentAndSchool(-1, -20);
        assertThat(resources).hasSize(5);

        assertThat(resources.get(0))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(SystemResources.get(0), StateResources.get(0), SchoolGroup1Resources.get(0));
    }
}