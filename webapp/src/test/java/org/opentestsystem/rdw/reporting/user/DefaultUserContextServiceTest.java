package org.opentestsystem.rdw.reporting.user;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultUserContextServiceTest {

    @MockBean
    private User user;

    private DefaultUserContextService service;

    @Test
    public void itShouldReturnUserTraits() {
        final UserContext context = UserContext.builder()
                .firstName("first")
                .lastName("last")
                .permissions(newHashSet("INDIVIDUAL_PII_READ"))
                .build();

        when(user.getFirstName()).thenReturn(context.getFirstName());
        when(user.getLastName()).thenReturn(context.getLastName());
        when(user.getPermissionsById()).thenReturn(permissions(individualOf(PermissionScope.STATEWIDE)));

        service = new DefaultUserContextService();

        assertThat(service.getUserContext(user))
                .isEqualToComparingFieldByFieldRecursively(context);
    }

}