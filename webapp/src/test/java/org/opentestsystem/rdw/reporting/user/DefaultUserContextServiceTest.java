package org.opentestsystem.rdw.reporting.user;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.ReportingPermission;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.UserTenant;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultUserContextServiceTest {

    private DefaultUserContextService service = new DefaultUserContextService();

    @Test
    public void itShouldReturnUserContextForGivenUser() {

        final User user = User.builderExt()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(
                        permissions(individualOf(PermissionScope.STATEWIDE))
                )
                .firstName("first")
                .lastName("last")
                .tenant(UserTenant.builder()
                        .logoutUrl("/loggy")
                        .sessionRefreshUrl("/refresh")
                        .build())
                .build();

        final UserContext userContext = UserContext.builder()
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .permissions(newHashSet(ReportingPermission.IndividualPiiRead))
                .anonymous(false)
                .tenant(user.getTenant())
                .build();

        assertThat(service.getUserContext(user))
                .isEqualToComparingFieldByFieldRecursively(userContext);
    }

    @Test
    public void itShouldReturnAnonymousUserContextWhenGivenNull() {
        assertThat(service.getUserContext(null))
                .isEqualToComparingFieldByFieldRecursively(UserContext.Anonymous);
    }
}
