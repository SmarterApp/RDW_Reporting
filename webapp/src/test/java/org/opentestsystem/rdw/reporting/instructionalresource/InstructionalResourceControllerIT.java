package org.opentestsystem.rdw.reporting.instructionalresource;

import com.google.common.collect.MultimapBuilder;
import com.google.common.collect.Multimaps;
import com.google.common.collect.SortedSetMultimap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.HashMap;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.District;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.DistrictGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.SchoolGroup;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.State;
import static org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel.System;
import static org.opentestsystem.rdw.reporting.instructionalresource.JdbcInstructionalResourceRepository.IROrdering;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(InstructionalResourceController.class)
@WithMockUser(username = "test")
public class InstructionalResourceControllerIT {
    private static final long AssessmentId = 123;
    private static final long SchoolId = 456;

    @Autowired
    private MockMvc mvc;

    @MockBean
    private InstructionalResourceService service;

    @Test
    public void itShouldSendAnEmptyPayloadWhenNoResultsAreFound() throws Exception {
        when(service.findByAssessmentAndSchool(AssessmentId, SchoolId))
                .thenReturn(new HashMap<>());

        mvc.perform(get("/api/instructional-resources?assessmentId=123&schoolId=456"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(0)));
    }

    @Test
    public void itShouldReturnOrderedInstructionalResources() throws Exception {
        final SortedSetMultimap<Integer, InstructionalResource> resources = MultimapBuilder
                .hashKeys()
                .treeSetValues(IROrdering)
                .build();
        resources.put(0, InstructionalResource.builder()
                .resource("http://system/assessment-wide")
                .organizationLevel(System)
                .build());
        resources.put(0, InstructionalResource.builder()
                .resource("http://state/assessment-wide")
                .organizationLevel(State)
                .build());
        resources.put(0, InstructionalResource.builder()
                .resource("http://district-group/assessment-wide")
                .organizationLevel(DistrictGroup)
                .organizationName("District Group")
                .build());
        resources.put(0, InstructionalResource.builder()
                .resource("http://district/assessment-wide")
                .organizationLevel(District)
                .organizationName("District")
                .build());
        resources.put(0, InstructionalResource.builder()
                .resource("http://school-group/assessment-wide")
                .organizationLevel(SchoolGroup)
                .organizationName("School Group")
                .build());
        resources.put(3, InstructionalResource.builder()
                .resource("http://school-group/performance-level-3")
                .organizationLevel(SchoolGroup)
                .organizationName("School Group")
                .build());

        when(service.findByAssessmentAndSchool(AssessmentId, SchoolId))
                .thenReturn(Multimaps.asMap(resources));

        mvc.perform(get("/api/instructional-resources?assessmentId=123&schoolId=456"))
                .andExpect(status().isOk())
                .andDo(print())
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$.0", hasSize(5)))
                .andExpect(jsonPath("$.0[0].*", hasSize(2)))
                .andExpect(jsonPath("$.0[0].organizationLevel", equalTo("System")))
                .andExpect(jsonPath("$.0[0].resource", equalTo("http://system/assessment-wide")))
                .andExpect(jsonPath("$.0[4].organizationName", equalTo("School Group")))
                .andExpect(jsonPath("$.3", hasSize(1)))
                .andExpect(jsonPath("$.3[0].resource", equalTo("http://school-group/performance-level-3")));
    }
}