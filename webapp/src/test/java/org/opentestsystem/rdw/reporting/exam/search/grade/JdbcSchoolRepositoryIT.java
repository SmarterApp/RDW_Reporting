package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolRepository.class})
@Sql(scripts = "school-grade-search-data.sql")
@ActiveProfiles("test")
public class JdbcSchoolRepositoryIT {

    private final Organization school1 = new Organization(-10, "school1");
    private final Organization school2 = new Organization(-20, "school2");
    private final Organization school3 = new Organization(-30, "school3");
    private final Organization school4 = new Organization(-40, "school4");

    @Autowired
    private JdbcSchoolRepository repository;

    @Test
    public void findAllForMissingDistrictShouldReturnEmpty() throws Exception {
        assertThat(repository.findAllForDistrict(PermissionScope.STATEWIDE, -100L)).isEmpty();
    }

    @Test
    public void findAllForDistrictWithStatewidePermissionScopeShouldReturnAllSchoolsForDistrict() throws Exception {
        assertThat(repository.findAllForDistrict(PermissionScope.STATEWIDE, -10L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2);
    }

    @Test
    public void findAllForDistrictWithDistrictPermissionScopeShouldReturnSetDistricts() throws Exception {
        assertThat(repository.findAllForDistrict(new PermissionScope(ImmutableSet.of(-10L, -20L), null), -10L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school1, school2);
    }

    @Test
    public void findAllForDistrictWithMismatchingDistrictPermissionScopeShouldReturnEmpty() throws Exception {
        assertThat(repository.findAllForDistrict(new PermissionScope(ImmutableSet.of(-100L), null), -10L)).isEmpty();
    }

    @Test
    public void findAllForDistrictWithSchoolPermissionScopeShouldReturnSetSchools() throws Exception {
        assertThat(repository.findAllForDistrict(new PermissionScope(null, ImmutableSet.of(-30L)), -20L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(school3);
    }

    @Test
    public void findAllForDistrictWithMismatchingSchoolPermissionScopeShouldReturnEmpty() throws Exception {
        assertThat(repository.findAllForDistrict(new PermissionScope(null, ImmutableSet.of(-100L)), -20L)).isEmpty();
    }

}
