package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Optional;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(SchoolGradeExamController.class)
@WithMockUser(username = "test")
public class SchoolGradeExamControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SchoolGradeExamService service;

    @Test
    public void getLatestShouldSend404WhenNoResultsAreFound() throws Exception {
        when(service.getLatestAssessment(any(User.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(Optional.empty());

        mvc.perform(get("/api/schools/1/assessmentGrades/1/latestassessment?schoolYear=1"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getLatestShouldReturnLatestWhenFound() throws Exception {

        final GroupExam expected = new GroupExam(
                Assessment.builder().id(100).build(),
                ImmutableList.of(
                        Exam.builder().id(200).build()
                )
        );

        when(service.getLatestAssessment(any(User.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(Optional.of(expected));

        mvc.perform(get("/api/schools/1/assessmentGrades/1/latestassessment?schoolYear=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessment.id").value(expected.getAssessment().getId()))
                .andExpect(jsonPath("$.exams[0].id").value(expected.getExams().get(0).getId()));
    }

    @Test
    public void getAllShouldReturnEmptyWhenNoResultsAreFound() throws Exception {
        when(service.getAllAssessments(any(User.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(ImmutableList.of());

        mvc.perform(get("/api/schools/1/assessmentGrades/1/assessments?schoolYear=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(0)));
    }

    @Test
    public void getAllShouldReturnAllAssessmentsWhenFound() throws Exception {

        final Assessment assessment1 = Assessment.builder().id(100).build();
        final Assessment assessment2 = Assessment.builder().id(200).build();

        when(service.getAllAssessments(any(User.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(ImmutableList.of(assessment1, assessment2));

        mvc.perform(get("/api/schools/1/assessmentGrades/1/assessments?schoolYear=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].id").value(assessment1.getId()))
                .andExpect(jsonPath("$[1].id").value(assessment2.getId()));
    }

    @Test
    public void getAllForAssessmentShouldReturnEmptyWhenNoResultsAreFound() throws Exception {
        when(service.getExams(any(User.class), any(Long.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(ImmutableList.of());

        mvc.perform(get("/api/schools/1/assessmentGrades/1/assessments/1/exams?schoolYear=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(0)));
    }

    @Test
    public void getAllForAssessmentShouldReturnAllAssessmentsWhenFound() throws Exception {

        final Exam exam1 = Exam.builder().id(100).build();
        final Exam exam2 = Exam.builder().id(200).build();

        when(service.getExams(any(User.class), any(Long.class), any(Long.class), any(Long.class), any(Long.class)))
                .thenReturn(ImmutableList.of(exam1, exam2));

        mvc.perform(get("/api/schools/1/assessmentGrades/1/assessments/1/exams?schoolYear=1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].id").value(exam1.getId()))
                .andExpect(jsonPath("$[1].id").value(exam2.getId()));
    }

}