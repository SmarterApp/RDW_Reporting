package org.opentestsystem.rdw.reporting.search.assessment;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.AssessmentItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcAssessmentItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcAssessmentItemRepositoryIT {

    @Autowired
    private JdbcAssessmentItemRepository repository;

    @Test
    public void findAllForAssessmentShouldBeEmptyForMissingAssessment() throws Exception {
        assertThat(repository.findAllForAssessment(0L)).isEmpty();
    }

    @Test
    public void findAllForAssessmentShouldFindAllItems() throws Exception {
        List<AssessmentItem> actual = repository.findAllForAssessment(-1L);

        assertThat(actual)
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        AssessmentItem.builder()
                                .id(-1)
                                .bankItemKey("200-3391")
                                .claimCode("c1")
                                .targetId(-1)
                                .targetCode("t1")
                                .difficultyCode("E")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(3)
                                .commonCoreStandardIds(of("S-ID.1"))
                                .build(),
                        AssessmentItem.builder()
                                .id(-2)
                                .bankItemKey("200-3392")
                                .claimCode("c1")
                                .targetId(-2)
                                .targetCode("t2")
                                .difficultyCode("D")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(4)
                                .commonCoreStandardIds(of("S-ID.3"))
                                .build(),
                        AssessmentItem.builder()
                                .id(-3)
                                .bankItemKey("200-3393")
                                .claimCode("c1")
                                .targetId(-3)
                                .targetCode("t3")
                                .difficultyCode("M")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(5)
                                .commonCoreStandardIds(of("S-ID.4", "S-ID.7"))
                                .build()
                );
    }

    @Test
    public void itShouldFindAssessmentItemsByExam() throws Exception {
        assertThat(repository.findAllForExam(-1L))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        AssessmentItem.builder()
                                .id(-1)
                                .bankItemKey("200-3391")
                                .claimCode("c1")
                                .targetId(-1)
                                .targetCode("t1")
                                .difficultyCode("E")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(3)
                                .commonCoreStandardIds(of("S-ID.1"))
                                .build(),
                        AssessmentItem.builder()
                                .id(-2)
                                .bankItemKey("200-3392")
                                .claimCode("c1")
                                .targetId(-2)
                                .targetCode("t2")
                                .difficultyCode("D")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(4)
                                .commonCoreStandardIds(of("S-ID.3"))
                                .build(),
                        AssessmentItem.builder()
                                .id(-3)
                                .bankItemKey("200-3393")
                                .claimCode("c1")
                                .targetId(-3)
                                .targetCode("t3")
                                .difficultyCode("M")
                                .depthOfKnowledgeCode("-1_1")
                                .mathPracticeCode("-1")
                                .maximumPoints(5)
                                .commonCoreStandardIds(of("S-ID.4", "S-ID.7"))
                                .build()
                );
    }

    @Test
    public void itShouldReturnEmptyWhenFailingToFindAssessmentItemsByExam() throws Exception {
        assertThat(repository.findAllForExam(1234L)).isEmpty();
    }

}