package org.opentestsystem.rdw.reporting.iris;

import com.netflix.zuul.context.RequestContext;
import com.netflix.zuul.http.HttpServletRequestWrapper;
import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import java.io.InputStream;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;

public class IrisFormRequestPreFilterTest {

    private RequestContext requestContext;
    private IrisFormRequestPreFilter filter;
    private String jsonContent;
    private MockHttpServletRequest request;

    @Before
    public void setup() {
        filter = new IrisFormRequestPreFilter();

        jsonContent = "{\"some\":\"json\"}";
        request = new MockHttpServletRequest(RequestMethod.POST.name(), "/iris/Pages/API/content/load");
        request.setContentType("application/x-www-form-urlencoded; charset=UTF-8");
        request.setQueryString("id=vendorId");
        request.addParameter("id", "vendorId");
        request.addParameter(jsonContent, EMPTY);

        requestContext = new RequestContext();
        requestContext.setRequest(request);
        RequestContext.testSetCurrentContext(requestContext);
    }

    @After
    public void tearDown() {
        RequestContext.testSetCurrentContext(null);
    }

    @Test
    public void itShouldIgnoreNonIrisRequests() {
        request.setRequestURI("/somewhere/else");
        filter.run();
        assertThat(requestContext.getRequest()).isNotInstanceOf(IrisFormRequestPreFilter.IrisFormBodyRequestWrapper.class);
    }

    @Test
    public void itShouldHandleIrisRequests() {
        filter.run();
        assertThat(requestContext.getRequest()).isInstanceOf(IrisFormRequestPreFilter.IrisFormBodyRequestWrapper.class);
    }

    @Test
    public void itShouldDeReferenceAHttpServletRequestWrapper() {
        final HttpServletRequestWrapper wrapper = spy(new HttpServletRequestWrapper(request));
        requestContext.setRequest(wrapper);

        filter.run();
        verify(wrapper, never()).getParameterMap();
    }

    @Test
    public void itShouldProvideJsonAsContentInFinalRequest() throws Exception {
        filter.run();
        final HttpServletRequest request = requestContext.getRequest();
        try (final InputStream content = request.getInputStream()) {
            assertThat(IOUtils.toString(content, UTF_8)).isEqualTo(jsonContent);
        }
    }

    @Test
    public void itShouldCleanSpacesFromTheContentType() throws Exception {
        filter.run();
        final HttpServletRequest request = requestContext.getRequest();
        assertThat(request.getContentType()).doesNotContain(" ");
    }
}
