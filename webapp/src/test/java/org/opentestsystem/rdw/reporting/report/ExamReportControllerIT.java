package org.opentestsystem.rdw.reporting.report;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.ExamReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.report.ExamReportOrder;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.security.User;
import org.opentestsystem.rdw.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Locale;
import java.util.NoSuchElementException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ExamReportController.class)
public class ExamReportControllerIT {

    private static final StudentExamReportRequest studentRequest = StudentExamReportRequest.builder()
            .studentId(1L)
            .subject(Subject.MATH)
            .schoolYear(2)
            .assessmentType(ExamReportAssessmentType.ICA)
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final SchoolGradeExamReportRequest schoolGradeRequest = SchoolGradeExamReportRequest.builder()
            .schoolId(1L)
            .gradeId(2)
            .subject(Subject.MATH)
            .schoolYear(2)
            .assessmentType(ExamReportAssessmentType.ICA)
            .order(ExamReportOrder.STUDENT_NAME)
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final GroupExamReportRequest groupRequest = GroupExamReportRequest.builder()
            .groupGrant(new GroupGrant(1L, 2))
            .subject(Subject.MATH)
            .schoolYear(2)
            .assessmentType(ExamReportAssessmentType.ICA)
            .order(ExamReportOrder.STUDENT_NAME)
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final ObjectMapper mapper = new ObjectMapper();

    @Autowired
    private MockMvc mvc;

    @MockBean
    private DefaultExamReportService service;

    private User user = User.builder()
            .id("testUser")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void getStudentExamReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(StudentExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/api/students/1/report")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(studentRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getStudentExamReportShouldReturnHandle() throws Exception {

        when(service.createReport(any(User.class), any(StudentExamReportRequest.class)))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/api/students/1/report")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(studentRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));
    }

    @Test
    public void getSchoolGradeExamReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(SchoolGradeExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/api/schools/1/assessmentGrades/2/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(schoolGradeRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getSchoolGradeExamReportShouldReturnHandle() throws Exception {

        when(service.createReport(any(User.class), any(SchoolGradeExamReportRequest.class)))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/api/schools/1/assessmentGrades/2/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(schoolGradeRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));
    }

    @Test
    public void getGroupExamReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(GroupExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/api/groups/1/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(groupRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void getGroupExamReportShouldReturnHandle() throws Exception {
        when(service.createReport(any(User.class), any(GroupExamReportRequest.class)))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/api/groups/1/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(groupRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));
    }

}