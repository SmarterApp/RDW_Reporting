package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.exam.AssessmentItem;
import org.opentestsystem.rdw.reporting.exam.ExamItem;
import org.opentestsystem.rdw.reporting.search.assessment.AssessmentItemRepository;
import org.opentestsystem.rdw.reporting.search.exam.GroupExamItemScores;
import org.opentestsystem.rdw.reporting.security.Permission;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
public class ReportingExamItemServiceTest {

    @MockBean
    private User user;

    @MockBean
    private ExamItemRepository examItemRepository;

    @MockBean
    private AssessmentItemRepository assessmentItemRepository;

    private ReportingExamItemService service;

    @Before
    public void setup() {
        when(user.getPermissionsById())
                .thenReturn(ImmutableMap.of(
                        "GROUP_PII_READ", new Permission("GROUP_PII_READ", PermissionScope.STATEWIDE)
                ));
        service = new ReportingExamItemService(examItemRepository, assessmentItemRepository);
    }

    @Test
    public void itShouldFindExamItemsForStudentAndExam() {
        final long examId = 456L;

        final List<ExamItem> examItems = ImmutableList.of(
                mock(ExamItem.class),
                mock(ExamItem.class));
        when(examItemRepository.findAllByExamId(any(PermissionScope.class), eq(examId)))
                .thenReturn(examItems);

        final List<AssessmentItem> assessmentItems = ImmutableList.of(
                mock(AssessmentItem.class),
                mock(AssessmentItem.class));
        when(assessmentItemRepository.findAllForExam(examId)).thenReturn(assessmentItems);

        final GroupExamItemScores result = service.getExamItems(user, examId);
        assertThat(result.getAssessmentItems()).containsExactlyElementsOf(assessmentItems);
        assertThat(result.getExamItems()).containsExactlyElementsOf(examItems);
    }

}