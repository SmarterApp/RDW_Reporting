package org.opentestsystem.rdw.reporting.security.authority;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcPermissionRepository.class})
@ActiveProfiles("test")
public class JdbcPermissionRepositoryIT {
    @Autowired
    JdbcPermissionRepository repository;

    @Test
    public void itShouldFindAllRolesAndPermissions() {
        Map<String, Collection<String>> map = repository.findAll();
        assertThat(map).isNotEmpty();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void itShouldPreventAddingPermissions() {
        Map<String, Collection<String>> map = repository.findAll();
        map.put("NewPerm", Arrays.asList("perm1", "perm2"));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void itShouldPreventChangingPermissions() {
        Map<String, Collection<String>> map = repository.findAll();
        String key = map.keySet().stream().findFirst().get();
        map.get(key).add("anotherPerm");
    }
}
