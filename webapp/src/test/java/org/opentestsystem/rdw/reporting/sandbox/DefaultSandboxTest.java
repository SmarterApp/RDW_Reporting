package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.util.Optional;
import java.util.Set;
import static org.assertj.core.api.Assertions.assertThat;

import static org.mockito.Mockito.mock;


public class DefaultSandboxTest {

    private TenantProperties tenantProperties;
    private DefaultSandboxService service;

    @Before
    public void setup() {
        tenantProperties = mock(TenantProperties.class);
        service = new DefaultSandboxService(tenantProperties);
    }

    @Test
    public void itShouldGetSandboxes() {
        Set<Sandbox> expectedSandboxSet = DefaultSandboxService.getMockSandboxSet();
        Optional<Sandbox> expectedCaSandbox = getSandboxFromKey(expectedSandboxSet, "ca_19091");
        assertThat(expectedCaSandbox.isPresent()).isTrue();
        Optional<Role> expectedCaRole = getRoleFromKey(expectedCaSandbox.get().getRoles(), "teacher_harborside_g4");
        assertThat(expectedCaRole.isPresent()).isTrue();
        Optional<Sandbox> expectedMiSandbox = getSandboxFromKey(expectedSandboxSet, "mi_42582");
        assertThat(expectedMiSandbox.isPresent()).isTrue();
        Optional<Role> expectedMiRole = getRoleFromKey(expectedMiSandbox.get().getRoles(), "district_admin_detroit");
        assertThat(expectedMiRole.isPresent()).isTrue();

        Set<Sandbox> sandboxes = service.getSandboxes();
        assertThat(sandboxes).isNotNull().isNotEmpty();
        assertThat(sandboxes.size()).isEqualTo(2);

        Optional<Sandbox> caSandbox = getSandboxFromKey(sandboxes, "ca_19091");
        assertThat(caSandbox.isPresent()).isTrue();
        assertThat(caSandbox.get().getKey()).isEqualTo(expectedCaSandbox.get().getKey());
        assertThat(caSandbox.get().getLabel()).isEqualTo(expectedCaSandbox.get().getLabel());
        assertThat(caSandbox.get().getRoles().size()).isEqualTo(expectedCaSandbox.get().getRoles().size());

        Optional<Role> caRole = getRoleFromKey(caSandbox.get().getRoles(), "teacher_harborside_g4");
        assertThat(caRole.isPresent()).isTrue();
        assertThat(caRole.get().getId()).isEqualTo(expectedCaRole.get().getId());
        assertThat(caRole.get().getLabel()).isEqualTo(expectedCaRole.get().getLabel());

        Optional<Sandbox> miSandbox = getSandboxFromKey(sandboxes, "mi_42582");
        assertThat(miSandbox.isPresent()).isTrue();
        assertThat(miSandbox.get().getKey()).isEqualTo(expectedMiSandbox.get().getKey());
        assertThat(miSandbox.get().getLabel()).isEqualTo(expectedMiSandbox.get().getLabel());
        assertThat(miSandbox.get().getRoles().size()).isEqualTo(expectedMiSandbox.get().getRoles().size());

        Optional<Role> miRole = getRoleFromKey(miSandbox.get().getRoles(), "district_admin_detroit");
        assertThat(miRole.isPresent()).isTrue();
        assertThat(miRole.get().getId()).isEqualTo(expectedMiRole.get().getId());
        assertThat(miRole.get().getLabel()).isEqualTo(expectedMiRole.get().getLabel());
    }

    /**
     * @param sandboxes collection of sandboxes to search though
     * @param key the key to search for
     * @return Return the found Sandbox for key
     */
    private Optional<Sandbox> getSandboxFromKey(final Set<Sandbox> sandboxes, String key) {
        return sandboxes.stream()
                .filter(sandbox ->
                        sandbox.getKey().equals(key)
                ).findFirst();
    }

    /**
     *
     * @param roles collection of Roles to search through
     * @param id the id to search for
     * @return the found Role for each key
     */
    private Optional<Role> getRoleFromKey(final Set<Role> roles, String id) {
        return roles.stream()
                .filter(role ->
                        role.getId().equals(id)
                ).findFirst();
    }
}