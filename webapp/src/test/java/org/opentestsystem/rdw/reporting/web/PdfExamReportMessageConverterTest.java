package org.opentestsystem.rdw.reporting.web;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.ExamReport;
import org.opentestsystem.rdw.reporting.common.export.PdfExamReportRequest;
import org.opentestsystem.rdw.reporting.common.export.PdfExamReportResponse;
import org.opentestsystem.rdw.reporting.common.export.processor.PdfExamReportProcessor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.mock.http.MockHttpOutputMessage;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class PdfExamReportMessageConverterTest {

    private PdfExamReportMessageConverter converter;
    private PdfExamReportProcessor processor;

    @Before
    public void before() {
        processor = mock(PdfExamReportProcessor.class);
        converter = new PdfExamReportMessageConverter(processor);
    }

    @Test
    public void canWriteShouldBeTrueForPDFMediaType() throws Exception {
        assertThat(converter.canWrite(PdfExamReportResponse.class, MediaType.APPLICATION_PDF), is(true));
    }

    @Test
    public void canWriteShouldBeFalseForMediaTypesOtherThanPDF() throws Exception {
        assertThat(converter.canWrite(PdfExamReportResponse.class, MediaType.APPLICATION_JSON), is(false));
    }

    @Test
    public void supportsShouldAcceptPdfExamReportResponses() throws Exception {
        assertThat(converter.supports(PdfExamReportResponse.class), is(true));
        assertThat(converter.supports(String.class), is(false));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void readInternalShouldThrowException() throws Exception {
        converter.readInternal(null, null);
    }

    @Test
    public void writeInternalShouldInvokeProcessorAndWriteContentDispositionHeader() throws Exception {
        final byte[] expected = {0x11, 0x22};
        final PdfExamReportResponse model = new PdfExamReportResponse(null, null);
        final MockHttpOutputMessage message = new MockHttpOutputMessage();
        when(processor.process(any(ExamReport.class), any(PdfExamReportRequest.class), any(String.class))).thenReturn(expected);
        converter.writeInternal(model, message);
        assertThat(message.getBodyAsBytes(), is(expected));
        assertThat(message.getHeaders().getFirst(HttpHeaders.CONTENT_DISPOSITION), is("attachment; filename=report.pdf"));
    }

}