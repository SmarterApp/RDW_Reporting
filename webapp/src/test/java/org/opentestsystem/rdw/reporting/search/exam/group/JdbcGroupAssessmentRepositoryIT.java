package org.opentestsystem.rdw.reporting.search.exam.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.security.GroupGrant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.security.GroupSecurityContexts.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupAssessmentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcGroupAssessmentRepositoryIT {

    @Autowired
    private JdbcGroupAssessmentRepository repository;

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAll(statewide(new GroupGrant(0L, 1)), 2017)).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAll(statewide(new GroupGrant(-1L, 1)), 2016)).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMismatchingSubject() throws Exception {
        assertThat(repository.findAll(statewide(new GroupGrant(-1L, 2)), 2017)).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAll(statewide(new GroupGrant(-1L, 1)), 2017))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Assessment.builder()
                                .id(-1L)
                                .type(AssessmentType.ICA)
                                .name("ica1")
                                .gradeId(-1)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(newArrayList(
                                        0L, 0L, 0L, 0L, 0L
                                ))
                                .build(),
                        Assessment.builder()
                                .id(-2L)
                                .type(AssessmentType.IAB)
                                .name("iab1")
                                .gradeId(-1)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(newArrayList(
                                        0L, 0L, 0L
                                ))
                                .build(),
                        Assessment.builder()
                                .id(-3L)
                                .type(AssessmentType.SUMMATIVE)
                                .name("sum1")
                                .gradeId(-1)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(newArrayList(
                                        0L, 0L, 0L, 0L, 0L
                                ))
                                .build()
                );
    }

}