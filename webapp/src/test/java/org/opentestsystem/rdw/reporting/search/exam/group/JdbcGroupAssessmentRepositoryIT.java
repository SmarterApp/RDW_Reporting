package org.opentestsystem.rdw.reporting.search.exam.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.TestData;
import org.opentestsystem.rdw.reporting.common.security.GroupGrant;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcGroupAssessmentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcGroupAssessmentRepositoryIT {

    @Autowired
    private JdbcGroupAssessmentRepository repository;

    private GroupAssessmentSearch.Builder search() {
        return GroupAssessmentSearch.builder()
                .groupGrant(new GroupGrant(-10L, 1))
                .schoolYear(2017);
    }

    @Test
    public void findAllShouldFindNothingForMissingGroup() throws Exception {
        assertThat(repository.findAll(PermissionScope.STATEWIDE, search()
                .groupGrant(new GroupGrant(0, 1)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMissingYear() throws Exception {
        assertThat(repository.findAll(PermissionScope.STATEWIDE, search()
                .schoolYear(2016).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindNothingForMismatchingSubject() throws Exception {
        assertThat(repository.findAll(PermissionScope.STATEWIDE, search()
                .groupGrant(new GroupGrant(-10, 2)).build())).isEmpty();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAll(PermissionScope.STATEWIDE, search().build()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnlyElementsOf(TestData.ASSESSMENTS);
    }

}