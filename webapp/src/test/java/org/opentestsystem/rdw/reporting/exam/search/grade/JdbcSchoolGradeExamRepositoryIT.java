package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeExamRepository.class})
@Sql(scripts = {"school-grade-search-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeExamRepositoryIT {

    @Autowired
    private JdbcSchoolGradeExamRepository repository;

    @Test
    public void findLatestShouldFindTheLatestExam() throws Exception {
        final GroupExam actual = repository.findLatest(PermissionScope.STATEWIDE, -30, -1, 2017);
        assertThat(actual).isNotNull();
        assertThat(actual.getAssessment().getId()).isEqualTo(-3);
    }

    @Test
    public void findLatestOfBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(
                new PermissionScope(null, ImmutableSet.of(-100L)), -30, -1, 2017)).isNull();
    }

    @Test
    public void findLatestOfBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -40, -1, 2017)).isNull();
    }

    @Test
    public void findLatestOfBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -30, -2, 2017)).isNull();
    }

    @Test
    public void findLatestOfAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findLatest(PermissionScope.STATEWIDE, -30, -1, 2016)).isNull();
    }

    @Test
    public void findAllShouldFindAll() throws Exception {
        assertThat(repository.findAllAssessments(PermissionScope.STATEWIDE, -10, -1, 2017))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        Assessment.builder()
                                .id(-1L)
                                .type(AssessmentType.ICA)
                                .name("ica1")
                                .gradeId(-1L)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(ImmutableList.of(
                                        0L, 0L, 0L, 0L, 0L
                                ))
                                .build(),
                        Assessment.builder()
                                .id(-2L)
                                .type(AssessmentType.IAB)
                                .name("iab1")
                                .gradeId(-1L)
                                .schoolYear(2017)
                                .subject(Subject.MATH)
                                .cutPoints(null)
                                .build()
                );
    }

    @Test
    public void findAllForBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findAllAssessments(
                new PermissionScope(null, ImmutableSet.of(-100L)), -10, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findAllAssessments(PermissionScope.STATEWIDE, -40, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findAllAssessments(PermissionScope.STATEWIDE, -30, -2, 2017)).isEmpty();
    }

    @Test
    public void findAllForAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findAllAssessments(PermissionScope.STATEWIDE, -30, -1, 2016)).isEmpty();
    }

    @Test
    public void findAllForAssessmentShouldFindAll() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -10, -1, -1, 2017))
                .usingElementComparatorOnFields("id")
                .containsExactlyInAnyOrder(
                        Exam.builder().id(-1).build()
                );
    }

    @Test
    public void findAllForAssessmentForBadPermissionsShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(
                new PermissionScope(null, ImmutableSet.of(-100L)), -10, -1, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -40, -1, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForBadSchoolGradeShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -30, -2, -1, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentAssessmentShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -10, -1, -20, 2017)).isEmpty();
    }

    @Test
    public void findAllForAssessmentForAbsentYearShouldFindNothing() throws Exception {
        assertThat(repository.findAllForAssessment(PermissionScope.STATEWIDE, -30, -1, -1, 2016)).isEmpty();
    }

}
