package org.opentestsystem.rdw.reporting.sandbox;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.reporting.sandbox.repository.SandboxRoleRepository;
import org.opentestsystem.rdw.reporting.sandbox.service.impl.DefaultSandboxService;

import java.util.*;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class DefaultSandboxServiceTest {

    private TenantProperties mockTenantProperties;
    private SandboxRoleRepository mockRoleRepository;
    private DefaultSandboxService service;

    @Before
    public void setup() {
        mockTenantProperties = mock(TenantProperties.class);
        mockRoleRepository = mock(SandboxRoleRepository.class);
        service = new DefaultSandboxService(mockTenantProperties, mockRoleRepository);
    }

    @Test
    public void itShouldGetSandboxes() {
        when(mockTenantProperties.getTenants()).thenReturn(getMockTenants());
        when(mockRoleRepository.findAll())
                .thenReturn(getMockSandboxRolesCa())
                .thenReturn(getMockSandboxRolesMi());
        Set<Sandbox> expectedSandboxSet = getMockSandboxSet();
        Optional<Sandbox> expectedCaSandbox = getSandboxFromKey(expectedSandboxSet, "ca_19091");
        Optional<SandboxRole> expectedCaRole = getRoleFromKey(expectedCaSandbox.get().getRoles(), "teacher_harborside_g4");
        Optional<Sandbox> expectedMiSandbox = getSandboxFromKey(expectedSandboxSet, "mi_42582");
        Optional<SandboxRole> expectedMiRole = getRoleFromKey(expectedMiSandbox.get().getRoles(), "district_admin_detroit");

        Set<Sandbox> sandboxes = service.getSandboxes();
        assertThat(sandboxes).isNotNull().isNotEmpty();
        assertThat(sandboxes.size()).isEqualTo(2);

        Optional<Sandbox> caSandbox = getSandboxFromKey(sandboxes, "ca_19091");
        assertThat(caSandbox.isPresent()).isTrue();
        assertThat(caSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedCaSandbox.get());

        List<SandboxRole> caRoles = caSandbox.get().getRoles();
        assertThat(caRoles).hasSameSizeAs(getMockSandboxRolesCa());
        assertThat(caRoles.get(0).getId()).isEqualTo(getMockSandboxRolesCa().get(0).getId());

        Optional<SandboxRole> caRole = getRoleFromKey(caSandbox.get().getRoles(), "teacher_harborside_g4");
        assertThat(caRole.isPresent()).isTrue();
        assertThat(caRole.get()).isEqualToComparingFieldByField(expectedCaRole.get());

        Optional<Sandbox> miSandbox = getSandboxFromKey(sandboxes, "mi_42582");
        assertThat(miSandbox.isPresent()).isTrue();
        assertThat(miSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedMiSandbox.get());

        Optional<SandboxRole> miRole = getRoleFromKey(miSandbox.get().getRoles(), "district_admin_detroit");
        assertThat(miRole.isPresent()).isTrue();
        assertThat(miRole.get()).isEqualToComparingFieldByField(expectedMiRole.get());
    }

    /**
     * @param sandboxes collection of sandboxes to search though
     * @param key the key to search for
     * @return Return the found Sandbox for key
     */
    private Optional<Sandbox> getSandboxFromKey(final Set<Sandbox> sandboxes, String key) {
        return sandboxes.stream()
                .filter(sandbox ->
                        sandbox.getKey().equals(key)
                ).findFirst();
    }

    /**
     *
     * @param sandboxRoles collection of Roles to search through
     * @param id the id to search for
     * @return the found SandboxRole for each key
     */
    private Optional<SandboxRole> getRoleFromKey(final List<SandboxRole> sandboxRoles, String id) {
        return sandboxRoles.stream()
                .filter(sandboxRole ->
                        sandboxRole.getId().equals(id)
                ).findFirst();
    }

    private static Map<String, Tenant> getMockTenants() {
        Tenant mockSandbox1 = Tenant.builder()
                .id("ca_19091")
                .key("ca_19091")
                .name("California Sandbox")
                .sandbox(true)
                .build();
        Tenant mockSandbox2 = Tenant.builder()
                .id("mi_42582")
                .key("mi_42582")
                .name("Michigan Sandbox")
                .sandbox(true)
                .build();
        return ImmutableMap.of(
                "ca_19091", mockSandbox1,
                "mi_42582", mockSandbox2);
    }

    private static List<SandboxRole> getMockSandboxRolesCa() {
        return getMockSandboxSet().stream()
                .filter(sandbox -> sandbox.getKey().equals("ca_19091"))
                .findFirst()
                .get()
                .getRoles();

    }

    private static List<SandboxRole> getMockSandboxRolesMi() {
        return getMockSandboxSet().stream()
                .filter(sandbox -> sandbox.getKey().equals("mi_42582"))
                .findFirst()
                .get()
                .getRoles();
    }

    /**
     * @return temp collection of sandboxes that is required for sandbox login
     */
    static Set<Sandbox> getMockSandboxSet() {
        SandboxRole caSandboxRole_thg4 = SandboxRole.builder()
                .id("teacher_harborside_g4")
                .label("Teacher - Harborside - Grade 4")
                .build();
        SandboxRole caSandboxRole_thg5 = SandboxRole.builder()
                .id("teacher_harborside_g5")
                .label("Teacher - Harborside - Grade 5")
                .build();
        SandboxRole caSandboxRole_thg6 = SandboxRole.builder()
                .id("teacher_harborside_g6")
                .label("Teacher - Harborside - Grade 6")
                .build();
        SandboxRole caSandboxRole_da_sw = SandboxRole.builder()
                .id("district_admin_sweetwater")
                .label("District Administrator - Sweetwater")
                .build();
        SandboxRole caSandboxRole_da_h = SandboxRole.builder()
                .id("district_admin_harborside")
                .label("District Administrator - Harborside")
                .build();

        Set<Sandbox> sandboxes = new HashSet<>();
        Sandbox sandboxCa = Sandbox.builder()
                .key("ca_19091")
                .label("California Sandbox")
                .roles(newArrayList(
                        caSandboxRole_thg4,
                        caSandboxRole_thg5,
                        caSandboxRole_thg6,
                        caSandboxRole_da_sw,
                        caSandboxRole_da_h))
                .build();
        sandboxes.add(sandboxCa);

        SandboxRole miSandboxRole_tg6 = SandboxRole.builder()
                .id("teacher_rosebank_g6")
                .label("Teacher - Rosebank - Grade 6")
                .build();
        SandboxRole miSandboxRole_tg7 = SandboxRole.builder()
                .id("teacher_rosebank_g7")
                .label("Teacher - Rosebank - Grade 7")
                .build();
        SandboxRole miSandboxRole_tg8 = SandboxRole.builder()
                .id("teacher_rosebank_g8")
                .label("Teacher - Rosebank - Grade 8")
                .build();
        SandboxRole miSandboxRole_da_d = SandboxRole.builder()
                .id("district_admin_detroit")
                .label("District Administrator - Detroit")
                .build();
        SandboxRole miSandboxRole_da_l = SandboxRole.builder()
                .id("district_admin_landsing")
                .label("District Administrator - Landsing")
                .build();
        SandboxRole miSandboxRole_da_gr = SandboxRole.builder()
                .id("school_admin_grand_rapids")
                .label("District Administrator -  Grand Rapids")
                .build();
        Sandbox sandboxMi = Sandbox.builder()
                .key("mi_42582")
                .label("Michigan Sandbox")
                .roles(newArrayList(
                        miSandboxRole_tg6,
                        miSandboxRole_tg7,
                        miSandboxRole_tg8,
                        miSandboxRole_da_d,
                        miSandboxRole_da_l,
                        miSandboxRole_da_gr))
                .build();
        sandboxes.add(sandboxMi);

        return sandboxes;
    }
}