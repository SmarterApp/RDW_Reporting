package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;
import org.opentestsystem.rdw.multitenant.Tenant;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.DistrictAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.Teacher;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSandboxServiceTest {

    @Mock
    private SandboxRepository sandboxRepository;

    @Mock
    private SandboxRoleRepository sandboxRoleRepository;

    private DefaultSandboxService service;

    @Before
    public void setup() {
        service = new DefaultSandboxService(
                sandboxRepository,
                sandboxRoleRepository
        );
    }

    @Test
    public void itShouldGetSandboxes() {

        final List<Tenant> sandboxes = newArrayList(
                Tenant.builder()
                        .id("A")
                        .key("a")
                        .name("Sandbox A")
                        .sandbox(true)
                        .build(),
                Tenant.builder()
                        .id("B")
                        .key("b")
                        .name("Sandbox B")
                        .sandbox(true)
                        .build()
        );

        final List<SandboxRole> roles = newArrayList(
                SandboxRole.builder()
                        .type(DistrictAdministrator)
                        .id("district admin")
                        .build(),
                SandboxRole.builder()
                        .type(Teacher)
                        .id("teacher")
                        .build()
        );

        when(sandboxRepository.findAll()).thenReturn(sandboxes);
        when(sandboxRoleRepository.findAll()).thenReturn(roles);

        assertThat(service.getSandboxes())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(
                        sandboxes.stream()
                                .map(tenant -> Sandbox.builder()
                                        .label(tenant.getName())
                                        .key(tenant.getKey())
                                        .roles(roles)
                                        .build()
                                )
                                .collect(toList())
                );
    }

    @Test
    public void itShouldGetSandboxesEvenIfOneIsBroken() {
        final List<Tenant> sandboxes = newArrayList(
                Tenant.builder()
                        .id("A")
                        .key("a")
                        .name("Sandbox A")
                        .sandbox(true)
                        .build(),
                Tenant.builder()
                        .id("B")
                        .key("b")
                        .name("Sandbox B")
                        .sandbox(true)
                        .build()
        );

        final List<SandboxRole> roles = newArrayList(
                SandboxRole.builder()
                        .type(DistrictAdministrator)
                        .id("district admin")
                        .build(),
                SandboxRole.builder()
                        .type(Teacher)
                        .id("teacher")
                        .build()
        );

        when(sandboxRepository.findAll()).thenReturn(sandboxes);
        when(sandboxRoleRepository.findAll())
                .thenThrow(new RuntimeException("Access denied"))
                .thenReturn(roles);

        final List<Sandbox> result = service.getSandboxes();

        assertThat(result)
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(
                        sandboxes.stream()
                                .filter(tenant -> tenant.getId().equals("B"))
                                .map(tenant -> Sandbox.builder()
                                        .label(tenant.getName())
                                        .key(tenant.getKey())
                                        .roles(roles)
                                        .build()
                                )
                                .collect(toList())
                );
    }

}
