package org.opentestsystem.rdw.reporting.sandbox;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.util.Optional;
import java.util.Set;
import static org.assertj.core.api.Assertions.assertThat;

import static org.mockito.Mockito.mock;


public class DefaultSandboxServiceTest {

    private TenantProperties tenantProperties;
    private DefaultSandboxService service;

    @Before
    public void setup() {
        tenantProperties = mock(TenantProperties.class);
        service = new DefaultSandboxService(tenantProperties);
    }

    @Test
    public void itShouldGetSandboxes() {
        Set<Sandbox> expectedSandboxSet = DefaultSandboxService.getMockSandboxSet();
        Optional<Sandbox> expectedCaSandbox = getSandboxFromKey(expectedSandboxSet, "ca_19091");
        Optional<SandboxRole> expectedCaRole = getRoleFromKey(expectedCaSandbox.get().getSandboxRoles(), "teacher_harborside_g4");
        Optional<Sandbox> expectedMiSandbox = getSandboxFromKey(expectedSandboxSet, "mi_42582");
        Optional<SandboxRole> expectedMiRole = getRoleFromKey(expectedMiSandbox.get().getSandboxRoles(), "district_admin_detroit");

        Set<Sandbox> sandboxes = service.getSandboxes();
        assertThat(sandboxes).isNotNull().isNotEmpty();
        assertThat(sandboxes.size()).isEqualTo(2);

        Optional<Sandbox> caSandbox = getSandboxFromKey(sandboxes, "ca_19091");
        assertThat(caSandbox.isPresent()).isTrue();
        assertThat(caSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedCaSandbox.get());

        Optional<SandboxRole> caRole = getRoleFromKey(caSandbox.get().getSandboxRoles(), "teacher_harborside_g4");
        assertThat(caRole.isPresent()).isTrue();
        assertThat(caRole.get()).isEqualToComparingFieldByField(expectedCaRole.get());

        Optional<Sandbox> miSandbox = getSandboxFromKey(sandboxes, "mi_42582");
        assertThat(miSandbox.isPresent()).isTrue();
        assertThat(miSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedMiSandbox.get());

        Optional<SandboxRole> miRole = getRoleFromKey(miSandbox.get().getSandboxRoles(), "district_admin_detroit");
        assertThat(miRole.isPresent()).isTrue();
        assertThat(miRole.get()).isEqualToComparingFieldByField(expectedMiRole.get());
    }

    /**
     * @param sandboxes collection of sandboxes to search though
     * @param key the key to search for
     * @return Return the found Sandbox for key
     */
    private Optional<Sandbox> getSandboxFromKey(final Set<Sandbox> sandboxes, String key) {
        return sandboxes.stream()
                .filter(sandbox ->
                        sandbox.getKey().equals(key)
                ).findFirst();
    }

    /**
     *
     * @param sandboxRoles collection of Roles to search through
     * @param id the id to search for
     * @return the found SandboxRole for each key
     */
    private Optional<SandboxRole> getRoleFromKey(final Set<SandboxRole> sandboxRoles, String id) {
        return sandboxRoles.stream()
                .filter(sandboxRole ->
                        sandboxRole.getId().equals(id)
                ).findFirst();
    }
}