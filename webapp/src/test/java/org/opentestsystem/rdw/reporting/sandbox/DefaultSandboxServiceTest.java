package org.opentestsystem.rdw.reporting.sandbox;

import com.google.common.collect.ImmutableMap;
import org.assertj.core.api.Assertions;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.DistrictAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.SchoolAdministrator;
import static org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType.Teacher;


public class DefaultSandboxServiceTest {

    private TenantProperties mockTenantProperties;
    private SandboxRoleRepository mockRoleRepository;
    private DefaultSandboxService service;

    @Before
    public void setup() {
        mockTenantProperties = mock(TenantProperties.class);
        mockRoleRepository = mock(SandboxRoleRepository.class);
        service = new DefaultSandboxService(mockTenantProperties, mockRoleRepository);
    }

    @Test
    public void itShouldGetSandboxes() {
        when(mockTenantProperties.getTenants()).thenReturn(getMockTenants());
        when(mockRoleRepository.findAll())
                .thenReturn(getMockSandboxRolesCa())
                .thenReturn(getMockSandboxRolesMi());
        Set<Sandbox> expectedSandboxSet = getMockSandboxSet();
        Optional<Sandbox> expectedCaSandbox = getSandboxFromKey(expectedSandboxSet, "ca_19091");
        Optional<SandboxRole> expectedCaRole = getRoleFromKey(expectedCaSandbox.get().getRoles(), "teacher_harborside_g4");
        Optional<Sandbox> expectedMiSandbox = getSandboxFromKey(expectedSandboxSet, "mi_42582");
        Optional<SandboxRole> expectedMiRole = getRoleFromKey(expectedMiSandbox.get().getRoles(), "district_admin_detroit");

        Set<Sandbox> sandboxes = service.getSandboxes();
        Assertions.assertThat(sandboxes).isNotNull().isNotEmpty();
        assertThat(sandboxes.size()).isEqualTo(2);

        Optional<Sandbox> caSandbox = getSandboxFromKey(sandboxes, "ca_19091");
        assertThat(caSandbox.isPresent()).isTrue();
        assertThat(caSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedCaSandbox.get());

        List<SandboxRole> caRoles = caSandbox.get().getRoles();
        Assertions.assertThat(caRoles).hasSameSizeAs(getMockSandboxRolesCa());
        assertThat(caRoles.get(0).getId()).isEqualTo(getMockSandboxRolesCa().get(0).getId());

        Optional<SandboxRole> caRole = getRoleFromKey(caSandbox.get().getRoles(), "teacher_harborside_g4");
        assertThat(caRole.isPresent()).isTrue();
        assertThat(caRole.get()).isEqualToComparingFieldByField(expectedCaRole.get());

        Optional<Sandbox> miSandbox = getSandboxFromKey(sandboxes, "mi_42582");
        assertThat(miSandbox.isPresent()).isTrue();
        assertThat(miSandbox.get()).isEqualToComparingFieldByFieldRecursively(expectedMiSandbox.get());

        Optional<SandboxRole> miRole = getRoleFromKey(miSandbox.get().getRoles(), "district_admin_detroit");
        assertThat(miRole.isPresent()).isTrue();
        assertThat(miRole.get()).isEqualToComparingFieldByField(expectedMiRole.get());
    }

    /**
     * @param sandboxes collection of sandboxes to search though
     * @param key       the key to search for
     * @return Return the found Sandbox for key
     */
    private Optional<Sandbox> getSandboxFromKey(final Set<Sandbox> sandboxes, String key) {
        return sandboxes.stream()
                .filter(sandbox ->
                        sandbox.getKey().equals(key)
                ).findFirst();
    }

    /**
     * @param sandboxRoles collection of Roles to search through
     * @param id           the id to search for
     * @return the found SandboxRole for each key
     */
    private Optional<SandboxRole> getRoleFromKey(final List<SandboxRole> sandboxRoles, String id) {
        return sandboxRoles.stream()
                .filter(sandboxRole ->
                        sandboxRole.getId().equals(id)
                ).findFirst();
    }

    private static Map<String, Tenant> getMockTenants() {
        return ImmutableMap.of(
                "ca_19091",
                Tenant.builder()
                        .id("ca_19091")
                        .key("ca_19091")
                        .name("California Sandbox")
                        .sandbox(true)
                        .build(),
                "mi_42582",
                Tenant.builder()
                        .id("mi_42582")
                        .key("mi_42582")
                        .name("Michigan Sandbox")
                        .sandbox(true)
                        .build()
        );
    }

    private static List<SandboxRole> getMockSandboxRolesCa() {
        return getMockSandboxSet().stream()
                .filter(sandbox -> sandbox.getKey().equals("ca_19091"))
                .findFirst()
                .get()
                .getRoles();

    }

    private static List<SandboxRole> getMockSandboxRolesMi() {
        return getMockSandboxSet().stream()
                .filter(sandbox -> sandbox.getKey().equals("mi_42582"))
                .findFirst()
                .get()
                .getRoles();
    }

    /**
     * @return temp collection of sandboxes that is required for sandbox login
     */
    public static Set<Sandbox> getMockSandboxSet() {
        return newHashSet(
                Sandbox.builder()
                        .key("ca_19091")
                        .label("California Sandbox")
                        .roles(newArrayList(
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_harborside_g4")
                                        .build(),
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_harborside_g5")
                                        .build(),
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_harborside_g6")
                                        .build(),
                                SandboxRole.builder()
                                        .type(DistrictAdministrator)
                                        .id("district_admin_sweetwater")
                                        .build(),
                                SandboxRole.builder()
                                        .type(DistrictAdministrator)
                                        .id("district_admin_harborside")
                                        .build()
                        ))
                        .build(),
                Sandbox.builder()
                        .key("mi_42582")
                        .label("Michigan Sandbox")
                        .roles(newArrayList(
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_rosebank_g6")
                                        .build(),
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_rosebank_g7")
                                        .build(),
                                SandboxRole.builder()
                                        .type(Teacher)
                                        .id("teacher_rosebank_g8")
                                        .build(),
                                SandboxRole.builder()
                                        .type(DistrictAdministrator)
                                        .id("district_admin_detroit")
                                        .build(),
                                SandboxRole.builder()
                                        .type(DistrictAdministrator)
                                        .id("district_admin_landsing")
                                        .build(),
                                SandboxRole.builder()
                                        .type(SchoolAdministrator)
                                        .id("school_admin_grand_rapids")
                                        .build()
                        ))
                        .build()
        );
    }
}
