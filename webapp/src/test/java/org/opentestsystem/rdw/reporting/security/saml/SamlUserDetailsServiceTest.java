package org.opentestsystem.rdw.reporting.security.saml;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.Attribute;
import org.opensaml.saml2.core.NameID;
import org.opensaml.xml.schema.XSString;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.UserTenant;
import org.opentestsystem.rdw.reporting.security.authority.Authority;
import org.opentestsystem.rdw.reporting.security.authority.AuthorityService;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.utils.Grant;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.saml.SAMLCredential;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.security.authority.Authorities.toAuthority;

public class SamlUserDetailsServiceTest {

    private SamlUserDetailsService service;
    private AuthorityService authorityService;

    @Before
    public void createService() {
        authorityService = mock(AuthorityService.class);

        service = new SamlUserDetailsService(authorityService);
    }

    @Test
    public void itShouldCreateAUser() {
        final String[] encodedGrants = {""};
        final SAMLCredential credential = createCredential("alice@example.com", "alice@example.com", "alice", "smith", encodedGrants[0]);

        final Set<Authority> authorities = newHashSet(
                Authority.builder()
                        .stateId("CA")
                        .role("GROUP_ROLE")
                        .level(Grant.Level.STATE)
                        .entityId("CA")
                        .build()
        );
        final Permission permission = new Permission("GROUP_READ", PermissionScope.STATEWIDE);
        final Set<Permission> permissions = newHashSet(permission);
        when(authorityService.getAuthorities(encodedGrants)).thenReturn(authorities);
        when(authorityService.getPermissions(authorities)).thenReturn(permissions);

        assertThat(service.loadUserBySAML(credential))
                .isEqualToComparingFieldByFieldRecursively(
                        User.builderExt()
                                .id("uuid")
                                .password("[REDACTED]")
                                .firstName("alice")
                                .lastName("smith")
                                .email("alice@example.com")
                                .username("alice@example.com")
                                .permissionsById(
                                        ImmutableMap.of(permission.getId(), permission)
                                )
                                .authorities(newHashSet(
                                        new SimpleGrantedAuthority("ROLE_GROUP_ROLE"),
                                        new SimpleGrantedAuthority("PERM_GROUP_READ")
                                ))
                                .credentialsNonExpired(true)
                                .accountNonLocked(true)
                                .accountNonExpired(true)
                                .enabled(true)
                                .tenant(UserTenant.builder()
                                        .id("CA")
                                        .sandbox(false)
                                        .logoutUrl("/saml/logout")
                                        .logoutSuccessUrl("/landing")
                                        .build()
                                )
                                .build()
                );
    }

    @Test
    public void itShouldCreateAnEmptyUserIfNoGrantsWithState() {
        final SAMLCredential credential = createCredential("alice@example.com", "alice@example.com", "alice", "smith", "");
        when(authorityService.getAuthorities(any(String[].class)))
                .thenReturn(newHashSet(
                        toAuthority(Grant.fromString("|SBAC|GROUP_READ|CLIENT|SBAC||||||||||||||"))
                ));

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getPermissionsById()).isEmpty();
        assertThat(user.getAuthorities()).isEmpty();
        assertThat(user.isEnabled()).isFalse();
    }

    @Test
    public void itShouldCreateAnEmptyUserIfNoGrants() {
        final SAMLCredential credential = createCredential("alice@example.com", "alice@example.com", "alice", "smith", "");
        when(authorityService.getAuthorities(any(String[].class))).thenReturn(newHashSet());

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getPermissionsById()).isEmpty();
        assertThat(user.getAuthorities()).isEmpty();
        assertThat(user.isEnabled()).isFalse();
    }

    @Test
    public void itShouldUseMailAndItIsOkayIfNameIdIsWrong() {
        final SAMLCredential credential = createCredential("asmith@example.com", "alice@example.com", "alice", "smith", "");
        when(authorityService.getAuthorities(any(String[].class))).thenReturn(newHashSet());

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
    }

    @Test
    public void itShouldAssignTenant() {
        final String chain = "|CA|PII|STATE|SBAC||||CA||||||||||";
        final SAMLCredential credential = createCredential("asmith@example.com", "alice@example.com", "alice", "smith", chain);
        when(authorityService.getAuthorities(any(String[].class)))
                .thenReturn(newHashSet(
                        toAuthority(Grant.fromString(chain))
                ));

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getTenant().getId()).isEqualTo("CA");
    }

    private static SAMLCredential createCredential(
            final String nameId,
            final String username,
            final String firstName,
            final String lastName,
            final String sbacTenancyChain) {

        final NameID nameID = mock(NameID.class);
        when(nameID.getValue()).thenReturn(nameId);

        final Assertion assertion = mock(Assertion.class);

        final List<Attribute> attributes = newArrayList(
                createAttribute("sbacUUID", "uuid"),
                createAttribute("givenName", firstName),
                createAttribute("sn", lastName),
                createAttribute("mail", username),
                createAttribute("sbacTenancyChain", sbacTenancyChain)
        );

        return new SAMLCredential(
                nameID,
                assertion,
                "https://some.sso.provider.org/",
                attributes,
                "https://somewhere.org/"
        );
    }

    private static Attribute createAttribute(final String name, final String value) {
        final Attribute attribute = mock(Attribute.class);
        when(attribute.getName()).thenReturn(name);

        final XSString xs = mock(XSString.class);
        when(xs.getValue()).thenReturn(value);
        when(attribute.getAttributeValues()).thenReturn(newArrayList(xs));

        return attribute;
    }
}
