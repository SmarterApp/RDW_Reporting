package org.opentestsystem.rdw.reporting.security.saml;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.Attribute;
import org.opensaml.saml2.core.NameID;
import org.opensaml.xml.schema.XSString;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.security.auth.AuthorizationService;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.utils.Grant;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.saml.SAMLCredential;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class SamlUserDetailsServiceTest {

    private SamlUserDetailsService service;
    private AuthorizationService authorizationService;

    @Before
    public void createService() {
        authorizationService = mock(AuthorizationService.class);

        service = new SamlUserDetailsService(authorizationService);
    }

    @Test
    public void itShouldCreateAUser() {
        final String[] encodedGrants = {""};
        final SAMLCredential credential = createCredential("alice@example.com", "alice@example.com", "alice", "smith", encodedGrants[0]);

        final Set<Grant> grants = newHashSet(mock(Grant.class));
        final Permission permission = new Permission("GROUP_READ", PermissionScope.STATEWIDE);
        final Set<Permission> permissions = newHashSet(permission);
        final GrantedAuthority authority = mock(GrantedAuthority.class);
        final Set<GrantedAuthority> authorities = newHashSet(authority);
        when(authorizationService.getGrants(encodedGrants)).thenReturn(grants);
        when(authorizationService.getPermissions(grants)).thenReturn(permissions);
        when(authorizationService.getAuthorities(grants)).thenReturn(authorities);

        final User user = (User) service.loadUserBySAML(credential);

        assertThat(user.getFirstName()).isEqualTo("alice");
        assertThat(user.getLastName()).isEqualTo("smith");
        assertThat(user.getEmail()).isEqualTo("alice@example.com");
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getPermissionsById().values()).containsExactly(permission);
        assertThat(user.getAuthorities()).containsExactly(authority);
        assertThat(user.isEnabled()).isTrue();
    }

    @Test
    public void itShouldCreateAnEmptyUserIfNoGrants() {
        final SAMLCredential credential = createCredential("alice@example.com", "alice@example.com", "alice", "smith", "");
        when(authorizationService.getGrants(any())).thenReturn(newHashSet());

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getPermissionsById()).isEmpty();
        assertThat(user.getAuthorities()).isEmpty();
        assertThat(user.isEnabled()).isFalse();
    }

    @Test
    public void itShouldUseMailAndItIsOkayIfNameIdIsWrong() {
        final SAMLCredential credential = createCredential("asmith@example.com", "alice@example.com", "alice", "smith", "");
        when(authorizationService.getGrants(any())).thenReturn(newHashSet());

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
    }

    @Test
    public void itAssignTenant() {
        final String chain = "|CA|ASMTDATALOAD|STATE|SBAC||||CA||||||||||";
        final ImmutableSet.Builder<Grant> grants = ImmutableSet.builder();
        grants.add(Grant.fromString(chain));
        final SAMLCredential credential = createCredential("asmith@example.com", "alice@example.com", "alice", "smith", chain);
        when(authorizationService.getGrants(any())).thenReturn(grants.build());

        final User user = (User) service.loadUserBySAML(credential);
        assertThat(user.getUsername()).isEqualTo("alice@example.com");
        assertThat(user.getTenantId()).isEqualTo("SBAC");
    }

    private static SAMLCredential createCredential(final String nameId,
                                                   final String username,
                                                   final String firstName,
                                                   final String lastName,
                                                   final String sbacTenancyChain) {
        final NameID nameID = mock(NameID.class);
        when(nameID.getValue()).thenReturn(nameId);

        final Assertion assertion = mock(Assertion.class);

        final List<Attribute> attributes = newArrayList(
                createAttribute("sbacUUID", "uuid"),
                createAttribute("givenName", firstName),
                createAttribute("sn", lastName),
                createAttribute("mail", username),
                createAttribute("sbacTenancyChain", sbacTenancyChain)
        );

        return new SAMLCredential(nameID, assertion, "https://some.sso.provider.org/", attributes, "https://somewhere.org/");
    }

    private static Attribute createAttribute(final String name, final String value) {
        final Attribute attribute = mock(Attribute.class);
        when(attribute.getName()).thenReturn(name);

        final XSString xs = mock(XSString.class);
        when(xs.getValue()).thenReturn(value);
        when(attribute.getAttributeValues()).thenReturn(newArrayList(xs));

        return attribute;
    }
}
