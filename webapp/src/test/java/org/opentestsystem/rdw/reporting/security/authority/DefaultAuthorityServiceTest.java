package org.opentestsystem.rdw.reporting.security.authority;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.ReportingRole;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRole;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRoleType;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.security.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.utils.Grant;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultAuthorityServiceTest {

    private static final String stateA = "stateA";

    @MockBean
    private PermissionService permissionService;

    @MockBean
    private OrganizationRepository organizationRepository;

    @MockBean
    private TenantProperties tenantProperties;

    private DefaultAuthorityService service;

    @Before
    public void before() throws Exception {

        final Tenant tenant = Tenant.builder()
                .id(stateA)
                .key(stateA)
                .name(stateA)
                .build();
        when(tenantProperties.findTenantById(anyString())).thenAnswer(invocation ->
                stateA.equals(invocation.getArgument(0)) ? Optional.of(tenant) : Optional.empty());

        when(permissionService.getPermissionsByRole()).thenReturn(ImmutableMap.of(
                "a", ImmutableSet.of("a"),
                "b", ImmutableSet.of("b"),
                "c", ImmutableSet.of("c"),
                "d", ImmutableSet.of("d", "f"),
                "e", ImmutableSet.of()
        ));
        when(organizationRepository.findAllDistrictGroupIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));
        when(organizationRepository.findAllDistrictIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));
        when(organizationRepository.findAllSchoolGroupIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));
        when(organizationRepository.findAllSchoolIds(ImmutableSet.of("a"))).thenReturn(ImmutableMap.of("a", 1L));

        service = new DefaultAuthorityService(
                tenantProperties,
                permissionService,
                organizationRepository
        );
    }

    @Test
    public void getGrantsShouldIgnoreInvalidEntityLevels() {
        final String[] encodedGrants = {
                "|something|GENERAL|invalid|||||||||||||||"
        };
        assertThat(service.getAuthorities(encodedGrants)).isEmpty();
    }

    @Test
    public void getGrantsShouldIgnoreGrantsWithUnsupportedEntityLevel() {
        final String[] encodedGrants = {
                "|districtGroupA|GENERAL|CLIENT|||||stateA||districtGroupA||||||||",
                "|schoolGroupA|GENERAL|STATE_GROUP|||||stateA||||districtA||schoolGroupA||||"
        };
        assertThat(service.getAuthorities(encodedGrants)).isEmpty();
    }

    @Test
    public void getGrantsShouldIgnoreGrantsWithUnknownRole() {
        final String[] encodedGrants = {
                "|stateA|DL_USER|STATE|||||stateA||||||||||"
        };
        assertThat(service.getAuthorities(encodedGrants)).isEmpty();
    }

    @Test
    public void getGrantsShouldOnlyIncludeGrantsForKnownStates() {
        final String[] encodedGrants = {
                "|stateA|GENERAL|STATE|||||stateA||||||||||",
                "|stateB|GENERAL|STATE|||||stateB||||||||||"
        };
        assertThat(service.getAuthorities(encodedGrants))
                .usingElementComparatorIgnoringFields()
                .containsExactlyInAnyOrder(
                        Authority.builder()
                                .stateId("stateA")
                                .role("GENERAL")
                                .level(Grant.Level.STATE)
                                .entityId("stateA")
                                .build()
                );
    }

    @Test
    public void getGrantsShouldOnlyIncludeGrantsForTheFirstKnownState() {
        final Tenant tenant = Tenant.builder()
                .id("id")
                .key("key")
                .name("name")
                .build();
        when(tenantProperties.findTenantById(anyString())).thenReturn(Optional.of(tenant));

        final String[] encodedGrants = {
                "|stateB|GENERAL|STATE|||||stateB||||||||||",
                "|stateA|GENERAL|STATE|||||stateA||||||||||",
                "|stateB|PII|STATE|||||stateB||||||||||"
        };
        assertThat(service.getAuthorities(encodedGrants))
                .usingElementComparatorIgnoringFields()
                .containsExactlyInAnyOrder(
                        Authority.builder()
                                .stateId("stateB")
                                .role("GENERAL")
                                .level(Grant.Level.STATE)
                                .entityId("stateB")
                                .build(),
                        Authority.builder()
                                .stateId("stateB")
                                .role("PII")
                                .level(Grant.Level.STATE)
                                .entityId("stateB")
                                .build()
                );
    }

    @Test
    public void getPermissionsShouldCorrectlyDerivePermissionsFromGrants() {
        final List<Authority> authorities = ImmutableList.of(
                Grant.fromString("|a|a|STATE|||||a||"),
                Grant.fromString("|a|b|DISTRICT|||||a||||a||"),
                Grant.fromString("|a|c|INSTITUTION_GROUP|||||a||||a||a||||"),
                Grant.fromString("|a|c|INSTITUTION|||||a||||a||||a||"),
                Grant.fromString("|a|d|DISTRICT|||||a||||a||"),
                Grant.fromString("|a|d|INSTITUTION|||||a||||a||||a||")
        ).stream().map(Authorities::toAuthority).collect(toList());

        assertThat(service.getPermissions(authorities))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", PermissionScope.STATEWIDE),
                        new Permission("b", PermissionScope.builder().addDistrictId(1).build()),
                        new Permission("c", PermissionScope.builder().addSchoolGroupId(1).addSchoolId(1).build()),
                        new Permission("d", PermissionScope.builder().addDistrictId(1).addSchoolId(1).build()),
                        new Permission("f", PermissionScope.builder().addDistrictId(1).addSchoolId(1).build())
                );
    }

    @Test
    public void getPermissionsShouldIgnoreOrganizationsForWhichThereIsNoEntityID() {
        final List<Authority> authorities = ImmutableList.of(
                Grant.fromString("|missing_school|a|INSTITUTION|||||a||||2||||missing_school||"),
                Grant.fromString("|missing_district|a|DISTRICT|||||a||||missing_district||")
        ).stream().map(Authorities::toAuthority).collect(toList());

        assertThat(service.getPermissions(authorities)).isEmpty();
    }

    @Test
    public void getPermissionsShouldAllowButIgnoreOrganizationsForWhichThereIsNoEntityID() {
        final List<Authority> authorities = ImmutableList.of(
                Grant.fromString("|a|a|INSTITUTION|||||a||||2||||a||"),
                Grant.fromString("|missing_district|a|DISTRICT|||||a||||missing_district||")
        ).stream().map(Authorities::toAuthority).collect(toList());

        assertThat(service.getPermissions(authorities))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", PermissionScope.builder().addSchoolId(1).build())
                );
    }

    @Test
    public void getPermissionsShouldUnionPermissionScopesOfRepeatingPermissions() {
        when(organizationRepository.findAllDistrictIds(ImmutableSet.of("2", "4"))).thenReturn(ImmutableMap.of("2", 2L, "4", 4L));
        when(organizationRepository.findAllSchoolIds(ImmutableSet.of("1", "3"))).thenReturn(ImmutableMap.of("1", 1L, "3", 3L));

        final List<Authority> authorities = ImmutableList.of(
                Grant.fromString("|1|a|INSTITUTION|||||a||||2||||1||"),
                Grant.fromString("|2|a|DISTRICT|||||a||||2||"),
                Grant.fromString("|3|a|INSTITUTION|||||a||||4||||3||"),
                Grant.fromString("|4|a|DISTRICT|||||a||||4||")
        ).stream().map(Authorities::toAuthority).collect(toList());

        assertThat(service.getPermissions(authorities))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new Permission("a", PermissionScope.builder().addDistrictId(2).addDistrictId(4).addSchoolId(1).addSchoolId(3).build())
                );
    }

    @Test
    public void getPermissionsShouldProduceStateLevelPermissionScopeForUnionWithStateLevel() {
        final List<Authority> authorities = ImmutableList.of(
                Grant.fromString("|a|a|STATE|||||a||"),
                Grant.fromString("|a|a|DISTRICT|||||a||||a||")
        ).stream().map(Authorities::toAuthority).collect(toList());

        assertThat(service.getPermissions(authorities))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new Permission("a", PermissionScope.builder().statewide(true).addDistrictId(1).build()));
    }

    @Test
    public void getAuthortiesShouldMapSandboxRoleToAuthorities() {
        assertThat(service.getAuthorities(
                SandboxRole.builder()
                        .type(SandboxRoleType.DistrictAdministrator)
                        .id("districtA_natural")
                        .organization(Organization.builder()
                                .id(1L)
                                .organizationType(OrganizationType.District)
                                .naturalId("natural")
                                .name("districtA")
                                .build()
                        )
                        .build()
        )).usingElementComparatorIgnoringFields()
                .containsExactly(
                        Authority.builder()
                                .level(Grant.Level.DISTRICT)
                                .entityId("natural")
                                .role(ReportingRole.PiiRole)
                                .build()
                );
    }

}
