package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.exam.ExamItemScore;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSchoolGradeExamItemRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSchoolGradeExamItemRepositoryIT {

    @Autowired
    private JdbcSchoolGradeExamItemRepository repository;

    private SchoolGradeExamSearch.Builder search() {
        return SchoolGradeExamSearch.builder()
                .schoolId(-10)
                .gradeId(-1)
                .assessmentId(-1)
                .schoolYear(2017);
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingAssessment() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                PermissionScope.STATEWIDE, search().assessmentId(0).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMissingYear() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                PermissionScope.STATEWIDE, search().schoolYear(2016).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingSchool() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                PermissionScope.STATEWIDE, search().schoolId(-100).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldBeEmptyForMismatchingGrade() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(
                PermissionScope.STATEWIDE, search().gradeId(-100).build())).isEmpty();
    }

    @Test
    public void findAllExamItemScoresForAssessmentShouldReturnAllItems() throws Exception {
        assertThat(repository.findAllExamItemScoresForAssessment(PermissionScope.STATEWIDE,search().build()))
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        ExamItemScore.builder()
                                .examId(-1)
                                .itemId(-1)
                                .points(0)
                                .position(1)
                                .build(),
                        ExamItemScore.builder()
                                .examId(-1)
                                .itemId(-2)
                                .points(1)
                                .position(2)
                                .build()
                );
    }

}