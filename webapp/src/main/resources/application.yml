# actuator end-points should be served from a different port than the API/web content
management:
  port: 8008
  security:
    enabled: false
  # disable health check for tenant-specific features
  health:
    db:
      enabled: false
    redis:
      enabled: false

# configure actuator endpoints to unmask "key" properties so tenant keys won't be masked. However, we still
# mask secret keys (i.e. props ending with secretKey, secret-key, or secret_key in lower, upper, or mixed case)
endpoints:
  sensitive: false
  env:
    keys-to-sanitize: password,secret,token,.*credentials.*,vcap_services,secret[-_]?key
  configprops:
    keys-to-sanitize: password,secret,token,.*credentials.*,vcap_services,secret[-_]?key

jwt:
  secret: ${rdw.reporting.jwt.secret:secret}
  producer: true
  routePaths: ${zuul.routes.admin-service.path},${zuul.routes.aggregate-service.path},${zuul.routes.report-processor.path},${zuul.routes.reporting-service.path}

permissionservice:
  component: Reporting
  endpoint: ${rdw.permission.service}

reporting:
  analytics-tracking-id: ${rdw.reporting.analytics.trackingId:}
  access-denied-url: forward:/assets/public/access-denied.html
  interpretive-guide-url: https://portal.smarterbalanced.org/library/en/reporting-system-interpretive-guide.pdf
  iris-vendor-id: ${rdw.reporting.iris.vendorId}
  landing-page-url: forward:/landing.html
  min-item-data-year: 2016
  school-year: 2019
  state:
    code: CA
    name: California
  user-guide-url: https://portal.smarterbalanced.org/library/en/reporting-system-user-guide.pdf
  target-report:
    insufficient-data-cutoff: 0.2
    min-number-of-students: 0

saml:
  # SAML keystore path: file:/some/path/saml.jks
  key-store-file: ${rdw.reporting.keystore.path}
  key-store-password: ${rdw.reporting.keystore.password}
  private-key-entry-alias: ${rdw.reporting.keystore.alias}
  private-key-entry-password: ${rdw.reporting.keystore.entry.password}
  idp-metadata-url: ${rdw.reporting.idp}
  sp-entity-id: ${rdw.reporting.entityId}
  # SAML settings when hosting behind a load balancer or reverse proxy
  load-balance:
    enabled: false
    scheme: https
    hostname:
    context-path: /
    port: 8080
    include-server-port: false

security:
  filter-dispatcher-types: FORWARD, INCLUDE, REQUEST, ASYNC, ERROR

server:
  # tomcat settings for reasonable performance: adjust for tiny/huge configurations
  tomcat:
    max-connections: 0
    max-threads: 4
    accept-count: 10
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,text/csv

spring:
  resources:
    chain:
      enabled: true
      gzipped: true

  session:
    store-type: none

  http:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB

  # still need this for translations api
  jackson:
    default-property-inclusion: non_null
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

  cache:
    type: SIMPLE
    cache-names: permissionsByRole, translations, translation_properties

  cloud:
    stream:
      bindings:
        configprops-update-output:
          destination: configprops-update-exchange
          group: configprops-update-queue
          producer:
            requiredGroups: configprops-update-queue

datasources:
  reporting_ro:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${datasources.reporting_ro.url-server:localhost:3306}"
      database: "${datasources.reporting_ro.url-schema:reporting}"
      properties: "useSSL=${datasources.reporting_ro.use-ssl:false}\
                   &useLegacyDatetimeCode=${datasources.reporting_ro.use-legacy-datetime-code:false}\
                   &characterEncoding=${datasources.reporting_ro.character-encoding:utf8}\
                   &rewriteBatchedStatements=${datasources.reporting_ro.rewrite-batched-statements:true}\
                   &connectTimeout=${datasources.reporting_ro.connect-timeout:10000}\
                   &socketTimeout=${datasources.reporting_ro.socket-timeout:40000}\
                   "
    url: "${datasources.reporting_ro.url-parts.protocol}//${datasources.reporting_ro.url-parts.hosts}/${datasources.reporting_ro.url-parts.database}?${datasources.reporting_ro.url-parts.properties}"
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.reporting_ro.query-timeout:30})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${datasources.reporting_ro.initialSize}
    maxIdle: ${datasources.reporting_ro.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

  reporting_rw:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${datasources.reporting_rw.url-server:localhost:3306}"
      database: "${datasources.reporting_rw.url-schema:reporting}"
      properties: "useSSL=${datasources.reporting_rw.use-ssl:false}\
                   &useLegacyDatetimeCode=${datasources.reporting_rw.use-legacy-datetime-code:false}\
                   &characterEncoding=${datasources.reporting_rw.character-encoding:utf8}\
                   &rewriteBatchedStatements=${datasources.reporting_rw.rewrite-batched-statements:true}\
                   &useCompression=${datasources.reporting_rw.use-compression:true}\
                   &connectTimeout=${datasources.reporting_rw.connect-timeout:10000}\
                   &socketTimeout=${datasources.reporting_rw.socket-timeout:40000}\
                   "
    url: "${datasources.reporting_rw.url-parts.protocol}//${datasources.reporting_rw.url-parts.hosts}/${datasources.reporting_rw.url-parts.database}?${datasources.reporting_rw.url-parts.properties}"
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.reporting_rw.query-timeout:30})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${datasources.reporting_rw.initialSize}
    maxIdle: ${datasources.reporting_rw.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

# Netflix zuul configuration.
zuul:
  set-content-length: true
  FormBodyWrapperFilter:
    pre:
      disable: true
  host:
    socket-timeout-millis: 100000
  routes:
    iris:
      path: /iris/**
      url: ${rdw.reporting.iris.url}
      stripPrefix: true
    admin-service:
      path: /api/admin-service/**
      url: http://localhost:8280
      stripPrefix: true
    aggregate-service:
      path: /api/aggregate-service/**
      url: http://localhost:8380
      stripPrefix: true
    report-processor:
      path: /api/report-processor/**
      url: http://localhost:8085
      stripPrefix: true
    reporting-service:
      path: /api/reporting-service/**
      url: http://localhost:8180
      stripPrefix: true
