package org.opentestsystem.rdw.reporting.exam.search.grade;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

@Service
class DefaultSchoolGradeExamService implements SchoolGradeExamService {

    private final SchoolGradeExamRepository repository;

    @Autowired
    public DefaultSchoolGradeExamService(@NotNull final SchoolGradeExamRepository repository) {
        this.repository = repository;
    }

    @Override
    public Optional<GroupExam> getLatestAssessment(@NotNull final User user, final long schoolId, final long gradeId, final long schoolYear) {
        final PermissionScope securityContext = user.getPermissionsById().get("PII_READ").getScope();
        final GroupExam groupExam = repository.findLatest(securityContext, schoolId, gradeId, schoolYear);
        if (groupExam == null) {
            return Optional.empty();
        }
        final List<Exam> exams = repository.findAllForAssessment(
                securityContext, schoolId, gradeId, groupExam.getAssessment().getId(), schoolYear);
        return Optional.of(new GroupExam(groupExam.getAssessment(), exams));
    }

    @Override
    public List<Assessment> getAllAssessments(@NotNull final User user, final long schoolId, final long gradeId, final long schoolYear) {
        return ImmutableList.copyOf(repository.findAllAssessments(
                user.getPermissionsById().get("PII_READ").getScope(),
                schoolId,
                gradeId,
                schoolYear
        ));
    }

    @Override
    public List<Exam> getExams(@NotNull final User user, final long schoolId, final long gradeId, final long assessmentId, final long schoolYear) {
        return ImmutableList.copyOf(repository.findAllForAssessment(
                user.getPermissionsById().get("PII_READ").getScope(),
                schoolId,
                gradeId,
                assessmentId,
                schoolYear
        ));
    }

}
