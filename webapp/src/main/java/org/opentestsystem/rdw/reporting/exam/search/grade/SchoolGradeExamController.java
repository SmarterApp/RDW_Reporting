package org.opentestsystem.rdw.reporting.exam.search.grade;

import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.NoSuchElementException;

@RestController
class SchoolGradeExamController {

    private final SchoolGradeExamService service;

    @Autowired
    public SchoolGradeExamController(@NotNull final SchoolGradeExamService service) {
        this.service = service;
    }

    @GetMapping("/api/schools/{schoolId}/grades/{gradeId}/latestassessment")
    public GroupExam getExamsForSchoolAndGrade(
            @AuthenticationPrincipal final User user,
            @PathVariable final long schoolId,
            @PathVariable final long gradeId,
            @RequestParam("schoolYear") final long schoolYear) {

        return service.getLatestAssessment(user, schoolId, gradeId, schoolYear)
                .orElseThrow(NoSuchElementException::new);
    }

    @GetMapping("/api/schools/{schoolId}/grades/{gradeId}/assessments")
    public List<Assessment> getGroupAssessments(
            @AuthenticationPrincipal final User user,
            @PathVariable final long schoolId,
            @PathVariable final long gradeId,
            @RequestParam("schoolYear") final long schoolYear) {

        return service.getAllAssessments(user, schoolId, gradeId, schoolYear);
    }

    @GetMapping("/api/schools/{schoolId}/grades/{gradeId}/assessments/{assessmentId}/exams")
    public List<Exam> getGroupIabs(
            @AuthenticationPrincipal final User user,
            @PathVariable final long schoolId,
            @PathVariable final long gradeId,
            @PathVariable final long assessmentId,
            @RequestParam("schoolYear") final long schoolYear) {

        return service.getExams(user, schoolId, gradeId, assessmentId, schoolYear);
    }

}
