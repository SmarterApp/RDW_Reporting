package org.opentestsystem.rdw.reporting.exam;

import java.util.Collections;
import java.util.List;

/**
 * Represents a single assessment item
 */
public class AssessmentItem {

    private long id;
    private int position;
    private String bankItemKey;
    private String claim;
    private String target;
    private String depthOfKnowledge;
    private String difficultyCode;
    private List<String> commonCoreStandardIds;
    private int maximumPoints;
    private int mathPractice;

    private AssessmentItem() {
    }

    /**
     * @return the assessment item entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the position of an item as it appears on the assessment.
     */
    public int getPosition() { return position; }

    /**
     * @return the bank and item key, typically in format of ###-####
     */
    public String getBankItemKey() { return bankItemKey; }

    /**
     * @return the claim code
     */
    public String getClaim() {
        return claim;
    }

    /**
     * @return the target code
     */
    public String getTarget() {
        return target;
    }

    /**
     * @return the depth of knowledge code
     */
    public String getDepthOfKnowledge() {
        return depthOfKnowledge;
    }

    /**
     * @return the math practice code
     */
    public int getMathPractice() {
        return mathPractice;
    }

    /**
     * @return the difficultyCode of the item
     */
    public String getDifficultyCode() {
        return difficultyCode;
    }

    /**
     * @return The common core standards
     */
    public List<String> getCommonCoreStandardIds() {
        return commonCoreStandardIds;
    }

    /**
     * @return the item's maximum amount of points
     */
    public int getMaximumPoints() {
        return maximumPoints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private long id;
        private int position;
        private String bankItemKey;
        private String claim;
        private String target;
        private String depthOfKnowledge;
        private int mathPratice;
        private String difficultyCode;
        private List<String> commonCoreStandardIds;
        private int maximumPoints;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder position(final int position) {
            this.position = position;
            return this;
        }

        public Builder bankItemKey(final String bankItemKey) {
            this.bankItemKey = bankItemKey;
            return this;
        }

        public Builder claim(final String claim) {
            this.claim = claim;
            return this;
        }

        public Builder target(final String target) {
            this.target = target;
            return this;
        }

        public Builder depthOfKnowledge(final String depthOfKnowledge) {
            this.depthOfKnowledge = depthOfKnowledge;
            return this;
        }

        public Builder mathPratice(final int mathPratice) {
            this.mathPratice = mathPratice;
            return this;
        }

        public Builder difficultyCode(final String difficultyCode) {
            this.difficultyCode = difficultyCode;
            return this;
        }

        public Builder maximumPoints(final int maximumPoints) {
            this.maximumPoints = maximumPoints;
            return this;
        }

        public Builder commonCoreStandardIds(final List<String> commonCoreStandardIds) {
            this.commonCoreStandardIds = commonCoreStandardIds;
            return this;
        }

        public AssessmentItem build() {
            final AssessmentItem item = new AssessmentItem();
            item.id = id;
            item.position = position;
            item.bankItemKey = bankItemKey;
            item.claim = claim;
            item.target = target;
            item.depthOfKnowledge = depthOfKnowledge;
            item.mathPractice = mathPratice;
            item.difficultyCode = difficultyCode;
            item.maximumPoints = maximumPoints;
            item.commonCoreStandardIds = commonCoreStandardIds != null ? Collections.unmodifiableList(commonCoreStandardIds) : null;
            return item;
        }

    }

}
