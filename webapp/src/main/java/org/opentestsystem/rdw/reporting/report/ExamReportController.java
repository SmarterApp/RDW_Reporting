package org.opentestsystem.rdw.reporting.report;

import org.opentestsystem.rdw.reporting.common.report.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Set;

@RestController
public class ExamReportController {

    private final ExamReportService service;
    private final ReportResourceAssembler assembler;

    @Autowired
    ExamReportController(final ExamReportService service) {
        this.service = service;
        assembler = new ReportResourceAssembler();
    }

    @GetMapping("/api/reports")
    public List<ReportResource> getReports(
            @AuthenticationPrincipal final User user,
            @RequestParam(value = "id", required = false) final Set<Long> reportIds) {

        return assembler.toResources(reportIds != null
                ? service.getReports(user, reportIds)
                : service.getReports(user));
    }

    @GetMapping("/api/reports/{reportId}")
    public void getReport(
            @AuthenticationPrincipal final User user,
            @PathVariable final long reportId,
            final HttpServletResponse response) throws IOException {

        service.streamReport(user, reportId, response);
    }

    @PostMapping("/api/students/{studentId}/report")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @PathVariable final long studentId,
            @AuthenticationPrincipal final User user,
            @RequestBody final StudentExamReportRequest request) throws IOException {

        return assembler.toResource(service.createReport(user, request.copy().studentId(studentId).build()));
    }

    @PostMapping("/api/schools/{schoolId}/assessmentGrades/{gradeId}/reports")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @PathVariable final long schoolId,
            @PathVariable final int gradeId,
            @RequestBody final SchoolGradeExamReportRequest request) throws IOException {

        return assembler.toResource(service.createReport(user, request.copy().schoolId(schoolId).gradeId(gradeId).build()));
    }

    @PostMapping("/api/groups/{groupId}/reports")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @PathVariable final long groupId,
            @AuthenticationPrincipal final User user,
            @RequestBody final GroupExamReportRequest request) throws IOException {

        // TODO: if possible, move to argument resolver
        // copies user's group grant into the request object
        final GroupExamReportRequest requestWithGroup = request.copy()
                .groupGrant(user.getGroupsById().get(groupId))
                .build();

        return assembler.toResource(service.createReport(user, requestWithGroup));
    }

    @PostMapping("/api/exams/export")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @RequestBody final ExportExamReportRequest request) throws IOException {

        return assembler.toResource(service.createReport(user, request));
    }

}
