package org.opentestsystem.rdw.reporting.sandbox.service.impl;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.reporting.sandbox.Sandbox;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRole;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRoleRepository;
import org.opentestsystem.rdw.reporting.sandbox.service.SandboxService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class DefaultSandboxService implements SandboxService {
    private final TenantProperties tenantProperties;
    private final SandboxRoleRepository roleRepository;

    @Autowired
    public DefaultSandboxService(final TenantProperties tenantProperties,
                                 final SandboxRoleRepository roleRepository) {
        this.tenantProperties = tenantProperties;
        this.roleRepository = roleRepository;
    }

    @Override
    public Set<Sandbox> getSandboxes() {
        final Map<String, List<SandboxRole>> roleMap = this.findAllSandboxRoles();
        return this.tenantProperties.getTenants().values().stream()
                .filter(Tenant::isSandbox)
                .map(tenant -> Sandbox.builder()
                        .key(tenant.getKey())
                        .label(tenant.getName())
                        .roles(roleMap.get(tenant.getKey()))
                        .build())
                .collect(Collectors.toSet());
    }

    public Map<String, List<SandboxRole>> findAllSandboxRoles() {
        final Map<String, List<SandboxRole>> roleMap = new HashMap<>();

        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            if (tenant.isSandbox()) {
                TenantContextHolder.setTenantId(tenant.getId());
                final List<SandboxRole> roles = this.roleRepository.findAll();
                roleMap.put(tenant.getKey(), roles);
                TenantContextHolder.clear();
            }
        }

        return roleMap;
    }
}
