package org.opentestsystem.rdw.reporting.sandbox.service.impl;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.reporting.sandbox.Sandbox;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRole;
import org.opentestsystem.rdw.reporting.sandbox.SandboxRoleRepository;
import org.opentestsystem.rdw.reporting.sandbox.service.SandboxService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

@Service
public class DefaultSandboxService implements SandboxService {
    private final TenantProperties tenantProperties;
    private final SandboxRoleRepository roleRepository;

    @Autowired
    public DefaultSandboxService(final TenantProperties tenantProperties,
                                 final SandboxRoleRepository roleRepository) {
        this.tenantProperties = tenantProperties;
        this.roleRepository = roleRepository;
    }

    @Override
    public Set<Sandbox> getSandboxes() {
        final List<Tenant> sandboxes = tenantProperties.getTenants().values().stream()
                .filter(Tenant::isSandbox)
                .collect(toList());

        final Map<String, List<SandboxRole>> rolesBySandboxKey = getSandboxRolesByKey(sandboxes);
        return sandboxes.stream()
                .map(tenant ->
                        Sandbox.builder()
                                .key(tenant.getKey())
                                .label(tenant.getName())
                                .roles(rolesBySandboxKey.get(tenant.getKey()))
                                .build()
                )
                .collect(Collectors.toSet());
    }

    private Map<String, List<SandboxRole>> getSandboxRolesByKey(final List<Tenant> sandboxes) {
        final Map<String, List<SandboxRole>> rolesBySandboxKey = new HashMap<>();
        sandboxes.stream().forEach(tenant -> {
            TenantContextHolder.setTenantId(tenant.getId());
            final List<SandboxRole> roles = roleRepository.findAll();
            TenantContextHolder.clear();
            rolesBySandboxKey.put(tenant.getKey(), roles);
        });
        return rolesBySandboxKey;
    }

}
