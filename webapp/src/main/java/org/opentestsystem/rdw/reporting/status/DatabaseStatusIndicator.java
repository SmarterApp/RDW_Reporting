package org.opentestsystem.rdw.reporting.status;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    @Value("${sql.status.readTest}")
    private String sqlReadTest;

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TenantProperties tenantProperties;

    @Autowired
    DatabaseStatusIndicator(final NamedParameterJdbcTemplate jdbcTemplate,
                            final TenantProperties tenantProperties) {
        this.jdbcTemplate = jdbcTemplate;
        this.tenantProperties = tenantProperties;
    }

    @Override
    public String name() {
        return "database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());

            final Status.Builder opBuilder = Status.builder().detail("schema", "reporting").detail("type", "READ");
            final List<String> codes = responseTime(opBuilder, 50, () -> jdbcTemplate.getJdbcOperations().queryForList(sqlReadTest, String.class));
            if (codes.size() != AssessmentType.values().length) {
                opBuilder.rating(Rating.Warning);
                opBuilder.detail("warning", "asmt_type table not loaded properly");
            }

            final List<Status> ops = newArrayList(opBuilder.build());

            builder.detail("databaseOperations - " + tenant.getId(), ops);
            builder.worstRating(ops);

            TenantContextHolder.clear();
        }
    }
}
