package org.opentestsystem.rdw.reporting.search.exam;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.ScaleScore;
import org.opentestsystem.rdw.reporting.exam.StudentContext;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getNullable;

public final class Exams {

    private static final ClaimScaleScoreColumn[] CLAIM_SCALE_SCORE_COLUMNS = {
            new ClaimScaleScoreColumn("claim1_score_code", "claim1_category", "claim1_scale_score", "claim1_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim2_score_code", "claim2_category", "claim2_scale_score", "claim2_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim3_score_code", "claim3_category", "claim3_scale_score", "claim3_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim4_score_code", "claim4_category", "claim4_scale_score", "claim4_scale_score_std_err")
    };

    private Exams(){
    }

    public static <A extends Exam.Builder> A map(final ResultSet row, final A builder) throws SQLException {

        final Integer scaleScoreLevel = getNullable(row, row.getInt("performance_level"));
        final ScaleScore scaleScore = scaleScoreLevel == null ? null : ScaleScore.builder()
                .level(scaleScoreLevel)
                .value(row.getInt("scale_score"))
                .standardError(row.getDouble("scale_score_std_err"))
                .build();

        builder.id(row.getLong("id"))
                .sessionId(row.getString("session_id"))
                .dateTime(row.getTimestamp("completed_at").toInstant())
                .opportunity(getNullable(row, row.getLong("opportunity")))
                .completenessId(row.getInt("completeness_id"))
                .administrativeConditionId(row.getInt("administration_condition_id"))
                .scaleScore(scaleScore)
                .studentContext(StudentContext.builder()
                        .schoolYear(row.getInt("school_year"))
                        .gradeId(row.getInt("grade_id"))
                        .iep(row.getBoolean("iep"))
                        .lep(row.getBoolean("lep"))
                        .section504(row.getBoolean("section504"))
                        .economicDisadvantage(row.getBoolean("economic_disadvantage"))
                        .migrantStatus(getNullable(row, row.getBoolean("migrant_status")))
                        .build()
                );

        // Collects claim scores for ICA and Summative exams.
        // If a single claim is unscored a null entry will be put in the list to represent the unscored claim
        if (AssessmentType.valueOf(row.getInt("type_id")) != AssessmentType.IAB) {
            final List<ScaleScore> claimScaleScores = newArrayList();
            for (ClaimScaleScoreColumn column : CLAIM_SCALE_SCORE_COLUMNS) {

                final String claimCode = getNullable(row, row.getString(column.code));
                if (claimCode == null) {
                    break;
                }

                final Integer claimScaleScoreLevel = getNullable(row, row.getInt(column.level));
                final ScaleScore claimScaleScore = claimScaleScoreLevel == null ? null : ScaleScore.builder()
                        .level(claimScaleScoreLevel)
                        .value(row.getInt(column.value))
                        .standardError(row.getDouble(column.standardError))
                        .build();

                claimScaleScores.add(claimScaleScore);
            }
            builder.claimScaleScores(Collections.unmodifiableList(claimScaleScores));
        }

        return builder;
    }

    private static final class ClaimScaleScoreColumn {

        private final String code;
        private final String level;
        private final String value;
        private final String standardError;

        private ClaimScaleScoreColumn(
                final String code,
                final String level,
                final String value,
                final String standardError) {
            this.code = code;
            this.level = level;
            this.value = value;
            this.standardError = standardError;
        }

    }

}
