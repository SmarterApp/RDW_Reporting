package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.exam.ExamItem;
import org.opentestsystem.rdw.reporting.exam.ExamItems;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
class JdbcExamItemRepository implements ExamItemRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.item.findAllForExam}")
    private String findAllByExamAndStudentQuery;

    @Autowired
    JdbcExamItemRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<ExamItem> findAllByExamId(@NotNull final Map<String, Permission> permissions, Set<Long> groupIds, final long examId) {
        return template.query(
                findAllByExamAndStudentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissions))
                        .put("group_ids", nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS))
                        .put("exam_id", examId)
                        .build(),
                (row, index) -> ExamItems.map(row)
        );
    }
}
