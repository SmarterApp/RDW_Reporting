package org.opentestsystem.rdw.reporting.search.exam.schoolgrade;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.reporting.exam.GroupAssessment;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

@Service
class DefaultSchoolGradeAssessmentService implements SchoolGradeAssessmentService {

    private final SchoolGradeAssessmentRepository repository;
    private final SchoolGradeExamService examService;

    @Autowired
    public DefaultSchoolGradeAssessmentService(
            final SchoolGradeAssessmentRepository repository,
            final SchoolGradeExamService examService) {
        this.repository = repository;
        this.examService = examService;
    }

    public Optional<GroupAssessment> getLatestAssessment(@NotNull final User user, @NotNull final SchoolGradeAssessmentSearch search) {
        final PermissionScope securityContext = user.getPermissionsById().get(IndividualPiiRead).getScope();
        final Assessment assessment = repository.findLatest(securityContext, search);
        if (assessment == null) {
            return Optional.empty();
        }

        final SchoolGradeExamSearch examSearch = SchoolGradeExamSearch.builder()
                .schoolYear(search.getSchoolYear())
                .schoolId(search.getSchoolId())
                .gradeId(search.getGradeId())
                .assessmentId(assessment.getId())
                .build();

        final List<Exam> exams = examService.getExams(user, examSearch);
        return Optional.of(new GroupAssessment(assessment, exams));
    }

    public List<Assessment> getAllAssessments(@NotNull final User user, @NotNull final SchoolGradeAssessmentSearch search) {
        return ImmutableList.copyOf(repository.findAll(
                user.getPermissionsById().get(IndividualPiiRead).getScope(),
                search
        ));
    }

}
