package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableList;

import java.util.List;

/**
 * Represents a student who took an exam
 */
public class Student {

    private long id;
    private String firstName;
    private String lastName;
    private long genderId;
    private List<Long> ethnicityIds;

    private Student(){}

    /**
     * @return the student entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the student's given name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * @return the student's family name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * @return the student's gender entity ID
     */
    public long getGenderId() {
        return genderId;
    }

    /**
     * @return the student's ethnicities as codes
     */
    public List<Long> getEthnicityIds() {
        return ethnicityIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private long id;
        private String firstName;
        private String lastName;
        private long genderId;
        private List<Long> ethnicityIds;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder firstName(final String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(final String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder genderId(final long genderId) {
            this.genderId = genderId;
            return this;
        }

        public Builder ethnicityIds(final List<Long> ethnicityCodes) {
            this.ethnicityIds = ethnicityCodes;
            return this;
        }

        public Student build() {
            final Student student = new Student();
            student.id = id;
            student.firstName = firstName;
            student.lastName = lastName;
            student.genderId = genderId;
            student.ethnicityIds = ethnicityIds != null ? ImmutableList.copyOf(ethnicityIds) : ImmutableList.of();
            return student;
        }

    }

}
