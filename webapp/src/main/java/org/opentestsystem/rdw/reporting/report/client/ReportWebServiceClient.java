package org.opentestsystem.rdw.reporting.report.client;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

/**
 * This class acts as an interface to the report web service API
 */
public interface ReportWebServiceClient {

    /**
     * Gets all reports associated with the given user
     *
     * @param userId the user ID
     * @return all reports associated with the user
     */
    List<Report> getReports(String userId);

    /**
     * Gets all reports associated with the given user and report IDs
     *
     * @param userId the user ID
     * @param reportIds the IDs of the reports to get
     * @return all reports associated with the user
     */
    List<Report> getReports(String userId, Iterable<Long> reportIds);

    /**
     * Gets the report file input stream and writes it to the given output stream
     *
     * @param reportId the report ID
     */
    void streamReport(String userId, long reportId, @NotNull HttpServletResponse response);

    /**
     * Creates a new report
     *
     * @param request the report content parameters
     * @return a handle on the new report being created
     */
    Report createReport(BatchExamReportRequestHolder request);

}
