package org.opentestsystem.rdw.reporting.security.session;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.SerializationException;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.session.data.redis.config.ConfigureRedisAction;

import java.io.IOException;

/**
 * This class allows spring-redis to work in a secured redis environment
 */
@Configuration
@ConditionalOnProperty(name = "spring.session.store-type", havingValue = "redis")
public class SecuredRedisConfiguration {

    /**
     * This bean informs spring-redis to not configure session expiration and deletion keyspace events.
     * In a secured environment, these events must be configured manually by a redis admin.
     *
     * Without this instruction, spring-redis will try to configure redis to dispatch these events and cause a startup
     * exception.
     *
     * @return ConfigureRedisAction.NO_OP
     */
    @Bean
    public static ConfigureRedisAction configureRedisAction() {
        return ConfigureRedisAction.NO_OP;
    }

    @Bean
    @Primary
    public RedisTemplate<String, Object> redisTemplate(
            final RedisConnectionFactory connectionFactory,
            final ObjectMapper objectMapper) {

        final RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new RedisJsonSerializer(objectMapper));
        return template;
    }

    /**
     * TODO: move to org.opentestsystem.rdw.common
     *
     * This Redis serializer uses an ObjectMapper to serialize objects.
     */
    public class RedisJsonSerializer implements RedisSerializer<Object> {

        private final ObjectMapper objectMapper;

        /**
         * Constructor
         * This class clones and modifies the given ObjectMapper and configures it to embed
         * class type information in the serialized values so that they can be deserialized
         * without knowing the target class type ahead of time
         *
         * @param objectMapper The application ObjectMapper
         */
        public RedisJsonSerializer(final ObjectMapper objectMapper) {
            this.objectMapper = objectMapper.copy()
                    .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        }

        @Override
        public byte[] serialize(final Object value) throws SerializationException {
            try {
                return objectMapper.writeValueAsBytes(value);
            } catch (final JsonProcessingException exception) {
                throw new SerializationException("Redis is unable to serialize object", exception);
            }
        }

        @Override
        public Object deserialize(final byte[] bytes) throws SerializationException {
            if (bytes == null) {
                return null;
            }
            try {
                return objectMapper.readValue(bytes, Object.class);
            } catch (final IOException exception) {
                throw new SerializationException("Redis is unable to deserialize object", exception);
            }
        }
    }

}
