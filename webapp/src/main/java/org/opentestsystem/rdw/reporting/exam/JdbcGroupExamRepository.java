package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Optional;

@Repository
public class JdbcGroupExamRepository implements GroupExamRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.group.exam.findLatestForGroupAndSubject}")
    private String findLatestForGroupAndSubject;

    @Autowired
    public JdbcGroupExamRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Optional<GroupExam> findLatestForGroupAndSubject(final long groupId, final long subjectId) {
        final GroupExam exam = template.query(
                findLatestForGroupAndSubject,
                ImmutableMap.of(
                        "group_id", groupId,
                        "subject_id", subjectId
                ),
                row -> {
                    Assessment assessment = null;
                    final ImmutableSet.Builder<ExamSession> sessions = ImmutableSet.builder();
                    while (row.next()) {
                        // only make the assessment once
                        if (assessment == null) {
                            assessment = Assessment.builder()
                                    .id(row.getLong("assessment_id"))
                                    .name(row.getString("assessment_name"))
                                    .gradeId(row.getLong("assessment_grade_id"))
                                    .build();
                        }
                        sessions.add(new ExamSession(
                                row.getString("session_id"),
                                row.getTimestamp("completed_at").toInstant()
                        ));
                    }
                    return new GroupExam(assessment, sessions.build());
                }
        );
        // the assessment will be null when no results are returned
        return exam.getAssessment() != null
                ? Optional.of(exam)
                : Optional.empty();
    }
}
