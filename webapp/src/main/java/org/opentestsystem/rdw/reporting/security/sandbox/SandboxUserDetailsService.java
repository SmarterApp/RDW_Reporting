package org.opentestsystem.rdw.reporting.security.sandbox;

import com.google.common.collect.Maps;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.UserTenant;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import java.util.Set;
import java.util.UUID;

import static com.google.common.collect.Sets.newHashSet;

public class SandboxUserDetailsService implements AuthenticationUserDetailsService<SandboxAuthenticationToken> {

    @Override
    public UserDetails loadUserDetails(final SandboxAuthenticationToken token) throws UsernameNotFoundException {

        final String usernameAndId = UUID.randomUUID().toString();

        // TODO map role to authorities
        final Set<Permission> permissions = newHashSet(
                new Permission("INDIVIDUAL_PII_READ", PermissionScope.STATEWIDE)
        );

        final Set<GrantedAuthority> authorities = newHashSet(token.getAuthorities());
        authorities.add(new SimpleGrantedAuthority("ROLE_INDIVIDUAL_PII"));
        authorities.add(new SimpleGrantedAuthority("PERM_INDIVIDUAL_PII_READ"));


        return User.builderExt()
                // TODO use requested & valid sandbox key
                //.tenantId(token.getSandboxKey())
                .tenant(
                        UserTenant.builder()
                                .id("CA")
                                .sandbox(true)
                                .build()
                ) // because this is what is stubbed in our envs
                .id(usernameAndId)
                .username(usernameAndId)
                .password("N/A")
                .firstName(token.getUsername().trim())
                .lastName("")
                .permissionsById(Maps.uniqueIndex(permissions, Permission::getId))
                .enabled(true)
                .credentialsNonExpired(true)
                .accountNonExpired(true)
                .accountNonLocked(true)
                .authorities(authorities)
                .build();
    }

}
