package org.opentestsystem.rdw.reporting.security.authority;

import org.opentestsystem.rdw.reporting.common.sandbox.SandboxRole;
import org.opentestsystem.rdw.security.Permission;

import java.util.Collection;
import java.util.Set;

/**
 * Responsible for computing users' grants, roles and permissions
 */
public interface AuthorityService {

    /**
     * Computes authorities from encoded tenancy chain grants provided by ART.
     * This method guarantees non-repeating entries, and ignores redundant entries.
     * An entry is considered redundant when it is equal to another or contained within another entry.
     *
     * @param encodedGrants an array of encoded grant strings provided by ART as-is
     * @return set of unique role-specific authorities
     */
    Set<Authority> getAuthorities(String[] encodedGrants);

    /**
     * Computes the authorities for a given sandbox role
     *
     * @param role The sandbox role
     * @return the authorities granted by the given role
     */
    Set<Authority> getAuthorities(SandboxRole role);

    /**
     * Computes permissions from grants
     *
     * @param authorities the authorities for which to compute the permissions
     * @return the permissions for the given authorities
     */
    Set<Permission> getPermissions(Collection<Authority> authorities);

}
