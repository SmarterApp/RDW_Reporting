package org.opentestsystem.rdw.reporting.search.exam;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.ScaleScore;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getNullable;


public abstract class AbstractGroupAssessmentRepository {

    private static final int CLAIM_CODE_INDEX_START = 1;
    private static final int MAXIMUM_CLAIM_CODES = 4;
    protected final NamedParameterJdbcTemplate template;

    @Autowired
    public AbstractGroupAssessmentRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    protected Assessment findLatest(final String query, final Map<String, Object> parameters) {
        try {
            return template.queryForObject(query, parameters, this::buildAssessment);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
    }

    protected List<Assessment> findAll(final String query, final Map<String, Object> parameters) {
        return template.query(query, parameters, this::buildAssessment);
    }

    private Assessment buildAssessment(final ResultSet row, final int index) throws SQLException {

        final AssessmentType type = AssessmentType.valueOf(row.getInt("type_id"));

        final Assessment.Builder builder = Assessment.builder()
                .id(row.getLong("id"))
                .name(row.getString("label"))
                .gradeId(row.getInt("grade_id"))
                .type(type)
                .subject(Subject.valueOf(row.getInt("subject_id")))
                .schoolYear(row.getInt("school_year"))
                .cutPoints(ImmutableList.of(
                        row.getInt("min_score"),
                        row.getInt("cut_point_1"),
                        row.getInt("cut_point_2"),
                        row.getInt("cut_point_3"),
                        row.getInt("max_score")
                ));

        // IABs do not have claims
        if (type != AssessmentType.IAB) {
            final ImmutableList.Builder<String> claimCodes = ImmutableList.builder();
            for (int i = CLAIM_CODE_INDEX_START; i <= MAXIMUM_CLAIM_CODES; i++) {
                final String claimCode = row.getString(MessageFormat.format("claim_{0}_score_code", i));
                if (claimCode == null) {
                    break;
                }
                claimCodes.add(claimCode);
            }
            builder.claimCodes(claimCodes.build());
        }

        return builder.build();
    }

}
