package org.opentestsystem.rdw.reporting.security.sandbox;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Responsible for identifying requests that wish to login to a sandbox
 * <p>
 * This filter checks requests for specific parameters and then places a {@link SandboxAuthenticationToken}
 * in the {@link org.springframework.security.core.context.SecurityContext} if the request is for a sandbox
 */
public class SandboxAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

    // TODO move to common string util class
    private static boolean isNullOrBlank(final String value) {
        return value == null
                || value.trim().isEmpty();
    }

    private static final String SandboxKeyParameter = "sandboxKey";
    private static final String SandboxUsernameParameter = "username";
    private static final String SandboxRoleParameter = "role";

    protected SandboxAuthenticationFilter(final String processingUrl) {
        super(processingUrl);
    }

    @Override
    protected boolean requiresAuthentication(
            final HttpServletRequest request,
            final HttpServletResponse response) {

        return super.requiresAuthentication(request, response)
                && isValid(request);
    }

    @Override
    public Authentication attemptAuthentication(
            final HttpServletRequest request,
            final HttpServletResponse response) throws AuthenticationException {

        return this.getAuthenticationManager().authenticate(
                createAuthenticationRequestToken(request)
        );
    }

    private boolean isValid(final HttpServletRequest request) {
        final String sandboxKey = request.getParameter(SandboxKeyParameter);
        final String username = request.getParameter(SandboxUsernameParameter);
        final String role = request.getParameter(SandboxRoleParameter);
        return !isNullOrBlank(sandboxKey)
                && !isNullOrBlank(username)
                && !isNullOrBlank(role);
    }

    private SandboxAuthenticationToken createAuthenticationRequestToken(final HttpServletRequest request) {
        return SandboxAuthenticationToken.builder()
                .sandboxKey(request.getParameter(SandboxKeyParameter))
                .username(request.getParameter(SandboxUsernameParameter))
                .role(request.getParameter(SandboxRoleParameter))
                .build();
    }
}
