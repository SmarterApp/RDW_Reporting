package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableList;

import java.util.List;
import java.util.Objects;

/**
 * Represents an assessment taken by an individual or group
 */
public class Assessment {

    private long id;
    private String name;
    private long gradeId;
    private long typeId;
    private long subjectId;
    private long schoolYear;
    private List<Long> cutPoints; // TODO field not in IAB assessments - decide if this warrants a separate model

    /**
     * @return the assessment entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the assessment display name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the grade entity ID for the grade the assessment was designed for
     */
    public long getGradeId() {
        return gradeId;
    }

    /**
     * @return the assessment type entity ID. This value corresponds to types like IAB, ICA and Summative
     */
    public long getTypeId() {
        return typeId;
    }

    /**
     * @return the subject entity ID for the assessment. This value corresponds to subjects like MATH, ELA and ALL
     */
    public long getSubjectId() {
        return subjectId;
    }

    /**
     * @return the school year the assessment was designed for
     */
    public long getSchoolYear() {
        return schoolYear;
    }

    /**
     * Cut points are the fixed point values which separate the achievement levels for ICA and Summative assessments.
     * These points are sorted in ascending order beginning with the minimum score and ending with the maximum.
     * the maximum possible assessment score.
     *
     * @return the assessment cut points if the assessment is of type ICA or Summative. Empty if IAB
     */
    public List<Long> getCutPoints() {
        return cutPoints;
    }

    /**
     * This allows IAB and ICA/Summative exam's to not collide in {@link java.util.Set}s
     *
     * @param o the object to compare
     * @return <code>true</code> if the given object is an Assessment and has the same entity ID and type ID
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final Assessment that = (Assessment) o;
        return id == that.id && typeId == that.typeId;
    }

    /**
     * @return hash code based on the Assessment's entity ID and type ID
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, typeId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private long id;
        private String name;
        private long gradeId;
        private long typeId;
        private long subjectId;
        private long schoolYear;
        private List<Long> cutPoints;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder gradeId(final long gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder typeId(final long typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder subjectId(final long subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder schoolYear(final long schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder cutPoints(final List<Long> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.name = name;
            assessment.gradeId = gradeId;
            assessment.typeId = typeId;
            assessment.subjectId = subjectId;
            assessment.schoolYear = schoolYear;
            assessment.cutPoints = cutPoints != null ? ImmutableList.copyOf(cutPoints) : ImmutableList.of();
            return assessment;
        }

    }

}
