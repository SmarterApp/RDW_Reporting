package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableList;

import java.util.List;

/**
 * Represents an assessment taken by students
 */
public class Assessment {

    private long id;
    private String name;
    private long gradeId;
    private List<Long> cutPoints;

    private Assessment() {
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * @return the assessment's entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the assessment's display name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the assessment's target grade level entity ID
     */
    public long getGradeId() {
        return gradeId;
    }

    /**
     * Assessment cut points represent the various scale scores that separate one performance level from another.
     * This list will start with the minimum scale score and end with the maximum scale score and contain all other
     * scale score breaking points in between in ascending order.
     *
     * @return the assessment's cut points
     */
    public List<Long> getCutPoints() {
        return cutPoints;
    }

    public static class Builder {

        private long id;
        private String name;
        private long gradeId;
        private List<Long> cutPoints;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder gradeId(final long gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder cutPoints(final List<Long> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.name = name;
            assessment.gradeId = gradeId;
            assessment.cutPoints = cutPoints != null ? ImmutableList.copyOf(cutPoints) : ImmutableList.of();
            return assessment;
        }

    }

}
