package org.opentestsystem.rdw.reporting.sandbox;

import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
class JdbcSandboxRoleRepository implements SandboxRoleRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.sandboxRoles.findAll}")
    private String findAll;

    @Autowired
    JdbcSandboxRoleRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<SandboxRole> findAll() {
        return template.query(findAll, new MapSqlParameterSource(),
                (row, index) -> SandboxRole.builder()
                        .id(row.getString("id"))
                        .type(SandboxRoleType.valueOf(row.getString("type")))
                        .organization(
                                Organization.builder()
                                        .id(row.getLong("organization_id"))
                                        .name(row.getString("organization_name"))
                                        .naturalId(row.getString("organization_natural_id"))
                                        .organizationType(OrganizationType.valueOf(row.getString("organization_type")))
                                        .build()
                        )
                        .gradeCode(row.getString("grade_code"))
                        .build()
        );
    }

    @Override
    public SandboxRole findById(final String id) {
        return findAll().stream()
                .filter(role -> role.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

}
