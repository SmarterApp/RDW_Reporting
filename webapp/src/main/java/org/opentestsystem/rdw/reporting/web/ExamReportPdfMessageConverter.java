package org.opentestsystem.rdw.reporting.web;

import org.opentestsystem.rdw.reporting.service.ExamReport;
import org.opentestsystem.rdw.reporting.service.HtmlToPdfService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.stereotype.Component;

import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.nio.charset.Charset;
import java.text.MessageFormat;

@Component
public class ExamReportPdfMessageConverter extends AbstractHttpMessageConverter<ExamReportPdfExport> {

    private Template examReportTemplate;
    private HtmlToPdfService htmlToPdfService;

    @Autowired
    public ExamReportPdfMessageConverter(
            final @NotNull @Qualifier("examReportTemplate") Template examReportTemplate,
            final @NotNull HtmlToPdfService htmlToPdfService) {
        super(new MediaType(MediaType.APPLICATION_PDF, Charset.forName("UTF-8")));
        this.examReportTemplate = examReportTemplate;
        this.htmlToPdfService = htmlToPdfService;
    }

    @Override
    protected boolean supports(final Class<?> clazz) {
        return ExamReportPdfExport.class.equals(clazz);
    }

    @Override
    protected ExamReportPdfExport readInternal(
            final Class<? extends ExamReportPdfExport> clazz,
            final HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {
        return null;
    }

    @Override
    protected void writeInternal(
            final ExamReportPdfExport export,
            final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {

        final ExamReport report = export.getBody();

        final byte[] html = examReportTemplate.render(report, export.getLocale());
        final byte[] pdf = htmlToPdfService.createPdf(html, export.getOptions());

        // TODO make this reflect the exam report info
        final String filename = "report";
        final String contentDisposition = MessageFormat.format("attachment; filename={0}.pdf", filename);

        outputMessage.getHeaders().set("Content-disposition", contentDisposition);
        outputMessage.getBody().write(pdf);
    }

}
