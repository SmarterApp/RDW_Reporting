package org.opentestsystem.rdw.reporting.report.client;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;


@Service
class DefaultReportWebServiceClient implements ReportWebServiceClient {

    private final String url;
    private final RestTemplate template;

    @Autowired
    DefaultReportWebServiceClient(
            @Value("${app.reportservice.url}") final String url,
            @Qualifier("pdfAcceptingRestTemplate") final RestTemplate template) {
        this.url = url;
        this.template = template;
    }

    @Override
    public List<Report> getReports(final String userId) {
        final ResponseEntity<List<Report>> response = template.exchange(
                "{url}/api/reports?user={userId}", HttpMethod.GET, null,
                new ParameterizedTypeReference<List<Report>>() {}, url, userId);
        return getBodyOrThrowExceptionIfNotSuccessful(response);
    }

    @Override
    public ResponseEntity<Resource> getReport(final String userId, final long reportId) {
        // this implementation probably reads the content into memory
        // this could be improved by allowing the content to stream
        // see: https://stackoverflow.com/questions/32988370/download-large-file-from-server-using-rest-template-java-spring-mvc
        return template.exchange(
                "{url}/api/reports/{reportId}/content?user={userId}", HttpMethod.GET, null,
                Resource.class, url, reportId, userId);
    }

    @Override
    public Report createReport(final BatchExamReportRequestHolder request) {
        final ResponseEntity<Report> response = template.exchange(
                "{url}/api/reports", HttpMethod.POST, new HttpEntity<>(request), Report.class, url);
        return getBodyOrThrowExceptionIfNotSuccessful(response);
    }

    private <T> T getBodyOrThrowExceptionIfNotSuccessful(final ResponseEntity<T> response) {
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException(String.format(
                    "Report Service responded with error \"%s: %s\"",
                    response.getStatusCode().value(), response.getStatusCode().getReasonPhrase()));
        }
        return response.getBody();
    }

}
