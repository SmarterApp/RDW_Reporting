package org.opentestsystem.rdw.reporting.report.client;

import com.google.common.base.Joiner;
import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Service;
import org.springframework.web.client.ResponseExtractor;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;


@Service
class DefaultReportWebServiceClient implements ReportWebServiceClient {

    private final String url;
    private final RestTemplate template;

    @Autowired
    DefaultReportWebServiceClient(
            @Value("${app.reportservice.url}") final String url,
            @Qualifier("pdfAcceptingRestTemplate") final RestTemplate template) {
        this.url = url;
        this.template = template;
    }

    @Override
    public List<Report> getReports(final String userId) {
        final ResponseEntity<List<Report>> response = template.exchange(
                "{url}/api/reports?user={userId}", HttpMethod.GET, null,
                new ParameterizedTypeReference<List<Report>>() {}, url, userId);
        return getBodyOrThrowExceptionIfNotSuccessful(response);
    }

    @Override
    public List<Report> getReports(final String userId, final Iterable<Long> reportIds) {
        final ResponseEntity<List<Report>> response = template.exchange(
                "{url}/api/reports?user={userId}&id={reportIds}", HttpMethod.GET, null,
                new ParameterizedTypeReference<List<Report>>() {}, url, userId, reportIds);
        return getBodyOrThrowExceptionIfNotSuccessful(response);
    }

    @Override
    public void streamReport(final String userId, final long reportId, final HttpServletResponse response) {
        template.execute("{url}/api/reports/{reportId}/content?user={userId}",
                HttpMethod.GET, request -> {}, new StreamExtractor(response), url, reportId, userId);
    }

    @Override
    public Report createReport(final BatchExamReportRequestHolder request) {
        final ResponseEntity<Report> response = template.exchange(
                "{url}/api/reports", HttpMethod.POST, new HttpEntity<>(request), Report.class, url);
        return getBodyOrThrowExceptionIfNotSuccessful(response);
    }

    private <T> T getBodyOrThrowExceptionIfNotSuccessful(final ResponseEntity<T> response) {
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException(String.format(
                    "Report Service responded with error \"%s: %s\"",
                    response.getStatusCode().value(), response.getBody()));
        }
        return response.getBody();
    }

    /**
     * Directly writes rest template response body to output stream to avoid reading it into memory before writing it
     */
    private class StreamExtractor implements ResponseExtractor<Void> {

        private final Joiner HEADER_VALUE_JOINER = Joiner.on(",");
        private final HttpServletResponse response;

        StreamExtractor(final HttpServletResponse response) {
            this.response = response;
        }

        @Override
        public Void extractData(final ClientHttpResponse response) throws IOException {
            for (final Map.Entry<String, List<String>> entry : response.getHeaders().entrySet()) {
                this.response.setHeader(entry.getKey(), HEADER_VALUE_JOINER.join(entry.getValue()));
            }
            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException(String.format(
                        "Report Service responded with error \"%s: %s\"",
                        response.getStatusCode(), response.getStatusText()));
            }
            IOUtils.copy(response.getBody(), this.response.getOutputStream());
            return null;
        }

    }

}
