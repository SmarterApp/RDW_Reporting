package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.exam.AssessmentItem;
import org.opentestsystem.rdw.reporting.exam.AssessmentItemDifficultyRange;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

@Repository
class JdbcAssessmentItemRepository implements AssessmentItemRepository {

    private final NamedParameterJdbcTemplate template;
    private final String findAllForAssessmentQuery;
    private final String findDifficultyCutsForIdQuery;

    @Autowired
    public JdbcAssessmentItemRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @Value("${sql.assessment.item.findAllForAssessment}") final String findAllForAssessmentQuery,
            @Value("${sql.assessment.item.findDifficultyCutsForId}") final String findDifficultyCutsForIdQuery) {
        this.template = template;
        this.findAllForAssessmentQuery = findAllForAssessmentQuery;
        this.findDifficultyCutsForIdQuery = findDifficultyCutsForIdQuery;
    }

    @Override
    public List<AssessmentItem> findAllForAssessment(final long assessmentId) {

        final AssessmentItemDifficultyRange difficultyRange = findItemDifficultyRangeForId(assessmentId);
        if (difficultyRange == null) {
            return ImmutableList.of();
        }

        return template.query(
                findAllForAssessmentQuery,
                new MapSqlParameterSource("assessment_id", assessmentId),
                (row, index) -> AssessmentItem.builder()
                        .id(row.getLong("id"))
                        .difficulty(difficultyRange.getDifficulty(row.getDouble("difficulty")))
                        .maximumPoints(row.getInt("max_points"))
                        .claim(row.getString("claim"))
                        .target(row.getString("target"))
                        .build()
        );
    }

    private AssessmentItemDifficultyRange findItemDifficultyRangeForId(final long assessmentId) {
        try {
            return template.queryForObject(
                    findDifficultyCutsForIdQuery,
                    new MapSqlParameterSource("assessment_id", assessmentId),
                    (row, index) -> new AssessmentItemDifficultyRange(
                            row.getDouble("moderate_low_end"),
                            row.getDouble("difficult_low_end")
                    )
            );
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
    }

}
