package org.opentestsystem.rdw.reporting.security;

import org.opentestsystem.rdw.reporting.common.web.security.Http401NotAuthorizedNoChallengeEntryPoint;
import org.opentestsystem.rdw.reporting.security.saml.SamlWebSecurityConfiguration;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxAuthenticationFilter;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxAuthenticationProvider;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxSecurityConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.access.channel.ChannelProcessingFilter;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;

import java.util.LinkedHashMap;
import java.util.Set;
import java.util.stream.Stream;

/**
 * TODO SAML logout success URL and access denied URL should be tenant-specific with local fallbacks
 * to do this we will have to infer the tenant from the tenancy chain even for non-reporting roles
 */
@Configuration
@EnableWebSecurity
@Import({
        SandboxSecurityConfiguration.class
})
// Disables security for the CI build
// This way the CI server doesnt depend on a SAML IDP being configured
@ConditionalOnProperty(name = "app.test-mode", havingValue = "false", matchIfMissing = true)
public class WebSecurityConfiguration extends SamlWebSecurityConfiguration {

    @Autowired
    private Set<AbstractEndpoint> actuatorEndpoints;

    @Autowired
    private SandboxAuthenticationFilter sandboxAuthenticationFilter;

    @Autowired
    private SandboxAuthenticationProvider sandboxAuthenticationProvider;

    @Bean
    public DelegatingAuthenticationEntryPoint delegatingEntryPoint() {
        final LinkedHashMap<RequestMatcher, AuthenticationEntryPoint> entryPoints = new LinkedHashMap<>();
        entryPoints.put(new AntPathRequestMatcher("/api/**"), new Http401NotAuthorizedNoChallengeEntryPoint());

        final DelegatingAuthenticationEntryPoint delegatingEntryPoint = new DelegatingAuthenticationEntryPoint(entryPoints);
        delegatingEntryPoint.setDefaultEntryPoint(samlEntryPoint());
        return delegatingEntryPoint;
    }

    @Override
    protected void configure(final AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(samlAuthenticationProvider());
        auth.authenticationProvider(sandboxAuthenticationProvider);
    }

    @Override
    @Bean
    public LogoutSuccessHandler logoutSuccessHandler() {
        return new DefaultLogoutSuccessHandler(
                "/landing"
        );
    }

    @Override
    public AuthenticationSuccessHandler authenticationSuccessHandler() {
        final SavedRequestAwareAuthenticationSuccessHandler handler = new SavedRequestAwareAuthenticationSuccessHandler();
        handler.setDefaultTargetUrl("/");
        return handler;
    }

    @Override
    public AuthenticationFailureHandler authenticationFailureHandler() {
        final SimpleUrlAuthenticationFailureHandler handler = new SimpleUrlAuthenticationFailureHandler();
        handler.setDefaultFailureUrl("/access-denied");
        return handler;
    }


    @Override
    public void configure(final WebSecurity web) {
        web.ignoring().antMatchers(
                "/*.ico",
                "/assets/i18n/**",
                "/assets/public/**"
        );
    }

    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        super.configure(http);

        http.httpBasic()
                .authenticationEntryPoint(delegatingEntryPoint());

        // this filter must run first for load balancing to work
        http.addFilterBefore(forwardedHeaderFilter(), ChannelProcessingFilter.class);
        http.addFilterBefore(samlFilter(), BasicAuthenticationFilter.class);
        http.addFilterAfter(sandboxAuthenticationFilter, BasicAuthenticationFilter.class);

        final ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry authorizeRequests = http.authorizeRequests();

        // expose all public paths and do not require authentication on them
        Stream.concat(
                Stream.of(
                        "/",
                        "/landing",
                        "/sandbox-login",
                        "/keep-alive",
                        "/error",
                        "/error/**",
                        "/api/user",
                        "/api/sandboxes",
                        // TODO move angular resources from /static/ to /public/ to avoid security
                        // this is a hotfix to allow resources to load on /sandbox-login page
                        "/**/*.html",
                        "/**/*.js",
                        "/**/*.css",
                        "/**/*.png",
                        "/**/*.gif",
                        "/**/*.jpg",
                        "/**/*.jpeg",
                        "/**/*.ico",
                        "/**/*.svg",
                        "/**/*.woff2*",
                        "/**/*.woff*",
                        "/**/*.ttf*",
                        "/**/*.map"
                ),
                actuatorEndpoints.stream()
                        .map(endpoint -> "/" + endpoint.getId() + "/**")
        ).forEach(path -> authorizeRequests.antMatchers(path).permitAll());

        // protect all other paths and enforce authentication on them
        http.authorizeRequests()
                .anyRequest().authenticated();

        http.logout()
                .logoutSuccessHandler(logoutSuccessHandler());

        http.csrf()
                .disable();

        http.headers()
                .frameOptions().sameOrigin();

    }

}
