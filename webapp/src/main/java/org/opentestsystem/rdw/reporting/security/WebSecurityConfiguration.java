package org.opentestsystem.rdw.reporting.security;

import org.opentestsystem.rdw.reporting.security.saml.SamlWebSecurityConfiguration;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxAuthenticationFilter;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxAuthenticationProvider;
import org.opentestsystem.rdw.reporting.security.sandbox.SandboxSecurityConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

@Configuration
@Import({
        SandboxSecurityConfiguration.class
})
// Disables security for the CI build
// This way the CI server doesnt depend on a SAML IDP being configured
@ConditionalOnProperty(name = "app.test-mode", havingValue = "false", matchIfMissing = true)
public class WebSecurityConfiguration extends SamlWebSecurityConfiguration {

    @Autowired
    private SandboxAuthenticationFilter sandboxAuthenticationFilter;

    @Autowired
    private SandboxAuthenticationProvider sandboxAuthenticationProvider;

    @Override
    protected void configure(final AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(samlAuthenticationProvider());
        auth.authenticationProvider(sandboxAuthenticationProvider);
    }

    @Override
    public AuthenticationSuccessHandler authenticationSuccessHandler() {
        final SavedRequestAwareAuthenticationSuccessHandler handler = new SavedRequestAwareAuthenticationSuccessHandler();
        handler.setDefaultTargetUrl("/landing");
        return handler;
    }

    @Override
    public AuthenticationFailureHandler authenticationFailureHandler() {
        final SimpleUrlAuthenticationFailureHandler handler = new SimpleUrlAuthenticationFailureHandler();
        handler.setDefaultFailureUrl("/error/accessDenied");
        return handler;
    }

    @Override
    protected void configure(final HttpSecurity http) throws Exception {

        http.addFilterBefore(samlFilter(), BasicAuthenticationFilter.class);
        http.addFilterAfter(sandboxAuthenticationFilter, BasicAuthenticationFilter.class);

        http.authorizeRequests().antMatchers("/").permitAll();

        super.configure(http);
    }

}
