package org.opentestsystem.rdw.reporting.web;

import org.opentestsystem.rdw.reporting.common.export.PdfExamReportResponse;
import org.opentestsystem.rdw.reporting.common.export.processor.PdfExamReportProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.stereotype.Component;

import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.nio.charset.Charset;
import java.text.MessageFormat;

/**
 * Responsible for converting single exam reports into PDFs
 */
@Component
public class PdfExamReportMessageConverter extends AbstractHttpMessageConverter<PdfExamReportResponse> {

    private final PdfExamReportProcessor processor;

    @Autowired
    public PdfExamReportMessageConverter(final @NotNull PdfExamReportProcessor processor) {
        super(new MediaType(MediaType.APPLICATION_PDF, Charset.forName("UTF-8")));
        this.processor = processor;
    }

    @Override
    protected boolean supports(final Class<?> clazz) {
        return PdfExamReportResponse.class.equals(clazz);
    }

    @Override
    protected PdfExamReportResponse readInternal(
            final Class<? extends PdfExamReportResponse> clazz,
            final HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {

        throw new UnsupportedOperationException("Reading PDFs is not supported");
    }

    @Override
    protected void writeInternal(
            final PdfExamReportResponse export,
            final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {

        final byte[] pdf = processor.process(export.getReport(), export.getRequest(), "exam-template");

        // TODO make this reflect the exam report info
        final String filename = "report";
        final String contentDisposition = MessageFormat.format("attachment; filename={0}.pdf", filename);

        outputMessage.getHeaders().set(HttpHeaders.CONTENT_DISPOSITION, contentDisposition);
        outputMessage.getBody().write(pdf);
    }

}
