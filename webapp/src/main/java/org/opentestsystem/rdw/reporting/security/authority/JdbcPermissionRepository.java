package org.opentestsystem.rdw.reporting.security.authority;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang3.tuple.Pair;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.toList;

@Repository
public class JdbcPermissionRepository implements PermissionRepository {
    private final NamedParameterJdbcTemplate template;

    @Value("${sql.auth.findAll}")
    private String findAllAuthQuery;

    public JdbcPermissionRepository(NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Map<String, Collection<String>> findAll() {
        Map<String, List<String>> map = template.query(
            findAllAuthQuery,
            (row, index) -> map(row))
            .stream()
            .map(r -> (Pair<String,String>)r)
            .collect(groupingBy(Pair::getKey, mapping(Pair::getValue, toList())));

        // Convert to immutables.
        map.forEach((key, value) -> map.put(key, ImmutableList.copyOf(value)));
        return ImmutableMap.copyOf(map);
    }

    private static Pair<String,String> map(final ResultSet row) throws SQLException {
        return Pair.of(row.getString("role_name"), row.getString("permission_name"));
    }
}

