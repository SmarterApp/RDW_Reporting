package org.opentestsystem.rdw.reporting.search.exam;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.exam.ExamItemScore;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getSecurityParameters;

public abstract class AbstractExamItemRepository<T extends AbstractExamSearch> implements ExamItemRepository<T> {

    private final NamedParameterJdbcTemplate template;
    private final String findAllExamItemScoresForAssessmentQuery;

    protected AbstractExamItemRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findAllExamItemScoresForAssessmentQuery) {
        this.template = template;
        this.findAllExamItemScoresForAssessmentQuery = findAllExamItemScoresForAssessmentQuery;
    }

    abstract protected Map<String, Object> getParameters(final T search);

    @Override
    public List<ExamItemScore> findAllExamItemScoresForAssessment(
            @NotNull final PermissionScope permissionScope,
            @NotNull final T search) {

        return template.query(
                findAllExamItemScoresForAssessmentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("school_year", search.getSchoolYear())
                        .put("assessment_id", search.getAssessmentId())
                        .putAll(getParameters(search))
                        .build(),
                (row, index) -> ExamItemScore.builder()
                        .examId(row.getLong("exam_id"))
                        .itemId(row.getLong("item_id"))
                        .points(getNullable(row, row.getLong("score")))
                        .position(row.getInt("position"))
                        .build()
        );
    }

}
