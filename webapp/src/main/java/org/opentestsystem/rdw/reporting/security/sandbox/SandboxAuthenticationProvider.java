package org.opentestsystem.rdw.reporting.security.sandbox;

import org.opentestsystem.rdw.reporting.common.sandbox.SandboxRoleRepository;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;

public class SandboxAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {

    private final SandboxUserDetailsService userDetailsService;
    private final SandboxRoleRepository sandboxRoleRepository;

    public SandboxAuthenticationProvider(
            final SandboxUserDetailsService userDetailsService,
            final SandboxRoleRepository sandboxRoleRepository) {
        this.userDetailsService = userDetailsService;
        this.sandboxRoleRepository = sandboxRoleRepository;
    }

    @Override
    protected void additionalAuthenticationChecks(
            final UserDetails userDetails,
            final UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {

        final String role = ((SandboxAuthenticationToken) authentication).getRole();
        if (sandboxRoleRepository.findById(role) == null) {
            // The request was tampered with or someone's saved sandbox login link is no longer valid
            throw new AuthenticationServiceException(String.format(
                    "sandbox role \"%s\" not found",
                    role
            ));
        }
    }

    @Override
    protected UserDetails retrieveUser(
            final String username,
            final UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {

        return userDetailsService.loadUserDetails((SandboxAuthenticationToken) authentication);
    }

    @Override
    public boolean supports(final Class<?> authentication) {
        return SandboxAuthenticationToken.class.isAssignableFrom(authentication);
    }

}
