package org.opentestsystem.rdw.reporting.search.assessment;

import org.opentestsystem.rdw.reporting.exam.AssessmentItem;
import org.opentestsystem.rdw.reporting.exam.AssessmentItems;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;

@Repository
class JdbcAssessmentItemRepository implements AssessmentItemRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.assessment.item.findAllForAssessment}")
    private String findAllForAssessmentQuery;

    @Value("${sql.assessment.item.findAllForExam}")
    private String findAllForExamQuery;

    @Autowired
    public JdbcAssessmentItemRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<AssessmentItem> findAllForAssessment(final long assessmentId) {
        return template.query(
                findAllForAssessmentQuery,
                new MapSqlParameterSource("assessment_id", assessmentId)
                        .addValue("includeAllItemTypes", true)
                        .addValue("types", ""),
                (row, index) -> AssessmentItems.map(row)
        );
    }

    @Override
    public List<AssessmentItem> findAllForAssessmentAndTypes(final long assessmentId, final Collection<String> types) {
        return template.query(
                findAllForAssessmentQuery,
                new MapSqlParameterSource("assessment_id", assessmentId)
                        .addValue("includeAllItemTypes", false)
                        .addValue("types", types),
                (row, index) -> AssessmentItems.map(row)
        );
    }

    @Override
    public List<AssessmentItem> findAllForExam(final long examId) {
        return template.query(
                findAllForExamQuery,
                new MapSqlParameterSource("exam_id", examId),
                (row, index) -> AssessmentItems.map(row)
        );
    }
}
