package org.opentestsystem.rdw.reporting.zuul;

import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;

import javax.servlet.http.HttpServletResponse;
import java.net.URLConnection;
import java.util.Objects;

import static com.netflix.zuul.context.RequestContext.getCurrentContext;

/**
 * IRiS does not set the content type for resources it loads.  This causes a problem in IE11 when Spring Security sets the
 * X-Content-Type-Options: nosniff; header by default.  Rather than disabling this best practice header, this filter sets the
 * content type based on the file name of the resource provided by IRIS.
 */
public class IrisAwareContentTypeResponseFilter extends ZuulFilter {

    @Override
    public String filterType() {
        return "post";
    }

    @Override
    public int filterOrder() {
        return 999;
    }

    @Override
    public boolean shouldFilter() {
        RequestContext context = getCurrentContext();
        return isRequestUrlAnIrisResourceUrl(context) && isResponseMissingContentType(context);
    }

    @Override
    public Object run() {
        RequestContext context = getCurrentContext();
        String[] fileNames = context.getRequest().getParameterValues("file");

        if(fileNames != null && fileNames.length > 0) {
            HttpServletResponse response = context.getResponse();
            response.setHeader("Content-Type", URLConnection.guessContentTypeFromName(fileNames[0]));
        }

        return null;
    }

    private boolean isRequestUrlAnIrisResourceUrl(RequestContext context) {
        return context.getRequest().getRequestURI().toLowerCase().contains("/iris/pages/api/resources.axd");
    }

    private boolean isResponseMissingContentType(RequestContext context) {
        return context.getResponse().getHeaderNames().stream().noneMatch(x -> Objects.equals(x.toLowerCase(), "content-type"));
    }
}
