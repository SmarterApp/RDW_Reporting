package org.opentestsystem.rdw.reporting.jdbc;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.opentestsystem.rdw.reporting.security.PermissionScope;

import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * Holds common methods for preparing parameters for SQL queries
 */
public class Parameters {

    private static final List<Long> UNMATCHABLE_IDS = ImmutableList.of(-1L);

    private Parameters() {
    }

    /**
     * Returns the given collection or the given default collection if the collection is null or empty
     *
     * @param collection   the collection to test null and empty for
     * @param defaultValue the collection to return if the given collection is null or empty
     * @param <T>          the collection element type
     * @return the given collection or the given default collection if the collection is null or empty
     */
    public static <T> Collection<T> nullOrEmptyToDefault(final Collection<T> collection, final Collection<T> defaultValue) {
        if (collection == null || collection.isEmpty()) {
            return defaultValue;
        }
        return collection;
    }

    /**
     * Creates map of SQL query parameters for the given security context
     *
     * @param securityContext the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given security context
     */
    public static Map<String, Object> getSecurityParameters(final GroupSecurityContext securityContext) {
        return ImmutableMap.<String, Object>builder()
                .put("group_id", securityContext.getGroupGrant().getId())
                .put("group_subject_id", securityContext.getGroupGrant().getSubjectId())
                .putAll(getSecurityParameters(securityContext.getPermissionScope()))
                .build();
    }

    /**
     * Creates map of SQL query parameters for the given permission scope
     *
     * @param permissionScope the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given permission scope
     */
    public static Map<String, Object> getSecurityParameters(final PermissionScope permissionScope) {
        return ImmutableMap.<String, Object>builder()
                .put("statewide", permissionScope.isStatewide())
                .put("district_ids", nullOrEmptyToDefault(permissionScope.getDistrictIds(), UNMATCHABLE_IDS))
                .put("school_ids", nullOrEmptyToDefault(permissionScope.getInstitutionIds(), UNMATCHABLE_IDS))
                .build();
    }

}
