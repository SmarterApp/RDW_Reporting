package org.opentestsystem.rdw.reporting.report;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.report.client.ReportWebServiceClient;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.util.List;

@Service
class DefaultExamReportService implements ExamReportService {

    private final ReportWebServiceClient client;


    DefaultExamReportService(final ReportWebServiceClient client) {
        this.client = client;
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final StudentExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final SchoolGradeExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final GroupExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final ExportExamReportRequest request) {
        return createReportInternal(user,  request);
    }

    @Override
    public List<Report> getReports(@NotNull final User user) {
        return client.getReports(user.getUsername());
    }

    @Override
    public List<Report> getReports(@NotNull final User user, final Iterable<Long> reportIds) {
        return client.getReports(user.getUsername(), reportIds != null ? ImmutableSet.copyOf(reportIds) : ImmutableSet.of());
    }

    @Override
    public void streamReport(@NotNull final User user, final long reportId, @NotNull final HttpServletResponse response) {
        client.streamReport(user.getUsername(), reportId, response);
    }

    private <T extends AbstractExamReportRequest> Report createReportInternal(
            @NotNull final User user,
            @NotNull final T request) {

        final UserPermissions userPermissions = UserPermissions.builder()
                .permissionsById(user.getPermissionsById())
                .groupsById(user.getGroupsById())
                .build();

        final BatchExamReportRequestHolder holder = new BatchExamReportRequestHolder(
                request, userPermissions, user.getUsername(), request.getName());

        return client.createReport(holder);
    }

}
