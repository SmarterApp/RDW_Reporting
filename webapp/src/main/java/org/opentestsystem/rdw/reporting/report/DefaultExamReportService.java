package org.opentestsystem.rdw.reporting.report;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.report.client.ReportWebServiceClient;
import org.opentestsystem.rdw.reporting.common.report.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.IndividualPiiRead;

@Service
class DefaultExamReportService implements ExamReportService {

    private final ReportWebServiceClient client;


    DefaultExamReportService(final ReportWebServiceClient client) {
        this.client = client;
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final StudentExamReportRequest request) {
        return createReport(user, request, null);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final SchoolGradeExamReportRequest request) {
        final PermissionScope permissionScope = user.getPermissionsById().get(IndividualPiiRead).getScope();
        return createReport(user, request, permissionScope);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final GroupExamReportRequest request) {
        final PermissionScope permissionScope = user.getPermissionsById().get(GroupPiiRead).getScope();
        return createReport(user, request, permissionScope);
    }

    @Override
    public List<Report> getReports(@NotNull final User user) {
        return client.getReports(user.getUsername());
    }

    @Override
    public List<Report> getReports(@NotNull final User user, final Iterable<Long> reportIds) {
        return client.getReports(user.getUsername(), reportIds != null ? ImmutableSet.copyOf(reportIds) : ImmutableSet.of());
    }

    @Override
    public void streamReport(@NotNull final User user, final long reportId, @NotNull final HttpServletResponse response) {
        client.streamReport(user.getUsername(), reportId, response);
    }

    private <T extends AbstractExamReportRequest<PrintOptions>> Report createReport(
            @NotNull final User user,
            @NotNull final T request,
            @NotNull final PermissionScope permissionScope) {

        final UserPermissions userPermissions = UserPermissions.builder()
                .permissionsById(user.getPermissionsById())
                .groupsById(user.getGroupsById())
                .build();

        final BatchExamReportRequestHolder holder = new BatchExamReportRequestHolder(
                request, permissionScope, userPermissions, user.getUsername(), request.getName());

        return client.createReport(holder);
    }

}
