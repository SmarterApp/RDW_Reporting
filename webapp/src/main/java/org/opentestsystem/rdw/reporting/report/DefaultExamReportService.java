package org.opentestsystem.rdw.reporting.report;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.report.client.ReportWebServiceClient;
import org.opentestsystem.rdw.reporting.search.group.GroupRepository;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.io.OutputStream;
import java.util.List;
import java.util.NoSuchElementException;

@Service
class DefaultExamReportService implements ExamReportService {

    private final ReportWebServiceClient client;
    private final ExamReportExamRepository repository;


    DefaultExamReportService(final ReportWebServiceClient client, final ExamReportExamRepository repository) {
        this.client = client;
        this.repository = repository;
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final SchoolGradeExamReportRequest request) {
        final PermissionScope permissionScope = user.getPermissionsById().get("INDIVIDUAL_PII_READ").getScope();
        if (!repository.existsForSchoolAndAssessmentGradeAndSchoolYear(
                permissionScope, request.getSchoolId(), request.getGradeId(), request.getSchoolYear())) {
            throw new NoSuchElementException("There are no exams matching the given search criteria");
        }
        return createReport(user, request, permissionScope);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final GroupExamReportRequest request) {
        final PermissionScope permissionScope = user.getPermissionsById().get("GROUP_PII_READ").getScope();
        if (!repository.existsForGroupAndSchoolYear(
                permissionScope, request.getGroupGrant().getId(), request.getGroupGrant().getSubjectId(), request.getSchoolYear())) {
            throw new NoSuchElementException("There are no exams matching the given search criteria");
        }
        return createReport(user, request, permissionScope);
    }

    @Override
    public List<Report> getReports(@NotNull final User user) {
        return client.getReports(user.getUsername());
    }

    @Override
    public List<Report> getReports(@NotNull final User user, final Iterable<Long> reportIds) {
        return client.getReports(user.getUsername(), reportIds != null ? ImmutableSet.copyOf(reportIds) : ImmutableSet.of());
    }

    @Override
    public void streamReport(@NotNull final User user, final long reportId, @NotNull final HttpServletResponse response) {
        client.streamReport(user.getUsername(), reportId, response);
    }

    private <T extends AbstractBatchExamReportRequest<PrintOptions>> Report createReport(
            @NotNull final User user,
            @NotNull final T request,
            @NotNull final PermissionScope permissionScope) {

        final BatchExamReportRequestHolder holder = new BatchExamReportRequestHolder(
                request, permissionScope, user.getUsername(), request.getName());

        return client.createReport(holder);
    }

}
