package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.exam.ExamItemScore;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcStudentExamItemRepository implements StudentExamItemRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.student.exam.item.findAllForExamAndStudent}")
    private String findAllByExamAndStudentQuery;

    @Autowired
    JdbcStudentExamItemRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<ExamItemScore> findAllByExamId(@NotNull final PermissionScope permissionScope,
                                               final long studentId,
                                               final long examId) {
        return template.query(
                findAllByExamAndStudentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .put("exam_id", examId)
                        .build(),
                (row, index) -> ExamItemScore.builder()
                        .examId(row.getLong("exam_id"))
                        .itemId(row.getLong("item_id"))
                        .points(getNullable(row, row.getLong("score")))
                        .position(row.getInt("position"))
                        .build()
        );
    }
}
