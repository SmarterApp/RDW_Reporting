package org.opentestsystem.rdw.reporting.security.saml;

import com.google.common.collect.Maps;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.rdw.reporting.common.security.UserTenant;
import org.opentestsystem.rdw.reporting.security.authority.Authority;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Set;

import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.security.authority.AuthorityService;
import org.opentestsystem.rdw.security.Permission;

import static java.util.stream.Collectors.toSet;
import static org.opentestsystem.rdw.reporting.common.web.security.GrantedAuthorities.toGrantedAuthorities;

@Service
public class SamlUserDetailsService implements SAMLUserDetailsService {

    private static final Logger logger = LoggerFactory.getLogger(SamlUserDetailsService.class);
    private static final String REDACTED = "[REDACTED]";
    private final AuthorityService authorityService;

    @Autowired
    public SamlUserDetailsService(@NotNull AuthorityService authorityService) {
        this.authorityService = authorityService;
    }

    public Object loadUserBySAML(final SAMLCredential credential) throws UsernameNotFoundException {

        final String id = credential.getAttributeAsString("sbacUUID");
        final String firstName = credential.getAttributeAsString("givenName");
        final String lastName = credential.getAttributeAsString("sn");
        final String email = credential.getAttributeAsString("mail");
        final String[] encodedGrants = credential.getAttributeAsStringArray("sbacTenancyChain");

        // for SmarterBalanced SSO the user lookup value (aka username aka login) is configured to be "mail"
        final String username = email;

        // it may lead to confusion if the user's mail doesn't match their NameID
        // RDW doesn't directly care but log an info message to help diagnose issues in the field
        if (!username.equals(credential.getNameID().getValue())) {
            logger.info("User's login (mail:{}) does not match their name id (NameID:{})", username, credential.getNameID().getValue());
        }

        // the user must have reporting grants with a state so we can determine tenant id
        final Set<Authority> authorities = authorityService.getAuthorities(encodedGrants);
        final String stateId = authorities.stream()
                .map(Authority::getStateId)
                .filter(StringUtils::isNotBlank)
                .findFirst()
                .orElse(null);

        // Secures the application by returning a user without any permissions, authorities, or groups.
        if (authorities.isEmpty() || stateId == null) {
            logger.warn("Grants do not permit access to tenant for user \"{}\"", username);

            return User.builderExt()
                    .id(id)
                    .firstName(firstName)
                    .lastName(lastName)
                    .email(email)
                    .username(username)
                    .password(REDACTED)
                    .build();
        }

        // set tenant in thread local context during user info lookup
        TenantContextHolder.setTenantId(stateId);
        final Set<Permission> permissions = authorityService.getPermissions(authorities);
        TenantContextHolder.clear();

        return User.builderExt()
                .id(id)
                .firstName(firstName)
                .lastName(lastName)
                .email(email)
                .permissionsById(Maps.uniqueIndex(permissions, Permission::getId))
                .username(username)
                .password(REDACTED)
                .enabled(true)
                .credentialsNonExpired(true)
                .accountNonExpired(true)
                .accountNonLocked(true)
                .authorities(
                        toGrantedAuthorities(
                                authorities.stream().map(Authority::getRole).collect(toSet()),
                                permissions.stream().map(Permission::getId).collect(toSet())
                        )
                )
                .tenant(UserTenant.builder()
                        .id(stateId)
                        .sandbox(false)
                        .build()
                )
                .build();
    }

}
