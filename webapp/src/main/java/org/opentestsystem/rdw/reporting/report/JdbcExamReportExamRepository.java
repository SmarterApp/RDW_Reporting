package org.opentestsystem.rdw.reporting.report;

import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcExamReportExamRepository implements ExamReportExamRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.existsForSchoolAndAssessmentGradeAndSchoolYear}")
    private String existsForSchoolAndAssessmentGradeAndSchoolYear;

    @Value("${sql.exam.existsForGroupAndSchoolYear}")
    private String existsForGroupAndSchoolYear;

    @Autowired
    JdbcExamReportExamRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public boolean existsForSchoolAndAssessmentGradeAndSchoolYear(
            final PermissionScope permissionScope,
            final long schoolId,
            final int gradeId,
            final int schoolYear) {

        try {
            return template.queryForObject(
                    existsForSchoolAndAssessmentGradeAndSchoolYear,
                    new MapSqlParameterSource()
                            .addValues(getSecurityParameters(permissionScope))
                            .addValue("school_year", schoolYear)
                            .addValue("school_id", schoolId)
                            .addValue("grade_id", gradeId),
                    Boolean.class
            );
        } catch (final EmptyResultDataAccessException exception) {
            return false;
        }
    }

    @Override
    public boolean existsForGroupAndSchoolYear(
            final PermissionScope permissionScope,
            final long groupId,
            final int subjectId,
            final int schoolYear) {

        try {
            return template.queryForObject(
                    existsForGroupAndSchoolYear,
                    new MapSqlParameterSource()
                            .addValues(getSecurityParameters(permissionScope))
                            .addValue("school_year", schoolYear)
                            .addValue("group_id", groupId)
                            .addValue("group_subject_id", subjectId),
                    Boolean.class
            );
        } catch (final EmptyResultDataAccessException exception) {
            return false;
        }
    }

}
