package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.i18n.TranslationProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;

/**
 * This class provides translations from the configured {@link ReportingSystemSettings#getTranslationLocation()}.
 */
@Component
class DefaultExternalTranslationProvider implements TranslationProvider {
    private final static Logger logger = LoggerFactory.getLogger(DefaultExternalTranslationProvider.class);

    private final ReportingSystemSettings systemSettings;
    private final ResourceLoader resourceLoader;
    private final ObjectMapper objectMapper;

    @Autowired
    DefaultExternalTranslationProvider(final ReportingSystemSettings systemSettings,
                                       final ResourceLoader resourceLoader,
                                       final ObjectMapper objectMapper) {
        this.systemSettings = systemSettings;
        this.resourceLoader = resourceLoader;
        this.objectMapper = objectMapper;
    }

    @Override
    public int getOrder() {
        return 30;
    }

    @Override
    public ObjectNode getMessages(final Locale locale) {
        final Resource externalMessages = resourceLoader.getResource(getExternalLocation(locale));
        if (!externalMessages.exists()) {
            return objectMapper.createObjectNode();
        }

        try (final InputStream in = externalMessages.getInputStream()) {
            return (ObjectNode) objectMapper.readTree(in);
        } catch (final IOException e) {
            logger.warn("Unable to open translation resource: {}", externalMessages);
            return objectMapper.createObjectNode();
        }
    }

    private String getExternalLocation(final Locale locale) {
        return systemSettings.getTranslationLocation() + locale.getLanguage() + ".json";
    }
}
