package org.opentestsystem.rdw.reporting.report.export;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.StudentContexts;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.StudentContext;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
public class JdbcExamExportRepository implements ExamExportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.report.export.exam}")
    private String findAllForExamExportQuery;

    @Autowired
    public JdbcExamExportRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<ExamExport> findAllExamExports(final PermissionScope permissionScope, final ExamExportQuery query) {
        return template.query(
                findAllForExamExportQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope, "individual_"))
                        .putAll(getQueryParameters(query))
                        .build(),
                (row, index) -> ExamExport
                        .builder()
                        .exam(Exams.map(row, Exam.builder())
                                .student(Students.map(row, Student.builder(), "student_").build())
                                .studentContext(StudentContexts.map(row, StudentContext.builder()).build())
                                .build())
                        .assessment(mapAssessment(row, ExamExport.Assessment.builder()).build())
                        .school(mapSchool(row, ExamExport.School.builder()).build())
                        .build()
        );
    }

    private ExamExport.School.Builder mapSchool(final ResultSet row, final ExamExport.School.Builder builder) throws SQLException {
        return builder
                .name(row.getString("school_name"))
                .ncesId(row.getString("school_ncesid"))
                .naturalId(row.getString("school_natural_id"))
                .districtName(row.getString("district_name"))
                .districtNaturalId(row.getString("district_natural_id"));
    }

    private ExamExport.Assessment.Builder mapAssessment(final ResultSet row, final ExamExport.Assessment.Builder builder) throws SQLException {
        return builder
                .name(row.getString("asmt_label"))
                .subject(Subject.valueOf(row.getInt("asmt_subject_id")))
                .type(AssessmentType.valueOf(row.getInt("asmt_type_id")));
    }

    private Map<String, Object> getQueryParameters(final ExamExportQuery query) {
        final String prefix = "query_";

        return ImmutableMap.<String, Object>builder()
                .put(prefix + "district_group_ids", nullOrEmptyToDefault(query.getDistrictGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "district_ids", nullOrEmptyToDefault(query.getDistrictIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_group_ids", nullOrEmptyToDefault(query.getSchoolGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_ids", nullOrEmptyToDefault(query.getSchoolIds(), UNMATCHABLE_IDS))
                .build();
    }
}
