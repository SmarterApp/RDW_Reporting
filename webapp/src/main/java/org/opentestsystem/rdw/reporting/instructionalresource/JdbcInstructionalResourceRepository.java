package org.opentestsystem.rdw.reporting.instructionalresource;

import com.google.common.collect.MultimapBuilder;
import com.google.common.collect.Multimaps;
import com.google.common.collect.Ordering;
import com.google.common.collect.SortedSetMultimap;
import org.opentestsystem.rdw.reporting.instructionalresource.InstructionalResource.OrganizationLevel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Arrays;
import java.util.Map;
import java.util.SortedSet;

/**
 * JDBC implementation of an InstructionalResourceRepository.
 */
@Repository
class JdbcInstructionalResourceRepository implements InstructionalResourceRepository {
    static final Ordering<InstructionalResource> IROrdering = Ordering
            .explicit(Arrays.asList(OrganizationLevel.values()))
            .onResultOf(InstructionalResource::getOrganizationLevel);

    @Value("${sql.instructionalResource.findAllByAssessmentId}")
    private String findAllByAssessmentId;

    private final NamedParameterJdbcTemplate template;

    @Autowired
    public JdbcInstructionalResourceRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Map<Integer, SortedSet<InstructionalResource>> findByAssessmentAndSchool(final long assessmentId, final long schoolId) {
        final SortedSetMultimap<Integer, InstructionalResource> multimap = MultimapBuilder.hashKeys()
                .treeSetValues(IROrdering)
                .build();
        template.query(
                findAllByAssessmentId,
                new MapSqlParameterSource()
                        .addValue("asmt_id", assessmentId)
                        .addValue("school_id", schoolId),
                (row) -> {
                    final int performanceLevel = row.getInt("performance_level");
                    final InstructionalResource instructionalResource = InstructionalResource.builder()
                            .resource(row.getString("resource"))
                            .organizationLevel(OrganizationLevel.valueOf(row.getString("org_level")))
                            .organizationName(row.getString("org_name"))
                            .build();
                    multimap.put(performanceLevel, instructionalResource);
                });

        return Multimaps.asMap(multimap);
    }
}
