package org.opentestsystem.rdw.reporting.target;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;

@Repository
public class JdbcTargetRepository implements TargetRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.target.findOneById}")
    private String findOneByIdQuery;

    @Autowired
    public JdbcTargetRepository(@NotNull final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Optional<Target> findOneById(final int targetId) {
        try {
            return template.queryForObject(
                    findOneByIdQuery,
                    new MapSqlParameterSource("target_id", targetId),
                    this::mapTarget);
        }
        catch(EmptyResultDataAccessException ex){
            return Optional.empty();
        }
    }

    private Optional<Target> mapTarget(final ResultSet row, final int index) throws SQLException {
        return Optional.of(Target.builder()
                .id(row.getInt("id"))
                .description(row.getString("description"))
                .build());
    }
}
