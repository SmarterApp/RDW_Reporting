package org.opentestsystem.rdw.reporting.report.student;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.MultimapBuilder;
import com.google.common.collect.TreeMultimap;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.report.ExamReportPdfMessage;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollment;
import org.opentestsystem.rdw.reporting.common.report.iab.IabReport;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReport;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.time.Instant;
import java.util.Locale;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;

@Controller
class StudentExamReportPdfController {

    private final StudentExamReportPdfService service;

    @Autowired
    StudentExamReportPdfController(final StudentExamReportPdfService service) {
        this.service = service;
    }

    @GetMapping("/api/students/{studentId}/examReport")
    @ResponseBody
    public ExamReportPdfMessage getExamReport(
            @AuthenticationPrincipal final User user,
            final StudentExamReportPdfRequest request) {

        return service.getExamReport(user, request);
    }

    @GetMapping("/api/students/{studentId}/examReportHtml")
    public String ica(
            @AuthenticationPrincipal final User user,
            final StudentExamReportPdfRequest request,
            final ModelMap model) {
        model.put("report", service.getExamReport(user, request));
        model.put("request", request);
        return request.getAssessmentType() == ExamReportAssessmentType.ICA
            ? "ica-report" : "iab-report";
    }

    @GetMapping("/api/ica")
    public String ica(final ModelMap model) {
        model.put("report", createIca());
        model.put("request", createIcaRequest());
        return "ica-report";
    }

    @GetMapping("/api/iab")
    public String iab(final ModelMap model) {
        model.put("report", createIab());
        model.put("request", createIabRequest());
        return "iab-report";
    }

    private StudentExamReportPdfRequest createIabRequest() {
        return StudentExamReportPdfRequest.builder()
                .assessmentType(ExamReportAssessmentType.IAB)
                .subject(Subject.MATH)
                .schoolYear(2017)
                .language(Locale.ENGLISH)
                .options(new PrintOptions(false))
                .build();
    }

    private StudentExamReportPdfRequest createIcaRequest() {
        return StudentExamReportPdfRequest.builder()
                .assessmentType(ExamReportAssessmentType.ICA)
                .subject(Subject.ELA)
                .schoolYear(2017)
                .language(Locale.ENGLISH)
                .options(new PrintOptions(false))
                .build();
    }

    private IcaReport createIca() {
        return IcaReport.builder()
                .student(Student.builder()
                        .ssid("SSID")
                        .firstName("David")
                        .lastName("Cleveland")
                        .genderCode("Male")
                        .build()
                )
                .studentEnrollment(StudentEnrollment.builder()
                        .stateCode("CA")
                        .districtName("Los Angeles Unified")
                        .schoolName("Espanosa Elementary")
                        .gradeCode("04")
                        .build()
                )
                .assessment(Assessment.builder()
                        .name("ica1")
                        .schoolYear(2017)
                        .gradeCode("04")
                        .subject(Subject.ELA)
                        .type(AssessmentType.ICA)
                        .claimCodes(newArrayList("SOCK_R", "2-W", "SOCK_LS", "4-CR"))
                        .cutPoints(newArrayList(2189, 2382, 2436, 2501, 2621))
                        .build()
                )
                .exam(Exam.builder()
                        .dateTime(Instant.now())
                        .gradeCode("04")
                        .administrativeConditionCode("Valid")
                        .completenessCode("Complete")
                        .scaleScore(ScaleScore.builder().level(2).value(2463).standardError(10).build())
                        .claimScaleScores(newArrayList(
                                ScaleScore.builder().level(2).value(100).standardError(1).build(),
                                ScaleScore.builder().level(2).value(200).standardError(1).build(),
                                ScaleScore.builder().level(1).value(300).standardError(1).build(),
                                ScaleScore.builder().level(0).value(400).standardError(1).build()
                        ))
                        .build()
                )
                .build();
    }

    private IabReport createIab() {
        final Assessment iab1 = Assessment.builder()
                .name("Operations and Algebraic Thinking")
                .schoolYear(2017)
                .gradeCode("04")
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .cutPoints(newArrayList(2219, 0, 2528, 0, 2700))
                .build();

        final Assessment iab2 = Assessment.builder()
                .name("Mathematics Performance Task")
                .schoolYear(2017)
                .gradeCode("04")
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .cutPoints(newArrayList(2219, 0, 2528, 0, 2700))
                .build();

        final Exam iab1_exam1 = Exam.builder()
                .dateTime(Instant.now())
                .gradeCode("04")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(1111).standardError(21.0).build())
                .build();

        final Exam iab1_exam2 = Exam.builder()
                .dateTime(Instant.now())
                .gradeCode("04")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2222).standardError(21.0).build())
                .build();

        final Exam iab2_exam1 = Exam.builder()
                .dateTime(Instant.now())
                .gradeCode("04")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(3333).standardError(21.0).build())
                .build();

        final Exam iab2_exam2 = Exam.builder()
                .dateTime(Instant.now())
                .gradeCode("04")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(4444).standardError(21.0).build())
                .build();

        final Multimap<Assessment, Exam> assessments = MultimapBuilder
                .treeKeys(comparing(Assessment::getName))
                .arrayListValues()
                .build();
        assessments.put(iab1, iab1_exam1);
        assessments.put(iab1, iab1_exam2);
        assessments.put(iab2, iab2_exam1);
        assessments.put(iab2, iab2_exam2);

        return IabReport.builder()
                .student(Student.builder()
                        .ssid("SSID")
                        .firstName("David")
                        .lastName("Cleveland")
                        .genderCode("Male")
                        .build()
                )
                .studentEnrollment(StudentEnrollment.builder()
                        .stateCode("CA")
                        .districtName("Los Angeles Unified")
                        .schoolName("Espanosa Elementary")
                        .gradeCode("04")
                        .build()
                )
                .examsByAssessment(assessments.asMap())
                .build();
    }

}
