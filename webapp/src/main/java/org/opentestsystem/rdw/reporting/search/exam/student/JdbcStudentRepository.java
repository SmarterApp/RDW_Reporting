package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

@Repository
public class JdbcStudentRepository implements StudentRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.student.findOneBySsid}")
    private String findOneBySsidQuery;

    @Value("${sql.ethnicity.findEthnicityCodesByStudentId}")
    private String findEthnicityCodesByStudentIdQuery;

    @Autowired
    JdbcStudentRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Student findOneBySsid(@NotNull final String ssid) {
        try {
            return template.queryForObject(
                    findOneBySsidQuery,
                    new MapSqlParameterSource("ssid", ssid),
                    (row, index) -> {

                        final long studentId = row.getLong("id");

                        final List<String> ethnicityCodes = template.query(
                                findEthnicityCodesByStudentIdQuery,
                                new MapSqlParameterSource("student_id", studentId),
                                (ethnicityRow, ethnicityIndex) -> ethnicityRow.getString("code")
                        );

                        return Student.builder()
                                .id(studentId)
                                .ssid(ssid)
                                .firstName(row.getString("first_name"))
                                .lastName(row.getString("last_or_surname"))
                                .genderId(row.getLong("gender_id"))
                                .ethnicityCodes(ImmutableSet.copyOf(ethnicityCodes))
                                .build();
                    }
            );
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
    }
}
