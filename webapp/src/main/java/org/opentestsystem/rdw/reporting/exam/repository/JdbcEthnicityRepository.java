package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;

@Repository
class JdbcEthnicityRepository implements EthnicityRepository {

    private final NamedParameterJdbcTemplate template;
    private final String findEthnicityIdsForStudentIdsQuery;
    private final Map<Long, String> ethnicityCodesById;

    @Autowired
    public JdbcEthnicityRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @Value("${sql.ethnicity.findAll}") final String findAllQuery,
            @Value("${sql.ethnicity.findEthnicityIdsForStudentIds}") final String findEthnicityIdsForStudentIdsQuery) {

        // lookup and cache ethnicity ID to code mappings at startup
        final ImmutableMap.Builder<Long, String> builder = ImmutableMap.builder();
        template.query(findAllQuery, row -> {
            builder.put(row.getLong("id"), row.getString("name"));
        });

        this.ethnicityCodesById = builder.build();
        this.template = template;
        this.findEthnicityIdsForStudentIdsQuery = findEthnicityIdsForStudentIdsQuery;
    }

    @Override
    public Map<Long, List<String>> findEthnicityCodesForStudentIds(final Collection<Long> studentIds) {
        if (studentIds == null || studentIds.isEmpty()) {
            return newHashMap();
        }
        final Map<Long, List<String>> ethnicityCodesByStudentId = newHashMap();
        template.query(
                findEthnicityIdsForStudentIdsQuery,
                new MapSqlParameterSource("student_ids", studentIds),
                row -> {
                    final long studentId = row.getLong("student_id");
                    final String ethnicityCode = ethnicityCodesById.get(row.getLong("ethnicity_id"));

                    final List<String> studentEthnicityCodes = ethnicityCodesByStudentId.get(studentId);
                    if (studentEthnicityCodes == null) {
                        ethnicityCodesByStudentId.put(studentId, newArrayList(ethnicityCode));
                    } else {
                        studentEthnicityCodes.add(ethnicityCode);
                    }
                });
        return ethnicityCodesByStudentId;
    }
}
