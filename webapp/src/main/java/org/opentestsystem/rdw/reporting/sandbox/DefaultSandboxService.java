package org.opentestsystem.rdw.reporting.sandbox;

import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.Set;

@Service
public class DefaultSandboxService implements SandboxService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSandboxService.class);

    private TenantProperties tenantProperties;

    @Autowired
    public DefaultSandboxService(TenantProperties tenantProperties) {
        logger.info("Found {} tenants.", tenantProperties.getTenants().size());
        this.tenantProperties = tenantProperties;
    }

    @Override
    public Set<Sandbox> getSandboxes() {
        return getMockSandboxSet();
    }

    /**
     * @return temp collection of sandboxes that is required for sandbox login
     */
    public static Set<Sandbox> getMockSandboxSet() {
        Set<Role> caRoles = new HashSet<>();
        Role caRole_thg4 = Role.builder()
                .id("teacher_harborside_g4")
                .label("Teacher - Harborside - Grade 4")
                .build();
        caRoles.add(caRole_thg4);
        Role caRole_thg5 = Role.builder()
                .id("teacher_harborside_g5")
                .label("Teacher - Harborside - Grade 5")
                .build();
        caRoles.add(caRole_thg5);
        Role caRole_thg6 = Role.builder()
                .id("teacher_harborside_g5")
                .label("Teacher - Harborside - Grade 6")
                .build();
        caRoles.add(caRole_thg6);
        Role caRole_da_sw = Role.builder()
                .id("district_admin_sweetwater")
                .label("District Administrator - Sweetwater")
                .build();
        caRoles.add(caRole_da_sw);
        Role caRole_da_h = Role.builder()
                .id("district_admin_harborside")
                .label("District Administrator - Harborside")
                .build();
        caRoles.add(caRole_da_h);

        Set<Sandbox> sandboxes = new HashSet<>();
        Sandbox sandboxCa = Sandbox.builder()
                .key("ca_19091")
                .label("California Sandbox")
                .roles(caRoles)
                .build();
        sandboxes.add(sandboxCa);


        Set<Role> miRoles = new HashSet<>();
        Role miRole_tg6 = Role.builder()
                .id("teacher_rosebank_g6")
                .label("Teacher - Rosebank - Grade 6")
                .build();
        miRoles.add(miRole_tg6);
        Role miRole_tg5 = Role.builder()
                .id("teacher_rosebank_g7")
                .label("Teacher - Rosebank - Grade 7")
                .build();
        miRoles.add(miRole_tg5);
        Role miRole_tg8 = Role.builder()
                .id("teacher_rosebank_g8")
                .label("Teacher - Rosebank - Grade 8")
                .build();
        miRoles.add(miRole_tg8);
        Role miRole_da_d = Role.builder()
                .id("district_admin_detroit")
                .label("District Administrator - Detroit")
                .build();
        miRoles.add(miRole_da_d);
        Role miRole_da_l = Role.builder()
                .id("district_admin_landsing")
                .label("District Administrator - Landsing")
                .build();
        miRoles.add(miRole_da_l);
        Role miRole_da_gr = Role.builder()
                .id("school_admin_grand_rapids")
                .label("District Administrator -  Grand Rapids")
                .build();
        miRoles.add(miRole_da_gr);
        Sandbox sandboxMi = Sandbox.builder()
                .key("mi_42582")
                .label("Michigan Sandbox")
                .roles(miRoles)
                .build();
        sandboxes.add(sandboxMi);

        return sandboxes;
    }
}
