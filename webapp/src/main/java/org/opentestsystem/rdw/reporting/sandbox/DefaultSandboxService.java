package org.opentestsystem.rdw.reporting.sandbox;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

@Service
public class DefaultSandboxService implements SandboxService {
    private final SandboxRepository sandboxRepository;
    private final SandboxRoleRepository sandboxRoleRepository;

    @Autowired
    public DefaultSandboxService(final SandboxRepository sandboxRepository,
                                 final SandboxRoleRepository sandboxRoleRepository) {
        this.sandboxRepository = sandboxRepository;
        this.sandboxRoleRepository = sandboxRoleRepository;
    }

    @Override
    public List<Sandbox> getSandboxes() {
        final List<Tenant> sandboxes = sandboxRepository.findAll();

        final Map<String, List<SandboxRole>> rolesBySandboxKey = getSandboxRolesByKey(sandboxes);
        return sandboxes.stream()
                .map(tenant ->
                        Sandbox.builder()
                                .key(tenant.getKey())
                                .label(tenant.getName())
                                .roles(rolesBySandboxKey.get(tenant.getKey()))
                                .build()
                )
                .sorted(
                        Comparator
                                .comparing(Sandbox::getLabel)
                                .thenComparing(Sandbox::getKey)
                )
                .collect(toList());
    }

    private Map<String, List<SandboxRole>> getSandboxRolesByKey(final List<Tenant> sandboxes) {
        final Map<String, List<SandboxRole>> rolesBySandboxKey = new HashMap<>();
        // If a user is logged in and navigates to the sandbox login page, the
        // session context authentication will be set and will interfere with
        // the fetching of sandbox roles. So temporarily clear the context ...
        final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        SecurityContextHolder.getContext().setAuthentication(null);

        sandboxes.forEach(tenant -> {
            TenantContextHolder.setTenantId(tenant.getId());
            final List<SandboxRole> roles = sandboxRoleRepository.findAll();
            TenantContextHolder.clear();
            rolesBySandboxKey.put(tenant.getKey(), roles);
        });

        // ... and restore the session context authentication
        SecurityContextHolder.getContext().setAuthentication(authentication);

        return rolesBySandboxKey;
    }

}
