package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
class JdbcStudentExamRepository implements StudentExamRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.exam.findAllByStudentId}")
    private String findAllByStudentIdQuery;

    @Value("${sql.exam.existsForStudentId}")
    private String existsForStudentIdQuery;

    @Autowired
    JdbcStudentExamRepository(final NamedParameterJdbcTemplate template,
                              final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public List<StudentHistoryExamWrapper> findAllForStudent(@NotNull final Map<String, Permission> permissions,
                                                             final Set<Long> groupIds,
                                                             final long studentId) {
        return template.query(
                findAllByStudentIdQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(securityParameterProvider.getSecurityParameters(permissions))
                        .put("group_ids",  nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS))
                        .put("student_id", studentId)
                        .build(),
                (row, index) -> {
                    //Parse the Exam
                    final Exam exam = Exams.map(row, Exam.builder())
                            .schoolYear(row.getInt("school_year"))
                            .build();

                    //Parse the Assessment
                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_")
                            .build();

                    //Parse the School
                    final Organization school = new Organization(
                            row.getLong("school_id"),
                            row.getString("school_name"));

                    //Build the wrapper
                    return new StudentHistoryExamWrapper.Builder()
                            .exam(exam)
                            .assessment(assessment)
                            .build();
                }
        );
    }

    @Override
    public Student findStudentWithExams(@NotNull final Map<String, Permission> permissions,
                                        final Set<Long> groupIds,
                                        final String ssid) {
        try {
            return template.queryForObject(
                    existsForStudentIdQuery,
                    ImmutableMap.<String, Object>builder()
                            .putAll(securityParameterProvider.getSecurityParameters(permissions))
                            .put("group_ids",  nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS))
                            .put("student_ssid", ssid)
                            .build(),
                    (row, index) -> Student.builder()
                            .id(row.getLong("id"))
                            .ssid(ssid)
                            .firstName(row.getString("first_name"))
                            .lastName(row.getString("last_or_surname"))
                            .build());
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

}
