package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.StudentContext;
import org.opentestsystem.rdw.reporting.search.exam.Exams;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcStudentExamRepository implements StudentExamRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findAllByStudentId}")
    private String findAllByStudentIdQuery;

    @Value("${sql.exam.existsForStudentId}")
    private String existsForStudentIdQuery;

    @Autowired
    JdbcStudentExamRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Exam> findAllForStudent(@NotNull final PermissionScope permissionScope, final long studentId) {
        return template.query(
                findAllByStudentIdQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .build(),
                (row, index) -> Exams.map(row, Exam.builder())
                        .assessmentId(row.getLong("asmt_id"))
                        .schoolYear(row.getInt("school_year"))
                        .studentContext(StudentContext.builder()
                                .gradeId(row.getInt("grade_id"))
                                .build()
                        )
                        .build()
        );
    }

    @Override
    public boolean existsForStudent(@NotNull final PermissionScope permissionScope, final long studentId) {
        return !template.queryForList(
                existsForStudentIdQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .build(),
                Long.class).isEmpty();
    }

}
