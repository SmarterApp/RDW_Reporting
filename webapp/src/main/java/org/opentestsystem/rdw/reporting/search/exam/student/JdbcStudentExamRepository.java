package org.opentestsystem.rdw.reporting.search.exam.student;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.Organization;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.exam.StudentContext;
import org.opentestsystem.rdw.reporting.search.exam.Assessments;
import org.opentestsystem.rdw.reporting.search.exam.Exams;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcStudentExamRepository implements StudentExamRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findAllByStudentId}")
    private String findAllByStudentIdQuery;

    @Value("${sql.exam.existsForStudentId}")
    private String existsForStudentIdQuery;

    @Autowired
    JdbcStudentExamRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<StudentHistoryExamWrapper> findAllForStudent(@NotNull final PermissionScope permissionScope, final long studentId) {
        return template.query(
                findAllByStudentIdQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .build(),
                (row, index) -> {
                    //Parse the Exam
                    final Exam exam = Exams.map(row, Exam.builder())
                            .assessmentId(row.getLong("asmt_id"))
                            .schoolYear(row.getInt("school_year"))
                            .studentContext(StudentContext.builder()
                                    .gradeId(row.getInt("grade_id"))
                                    .build()
                            )
                            .build();

                    //Parse the Assessment
                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_")
                            .build();

                    //Parse the School
                    final Organization school = new Organization(
                            row.getLong("school_id"),
                            row.getString("school_name"));

                    //Build the wrapper
                    return new StudentHistoryExamWrapper.Builder()
                            .exam(exam)
                            .assessment(assessment)
                            .school(school)
                            .build();
                }
        );
    }

    @Override
    public Student findStudentWithExams(@NotNull final PermissionScope permissionScope, final String ssid) {
        try {
            return template.queryForObject(
                    existsForStudentIdQuery,
                    ImmutableMap.<String, Object>builder()
                            .putAll(getSecurityParameters(permissionScope))
                            .put("student_ssid", ssid)
                            .build(),
                    (row, index) -> Student.builder()
                            .id(row.getLong("id"))
                            .ssid(ssid)
                            .firstName(row.getString("first_name"))
                            .lastName(row.getString("last_or_surname"))
                            .build());
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

}
