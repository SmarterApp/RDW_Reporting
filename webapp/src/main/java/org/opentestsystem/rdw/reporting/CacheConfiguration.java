package org.opentestsystem.rdw.reporting;

import org.opentestsystem.rdw.multitenant.configprops.ConfigurationChangeCacheClearer;
import org.opentestsystem.rdw.reporting.common.multitenant.TenantCacheableConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.Scheduled;

@Configuration
@EnableCaching
@Import(TenantCacheableConfiguration.class)
public class CacheConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(CacheConfiguration.class);

    @Bean
    public ConfigurationChangeCacheClearer configurationChangeListener(final CacheManager cacheManager) {
        return new ConfigurationChangeCacheClearer(cacheManager);
    }

    /**
     * Clear the contents of the cache, underlying data can be modified by subject import
     */
    @Scheduled(fixedDelayString = "${app.cache.translation.refresh-delay}")
    @CacheEvict(cacheNames = {"jdbcTranslationProvider","translations"}, beforeInvocation = true, allEntries = true)
    public void clearJdbcTranslationCache() {
        logger.debug("clearing jdbcTranslationProvider and translations cache");
    }

}
