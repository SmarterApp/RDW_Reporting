package org.opentestsystem.rdw.reporting.web;

import org.springframework.boot.context.config.ResourceNotFoundException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.NoSuchElementException;

/**
 * Central REST API exception handling
 */
@ControllerAdvice
class ExceptionHandlerControllerAdvice extends ResponseEntityExceptionHandler {

    /**
     * @param exception original exception
     * @param request   request resulting in exception
     * @return BAD_REQUEST (400) response
     */
    @ExceptionHandler(IllegalArgumentException.class)
    protected ResponseEntity<Object> handleIllegalArgumentException(final RuntimeException exception, final WebRequest request) {
        return handleExceptionInternal(exception, HttpStatus.BAD_REQUEST.getReasonPhrase(), new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
    }

    /**
     * Maps {@link NoSuchElementException}, {@link ResourceNotFoundException} logically to HTTP 404
     * For security, this handler also masks {@link AccessDeniedException} which normally results in HTTP 403 to 404.
     * and all non-Spring Framework runtime exceptions normally resulting in HTTP 500 to 404
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler({
            ResourceNotFoundException.class,
            NoSuchElementException.class,
            AccessDeniedException.class,
            RuntimeException.class
    })
    protected ResponseEntity<Object> handleNotFound(final RuntimeException exception, final WebRequest request) {
        return handleExceptionInternal(exception, HttpStatus.NOT_FOUND.getReasonPhrase(), new HttpHeaders(), HttpStatus.NOT_FOUND, request);
    }

}
