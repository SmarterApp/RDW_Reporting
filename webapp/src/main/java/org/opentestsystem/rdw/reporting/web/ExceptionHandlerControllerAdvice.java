package org.opentestsystem.rdw.reporting.web;

import org.springframework.boot.context.config.ResourceNotFoundException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.NoSuchElementException;

/**
 * Central REST API exception handling
 */
@ControllerAdvice
class ExceptionHandlerControllerAdvice extends ResponseEntityExceptionHandler {

    /**
     * This catches Optional.get() when it is empty.
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler(NoSuchElementException.class)
    protected ResponseEntity<Object> handleNoSuchElementException(final RuntimeException exception, final WebRequest request) {
        return notFound(exception, request);
    }

    /**
     * This catches ResourceNotFoundException
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    protected ResponseEntity<Object> handleResourceNotFoundException(final RuntimeException exception, final WebRequest request) {
        return notFound(exception, request);
    }

    /**
     * @param exception original exception
     * @param request   request resulting in exception
     * @return BAD_REQUEST (400) response
     */
    @ExceptionHandler(IllegalArgumentException.class)
    protected ResponseEntity<Object> handleIllegalArgumentException(final RuntimeException exception, final WebRequest request) {
        return handleExceptionInternal(exception, HttpStatus.BAD_REQUEST.getReasonPhrase(), new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
    }

    /**
     * Catches all exceptions without explicitly defined handlers and maps them to an HTTP 404 not found response
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler(RuntimeException.class)
    protected ResponseEntity<Object> handleRemainingExceptions(final RuntimeException exception, final WebRequest request) {
        return notFound(exception, request);
    }

    /**
     * Creates an HTTP 404 not found response
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    private ResponseEntity<Object> notFound(final RuntimeException exception, final WebRequest request) {
        return handleExceptionInternal(exception, HttpStatus.NOT_FOUND.getReasonPhrase(), new HttpHeaders(), HttpStatus.NOT_FOUND, request);
    }

}
