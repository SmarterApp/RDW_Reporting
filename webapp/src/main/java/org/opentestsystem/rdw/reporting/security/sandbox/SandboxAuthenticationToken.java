package org.opentestsystem.rdw.reporting.security.sandbox;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

/**
 * Represents the sandbox login information needed to create a user object
 */
public class SandboxAuthenticationToken extends UsernamePasswordAuthenticationToken {

    private static final String NullPassword = "NA";
    private String sandboxKey;
    private String username;
    private String role;
    private String userId;
    private boolean sandboxLocked;
    private String logoutSuccessUrl;
    private String sessionRefreshUrl;

    private SandboxAuthenticationToken(final String username) {
        super(username, NullPassword);
    }

    public String getSandboxKey() {
        return sandboxKey;
    }

    public String getUsername() {
        return username;
    }

    public String getRole() {
        return role;
    }

    public String getUserId() {
        return userId;
    }

    public boolean isSandboxLocked() {
        return sandboxLocked;
    }

    public String getLogoutSuccessUrl() {
        return logoutSuccessUrl;
    }

    public String getSessionRefreshUrl() {
        return sessionRefreshUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String sandboxKey;
        private String username;
        private String role;
        private String userId;
        private boolean sandboxLocked;
        private String logoutSuccessUrl;
        private String sessionRefreshUrl;

        public Builder sandboxKey(final String sandboxKey) {
            this.sandboxKey = sandboxKey;
            return this;
        }

        public Builder username(final String username) {
            this.username = username;
            return this;
        }

        public Builder role(final String role) {
            this.role = role;
            return this;
        }

        public Builder userId(final String userId) {
            this.userId = userId;
            return this;
        }

        public Builder sandboxLocked(final boolean sandboxLocked) {
            this.sandboxLocked = sandboxLocked;
            return this;
        }

        public Builder logoutSuccessUrl(final String logoutSuccessUrl) {
            this.logoutSuccessUrl = logoutSuccessUrl;
            return this;
        }

        public Builder sessionRefreshUrl(final String sessionRefreshUrl) {
            this.sessionRefreshUrl = sessionRefreshUrl;
            return this;
        }

        public SandboxAuthenticationToken build() {
            final SandboxAuthenticationToken token = new SandboxAuthenticationToken(username);
            token.sandboxKey = sandboxKey;
            token.username = username;
            token.role = role;
            token.userId = userId;
            token.sandboxLocked = sandboxLocked;
            token.logoutSuccessUrl = logoutSuccessUrl;
            token.sessionRefreshUrl = sessionRefreshUrl;
            return token;
        }

    }

}
