package org.opentestsystem.rdw.reporting;

import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsResolver;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.i18n.TranslationConfiguration;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.opentestsystem.rdw.reporting.common.multitenant.TenantCacheableConfiguration;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.security.SecurityConfiguration;
import org.opentestsystem.rdw.security.repository.JdbcOrganizationRepository;
import org.opentestsystem.rdw.utils.ResourceLoaderConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration;
import org.springframework.boot.actuate.info.InfoContributor;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

@Configuration
@EnableCaching
@EnableZuulProxy
@Import({
        ResourceLoaderConfiguration.class,
        EndpointAutoConfiguration.class,
        StatusConfiguration.class,
        YamlPropertiesConfigurator.class,
        TenantCacheableConfiguration.class,
        SecurityConfiguration.class,
        JdbcOrganizationRepository.class, // needed by SecurityConfiguration
        SecurityParameterProvider.class, // needed by JdbcOrganizationRepository
        TranslationConfiguration.class,
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class
})
@EnableConfigurationProperties
@EnableTransactionManagement
@EnableAutoConfiguration(exclude = {
        DataSourceAutoConfiguration.class,
        DataSourceTransactionManagerAutoConfiguration.class,
        HibernateJpaAutoConfiguration.class
})
public class ApplicationConfiguration {

    @Bean
    public ReportingTenantIdResolver tenantIdResolver() {
        return new ReportingTenantIdResolver();
    }

    @Bean
    @ConfigurationProperties("reporting")
    @RefreshScope
    public ReportingSystemSettings reportingSystemSettings() {
        return new ReportingSystemSettings();
    }

    @Bean
    @RefreshScope
    public ReportingSystemPropertiesResolver reportingSystemPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                               ReportingSystemSettings reportingSystemSettings) {
        return new ReportingSystemPropertiesResolver(tenantKeyResolver, reportingSystemSettings);
    }

    @Bean
    @ConfigurationProperties("tenantProperties")
    @RefreshScope
    public TenantProperties tenantProperties() {
        return new TenantProperties();
    }

    @Bean
    public TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                               TenantIdResolver tenantIdResolver) {
        return new TenantKeyResolver(tenantProperties, tenantIdResolver);
    }

    @Bean
    public InfoContributor tenantConfigurationStatusInfoContributor(TenantProperties tenantProperties,
                                                                    DataSourceElementsProperties dataSourceElementsProperties,
                                                                    ReportingSystemSettings reportingSystemSettings) {
        return builder -> {
            //TODO: using the underlying @ConfigurationProperties name for the key, it might be better rename the
            // beans to be closer to the configuration
            builder.withDetail("tenantProperties", tenantProperties.getStatus());
            builder.withDetail("reporting", reportingSystemSettings.getStatus());
            builder.withDetail("datasources.reporting_rw", dataSourceElementsProperties.getStatus());
        };
    }


    /**
     * DataSourceProperties
     *
     * @return DataSourceProperties
     */
    @Bean(name = "writableDataSourceElementsProperties")
    @ConfigurationProperties("datasources.reporting_rw")
    @RefreshScope
    public DataSourceElementsProperties dataSourceElementsProperties() {
        return new DataSourceElementsProperties();
    }

    /**
     * writable DataSourceElementsResolver
     *
     * @param tenantKeyResolver            key resolver
     * @param dataSourceElementsProperties config properties
     * @return DataSourceElementsResolver
     */
    @Bean(name = "writableDataSourceElementsResolver")
    @RefreshScope
    public DataSourceElementsResolver writableDataSourceElementsResolver(TenantKeyResolver tenantKeyResolver,
                                                                         @Qualifier("writableDataSourceElementsProperties") DataSourceElementsProperties dataSourceElementsProperties) {
        return new DataSourceElementsResolver(tenantKeyResolver, dataSourceElementsProperties);
    }

    /**
     * Data source for the data warehouse.
     *
     * @param dataSourceElementsResolver reporting DataSourceElementsResolver
     * @param tenantKeyResolver          reporting tenant key resolver
     * @return DataSource
     */
    @Bean(name = "writableDataSource")
    @RefreshScope
    public DataSource writableDataSource(@Qualifier("writableDataSourceElementsResolver") DataSourceElements dataSourceElementsResolver,
                                 TenantKeyResolver tenantKeyResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElementsResolver, tenantKeyResolver);
    }

    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean
    public NamedParameterJdbcTemplate writableJdbcTemplate(
            @Qualifier("writableDataSource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The reporting transaction manager
     */
    @Bean
    public PlatformTransactionManager writableDatasourceTransactionManager(
            @Qualifier("writableDataSource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

}

