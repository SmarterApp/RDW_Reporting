package org.opentestsystem.rdw.reporting;

import org.opentestsystem.rdw.reporting.zuul.IrisAwareContentTypeResponseFilter;
import org.opentestsystem.rdw.reporting.zuul.IrisAwareFormBodyWrapperFilter;
import org.opentestsystem.rdw.security.client.permissionservice.PermissionWebServiceClient;
import org.opentestsystem.rdw.security.service.ComponentPermissionService;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.annotation.Order;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.filter.ForwardedHeaderFilter;

import static org.springframework.boot.autoconfigure.security.SecurityProperties.DEFAULT_FILTER_ORDER;

@Configuration
@EnableZuulProxy
public class ApplicationConfiguration {
    @Bean
    public PermissionWebServiceClient permissionWebServiceClient(
            @Value("${permissionservice.endpoint}") final String endpoint) {
        return new PermissionWebServiceClient(new RestTemplate(), endpoint);
    }

    @Bean
    public PermissionService defaultPermissionService(
            final PermissionWebServiceClient client,
            @Value("${permissionservice.component}") final String component) {
        return new ComponentPermissionService(client, component);
    }

    /**
     * Register a filter bean to extract values from "Forwarded" and "X-Forwarded-*" headers
     * in order to wrap and override the request schema, host, etc properties.
     *
     * @return The filter registration bean
     */
    @Bean
    public FilterRegistrationBean forwardedHeaderFilter() {
        final FilterRegistrationBean registrationBean = new FilterRegistrationBean(new ForwardedHeaderFilter());
        //Must fire before the security filter chain
        registrationBean.setOrder(DEFAULT_FILTER_ORDER - 100);
        return registrationBean;
    }

    /**
     * Overwrite the standard Zuul FormBodyWrapperFilter with one
     * able to deal with Iris.
     *
     * @return An Iris-capable FormBodyWrapperFilter bean
     */
    @Bean
    @Order(10)
    @Primary
    public FormBodyWrapperFilter formBodyWrapperFilter() {
        return new IrisAwareFormBodyWrapperFilter();
    }

    @Bean
    public IrisAwareContentTypeResponseFilter contentTypeResponseFilter() {
        return new IrisAwareContentTypeResponseFilter();
    }
}

