package org.opentestsystem.rdw.reporting.report;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;
import java.io.OutputStream;
import java.util.List;

/**
 * Responsible for managing exam reports
 */
public interface ExamReportService {

    /**
     * Creates a school grade scoped student exam report
     *
     * @param user    the user requesting the report
     * @param request settings which shape the content of the report
     * @return the created report handle
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Report createReport(@NotNull User user, @NotNull SchoolGradeExamReportRequest request);

    /**
     * Creates a group scoped student exam report
     *
     * @param user    the user requesting the report
     * @param request settings which shape the content of the report
     * @return the created report handle
     */
    @PreAuthorize("hasAuthority('PERM_GROUP_PII_READ') and #user.groupsById.containsKey(#request.groupGrant.id)")
    Report createReport(@NotNull User user, @NotNull GroupExamReportRequest request);

    /**
     * Gets the user's reports
     *
     * @param user the user to get reports for
     * @return the user's reports
     */
    List<Report> getReports(@NotNull User user);

    /**
     * Gets the report file input stream and writes it to the given output stream
     *
     * @param user         the report owner
     * @param reportId     the report ID
     * @param outputStream the output stream to write the report to
     */
    void streamReport(@NotNull User user, long reportId, final OutputStream outputStream);

}