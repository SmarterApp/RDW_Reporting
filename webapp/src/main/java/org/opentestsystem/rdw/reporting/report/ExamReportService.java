package org.opentestsystem.rdw.reporting.report;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * Responsible for managing exam reports
 */
public interface ExamReportService {

    /**
     * Creates an individual student exam report
     *
     * @param user    the user requesting the report
     * @param request settings which shape the content of the report
     * @return the created report handle
     */
    @PreAuthorize("hasAnyAuthority('PERM_INDIVIDUAL_PII_READ', 'PERM_GROUP_PII_READ')")
    Report createReport(@NotNull User user, @NotNull StudentExamReportRequest request);

    /**
     * Creates a school grade scoped student exam report
     *
     * @param user    the user requesting the report
     * @param request settings which shape the content of the report
     * @return the created report handle
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Report createReport(@NotNull User user, @NotNull SchoolGradeExamReportRequest request);

    /**
     * Creates a group scoped student exam report
     *
     * @param user    the user requesting the report
     * @param request settings which shape the content of the report
     * @return the created report handle
     */
    @PreAuthorize("hasAuthority('PERM_GROUP_PII_READ') and #request.groupGrant != null")
    Report createReport(@NotNull User user, @NotNull GroupExamReportRequest request);

    /**
     * Creates an exam export report
     *
     * @param user    the user requesting the report
     * @param request filters for exam data to return
     * @return the created report handle
     */
    @PreAuthorize("hasAuthority('PERM_INDIVIDUAL_PII_READ')")
    Report createReport(@NotNull User user, @NotNull ExportExamReportRequest request);

    /**
     * Gets the user's reports
     *
     * @param user the user to get reports for
     * @return the user's reports
     */
    List<Report> getReports(@NotNull User user);

    /**
     * Gets the user's reports that match the given IDs
     *
     * @param user the user to get reports for
     * @param reportIds the IDs of the reports to get
     * @return the user's reports
     */
    List<Report> getReports(@NotNull User user, Iterable<Long> reportIds);

    /**
     * Gets the report file input stream and writes it to the given output stream
     *
     * @param user     the report owner
     * @param reportId the report ID
     * @param response the response to write the report to
     */
    void streamReport(@NotNull User user, long reportId, @NotNull final HttpServletResponse response);

}