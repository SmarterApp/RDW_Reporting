package org.opentestsystem.rdw.reporting.security;

import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

class DefaultLogoutSuccessHandler implements LogoutSuccessHandler {

    private final String samlLogoutSuccessUrl;
    private final String sandboxLogoutSuccessUrl;

    DefaultLogoutSuccessHandler(
            final String samlLogoutSuccessUrl,
            final String sandboxLogoutSuccessUrl
    ) {
        this.samlLogoutSuccessUrl = samlLogoutSuccessUrl;
        this.sandboxLogoutSuccessUrl = sandboxLogoutSuccessUrl;
    }

    @Override
    public void onLogoutSuccess(
            final HttpServletRequest request,
            final HttpServletResponse response,
            final Authentication authentication) throws IOException {

        response.setStatus(HttpServletResponse.SC_OK);

        // gracefully handle hitting logout when not authenticated due to session expiry
        if (authentication == null || !(authentication.getPrincipal() instanceof User)) {
            response.sendRedirect(samlLogoutSuccessUrl);
            return;
        }

        final User user = (User) authentication.getPrincipal();
        response.sendRedirect(
                user.getTenant().isSandbox()
                        ? sandboxLogoutSuccessUrl
                        : samlLogoutSuccessUrl
        );
    }

}
