package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.assessment.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.ScaleScore;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;

@Repository
class JdbcGroupIcaSummativeExamRepository extends AbstractJdbcGroupExamRepository<Assessment.Builder, Exam.Builder> implements GroupIcaSummativeExamRepository {

    public JdbcGroupIcaSummativeExamRepository(
            @NotNull final EthnicityRepository ethnicityRepository,
            @NotNull final NamedParameterJdbcTemplate template,
            @Value("${sql.group.exam.icaSummative.findLatest}") final String findLatestQuery,
            @Value("${sql.group.assessment.icaSummative.findAll}") final String findAllQuery,
            @Value("${sql.group.exam.icaSummative.findAllForAssessment}") final String findAllForAssessmentQuery) {
        super(ethnicityRepository, template, findLatestQuery, findAllQuery, findAllForAssessmentQuery);
    }

    @Override
    protected Exam.Builder build(final Exam.Builder builder, final ResultSet row) throws SQLException {

        final ImmutableList.Builder<ScaleScore> claimScaleScores = ImmutableList.builder();

        // MATH exams only have 3 claims, ELA have 4
        final int endIndex = row.getObject("claim4_category", Integer.class) != null ? 4 : 3;

        for (int i = 1; i <= endIndex; i++) {
            claimScaleScores.add(ScaleScore.builder()
                    .level(row.getObject(MessageFormat.format("claim{0}_category", i), Long.class))
                    .value(row.getObject(MessageFormat.format("claim{0}_scale_score", i), Long.class))
                    .standardError(row.getObject(MessageFormat.format("claim{0}_scale_score_std_err", i), Double.class))
                    .build()
            );
        }

        return builder
                .claimScaleScores(claimScaleScores.build())
                .scaleScore(ScaleScore.builder()
                        .level(row.getObject("achievement_level", Long.class))
                        .value(row.getObject("scale_score", Long.class))
                        .standardError(row.getObject("scale_score_std_err", Double.class))
                        .build()
                );
    }

    @Override
    protected Assessment.Builder build(final Assessment.Builder builder, final ResultSet row) throws SQLException {
        return builder.cutPoints(ImmutableList.of(
                row.getLong("min_score"),
                row.getLong("cut_point_1"),
                row.getLong("cut_point_2"),
                row.getLong("cut_point_3"),
                row.getLong("max_score")
        ));
    }

}
