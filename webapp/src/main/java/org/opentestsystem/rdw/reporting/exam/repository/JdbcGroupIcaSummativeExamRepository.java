package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.assessment.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.ScaleScore;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;

@Repository
public class JdbcGroupIcaSummativeExamRepository extends AbstractJdbcGroupExamRepository<Assessment.Builder, Exam.Builder> implements GroupIcaSummativeExamRepository {

    private static final int CLAIM_SCALE_SCORE_START_INDEX = 1;
    private static final int TOTAL_CLAIM_SCALE_SCORES = 4;


    public JdbcGroupIcaSummativeExamRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @Value("${sql.group.exam.icaSummative.findLatest}") final String findLatestQuery,
            @Value("${sql.group.assessment.icaSummative.findAll}") final String findAllQuery,
            @Value("${sql.group.exam.icaSummative.findAllForAssessment}") final String findAllForAssessmentQuery) {
        super(template, findLatestQuery, findAllQuery, findAllForAssessmentQuery);
    }

    @Override
    protected Exam.Builder build(final Exam.Builder builder, final ResultSet row) throws SQLException {

        final ImmutableList.Builder<ScaleScore> claimScaleScores = ImmutableList.builder();
        for (int i = CLAIM_SCALE_SCORE_START_INDEX; i <= TOTAL_CLAIM_SCALE_SCORES; i++) {
            claimScaleScores.add(ScaleScore.builder()
                    .level(row.getLong(MessageFormat.format("claim{0}_category", i)))
                    .value(row.getLong(MessageFormat.format("claim{0}_scale_score", i)))
                    .standardError(row.getLong(MessageFormat.format("claim{0}_scale_score_std_err", i)))
                    .build()
            );
        }

        return super.build(builder, row)
                .claimScaleScores(claimScaleScores.build())
                .scaleScore(ScaleScore.builder()
                        .level(row.getLong("achievement_level"))
                        .value(row.getLong("scale_score"))
                        .standardError(row.getLong("scale_score_std_err"))
                        .build()
                );
    }

    @Override
    protected Assessment.Builder build(final Assessment.Builder builder, final ResultSet row) throws SQLException {
        return super.build(builder, row)
                .cutPoints(ImmutableList.of(
                        row.getLong("min_score"),
                        row.getLong("cut_point_1"),
                        row.getLong("cut_point_2"),
                        row.getLong("cut_point_3"),
                        row.getLong("max_score")
                ));
    }

}
