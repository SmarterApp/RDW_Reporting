package org.opentestsystem.rdw.reporting.search.exam;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.exam.StudentContext;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getSecurityParameters;


public abstract class AbstractExamRepository<T extends AbstractExamSearch> implements ExamRepository<T> {


    private final NamedParameterJdbcTemplate template;
    private final String findAllForAssessmentQuery;

    @Value("${sql.ethnicity.findEthnicityCodesByStudentIds}")
    private String findEthnicityCodesByStudentIdsQuery;

    protected AbstractExamRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findAllForAssessmentQuery) {
        this.template = template;
        this.findAllForAssessmentQuery = findAllForAssessmentQuery;
    }

    abstract protected Map<String, Object> getParameters(final T search);

    public List<Exam> findAllForAssessment(@NotNull final PermissionScope permissionScope, @NotNull final T search) {
        return template.query(
                findAllForAssessmentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("school_year", search.getSchoolYear())
                        .put("assessment_id", search.getAssessmentId())
                        .putAll(getParameters(search))
                        .build(),
                this::buildExams
        );
    }

    public List<Exam> buildExams(final ResultSet row) throws SQLException {

        final List<Exam> exams = newArrayList();
        final List<Exam.Builder> examBuilders = newArrayList();
        final Set<Long> studentIds = newHashSet();

        while (row.next()) {

            final Exam.Builder examBuilder = Exam.builder()
                    .studentContext(StudentContext.builder()
                            .schoolYear(row.getInt("school_year"))
                            .gradeId(row.getInt("grade_id"))
                            .iep(row.getBoolean("iep"))
                            .lep(row.getBoolean("lep"))
                            .section504(row.getBoolean("section504"))
                            .economicDisadvantage(row.getBoolean("economic_disadvantage"))
                            .migrantStatus(getNullable(row, row.getBoolean("migrant_status")))
                            .build()
                    );

            examBuilders.add(Exams.map(row, examBuilder));
            studentIds.add(row.getLong("student_id"));
        }

        final Map<Long, Set<String>> ethnicityCodesByStudentId = findEthnicityCodesForStudentIds(studentIds);

        row.beforeFirst();
        for (int i = 0; row.next(); i++) {
            final Exam.Builder examBuilder = examBuilders.get(i);
            final long studentId = row.getLong("student_id");
            final Set<String> ethnicityCodes = ethnicityCodesByStudentId.get(studentId);
            examBuilder.student(Student.builder()
                    .id(studentId)
                    .firstName(row.getString("student_first_name"))
                    .lastName(row.getString("student_last_name"))
                    .genderId(row.getLong("student_gender_id"))
                    .genderCode(row.getString("student_gender_code"))
                    .ethnicityCodes(ethnicityCodes)
                    .build()
            );
            exams.add(examBuilder.build());
        }

        return exams;
    }

    private Map<Long, Set<String>> findEthnicityCodesForStudentIds(final Collection<Long> studentIds) {
        if (studentIds == null || studentIds.isEmpty()) {
            return ImmutableMap.of();
        }
        final Map<Long, Set<String>> ethnicityCodesByStudentId = newHashMap();
        template.query(
                findEthnicityCodesByStudentIdsQuery,
                new MapSqlParameterSource("student_ids", studentIds),
                row -> {
                    final long studentId = row.getLong("student_id");
                    final String ethnicityCode = row.getString("ethnicity_code");

                    final Set<String> studentEthnicityCodes = ethnicityCodesByStudentId.get(studentId);
                    if (studentEthnicityCodes == null) {
                        ethnicityCodesByStudentId.put(studentId, newHashSet(ethnicityCode));
                    } else {
                        studentEthnicityCodes.add(ethnicityCode);
                    }
                });
        return ethnicityCodesByStudentId;
    }

}
