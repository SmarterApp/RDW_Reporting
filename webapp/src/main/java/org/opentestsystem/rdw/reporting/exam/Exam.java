package org.opentestsystem.rdw.reporting.exam;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.common.model.AssessmentType;

import java.time.Instant;
import java.util.Collections;
import java.util.List;

/**
 * Represents a single assessment examination event
 */
public class Exam {

    private long id;
    private String sessionId;
    private Instant dateTime;
    private Student student;
    private StudentContext studentContext;
    private Long opportunity;
    private int administrativeConditionId;
    private int completenessId;
    private ScaleScore scaleScore;
    private List<ScaleScore> claimScaleScores;

    private Exam() {
    }

    /**
     * @return the exam entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the exam session ID (may be null)
     */
    public String getSessionId() {
        return sessionId;
    }

    /**
     * @return the datetime of exam completion
     */
    public Instant getDateTime() {
        return dateTime;
    }

    /**
     * @return the student's attempt number on the assessment
     */
    public Long getOpportunity() {
        return opportunity;
    }

    /**
     * @return the student who took the exam
     */
    public Student getStudent() {
        return student;
    }

    /**
     * @return contextual information surrounding the student and the circumstances under which the student took the exam
     */
    public StudentContext getStudentContext() {
        return studentContext;
    }

    /**
     * @return the overall exam score
     */
    public ScaleScore getScaleScore() {
        return scaleScore;
    }

    /**
     * @return the completeness of the exam (partial, complete)
     */
    public int getCompletenessId() {
        return completenessId;
    }

    /**
     * @return the condition in which the exam was administered (valid, invalid, standard, non standard)
     */
    public int getAdministrativeConditionId() {
        return administrativeConditionId;
    }

    /**
     * Only ICA and Summative exams have claims and therefore claim scores.
     * This collection will be null for IABs.
     *
     * @return the scale scores for each claim on the exam
     */
    public List<ScaleScore> getClaimScaleScores() {
        return claimScaleScores;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private long id;
        private String sessionId;
        private Instant dateTime;
        private Long opportunity;
        private Student student;
        private StudentContext studentContext;
        private ScaleScore scaleScore;
        private int completenessId;
        private int administrativeConditionId;
        private List<ScaleScore> claimScaleScores;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder sessionId(final String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public Builder dateTime(final Instant dateTime) {
            this.dateTime = dateTime;
            return this;
        }

        public Exam build() {
            final Exam exam = new Exam();
            exam.id = id;
            exam.sessionId = sessionId;
            exam.dateTime = dateTime;
            exam.opportunity = opportunity;
            exam.student = student;
            exam.studentContext = studentContext;
            exam.scaleScore = scaleScore;
            exam.completenessId = completenessId;
            exam.administrativeConditionId = administrativeConditionId;
            exam.claimScaleScores = claimScaleScores != null ? Collections.unmodifiableList(claimScaleScores) : null;
            return exam;
        }

        public Builder opportunity(final Long opportunity) {
            this.opportunity = opportunity;
            return this;
        }

        public Builder student(final Student student) {
            this.student = student;
            return this;
        }

        public Builder studentContext(final StudentContext studentContext) {
            this.studentContext = studentContext;
            return this;
        }

        public Builder scaleScore(final ScaleScore scaleScore) {
            this.scaleScore = scaleScore;
            return this;
        }

        public Builder completenessId(final int completenessId) {
            this.completenessId = completenessId;
            return this;
        }

        public Builder administrativeConditionId(final int administrativeConditionId) {
            this.administrativeConditionId = administrativeConditionId;
            return this;
        }

        public Builder claimScaleScores(final List<ScaleScore> claimScaleScores) {
            this.claimScaleScores = claimScaleScores;
            return this;
        }

    }

}
