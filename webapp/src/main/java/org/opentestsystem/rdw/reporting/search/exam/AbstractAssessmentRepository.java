package org.opentestsystem.rdw.reporting.search.exam;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.exam.Assessment;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.jdbc.QueryUtils.getSecurityParameters;


public abstract class AbstractAssessmentRepository<T extends AbstractAssessmentSearch> implements AssessmentRepository<T> {

    private static final String[] CLAIM_CODE_COLUMN_NAMES = {
            "claim1_score_code",
            "claim2_score_code",
            "claim3_score_code",
            "claim4_score_code"
    };

    protected final NamedParameterJdbcTemplate template;
    private final String findLatestQuery;
    private final String findAllQuery;

    public AbstractAssessmentRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findLatestQuery,
            @NotNull final String findAllQuery) {
        this.template = template;
        this.findLatestQuery = findLatestQuery;
        this.findAllQuery = findAllQuery;
    }

    abstract protected Map<String, Object> getParameters(final T search);

    private Map<String, Object> createParameters(final PermissionScope permissionScope, final T search) {
        return ImmutableMap.<String, Object>builder()
                .putAll(getSecurityParameters(permissionScope))
                .put("school_year", search.getSchoolYear())
                .putAll(getParameters(search))
                .build();
    }

    public Assessment findLatest(@NotNull final PermissionScope permissionScope, @NotNull final T search) {
        try {
            return template.queryForObject(findLatestQuery, createParameters(permissionScope, search), this::buildAssessment);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
    }

    public List<Assessment> findAll(@NotNull final PermissionScope permissionScope, @NotNull final T search) {
        return template.query(findAllQuery, createParameters(permissionScope, search), this::buildAssessment);
    }

    private Assessment buildAssessment(final ResultSet row, final int index) throws SQLException {

        final AssessmentType type = AssessmentType.valueOf(row.getInt("type_id"));

        final Assessment.Builder builder = Assessment.builder()
                .id(row.getLong("id"))
                .name(row.getString("label"))
                .gradeId(row.getInt("grade_id"))
                .type(type)
                .subject(Subject.valueOf(row.getInt("subject_id")))
                .schoolYear(row.getInt("school_year"))
                .cutPoints(ImmutableList.of(
                        row.getInt("min_score"),
                        row.getInt("cut_point_1"),
                        row.getInt("cut_point_2"),
                        row.getInt("cut_point_3"),
                        row.getInt("max_score")
                ));

        // IABs do not have claims
        if (type != AssessmentType.IAB) {
            final ImmutableList.Builder<String> claimCodes = ImmutableList.builder();
            for (String claimCodeColumnName : CLAIM_CODE_COLUMN_NAMES) {
                final String claimCode = row.getString(claimCodeColumnName);
                if (claimCode == null) {
                    break;
                }
                claimCodes.add(claimCode);
            }
            builder.claimCodes(claimCodes.build());
        }

        return builder.build();
    }

}
