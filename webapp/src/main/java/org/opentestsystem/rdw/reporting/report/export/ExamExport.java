package org.opentestsystem.rdw.reporting.report.export;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Exam;

public class ExamExport {
    /*
        exam.scaleScore:
        ScaleScoreAchievementLevel (Achievement Level / Reporting Category) - NOTE: the Data Dictionary has this as an integer value and a single field that covers Reporting Category as well.  We were including the text representation of it (i.e. Near Standard)
        ScaleScore (Scale Score)
        ScaleScoreStandardError (Error Band Min and Error Band Max) - NOTE: we were previously including the min and max, to align with Data Dictionary it only defines the standard error

        exam.claimScaleScores:
        Claim1ScoreAchievementLevel (Concepts & Procedures, Reading) - NOTE: we were previously showing text representation instead of integer like Data Dictionary defines.  also, we were labeling the claim based on subject and separating into different columns
        Claim2ScoreAchievementLevel (Problem Solving, Listening)
        Claim3ScoreAchievementLevel (Communicating Reasoning, Writing)
        Claim4ScoreAchievementLevel (Research & Inquiry)

        exam.studentContext:
        IDEAIndicator (IEP)
        LEPStatus (Limited English Proficiency)
        Section504Status (504 Plan)
        EconomicDisadvantageStatus (Economic Disadvantage)
        MigrantStatus (Migrant Status)

        exam.student:
        StudentIdentifier (Student ID)
        FirstName (Student First Name)
        LastOrSurname (Student Last Name)
        Sex (Gender)

        exam.student.ethnicityCodes.contains
        HispanicOrLatinoEthnicity (Race/Ethnicity) - Yes/No
        AmericanIndianOrAlaskaNative - Yes/No
        Asian - Yes/No
        BlackOrAfricanAmerican - Yes/No
        White - Yes/No
        NativeHawaiianOrOtherPacificIslander - Yes/No
        TwoOrMoreRaces - Yes/No
        Filipino - Yes/No

        datetime: SubmitDateTime (Date)
        schoolYear: SchoolYear
        sessionId: TestSessionId (Session)
        accommodationCodes: Assigned accommodation list - Pipe delimited list of accommodation codes
        gradeCode: GradeLevelWhenAssessed (Enrolled Grade)

        status:
        private String administrativeConditionCode;
        private String completenessCode;
     */
    private Exam exam;
    private Assessment assessment;
    private School school;

    public Exam getExam() {
        return exam;
    }

    public Assessment getAssessment() {
        return assessment;
    }

    public School getSchool() {
        return school;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Exam exam;
        private Assessment assessment;
        private School school;

        public Builder exam(final Exam exam) {
            this.exam = exam;
            return this;
        }

        public Builder assessment(final Assessment assessment) {
            this.assessment = assessment;
            return this;
        }

        public Builder school(final School school) {
            this.school = school;
            return this;
        }

        public ExamExport build() {
            final ExamExport export = new ExamExport();

            export.exam = exam;
            export.assessment = assessment;
            export.school = school;

            return export;
        }
    }

    /*
        AssessmentType (Assessment Type)
        AssessmentName (Assessment Name)
        Subject
     */
    static class Assessment {
        private String name;
        private AssessmentType type;
        private Subject subject;

        public String getName() {
            return name;
        }

        public AssessmentType getType() {
            return type;
        }

        public Subject getSubject() {
            return subject;
        }

        public static Builder builder() {
            return new Builder();
        }

        public static class Builder {
            private String name;
            private AssessmentType type;
            private Subject subject;

            public Builder type(final AssessmentType assessmentType) {
                this.type = assessmentType;
                return this;
            }

            public Builder name(final String assessmentName) {
                this.name = assessmentName;
                return this;
            }

            public Builder subject(final Subject subject) {
                this.subject = subject;
                return this;
            }

            public Assessment build() {
                final Assessment assessment = new Assessment();

                assessment.name = name;
                assessment.subject = subject;
                assessment.type = type;

                return assessment;
            }
        }
    }

    /*
        DistrictId (District ID)
        DistrictName (District Name)
        NcesId - NOTE: Not defined in the data dictionary
        SchoolId (Institution Natural ID)
        SchoolName (Institution Name)
    */
    static class School {
        private String naturalId;
        private String name;
        private String districtNaturalId;
        private String districtName;
        private String ncesId; // TODO: Refactor, should this name be genercized?

        public String getDistrictNaturalId() {
            return districtNaturalId;
        }

        public String getDistrictName() {
            return districtName;
        }

        public String getNcesId() {
            return ncesId;
        }

        public String getNaturalId() {
            return naturalId;
        }

        public String getName() {
            return name;
        }

        public static Builder builder() {
            return new Builder();
        }

        public static class Builder {
            private String naturalId;
            private String name;
            private String districtNaturalId;
            private String districtName;
            private String ncesId;

            public Builder naturalId(final String naturalId) {
                this.naturalId = naturalId;
                return this;
            }

            public Builder name(final String name) {
                this.name = name;
                return this;
            }

            public Builder districtNaturalId(final String districtNaturalId) {
                this.districtNaturalId = districtNaturalId;
                return this;
            }

            public Builder districtName(final String districtName) {
                this.districtName = districtName;
                return this;
            }

            public Builder ncesId(final String ncesId) {
                this.ncesId = ncesId;
                return this;
            }

            public School build() {
                final School school = new School();

                school.name = name;
                school.naturalId = naturalId;
                school.districtNaturalId = districtNaturalId;
                school.districtName = districtName;
                school.ncesId = ncesId;

                return school;
            }
        }
    }

}
