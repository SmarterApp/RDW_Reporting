package org.opentestsystem.rdw.reporting.assessment;

import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

/**
 * Service responsible for managing assessments taken by a group
 */
public interface GroupAssessmentService {

    /**
     * Gets the most recent assessment taken by a group for a given school year.
     * This can be an IAB, ICA or Summative assessment.
     *
     * @param user       the user accessing the group's assessment
     * @param groupId    the group for which the most recent assessment will be searched
     * @param schoolYear the academic year for which the most recent assessment will be searched
     * @return the most recent assessment or an empty optional if there is no assessment found
     */
    @PreAuthorize("hasAuthority('PERM_GROUP_PII_READ') and #user.getGroupsById().containsKey(#groupId)")
    Optional<GroupExam> getLatestAssessment(@NotNull User user, long groupId, long schoolYear);

    /**
     * Gets all assessments taken by a group for a given school year.
     * This can be a list containing IAB, ICA and Summative assessments.
     *
     * @param user       the user accessing the group information
     * @param groupId    the group for which the assessments will be searched
     * @param schoolYear the academic year for which the assessments will be searched
     * @return all assessments taken by the given group for the given school year
     */
    @PreAuthorize("hasAuthority('PERM_GROUP_PII_READ') and #user.getGroupsById().containsKey(#groupId)")
    List<Assessment> getAllAssessments(@NotNull User user, long groupId, long schoolYear);

    /**
     * Gets all exams for the given group, assessment and school year.
     *
     * @param user         the user accessing the group information
     * @param groupId      the group for which the assessments will be searched
     * @param assessmentId the assessment the group took
     * @param schoolYear   the academic year for which the assessments will be searched
     * @return all exams for the given group, assessment and school year.
     */
    @PreAuthorize("hasAuthority('PERM_GROUP_PII_READ') and #user.getGroupsById().containsKey(#groupId)")
    List<Exam> getExams(@NotNull User user, long groupId, long assessmentId, long schoolYear);

}
