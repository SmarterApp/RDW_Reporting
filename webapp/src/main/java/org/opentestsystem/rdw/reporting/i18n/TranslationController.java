package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.node.ObjectNode;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Locale;
import java.util.Optional;

/**
 * This controller is responsible for providing translation message values
 * from both the database and external xx.json resources.
 */
@RestController
@RequestMapping("/api/translations")
class TranslationController {

    private final TranslationJsonService service;
    private final TenantProperties tenantProperties;

    @Autowired
    TranslationController(final TranslationJsonService service, TenantProperties tenantProperties) {
        this.service = service;
        this.tenantProperties = tenantProperties;
    }

    @RequestMapping("/{locale}")
    public ObjectNode getTranslations(@PathVariable final Locale locale,
                                      // TODO revisit need for this - i don't think this is actually used
                                      @RequestParam(name = "include-ui", required = false) final boolean includeUI,
                                      @RequestParam(name = "tenantKey", required = false) final String tenantKey) {
        final Optional<String> optionalTenantId = resolveTenantId(tenantKey);
        try {
            optionalTenantId.ifPresent(TenantContextHolder::setTenantId);
            return service.getLocaleMessages(locale, includeUI);
        } catch (Exception e) {
            //rethrow only trying because of tenant context cleanup
            throw e;
        } finally {
            TenantContextHolder.clear();
        }
    }

    Optional<String> resolveTenantId(String tenantKey) {
        return Optional.ofNullable(tenantKey)
                .map(key -> tenantProperties.getTenants().get(key))
                .filter(Tenant::isSandbox)
                .map(Tenant::getId);
    }

}
