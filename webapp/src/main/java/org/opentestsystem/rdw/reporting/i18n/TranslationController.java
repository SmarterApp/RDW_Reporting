package org.opentestsystem.rdw.reporting.i18n;

import com.fasterxml.jackson.databind.node.ObjectNode;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Locale;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

/**
 * This controller is responsible for providing translation message values
 * from both the database and external xx.json resources.
 */
@RestController
@RequestMapping("/api/translations")
class TranslationController {

    private final TranslationJsonService service;
    private final TenantProperties tenantProperties;

    @Autowired
    TranslationController(final TranslationJsonService service, TenantProperties tenantProperties) {
        this.service = service;
        this.tenantProperties = tenantProperties;
    }

    /**
     * Returns all localization properties for the specified sandbox or for the user's default tenant,
     * including overrides.
     *
     * @param locale
     * @param locale the locale, like "en".
     * @param tenantKey the tenant key of a sandbox. If blank, the user's tenant properties will be returned.
     *
     * @return OK status and tree of properties, or error if tenant key not found or not a sandbox.
     */
    @RequestMapping("/{locale}")
    public ObjectNode getTranslations(@PathVariable final Locale locale,
                                      @RequestParam(name = "tenantKey", required = false) final String tenantKey) {
        try {
            if (isNotBlank(tenantKey)) {
                Optional<Tenant> optionalTenant = resolveTenant(tenantKey);
                if (optionalTenant.isPresent() && optionalTenant.get().isSandbox()) {
                    TenantContextHolder.setTenantId(optionalTenant.get().getId());
                } else {
                    throw new IllegalArgumentException("Unknown or non-sandbox key.");
                }
            }

            return service.getLocaleMessages(locale);

        } finally {
            TenantContextHolder.clear();
        }
    }

    /**
     * Returns the given tenant's repository-based properties (not en.json) and doesn't include any overrides.
     *
     * @param locale    the locale, like "en".
     * @param tenantKey the tenant key, which must exist.
     */
    @RequestMapping("tenantDefaults/{locale}")
    public ObjectNode getTenantDefaultTranslations(@PathVariable final Locale locale,
                                                   @RequestParam(name = "tenantKey") final String tenantKey) {

        try {
            Optional<Tenant> optionalTenant = resolveTenant(tenantKey);
            TenantContextHolder.setTenantId(
                optionalTenant
                    .map(Tenant::getId)
                    .orElseThrow(() -> new IllegalArgumentException("Unknown tenant: " + tenantKey)));

            return service.getTenantDefaultLocaleMessages(locale);
        } finally {
            TenantContextHolder.clear();
        }

    }

    Optional<Tenant> resolveTenant(final String tenantKey) {
        return Optional.ofNullable(tenantKey)
                .map(key -> tenantProperties.getTenants().get(key));
    }
}
