package org.opentestsystem.rdw.reporting.assessment;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.exam.repository.GroupExamRepository;
import org.opentestsystem.rdw.reporting.exam.repository.GroupIabExamRepository;
import org.opentestsystem.rdw.reporting.exam.repository.GroupIcaSummativeExamRepository;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;

@Service
public class DefaultGroupAssessmentService implements GroupAssessmentService {

    private static final long IAB_TYPE_ID = 2L;
    private static final Comparator<GroupExam> groupExamCompletedDateTimeComparator = comparing(GroupExam::getCompletionDateTime);
    private final GroupIabExamRepository groupIabExamRepository;
    private final GroupIcaSummativeExamRepository groupIcaSummativeExamRepository;


    @Autowired
    public DefaultGroupAssessmentService(
            @NotNull final GroupIabExamRepository groupInterimAssessmentRepository,
            @NotNull final GroupIcaSummativeExamRepository groupIcaSummativeExamRepository) {
        this.groupIabExamRepository = groupInterimAssessmentRepository;
        this.groupIcaSummativeExamRepository = groupIcaSummativeExamRepository;
    }

    public Optional<GroupExam> getLatestAssessment(@NotNull final User user, final long groupId, final long schoolYear) {

        final GroupSecurityContext securityContext = new GroupSecurityContext(user, groupId, "GROUP_PII_READ");

        final List<GroupExam> groupExams = newArrayList();
        groupIabExamRepository.findLatest(securityContext, schoolYear).ifPresent(groupExams::add);
        groupIcaSummativeExamRepository.findLatest(securityContext, schoolYear).ifPresent(groupExams::add);

        if (groupExams.isEmpty()) {
            return Optional.empty();
        }

        groupExams.sort(groupExamCompletedDateTimeComparator);

        final GroupExam groupExam = groupExams.get(0);

        // TODO add layer of indirection to lookup exam type by ID
        final List<Exam> exams = groupExam.getAssessment().getTypeId() == IAB_TYPE_ID
                ? groupIabExamRepository.findAllForAssessment(securityContext, groupExam.getAssessment().getId(), schoolYear)
                : groupIcaSummativeExamRepository.findAllForAssessment(securityContext, groupExam.getAssessment().getId(), schoolYear);

        return Optional.of(
                new GroupExam(groupExam.getCompletionDateTime(), groupExam.getAssessment(), exams)
        );
    }

    public List<Assessment> getAllAssessments(@NotNull final User user, final long groupId, final long schoolYear) {
        final GroupSecurityContext securityContext = new GroupSecurityContext(user, groupId, "GROUP_PII_READ");
        final ImmutableList.Builder<Assessment> assessments = ImmutableList.builder();
        assessments.addAll(groupIabExamRepository.findAll(securityContext, schoolYear));
        assessments.addAll(groupIcaSummativeExamRepository.findAll(securityContext, schoolYear));
        return assessments.build();
    }

    public List<Exam> getIabs(@NotNull final User user, final long groupId, final long assessmentId, final long schoolYear) {
        return getExams(user, groupId, assessmentId, schoolYear, groupIabExamRepository);
    }

    public List<Exam> getIcaAndSummatives(@NotNull final User user, final long groupId, final long assessmentId, final long schoolYear) {
        return getExams(user, groupId, assessmentId, schoolYear, groupIcaSummativeExamRepository);
    }

    private List<Exam> getExams(final @NotNull User user, final long groupId, final long assessmentId, final long schoolYear, final GroupExamRepository repository) {
        final GroupSecurityContext securityContext = new GroupSecurityContext(user, groupId, "GROUP_PII_READ");
        return ImmutableList.copyOf(repository.findAllForAssessment(securityContext, assessmentId, schoolYear));
    }

}
