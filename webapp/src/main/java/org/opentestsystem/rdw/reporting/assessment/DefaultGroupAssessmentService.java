package org.opentestsystem.rdw.reporting.assessment;

import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.exam.repository.GroupIcaSummativeExamRepository;
import org.opentestsystem.rdw.reporting.exam.repository.GroupIabExamRepository;
import org.opentestsystem.rdw.reporting.security.GroupGrant;
import org.opentestsystem.rdw.reporting.security.PermissionScope;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;

@Service
public class DefaultGroupAssessmentService implements GroupAssessmentService {

    private static final Comparator<GroupExam> groupExamCompletedDateTimeComparator = (a, b) -> {
        if (a.getCompletionDateTime().isBefore(b.getCompletionDateTime())) {
            return -1;
        }
        if (a.getCompletionDateTime().isAfter(b.getCompletionDateTime())) {
            return 1;
        }
        return 0;
    };

    private final GroupIabExamRepository groupIabExamRepository;
    private final GroupIcaSummativeExamRepository groupIcaSummativeExamRepository;


    @Autowired
    public DefaultGroupAssessmentService(
            @NotNull final GroupIabExamRepository groupInterimAssessmentRepository,
            @NotNull final GroupIcaSummativeExamRepository groupIcaSummativeExamRepository) {
        this.groupIabExamRepository = groupInterimAssessmentRepository;
        this.groupIcaSummativeExamRepository = groupIcaSummativeExamRepository;
    }

    public Optional<Assessment> getLatest(@NotNull final User user, final long groupId, final long year) {

        // assured not null by spring security annotation
        final GroupGrant groupGrant = user.getGroupsById().get(groupId);
        final PermissionScope permissionScope = user.getPermissionsById().get("GROUP_PII_READ").getScope();

        final List<GroupExam> exams = newArrayList();

        groupIabExamRepository
                .findLatest(groupGrant.getId(), groupGrant.getSubjectId(), year, permissionScope)
                .ifPresent(exams::add);

        groupIcaSummativeExamRepository
                .findLatest(groupGrant.getId(), groupGrant.getSubjectId(), year, permissionScope)
                .ifPresent(exams::add);

        if (exams.size() == 0) {
            return Optional.empty();
        }

        exams.sort(groupExamCompletedDateTimeComparator);

        return Optional.of(exams.get(0).getAssessment());
    }

}
