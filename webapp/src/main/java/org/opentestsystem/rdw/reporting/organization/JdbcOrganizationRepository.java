package org.opentestsystem.rdw.reporting.organization;

import org.opentestsystem.rdw.reporting.organization.model.District;
import org.opentestsystem.rdw.reporting.organization.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.organization.model.School;
import org.opentestsystem.rdw.reporting.organization.model.SchoolGroup;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository()
class JdbcOrganizationRepository implements OrganizationRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.organization.school.findAll}")
    private String findAllSchoolsQuery;

    @Value("${sql.organization.schoolGroup.findAll}")
    private String findAllSchoolGroupsQuery;

    @Value("${sql.organization.district.findAll}")
    private String findAllDistrictsQuery;

    @Value("${sql.organization.districtGroup.findAll}")
    private String findAllDistrictGroupsQuery;

    @Autowired
    JdbcOrganizationRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<School> findAllSchools(@NotNull final PermissionScope permissionScope) {
        return template.query(
                findAllSchoolsQuery,
                getSecurityParameters(permissionScope),
                (row, index) ->
                        School
                                .builder()
                                .id(row.getLong("id"))
                                .name(row.getString("name"))
                                .districtId(row.getLong("district_id"))
                                .schoolGroupId(getNullable(row, row.getLong("school_group_id")))
                                .districtGroupId(getNullable(row, row.getLong("district_group_id")))
                                .build()
        );
    }

    @Override
    public List<SchoolGroup> findAllSchoolGroups(final PermissionScope permissionScope) {
        return template.query(
                findAllSchoolGroupsQuery,
                getSecurityParameters(permissionScope),
                (row, index) ->
                        SchoolGroup
                                .builder()
                                .id(row.getLong("id"))
                                .name(row.getString("name"))
                                .districtId(row.getLong("district_id"))
                                .districtGroupId(getNullable(row, row.getLong("district_group_id")))
                                .build()
        );
    }

    public List<District> findAllDistricts(@NotNull final PermissionScope permissionScope) {
        return template.query(
                findAllDistrictsQuery,
                getSecurityParameters(permissionScope),
                (row, index) ->
                        District
                                .builder()
                                .id(row.getLong("id"))
                                .name(row.getString("name"))
                                .districtGroupId(getNullable(row, row.getLong("district_group_id")))
                                .build()
        );
    }

    public List<DistrictGroup> findAllDistrictGroups(@NotNull final PermissionScope permissionScope) {
        return template.query(
                findAllDistrictGroupsQuery,
                getSecurityParameters(permissionScope),
                (row, index) -> new DistrictGroup(row.getLong("id"), row.getString("name"))
        );
    }
}
