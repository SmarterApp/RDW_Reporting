package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.assessment.Assessment;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

import static org.opentestsystem.rdw.reporting.jdbc.Parameters.getSecurityParameters;

abstract class AbstractJdbcGroupExamRepository implements GroupExamRepository {

    private final NamedParameterJdbcTemplate template;
    private final String findLatestQuery;
    private final String findAllQuery;

    AbstractJdbcGroupExamRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findLatestQuery,
            @NotNull final String findAllQuery) {
        this.template = template;
        this.findLatestQuery = findLatestQuery;
        this.findAllQuery = findAllQuery;
    }

    @Override
    public Optional<GroupExam> findLatest(@NotNull GroupSecurityContext securityContext, final long schoolYear) {

        final List<GroupExam> assessments = template.query(
                findLatestQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> new GroupExam(
                        row.getTimestamp("completed_at").toInstant(),
                        Assessment.builder()
                                .id(row.getLong("assessment_id"))
                                .name(row.getString("assessment_name"))
                                .gradeId(row.getLong("assessment_grade_id"))
                                .typeId(row.getLong("assessment_type_id"))
                                .subjectId(row.getLong("assessment_subject_id"))
                                .build()
                )
        );

        return assessments.isEmpty()
                ? Optional.empty()
                : Optional.of(assessments.get(0));
    }

    @Override
    public List<Assessment> findAll(@NotNull GroupSecurityContext securityContext, final long schoolYear) {

        return template.query(
                findAllQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> Assessment.builder()
                        .id(row.getLong("id"))
                        .name(row.getString("name"))
                        .gradeId(row.getLong("grade_id"))
                        .typeId(row.getLong("type_id"))
                        .subjectId(row.getLong("subject_id"))
                        .schoolYear(row.getLong("school_year"))
                        .build()
        );
    }

}
