package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.assessment.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.exam.StudentContext;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import static org.opentestsystem.rdw.reporting.jdbc.Parameters.getSecurityParameters;

abstract class AbstractJdbcGroupExamRepository<A extends Assessment.Builder, E extends Exam.Builder> implements GroupExamRepository {

    private final NamedParameterJdbcTemplate template;
    private final String findLatestQuery;
    private final String findAllQuery;
    private final String findAllForAssessmentQuery;

    AbstractJdbcGroupExamRepository(
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findLatestQuery,
            @NotNull final String findAllQuery,
            @NotNull final String findAllForAssessmentQuery) {
        this.template = template;
        this.findLatestQuery = findLatestQuery;
        this.findAllQuery = findAllQuery;
        this.findAllForAssessmentQuery = findAllForAssessmentQuery;
    }

    @Override
    public Optional<GroupExam> findLatest(@NotNull final GroupSecurityContext securityContext, final long schoolYear) {

        final List<GroupExam> assessments = template.query(
                findLatestQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> new GroupExam(
                        row.getTimestamp("completed_at").toInstant(),
                        build(createAssessmentBuilder(), row).build()
                )
        );

        return assessments.isEmpty()
                ? Optional.empty()
                : Optional.of(assessments.get(0));
    }

    @Override
    public List<Assessment> findAll(@NotNull final GroupSecurityContext securityContext, final long schoolYear) {
        return template.query(
                findAllQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> build(createAssessmentBuilder(), row).build()
        );
    }

    @Override
    public List<Exam> findAllForAssessment(
            @NotNull final GroupSecurityContext securityContext,
            final long assessmentId,
            final long schoolYear) {

        return template.query(
                findAllForAssessmentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("assessment_id", assessmentId)
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> build(createExamBuilder(), row).build()
        );

    }

    @SuppressWarnings({"unchecked"})
    protected A createAssessmentBuilder() {
        return (A) Assessment.builder();
    }

    protected A build(final A builder, final ResultSet row) throws SQLException {
        builder.id(row.getLong("id"))
                .name(row.getString("label"))
                .gradeId(row.getLong("grade_id"))
                .typeId(row.getLong("type_id"))
                .subjectId(row.getLong("subject_id"))
                .schoolYear(row.getLong("school_year"));
        return builder;
    }

    @SuppressWarnings({"unchecked"})
    protected E createExamBuilder() {
        return (E) Exam.builder();
    }

    protected E build(final E builder, final ResultSet row) throws SQLException {
        builder.id(row.getLong("id"))
                .sessionId(row.getString("session_id"))
                .dateTime(row.getTimestamp("completed_at").toInstant())
                .opportunity(row.getLong("opportunity"))
                .schoolYear(row.getLong("school_year"))
                .student(Student.builder()
                        .id(row.getLong("student_id"))
                        .firstName(row.getString("student_first_name"))
                        .lastName(row.getString("student_last_name"))
                        .genderId(row.getLong("student_gender_id"))
                        //.ethnicityIds() must be resolved by a separate query
                        .build()
                )
                .studentContext(StudentContext.builder()
                        .schoolId(row.getLong("school_id"))
                        .iep(row.getBoolean("iep"))
                        .lep(row.getBoolean("lep"))
                        .section504(row.getBoolean("section504"))
                        .economicDisadvantage(row.getBoolean("economic_disadvantage"))
                        .migrantStatus(row.getBoolean("migrant_status"))
                        .englishProficiencyLevel(row.getString("eng_prof_lvl"))
                        .t3ProgramType(row.getString("t3_program_type"))
                        .languageCode(row.getString("language_code"))
                        .build()
                )
                .completenessId(row.getLong("completeness_id"))
                .administrativeConditionId(row.getLong("administration_condition_id"));
        return builder;
    }

}
