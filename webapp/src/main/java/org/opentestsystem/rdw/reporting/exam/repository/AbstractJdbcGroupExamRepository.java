package org.opentestsystem.rdw.reporting.exam.repository;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.assessment.Assessment;
import org.opentestsystem.rdw.reporting.exam.Exam;
import org.opentestsystem.rdw.reporting.exam.GroupExam;
import org.opentestsystem.rdw.reporting.exam.Student;
import org.opentestsystem.rdw.reporting.exam.StudentContext;
import org.opentestsystem.rdw.reporting.security.GroupSecurityContext;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.jdbc.Parameters.getSecurityParameters;

@SuppressWarnings({"unchecked"})
abstract class AbstractJdbcGroupExamRepository<A extends Assessment.Builder, E extends Exam.Builder> implements GroupExamRepository {

    private final EthnicityRepository ethnicityRepository;
    private final NamedParameterJdbcTemplate template;
    private final String findLatestQuery;
    private final String findAllQuery;
    private final String findAllForAssessmentQuery;
    private final String findAllForAssessmentInternalQuery;


    AbstractJdbcGroupExamRepository(
            @NotNull final EthnicityRepository ethnicityRepository,
            @NotNull final NamedParameterJdbcTemplate template,
            @NotNull final String findLatestQuery,
            @NotNull final String findAllQuery,
            @NotNull final String findAllForAssessmentQuery,
            @NotNull final String findAllForAssessmentInternalQuery) {
        this.ethnicityRepository = ethnicityRepository;
        this.template = template;
        this.findLatestQuery = findLatestQuery;
        this.findAllQuery = findAllQuery;
        this.findAllForAssessmentQuery = findAllForAssessmentQuery;
        this.findAllForAssessmentInternalQuery = findAllForAssessmentInternalQuery;
    }

    @Override
    public Optional<GroupExam> findLatest(@NotNull final GroupSecurityContext securityContext, final long schoolYear) {

        final List<GroupExam> assessments = template.query(
                findLatestQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> new GroupExam(
                        row.getTimestamp("completed_at").toInstant(),
                        build((A) createAssessmentBuilder()
                                        .id(row.getLong("id"))
                                        .name(row.getString("label"))
                                        .gradeId(row.getLong("grade_id"))
                                        .typeId(row.getLong("type_id"))
                                        .subjectId(row.getLong("subject_id"))
                                        .schoolYear(row.getLong("school_year")),
                                row
                        ).build(),
                        ImmutableList.of()
                )
        );

        return assessments.isEmpty()
                ? Optional.empty()
                : Optional.of(assessments.get(0));
    }

    @Override
    public List<Assessment> findAll(@NotNull final GroupSecurityContext securityContext, final long schoolYear) {
        return template.query(
                findAllQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("school_year", schoolYear)
                        .build(),
                (row, index) -> build((A) createAssessmentBuilder()
                                .id(row.getLong("id"))
                                .name(row.getString("label"))
                                .gradeId(row.getLong("grade_id"))
                                .typeId(row.getLong("type_id"))
                                .subjectId(row.getLong("subject_id"))
                                .schoolYear(row.getLong("school_year")),
                        row
                ).build()
        );
    }

    @Override
    public List<Exam> findAllForAssessment(
            @NotNull final GroupSecurityContext securityContext,
            final long assessmentId,
            final long schoolYear) {

        return template.query(
                findAllForAssessmentQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(securityContext))
                        .put("assessment_id", assessmentId)
                        .put("school_year", schoolYear)
                        .build(),
                this::buildExams
        );
    }

    @Override
    public List<Exam> findAllForAssessmentInternal(final long assessmentId, final long schoolYear) {
        return template.query(
                findAllForAssessmentInternalQuery,
                ImmutableMap.<String, Object>builder()
                        .put("assessment_id", assessmentId)
                        .put("school_year", schoolYear)
                        .build(),
                 this::buildExams
        );
    }

    private List<Exam> buildExams(final ResultSet row) throws SQLException {

        final List<Exam> exams = newArrayList();
        final List<E> examBuilders = newArrayList();
        final Set<Long> studentIds = newHashSet();

        while (row.next()) {
            final E examBuilder = (E) createExamBuilder()
                    .id(row.getLong("id"))
                    .sessionId(row.getString("session_id"))
                    .dateTime(row.getTimestamp("completed_at").toInstant())
                    .opportunity(row.getLong("opportunity"))
                    .schoolYear(row.getLong("school_year"))
                    .completenessId(row.getLong("completeness_id"))
                    .administrativeConditionId(row.getLong("administration_condition_id"))
                    .studentContext(StudentContext.builder()
                            .schoolId(row.getLong("school_id"))
                            .iep(row.getBoolean("iep"))
                            .lep(row.getBoolean("lep"))
                            .section504(row.getBoolean("section504"))
                            .economicDisadvantage(row.getBoolean("economic_disadvantage"))
                            .migrantStatus(row.getObject("migrant_status", Boolean.class))
                            .englishProficiencyLevel(row.getString("eng_prof_lvl"))
                            .t3ProgramType(row.getString("t3_program_type"))
                            .languageCode(row.getString("language_code"))
                            .build()
                    );
                    //.student() set in post process

            examBuilders.add(examBuilder);
            studentIds.add(row.getLong("student_id"));

        }

        final Map<Long, List<String>> ethnicityCodesByStudentId = ethnicityRepository
                .findEthnicityCodesForStudentIds(studentIds);

        row.beforeFirst();
        for (int i = 0; row.next(); i++) {
            final E examBuilder = examBuilders.get(i);
            final long studentId = row.getLong("student_id");
            final List<String> ethnicityCodes = ethnicityCodesByStudentId.get(studentId);
            examBuilder.student(Student.builder()
                    .id(studentId)
                    .firstName(row.getString("student_first_name"))
                    .lastName(row.getString("student_last_name"))
                    .genderId(row.getLong("student_gender_id"))
                    .ethnicityCodes(ethnicityCodes)
                    .build()
            );
            exams.add(build(examBuilder, row).build());
        }

        return exams;
    }

    protected A createAssessmentBuilder() {
        return (A) Assessment.builder();
    }

    protected A build(final A builder, final ResultSet row) throws SQLException {
        return builder;
    }

    protected E createExamBuilder() {
        return (E) Exam.builder();
    }

    protected E build(final E builder, final ResultSet row) throws SQLException {
        return builder;
    }

}
