package org.opentestsystem.rdw.reporting.user;

import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

class UserContext {

    public static final UserContext Anonymous = UserContext.builder()
            .anonymous(true)
            .logoutUrl("/logout")
            .build();

    private String firstName;
    private String lastName;
    private Set<String> permissions;
    private boolean anonymous;
    private String logoutUrl;
    private String sessionRefreshUrl;

    private UserContext() {}

    /**
     * @return the user's given name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * @return the user's family name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * @return all statewide permission IDs of the user
     */
    public Set<String> getPermissions() {
        return permissions;
    }

    public boolean isAnonymous() {
        return anonymous;
    }

    public String getLogoutUrl() {
        return logoutUrl;
    }

    public String getSessionRefreshUrl() {
        return sessionRefreshUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private String firstName;
        private String lastName;
        private Set<String> permissions;
        private boolean anonymous;
        private String logoutUrl = "/logout";
        private String sessionRefreshUrl;

        public Builder firstName(final String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(final String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder permissions(final Set<String> permissions) {
            this.permissions = permissions;
            return this;
        }

        public Builder anonymous(final boolean anonymous) {
            this.anonymous = anonymous;
            return this;
        }

        public Builder logoutUrl(String logoutUrl) {
            this.logoutUrl = logoutUrl;
            return this;
        }

        public Builder sessionRefreshUrl(final String sessionRefreshUrl) {
            this.sessionRefreshUrl = sessionRefreshUrl;
            return this;
        }

        public UserContext build() {
            final UserContext context = new UserContext();
            context.firstName = firstName;
            context.lastName = lastName;
            context.permissions = safeImmutableOf(permissions);
            context.anonymous = anonymous;
            context.logoutUrl = logoutUrl;
            context.sessionRefreshUrl = sessionRefreshUrl;
            return context;
        }

    }

}
