package org.opentestsystem.rdw.reporting.processor.configuration;

import org.opentestsystem.rdw.reporting.processor.service.DefaultReportRemovalService;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportRemovalService;
import org.opentestsystem.rdw.reporting.processor.service.UserReportService;
import org.opentestsystem.rdw.reporting.processor.tasking.RemoveStaleReportsTask;
import org.opentestsystem.rdw.reporting.processor.web.RemoveStaleReportsEndpoint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.endpoint.GenericPostableMvcEndpoint;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.EnableScheduling;

@Configuration
@EnableScheduling
@ConditionalOnProperty(prefix = "task.remove-stale-reports", name = {"cron", "max-report-lifetime-days", "max-random-minutes"})
public class RemoveStaleReportsConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(RemoveStaleReportsConfiguration.class);

    @Bean
    public RemoveStaleReportsTask removeStaleReportsTask(
            final ReportRemovalService reportRemovalService,
            final TaskScheduler taskScheduler,
            @Value("${task.remove-stale-reports.cron}") final String cron,
            @Value("${task.remove-stale-reports.max-report-lifetime-days}") final int maxReportLifetimeDays,
            @Value("${task.remove-stale-reports.max-random-minutes}") final int maxRandomMinutes) {
        logger.info("Remove Stale Reports task enabled with cron: {}", cron);
        return new RemoveStaleReportsTask(reportRemovalService, taskScheduler, maxReportLifetimeDays, maxRandomMinutes);
    }

    @Bean
    public DefaultReportRemovalService reportRemovalService(final UserReportService userReportService,
                                                            final ReportContentService reportContentService) {
        return new DefaultReportRemovalService(userReportService, reportContentService);
    }

    /**
     * Bean for actuator end-point to manually trigger the task.
     * It supports POST instead of GET, e.g.:<pre>
     * curl -X POST http://localhost:8008/removeStaleReports
     * </pre>
     *
     * @param reportRemovalService  service
     * @param maxReportLifetimeDays config
     * @return task end-point
     */
    @Bean
    public MvcEndpoint reconciliationReportEndpoint(final ReportRemovalService reportRemovalService,
            @Value("${task.remove-stale-reports.max-report-lifetime-days}") final int maxReportLifetimeDays) {

        return new GenericPostableMvcEndpoint(new RemoveStaleReportsEndpoint(reportRemovalService, maxReportLifetimeDays));
    }

}