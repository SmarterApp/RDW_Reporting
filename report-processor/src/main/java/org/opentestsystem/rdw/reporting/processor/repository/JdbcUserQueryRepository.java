package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.processor.model.UserQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.NoSuchElementException;

/**
 * A JDBC implementation of the {@link UserQueryRepository}.
 */
@Repository
public class JdbcUserQueryRepository implements UserQueryRepository {

    @Value("${sql.user-query.findAllByUser}")
    private String findAllByUser;

    @Value("${sql.user-query.findByUserAndId}")
    private String findByUserAndId;

    @Value("${sql.user-query.create}")
    private String create;

    @Value("${sql.user-query.update}")
    private String update;

    @Value("${sql.user-query.deleteByUserAndId}")
    private String deleteById;

    private final NamedParameterJdbcTemplate template;
    private final ReportQueryMapper mapper;

    @Autowired
    public JdbcUserQueryRepository(final NamedParameterJdbcTemplate template,
                                   final ReportQueryMapper mapper) {
        this.template = template;
        this.mapper = mapper;
    }

    @Override
    public List<UserQuery> findAllByUser(final String username) {
        return template.query(
                findAllByUser,
                new MapSqlParameterSource()
                        .addValue("user_login", username),
                (row, num) -> toUserQuery(row)
        );
    }

    @Override
    public UserQuery findByUserAndId(final String username, final long id) {
        try {
            return template.queryForObject(
                    findByUserAndId,
                    new MapSqlParameterSource()
                            .addValue("id", id)
                            .addValue("user_login", username),
                    (row, num) -> toUserQuery(row)
            );
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

    @Override
    @Transactional
    public UserQuery create(final UserQuery query) {
        final GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
        final int insertCount = template.update(
                create,
                new MapSqlParameterSource()
                        .addValue("user_login", query.getUser())
                        .addValue("label", query.getQuery().getName())
                        .addValue("query", mapper.safeSerialize(query.getQuery()))
                        .addValue("query_type", query.getQuery().getType().name()),
                keyHolder
        );
        if (insertCount != 1) {
            throw new IllegalStateException("Unable to create user query");
        }
        return findByUserAndId(query.getUser(), keyHolder.getKey().longValue());
    }

    @Override
    @Transactional
    public UserQuery update(final UserQuery query) {
        final int updateCount = template.update(
                update,
                new MapSqlParameterSource()
                        .addValue("id", query.getId())
                        .addValue("user_login", query.getUser())
                        .addValue("label", query.getQuery().getName())
                        .addValue("query", mapper.safeSerialize(query.getQuery()))
                        .addValue("query_type", query.getQuery().getType().name()));

        if (updateCount != 1) {
            throw new NoSuchElementException(String.format(
                    "Unable to update report with id \"%s\" for user \"%s\"",
                    query.getId(), query.getUser()
            ));
        }
        return findByUserAndId(query.getUser(), query.getId());
    }

    @Override
    public void deleteByUserAndId(final String username, final long id) {
        final int updateCount = template.update(
                deleteById,
                new MapSqlParameterSource()
                        .addValue("id", id)
                        .addValue("user_login", username)
        );
        if (updateCount != 1) {
            throw new NoSuchElementException(String.format(
                    "Unable to delete report with id \"%s\" for user \"%s\"",
                    id, username
            ));
        }
    }

    private UserQuery toUserQuery(final ResultSet row) throws SQLException {
        return UserQuery.builder()
                .id(row.getLong("id"))
                .user(row.getString("user_login"))
                .query(mapper.safeDeserialize(row.getString("query")))
                .created(row.getTimestamp("created").toInstant())
                .updated(row.getTimestamp("updated").toInstant())
                .build();
    }

}
