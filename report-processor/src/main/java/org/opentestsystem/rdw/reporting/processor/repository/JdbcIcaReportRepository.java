package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IcaReport;
import org.opentestsystem.rdw.reporting.processor.util.StudentEnrollments;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.processor.util.ReportProcessorUtils.getExamFilterParameters;

@Repository
class JdbcIcaReportRepository implements IcaReportRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final ReportingSystemSettings systemSettings;

    @Value("${sql.exam.findAllIcasByStudentIdsAndQueryParamsUnknownPermissions}")
    private String findAllIcasByStudentIdsAndQueryParamsUnknownPermissions;

    @Value("${sql.exam.findAllIcasByStudentIdsAndQueryParamsGroupPermissions}")
    private String findAllIcasByStudentIdsAndQueryParamsGroupPermissions;


    @Autowired
    JdbcIcaReportRepository(final NamedParameterJdbcTemplate template,
                            final SecurityParameterProvider securityParameterProvider,
                            final ReportingSystemSettings systemSettings) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.systemSettings = systemSettings;
    }

    @Override
    public Map<Long, Map<Subject, IcaReport>> findAllForStudentsByExamFilter(
            @NotNull final User user,
            final Collection<Long> studentIds,
            final ExamQueryParams examQueryParams) {

        final Map<Long, Map<Subject, IcaReport>> reportsByStudent = new HashMap<>();
        final String query = getExamFilterQuery(examQueryParams.getQueryPermissionType());

        template.query(
                query,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(user, examQueryParams.isDisableTransferAccess()))
                        .addValues(getExamFilterParameters(examQueryParams))
                        .addValue("student_ids", studentIds),
                (row) -> {
                    final IcaReport report = IcaReport.builder()
                            .assessment(Assessments.mapWithCutPoints(row, Assessment.builder(), "asmt_").build())
                            .exam(Exams.map(row, Exam.builder()).build())
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(StudentEnrollments.map(row, systemSettings.getState().getCode()))
                            .build();

                    final long studentId = report.getStudent().getId();
                    final Subject subject = report.getAssessment().getSubject();
                    reportsByStudent
                            .computeIfAbsent(studentId, (id) -> new HashMap<>())
                            .put(subject, report);
                }
        );

        return reportsByStudent;
    }

    private String getExamFilterQuery(final ExamQueryParams.PermissionType queryPermissionType) {
        switch (queryPermissionType) {
            case Unknown:
            case Individual:
                return findAllIcasByStudentIdsAndQueryParamsUnknownPermissions;
            case Group:
                return findAllIcasByStudentIdsAndQueryParamsGroupPermissions;
            default:
                throw new IllegalArgumentException("Unknown query permission type: " + queryPermissionType);
        }
    }

}
