package org.opentestsystem.rdw.reporting.processor.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;

import java.time.Instant;

public class UserQuery {

    private Long id;
    private String user;
    private ReportQuery query;
    private Instant created;
    private Instant updated;

    public Long getId() {
        return id;
    }

    @JsonIgnore
    public String getUser() {
        return user;
    }

    public ReportQuery getQuery() {
        return query;
    }

    public Instant getCreated() {
        return created;
    }

    public Instant getUpdated() {
        return updated;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {

        private Long id;
        private String user;
        private ReportQuery query;
        private Instant created;
        private Instant updated;

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder user(final String user) {
            this.user = user;
            return this;
        }

        public Builder query(final ReportQuery query) {
            this.query = query;
            return this;
        }

        public Builder created(final Instant created) {
            this.created = created;
            return this;
        }

        public Builder updated(final Instant updated) {
            this.updated = updated;
            return this;
        }

        public Builder copy(final UserQuery value) {
            return this.id(value.id)
                    .user(value.user)
                    .query(value.query)
                    .created(value.created)
                    .updated(value.updated);
        }

        public UserQuery build() {
            final UserQuery value = new UserQuery();
            value.id = id;
            value.user = user;
            value.query = query;
            value.updated = updated;
            value.created = created;
            return value;
        }

    }

}
