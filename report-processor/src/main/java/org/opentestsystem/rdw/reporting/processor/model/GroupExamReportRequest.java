package org.opentestsystem.rdw.reporting.processor.model;

import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.security.GroupGrant;

public class GroupExamReportRequest extends AbstractBatchExamReportRequest<PrintOptions> {

    private GroupGrant groupGrant;
    private UserGroupId groupId;

    public UserGroupId getGroupId() {
        // Bridge for existing reports.
        if (groupGrant != null) {
            return new UserGroupId(groupGrant.getId(), null);
        }
        return groupId;
    }

    public Builder copy() {
        return new Builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public ReportType getReportType() {
        return ReportType.Group;
    }

    public static class Builder extends AbstractBatchExamReportRequest.Builder<PrintOptions, GroupExamReportRequest, Builder> {

        private GroupGrant groupGrant;
        private UserGroupId groupId;

        public Builder groupGrant(final GroupGrant groupGrant) {
            this.groupGrant = groupGrant;
            return this;
        }

        public Builder groupId(final UserGroupId groupId) {
            this.groupId = groupId;
            return this;
        }

        public Builder copy(final GroupExamReportRequest request) {
            return super.copy(this, request)
                    .groupGrant(request.groupGrant)
                    .groupId(request.groupId);
        }

        public GroupExamReportRequest build() {
            final GroupExamReportRequest search = super.build(new GroupExamReportRequest());
            search.groupGrant = groupGrant;
            search.groupId = groupId;
            return search;
        }
    }
}
