package org.opentestsystem.rdw.reporting.processor.repository;

import org.apache.commons.lang3.tuple.Pair;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.ScaleScores;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.jdbc.TraitScores;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.UserGroupType;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.UserGroupSqlProvider;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IcaSummativeReport;
import org.opentestsystem.rdw.reporting.processor.util.StudentEnrollments;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.opentestsystem.rdw.reporting.processor.util.ReportProcessorUtils.getExamFilterParameters;

@Repository
class JdbcIcaSummativeReportRepository implements IcaSummativeReportRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final ReportingSystemProperties reportingSystemProperties;

    private final String findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
    private final String findAllIcasOrSummativesForTeacherGroupByStudentIdsAndGroupPermissions;
    private final String findAllIcasOrSummativesForAdminGroupByStudentIdsAndGroupPermissions;
    private final String findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
    private final String findExamLevelTraitScoresByExamIds;
    private final String findItemLevelTraitScoresByExamIds;

    @Autowired
    JdbcIcaSummativeReportRepository(final NamedParameterJdbcTemplate template,
                                     final UserGroupSqlProvider userGroupSqlProvider,
                                     final SecurityParameterProvider securityParameterProvider,
                                     @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties,
                                     @Value("${sql.exam.findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions}") final String findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions,
                                     @Value("${sql.exam.findAllIcasOrSummativesByStudentIdsAndQueryParamsGroupPermissions}") final String findAllIcasOrSummativesByStudentIdsAndQueryParamsGroupPermissions,
                                     @Value("${sql.exam.findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions}") final String findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions,
                                     @Value("${sql.exam.findExamLevelTraitScoresByExamIds}") final String findExamLevelTraitScoresByExamIds,
                                     @Value("${sql.exam.findItemLevelTraitScoresByExamIds}") final String findItemLevelTraitScoresByExamIds) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.reportingSystemProperties = reportingSystemProperties;
        this.findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions = findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
        this.findAllIcasOrSummativesForTeacherGroupByStudentIdsAndGroupPermissions = userGroupSqlProvider.getSqlForGroupOfType(findAllIcasOrSummativesByStudentIdsAndQueryParamsGroupPermissions, UserGroupType.Teacher);
        this.findAllIcasOrSummativesForAdminGroupByStudentIdsAndGroupPermissions = userGroupSqlProvider.getSqlForGroupOfType(findAllIcasOrSummativesByStudentIdsAndQueryParamsGroupPermissions, UserGroupType.Admin);
        this.findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions = findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
        this.findExamLevelTraitScoresByExamIds = findExamLevelTraitScoresByExamIds;
        this.findItemLevelTraitScoresByExamIds = findItemLevelTraitScoresByExamIds;
    }

    @Override
    public Map<Long, Collection<IcaSummativeReport>> findAllForStudentsByExamFilter(
            @NotNull final User user,
            final Collection<Long> studentIds,
            final ExamQueryParams examQueryParams) {

        // Because we have to defer exam building (to get the trait scores) we also have to defer
        // report building. Also, we want to keep just one (the most recent) report per subject per student.
        // So use a map of studentId to map of subject to builders ...
        final Map<Long, Map<String, Pair<IcaSummativeReport.Builder, Exam.Builder>>> buildersByStudent = new HashMap<>();

        // temporary map of exam id to exam builder, a convenience for the trait query
        final Map<Long, Exam.Builder> examBuildersById = new HashMap<>();

        template.query(getExamFilterQuery(examQueryParams),
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(user, examQueryParams.isDisableTransferAccess()))
                        .addValues(getExamFilterParameters(examQueryParams))
                        .addValue("student_ids", studentIds)
                        .addValue("type_id", AssessmentType.fromCode(examQueryParams.getAssessmentTypeCode()).id()),
                (row) -> {
                    final long studentId = row.getLong("student_id");
                    final Assessment assessment = Assessments.mapWithCutPoints(row, Assessment.builder(), "asmt_").build();
                    final Exam.Builder examBuilder = Exams.map(row, Exam.builder())
                        .claimScaleScores(ScaleScores.mapClaimScores(row))
                        .altScaleScores(ScaleScores.mapAltScores(row));
                    final IcaSummativeReport.Builder reportBuilder = IcaSummativeReport.builder()
                            .assessment(assessment)
                            .assessmentType(assessment.getTypeCode())
                            .subject(assessment.getSubjectCode())
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(StudentEnrollments.map(row, reportingSystemProperties.getState().getCode()));

                    // only collect if this is the first exam for the student for the subject
                    final Map<String, Pair<IcaSummativeReport.Builder, Exam.Builder>> studentSubjectMap =
                        buildersByStudent.computeIfAbsent(studentId, (id) -> new HashMap<>());
                    if (!studentSubjectMap.containsKey(assessment.getSubjectCode())) {
                        studentSubjectMap.put(assessment.getSubjectCode(), Pair.of(reportBuilder, examBuilder));
                        examBuildersById.put(examBuilder.getId(), examBuilder);
                    }
                }
        );

        // no exams found
        if (examBuildersById.isEmpty()) {
            return new HashMap<>();
        }

        // this query gathers the trait scores for all the exams
        template.query(getTraitScoreQuery(examQueryParams),
            new MapSqlParameterSource("exam_ids", examBuildersById.keySet()),
            (row) -> {
                examBuildersById.get(row.getLong("exam_id")).traitScore(TraitScores.map(row));
            }
        );

        // this query gathers the historical exam data by student and subject
        template.query(getHistoricalExamFilterQuery(examQueryParams),
            new MapSqlParameterSource()
                .addValues(securityParameterProvider.getSecurityParameters(user, examQueryParams.isDisableTransferAccess()))
                .addValues(getExamFilterParameters(examQueryParams))
                .addValue("student_ids", studentIds)
                .addValue("type_id", AssessmentType.fromCode(examQueryParams.getAssessmentTypeCode()).id()),
            (row) -> {
                final Optional<IcaSummativeReport.Builder> reportBuilder = getReportReportBuilder(
                    buildersByStudent,
                    row.getLong("student_id"),
                    row.getString("asmt_subject_code"));
                if (reportBuilder.isPresent()) {
                    reportBuilder.get().addHistoricalExam(Exams.map(row, Exam.builder()).build());
                }
            }
        );

        // the final collection ignores the subject grouping
        return buildersByStudent.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,
            entry -> entry.getValue().values().stream().map((pair) ->
                pair.getLeft().exam(pair.getRight().build()).build()).collect(Collectors.toList())));
    }

    private Optional<IcaSummativeReport.Builder> getReportReportBuilder(
        Map<Long, Map<String, Pair<IcaSummativeReport.Builder, Exam.Builder>>> buildersByStudent,
        final Long student_id,
        final String subject_code)
    {
        if (student_id == null || subject_code == null) {
            return Optional.empty();
        }

        Map<String, Pair<IcaSummativeReport.Builder, Exam.Builder>> builderMap =
            buildersByStudent.get(student_id);

        if (builderMap != null) {
            Pair<IcaSummativeReport.Builder, Exam.Builder> builders = builderMap.get(subject_code);
            if (builders != null) {
                final IcaSummativeReport.Builder reportBuilder = builders.getLeft();
                return Optional.ofNullable(reportBuilder);
            }
        }

        return Optional.empty();
    }

    private String getExamFilterQuery(final ExamQueryParams examQueryParams) {
        switch (examQueryParams.getQueryPermissionType()) {
            case Unknown:
            case Individual:
                return findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
            case Group:
                return examQueryParams.getGroupId().getType() == UserGroupType.Admin ?
                        findAllIcasOrSummativesForAdminGroupByStudentIdsAndGroupPermissions :
                        findAllIcasOrSummativesForTeacherGroupByStudentIdsAndGroupPermissions;
            default:
                throw new IllegalArgumentException("Unknown query permission type: " + examQueryParams.getQueryPermissionType());
        }
    }

    private String getHistoricalExamFilterQuery(final ExamQueryParams examQueryParams) {
        return findAllHistoricalIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions;
    }

    /**
     * Helper to get the appropriate query for trait scores. Summative assessments have their
     * trait scores provided and stored at the exam level, while interims roll up their trait
     * scores from the item level.
     *
     * @param examQueryParams query params
     * @return query for trait scores
     */
    private String getTraitScoreQuery(final ExamQueryParams examQueryParams) {
        switch(AssessmentType.fromCode(examQueryParams.getAssessmentTypeCode())) {
            case ICA:
                return findItemLevelTraitScoresByExamIds;
            case SUMMATIVE:
                return findExamLevelTraitScoresByExamIds;
            default:
                throw new IllegalArgumentException("Assessment Type must be ICA or SUMMATIVE, was: " + examQueryParams.getAssessmentTypeCode());
        }
    }
}
