package org.opentestsystem.rdw.reporting.processor;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.reporting.common.i18n.MessageSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtWebSecurityConfiguration;
import org.opentestsystem.rdw.reporting.processor.configuration.RemoveStaleReportsConfiguration;
import org.opentestsystem.rdw.reporting.processor.service.WkhtmltopdfWebServiceClient;
import org.opentestsystem.rdw.utils.ResourceLoaderConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;

@Configuration
@Import({
        EndpointAutoConfiguration.class,
        ResourceLoaderConfiguration.class,
        StatusConfiguration.class,
        YamlPropertiesConfigurator.class,
        DataSourceConfiguration.class,
        MessageSourceConfiguration.class,
        SecurityParameterProvider.class,
        RemoveStaleReportsConfiguration.class,
        JwtWebSecurityConfiguration.class
})
@EnableCaching
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class ApplicationConfiguration {

    @Bean
    public Jackson2ObjectMapperBuilderCustomizer customizeObjectMapper() {
        return builder -> builder.failOnUnknownProperties(false);
    }

    @Bean
    public ClientHttpRequestFactory requestFactory() {
        return new SimpleClientHttpRequestFactory();
    }

    @Bean
    public WkhtmltopdfWebServiceClient wkhtmlToPdfWebServiceClient(
            @Value("${app.wkhtmltopdf.url}") final String url,
            final ClientHttpRequestFactory requestFactory,
            final ObjectMapper objectMapper) {
        return new WkhtmltopdfWebServiceClient(requestFactory, url, objectMapper);
    }

}
