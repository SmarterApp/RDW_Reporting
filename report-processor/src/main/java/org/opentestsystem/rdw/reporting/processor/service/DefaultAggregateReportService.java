package org.opentestsystem.rdw.reporting.processor.service;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.support.BearerAuthorizationHeaders;
import org.opentestsystem.rdw.reporting.processor.configuration.AggregateReportProperties;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.ReportStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Service;

import java.net.URI;

import static org.opentestsystem.rdw.reporting.processor.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.TEXT_CSV;

/**
 * Default implementation of an AggregateReportService that delegate the report generation
 * to the aggregate-service.
 */
@Service
public class DefaultAggregateReportService implements AggregateReportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultAggregateReportService.class);

    private final JwtService jwtService;
    private final ObjectMapper objectMapper;
    private final ClientHttpRequestFactory clientHttpRequestFactory;
    private final ReportContentService reportContentService;
    private final AggregateReportProperties aggregateReportProperties;

    @Autowired
    public DefaultAggregateReportService(final JwtService jwtService,
                                         final ObjectMapper objectMapper,
                                         final ClientHttpRequestFactory clientHttpRequestFactory,
                                         final ReportContentService reportContentService,
                                         final AggregateReportProperties aggregateReportProperties) {
        this.jwtService = jwtService;

        //DISABLE property visibility in favor of field visibility to account
        // for ReportQuery convenience getters
        this.objectMapper = objectMapper.copy()
                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)
                .setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);

        this.clientHttpRequestFactory = clientHttpRequestFactory;
        this.reportContentService = reportContentService;
        this.aggregateReportProperties = aggregateReportProperties;
    }

    @Override
    public Report generateReport(final Report report, final User user) {
        try {
            final AggregateReportRequest reportRequest = (AggregateReportRequest) report.getReportRequest();
            final ReportQuery query = reportRequest.getReportQuery();

            //Send to aggregate-service with JWT
            final ClientHttpRequest request = clientHttpRequestFactory.createRequest(getUri(), HttpMethod.POST);
            final HttpHeaders headers = request.getHeaders();
            final String authorizationHeader = BearerAuthorizationHeaders.create(jwtService.encode(user));
            headers.set(HttpHeaders.AUTHORIZATION, authorizationHeader);
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setAccept(ImmutableList.of(TEXT_CSV));
            objectMapper.writeValue(request.getBody(), query);

            final ClientHttpResponse response = request.execute();
            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new IllegalStateException("Invalid response from aggregate-service: " + response.getStatusCode());
            }

            final MediaType contentMediaType = response.getHeaders().getContentType();
            final long contentLength = response.getHeaders().getContentLength();
            final Report result = reportContentService.writeContent(report, response.getBody(), contentLength, contentMediaType);
            return Report.builder()
                    .copy(result)
                    .status(ReportStatus.COMPLETED)
                    .build();

        } catch (final Exception e) {
            logger.warn("Problem generating aggregate report", e);
            return Report.builder()
                    .copy(report)
                    .status(FAILED)
                    .build();
        }
    }

    private URI getUri() {
        return URI.create(aggregateReportProperties.getUrl() + "/export");
    }
}
