package org.opentestsystem.rdw.reporting.processor.web.converter;

import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.reporting.common.util.Headers;
import org.opentestsystem.rdw.reporting.processor.util.FileNames;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageNotWritableException;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;

/**
 * This ReportHandler is responsible for general ReportContentResource writing.
 * The resource data is streamed to the response.
 * The resource's content type is sent as the response Content-Type header.
 * The response is given a Content-Disposition header directing the browser to download
 * the data using the report's label as the destination file name, using the content-type to
 * pick the file extension.
 */
public class DefaultReportHandler implements ReportHandler {

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        return true;
    }

    @Override
    public void writeResource(final ReportContentResource resource, final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
        setHeaders(resource, outputMessage.getHeaders());
        writeContent(resource, outputMessage);
    }

    /**
     * Generate and add HTTP headers to the headers parameter.
     *
     * @param resource  The resource being written
     * @param headers   The response http headers (the value is modified)
     */
    protected void setHeaders(final ReportContentResource resource, final HttpHeaders headers) {
        final String filename = FileNames.format(resource.getReport().getLabel(), resource.getMediaType());
        final String contentDisposition = Headers.formatContentDispositionAttachment(filename, StandardCharsets.UTF_8);

        headers.setContentType(resource.getMediaType());
        headers.set(CONTENT_DISPOSITION, contentDisposition);

        if (!headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {
            headers.setContentLength(resource.contentLength());
        }
    }

    /**
     * Write the resource content to the output message.
     *
     * @param resource      The resource being written
     * @param outputMessage The destination output message
     * @throws IOException  If there is an issue reading/writing resource content
     * @throws HttpMessageNotWritableException If there is an issue reading/writing resource content
     */
    protected void writeContent(final ReportContentResource resource, final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
        try (final InputStream in = resource.getInputStream()) {
            IOUtils.copy(in, outputMessage.getBody());
        } catch (final IOException e) {
            throw new IllegalStateException("Problem writing report content to response", e);
        }
    }
}
