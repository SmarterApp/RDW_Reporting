package org.opentestsystem.rdw.reporting.processor.service;

import org.springframework.http.MediaType;

import java.io.InputStream;
import java.net.URI;
import java.util.Properties;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;

/**
 * Implementations of this interface are responsible for persisting and
 * reading {@link UserReport} content bytes.
 */
public interface ReportContentService {

    /**
     * Write report contents into persistent storage.
     * Update the report with content location URI.
     *
     * @param report        The report
     * @param content       The report contents
     * @param contentLength The report content length in bytes
     * @param mediaType     The report content MediaType
     * @return The UserReport with persisted content location URI.
     */
    UserReport writeContent(UserReport report,
                            InputStream content,
                            long contentLength,
                            MediaType mediaType);

    /**
     * Read report contents from persistent storage.
     *
     * @param report The report
     * @return The report contents
     */
    ReportContentResource openContent(UserReport report);

    /**
     * Delete a collection of report contents from persistent storage.
     *
     * @param userReport the user report for which to delete content
     */
    void deleteContent(UserReport userReport);

    /**
     * Read a report's content properties.
     *
     * @param report    A report
     * @param mediaType The report content media type
     * @return  The report content properties
     */
    Properties readProperties(UserReport report, MediaType mediaType);

    /**
     * Create a location URI for the given report and media type.
     *
     * @param report    A report
     * @param mediaType The media type of the report contents
     * @return  A URI for the report contents
     */
    URI createUri(UserReport report, MediaType mediaType);

}
