package org.opentestsystem.rdw.reporting.processor.requesthandler;

import org.opentestsystem.rdw.reporting.common.codedentity.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.codedentity.SubjectService;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.springframework.stereotype.Component;

import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;

/**
 * This implementation of an ExamQueryParamsParser is responsible for converting
 * a {@link SchoolGradeExamReportRequest} into an {@link ExamQueryParams} instance.
 */
@Component
public class SchoolGradeExamQueryParamsParser implements ExamQueryParamsParser {

    private final AssessmentTypeService assessmentTypeService;
    private final SubjectService subjectService;

    SchoolGradeExamQueryParamsParser(final AssessmentTypeService assessmentTypeService,
                               final SubjectService subjectService) {
        this.assessmentTypeService = assessmentTypeService;
        this.subjectService = subjectService;
    }

    @Override
    public boolean accept(final AbstractExamReportRequest reportRequest) {
        return SchoolGradeExamReportRequest.class.isInstance(reportRequest);
    }

    @Override
    public ExamQueryParams parseQueryParams(final AbstractExamReportRequest reportRequest) {
        final SchoolGradeExamReportRequest request = (SchoolGradeExamReportRequest) reportRequest;
        return ExamQueryParams.builder()
                .schoolYear(request.getSchoolYear())
                .schoolId(request.getSchoolId())
                .assessmentTypeCode(request.getAssessmentTypeCode())
                .assessmentTypeId(assessmentTypeService.getIdsByCode().get(request.getAssessmentTypeCode()))
                .gradeId(request.getGradeId())
                .subjectCode(request.getSubjectCode())
                .subjectId(subjectService.getIdsByCode().get(request.getSubjectCode()))
                .queryPermissionType(Individual)
                .disableTransferAccess(reportRequest.isDisableTransferAccess())
                .build();
    }
}
