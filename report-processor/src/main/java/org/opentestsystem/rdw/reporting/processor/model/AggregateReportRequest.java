package org.opentestsystem.rdw.reporting.processor.model;

import com.google.common.collect.Iterables;
import com.google.common.collect.Ordering;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

public class AggregateReportRequest extends AbstractExamReportRequest<PrintOptions> {

    private ReportQuery reportQuery;

    @Override
    public ReportType getReportType() {
        return ReportType.AggregateReportRequest;
    }

    /**
     * Override default behavior to provide the subject from the ReportQuery.
     * NOTE: ReportQuery instances may contain multiple subject ids.  If multiple
     * subject ids are declared, return "null" to indicate "all subjects."
     * TODO Account for multiple subjects if/when we have more than just Math and ELA
     *
     * @return The report subject(s)
     */
    @Override
    public Subject getSubject() {
        return reportQuery.getSubjectCodes().size() != 1
                ? null
                : Subject.valueOf(Iterables.getOnlyElement(reportQuery.getSubjectCodes()));
    }

    /**
     * Override default behavior to provide the school year from the ReportQuery.
     * NOTE: ReportQuery instances may contain multiple school years.  If multiple
     * school years are declared, return the last school year.
     * TODO Account for multiple school years in model/API
     *
     * @return The report school year
     */
    @Override
    public int getSchoolYear() {
        final List<Integer> orderedSchoolYears = newArrayList(reportQuery.getSchoolYears());
        orderedSchoolYears.sort(Ordering.natural());
        return Iterables.getLast(orderedSchoolYears);
    }

    public ReportQuery getReportQuery() {
        return reportQuery;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AbstractExamReportRequest.Builder<PrintOptions, AggregateReportRequest, AggregateReportRequest.Builder> {
        private ReportQuery reportQuery;

        public AggregateReportRequest build() {
            final AggregateReportRequest request = super.build(new AggregateReportRequest());
            request.reportQuery = reportQuery;

            return request;
        }

        public Builder reportQuery(final ReportQuery reportQuery) {
            this.reportQuery = reportQuery;
            return this;
        }
    }
}
