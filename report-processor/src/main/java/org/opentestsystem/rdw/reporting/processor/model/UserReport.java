package org.opentestsystem.rdw.reporting.processor.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;

import java.net.URI;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

/**
 * The model represents the request, generation, and current status of a report.
 */
public class UserReport {
    private Long id;
    private String user;
    private ReportStatus status;
    private URI reportResourceUri;
    private String label;
    private ReportQuery query;
    private Instant created;
    private Map<String, String> metadata;

    /**
     * @return The report id
     */
    public Long getId() {
        return id;
    }

    /**
     * @return The report user
     */
    @JsonIgnore
    public String getUser() {
        return user;
    }

    /**
     * @return The report generation status
     */
    public ReportStatus getStatus() {
        return status;
    }

    /**
     * @return The generated report uri or null if not generated
     */
    @JsonIgnore
    public URI getReportResourceUri() {
        return reportResourceUri;
    }

    /**
     * @return The report label
     */
    public String getLabel() {
        return label;
    }

    /**
     * @return The report request parameters
     */
    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property="@class")
    public ReportQuery getQuery() {
        return query;
    }

    /**
     * @return The report request submission date-time
     */
    public Instant getCreated() {
        return created;
    }

    /**
     * @return The optional report metadata
     */
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * @return A Builder initialized with this UserReport's values.
     */
    public Builder copy() {
        return new Builder().copy(this);
    }

    /**
     * @return An empty builder instance
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Long id;
        private String user;
        private ReportStatus status;
        private URI reportResourceUri;
        private String label;
        private ReportQuery query;
        private Instant created;
        private final Map<String, String> metadata = new HashMap<>();

        public UserReport build() {
            final UserReport report = new UserReport();
            report.id = id;
            report.user = user;
            report.status = status;
            report.reportResourceUri = reportResourceUri;
            report.label = label;
            report.query = query;
            report.created = created;
            report.metadata = metadata;
            return report;
        }

        public Builder copy(final UserReport report) {
            id(report.getId());
            user(report.getUser());
            status(report.getStatus());
            reportResourceUri(report.getReportResourceUri());
            label(report.getLabel());
            query(report.getQuery());
            created(report.getCreated());
            metadata(report.getMetadata());
            return this;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder user(final String user) {
            this.user = user;
            return this;
        }

        public Builder status(final ReportStatus status) {
            this.status = status;
            return this;
        }

        public Builder reportResourceUri(final URI reportResourceUri) {
            this.reportResourceUri = reportResourceUri;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder query(final ReportQuery query) {
            this.query = query;
            return this;
        }

        public Builder created(final Instant created) {
            this.created = created;
            return this;
        }

        public Builder metadata(final Map<String, String> metadata) {
            this.metadata.clear();
            if (metadata == null) return this;

            this.metadata.putAll(metadata);
            return this;
        }

        public Builder metadata(final String key, final String value) {
            this.metadata.put(key, value);
            return this;
        }
    }
}
