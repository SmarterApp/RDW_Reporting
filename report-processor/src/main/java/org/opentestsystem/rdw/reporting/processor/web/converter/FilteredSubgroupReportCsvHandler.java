package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportType;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;

import static org.apache.commons.lang.StringUtils.isNotEmpty;
import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * Represents common functionality for converting {@link AbstractAggregateReportQuery} report result into a CSV format
 */
abstract class FilteredSubgroupReportCsvHandler<R extends AggregateRow, Q extends AbstractAggregateReportQuery>
        extends AggregateReportCsvHandler<Q, R> {

    @Autowired
    public FilteredSubgroupReportCsvHandler(final MessageSource messageSource,
                                            final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final AbstractExamReportRequest request = resource.getReport().getReportRequest();
        return !APPLICATION_JSON.isCompatibleWith(requestedMediaType) &&
                request.getReportType() == ReportType.AggregateReportRequest;
    }

    /**
     * Returns a custom subgroup {@link StudentFilters} as a string of attributes
     * A subgroup is identified by the {@link Dimension#code}
     */
    @Override
    protected String getDimensionValue(final CsvContext context, final Dimension dimension) {

        final String subgroupKey = dimension.getCode();

        //check the cached values first
        if (isNotEmpty(context.get(subgroupKey, String.class))) return context.get(subgroupKey, String.class);

        final String subgroupAttributesAsString = getSubgroupAsString(context, subgroupKey);
        context.put(subgroupKey, subgroupAttributesAsString);
        return subgroupAttributesAsString;
    }

    private String getSubgroupAsString(final CsvContext context, final String subgroupKey) {

        final StudentFilters subGroupStudentFilters = context.getQuery().getSubgroups().get(subgroupKey);
        if (subGroupStudentFilters != null) return AttributeJoiner.join(getFiltersAsAttributes(subGroupStudentFilters));

        // check if this is a default Overall dimension that was added without a user's explicit request
        if (DimensionType.Overall.equals(DimensionType.caseInsensitiveValue(subgroupKey))) return DimensionType.Overall.code();

        throw new IllegalStateException("Unknown subgroup referenced by FilteredSubgroup report result: " + subgroupKey);
    }
}
