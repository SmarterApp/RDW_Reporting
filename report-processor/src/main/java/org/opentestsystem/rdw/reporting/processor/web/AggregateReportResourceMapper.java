package org.opentestsystem.rdw.reporting.processor.web;

import com.google.common.collect.Ordering;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.springframework.stereotype.Component;

import static org.opentestsystem.rdw.reporting.processor.model.ReportType.AggregateReportRequest;

/**
 * Mapper for aggregate reports containing an {@link AbstractAggregateReportQuery}.
 */
@Component
class AggregateReportResourceMapper extends DefaultReportResourceMapper {
    private final static Ordering<String> subjectOrdering = Ordering.natural().reverse();
    private final static Ordering<Integer> schoolYearOrdering = Ordering.natural().reverse();

    @Override
    public boolean handles(final UserReport report) {
        return report.getReportRequest() != null &&
                AggregateReportRequest.equals(report.getReportRequest().getReportType()) &&
                AbstractAggregateReportQuery.class.isInstance(((AggregateReportRequest) report.getReportRequest()).getQuery());
    }

    @Override
    public ReportResource toResource(final UserReport report) {
        final ReportResource resource = super.toResource(report);
        final AggregateReportRequest request = (AggregateReportRequest) report.getReportRequest();
        final AbstractAggregateReportQuery query = (AbstractAggregateReportQuery) request.getQuery();

        resource.setAssessmentTypeCode(query.getAssessmentTypeCode());
        resource.setSubjectCodes(subjectOrdering.sortedCopy(query.getSubjectCodes()));
        resource.setSchoolYears(schoolYearOrdering.sortedCopy(query.getSchoolYears()));
        return resource;
    }
}
