package org.opentestsystem.rdw.reporting.processor.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.Student;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * This model contains the set of reports for a single student.
 */
public class StudentCompositeReport {

    private Student student;
    private List<AbstractExamReport> reports;

    private StudentCompositeReport() {
    }

    /**
     * @return The student
     */
    public Student getStudent() {
        return student;
    }

    /**
     * @return The student's reports ordered by assessment type, then subject
     */
    public List<AbstractExamReport> getReports(){
        return reports;
    }

    /**
     * @return A new Builder instance
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Student student;
        private final List<AbstractExamReport> reports = newArrayList();

        public StudentCompositeReport build() {
            final StudentCompositeReport report = new StudentCompositeReport();
            report.student = student;
            report.reports = ImmutableList.copyOf(reports);

            return report;
        }

        public Builder copy(final StudentCompositeReport report) {
            student(report.student);
            reports(report.reports);
            return this;
        }

        public Builder student(final Student student) {
            this.student = student;
            return this;
        }

        public Builder reports(final List<AbstractExamReport> reports) {
            this.reports.clear();
            if (!isEmpty(reports)) {
                this.reports.addAll(reports);
            }
            return this;
        }

        public Builder addReports(final Collection<? extends AbstractExamReport> additionalReports) {
            this.reports.addAll(additionalReports);
            return this;
        }
    }
}
