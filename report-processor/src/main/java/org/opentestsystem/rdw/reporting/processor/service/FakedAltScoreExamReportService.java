package org.opentestsystem.rdw.reporting.processor.service;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AltScoreAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.annotation.Primary;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import static java.time.temporal.ChronoField.MILLI_OF_SECOND;
import static org.springframework.util.CollectionUtils.isEmpty;

@Primary
@Service
public class FakedAltScoreExamReportService extends DefaultExamReportService {
    public static final long OFFSET = 20000L;
    private long counter = 0L;

    private final Map<String, Map<Long,UserReport>> cache;

    public FakedAltScoreExamReportService(ReportGenerator generator,
                                          UserReportService service,
                                          ReportContentService contentService) {
        super(generator, service, contentService);
        cache = new HashMap<>();
    }

    @Override
    public UserReport createReport(User user, ReportQuery query) {
        if (query.getType() != ReportQueryType.AltScore) {
            return super.createReport(user, query);
        }

        final long reportId = ++counter + OFFSET;
        UserReport report = UserReport.builder()
            .id(reportId)
            .user(user.getId())
            .status(ReportStatus.PENDING)
            .reportResourceUri(null)
            .label(query.getName() + " (faked data)")
            .created(Instant.now())
            .query(query)
            .metadata(null)
            .build();

        getUserCache(user).put(reportId, report);

        return report;
    }

    @Override
    public List<UserReport> getReports(User user) {
        final List<UserReport> allReports = new ArrayList<>();
        final List<UserReport> normalReports = super.getReports(user);
        if (normalReports != null) {
            allReports.addAll(normalReports);
        }

        final Collection<UserReport> fakeAltScoreReports = getUserCache(user).values();
        allReports.addAll(fakeAltScoreReports);

        return allReports;
    }

    @Override
    public List<UserReport> getReports(User user, Iterable<Long> reportIds) {
        final List<UserReport> allSelectedReports = new ArrayList<>();

        final List<Long> notFoundReportIds = new ArrayList<>();

        Map<Long, UserReport> userCache = getUserCache(user);
        for(final Long reportId : reportIds) {
            if (userCache.containsKey(reportId)) {
                final UserReport completed = complete(userCache.get(reportId));
                userCache.put(reportId, completed);
                allSelectedReports.add(completed);
            } else {
                notFoundReportIds.add(reportId);
            }
        }

        if (!notFoundReportIds.isEmpty()) {
            final List<UserReport> normalReports = super.getReports(user, notFoundReportIds);
            if (normalReports != null) {
                allSelectedReports.addAll(normalReports);
            }
        }

        return allSelectedReports;
    }

    @Override
    public ReportContentResource openReportContent(User user, long reportId) {
        if (!getUserCache(user).containsKey(reportId)) {
            return super.openReportContent(user, reportId);
        }

        UserReport userReport = getUserCache(user).get(reportId);
        AltScoreAggregateReportQuery reportQuery = (AltScoreAggregateReportQuery)userReport.getQuery();
        Random random = new Random(userReport.getCreated().getLong(MILLI_OF_SECOND));

        final String fakeReport = getFakedData(reportQuery, random);
        return new ReportContentResource(
            () -> new ByteArrayInputStream(fakeReport.getBytes()),
            fakeReport.length(),
            MediaType.APPLICATION_JSON,
            getUserCache(user).get(reportId));
    }

    protected String getFakedData(AltScoreAggregateReportQuery query, Random random) {
        Dimension overall = Dimension.builder()
            .type(DimensionType.Overall)
            .build();
        Organization california = Organization.builder()
            .organizationType(OrganizationType.State)
            .name("California")
            .build();

        List<AltScoreRow> rows = new ArrayList<>();

        for (String subject : query.getSubjectCodes()) {
            for (int schoolYear : query.getSchoolYears()) {
                for (String grade : query.getAssessmentGradeCodes()) {
                    Set<String> subjectAltCodes = query.getAltScoreCodesBySubject().get(subject);
                    if (isEmpty(subjectAltCodes)) {
                        continue;
                    }

                    ActiveAssessment assessment = ActiveAssessment.builder()
                        .id(200)
                        .label(formatLabel(grade, subject))
                        .gradeCode(formatGrade(grade))
                        .subjectCode(subject)
                        .examSchoolYear(schoolYear)
                        .build();

                    for (String code : subjectAltCodes) {
                        rows.add(AltScoreRow.builder()
                            .dimension(overall)
                            .organization(california)
                            .assessment(assessment)
                            .measures(getMeasures(random))
                            .altScoreCode(code)
                            .build());
                    }
                }
            }
        }

        ObjectMapper om = new ObjectMapper();
        om.setSerializationInclusion(JsonInclude.Include.NON_NULL);

        try {
            return om.writeValueAsString(rows);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private Measures getMeasures(Random random) {
        int [] values = new int[4];
        int studentCount = 0;
        for (int i = 0; i < 4; i++) {
            // Each level between 12 and 18 students (inclusive)
            values[i] = random.nextInt(7) + 12;
            studentCount += values[i];
        }

        return Measures.builder()
            .studentCount(studentCount)
            .level1Count(values[0])
            .level2Count(values[1])
            .level3Count(values[2])
            .level4Count(values[3])
            .build();
    }

    private String formatLabel(String grade, String subject) {
        return String.format("Grade %s %s", grade, subject.toUpperCase());
    }

    private String formatGrade(String grade) {
        if (grade.length() == 1 && !grade.equalsIgnoreCase("K")) {
            return "0" + grade;
        }
        return grade;
    }

    private UserReport complete(UserReport userReport) {
        AltScoreAggregateReportQuery query = (AltScoreAggregateReportQuery)userReport.getQuery();
        int totalCodes = query.getAltScoreCodesBySubject().values().stream()
            .map(Set::size)
            .reduce(0, Integer::sum);

        int estimatedRows = query.getAssessmentGradeCodes().size() * totalCodes;

        if (userReport.getStatus() == ReportStatus.PENDING) {
            return userReport.copy()
                .status(ReportStatus.COMPLETED)
                .metadata("totalCount", Integer.toString(estimatedRows))
                .metadata("createdWhileDataEmbargoed", "false")
                .build();
        }

        return userReport;
    }

    @Override
    public void delete(User user, long reportId) {
        super.delete(user, reportId);

        getUserCache(user).remove(reportId);
    }

    private Map<Long,UserReport> getUserCache(final User user) {
        if (!cache.containsKey(user.getId())) {
            cache.put(user.getId(), new HashMap<>());
        }

        return cache.get(user.getId());
    }
}


