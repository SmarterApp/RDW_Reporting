package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

/**
 * This class is responsible for temporarily storing student UserReport chunk
 * content while generating a UserReport.  It is backed by an ArchiveService.
 *
 * It is responsible for cleaning up the temporary storage when requested.
 */
@Service
public class ArchiveBackedReportGenerationTemporaryStorage implements ReportGenerationTemporaryStorage {

    final static String BasePath = "REPORTS/TEMP/";

    private final ArchiveService archiveService;

    public ArchiveBackedReportGenerationTemporaryStorage(final ArchiveService archiveService) {
        this.archiveService = archiveService;
    }

    @Override
    public void writeChunk(final long reportId, final int chunkIdx, final InputStream content) {
        archiveService.writeResource(getChunkUri(reportId, chunkIdx), content, null);
    }

    @Override
    public List<Supplier<InputStream>> getChunks(final long reportId, final int chunkCount) {
        final List<Supplier<InputStream>> chunkContents = new ArrayList<>();
        for (int i = 0; i < chunkCount; i++) {
            final int chunkIdx = i;
            chunkContents.add(() ->
                    archiveService.openResource(getChunkUri(reportId, chunkIdx)));
        }
        return chunkContents;
    }

    @Override
    public void cleanup(final long reportId) {
        archiveService.delete(getReportUri(reportId));
    }

    private String getChunkUri(final long reportId, final int chunkIdx) {
        return getReportUri(reportId) + "/" + chunkIdx + ".pdf";
    }

    private String getReportUri(final long reportId) {
        return BasePath + reportId;
    }
}
