package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Charsets;
import com.google.common.base.Joiner;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.lang.mutable.MutableObject;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.common.util.Headers;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportType;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.apache.commons.lang.StringUtils.trimToEmpty;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.reporting.common.model.AggregateQueryType.Basic;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV_UTF8;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.getExtension;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;
import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * This handler is responsible for transforming an {@link AggregateReportRequest} JSON
 * response into a CSV payload using codes for values and data model identifiers for headers
 * where applicable.
 * If filters have been applied to the query, they are printed in the first row, last column of the
 * response under the header of "Attributes."
 *
 * Note that this handler will only be applied if the user has not explicitly requested a JSON response payload.
 */
@Component
public class AggregateReportCsvHandler extends DefaultReportHandler {
    private static final Logger logger = LoggerFactory.getLogger(AggregateReportCsvHandler.class);
    private static final Joiner AttributeJoiner = Joiner.on("; ");
    private static final Joiner AttributeValueJoiner = Joiner.on("|");
    private static final String NotApplicable = "";
    private static final Object[] EmptyObjectArray = new Object[]{};
    private static final Locale ReportLocale = Locale.US;

    private final MessageSource messageSource;
    private final ObjectMapper objectMapper;

    @Autowired
    public AggregateReportCsvHandler(final MessageSource messageSource,
                                     final ObjectMapper objectMapper) {
        this.messageSource = messageSource;
        this.objectMapper = objectMapper;
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final AbstractExamReportRequest request = resource.getReport().getReportRequest();
        return !APPLICATION_JSON.isCompatibleWith(requestedMediaType) &&
                request.getReportType() == ReportType.AggregateReportRequest &&
                ((AggregateReportRequest) request).getQuery().getQueryType() == Basic;

    }

    @Override
    protected void setHeaders(final ReportContentResource resource, final HttpHeaders headers) {
        final String filename = resource.getReport().getLabel().replaceAll("\\s", "_") + "." + getExtension(TEXT_CSV_UTF8);
        final String contentDisposition = Headers.formatContentDispositionAttachment(filename, Charset.forName("UTF-8"));

        headers.setContentType(TEXT_CSV_UTF8);
        headers.set(CONTENT_DISPOSITION, contentDisposition);
    }

    @Override
    protected void writeContent(final ReportContentResource resource, final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
        try (final InputStream in = resource.getInputStream()) {
            final AggregateReportRequest request = (AggregateReportRequest) resource.getReport().getReportRequest();
            final JsonFactory jsonFactory = objectMapper.getFactory();
            final JsonParser parser = jsonFactory.createParser(in);
            if (parser.nextToken() != JsonToken.START_ARRAY) {
                throw new IllegalStateException("Found non-array json payload for aggregate report: " + resource.getReport().getId());
            }
            parser.nextToken();
            final Iterator<BasicAggregateRow> rowIterator = asReportRowIterator(parser, resource);

            printCsv(rowIterator, (BasicAggregateReportQuery) request.getQuery(), outputMessage.getBody());

        } catch (final IOException e) {
            throw new RuntimeException("Problem writing aggregate report content to response", e);
        }
    }

    private void printCsv(final Iterator<BasicAggregateRow> results, final BasicAggregateReportQuery query, final OutputStream outputStream) {
        final CSVFormat csvFormat = CSVFormat.DEFAULT
                .withHeader(getHeaders(query));

        try {
            final CSVPrinter printer = csvFormat.print(new OutputStreamWriter(outputStream, Charsets.UTF_8));
            final MutableObject printAttributes = new MutableObject(true);

            while (results.hasNext()) {
                final BasicAggregateRow result = results.next();
                final List<String> columnValues = new ArrayList<>();
                columnValues.add(result.getOrganization().getName());
                columnValues.add(result.getOrganization().getNaturalId());
                columnValues.add(result.getAssessment().getLabel());
                columnValues.add(query.getAssessmentTypeCode());
                columnValues.add(result.getAssessment().getSubjectCode());
                columnValues.add(result.getAssessment().getGradeCode());
                columnValues.add(String.valueOf(result.getAssessment().getExamSchoolYear()));

                final Dimension dimension = result.getDimension();
                columnValues.add(dimension.getType().code());
                columnValues.add(trimToEmpty(dimension.getCode()));

                final Measures measures = result.getMeasures();
                final long studentCount = measures.getStudentCount();

                columnValues.add(String.valueOf(studentCount));
                columnValues.add(measures.getAvgScaleScore() == null ? NotApplicable : measures.getAvgScaleScore().toString());
                columnValues.add(measures.getAvgStdErr() == null ? NotApplicable : measures.getAvgStdErr().toString());
                columnValues.add(String.valueOf(measures.getLevel1Count()));
                columnValues.add(String.valueOf(measures.getLevel2Count()));
                columnValues.add(String.valueOf(measures.getLevel3Count()));
                if (!IAB.code().equals(query.getAssessmentTypeCode())) {
                    columnValues.add(String.valueOf(measures.getLevel4Count()));
                }

                if ((Boolean) printAttributes.getValue()) {
                    printAttributes.setValue(false);
                    columnValues.add(getAttributes(query));
                } else {
                    columnValues.add(EMPTY);
                }

                printer.printRecord(columnValues);
            }

            printer.flush();
        } catch (final IOException e) {
            logger.warn("Problem exporting report CSV", e);
            throw new RuntimeException(e);
        }
    }

    private String[] getHeaders(final BasicAggregateReportQuery query) {
        final List<String> headers = new ArrayList<>();
        headers.add(getMessage("report.aggregate.export.header.organization"));
        headers.add(getMessage("report.aggregate.export.header.natural-id"));
        headers.add(getMessage("report.aggregate.export.header.assessment"));
        headers.add(getMessage("report.aggregate.export.header.assessment-type"));
        headers.add(getMessage("report.aggregate.export.header.subject"));
        headers.add(getMessage("report.aggregate.export.header.grade"));
        headers.add(getMessage("report.aggregate.export.header.year"));
        headers.add(getMessage("report.aggregate.export.header.dimension"));
        headers.add(getMessage("report.aggregate.export.header.dimension-code"));
        headers.add(getMessage("report.aggregate.export.header.student-count"));
        headers.add(getMessage("report.aggregate.export.header.score"));
        headers.add(getMessage("report.aggregate.export.header.standard-deviation"));
        headers.addAll(getPerformanceLevelHeaders(query));
        headers.add(getMessage("report.aggregate.export.header.attributes"));
        return headers.toArray(new String[headers.size()]);
    }

    private List<String> getPerformanceLevelHeaders(final BasicAggregateReportQuery query) {
        final List<String> performanceLevelHeaders = new ArrayList<>();
        if (IAB.code().equals(query.getAssessmentTypeCode())) {
            for (int i = 1; i <= 3; i++) {
                performanceLevelHeaders.add(getMessage("report.iab.level." + i + ".label"));
            }
        } else {
            for (int i = 1; i <= 4; i++) {
                performanceLevelHeaders.add(getMessage("report.ica.level." + i + ".description"));
            }
        }
        return performanceLevelHeaders;
    }

    private String getAttributes(final BasicAggregateReportQuery query) {
        final List<String> attributes = new ArrayList<>();
        final LocalDateTime localDate = LocalDateTime.now();
        appendAttribute(attributes, "ReportDate", Collections.singleton(localDate.format(DateTimeFormatter.ISO_DATE_TIME)));
        appendAttribute(attributes, "AdministrationCondition", query.getAdministrativeConditionCodes());
        appendAttribute(attributes, "Completeness", query.getCompletenessCodes());

        final StudentFilters filters = query.getStudentFilters();
        if (filters != null) {
            appendAttribute(attributes, "Sex", filters.getGenderCodes());
            appendAttribute(attributes, "Ethnicity", filters.getEthnicityCodes());
            appendAttribute(attributes, "LEPStatus", filters.getLepCodes());
            appendAttribute(attributes, "MigrantStatus", filters.getMigrantStatusCodes());
            appendAttribute(attributes, "Section504Status", filters.getSection504Codes());
            appendAttribute(attributes, "IDEAIndicator", filters.getIepCodes());
            appendAttribute(attributes, "EconomicDisadvantageStatus", filters.getEconomicDisadvantageCodes());
        }

        return AttributeJoiner.join(attributes);
    }

    private String getMessage(final String key) {
        return messageSource.getMessage(key, EmptyObjectArray, ReportLocale);
    }

    private Iterator<BasicAggregateRow> asReportRowIterator(final JsonParser parser, final ReportContentResource resource) {
        return new Iterator<BasicAggregateRow>() {
            @Override
            public boolean hasNext() {
                return parser.currentToken() == JsonToken.START_OBJECT;
            }

            @Override
            public BasicAggregateRow next() {
                try {
                    final JsonNode node = objectMapper.readTree(parser);
                    parser.nextToken();
                    return objectMapper.treeToValue(node, BasicAggregateRow.class);
                } catch (final IOException e) {
                    throw new IllegalStateException("Unable to parse json payload for aggregate report: " + resource.getReport().getId(), e);
                }
            }
        };
    }

    private void appendAttribute(final List<String> attributes, final String label, final Collection<String> values) {
        if (values.isEmpty()) return;

        attributes.add(label + ": " + AttributeValueJoiner.join(values));
    }
}
