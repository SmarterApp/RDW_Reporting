package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupLongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.model.AggregateQueryType.FilteredSubgroupLongitudinal;

@Component
public class LongitudinalFilteredSubgroupReportCsvHandler extends FilteredSubgroupReportCsvHandler<LongitudinalRow, FilteredSubgroupLongitudinalReportQuery> {
    public LongitudinalFilteredSubgroupReportCsvHandler(final MessageSource messageSource, final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        return super.accept(resource, requestedMediaType) &&
                ((AggregateReportRequest) resource.getReport().getReportRequest()).getQuery().getQueryType() == FilteredSubgroupLongitudinal;
    }

    @Override
    protected Class<LongitudinalRow> getRowInstanceClass() {
        return LongitudinalRow.class;
    }

    @Override
    protected List<String> getMeasureHeaders(final FilteredSubgroupLongitudinalReportQuery query) {
        super.getMeasureHeaders(query, "");
        final List<String> headers = super.getMeasureHeaders(query, "");
        headers.addAll(super.getMeasureHeaders(query, ".cohort"));
        return headers;
    }

    @Override
    protected List<Measures> getMeasures(final LongitudinalRow result) {
        return newArrayList(result.getMeasures(), result.getCohortMeasures());
    }
}
