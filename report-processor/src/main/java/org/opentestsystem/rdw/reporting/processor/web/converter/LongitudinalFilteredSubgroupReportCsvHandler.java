package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static org.opentestsystem.rdw.reporting.common.model.AggregateReportType.Longitudinal;

@Component
public class LongitudinalFilteredSubgroupReportCsvHandler extends FilteredSubgroupReportCsvHandler<LongitudinalRow, LongitudinalReportQuery> {
    public LongitudinalFilteredSubgroupReportCsvHandler(final MessageSource messageSource, final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final boolean accept = super.accept(resource, requestedMediaType);
        if (!accept) return false;

        final AggregateQuery query = ((AggregateReportRequest) resource.getReport().getReportRequest()).getQuery();
        return query.getReportType() == Longitudinal && query.isFilteredSubgroupQuery();
    }

    @Override
    protected Class<LongitudinalRow> getRowInstanceClass() {
        return LongitudinalRow.class;
    }

    @Override
    protected List<String> getMeasureHeaders(final LongitudinalReportQuery query) {
        final List<String> headers = super.getMeasureHeaders(query, "");
        headers.addAll(super.getMeasureHeaders(query, ".cohort"));
        return headers;
    }

    @Override
    protected List<String> getMeasuresValues(final CsvContext context, final LongitudinalRow result) {
        final List<String> measuresValues = getMeasuresValues(context.getQuery().getAssessmentTypeCode(), result.getMeasures());
        measuresValues.addAll(getMeasuresValues(context.getQuery().getAssessmentTypeCode(), result.getCohortMeasures()));
        return measuresValues;
    }
}
