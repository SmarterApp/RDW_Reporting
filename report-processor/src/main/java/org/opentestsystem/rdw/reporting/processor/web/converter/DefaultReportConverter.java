package org.opentestsystem.rdw.reporting.processor.web.converter;

import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;

import java.io.IOException;
import java.util.Set;

/**
 * This HttpMessageConverter is responsible for writing {@link ReportContentResource} responses.
 * It first attempts to delegate to an accepting registered {@link ReportHandler} before falling
 * back to delegating to the default ReportHandler.
 */
public class DefaultReportConverter extends AbstractHttpMessageConverter<ReportContentResource> {

    private final ReportHandler defaultHandler;
    private final Set<ReportHandler> reportHandlers;

    public DefaultReportConverter(final ReportHandler defaultHandler,
                                  final Set<ReportHandler> reportHandlers) {
        super(MediaType.ALL);
        this.defaultHandler = defaultHandler;
        this.reportHandlers = reportHandlers;
    }

    @Override
    protected boolean supports(final Class<?> clazz) {
        return ReportContentResource.class.isAssignableFrom(clazz);
    }

    @Override
    protected MediaType getDefaultContentType(final ReportContentResource resource) {
        return MediaType.APPLICATION_OCTET_STREAM;
    }

    @Override
    protected boolean canRead(final MediaType mediaType) {
        return false;
    }

    @Override
    protected ReportContentResource readInternal(final Class<? extends ReportContentResource> clazz, final HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {
        throw new UnsupportedOperationException("Converter cannot be used to read ReportContentResource instances, only write them");
    }

    @Override
    protected void writeInternal(final ReportContentResource resource, final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
        final ReportHandler handler = findHandler(resource, outputMessage.getHeaders().getContentType());
        handler.writeResource(resource, outputMessage);
    }

    private ReportHandler findHandler(final ReportContentResource resource, final MediaType requestedMediaType) {
        return reportHandlers.stream()
                .filter(handler -> handler.accept(resource, requestedMediaType))
                .findFirst()
                .orElse(defaultHandler);
    }

}
