package org.opentestsystem.rdw.reporting.processor.web;

import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.UserQuery;
import org.opentestsystem.rdw.reporting.processor.service.UserQueryService;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.NoSuchElementException;

@RestController
class UserQueryController {

    private final UserQueryService service;

    UserQueryController(final UserQueryService service) {
        this.service = service;
    }

    @GetMapping("/queries")
    public List<UserQuery> get(
            @AuthenticationPrincipal final User user) {

        return service.get(user);
    }

    @GetMapping("/queries/{id}")
    public UserQuery get(
            @AuthenticationPrincipal final User user,
            @PathVariable final Long id) {

        return service.get(user, id)
                .orElseThrow(() -> new NoSuchElementException("User query not found"));
    }

    @PostMapping("/queries")
    @ResponseStatus(HttpStatus.CREATED)
    public UserQuery create(
            @AuthenticationPrincipal final User user,
            @RequestBody final ReportQuery query) {

        return service.create(user, query);
    }

    @PutMapping("/queries")
    public UserQuery update(
            @AuthenticationPrincipal final User user,
            @RequestBody final UserQuery query) {

        return service.update(user, query);
    }

    @DeleteMapping("/queries/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(
            @AuthenticationPrincipal final User user,
            @PathVariable final Long id) {

        service.delete(user, id);
    }

}
