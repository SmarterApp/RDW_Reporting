package org.opentestsystem.rdw.reporting.processor.stream;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.report.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.ExamExportService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.stereotype.Component;

import java.net.URI;

import static org.opentestsystem.rdw.reporting.processor.stream.ExportExamsSource.ReportExportExams;

/**
 * This component is responsive for interpreting the ExportExamReportRequest and passing it along to the export service.
 */
@Component
public class ExportExams {

    private final static Logger logger = LoggerFactory.getLogger(ExportExams.class);
    private ExamExportService exportService;
    private ReportService reportService;

    @Autowired
    public ExportExams(final ExamExportService exportService,
                       final ReportService reportService) {

        this.exportService = exportService;
        this.reportService = reportService;
    }

    @ServiceActivator(inputChannel = ReportExportExams)
    public void exportExams(final ReportRequestMessage message) {
        logger.debug("Exporting exams for report request: {}", message.getReportId());
        final long reportId = message.getReportId();

        final Report report = reportService
                .findOneById(message.getReportId())
                .orElseThrow(() -> new IllegalArgumentException("Unknown Report: " + message.getReportId()));

        if (report.getStatus() == ReportStatus.FAILED) {
            return;
        }

        final ExportExamReportRequest request = (ExportExamReportRequest) report.getReportRequest();
        final URI exportUri = exportService.exportExam(message.getUserPermissions(), request, reportId);

        final Report updated = Report.builder()
                .copy(report)
                .status(ReportStatus.COMPLETED)
                .reportResourceUri(exportUri)
                .build();

        reportService.update(updated);
    }
}
