package org.opentestsystem.rdw.reporting.processor.stream;

import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.ExamExportService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.stereotype.Component;

import java.net.URI;

import static org.opentestsystem.rdw.reporting.processor.stream.ExportExamsProcessor.ReportExportExamsIn;

/**
 * This component is responsive for interpreting the ExportExamReportRequest and passing it along to the export service.
 */
@Component
public class ExportExams {

    private final static Logger logger = LoggerFactory.getLogger(ExportExams.class);
    private final ExamExportService exportService;
    private final ReportService reportService;
    private final MessageSecurityService messageSecurityService;

    @Autowired
    public ExportExams(final ExamExportService exportService,
                       final ReportService reportService,
                       final MessageSecurityService messageSecurityService) {

        this.exportService = exportService;
        this.reportService = reportService;
        this.messageSecurityService = messageSecurityService;
    }

    @StreamListener(ReportExportExamsIn)
    public void exportExams(final Message<ReportRequestMessage> message) {
        final ReportRequestMessage payload = message.getPayload();
        final long reportId = payload.getReportId();
        logger.debug("Exporting exams for report request: {}", reportId);

        final User user = messageSecurityService.getUser(message);

        final UserReport report = reportService
                .findOneById(payload.getReportId())
                .orElseThrow(() -> new IllegalArgumentException("Unknown UserReport: " + reportId));

        if (report.getStatus() == ReportStatus.FAILED) {
            return;
        }

        final ExportExamReportRequest request = (ExportExamReportRequest) report.getReportRequest();

        final URI exportUri = exportService.exportExams(user, request, reportId);

        final UserReport updated = UserReport.builder()
                .copy(report)
                .status(ReportStatus.COMPLETED)
                .reportResourceUri(exportUri)
                .build();

        reportService.update(updated);
    }
}
