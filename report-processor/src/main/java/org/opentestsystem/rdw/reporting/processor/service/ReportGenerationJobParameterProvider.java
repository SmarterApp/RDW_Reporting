package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;

/**
 * This class is responsible for storing and retrieving Report and PermissionScope
 * values from Spring Batch JobParameters.
 * This implementation is designed to work with unbounded PermissionScope values, accounting
 * for the relatively small parameter value sizes allowed by Spring Batch.
 */
@Component
public class ReportGenerationJobParameterProvider {
    private final static Logger logger = LoggerFactory.getLogger(ReportGenerationJobParameterProvider.class);

    // JobParameter keys
    private static final String REPORT_KEY = "report_id";
    private static final String DISTRICT_ID_PREFIX = "district_id_";
    private static final String INSTITUTION_ID_PREFIX = "institution_id_";

    private final ReportService reportService;

    @Autowired
    public ReportGenerationJobParameterProvider(final ReportService reportService) {
        this.reportService = reportService;
    }

    /**
     * Create JobParameters from the given Report id and PermissionScope.
     *
     * @param reportId          The report id
     * @param permissionScope   The request permission scope
     * @return Initialized JobParameters
     */
    public JobParameters toJobParameters(final long reportId, final PermissionScope permissionScope) {
        final JobParametersBuilder jobParametersBuilder = new JobParametersBuilder()
                .addLong(REPORT_KEY, reportId);

        appendIdParameters(jobParametersBuilder, DISTRICT_ID_PREFIX, permissionScope.getDistrictIds());
        appendIdParameters(jobParametersBuilder, INSTITUTION_ID_PREFIX, permissionScope.getInstitutionIds());


        return jobParametersBuilder.toJobParameters();
    }

    /**
     * Retrieve the Report instance for the given JobParameters.
     * NOTE: Depending upon access method, JobParameters may be represented as either a map of
     * [key, value] or [key, JobParameter].
     *
     * @param jobParameters The job parameters
     * @return The report associated with the job parameters
     */
    public Report reportFromParameters(final Map<String, ?> jobParameters) {
        final Long reportId = getValue(jobParameters, REPORT_KEY, Long.class);
        if (reportId == null) {
            throw new IllegalStateException("Job missing Report reference");
        }
        return reportService.findOneById(reportId)
                .orElseThrow(() -> new IllegalStateException("Job referencing unknown Report: " + reportId));
    }

    /**
     * Retrieve the PermissionScope instance for the given JobParameters.
     * NOTE: Depending upon access method, JobParameters may be represented as either a map of
     * [key, value] or [key, JobParameter].
     *
     * @param jobParameters The job parameters
     * @return The PermissionScope associated with the job parameters
     */
    public PermissionScope permissionScopeFromParameters(final Map<String, ?> jobParameters) {
        final Collection<Long> districtIds = getIdParameters(jobParameters, DISTRICT_ID_PREFIX);
        final Collection<Long> institutionIds = getIdParameters(jobParameters, INSTITUTION_ID_PREFIX);
        return new PermissionScope(districtIds, institutionIds);
    }

    private void appendIdParameters(final JobParametersBuilder builder, final String prefix, final Collection<Long> values) {
        int idx = 0;
        for (final Long value : values) {
            final String key = prefix + idx++;
            builder.addLong(key, value);
        }
    }

    private Collection<Long> getIdParameters(final Map<String, ?> jobParameters, final String prefix) {
        final Collection<Long> idParameters = new HashSet<>();
        int idx = 0;
        Long value = getValue(jobParameters, prefix + idx, Long.class);
        while (value != null) {
            idParameters.add(value);
            idx++;
            value = getValue(jobParameters, prefix + idx, Long.class);
        }
        return idParameters;
    }

    private <T> T getValue(final Map<String, ?> jobParameters, final String key, final Class<T> clazz) {
        final Object value = jobParameters.get(key);
        if (value == null) return null;

        try {
            if (value instanceof JobParameter) {
                return clazz.cast(((JobParameter) value).getValue());
            } else {
                return clazz.cast(value);
            }
        } catch (final ClassCastException e) {
            logger.warn("Unable to cast JobParameter value: {} as {}", value, clazz);
            return null;
        }
    }
}
