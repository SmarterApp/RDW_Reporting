package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.stream.FetchStudentsSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.HashMap;

import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;

/**
 * Spring Stream -backed implementation of a report generator.
 */
@Service
public class SpringStreamReportGenerator implements ReportGenerator {
    private static final Logger logger = LoggerFactory.getLogger(SpringStreamReportGenerator.class);

    private final ReportService reportService;
    private final FetchStudentsSource source;

    @Autowired
    public SpringStreamReportGenerator(final ReportService reportService,
                                       final FetchStudentsSource source) {
        this.reportService = reportService;
        this.source = source;
    }

    @Override
    public Report generateReport(final BatchExamReportRequestHolder requestHolder) {
        Report report = null;
        try {
            report = reportService.create(Report.builder()
                    .reportRequest(requestHolder.getRequest())
                    .created(Instant.now())
                    .label(requestHolder.getLabel())
                    .status(PENDING)
                    .user(requestHolder.getUser())
                    .build());

            publishReportRequest(requestHolder, report);

            return report;
        } catch (final Exception e) {
            failReport(report);
            throw new IllegalStateException("Unable to submit report", e);
        }
    }

    private void failReport(final Report report) {
        reportService.update(Report.builder()
                .copy(report)
                .status(FAILED)
                .build());
    }

    private void publishReportRequest(final BatchExamReportRequestHolder requestHolder,
                                      final Report report) {
        logger.debug("Publishing report generation request: {}", report.getId());
        final ReportRequestMessage payload = ReportRequestMessage.builder()
                .reportId(report.getId())
                .userPermissions(requestHolder.getUserPermissions())
                .build();

        final Message<ReportRequestMessage> message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));
        source.fetchStudents().send(message);
    }
}
