package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.stream.AggregateReportRequestProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.ExportExamsProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.PdfReportProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.HashMap;

import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;

/**
 * Spring Stream -backed implementation of a report generator.
 */
@Service
public class SpringStreamReportGenerator implements ReportGenerator {
    private static final Logger logger = LoggerFactory.getLogger(SpringStreamReportGenerator.class);

    private final ReportService reportService;
    private final ExportExamsProcessor exportReportSource;
    private final PdfReportProcessor pdfReportSource;
    private final AggregateReportRequestProcessor aggregateReportsSource;
    private final MessageSecurityService messageSecurityService;

    @Autowired
    public SpringStreamReportGenerator(final ReportService reportService,
                                       final ExportExamsProcessor exportReportSource,
                                       final PdfReportProcessor pdfReportSource,
                                       final AggregateReportRequestProcessor aggregateReportsSource,
                                       final MessageSecurityService messageSecurityService) {
        this.reportService = reportService;
        this.exportReportSource = exportReportSource;
        this.pdfReportSource = pdfReportSource;
        this.aggregateReportsSource = aggregateReportsSource;
        this.messageSecurityService = messageSecurityService;
    }

    @Override
    public UserReport generateReport(final ReportQuery query, final User user) {
        UserReport report = null;
        try {
            report = reportService.create(UserReport.builder()
                    .query(query)
                    .created(Instant.now())
                    .label(query.getName())
                    .status(PENDING)
                    .user(user.getUsername())
                    .build());

            publishReportRequest(report, user);

            return report;
        } catch (final Exception e) {
            if (report == null) {
                throw new RuntimeException("Unable to create report", e);
            }

            failReport(report);
            throw new IllegalStateException("Unable to submit report", e);
        }
    }

    private void failReport(final UserReport report) {
        reportService.update(UserReport.builder()
                .copy(report)
                .status(FAILED)
                .build());
    }

    private void publishReportRequest(final UserReport report, final User user) {
        logger.debug("Publishing report generation request: {}", report.getId());
        final ReportRequestMessage payload = ReportRequestMessage.builder()
                .reportId(report.getId())
                .build();

        final Message<ReportRequestMessage> message = messageSecurityService.withUser(
                MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>())),
                user);

        final ReportQueryType type = report.getQuery().getType();
        switch (type) {
            case SchoolGrade:
            case Group:
            case Student:
                pdfReportSource.fetchStudentsOut().send(message);
                break;
            case DistrictSchoolExport:
                exportReportSource.exportExamsOut().send(message);
                break;
            case CustomAggregate:
            case Longitudinal:
            case Claim:
            case Target:
                aggregateReportsSource.aggregateReportsOut().send(message);
                break;
            default:
                throw new IllegalArgumentException("Unknown report type: " + type);
        }
    }
}
