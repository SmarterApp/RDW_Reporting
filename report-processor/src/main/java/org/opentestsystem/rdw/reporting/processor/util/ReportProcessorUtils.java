package org.opentestsystem.rdw.reporting.processor.util;

import org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.IndividualPiiRead;

/**
 * Utility methods for the report processor application.
 */
public class ReportProcessorUtils {

    /**
     * Retrieve the correct security parameters for the given user permissions
     * and exam query permission type.
     *
     * @param userPermissions       The requesting user's permissions
     * @param queryPermissionType   The query permission type
     * @return The appropriate security parameters
     */
    public static Map<String, Object> getSecurityParameters(final UserPermissions userPermissions,
                                                            final ExamQueryParams.PermissionType queryPermissionType) {
        switch (queryPermissionType) {
            case Unknown:
                return new MapSqlParameterSource()
                        .addValues(QueryUtils.getSecurityParameters(userPermissions.getPermissionsById()))
                        .addValue("group_ids", nullOrEmptyToDefault(userPermissions.getGroupsById().keySet(), UNMATCHABLE_IDS))
                        .getValues();
            case Individual:
                final Permission individualPiiPermission = userPermissions.getPermissionsById().get(IndividualPiiRead);
                final PermissionScope individualScope = individualPiiPermission == null ? PermissionScope.EMPTY : individualPiiPermission.getScope();
                return new MapSqlParameterSource()
                        .addValues(QueryUtils.getSecurityParameters(individualScope))
                        .getValues();
            case Group:
                final Permission groupPiiPermission = userPermissions.getPermissionsById().get(GroupPiiRead);
                final PermissionScope groupScope = groupPiiPermission == null ? PermissionScope.EMPTY : groupPiiPermission.getScope();
                return new MapSqlParameterSource()
                        .addValues(QueryUtils.getSecurityParameters(groupScope))
                        .getValues();
            default:
                throw new IllegalArgumentException("Unknown query permission type: " + queryPermissionType);
        }
    }

    /**
     * Retrieve the query parameters for an ExamQueryParams instance.
     *
     * @param examQueryParams The query parameters
     * @return The SQL query parameters
     */
    public static Map<String, Object> getExamFilterParameters(final ExamQueryParams examQueryParams) {
        final Map<String, Object> params = new HashMap<>();
        params.put("subject_id", examQueryParams.getSubject() == null ? null : examQueryParams.getSubject().id());
        params.put("assessment_type", examQueryParams.getAssessmentType() == null ? null : examQueryParams.getAssessmentType().id());
        params.put("school_id", examQueryParams.getSchoolId());
        params.put("grade_id", examQueryParams.getGradeId());
        params.put("group_id", examQueryParams.getGroupId());
        params.put("school_year", examQueryParams.getSchoolYear());
        params.put("student_id", examQueryParams.getStudentId());
        return params;
    }
}
