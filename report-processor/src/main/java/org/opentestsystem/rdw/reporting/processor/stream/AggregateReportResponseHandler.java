package org.opentestsystem.rdw.reporting.processor.stream;

import com.amazonaws.services.s3.Headers;
import org.opentestsystem.rdw.reporting.common.model.AggregateResponseMessage;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.Properties;

import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.COMPLETED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.processor.stream.AggregateReportRequestProcessor.AggregateResponse;
import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * This component is responsible for listening to {@link AggregateResponseMessage}s
 * submitted by an external service and updating the associated reports.
 */
@Component
public class AggregateReportResponseHandler {
    private static final Logger logger = LoggerFactory.getLogger(AggregateReportResponseHandler.class);

    private final ReportService reportService;
    private final ReportContentService contentService;

    @Autowired
    public AggregateReportResponseHandler(final ReportService reportService,
                                          final ReportContentService contentService) {
        this.reportService = reportService;
        this.contentService = contentService;
    }

    @StreamListener(AggregateResponse)
    public void handleAggregateReportResponse(final Message<AggregateResponseMessage> message) {
        final AggregateResponseMessage payload = message.getPayload();
        logger.debug("Received aggregate report response: {}", payload.getId());

        final Optional<Report> reportOptional = reportService.findOneById(payload.getId());
        if (!reportOptional.isPresent()) {
            logger.warn("Unknown aggregate report: {}", payload.getId());
            return;
        }

        final Report report = reportOptional.get();
        if (report.getStatus() == FAILED) return;

        if (!validatePayload(payload, report)) {
            reportService.update(report.copy()
                    .status(FAILED)
                    .build());
            return;
        }

        reportService.update(report.copy()
                .status(payload.getStatus())
                .metadata("totalCount", String.valueOf(payload.getResultCount()))
                .metadata("isMayContainEmbargoedResults", String.valueOf(payload.isMayContainEmbargoedResults()))
                .reportResourceUri(contentService.createUri(report, APPLICATION_JSON))
                .build());
    }

    private boolean validatePayload(final AggregateResponseMessage payload, final Report report) {
        if (payload.getStatus() == null) {
            logger.warn("Invalid ReportStatus for Report: " + report.getId());
            return false;
        }

        if (payload.getStatus() == COMPLETED) {
            //Check the content properties
            final Properties contentProperties = contentService.readProperties(report, APPLICATION_JSON);
            final Long reportLength = (Long) contentProperties.get(Headers.CONTENT_LENGTH);
            if (reportLength == null || reportLength <= 0) {
                logger.warn("Invalid content length for aggregate report: {} length: {}", report.getId(), reportLength);
                return false;
            }

            //Check the total count
            if (payload.getResultCount() <= 0) {
                logger.warn("Invalid total result count for aggregate report: {}", payload.getResultCount());
                return false;
            }
        } else {
            logger.debug("Non-completed aggregate report response: {} message: {}", report.getId(), payload.getMessage());
        }

        return true;
    }
}
