package org.opentestsystem.rdw.reporting.processor.model;

import org.opentestsystem.rdw.common.model.Subject;

import java.util.Locale;

public abstract class AbstractExamReportRequest<T> {

    @Deprecated
    protected ExamReportAssessmentType assessmentType;
    protected String assessmentTypeCode;
    @Deprecated
    protected Subject subject;
    protected String subjectCode;
    protected int schoolYear;
    protected Locale language;
    protected T options;
    protected String name;
    protected boolean accommodationsVisible;
    protected boolean disableTransferAccess;

    public String getAssessmentTypeCode() {
        // Bridge older schema
        if (assessmentType != null) {
            return assessmentType.getAssessmentType().code();
        }
        return assessmentTypeCode;
    }

    public abstract ReportType getReportType();

    public String getReportTypeDisplayValue() {
        return getReportType().name();
    }

    public String getSubjectCode() {
        // Bridge older schema
        if (subject != null) {
            return subject.code();
        }
        return subjectCode;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public Locale getLanguage() {
        return language;
    }

    public T getOptions() {
        return options;
    }

    public String getName() {
        return name;
    }

    public boolean isAccommodationsVisible() {
        return accommodationsVisible;
    }

    public boolean isDisableTransferAccess() {
        return disableTransferAccess;
    }

    @SuppressWarnings({"unchecked"})
    public static class Builder<T, A extends AbstractExamReportRequest<T>, B extends Builder<T, A, B>> {

        @Deprecated
        private ExamReportAssessmentType assessmentType;
        private String assessmentTypeCode;
        @Deprecated
        private Subject subject;
        private String subjectCode;
        private int schoolYear;
        private Locale language;
        private T options;
        private String name;
        private boolean accommodationsVisible;
        private boolean disableTransferAccess;

        @Deprecated
        public B assessmentType(final ExamReportAssessmentType assessmentType) {
            this.assessmentType = assessmentType;
            return (B) this;
        }

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        @Deprecated
        public B subject(final Subject subject) {
            this.subject = subject;
            return (B) this;
        }

        public B subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return (B) this;
        }

        public B schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return (B) this;
        }

        public B language(final Locale language) {
            this.language = language;
            return (B) this;
        }

        public B options(final T options) {
            this.options = options;
            return (B) this;
        }

        public B name(final String name) {
            this.name = name;
            return (B) this;
        }

        public B accommodationsVisible(final boolean accommodationsVisible) {
            this.accommodationsVisible = accommodationsVisible;
            return (B) this;
        }

        public B disableTransferAccess(final boolean disableTransferAccess) {
            this.disableTransferAccess = disableTransferAccess;
            return (B) this;
        }

        protected B copy(final B builder, final A source) {
            return builder
                    .assessmentType(source.assessmentType)
                    .assessmentTypeCode(source.assessmentTypeCode)
                    .subject(source.subject)
                    .subjectCode(source.subjectCode)
                    .schoolYear(source.schoolYear)
                    .language(source.language)
                    .options(source.options)
                    .name(source.name)
                    .accommodationsVisible(source.accommodationsVisible)
                    .disableTransferAccess(source.disableTransferAccess);
        }

        protected A build(final A search) {
            search.assessmentType = assessmentType;
            search.assessmentTypeCode = assessmentTypeCode;
            search.subject = subject;
            search.subjectCode = subjectCode;
            search.schoolYear = schoolYear;
            search.language = language;
            search.options = options;
            search.name = name;
            search.accommodationsVisible = accommodationsVisible;
            search.disableTransferAccess = disableTransferAccess;
            return search;
        }

    }
}
