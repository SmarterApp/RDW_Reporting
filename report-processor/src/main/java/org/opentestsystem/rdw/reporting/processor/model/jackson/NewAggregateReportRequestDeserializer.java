package org.opentestsystem.rdw.reporting.processor.model.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.opentestsystem.rdw.reporting.common.model.AggregateReportFilters;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.processor.model.NewAggregateReportRequest;

import java.io.IOException;

/**
 * This temporary deserializer is responsible for deserializing AggregateReportRequest instances.
 * It is responsible for handling legacy serialized instances containing a ReportRequest rather
 * than a BasicAggregateReportRequest.
 * TODO Remove once we no longer have V1_2 serialized AggregateReportRequests in a production environment
 *
 * TODO Rename/rebind this deserializer to "AggregateReportRequest" once the feature is ready.
 */
public class NewAggregateReportRequestDeserializer extends DelegatingDeserializer {

    public NewAggregateReportRequestDeserializer(final JsonDeserializer<?> delegate) {
        super(delegate);
    }

    @Override
    protected JsonDeserializer<?> newDelegatingInstance(final JsonDeserializer<?> newDelegate) {
        return new NewAggregateReportRequestDeserializer(newDelegate);
    }

    @Override
    public NewAggregateReportRequest deserialize(final JsonParser parser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
        final ObjectMapper mapper = (ObjectMapper) parser.getCodec();
        final ObjectNode jsonNode = mapper.readTree(parser);

        if (jsonNode.has("reportQuery")) {
            return convertLegacyRequest(jsonNode, mapper, ctxt);
        }

        final JsonParser subParser = mapper.getFactory().createParser(jsonNode.toString());
        subParser.nextToken();
        return (NewAggregateReportRequest) getDelegatee().deserialize(subParser, ctxt);
    }

    private NewAggregateReportRequest convertLegacyRequest(final ObjectNode requestNode,
                                                           final ObjectMapper mapper,
                                                           final DeserializationContext ctxt) throws IOException {
        final JsonNode reportQueryNode = requestNode.remove("reportQuery");
        final ReportQuery legacyQuery = mapper.readValue(reportQueryNode.toString(), ReportQuery.class);
        final BasicAggregateReportQuery query = fromLegacy(legacyQuery);

        final JsonParser subParser = mapper.getFactory().createParser(requestNode.toString());
        subParser.nextToken();
        final NewAggregateReportRequest request = (NewAggregateReportRequest) getDelegatee().deserialize(subParser, ctxt);
        return NewAggregateReportRequest.builder()
                .copy(request)
                .query(query)
                .build();
    }

    private BasicAggregateReportQuery fromLegacy(final ReportQuery reportQuery) {
        final AggregateReportFilters filters = AggregateReportFilters.builder()
                .completenessCodes(reportQuery.getCompletenessCodes())
                .administrativeConditionCodes(reportQuery.getAdministrativeConditionCodes())
                .genderCodes(reportQuery.getGenderCodes())
                .ethnicityCodes(reportQuery.getEthnicityCodes())
                .lepCodes(reportQuery.getLepCodes())
                .migrantStatusCodes(reportQuery.getMigrantStatusCodes())
                .section504Codes(reportQuery.getSection504Codes())
                .iepCodes(reportQuery.getIepCodes())
                .economicDisadvantageCodes(reportQuery.getEconomicDisadvantageCodes())
                .build();

        return BasicAggregateReportQuery.builder()
                .assessmentTypeCode(reportQuery.getAssessmentTypeCode())
                .subjectCodes(reportQuery.getSubjectCodes())
                .schoolYears(reportQuery.getSchoolYears())
                .assessmentGradeCodes(reportQuery.getAssessmentGradeCodes())
                .includeState(reportQuery.isIncludeState())
                .includeAllDistricts(reportQuery.isIncludeAllDistricts())
                .includeAllSchoolsOfDistricts(reportQuery.isIncludeAllSchoolsOfDistricts())
                .includeAllDistrictsOfSchools(reportQuery.isIncludeAllDistrictsOfSchools())
                .districtIds(reportQuery.getDistrictIds())
                .schoolIds(reportQuery.getSchoolIds())
                .valueDisplayType(reportQuery.getValueDisplayType())
                .achievementLevelDisplayType(reportQuery.getAchievementLevelDisplayType())
                .columnOrder(reportQuery.getColumnOrder())
                .dimensionTypes(reportQuery.getDimensionTypes())
                .filters(filters)
                .build();
    }
}
