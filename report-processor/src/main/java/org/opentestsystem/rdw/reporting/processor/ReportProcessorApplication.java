package org.opentestsystem.rdw.reporting.processor;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.reporting.common.i18n.TranslationConfiguration;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.reporting.processor.service.WkhtmltopdfWebServiceClient;
import org.opentestsystem.rdw.utils.ResourceLoaderConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cloud.aws.autoconfigure.cache.ElastiCacheAutoConfiguration;
import org.springframework.cloud.aws.autoconfigure.context.ContextStackAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.PropertySource;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;

@SpringBootApplication(exclude = {
        ElastiCacheAutoConfiguration.class,
        ContextStackAutoConfiguration.class
})
@EnableCaching
@PropertySource(value = "classpath:build-info.properties", ignoreResourceNotFound = true)
@Import({
        EndpointAutoConfiguration.class,
        ResourceLoaderConfiguration.class,
        StatusConfiguration.class,
        YamlPropertiesConfigurator.class,
        DataSourceConfiguration.class,
        TranslationConfiguration.class,
        SecurityParameterProvider.class
})
public class ReportProcessorApplication {

    public static void main(final String[] args) {
        SpringApplication.run(ReportProcessorApplication.class, args);
    }

    @Bean
    public ClientHttpRequestFactory requestFactory() {
        return new SimpleClientHttpRequestFactory();
    }

    @Bean
    public WkhtmltopdfWebServiceClient wkhtmlToPdfWebServiceClient(
            @Value("${app.wkhtmltopdf.url}") final String url,
            final ClientHttpRequestFactory requestFactory,
            final ObjectMapper objectMapper) {
        return new WkhtmltopdfWebServiceClient(requestFactory, url, objectMapper);
    }

}