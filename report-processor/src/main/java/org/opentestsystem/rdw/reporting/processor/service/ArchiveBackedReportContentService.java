package org.opentestsystem.rdw.reporting.processor.service;

import com.amazonaws.services.s3.Headers;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Properties;

import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.APPLICATION_PDF_UTF8;
import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.getExtension;
import static org.springframework.util.StringUtils.isEmpty;

/**
 * This implementation of a ReportContentService is backed by an ArchiveService.
 */
@Service
public class ArchiveBackedReportContentService implements ReportContentService {
    private static final Logger logger = LoggerFactory.getLogger(ArchiveBackedReportContentService.class);
    private final static String BasePath = "REPORTS/USER/";

    private final ArchiveService archiveService;
    private final ReportService reportService;

    @Autowired
    public ArchiveBackedReportContentService(final ArchiveService archiveService,
                                             final ReportService reportService) {
        this.archiveService = archiveService;
        this.reportService = reportService;
    }

    @Override
    public Report writeContent(final Report report,
                               final InputStream content,
                               final long contentLength,
                               final MediaType mediaType) {
        final URI uri = createUri(report, mediaType);
        final Properties properties = new Properties();
        properties.put(Headers.CONTENT_LENGTH, contentLength);
        properties.put(Headers.CONTENT_TYPE, mediaType.toString());

        archiveService.writeResource(uri.toASCIIString(), content, properties);

        return reportService.update(report.copy()
                .reportResourceUri(uri)
                .build());
    }

    @Override
    public ReportContentResource openContent(final Report report) {
        final URI uri = report.getReportResourceUri();
        if (uri == null) {
            throw new IllegalArgumentException("Report has no content URI: " + report.getId());
        }

        final String location = uri.toASCIIString();
        final Properties reportProperties = archiveService.readProperties(location);
        if (!reportProperties.containsKey(Headers.CONTENT_LENGTH)) return null;

        final String contentType = reportProperties.getProperty(Headers.CONTENT_TYPE);
        final MediaType mediaType = isEmpty(contentType) ? APPLICATION_PDF_UTF8 : MediaType.parseMediaType(contentType);
        final long reportLength = (Long) reportProperties.get(Headers.CONTENT_LENGTH);
        return new ReportContentResource(archiveService.openResource(location), reportLength, mediaType);
    }

    @Override
    public void deleteContents(final Collection<Report> reports) {
        for (final Report report : reports) {
            deleteContent(report);
        }
    }

    private void deleteContent(final Report report) {
        final URI uri = report.getReportResourceUri();
        if (uri != null) {
            final String location = uri.toASCIIString();
            try {
                archiveService.delete(location);
            } catch (final RuntimeException e) {
                logger.warn("failed to delete location {}", location, e);
            }
        }
    }

    private URI createUri(final Report report, final MediaType mediaType) {
        return URI.create(BasePath + report.getId() + "." + getExtension(mediaType));
    }
}
