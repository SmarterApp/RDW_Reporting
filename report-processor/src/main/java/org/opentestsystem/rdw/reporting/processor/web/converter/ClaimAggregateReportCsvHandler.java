package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.common.model.AssessmentBoundaries;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Component
public class ClaimAggregateReportCsvHandler extends AbstractAggregateReportCsvHandler<ClaimAggregateReportQuery, ClaimRow> {

    public ClaimAggregateReportCsvHandler(final MessageSource messageSource, final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final boolean accept = super.accept(resource, requestedMediaType);
        if (!accept) return false;

        final ReportQuery query = resource.getReport().getQuery();
        return query.getType() == ReportQueryType.Claim;
    }

    @Override
    protected List<String> getMeasureHeaders(final ClaimAggregateReportQuery query) {
        final List<String> headers = newArrayList();
        headers.add(getMessage("report.aggregate.export.header.student-count"));
        for (int i = 1; i <= AssessmentBoundaries.MaxPerformanceLevels; i++) {
            headers.add(getMessage("report.generic.claim.performance-level." + i + ".label"));
        }
        return headers;
    }

    @Override
    protected List<String> getMeasuresValues(final CsvContext context, final ClaimRow result) {
        final List<String> measuresValues = newArrayList();
        final Measures measures = result.getMeasures();
        measuresValues.add(String.valueOf(measures.getStudentCount()));
        measuresValues.add(measures.getLevel1Count() == null ? NotApplicable : measures.getLevel1Count().toString());
        measuresValues.add(measures.getLevel2Count() == null ? NotApplicable : measures.getLevel2Count().toString());
        measuresValues.add(measures.getLevel3Count() == null ? NotApplicable : measures.getLevel3Count().toString());
        measuresValues.add(measures.getLevel4Count() == null ? NotApplicable : measures.getLevel4Count().toString());
        measuresValues.add(measures.getLevel5Count() == null ? NotApplicable : measures.getLevel5Count().toString());
        measuresValues.add(measures.getLevel6Count() == null ? NotApplicable : measures.getLevel6Count().toString());
        return measuresValues;
    }

    @Override
    protected List<String> getReportCustomHeaders() {
        return newArrayList(getMessage("report.aggregate.export.header.claim"));
    }

    @Override
    protected List<String> getReportCustomValues(final CsvContext context, final ClaimRow result) {
        return newArrayList(getMessage("subject." + result.getAssessment().getSubjectCode() + ".claim." + result.getClaimCode() + ".name"));
    }

    @Override
    protected Class<ClaimRow> getRowInstanceClass() {
        return ClaimRow.class;
    }
}
