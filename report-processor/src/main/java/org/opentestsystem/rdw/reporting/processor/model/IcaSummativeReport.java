package org.opentestsystem.rdw.reporting.processor.model;


import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;

import java.util.ArrayList;
import java.util.List;

public class IcaSummativeReport extends AbstractExamReport {

    private Assessment assessment;
    private Exam exam;

    // Previous years' exams for same student, subject, report type. Historical exams have a limited set of fields.
    private List<Exam> historicalExams;

    private IcaSummativeReport() {
    }

    public Assessment getAssessment() {
        return assessment;
    }

    public Exam getExam() {
        return exam;
    }

    public List<Exam> getHistoricalExams() {
        return historicalExams;
    }

    @Override
    public Integer getSchoolYear() {
        return exam == null ? null : exam.getSchoolYear();
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AbstractExamReport.Builder<IcaSummativeReport, Builder> {

        private Assessment assessment;
        private Exam exam;
        private List<Exam> historicalExams = new ArrayList<>();

        public Builder assessment(final Assessment assessment) {
            this.assessment = assessment;
            return this;
        }

        public Builder exam(final Exam exam) {
            this.exam = exam;
            return this;
        }

        public Builder addHistoricalExam(final Exam exam) {
            this.historicalExams.add(exam);
            return this;
        }

        public Builder historicalExams(final List<Exam> historicalExams) {
            this.historicalExams = historicalExams == null ? new ArrayList<>() : new ArrayList<>(historicalExams);
            return this;
        }

        public Builder copy(final IcaSummativeReport report) {
            super.copy(report);
            assessment(report.assessment);
            exam(report.exam);
            historicalExams(report.historicalExams);
            return this;
        }

        public IcaSummativeReport build() {
            final IcaSummativeReport report = super.build(new IcaSummativeReport());
            report.assessment = assessment;
            report.exam = exam;
            report.historicalExams = ImmutableList.copyOf(historicalExams);

            return report;
        }
    }

}
