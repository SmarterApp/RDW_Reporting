package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportType;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static org.apache.commons.lang.StringUtils.trimToEmpty;
import static org.opentestsystem.rdw.reporting.common.model.AggregateQueryType.BasicCustomAggregate;
import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * This handler is responsible for transforming the JSON response for an
 * {@link AggregateReportRequest} containing a {@link CustomAggregateReportQuery} into a CSV.
 * <p>
 * The response JSON contains an array of {@link AggregateRow}s that should each be converted
 * into a CSV row in the response payload using codes for values and data model identifiers for headers
 * where applicable.
 * If filters have been applied to the query, they are printed in the first row, last column of the
 * response under the header of "Attributes."
 * <p>
 * Note that this handler will only be applied if the user has not explicitly requested a JSON response payload.
 */
@Component
class BasicAggregateReportCsvHandler extends AggregateReportCsvHandler {

    @Autowired
    public BasicAggregateReportCsvHandler(final MessageSource messageSource,
                                          final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final AbstractExamReportRequest request = resource.getReport().getReportRequest();
        return !APPLICATION_JSON.isCompatibleWith(requestedMediaType) &&
                request.getReportType() == ReportType.AggregateReportRequest &&
                ((AggregateReportRequest) request).getQuery().getQueryType() == BasicCustomAggregate;
    }

    @Override
    protected List<String> getHeaders(final CustomAggregateReportQuery query) {
        final List<String> headers = super.getHeaders(query);
        headers.add(7, getMessage("report.aggregate.export.header.dimension"));
        headers.add(8, getMessage("report.aggregate.export.header.dimension-code"));

        return headers;
    }

    @Override
    protected List<String> getRowValues(final CsvContext context, final AggregateRow result) {
        final List<String> rowValues = super.getRowValues(context, result);

        final Dimension dimension = result.getDimension();
        rowValues.add(7, dimension.getType().code());
        rowValues.add(8, trimToEmpty(dimension.getCode()));

        return rowValues;
    }

    @Override
    protected List<String> getAttributes(final CustomAggregateReportQuery query) {
        final List<String> attributes = super.getAttributes(query);

        final StudentFilters filters = query.getStudentFilters();
        if (filters != null) {
            appendAttribute(attributes, "Sex", filters.getGenderCodes());
            appendAttribute(attributes, "Ethnicity", filters.getEthnicityCodes());
            appendAttribute(attributes, "LEPStatus", filters.getLepCodes());
            appendAttribute(attributes, "ELAS", filters.getElasCodes());
            appendAttribute(attributes, "MigrantStatus", filters.getMigrantStatusCodes());
            appendAttribute(attributes, "Section504Status", filters.getSection504Codes());
            appendAttribute(attributes, "IDEAIndicator", filters.getIepCodes());
            appendAttribute(attributes, "EconomicDisadvantageStatus", filters.getEconomicDisadvantageCodes());
        }
        return attributes;
    }
}
