package org.opentestsystem.rdw.reporting.processor.web;

import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.service.ExamReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Set;

@RestController
public class ReportController {

    private final ReportResourceAssembler assembler;
    private final ExamReportService service;

    @Autowired
    ReportController(final ExamReportService service,
                     final Set<ReportResourceMapper> resourceMappers) {
        this.service = service;
        this.assembler = new ReportResourceAssembler(new DefaultReportResourceMapper(), resourceMappers);
    }

    @GetMapping("/reports")
    public List<ReportResource> getReports(
            @AuthenticationPrincipal final User user,
            @RequestParam(value = "id", required = false) final Set<Long> reportIds) {

        return assembler.toResources(reportIds != null
                ? service.getReports(user, reportIds)
                : service.getReports(user));
    }

    @GetMapping(
            path = "/reports/{reportId}",
            produces = MediaType.ALL_VALUE
    )
    public ReportContentResource getReport(
            @AuthenticationPrincipal final User user,
            @PathVariable final long reportId) {

        return service.openReportContent(user, reportId);
    }

    @PostMapping("/reports")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @RequestBody final ReportQuery query) {

        return assembler.toResource(service.createReport(user, query));
    }

}
