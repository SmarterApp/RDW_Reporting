package org.opentestsystem.rdw.reporting.processor.web;

import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.service.ExamReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Set;

@RestController
public class ReportController {

    private final ReportResourceAssembler assembler;
    private final ExamReportService service;

    @Autowired
    ReportController(final ExamReportService service,
                     final Set<ReportResourceMapper> resourceMappers) {
        this.service = service;
        this.assembler = new ReportResourceAssembler(new DefaultReportResourceMapper(), resourceMappers);
    }

    @GetMapping("/reports")
    public List<ReportResource> getReports(
            @AuthenticationPrincipal final User user,
            @RequestParam(value = "id", required = false) final Set<Long> reportIds) {

        return assembler.toResources(reportIds != null
                ? service.getReports(user, reportIds)
                : service.getReports(user));
    }

    @GetMapping(
            path = "/reports/{reportId}",
            produces = MediaType.ALL_VALUE
    )
    public ReportContentResource getReport(
            @AuthenticationPrincipal final User user,
            @PathVariable final long reportId) {

        return service.openReportContent(user, reportId);
    }

    @PostMapping("/students/{studentId}/report")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @PathVariable final long studentId,
            @AuthenticationPrincipal final User user,
            @RequestBody final StudentExamReportRequest request) {

        return assembler.toResource(service.createReport(user, request.copy().studentId(studentId).build()));
    }

    @PostMapping("/schools/{schoolId}/assessmentGrades/{gradeId}/reports")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @PathVariable final long schoolId,
            @PathVariable final int gradeId,
            @RequestBody final SchoolGradeExamReportRequest request) {

        return assembler.toResource(service.createReport(user, request.copy().schoolId(schoolId).gradeId(gradeId).build()));
    }

    @PostMapping("/student-exam-reports")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @RequestBody final GroupExamReportRequest request) {

        return assembler.toResource(service.createReport(user, request));
    }

    @PostMapping("/exams/export")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @RequestBody final ExportExamReportRequest request) {

        return assembler.toResource(service.createReport(user, request));
    }

    @PostMapping("/aggregate")
    @ResponseStatus(HttpStatus.CREATED)
    public ReportResource createReport(
            @AuthenticationPrincipal final User user,
            @RequestBody final AggregateReportRequest request) {

        return assembler.toResource(service.createReport(user, request));
    }

}
