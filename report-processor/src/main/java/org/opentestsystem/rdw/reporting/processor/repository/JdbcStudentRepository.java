package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.util.QueryParameterMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collection;

/**
 * JDBC-backed implementation of a StudentRepository
 */
@Repository
public class JdbcStudentRepository implements StudentRepository {

    @Value("${sql.student.findByExamQueryParamsUnknownPermissions}")
    private String findByExamQueryParamsUnknownPermissions;

    @Value("${sql.student.findByExamQueryParamsGroupPermissions}")
    private String findByExamQueryParamsGroupPermissions;

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;
    private final QueryParameterMapper queryParameterMapper;

    @Autowired
    public JdbcStudentRepository(final NamedParameterJdbcTemplate template,
                                 final SecurityParameterProvider securityParameterProvider,
                                 final QueryParameterMapper queryParameterMapper) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
        this.queryParameterMapper = queryParameterMapper;
    }

    @Override
    public Collection<Student> findStudentsByExamQueryParams(final User user,
                                                             final ExamQueryParams examQueryParams) {
        final String query = getExamFilterQuery(examQueryParams.getQueryPermissionType());

        return template.query(
                query,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(user, examQueryParams.isDisableTransferAccess()))
                        .addValues(queryParameterMapper.toParameters(examQueryParams)),
                (row, rowNum) -> Students.map(row, Student.builder()).build()
        );
    }

    private String getExamFilterQuery(final ExamQueryParams.PermissionType queryPermissionType) {
        switch (queryPermissionType) {
            case Unknown:
            case Individual:
                return findByExamQueryParamsUnknownPermissions;
            case Group:
                return findByExamQueryParamsGroupPermissions;
            default:
                throw new IllegalArgumentException("Unknown query permission type: " + queryPermissionType);
        }
    }
}
