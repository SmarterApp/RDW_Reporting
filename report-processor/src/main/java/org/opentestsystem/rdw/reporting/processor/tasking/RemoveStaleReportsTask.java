package org.opentestsystem.rdw.reporting.processor.tasking;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.DefaultReportService;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Component
@ConditionalOnProperty(prefix = "task.remove-stale-reports", name = {"cron", "number-of-days", "max-random-minutes"})
public class RemoveStaleReportsTask {

    private final ReportContentService reportContentService;
    private final DefaultReportService reportService;
    private static final long aMinute = 60000L;

    @Value("${task.remove-stale-reports.number-of-days}")
    private int numberOfDays;

    @Value("${task.remove-stale-reports.max-random-minutes}")
    private int maxRandomMinutes;

    @Autowired
    RemoveStaleReportsTask(final ReportContentService reportContentService, final DefaultReportService reportService) {
        this.reportContentService = reportContentService;
        this.reportService = reportService;
    }

    @Scheduled(cron = "${task.remove-stale-reports.cron}")
    public void removeStaleReports() {
        try {
            Thread.sleep((long) (Math.random() * aMinute * maxRandomMinutes));
        } catch (InterruptedException e) {
        }
        final Collection<Report> reports = reportService.findAllOlderThanNumberOfDays(numberOfDays);
        final List<Long> ids = reports.stream().map(Report::getId).collect(Collectors.toList());
        reportContentService.deleteContents(reports);
        reportService.delete(ids);

    }
}
