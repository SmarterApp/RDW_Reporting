package org.opentestsystem.rdw.reporting.processor.tasking;

import org.opentestsystem.rdw.reporting.processor.service.ReportRemovalService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.temporal.ChronoUnit;
import java.util.Date;

import static java.time.Instant.now;

@Component
@ConditionalOnProperty(prefix = "task.remove-stale-reports", name = {"cron", "max-report-lifetime-days", "max-random-minutes"})
public class RemoveStaleReportsTask {
    private static final Logger logger = LoggerFactory.getLogger(RemoveStaleReportsTask.class);

    private final ReportRemovalService reportRemovalService;
    private final TaskScheduler taskScheduler;
    private final int maxReportLifetimeDays;
    private final int maxRandomMinutes;

    @Autowired
    RemoveStaleReportsTask(final ReportRemovalService reportRemovalService,
                           final TaskScheduler taskScheduler,
                           @Value("${task.remove-stale-reports.max-report-lifetime-days}") final int maxReportLifetimeDays,
                           @Value("${task.remove-stale-reports.max-random-minutes}") final int maxRandomMinutes) {
        this.reportRemovalService = reportRemovalService;
        this.taskScheduler = taskScheduler;
        this.maxReportLifetimeDays = maxReportLifetimeDays;
        this.maxRandomMinutes = maxRandomMinutes;
    }

    @Scheduled(cron = "${task.remove-stale-reports.cron}", zone = "GMT")
    public void removeStaleReports() {
        final long delay = (long) (Math.random() * maxRandomMinutes + 0.5);
        logger.info("Scheduled task triggered: Remove Stale Reports. Delaying {} minutes.", delay);
        taskScheduler.schedule(() -> {
            logger.info("Deleting stale reports");
            reportRemovalService.deleteOldReports(maxReportLifetimeDays);
        }, Date.from(now().plus(delay, ChronoUnit.MINUTES)));
    }
}
