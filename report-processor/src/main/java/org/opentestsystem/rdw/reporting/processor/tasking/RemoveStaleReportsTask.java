package org.opentestsystem.rdw.reporting.processor.tasking;

import org.opentestsystem.rdw.reporting.processor.service.ReportRemovalService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
@EnableScheduling
@ConditionalOnProperty(prefix = "task.remove-stale-reports", name = {"cron", "max-report-lifetime-days", "max-random-minutes"})
public class RemoveStaleReportsTask {

    private static final Logger logger = LoggerFactory.getLogger(RemoveStaleReportsTask.class);
    private final ReportRemovalService reportRemovalService;
    private final TaskScheduler taskScheduler;
    private static final long minuteInMilliseconds = 60000L;

    @Value("${task.remove-stale-reports.max-report-lifetime-days}")
    int maxReportLifetimeDays;

    @Value("${task.remove-stale-reports.max-random-minutes}")
    int maxRandomMinutes;

    @Autowired
    RemoveStaleReportsTask(final ReportRemovalService reportRemovalService, final TaskScheduler taskScheduler) {
        this.reportRemovalService = reportRemovalService;
        this.taskScheduler = taskScheduler;
    }

    @Scheduled(cron = "${task.remove-stale-reports.cron}", zone = "GMT")
    public void removeStaleReports() {
        taskScheduler.schedule(new Runnable() {
            @Override
            public void run() {
                logger.info("Deleting stale reports");
                reportRemovalService.deleteOldReports(maxReportLifetimeDays);
            }
        }, new Date(System.currentTimeMillis() + (long) (Math.random() * minuteInMilliseconds * maxRandomMinutes)));
    }
}
