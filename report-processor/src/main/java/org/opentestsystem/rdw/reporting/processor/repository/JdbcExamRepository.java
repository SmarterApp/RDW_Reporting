package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.report.ExamExportQueryOptions;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
public class JdbcExamRepository implements ExamRepository {

    private static final String ExportDestination = "::EXPORT_DESTINATION::";

    @Value("${sql.export.exam}")
    private String exportExam;

    private NamedParameterJdbcTemplate template;

    @Autowired
    JdbcExamRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public String export(final PermissionScope permissionScope, ExamExportQueryOptions query, final String uriLocation) {
        String exportDestinationSqlCommand = uriLocation.toLowerCase().startsWith("s3")
                ? "S3"
                : "";

        template.execute(
                exportExam.replace(ExportDestination, exportDestinationSqlCommand),
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope, "individual_"))
                        .putAll(getQueryParameters(query))
                        .put("export_location", uriLocation)
                        .build(),
                PreparedStatement::execute
        );

        return uriLocation;
    }

    private Map<String, Object> getQueryParameters(final ExamExportQueryOptions query) {
        final String prefix = "query_";

        return ImmutableMap.<String, Object>builder()
                .put(prefix + "district_group_ids", nullOrEmptyToDefault(query.getDistrictGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "district_ids", nullOrEmptyToDefault(query.getDistrictIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_group_ids", nullOrEmptyToDefault(query.getSchoolGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_ids", nullOrEmptyToDefault(query.getSchoolIds(), UNMATCHABLE_IDS))
                .put("school_year", query.getSchoolYear())
                .build();
    }
}
