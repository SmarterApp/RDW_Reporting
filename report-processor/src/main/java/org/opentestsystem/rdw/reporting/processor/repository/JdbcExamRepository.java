package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
public class JdbcExamRepository implements ExamRepository {

    private static final String ExportDestination = "::EXPORT_DESTINATION::";

    @Value("${sql.export.exams}")
    private String exportExams;

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Autowired
    JdbcExamRepository(final NamedParameterJdbcTemplate template,
                       final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public String export(final PermissionSource permissionSource, final ExportExamReportRequest request, final String uriLocation) {
        final boolean isDestinationS3 = uriLocation.toLowerCase().startsWith("s3");

        // this can be a long-running query so temporarily disable the query timeout
        // it is still limited by the jdbc driver socket timeout (which is 10m for this app)
        template.execute(
                exportExams.replace(ExportDestination, isDestinationS3 ? "S3" : ""),
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionSource, request.isDisableTransferAccess()))
                        .addValue("query_district_group_ids", nullOrEmptyToDefault(request.getDistrictGroupIds(), UNMATCHABLE_IDS))
                        .addValue("query_district_ids", nullOrEmptyToDefault(request.getDistrictIds(), UNMATCHABLE_IDS))
                        .addValue("query_school_group_ids", nullOrEmptyToDefault(request.getSchoolGroupIds(), UNMATCHABLE_IDS))
                        .addValue("query_school_ids", nullOrEmptyToDefault(request.getSchoolIds(), UNMATCHABLE_IDS))
                        .addValue("school_year", request.getSchoolYear())
                        .addValue("disable_transfer_access", request.isDisableTransferAccess())
                        .addValue("export_location", uriLocation),
                ps -> {
                    ps.setQueryTimeout(0);
                    return ps.execute();
                }
        );

        // The SELECT INTO OUTFILE S3 feature appends a part number to the file.
        return isDestinationS3 ? uriLocation + ".part_00000" : uriLocation;
    }

}
