package org.opentestsystem.rdw.reporting.processor.service;

import org.apache.commons.io.IOUtils;
import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.util.List;
import java.util.function.Supplier;

/**
 * This PdfMergeService implementation uses a temporary file
 * to provide streaming PDF merging.
 */
@Service
public class TemporaryFilePdfMerger implements PdfMergeService {
    private final static Logger logger = LoggerFactory.getLogger(TemporaryFilePdfMerger.class);

    @Override
    public File mergePdfs(final List<Supplier<InputStream>> sourcePdfs) throws IOException {

        final File mergedPdf = Files.createTempFile("mergedPdf", ".pdf").toFile();
        try (final FileOutputStream outputStream = new FileOutputStream(mergedPdf)) {
            doMerge(outputStream, sourcePdfs);
        }

        return mergedPdf;
    }

    private void doMerge(final OutputStream outputStream,
                         final List<Supplier<InputStream>> sourcePdfs) {
        PDDocument destinationDocument = null;

        try {
            final MemoryUsageSetting memoryUsage = MemoryUsageSetting.setupTempFileOnly();
            destinationDocument = new PDDocument(memoryUsage);

            final PDFMergerUtility mergerUtility = new PDFMergerUtility();
            for (final Supplier<InputStream> supplier : sourcePdfs) {
                try (final InputStream sourceStream = supplier.get()) {
                    final PDDocument srcDocument = PDDocument.load(sourceStream, memoryUsage);
                    mergerUtility.appendDocument(destinationDocument, srcDocument);
                    srcDocument.close();
                }
            }
            destinationDocument.save(outputStream);
        } catch (final IOException e) {
            logger.warn("Unable to merge PDFs", e);
        } finally {
            try {
                if (destinationDocument != null) {
                    destinationDocument.close();
                }
            } catch (final IOException e) {
                logger.warn("Unable to close merged PDF document", e);
            }
            IOUtils.closeQuietly(outputStream);
        }
    }
}
