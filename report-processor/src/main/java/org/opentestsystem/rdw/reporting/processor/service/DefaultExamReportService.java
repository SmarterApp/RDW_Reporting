package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.*;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.*;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.NoSuchElementException;

@Service
class DefaultExamReportService implements ExamReportService {

    private final ReportGenerator generator;
    private final ReportService service;
    private final ReportContentService contentService;

    DefaultExamReportService(final ReportGenerator generator,
                             final ReportService service,
                             final ReportContentService contentService) {
        this.generator = generator;
        this.service = service;
        this.contentService = contentService;
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final StudentPrintableReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final SchoolGradePrintableReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final GroupPrintableReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final DistrictSchoolExportReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final CustomAggregateReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final LongitudinalReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final ClaimAggregateReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public UserReport createReport(@NotNull final User user, @NotNull final TargetReportQuery query) {
        return createReportInternal(user, query);
    }

    @Override
    public List<UserReport> getReports(@NotNull final User user) {
        return service.findAllByUserAndId(user.getUsername(), ImmutableSet.of());
    }

    @Override
    public List<UserReport> getReports(@NotNull final User user, final Iterable<Long> reportIds) {
        return service.findAllByUserAndId(user.getUsername(), reportIds != null ? ImmutableSet.copyOf(reportIds) : ImmutableSet.of());
    }

    @Override
    public ReportContentResource openReportContent(@NotNull final User user, final long reportId) {

        final UserReport report = service.findOneById(reportId)
                .orElseThrow(NoSuchElementException::new);

        if (!report.getUser().equals(user.getUsername())) {
            throw new NoSuchElementException();
        }

        return contentService.openContent(report);
    }

    public <T extends ReportQuery> UserReport createReportInternal(
            @NotNull final User user,
            @NotNull final ReportQuery query) {

        return generator.generateReport(query, user);
    }

}
