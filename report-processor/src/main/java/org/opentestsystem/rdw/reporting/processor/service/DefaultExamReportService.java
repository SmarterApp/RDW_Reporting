package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.Headers;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.nio.charset.Charset;
import java.util.List;
import java.util.NoSuchElementException;

import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.getExtension;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;
import static org.springframework.http.HttpHeaders.CONTENT_TYPE;

@Service
class DefaultExamReportService implements ExamReportService {

    private final ReportGenerator generator;
    private final ReportService service;
    private final ReportContentService contentService;

    DefaultExamReportService(final ReportGenerator generator,
                             final ReportService service,
                             final ReportContentService contentService) {
        this.generator = generator;
        this.service = service;
        this.contentService = contentService;
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final StudentExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final SchoolGradeExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final GroupExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public Report createReport(@NotNull final User user, @NotNull final ExportExamReportRequest request) {
        return createReportInternal(user, request);
    }

    @Override
    public List<Report> getReports(@NotNull final User user) {
        return service.findAllByUserAndId(user.getUsername(), ImmutableSet.of());
    }

    @Override
    public List<Report> getReports(@NotNull final User user, final Iterable<Long> reportIds) {
        return service.findAllByUserAndId(user.getUsername(), reportIds != null ? ImmutableSet.copyOf(reportIds) : ImmutableSet.of());
    }

    @Override
    public ResponseEntity<ReportContentResource> openReportContent(@NotNull final User user, final long reportId) {

        final Report report = service.findOneById(reportId)
                .orElseThrow(NoSuchElementException::new);

        if (!report.getUser().equals(user.getUsername())) {
            throw new NoSuchElementException();
        }

        final ReportContentResource resource = contentService.openContent(report);

        final MediaType mediaType = resource.getMediaType();
        final String filename = report.getLabel().replaceAll("\\s", "_") + "." + getExtension(mediaType);
        final String contentDisposition = Headers.formatContentDispositionAttachment(filename, Charset.forName("UTF-8"));

        final HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set(CONTENT_TYPE, mediaType.toString());
        responseHeaders.set(CONTENT_DISPOSITION, contentDisposition);

        return new ResponseEntity<>(resource, responseHeaders, HttpStatus.OK);
    }

    private <T extends AbstractExamReportRequest> Report createReportInternal(
            @NotNull final User user,
            @NotNull final T request) {

        return generator.generateReport(request, user);
    }

}
