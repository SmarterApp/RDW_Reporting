package org.opentestsystem.rdw.reporting.processor.model;

/**
 * This model represents an exam repository filter.
 */
public class ExamQueryParams {
    private String subjectCode;
    private String assessmentTypeCode;
    private Long schoolId;
    private Integer gradeId;
    private Long groupId;
    private Integer schoolYear;
    private Long studentId;
    private PermissionType queryPermissionType;
    private boolean disableTransferAccess;

    /**
     * @return The exam subject code
     */
    public String getSubjectCode() {
        return subjectCode;
    }

    /**
     * @return The exam assessment type code
     */
    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    /**
     * @return The exam school id
     */
    public Long getSchoolId() {
        return schoolId;
    }

    /**
     * @return The exam grade id
     */
    public Integer getGradeId() {
        return gradeId;
    }

    /**
     * @return The student group id
     */
    public Long getGroupId() {
        return groupId;
    }

    /**
     * @return The exam school year
     */
    public Integer getSchoolYear() {
        return schoolYear;
    }

    /**
     * @return The target student's id
     */
    public Long getStudentId() {
        return studentId;
    }

    /**
     * @return The exam query type
     */
    public PermissionType getQueryPermissionType() {
        return queryPermissionType;
    }

    /**
     * @return True if transfer access is disabled for this report
     */
    public boolean isDisableTransferAccess() {
        return disableTransferAccess;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String subjectCode;
        private String assessmentTypeCode;
        private Long schoolId;
        private Integer gradeId;
        private Long groupId;
        private Integer schoolYear;
        private Long studentId;
        private PermissionType queryPermissionType;
        private boolean disableTransferAccess;

        public ExamQueryParams build() {
            final ExamQueryParams examQueryParams = new ExamQueryParams();
            examQueryParams.subjectCode = subjectCode;
            examQueryParams.assessmentTypeCode = assessmentTypeCode;
            examQueryParams.schoolId = schoolId;
            examQueryParams.gradeId = gradeId;
            examQueryParams.groupId = groupId;
            examQueryParams.schoolYear = schoolYear;
            examQueryParams.studentId = studentId;
            examQueryParams.queryPermissionType = queryPermissionType;
            examQueryParams.disableTransferAccess = disableTransferAccess;
            return examQueryParams;
        }

        public Builder copy(final ExamQueryParams examQueryParams) {
            subjectCode(examQueryParams.subjectCode);
            assessmentTypeCode(examQueryParams.assessmentTypeCode);
            schoolId(examQueryParams.schoolId);
            gradeId(examQueryParams.gradeId);
            groupId(examQueryParams.groupId);
            schoolYear(examQueryParams.schoolYear);
            studentId(examQueryParams.studentId);
            queryPermissionType(examQueryParams.queryPermissionType);
            disableTransferAccess(examQueryParams.disableTransferAccess);
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return this;
        }

        public Builder schoolId(final Long schoolId) {
            this.schoolId = schoolId;
            return this;
        }

        public Builder gradeId(final Integer gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder groupId(final Long groupId) {
            this.groupId = groupId;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder studentId(final Long studentId) {
            this.studentId = studentId;
            return this;
        }

        public Builder queryPermissionType(final PermissionType queryPermissionType) {
            this.queryPermissionType = queryPermissionType;
            return this;
        }

        public Builder disableTransferAccess(final boolean disableTransferAccess) {
            this.disableTransferAccess = disableTransferAccess;
            return this;
        }
    }

    public enum PermissionType {
        Unknown,
        Individual,
        Group
    }
}
