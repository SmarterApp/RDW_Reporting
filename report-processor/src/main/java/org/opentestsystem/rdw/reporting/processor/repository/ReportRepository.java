package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.common.model.Report;

import java.util.Collection;
import java.util.List;
import java.util.Set;

/**
 * Implementations of this interface are responsible for persisting Report instances.
 */
public interface ReportRepository {

    /**
     * Insert a new Report record.
     * NOTE: A new {@link Report#id} will be generated and returned in the response Report
     *
     * @param report A report record
     * @return The inserted report record
     */
    Report create(Report report);

    /**
     * Save an updated Report record.
     * NOTE:
     * Must have a valid {@link Report#id}
     * The {@link Report#completeChunkCount} property is not updated by this method.
     * @see #completeChunk(Report)
     *
     * @param report A report record
     * @return The updated report record
     */
    Report update(Report report);

    /**
     * Find reports for a user, optionally filtered by report id.
     *
     * @param user      The user
     * @param reportIds Optional report ids, empty collection returns all reports for the user
     * @return The reports
     */
    List<Report> findByUserAndIds(String user, Collection<Long> reportIds);

    /**
     * Find a report by id.
     *
     * @param reportId A report id
     * @return The Report or null
     */
    Report findById(long reportId);

    /**
     * Find reports created older than a specified number of days
     *
     * @param numberOfDays The number of days
     * @return The reports
     */
    List<Report> findAllOlderThanNumberOfDays(int numberOfDays);

    /**
     * Increment the chunk completion count for the given report
     * and return the updated Report instance.
     *
     * @param report A report
     * @return  The report with updated chunk completion count
     */
    Report completeChunk(Report report);

    /**
     * Delete reports with the specified ids
     * @param ids The ids of the reports we wish to delete
     */
    void deleteIds(Set<Long> ids);
}
