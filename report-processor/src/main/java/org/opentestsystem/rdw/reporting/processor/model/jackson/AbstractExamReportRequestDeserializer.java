package org.opentestsystem.rdw.reporting.processor.model.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.MissingNode;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportType;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;

import java.io.IOException;

/**
 * This deserializer is responsible for deserializing AbstractExamReportRequest instances
 * into concrete sub-classes based upon the serialized contents.
 */
public class AbstractExamReportRequestDeserializer extends StdDeserializer<AbstractExamReportRequest> {

    public AbstractExamReportRequestDeserializer() {
        super(AbstractExamReportRequest.class);
    }

    @Override
    public AbstractExamReportRequest deserialize(final JsonParser parser, final DeserializationContext context) throws IOException {
        final ObjectMapper mapper = (ObjectMapper) parser.getCodec();
        final JsonNode jsonNode = mapper.readTree(parser);
        final JsonNode reportTypeNode = getReportType(jsonNode);
        if (!reportTypeNode.isMissingNode()) {
            final ReportType reportType = ReportType.valueOf(reportTypeNode.asText());
            return mapper.readValue(jsonNode.toString(), reportType.getReportClass());
        }
        return deserializeLegacyJsonByProperty(jsonNode, mapper);
    }

    private JsonNode getReportType(final JsonNode jsonNode) {
        return jsonNode.has("reportType") ? jsonNode.get("reportType") : MissingNode.getInstance();
    }

    private boolean hasNode(final JsonNode jsonNode, final String field) {
        return jsonNode.has(field);
    }

    private AbstractExamReportRequest deserializeLegacyJsonByProperty(final JsonNode jsonNode,
                                                                      final ObjectMapper mapper) throws IOException {
        // Bridge for old group requests
        if (hasNode(jsonNode, "groupGrant")
                || hasNode(jsonNode, "groupId")) {
            return mapper.readValue(jsonNode.toString(), GroupExamReportRequest.class);
        } else if (hasNode(jsonNode, "schoolId")
                && hasNode(jsonNode, "gradeId")) {
            return mapper.readValue(jsonNode.toString(), SchoolGradeExamReportRequest.class);
        } else if (hasNode(jsonNode, "studentId")) {
            return mapper.readValue(jsonNode.toString(), StudentExamReportRequest.class);
        }

        throw new IllegalArgumentException("Unable to deserialize json as AbstractExamReportRequest: " + jsonNode.toString());
    }
}
