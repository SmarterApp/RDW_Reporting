package org.opentestsystem.rdw.reporting.processor.model.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ReportType;

import java.io.IOException;

/**
 * This deserializer is responsible for deserializing AbstractExamReportRequest instances
 * into concrete sub-classes based upon the serialized contents.
 */
public class AbstractExamReportRequestDeserializer extends StdDeserializer<AbstractExamReportRequest> {

    public AbstractExamReportRequestDeserializer() {
        super(AbstractExamReportRequest.class);
    }

    @Override
    public AbstractExamReportRequest deserialize(final JsonParser parser, final DeserializationContext context) throws IOException {
        final ObjectMapper mapper = (ObjectMapper) parser.getCodec();
        final ObjectNode jsonNode = mapper.readTree(parser);
        mapLegacySubject(jsonNode);
        mapLegacyAssessmentType(jsonNode);
        mapLegacyGroupGrant(jsonNode);
        final JsonNode reportTypeNode = jsonNode.get("reportType");
        final ReportType reportType = ReportType.valueOf(reportTypeNode.asText());
        return mapper.readValue(jsonNode.toString(), reportType.getReportClass());
    }

    private void mapLegacySubject(final ObjectNode jsonNode) {
        if (!jsonNode.has("subject") || jsonNode.has("subjectCode")) return;

        final JsonNode legacyNode = jsonNode.remove("subject");
        final Subject subject = Subject.caseInsensitiveValue(legacyNode.asText());
        jsonNode.set("subjectCode", new TextNode(subject.code()));
    }

    private void mapLegacyAssessmentType(final ObjectNode jsonNode) {
        if (!jsonNode.has("assessmentType") || jsonNode.has("assessmentTypeCode")) return;

        final JsonNode legacyNode = jsonNode.remove("assessmentType");
        final AssessmentType assessmentType = AssessmentType.valueOf(legacyNode.asText());
        jsonNode.set("assessmentTypeCode", new TextNode(assessmentType.code()));
    }

    /**
     * The GroupExamReportRequest used to have a GroupGrant (with group id and subject id).
     * It was changed to have a UserGroupId which has a group id and group type. For the
     * legacy requests the group type is Admin (since teacher groups didn't exist). So the
     * group grant can be converted to a UserGroupId; since that has a constructor that takes
     * a group id and assumes Admin, we can just add a node, "groupId" with the value.
     *
     * @param jsonNode root node
     */
    private void mapLegacyGroupGrant(final ObjectNode jsonNode) {
        if (!jsonNode.has("groupGrant")) return;

        final JsonNode legacyNode = jsonNode.remove("groupGrant");
        final long id = legacyNode.get("id").asLong();
        if (id != 0) {
            jsonNode.set("groupId", new LongNode(id));
        }
    }
}
