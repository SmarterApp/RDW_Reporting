package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.ExamItem;
import org.opentestsystem.rdw.reporting.common.model.PerformanceWritingExamItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
public class JdbcIabReportItemRepository implements IabReportItemRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.exam.item.findWritingTraitExamItems}")
    private String findWritingTraitExamItems;

    @Autowired
    JdbcIabReportItemRepository(final NamedParameterJdbcTemplate template,
                                final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public List<PerformanceWritingExamItem> findWritingTraitExamItems(Collection<Long> mostRecentExamIds) {
        final List<PerformanceWritingExamItem> examItems = new ArrayList<>();
        template.query(findWritingTraitExamItems,
                new MapSqlParameterSource().addValue("exam_ids", mostRecentExamIds).addValue("type", "WER"),
                (row) -> {
                    final ExamItem examItem = ExamItem.builder()
                            .examId(row.getLong("exam_id"))
                            .itemId(row.getLong("item_id"))
                            .points(getNullable(row, row.getInt("score")))
                            .position(row.getInt("position"))
                            .writingTraitScores(
                                    getNullable(row, row.getInt("trait_evidence_elaboration_score")),
                                    getNullable(row, row.getInt("trait_organization_purpose_score")),
                                    getNullable(row, row.getInt("trait_conventions_score"))
                            )
                            .build();
                    final String performanceTaskWritingType = row.getString("performance_task_writing_type");
                    final PerformanceWritingExamItem performanceWritingExamItem = PerformanceWritingExamItem.builder().examItem(examItem).performanceWritingType(performanceTaskWritingType).build();
                    examItems.add(performanceWritingExamItem);
                }
        );
        return examItems;
    }
}
