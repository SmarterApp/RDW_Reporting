package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.ExamItem;
import org.opentestsystem.rdw.reporting.common.model.PerformanceWritingExamItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
public class JdbcIabReportItemRepository implements IabReportItemRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.exam.item.findWritingTraitExamItems}")
    private String findWritingTraitExamItems;

    @Autowired
    JdbcIabReportItemRepository(final NamedParameterJdbcTemplate template,
                                final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public List<PerformanceWritingExamItem> findWritingTraitExamItems(final Collection<Long> examIds) {

        return template.query(findWritingTraitExamItems,
                ImmutableMap.<String, Object>builder().put("exam_ids", examIds).put("type", "WER").build(),
                (resultSet) -> {
                    return buildPerformanceWritingExamItems(resultSet);
                }
        );
    }


    private List<PerformanceWritingExamItem> buildPerformanceWritingExamItems(final ResultSet resultSet) throws SQLException {
        final List<PerformanceWritingExamItem> examItems = newArrayList();
        while (resultSet.next()) {
            final ExamItem examItem = ExamItem.builder()
                    .examId(resultSet.getLong("exam_id"))
                    .itemId(resultSet.getLong("item_id"))
                    .points(getNullable(resultSet, resultSet.getInt("score")))
                    .position(resultSet.getInt("position"))
                    .writingTraitScores(
                            getNullable(resultSet, resultSet.getInt("trait_evidence_elaboration_score")),
                            getNullable(resultSet, resultSet.getInt("trait_organization_purpose_score")),
                            getNullable(resultSet, resultSet.getInt("trait_conventions_score"))
                    )
                    .build();
            final String performanceTaskWritingType = resultSet.getString("performance_task_writing_type");
            final PerformanceWritingExamItem performanceWritingExamItem = PerformanceWritingExamItem.builder().item(examItem).performanceWritingType(performanceTaskWritingType).build();
            examItems.add(performanceWritingExamItem);
        }
        return examItems;
    }
}
