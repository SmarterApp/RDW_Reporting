package org.opentestsystem.rdw.reporting.processor.stream;

import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.AggregateReportService;
import org.opentestsystem.rdw.reporting.processor.service.MessageSecurityService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.stereotype.Component;

import static org.opentestsystem.rdw.reporting.processor.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.processor.stream.AggregateReportsSource.AggregateReports;

/**
 * This component is responsible for fetching, ordering,
 * and chunking students within the context of a report.
 */
@Component
public class AggregateReportGenerator {

    private final ReportService reportService;
    private final AggregateReportService aggregateReportService;
    private final MessageSecurityService messageSecurityService;

    @Autowired
    public AggregateReportGenerator(final ReportService reportService,
                                    final AggregateReportService aggregateReportService,
                                    final MessageSecurityService messageSecurityService) {
        this.reportService = reportService;
        this.aggregateReportService = aggregateReportService;
        this.messageSecurityService = messageSecurityService;
    }

    @StreamListener(AggregateReports)
    public void collateReportPdf(final Message<ReportRequestMessage> message) {
        final ReportRequestMessage payload = message.getPayload();
        final User user = messageSecurityService.getUser(message);

        Report report = reportService.findOneById(payload.getReportId())
                .orElseThrow(() -> new IllegalArgumentException("Unknown Report: " + payload.getReportId()));
        if (report.getStatus() == FAILED) return;

        report = aggregateReportService.generateReport(report, user);

        reportService.update(report);
    }
}
