package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.AltScoreAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreRow;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Component
public class AltScoreAggregateReportCsvHandler extends AbstractAggregateReportCsvHandler<AltScoreAggregateReportQuery, AltScoreRow> {

    public AltScoreAggregateReportCsvHandler(final MessageSource messageSource, final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        return super.accept(resource, requestedMediaType)
            && resource.getReport().getQuery().getType() == ReportQueryType.AltScore;
    }

    @Override
    protected List<String> getMeasureHeaders(final AltScoreAggregateReportQuery query) {
        return getMeasureHeaders(query, "");
    }

    @Override
    protected List<String> getMeasuresValues(final CsvContext context, final AltScoreRow result) {
        return getMeasuresValues(context.getQuery().getAssessmentTypeCode(), result.getMeasures());
    }

    @Override
    protected List<String> getReportCustomHeaders() {
        // header for alt score code
        return newArrayList(getMessage("report.aggregate.export.header.alt-score"));
    }

    @Override
    protected List<String> getReportCustomValues(final CsvContext context, final AltScoreRow result) {
        // text associated with the alt score code (by subject)
        return newArrayList(getMessage("subject." + result.getAssessment().getSubjectCode() + ".alt-score." + result.getAltScoreCode() + ".name"));
    }

    @Override
    protected String getMessage(String key) {
        // Handle inconsistencies with some keys using "alt" and others using "alt-score".
        String value = super.getMessage(key);
        if (value.equals(key)) {
            if (key.contains(".alt-score.")) {
                final String newKey = key.replace(".alt-score.", ".alt.");
                final String newValue = super.getMessage(newKey);
                if (!newValue.equals(newKey)) {
                    value = newValue;
                }
            } else {
                final String newKey = key.replace(".alt.", ".alt-score.");
                final String newValue = super.getMessage(newKey);
                if (!newValue.equals(newKey)) {
                    value = newValue;
                }
            }
        }
        return value;
    }

    @Override
    protected Class<AltScoreRow> getRowInstanceClass() {
        return AltScoreRow.class;
    }
}
