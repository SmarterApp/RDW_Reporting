package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionException;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Instant;

import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;

/**
 *
 */
@Service
public class SpringBatchReportGenerator implements ReportGenerator {

    private final ReportService reportService;
    private final ReportGenerationJobParameterProvider parameterProvider;
    private final JobLauncher jobLauncher;
    private final Job migrateReportingJob;

    @Autowired
    public SpringBatchReportGenerator(final ReportService reportService,
                                      final ReportGenerationJobParameterProvider parameterProvider,
                                      final JobLauncher jobLauncher,
                                      final Job generateReportJob) {
        this.reportService = reportService;
        this.parameterProvider = parameterProvider;
        this.jobLauncher = jobLauncher;
        this.migrateReportingJob = generateReportJob;
    }

    @Override
    public Report generateReport(final BatchExamReportRequestHolder requestHolder) {
        Report report = null;
        try {
            report = reportService.insert(Report.builder()
                    .reportRequest(requestHolder.getRequest())
                    .created(Instant.now())
                    .label(requestHolder.getLabel())
                    .status(PENDING)
                    .user(requestHolder.getUser())
                    .build());

            final JobParameters jobParameters = parameterProvider
                    .toJobParameters(report.getId(), requestHolder.getPermissionScope());

            jobLauncher.run(migrateReportingJob, jobParameters);
            return report;
        } catch (final JobExecutionException e) {
            failReport(report);
            throw new IllegalStateException("Unable to start report job", e);
        }
    }

    private void failReport(final Report report) {
        reportService.update(Report.builder()
                .copy(report)
                .status(FAILED)
                .build());
    }
}
