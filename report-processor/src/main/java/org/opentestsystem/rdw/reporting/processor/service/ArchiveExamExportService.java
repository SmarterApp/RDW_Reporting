package org.opentestsystem.rdw.reporting.processor.service;

import com.amazonaws.services.s3.Headers;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.repository.ExamRepository;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.util.Map;
import java.util.Properties;

import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

@Service
public class ArchiveExamExportService implements ExamExportService {

    private static final String FileSchemePrefix = "file://";

    private static final String FileNamePrefix = "export-exam";
    private static final String FileNameFormat = FileNamePrefix + "-%d.csv";

    @Value("${app.archive.export-root:}")
    public void setExportBasePath(final String value) {
        if(!exportBasePath.equals(value)) {
            exportBasePath = value.endsWith("/") ? value : value + "/";
        }
    }

    private String exportBasePath = "";

    private final ExamRepository repository;
    private final ArchiveService archiveService;

    @Autowired
    ArchiveExamExportService(final ExamRepository repository, final ArchiveService archiveService) {
        this.repository = repository;
        this.archiveService = archiveService;
    }

    @Override
    public URI exportExam(final User user, final ExportExamReportRequest request, final long reportId) {
        final PermissionScope scope = getPermissionScope(user);
        final URI uri = getFullyQualifiedUri(reportId);

        final URI location = getRelativeUri(repository.export(scope, request, uri.toASCIIString()));

        final Properties properties = new Properties();
        properties.setProperty(Headers.CONTENT_TYPE, "text/csv");
        archiveService.writeProperties(location.toASCIIString(), properties);

        return location;
    }

    private PermissionScope getPermissionScope(final User user) {
        final Map<String, Permission> permissionMap = user.getPermissionsById();

        return (permissionMap.isEmpty() || permissionMap.get(IndividualPiiRead) == null)
                ? PermissionScope.EMPTY
                : permissionMap.get(IndividualPiiRead).getScope();
    }

    private URI getFullyQualifiedUri(final long reportId) {
        return URI.create(archiveService
                .getRawUri(exportBasePath + String.format(FileNameFormat, reportId))
                .replace(FileSchemePrefix, "/")
        );
    }

    private URI getRelativeUri(final String uri) {
        return URI.create(uri.substring(uri.indexOf(exportBasePath + FileNamePrefix)));
    }
}
