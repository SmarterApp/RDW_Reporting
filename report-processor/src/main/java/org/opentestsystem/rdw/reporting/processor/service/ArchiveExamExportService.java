package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.report.ExamExportQueryOptions;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.processor.repository.ExamRepository;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.IndividualPiiRead;

@Service
public class ArchiveExamExportService implements ExamExportService {

    private static final String FileSchemePrefix = "file://";
    private static final String FileNameFormat = "export-exam-%d.csv";

    @Value("${app.archive.root}")
    public void setArchiveRoot(final String value) {
        // Only FileSchemePrefix needs to get replaced for local MySql.
        // Aurora's SELECT INTO OUTFILE S3 feature shares the same s3:// as archive's ResourceLoader.
        archiveRoot = value.replace(FileSchemePrefix, "/");
    }

    private String archiveRoot;

    @Value("${app.archive.export-root:}")
    private String exportBasePath = "";

    private final ExamRepository repository;

    @Autowired
    ArchiveExamExportService(ExamRepository repository) {
        this.repository = repository;
    }

    @Override
    public URI exportExam(final UserPermissions permissions, final ExamExportQueryOptions query, final long reportId) {
        final PermissionScope scope = getPermissionScope(permissions);
        final URI uri = getUriLocation(reportId);

        return formatUri(repository.export(scope, query, uri.toASCIIString()));
    }

    private PermissionScope getPermissionScope(final UserPermissions permissions) {
        final Map<String, Permission> permissionMap = permissions.getPermissionsById();

        return (permissionMap.isEmpty() || permissionMap.get(IndividualPiiRead) == null)
                ? PermissionScope.EMPTY
                : permissionMap.get(IndividualPiiRead).getScope();
    }

    private URI getUriLocation(final long reportId) {
        final String uriLocation = archiveRoot
                + (!archiveRoot.endsWith("/") && !exportBasePath.startsWith("/") ? "/" : "")
                + exportBasePath;

        final String fileNamePrefix = String.format(FileNameFormat, reportId);
        return URI.create(uriLocation + fileNamePrefix);
    }

    private URI formatUri(String uri) {
        final String uriPath = uri.replace(archiveRoot, "");

        return URI.create(
                uriPath.startsWith("/")
                        ? uriPath.substring(1)
                        : uriPath
        );
    }
}
