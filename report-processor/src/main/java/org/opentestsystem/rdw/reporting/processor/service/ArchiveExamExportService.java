package org.opentestsystem.rdw.reporting.processor.service;

import com.amazonaws.services.s3.Headers;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.multitenant.storage.TenantPathResolver;
import org.opentestsystem.rdw.reporting.common.model.DistrictSchoolExportReportQuery;
import org.opentestsystem.rdw.reporting.common.multitenant.TenantPathService;
import org.opentestsystem.rdw.reporting.common.util.MediaTypes;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.processor.repository.ExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.util.Properties;

@Service
public class ArchiveExamExportService implements ExamExportService {

    private static final String FileSchemePrefix = "file://";
    private static final String FileNamePrefix = "export-exam";
    private static final String FileNameFormat = FileNamePrefix + "-%d.csv";

    // store exam exports near the other user reports
    // Tenancy handled at the top level
    private final String ExportBasePath = ArchiveBackedReportContentService.BasePath + "EXAM-EXPORT/";

    private final ExamRepository repository;
    private final ArchiveService archiveService;
    private final TenantPathService tenantPathService;

    // Tenancy handled at the top level
    @Autowired
    ArchiveExamExportService(final ExamRepository repository, final ArchiveService archiveService, final TenantPathService tenantPathService) {
        this.repository = repository;
        this.archiveService = archiveService;
        this.tenantPathService = tenantPathService;
    }

    @Override
    public URI exportExams(final User user, final DistrictSchoolExportReportQuery query, final long reportId) {
        final URI uri = getFullyQualifiedUri(reportId);

        final URI location = getRelativeUri(repository.export(user, query, uri.toASCIIString()));

        final Properties properties = new Properties();
        properties.setProperty(Headers.CONTENT_TYPE, MediaTypes.TEXT_CSV_UTF8.toString());
        archiveService.writeProperties(location.toASCIIString(), properties);

        return location;
    }
    public String getExportBasePath() {
        return tenantPathService.getPrefix() + "/" + ExportBasePath;
    }
    private URI getFullyQualifiedUri(final long reportId) {
        return URI.create(archiveService
                .getRawUri(getExportBasePath() + String.format(FileNameFormat, reportId))
                .replace(FileSchemePrefix, "/")
        );
    }

    private URI getRelativeUri(final String uri) {
        return URI.create(uri.substring(uri.indexOf(getExportBasePath() + FileNamePrefix)));
    }
}
