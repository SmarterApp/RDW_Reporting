package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetReportQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetRow;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.model.AggregateReportType.Target;

@Component
public class TargetAggregateReportCsvHandler extends AbstractAggregateReportCsvHandler<TargetReportQuery, TargetRow> {

    public TargetAggregateReportCsvHandler(final MessageSource messageSource, final ObjectMapper objectMapper) {
        super(messageSource, objectMapper);
    }

    @Override
    public boolean accept(final ReportContentResource resource, final MediaType requestedMediaType) {
        final boolean accept = super.accept(resource, requestedMediaType);
        if (!accept) return false;

        final AggregateQuery query = ((AggregateReportRequest) resource.getReport().getReportRequest()).getQuery();
        return query.getReportType() == Target;
    }

    @Override
    protected List<String> getMeasureHeaders(final TargetReportQuery query) {
        final List<String> headers = newArrayList();
        headers.add(getMessage("report.aggregate.export.header.student-count"));
        headers.add(getMessage("report.aggregate.export.header.score"));
        headers.add(getMessage("report.aggregate.export.header.standard-deviation"));
        headers.add(getMessage("report.aggregate.export.header.student-relative-residual-scores-level"));
        headers.add(getMessage("report.aggregate.export.header.standard-met-relative-residual-level"));
        return headers;
    }

    @Override
    protected List<String> getMeasuresValues(final CsvContext context, final TargetRow row) {
        final List<String> measuresValues = newArrayList();
        measuresValues.add(String.valueOf(row.getMeasures().getStudentCount()));
        measuresValues.add(String.valueOf(row.getMeasures().getAvgScaleScore()));
        measuresValues.add(String.valueOf(row.getMeasures().getAvgStdErr()));
        measuresValues.add(getMessage("report.target.overall." + row.getStudentRelativeResidualScoresLevel().name()));
        measuresValues.add(getMessage("report.target.standard." + row.getStandardMetRelativeResidualLevel().name()));
        return measuresValues;
    }

    @Override
    protected List<String> getReportCustomHeaders() {
        final List<String> headers = newArrayList();
        headers.add(getMessage("report.aggregate.export.header.claim"));
        headers.add(getMessage("report.aggregate.export.header.target"));
        return headers;
    }

    @Override
    protected List<String> getReportCustomValues(final CsvContext context, final TargetRow result) {
        final List<String> values = newArrayList();
        values.add(getMessage("report.item-claim-name." + result.getClaimCode()));
        //TODO: complete after migrating of configurable subjects to reporting
        values.add(result.getTargetNaturalId());
        return values;
    }

    @Override
    protected Class<TargetRow> getRowInstanceClass() {
        return TargetRow.class;
    }
}
