package org.opentestsystem.rdw.reporting.processor.configuration;

import org.opentestsystem.rdw.multitenant.messaging.TenantChannelInterceptor;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestDefaultResolver;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.processor.service.WkhtmltopdfWebServiceHtmlToPdfProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.AggregateReportRequestProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.ExportExamsProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.PdfReportProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.config.GlobalChannelInterceptor;
import org.springframework.messaging.Message;
import org.springframework.retry.backoff.ExponentialBackOffPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.multitenant.TenantContextHolder.DEFAULT_TENANT_ID;

@Configuration
@EnableConfigurationProperties({
        ReportingSystemSettings.class,
        AggregateReportProperties.class,
        ReportGenerationProperties.class,
        ReportGenerationRetryProperties.class
})
@EnableBinding({
        AggregateReportRequestProcessor.class,
        ExportExamsProcessor.class,
        PdfReportProcessor.class
})
public class ReportProcessorConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(ReportProcessorConfiguration.class);

    @Autowired
    public void configure(final WkhtmltopdfWebServiceHtmlToPdfProcessor processor) {
        processor.setOptions(wkhtmltopdfOptions());
    }

    @Bean
    public RetryTemplate retryTemplate(final ReportGenerationRetryProperties retryProperties) {
        final ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();
        backOffPolicy.setInitialInterval(retryProperties.getInitialInterval());
        backOffPolicy.setMultiplier(retryProperties.getMultiplier());

        //Retry after 1s, 2s, 4s, 8s, ... 128s, total max retry time of 255s
        final SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy(retryProperties.getMaxRetries());

        final RetryTemplate retryTemplate = new RetryTemplate();
        retryTemplate.setBackOffPolicy(backOffPolicy);
        retryTemplate.setRetryPolicy(retryPolicy);

        return new RetryTemplate();
    }

    @Bean
    @ConfigurationProperties(prefix = "app.wkhtmltopdf.options")
    public Map<String, Object> wkhtmltopdfOptions() {
        return newHashMap();
    }

    @Bean
    public TenantMessageRequestResolver tenantMessageRequestResolver(MessageSecurityService messageSecurityService) {
        return new TenantMessageRequestDefaultResolver(){
            @Override
            public String resolveTenantId(Message<?> message) {
                //TODO: this is interim code until actual multi-tenant enabled
                //using this to detect messages with no user
                //production code will throw exception
                String tenantId = DEFAULT_TENANT_ID;
                try {
                    final User user = messageSecurityService.getUser(message);
                    tenantId = user.getTenantId();
                    logger.info("Resolving user {} to tenant {} for message.", user.getUsername(), tenantId);
                } catch (Exception e) {
                    logger.error("Error resolving user: ", e);
                }
                return tenantId;
            }
        };
    }

    @Bean
    @GlobalChannelInterceptor(patterns = {"Report*", "Aggregate*", "UserReport*"})
    public TenantChannelInterceptor getTenantChannelInterceptor(TenantMessageRequestResolver tenantMessageRequestDefaultResolver) {
        return new TenantChannelInterceptor(tenantMessageRequestDefaultResolver);
    }

}
