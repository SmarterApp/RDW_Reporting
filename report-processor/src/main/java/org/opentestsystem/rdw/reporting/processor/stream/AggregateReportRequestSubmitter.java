package org.opentestsystem.rdw.reporting.processor.stream;

import org.opentestsystem.rdw.reporting.common.model.AggregateRequestMessage;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Component;

import java.net.URI;
import java.util.HashMap;

import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.processor.stream.AggregateReportRequestProcessor.AggregateReportsIn;
import static org.springframework.http.MediaType.APPLICATION_JSON;

/**
 * This component is responsible for listening to aggregate report ReportRequestMessages
 * and submitting them to an external service channel for processing.
 */
@Component
public class AggregateReportRequestSubmitter {
    private static final Logger logger = LoggerFactory.getLogger(AggregateReportRequestSubmitter.class);

    private final ReportService reportService;
    private final MessageSecurityService messageSecurityService;
    private final AggregateReportRequestProcessor processor;
    private final ReportContentService contentService;

    @Autowired
    public AggregateReportRequestSubmitter(final ReportService reportService,
                                           final MessageSecurityService messageSecurityService,
                                           final AggregateReportRequestProcessor processor,
                                           final ReportContentService contentService) {
        this.reportService = reportService;
        this.messageSecurityService = messageSecurityService;
        this.processor = processor;
        this.contentService = contentService;
    }

    /**
     * Format and send the aggregate report request to an external service for processing.
     *
     * @param message The report request message
     */
    @StreamListener(AggregateReportsIn)
    public void submitAggregateReportRequest(final Message<ReportRequestMessage> message) {
        logger.debug("Received aggregate report request: {}", message.getPayload().getReportId());
        final ReportRequestMessage payload = message.getPayload();
        final User user = messageSecurityService.getUser(message);

        final Report report = reportService.findOneById(payload.getReportId())
                .orElseThrow(() -> new IllegalArgumentException("Unknown Report: " + payload.getReportId()));
        if (report.getStatus() == FAILED) return;

        final AggregateReportRequest request = (AggregateReportRequest) report.getReportRequest();
        final URI location = contentService.createUri(report, APPLICATION_JSON);

        final AggregateRequestMessage requestPayload = AggregateRequestMessage.builder()
                .id(report.getId())
                .query(request.getReportQuery())
                .responseLocation(location)
                .build();

        final Message<AggregateRequestMessage> requestMessage = messageSecurityService.withUser(
                MessageBuilder.createMessage(requestPayload, new MessageHeaders(new HashMap<>())),
                user);

        logger.debug("Submitting aggregate report to external service: {}", report.getId());
        processor.aggregateRequest().send(requestMessage);
    }
}
