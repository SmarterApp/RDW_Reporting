package org.opentestsystem.rdw.reporting.processor.stream;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.config.GlobalChannelInterceptor;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.ChannelInterceptorAdapter;
import org.springframework.stereotype.Component;

import java.util.Optional;

/**
 * This interceptor is responsible for marking a Report as failed if
 * there has been an exception during processing.
 */
@GlobalChannelInterceptor(patterns = "Report*")
@Component
public class ReportFailingChannelInterceptor extends ChannelInterceptorAdapter {
    private static final Logger logger = LoggerFactory.getLogger(ReportFailingChannelInterceptor.class);

    private final ReportService reportService;

    @Autowired
    public ReportFailingChannelInterceptor(final ReportService reportService) {
        this.reportService = reportService;
    }

    @Override
    public void afterSendCompletion(final Message<?> message,
                                    final MessageChannel channel,
                                    final boolean sent,
                                    final Exception ex) {
        failReport(ex, message);
    }

    @Override
    public void afterReceiveCompletion(final Message<?> message,
                                       final MessageChannel channel,
                                       final Exception ex) {
        failReport(ex, message);
    }

    private void failReport(final Exception ex, final Message<?> message) {
        if (ex == null) return;

        if (!ReportRequestMessage.class.isInstance(message.getPayload())) {
            logger.warn("Unknown message payload: {}", message.getPayload());
            return;
        }

        final ReportRequestMessage requestMessage = (ReportRequestMessage) message.getPayload();
        final Optional<Report> reportOptional = reportService.findOneById(requestMessage.getReportId());
        if (!reportOptional.isPresent()) return;

        final Report failedReport = Report.builder()
                .copy(reportOptional.get())
                .status(ReportStatus.FAILED)
                .build();
        reportService.update(failedReport);
    }
}
