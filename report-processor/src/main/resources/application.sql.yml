sql:
#  this is used in tests ONLY to verify the non-embargo SQL clause from studentExamPermissionWithEmbargo
  examPermissionTest:
    findAllByStudentId: >-
      SELECT
        e.iep,
        e.lep,
        e.section504,
        e.economic_disadvantage,
        e.migrant_status,
        ${sql.snippet.claimAndAltScoreColumns},
        ${sql.snippet.exam}
      WHERE e.student_id = :student_id
       AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}

  exam:
    # this is used to query for IABs for report generation
    findAllIabsByStudentIdsAndQueryParamsUnknownPermissions: >-
      SELECT
        d.name AS district_name,
        round(p.mean) AS percentile_mean,
        ps.percentile_rank,
        ${sql.snippet.exam}
      JOIN district d ON s.district_id=d.id
      ${sql.reportProcessor.snippet.percentileLeftJoin}
      WHERE e.student_id in (:student_ids)
        AND (:school_year is null or e.school_year=:school_year)
        AND (:subject_code is null or su.code=:subject_code) AND sat.printed_report=1
        AND (:grade_id is null or a.grade_id=:grade_id)
        AND a.type_id = 2
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      ORDER BY e.completed_at DESC

    # this is used to query for IABs for report generation
    findAllIabsByStudentIdsAndQueryParamsGroupPermissions: >-
      SELECT
        d.name AS district_name,
        round(p.mean) AS percentile_mean,
        ps.percentile_rank,
        ${sql.snippet.exam}
      JOIN district d ON s.district_id=d.id
      $[groupJoinPlaceholder]
      ${sql.reportProcessor.snippet.percentileLeftJoin}
      WHERE e.student_id in (:student_ids)
        AND $[groupFilterPlaceholder]
        AND (:school_year is null or e.school_year=:school_year)
        AND (:subject_code is null or su.code=:subject_code) AND sat.printed_report=1
        AND (:grade_id is null or a.grade_id=:grade_id)
        AND a.type_id=2
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      ORDER BY e.completed_at DESC

    # this is used to query for results for report generation
    findAllIcasOrSummativesByStudentIdsAndQueryParamsUnknownPermissions: >-
      SELECT
        d.name AS district_name,
        ${sql.snippet.claimAndAltScoreColumns},
        ${sql.snippet.exam}
      JOIN district d ON s.district_id=d.id
      WHERE e.student_id in (:student_ids)
        AND (:school_year is null or e.school_year=:school_year)
        AND (:subject_code is null or su.code=:subject_code) AND sat.printed_report=1
        AND (:grade_id is null or a.grade_id=:grade_id)
        AND a.type_id=:type_id
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      ORDER BY e.completed_at asc

    # this is used to query for results for report generation
    findAllIcasOrSummativesByStudentIdsAndQueryParamsGroupPermissions: >-
      SELECT
        d.name AS district_name,
        ${sql.snippet.claimAndAltScoreColumns},
        ${sql.snippet.exam}
      JOIN district d ON s.district_id=d.id
      $[groupJoinPlaceholder]
      WHERE e.student_id in (:student_ids)
        AND $[groupFilterPlaceholder]
        AND (:subject_code is null or su.code=:subject_code) AND sat.printed_report=1
        AND (:school_year is null or e.school_year=:school_year)
        AND (:grade_id is null or a.grade_id=:grade_id)
        AND a.type_id=:type_id
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      ORDER BY e.completed_at asc

    findExamLevelTraitScoresByExamIds: >-
      SELECT ets.exam_id, ets.trait_id, st.purpose, st.category, st.max_score, ets.score, ets.condition_code
      FROM exam_trait_score ets
        JOIN subject_trait st on ets.trait_id = st.id
      WHERE ets.exam_id IN (:exam_ids)
      ORDER BY exam_id, purpose, category

    # TODO - check performance with large dataset (if not good might have to move some logic into java)
    findItemLevelTraitScoresByExamIds: >-
      SELECT sub.exam_id, st.id AS trait_id, st.purpose, st.category, st.max_score, sub.score, NULL AS condition_code
      FROM (
        SELECT exam_id, performance_task_writing_type, 'EVI' AS category, trait_evidence_elaboration_score AS score
        FROM (SELECT ei.exam_id, ei.trait_evidence_elaboration_score, i.performance_task_writing_type
              FROM exam_item ei JOIN item i ON i.id=ei.item_id
              WHERE ei.exam_id in (:exam_ids) AND i.performance_task_writing_type IS NOT NULL) i1
        UNION
        SELECT exam_id, performance_task_writing_type, 'ORG' AS category, trait_organization_purpose_score AS score
        FROM (SELECT ei.exam_id, ei.trait_organization_purpose_score, i.performance_task_writing_type
              FROM exam_item ei JOIN item i ON i.id=ei.item_id
              WHERE ei.exam_id in (:exam_ids) AND i.performance_task_writing_type IS NOT NULL) i2
        UNION
        SELECT exam_id, performance_task_writing_type, 'CON' AS category, trait_conventions_score AS score
        FROM (SELECT ei.exam_id, ei.trait_conventions_score, i.performance_task_writing_type
              FROM exam_item ei JOIN item i ON i.id=ei.item_id
              WHERE ei.exam_id in (:exam_ids) AND i.performance_task_writing_type IS NOT NULL) i3
      ) sub
      JOIN wer_purpose wp ON wp.wer_type = sub.performance_task_writing_type
      JOIN subject_trait st ON st.purpose = wp.purpose AND st.category = sub.category
      ORDER BY exam_id, purpose, category;

  export:
    exams: >-
      SELECT
        'DistrictId',
        'DistrictName',

        'NcesId',
        'SchoolId',
        'SchoolName',

        'StudentIdentifier',
        'FirstName',
        'LastOrSurname',

        'SubmitDateTime',
        'SchoolYear',
        'TestSessionId',

        'AssessmentType',
        'AssessmentSubType',
        'AssessmentName',
        'Subject',

        'GradeLevelWhenAssessed',
        'Completeness',
        'AdministrationCondition',

        'ScaleScoreAchievementLevel',
        'ScaleScore',
        'ScaleScoreStandardError',

        'Alt1ScoreAchievementLevel',
        'Alt1ScaleScore',
        'Alt1ScaleScoreStandardError',
        'Alt2ScoreAchievementLevel',
        'Alt2ScaleScore',
        'Alt2ScaleScoreStandardError',
        'Alt3ScoreAchievementLevel',
        'Alt3ScaleScore',
        'Alt3ScaleScoreStandardError',
        'Alt4ScoreAchievementLevel',
        'Alt4ScaleScore',
        'Alt4ScaleScoreStandardError',
        'Alt5ScoreAchievementLevel',
        'Alt5ScaleScore',
        'Alt5ScaleScoreStandardError',
        'Alt6ScoreAchievementLevel',
        'Alt6ScaleScore',
        'Alt6ScaleScoreStandardError',

        'Claim1ScoreAchievementLevel',
        'Claim2ScoreAchievementLevel',
        'Claim3ScoreAchievementLevel',
        'Claim4ScoreAchievementLevel',
        'Claim5ScoreAchievementLevel',
        'Claim6ScoreAchievementLevel',

        'Sex',
        'MigrantStatus',
        'Section504Status',
        'IDEAIndicator',
        'LEPStatus',
        'LanguageCode',
        'LanguageAltCode',
        'MilitaryConnectedStudentIndicator',
        'EnglishLanguageAcquisitionStatus',
        'EnglishLanguageAcquisitionStatusStartDate',

        'HispanicOrLatinoEthnicity',
        'AmericanIndianOrAlaskaNative',
        'Asian',
        'BlackOrAfricanAmerican',
        'White',
        'NativeHawaiianOrOtherPacificIslander',
        'TwoOrMoreRaces',
        'Filipino',

        'AssignedAccommodationList'
      UNION ALL
      SELECT
        d.natural_id AS district_natural_id,
        d.name AS district_name,

        COALESCE(s.external_id, '') AS school_ncesid,
        s.natural_id AS school_natural_id,
        s.name AS school_name,

        st.ssid AS student_ssid,
        COALESCE(st.first_name, '') AS student_first_name,
        COALESCE(st.last_or_surname, '') AS student_last_name,

        e.completed_at,
        e.school_year,
        COALESCE(e.session_id, ''),

        CASE WHEN at.code = 'sum' THEN 'Summative' ELSE 'Interim' END,
        upper(at.code),
        a.label AS asmt_label,
        su.code AS asmt_subject_code,

        e.grade_code,
        COALESCE(e.completeness_code, ''),
        COALESCE(e.administration_condition_code, ''),

        COALESCE(e.performance_level, ''),
        COALESCE(e.scale_score, ''),
        COALESCE(e.scale_score_std_err, ''),

        COALESCE(e.alt1_performance_level, ''),
        COALESCE(e.alt1_scale_score, ''),
        COALESCE(e.alt1_scale_score_std_err, ''),
        COALESCE(e.alt2_performance_level, ''),
        COALESCE(e.alt2_scale_score, ''),
        COALESCE(e.alt2_scale_score_std_err, ''),
        COALESCE(e.alt3_performance_level, ''),
        COALESCE(e.alt3_scale_score, ''),
        COALESCE(e.alt3_scale_score_std_err, ''),
        COALESCE(e.alt4_performance_level, ''),
        COALESCE(e.alt4_scale_score, ''),
        COALESCE(e.alt4_scale_score_std_err, ''),
        COALESCE(e.alt5_performance_level, ''),
        COALESCE(e.alt5_scale_score, ''),
        COALESCE(e.alt5_scale_score_std_err, ''),
        COALESCE(e.alt6_performance_level, ''),
        COALESCE(e.alt6_scale_score, ''),
        COALESCE(e.alt6_scale_score_std_err, ''),

        COALESCE(e.claim1_category, ''),
        COALESCE(e.claim2_category, ''),
        COALESCE(e.claim3_category, ''),
        COALESCE(e.claim4_category, ''),
        COALESCE(e.claim5_category, ''),
        COALESCE(e.claim6_category, ''),

        COALESCE(st.gender_code, '') AS student_gender_code,

        (CASE WHEN e.migrant_status = 1 THEN 'Yes' WHEN e.migrant_status = 0 THEN 'No' ELSE '' END),
        (CASE WHEN e.section504 = 1 THEN 'Yes' WHEN e.section504 = 0 THEN 'No' ELSE '' END),
        (CASE WHEN e.iep = 1 THEN 'Yes' WHEN e.iep = 0 THEN 'No' ELSE '' END),
        (CASE WHEN e.lep = 1 THEN 'Yes' WHEN e.lep = 0 THEN 'No' ELSE '' END),
        COALESCE(e.language_code, ''),
        COALESCE(lan.altcode, ''),
        COALESCE(e.military_connected_code, ''),
        COALESCE(e.elas_code, ''),
        COALESCE(e.elas_start_at, ''),

        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'HispanicOrLatinoEthnicity') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'AmericanIndianOrAlaskaNative') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'Asian') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'BlackOrAfricanAmerican') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'White') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'NativeHawaiianOrOtherPacificIslander') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'TwoOrMoreRaces') THEN 'Yes' ELSE '' END ),
        (CASE WHEN EXISTS (SELECT 1 from student_ethnicity WHERE student_id = st.id AND ethnicity_code = 'Filipino') THEN 'Yes' ELSE '' END ),

        COALESCE(e.available_accommodation_codes, '')
      INTO OUTFILE ::EXPORT_DESTINATION:: :export_location
      FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
      LINES TERMINATED by '\n'
      FROM exam e
        JOIN student st ON st.id = e.student_id
        JOIN asmt a ON e.asmt_id = a.id
        JOIN subject su ON su.id = a.subject_id
        JOIN asmt_type at ON at.id = a.type_id
        JOIN school s ON e.school_id = s.id
        JOIN district d ON d.id = s.district_id
        JOIN school isch ON st.inferred_school_id = isch.id
        LEFT JOIN language lan ON e.language_code = lan.code
        LEFT JOIN district_embargo de ON de.id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id
      WHERE
        ${sql.reportProcessor.snippet.exportExamsFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}

  student:
    findByExamQueryParamsUnknownPermissions: >-
      ${sql.reportProcessor.snippet.selectFromStudent}
      WHERE (:student_id is null or st.id = :student_id)
        AND (:school_year is null or e.school_year = :school_year)
        AND (:subject_code is null or sub.code = :subject_code) AND sat.printed_report=1
        AND (:grade_id is null or a.grade_id = :grade_id)
        AND (:assessment_type is null or a.type_id = :assessment_type)
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      group by st.id

    findByExamQueryParamsGroupPermissions: >-
      ${sql.reportProcessor.snippet.selectFromStudent}
      $[groupJoinPlaceholder]
      WHERE $[groupFilterPlaceholder]
        AND (:student_id is null or st.id = :student_id)
        AND (:school_year is null or e.school_year = :school_year)
        AND (:subject_code is null or sub.code = :subject_code) AND sat.printed_report=1
        AND (:grade_id is null or a.grade_id = :grade_id)
        AND (:assessment_type is null or a.type_id = :assessment_type)
        AND ${sql.reportProcessor.snippet.schoolFilter}
        AND ${sql.reportProcessor.snippet.studentExamPermissionWithEmbargo}
      GROUP BY st.id

  subject:
    findAll: >-
      SELECT
        code
      FROM subject
      ORDER BY id

  reportProcessor:
    snippet:
      studentExamPermissionWithEmbargo: >-
        ${sql.snippet.studentExamPermissionWithoutEmbargo}
        AND (
          e.type_id <> 3
          OR CASE coalesce(de.individual, 0)
          WHEN 0 THEN :state_embargo_loading = 1 OR s.district_id IN (:district_ids_embargo_loading)
          WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR s.district_id IN (:district_ids_embargo_loading) OR s.district_id IN (:district_ids_embargo_reviewing)
          WHEN 2 THEN 1
          END
        )

      schoolFilter:
            (
              :school_id is null
              OR
              (
                s.id=:school_id
                OR
                (
                  (1 = :allow_transfer_access AND 0 = :disable_transfer_access)
                  AND isch.id = :school_id
                )
              )
            )

      selectFromStudent: >-
          SELECT
            st.id,
            st.ssid,
            st.first_name,
            st.last_or_surname AS last_name,
            st.gender_code
          FROM student st
            JOIN exam e ON e.student_id = st.id
            JOIN asmt a ON e.asmt_id = a.id
            JOIN school s ON e.school_id = s.id
            JOIN school isch ON st.inferred_school_id = isch.id
            JOIN subject sub ON sub.id=a.subject_id
            JOIN subject_asmt_type sat on a.subject_id=sat.subject_id and a.type_id=sat.asmt_type_id
            LEFT JOIN district_embargo de ON de.district_id = s.district_id AND de.school_year = e.school_year AND de.subject_id = a.subject_id

      exportExamsFilter: >-
        e.school_year = :school_year
        AND
        (
          (
            s.district_group_id IN (:query_district_group_ids) OR s.district_id IN (:query_district_ids) OR s.school_group_id IN (:query_school_group_ids) OR e.school_id IN (:query_school_ids)
          )
          or
          (
            (1 = :allow_transfer_access AND 0 = :disable_transfer_access) AND
            (
              isch.district_group_id IN (:query_district_group_ids) OR isch.district_id IN (:query_district_ids) OR isch.school_group_id IN (:query_school_group_ids) OR isch.id IN (:query_school_ids)
            )
          )
        )

      percentileLeftJoin: >-
          LEFT JOIN percentile p ON e.asmt_id = p.asmt_id AND DATE(e.completed_at) >= p.start_date AND DATE(e.completed_at) <= p.end_date
          LEFT JOIN percentile_score ps ON ps.percentile_id = p.id AND e.scale_score >= ps.min_inclusive AND e.scale_score < ps.max_exclusive
