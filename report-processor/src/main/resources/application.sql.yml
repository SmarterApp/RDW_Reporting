sql:
  export:
    exam: >-
      select
        'DistrictId',
        'DistrictName',

        'NcesId',
        'SchoolId',
        'SchoolName',

        'StudentIdentifier',
        'FirstName',
        'LastOrSurname',

        'SubmitDateTime',
        'SchoolYear',
        'TestSessionId',

        'AssessmentType',
        'AssessmentSubType',
        'AssessmentName',
        'Subject',

        'GradeLevelWhenAssessed',
        'Completeness',
        'AdministrationCondition',

        'ScaleScoreAchievementLevel',
        'ScaleScore',
        'ScaleScoreStandardError',

        'Claim1ScoreAchievementLevel',
        'Claim2ScoreAchievementLevel',
        'Claim3ScoreAchievementLevel',
        'Claim4ScoreAchievementLevel',

        'Sex',
        'MigrantStatus',
        'Section 504',
        'IDEAIndicator',
        'EconomicDisadvantageStatus',
        'LEPStatus',

        'HispanicOrLatinoEthnicity',
        'AmericanIndianOrAlaskaNative',
        'Asian',
        'BlackOrAfricanAmerican',
        'White',
        'NativeHawaiianOrOtherPacificIslander',
        'TwoOrMoreRaces',
        'Filipino',

        'AssignedAccommodationList'
      union all
      select
        d.natural_id as district_natural_id,
        d.name as district_name,

        coalesce(s.external_id, '') as school_ncesid,
        s.natural_id as school_natural_id,
        s.name as school_name,

        st.ssid as student_ssid,
        st.first_name as student_first_name,
        st.last_or_surname as student_last_name,

        e.completed_at,
        e.school_year,
        e.session_id,

        case when at.code = 'sum' then 'Summative' else 'Interim' end,
        upper(at.code),
        a.label as asmt_label,
        su.code as asmt_subject_code,

        e.grade_code,
        e.completeness_code,
        e.administration_condition_code,

        e.performance_level,
        e.scale_score,
        e.scale_score_std_err,

        coalesce(e.claim1_category, ''),
        coalesce(e.claim2_category, ''),
        coalesce(e.claim3_category, ''),
        coalesce(e.claim4_category, ''),

        st.gender_code as student_gender_code,

        (case when e.migrant_status = 1 then 'Yes' when e.migrant_status = 0 then 'No' else '' end),
        (case when e.section504 = 1 then 'Yes' when e.section504 = 0 then 'No' else '' end),
        (case when e.iep then 'Yes' else 'No' end),
        (case when e.economic_disadvantage then 'Yes' else 'No' end),
        (case when e.lep then 'Yes' else 'No' end),

        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'HispanicOrLatinoEthnicity') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'AmericanIndianOrAlaskaNative') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'Asian') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'BlackOrAfricanAmerican') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'White') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'NativeHawaiianOrOtherPacificIslander') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'TwoOrMoreRaces') then 'Yes' else 'No' end ),
        (case when exists (select 1 from student_ethnicity where student_id = st.id and ethnicity_code = 'Filipino') then 'Yes' else 'No' end ),

        coalesce(e.available_accommodation_codes, '')

      into outfile ::EXPORT_DESTINATION:: :export_location
      fields terminated by ',' optionally enclosed by '"'
      lines terminated by '\n'
      from exam e
        join student st on st.id = e.student_id
        join asmt a on e.asmt_id = a.id
        join subject su on su.id = a.subject_id
        join asmt_type at on at.id = a.type_id
        join school s on e.school_id = s.id
        join district d on d.id = s.district_id
      where e.school_year = :school_year and
          (
            1 = :individual_statewide
            or s.district_group_id in (:individual_district_group_ids)
            or s.district_id in (:individual_district_ids)
            or s.school_group_id in (:individual_school_group_ids)
            or e.school_id in (:individual_school_ids)
          ) and (
            s.district_group_id in (:query_district_group_ids)
            or s.district_id in (:query_district_ids)
            or s.school_group_id in (:query_school_group_ids)
            or e.school_id in (:query_school_ids)
          )

  report:

    create: >-
      insert into user_report
        (user_login, total_chunk_count, status, report_resource_uri, label, report_request, created)
        values
        (:user_login, :total_chunk_count, :status, :report_resource_uri, :label, :report_request, :created)

    update: >-
      update user_report
      set
        user_login = :user_login,
        status = :status,
        report_resource_uri = :report_resource_uri,
        label = :label,
        report_request = :report_request,
        total_chunk_count = :total_chunk_count,
        created = :created
      where
        id = :id

    findAllByUser: >-
      select
        r.id,
        r.user_login,
        r.status,
        r.report_resource_uri,
        r.label,
        r.report_request,
        r.total_chunk_count,
        r.complete_chunk_count,
        r.created
      from user_report r
      where r.user_login = :user
      order by r.id desc

    findAllByUserAndId: >-
      select
        r.id,
        r.user_login,
        r.status,
        r.report_resource_uri,
        r.label,
        r.report_request,
        r.total_chunk_count,
        r.complete_chunk_count,
        r.created
      from user_report r
      where r.user_login = :user
        and r.id in (:report_ids)
      order by r.id desc

    findById: >-
      select
        r.id,
        r.user_login,
        r.status,
        r.report_resource_uri,
        r.label,
        r.report_request,
        r.total_chunk_count,
        r.complete_chunk_count,
        r.created
      from user_report r
      where r.id = :report_id

    completeChunk: >-
      update user_report
        set complete_chunk_count = LAST_INSERT_ID(complete_chunk_count + 1)
      where
        id = :report_id;

  student:
    findByExamQueryParamsUnknownPermissions: >-
      select
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname as last_name,
        st.gender_code
      from student st
        join exam e on e.student_id = st.id
        join asmt a on e.asmt_id=a.id
        join school s on e.school_id = s.id
      where (:student_id is null or st.id=:student_id)
        and (:school_year is null or e.school_year=:school_year)
        and (:school_id is null or s.id=:school_id)
        and (:subject_id is null or a.subject_id=:subject_id)
        and (:grade_id is null or e.grade_id=:grade_id)
        and (:assessment_type is null or a.type_id=:assessment_type)
        and ( # This query can run from the context of both GROUP_PII_READ and INDIVIDUAL_PII_READ, so need to evaluate both.
              (1 = :individual_statewide
                or s.district_group_id in (:individual_district_group_ids)
                or s.district_id in (:individual_district_ids)
                or s.school_group_id in (:individual_school_group_ids)
                or e.school_id in (:individual_school_ids))
              or (
                exists(
                    select 1
                    from student_group_membership sgm
                      join student_group sg on sgm.student_group_id = sg.id
                    where sgm.student_group_id in (:group_ids)
                          and sgm.student_id=st.id
                          and (:subject_id is null or sg.subject_id is null or sg.subject_id = :subject_id)
                )
                and (1 = :group_statewide
                  or s.district_group_id in (:group_district_group_ids)
                  or s.district_id in (:group_district_ids)
                  or s.school_group_id in (:group_school_group_ids)
                  or e.school_id in (:group_school_ids))
              )
            )
      group by st.id

    findByExamQueryParamsIndividualPermissions: >-
      select
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname as last_name,
        st.gender_code
      from student st
        join exam e on e.student_id = st.id
        join asmt a on e.asmt_id=a.id
        join school s on e.school_id = s.id
      where (:student_id is null or st.id=:student_id)
        and (:school_year is null or e.school_year=:school_year)
        and (:school_id is null or s.id=:school_id)
        and (:subject_id is null or a.subject_id=:subject_id)
        and (:grade_id is null or e.grade_id=:grade_id)
        and (:assessment_type is null or a.type_id=:assessment_type)
        and (1=:statewide or s.district_group_id in (:district_group_ids) or s.district_id in (:district_ids) or s.school_group_id in (:school_group_ids) or e.school_id in (:school_ids))
      group by st.id

    findByExamQueryParamsGroupPermissions: >-
      select
        st.id,
        st.ssid,
        st.first_name,
        st.last_or_surname as last_name,
        st.gender_code
      from student st
        join exam e on e.student_id = st.id
        join asmt a on e.asmt_id=a.id
        join school s on e.school_id = s.id
        join student_group_membership sgm on st.id = sgm.student_id
        join student_group sg on sgm.student_group_id = sg.id
          and (sg.subject_id is null or a.subject_id = sg.subject_id)
      where sg.id=:group_id
        and (:student_id is null or st.id=:student_id)
        and (:school_year is null or e.school_year=:school_year)
        and (:school_id is null or s.id=:school_id)
        and (:subject_id is null or a.subject_id=:subject_id)
        and (:grade_id is null or e.grade_id=:grade_id)
        and (:assessment_type is null or a.type_id=:assessment_type)
        and (1=:statewide or s.district_group_id in (:district_group_ids) or s.district_id in (:district_ids) or s.school_group_id in (:school_group_ids) or e.school_id in (:school_ids))
      group by st.id