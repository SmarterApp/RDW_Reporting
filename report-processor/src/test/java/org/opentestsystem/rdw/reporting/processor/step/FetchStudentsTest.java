package org.opentestsystem.rdw.reporting.processor.step;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.configuration.ReportGenerationProperties;
import org.opentestsystem.rdw.reporting.processor.model.StudentChunk;
import org.opentestsystem.rdw.reporting.processor.repository.StudentRepository;
import org.opentestsystem.rdw.reporting.processor.requesthandler.ExamQueryParamsParser;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;

import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyMapOf;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.report.ExamReportOrder.STUDENT_SSID;
import static org.opentestsystem.rdw.reporting.processor.MockBuilder.student;

@RunWith(MockitoJUnitRunner.class)
public class FetchStudentsTest {

    @Mock
    private ReportGenerationJobParameterProvider parameterProvider;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private StudentRepository studentRepository;

    @Mock
    private Report report;

    @Mock
    private ChunkContext chunkContext;

    private LinkedBlockingQueue<StudentChunk> studentChunks;
    private Set<ExamQueryParamsParser> queryParamsParsers;
    private ReportGenerationProperties reportGenerationProperties;
    private FetchStudents tasklet;

    @Before
    public void setup() throws Exception {
        reportGenerationProperties = new ReportGenerationProperties();

        when(parameterProvider.reportFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(report);
        when(parameterProvider.permissionScopeFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(PermissionScope.STATEWIDE);

        final StepContext stepContext = mock(StepContext.class);
        when(stepContext.getJobParameters()).thenReturn(Collections.emptyMap());
        when(chunkContext.getStepContext()).thenReturn(stepContext);

        studentChunks = new LinkedBlockingQueue<>();
        queryParamsParsers = new LinkedHashSet<>();
        tasklet = new FetchStudents(studentChunks, queryParamsParsers, parameterProvider, studentRepository, reportGenerationProperties);
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowIfAFetcherCannotBeFoundBecauseNoneAreAvailable() throws Exception {
        tasklet.execute(stepContribution, chunkContext);
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowIfAFetcherCannotBeFoundBecauseNoneAccept() throws Exception {
        queryParamsParsers.add(rejector());
        queryParamsParsers.add(rejector());
        tasklet.execute(stepContribution, chunkContext);
    }

    @Test
    public void itShouldExecuteTheFirstAcceptingFetcher() throws Exception {
        final ExamQueryParamsParser acceptor = acceptor();
        final List<Student> students = newArrayList(student(1L), student(2L), student(3L));

        final ExamQueryParams params = ExamQueryParams.builder().build();
        when(acceptor.parseQueryParams(any(AbstractExamReportRequest.class)))
                .thenReturn(params);

        queryParamsParsers.add(rejector());
        queryParamsParsers.add(rejector());
        queryParamsParsers.add(acceptor);
        queryParamsParsers.add(acceptor());

        when(studentRepository.findStudentsByExamQueryParams(
                any(PermissionScope.class),
                eq(params)
        )).thenReturn(students);

        tasklet.execute(stepContribution, chunkContext);
        assertThat(studentChunks).hasSize(1);
        assertThat(studentChunks.poll().getStudents()).containsOnlyElementsOf(students);
    }

    @Test
    public void itShouldOrderAndChunkStudentsByName() throws Exception {
        reportGenerationProperties.setChunkSize(2);

        final ExamQueryParamsParser acceptor = acceptor();
        queryParamsParsers.add(acceptor);
        final ExamQueryParams params = ExamQueryParams.builder().build();
        when(acceptor.parseQueryParams(any(AbstractExamReportRequest.class)))
                .thenReturn(params);

        final List<Student> students = newArrayList();
        students.add(student(1L).copy().lastName("LastA").build());
        students.add(student(3L).copy().lastName("LastC").build());
        students.add(student(2L).copy().lastName("LastB").build());
        when(studentRepository.findStudentsByExamQueryParams(
                any(PermissionScope.class),
                eq(params)
        )).thenReturn(students);

        tasklet.execute(stepContribution, chunkContext);

        assertThat(studentChunks).hasSize(2);
        assertThat(studentChunks.poll().getStudents().stream().map(Student::getId))
                .containsExactly(1L, 2L);
        assertThat(studentChunks.poll().getStudents().stream().map(Student::getId))
                .containsExactly(3L);
    }

    @Test
    public void itShouldOrderAndChunkStudentsBySSID() throws Exception {
        reportGenerationProperties.setChunkSize(2);
        final AbstractBatchExamReportRequest reportRequest = mock(AbstractBatchExamReportRequest.class);
        when(reportRequest.getOrder()).thenReturn(STUDENT_SSID);
        when(report.getReportRequest()).thenReturn(reportRequest);

        final ExamQueryParamsParser acceptor = acceptor();
        queryParamsParsers.add(acceptor);
        final ExamQueryParams params = ExamQueryParams.builder().build();
        when(acceptor.parseQueryParams(any(AbstractExamReportRequest.class)))
                .thenReturn(params);

        final List<Student> students = newArrayList();
        students.add(student(1L).copy().ssid("ssidA").build());
        students.add(student(3L).copy().ssid("ssidC").build());
        students.add(student(2L).copy().ssid("ssidB").build());
        when(studentRepository.findStudentsByExamQueryParams(
                any(PermissionScope.class),
                eq(params)
        )).thenReturn(students);

        tasklet.execute(stepContribution, chunkContext);

        assertThat(studentChunks).hasSize(2);
        assertThat(studentChunks.poll().getStudents().stream().map(Student::getId))
                .containsExactly(1L, 2L);
        assertThat(studentChunks.poll().getStudents().stream().map(Student::getId))
                .containsExactly(3L);
    }

    private ExamQueryParamsParser acceptor() {
        final ExamQueryParamsParser parser = mock(ExamQueryParamsParser.class);
        when(parser.accept(any(AbstractExamReportRequest.class))).thenReturn(true);
        return parser;
    }

    private ExamQueryParamsParser rejector() {
        return mock(ExamQueryParamsParser.class);
    }
}