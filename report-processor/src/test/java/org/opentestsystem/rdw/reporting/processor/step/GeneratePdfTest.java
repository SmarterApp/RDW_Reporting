package org.opentestsystem.rdw.reporting.processor.step;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.PdfMergeService;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationTemporaryStorage;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.opentestsystem.rdw.reporting.processor.stream.GeneratePdf;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Supplier;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GeneratePdfTest {

    private static final long ReportId = 123L;

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    @Mock
    private ReportContentService reportContentService;

    @Mock
    private ReportGenerationTemporaryStorage reportGenerationTemporaryStorage;

    @Mock
    private PdfMergeService pdfMerger;

    @Mock
    private ReportService reportService;

    private ReportRequestMessage message;
    private File mergedPdfContents;
    private Report report;
    private GeneratePdf component;

    @Before
    public void setup() throws Exception {
        message = ReportRequestMessage.builder()
                .reportId(ReportId)
                .build();

        report = spy(Report.builder()
                .id(ReportId)
                .totalChunkCount(3)
                .completeChunkCount(3)
                .build());
        when(reportService.findOneById(ReportId)).thenReturn(Optional.of(report));

        final List<Supplier<InputStream>> chunkContents = Collections.emptyList();
        when(reportGenerationTemporaryStorage.getChunks(eq(ReportId), eq(3))).thenReturn(chunkContents);

        mergedPdfContents = temporaryFolder.newFile();
        try (final FileOutputStream data = new FileOutputStream(mergedPdfContents)) {
            data.write("PDF Content".getBytes());
        }
        when(pdfMerger.mergePdfs(eq(chunkContents))).thenReturn(mergedPdfContents);

        final AbstractBatchExamReportRequest reportRequest = mock(AbstractBatchExamReportRequest.class);
        final PrintOptions printOptions = new PrintOptions(false);
        when(reportRequest.getOptions()).thenReturn(printOptions);
        when(reportRequest.getLanguage()).thenReturn(Locale.US);
        when(report.getReportRequest()).thenReturn(reportRequest);

        when(reportContentService.writeContent(any(Report.class), any(InputStream.class), anyLong()))
                .thenAnswer(invocation -> {
                    final Report report = invocation.getArgumentAt(0, Report.class);
                    return Report.builder()
                            .copy(report)
                            .reportResourceUri(URI.create("my_uri"))
                            .build();
                });

        component = new GeneratePdf(
                reportContentService,
                reportGenerationTemporaryStorage,
                pdfMerger,
                reportService);
    }

    @Test
    public void itShouldMergeAndStorePdfContents() throws Exception {
        final long mergedPdfLength = mergedPdfContents.length();

        component.collateReportPdf(message);

        assertThat(mergedPdfContents.exists()).isFalse();

        verify(reportContentService).writeContent(eq(report), any(FileInputStream.class), eq(mergedPdfLength));

        final ArgumentCaptor<Report> reportCaptor = ArgumentCaptor.forClass(Report.class);
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getReportResourceUri()).isEqualTo(URI.create("my_uri"));
    }
}