package org.opentestsystem.rdw.reporting.processor.stream;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.AbstractBatchPrintableReportQuery;
import org.opentestsystem.rdw.reporting.processor.model.MergedReport;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationTemporaryStorage;
import org.opentestsystem.rdw.reporting.processor.service.ReportMergeService;
import org.opentestsystem.rdw.reporting.processor.service.UserReportService;
import org.springframework.http.MediaType;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.APPLICATION_PDF_UTF8;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.CompletedChunk;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.TotalChunk;

@RunWith(MockitoJUnitRunner.class)
public class GeneratePdfTest {

    private static final long ReportId = 123L;

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    @Mock
    private ReportContentService reportContentService;

    @Mock
    private ReportGenerationTemporaryStorage reportGenerationTemporaryStorage;

    @Mock
    private ReportMergeService pdfMerger;

    @Mock
    private UserReportService userReportService;

    private ReportRequestMessage message;
    private MergedReport mergedReport;
    private UserReport report;
    private GeneratePdf component;

    @Before
    public void setup() throws Exception {
        message = ReportRequestMessage.builder()
                .reportId(ReportId)
                .build();

        report = spy(UserReport.builder()
                .id(ReportId)
                .metadata(TotalChunk, "3")
                .metadata(CompletedChunk, "3")
                .build());
        when(userReportService.findOneById(ReportId)).thenReturn(Optional.of(report));

        final List<Supplier<InputStream>> chunkContents = Collections.emptyList();
        when(reportGenerationTemporaryStorage.getChunks(eq(ReportId), eq(3))).thenReturn(chunkContents);

        final File mergedContents = temporaryFolder.newFile();
        try (final FileOutputStream data = new FileOutputStream(mergedContents)) {
            data.write("PDF Content".getBytes());
        }
        mergedReport = new MergedReport(mergedContents, APPLICATION_PDF_UTF8);
        when(pdfMerger.mergePdfs(eq(report), eq(chunkContents))).thenReturn(mergedReport);

        final AbstractBatchPrintableReportQuery query = mock(AbstractBatchPrintableReportQuery.class);
        when(report.getQuery()).thenReturn(query);

        when(reportContentService.writeContent(any(UserReport.class), any(InputStream.class), anyLong(), any(MediaType.class)))
                .thenAnswer(invocation -> {
                    final UserReport report = invocation.getArgument(0);
                    return UserReport.builder()
                            .copy(report)
                            .reportResourceUri(URI.create("my_uri"))
                            .build();
                });

        component = new GeneratePdf(
                reportContentService,
                reportGenerationTemporaryStorage,
                pdfMerger,
                userReportService);
    }

    @Test
    public void itShouldMergeAndStorePdfContents() throws Exception {
        final long mergedPdfLength = mergedReport.getFile().length();

        component.collateReportPdf(message);

        assertThat(mergedReport.getFile().exists()).isFalse();

        verify(reportContentService).writeContent(eq(report), any(FileInputStream.class), eq(mergedPdfLength), eq(APPLICATION_PDF_UTF8));

        final ArgumentCaptor<UserReport> reportCaptor = ArgumentCaptor.forClass(UserReport.class);
        verify(userReportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getReportResourceUri()).isEqualTo(URI.create("my_uri"));
    }
}