package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.io.Resources;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.processor.configuration.ReportGenerationProperties;
import org.opentestsystem.rdw.reporting.processor.model.MergedReport;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URL;
import java.util.List;
import java.util.function.Supplier;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.processor.MockBuilder.report;

public class TemporaryFilePdfMergerIT {

    private ReportGenerationProperties properties;
    private URL testPdfUrl;
    private TemporaryFilePdfMerger merger;

    @Before
    public void setup() {
        properties = new ReportGenerationProperties();

        testPdfUrl = Resources.getResource("test-report.pdf");
        merger = new TemporaryFilePdfMerger(properties);
    }

    @Test
    public void itShouldMergePDFsIntoASinglePDF() throws Exception {
        final List<Supplier<InputStream>> sources = newArrayList();
        final File file = new File(testPdfUrl.toURI());
        for (int i=0; i < 2; i++) {
            sources.add(supplier(file));
        }
        final UserReport report = report();

        final MergedReport mergedReport = merger.mergePdfs(report, sources);

        try (final FileInputStream mergedContent = new FileInputStream(mergedReport.getFile())) {
            final PDDocument document = PDDocument.load(mergedContent);
            assertThat(document.getNumberOfPages()).isEqualTo(4);
            document.close();
        }
    }

    @Test
    public void itShouldMergePDFsIntoASingleZIP() throws Exception {
        properties.setPdfPageCutoff(1);
        final List<Supplier<InputStream>> sources = newArrayList();
        final File file = new File(testPdfUrl.toURI());
        for (int i=0; i < 2; i++) {
            sources.add(supplier(file));
        }
        final UserReport report = report();

        final MergedReport mergedReport = merger.mergePdfs(report, sources);

        try (final ZipInputStream zipContent = new ZipInputStream(new FileInputStream(mergedReport.getFile()))) {
            final ZipEntry entry1 = zipContent.getNextEntry();
            assertThat(entry1.getName()).isEqualTo(report.getLabel() + "_1.pdf");
            PDDocument document = PDDocument.load(zipContent);
            assertThat(document.getNumberOfPages()).isEqualTo(2);
            document.close();

            final ZipEntry entry2 = zipContent.getNextEntry();
            assertThat(entry2.getName()).isEqualTo(report.getLabel() + "_2.pdf");
            document = PDDocument.load(zipContent);
            assertThat(document.getNumberOfPages()).isEqualTo(2);
            document.close();

            assertThat(zipContent.getNextEntry()).isNull();
        }
    }

    private Supplier<InputStream> supplier(final File file) {
        return () -> {
            try {
                return new FileInputStream(file);
            } catch (final FileNotFoundException e) {
                throw new RuntimeException("File not found", e);
            }
        };
    }

}