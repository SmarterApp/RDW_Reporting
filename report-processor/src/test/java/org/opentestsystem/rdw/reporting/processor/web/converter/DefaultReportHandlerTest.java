package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.google.common.base.Charsets;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.http.HttpHeaders;
import org.springframework.mock.http.MockHttpOutputMessage;

import java.io.ByteArrayInputStream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV_UTF8;

@RunWith(MockitoJUnitRunner.class)
public class DefaultReportHandlerTest {
    private static final byte[] ResourceContent = "Resource Content".getBytes(Charsets.UTF_8);

    @Mock
    private ReportContentResource resource;

    private MockHttpOutputMessage outputMessage;
    private DefaultReportHandler handler;

    @Before
    public void setup() throws Exception {
        outputMessage = new MockHttpOutputMessage();

        final Report report = Report.builder()
                .label("my report")
                .status(ReportStatus.COMPLETED)
                .build();

        when(resource.getInputStream())
                .thenAnswer(invocationOnMock -> new ByteArrayInputStream(ResourceContent));
        when(resource.contentLength()).thenReturn((long) ResourceContent.length);
        when(resource.getMediaType()).thenReturn(TEXT_CSV_UTF8);
        when(resource.getReport()).thenReturn(report);

        handler = new DefaultReportHandler();
    }

    @Test
    public void itShouldAcceptAnyReportResourceContent() {
        assertThat(handler.accept(resource, null)).isTrue();
    }

    @Test
    public void itShouldSetResponseHeaders() throws Exception {
        handler.writeResource(resource, outputMessage);

        final HttpHeaders headers = outputMessage.getHeaders();
        assertThat(headers.getContentType()).isEqualTo(TEXT_CSV_UTF8);
        assertThat(headers.getFirst(HttpHeaders.CONTENT_DISPOSITION)).contains("my_report");
        assertThat(headers.getContentLength()).isEqualTo(ResourceContent.length);
    }

    @Test
    public void itShouldWriteResourceContent() throws Exception {
        handler.writeResource(resource, outputMessage);

        assertThat(outputMessage.getBodyAsBytes()).isEqualTo(ResourceContent);
    }
}