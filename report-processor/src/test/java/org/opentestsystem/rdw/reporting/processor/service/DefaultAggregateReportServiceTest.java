package org.opentestsystem.rdw.reporting.processor.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.opentestsystem.rdw.reporting.processor.configuration.AggregateReportProperties;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.ReportStatus;
import org.opentestsystem.rdw.security.GroupGrant;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.mock.http.client.MockClientHttpRequest;
import org.springframework.mock.http.client.MockClientHttpResponse;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import java.io.InputStream;
import java.net.URI;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV;
import static org.opentestsystem.rdw.reporting.processor.model.ReportStatus.COMPLETED;
import static org.opentestsystem.rdw.reporting.processor.model.ReportStatus.FAILED;
import static org.springframework.http.MediaType.APPLICATION_JSON;

@RunWith(MockitoJUnitRunner.class)
public class DefaultAggregateReportServiceTest {

    private static final String AggregateServiceUrl = "http://test.com";
    private static final String CsvData = "csv,data";

    @Mock
    private JwtService jwtService;

    @Mock
    private ClientHttpRequestFactory clientHttpRequestFactory;

    @Mock
    private ReportContentService reportContentService;

    private User user;
    private MockClientHttpRequest request;
    private MockClientHttpResponse response;
    private ObjectMapper objectMapper;
    private DefaultAggregateReportService service;

    @Before
    public void setup() throws Exception {
        user = user();

        final AggregateReportProperties aggregateReportProperties = new AggregateReportProperties();
        aggregateReportProperties.setUrl(AggregateServiceUrl);

        request = new MockClientHttpRequest();
        when(clientHttpRequestFactory.createRequest(any(URI.class), any(HttpMethod.class)))
                .thenReturn(request);

        response = new MockClientHttpResponse(CsvData.getBytes(), HttpStatus.OK);
        final HttpHeaders responseHeaders = response.getHeaders();
        responseHeaders.setContentType(TEXT_CSV);
        responseHeaders.setContentLength(CsvData.getBytes().length);
        request.setResponse(response);

        when(jwtService.encode(any(User.class))).thenReturn("encoded_user");

        when(reportContentService.writeContent(any(Report.class), any(InputStream.class), anyLong(), any(MediaType.class)))
                .thenAnswer(invocation -> Report.builder()
                        .copy(invocation.getArgumentAt(0, Report.class))
                        .reportResourceUri(URI.create("/some/resource"))
                        .build());

        objectMapper = new ObjectMapper();

        service = new DefaultAggregateReportService(jwtService, objectMapper, clientHttpRequestFactory, reportContentService, aggregateReportProperties);
    }

    @Test
    public void itShouldCreateAndSubmitARequestToTheAggregateService() throws Exception {
        final Report report = report();
        service.generateReport(report, user);

        verify(clientHttpRequestFactory).createRequest(eq(URI.create(AggregateServiceUrl + "/customaggregate/export")), eq(HttpMethod.POST));
        final ReportQuery query = objectMapper.readValue(request.getBodyAsBytes(), ReportQuery.class);
        assertThat(query).isEqualToComparingFieldByFieldRecursively(((AggregateReportRequest) report.getReportRequest()).getReportQuery());

        final HttpHeaders headers = request.getHeaders();
        assertThat(headers.get(HttpHeaders.AUTHORIZATION)).containsOnly("Bearer encoded_user");
        assertThat(headers.getContentType()).isEqualTo(APPLICATION_JSON);
        assertThat(headers.getAccept()).containsOnly(TEXT_CSV);
    }

    @Test
    public void itShouldWriteTheResponseToTheContentService() throws Exception {
        final Report report = report();
        final Report processed = service.generateReport(report, user);

        assertThat(processed.getReportResourceUri()).isEqualTo(URI.create("/some/resource"));
        assertThat(processed.getStatus()).isEqualTo(COMPLETED);
        verify(reportContentService).writeContent(eq(report), any(InputStream.class), eq((long) CsvData.getBytes().length), eq(TEXT_CSV));
    }

    @Test
    public void itShouldHandleAFailureToCommunicate() {
        response = new MockClientHttpResponse("failure".getBytes(), HttpStatus.INTERNAL_SERVER_ERROR);
        request.setResponse(response);

        final Report result = service.generateReport(report(), user);
        assertThat(result.getStatus()).isEqualTo(FAILED);
    }

    private Report report() {
        final ReportQuery reportQuery = ReportQuery.builder()
                .assessmentGradeIds(of(4, 5, 6))
                .assessmentTypeId(AssessmentType.ICA.id())
                .dimensionType(DimensionType.Gender)
                .districtIds(of(1L))
                .includeState(true)
                .schoolYears(of(1998, 1999))
                .schoolIds(of(1L))
                .subjectIds(of(1))
                .build();
        final AggregateReportRequest request = AggregateReportRequest.builder()
                .reportQuery(reportQuery)
                .build();

        return Report.builder()
                .id(123L)
                .status(ReportStatus.PENDING)
                .reportRequest(request)
                .build();
    }

    private User user() {
        return User.builder()
                .id("id")
                .username("username")
                .password("password")
                .firstName("first")
                .lastName("last")
                .authorities(newArrayList(new SimpleGrantedAuthority("ROLE_A")))
                .groupsById(ImmutableMap.<Long, GroupGrant>builder()
                        .put(1L, new GroupGrant(1L, 1))
                        .build()
                )
                .permissionsById(
                        permissions(groupOf(districts(10L)))
                )
                .build();
    }
}