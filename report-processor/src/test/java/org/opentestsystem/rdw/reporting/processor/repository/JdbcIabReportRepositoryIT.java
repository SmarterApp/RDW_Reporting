package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.model.ExamWithPercentile;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IabReport;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.builder;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.group;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.individual;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIabReportRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIabReportRepositoryIT {

    @Autowired
    private TenantProperties tenantProperties;

    @Autowired
    private JdbcIabReportRepository repository;

    @Autowired
    private JdbcTemplate template;

    @After
    public void cleanup() {
        tenantProperties.setTransferAccessEnabled(false);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsBySchoolAndYear() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(2);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);

        assertThat(reports.get(-2L)).hasSize(1);
        assertThat(reports.get(-2L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsBySchoolAndYearRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-103L);

        tenantProperties.setTransferAccessEnabled(true);
        final Map<Long, Map<Subject, IabReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-101L, -103L);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsByGroupAndYear() {
        final ExamQueryParams examQueryParams = builder()
                .groupId(-20L)
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsByGroupAndYearRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = builder()
                .groupId(-100L)
                .schoolYear(1998)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-103L);

        tenantProperties.setTransferAccessEnabled(true);
        final Map<Long, Map<Subject, IabReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-101L, -103L);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByIndividualPiiRights() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(districts(-10L)),
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByIndividualPiiRightsRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-103L);

        tenantProperties.setTransferAccessEnabled(true);
        final Map<Long, Map<Subject, IabReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-101L, -103L);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByGroupPiiRights() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final User specificGroup = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByGroupPiiRightsRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Map<Subject, IabReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-103L);

        tenantProperties.setTransferAccessEnabled(true);
        final Map<Long, Map<Subject, IabReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-101L, -103L);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByGroupPiiRightsRespectingDisabledTransferAccess() {
        final ExamQueryParams examQueryParams = builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .disableTransferAccess(true)
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Map<Subject, IabReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-103L);

        tenantProperties.setTransferAccessEnabled(true);
        final Map<Long, Map<Subject, IabReport>> disabledTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(disabledTransfer))
                .containsOnly(-103L);
    }

    @Test
    public void itShouldFindPercentileDataWithUnknownPermissionsUsingMinInclusivePercentileScoreAndEndDate() {
        final ExamQueryParams query = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        Map<Long, ExamWithPercentile> examsByID = toExamById(repository.findAllForStudentsByExamFilter(individual(statewide()), of(-2L), query), -2L);
        //find expected mean score based on end date inclusion
        final Integer meanScoreExam13 = template.queryForObject("SELECT round(mean) " +
                "FROM percentile " +
                "WHERE end_date = (SELECT DATE(completed_at) FROM exam WHERE id = -13)", Integer.class);

        //find expected rank based on the percentile_score min_inclusive
        final Integer rankExam13 = template.queryForObject("SELECT percentile_rank " +
                "FROM percentile_score WHERE percentile_id = 2 " +
                "AND min_inclusive = (SELECT scale_score FROM exam WHERE id = -13)", Integer.class);

        assertThat(examsByID.get(-13L).getPercentileMean()).isEqualTo(meanScoreExam13);
        assertThat(examsByID.get(-13L).getPercentileRank()).isEqualTo(rankExam13);
    }

    @Test
    public void itShouldFindNullPercentileDataWithUnknownPermissionsAndMissingPercentileEntries() {
        final ExamQueryParams query = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Map<Long, ExamWithPercentile> examsByID = toExamById(
                repository.findAllForStudentsByExamFilter(individual(statewide()), of(-1L), query), -1L);

        assertThat(examsByID.get(-6L).getPercentileMean()).isNull();
        assertThat(examsByID.get(-6L).getPercentileRank()).isNull();
    }

    @Test
    public void itShouldFindPercentileDataWithUnknownPermissionsUsingMaxExclusivePercentileScoreAndStartDate() {
        final ExamQueryParams query = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-2)
                .build();
        final Map<Long, ExamWithPercentile> examsByID =
                toExamById(repository.findAllForStudentsByExamFilter(individual(statewide()), of(-1L), query), -1L);

        //find expected mean score based on the start date inclusion
        final Integer meanScoreExam4 = template.queryForObject("SELECT round(mean) " +
                "FROM percentile " +
                "WHERE start_date = (SELECT DATE(completed_at) FROM exam WHERE id = -4)", Integer.class);

        assertThat(examsByID.get(-4L).getPercentileMean()).isEqualTo(meanScoreExam4);
        assertThat(examsByID.get(-4L).getPercentileRank()).isEqualTo(10);
    }

    @Test
    public void itShouldFindPercentileDataWithUnknownPermissions() {
        final ExamQueryParams query = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-2)
                .build();

        final Map<Long, ExamWithPercentile> examsByID = toExamById(
                repository.findAllForStudentsByExamFilter(individual(statewide()), of(-1L), query), -1L);

        assertThat(examsByID.get(-3L).getPercentileMean()).isEqualTo(2410);
        assertThat(examsByID.get(-3L).getPercentileRank()).isEqualTo(10);
    }

    @Test
    public void itShouldFindPercentileDataWithGroupPermissions() {
        final User user = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupOf(schools(-10L))))
                .build();

        final ExamQueryParams query = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-2)
                .build();

        final Map<Long, ExamWithPercentile> examsByID = toExamById(repository.findAllForStudentsByExamFilter(user, of(-1L), query), -1L);

        //find expected mean score based on the start date inclusion
        final Integer meanScoreExam4 = template.queryForObject("SELECT round(mean) " +
                "FROM percentile " +
                "WHERE start_date = (SELECT DATE(completed_at) FROM exam WHERE id = -4)", Integer.class);

        //find expected rank based on the percentile_score min_inclusive
        final Integer rankExam13 = template.queryForObject("SELECT percentile_rank " +
                "FROM percentile_score WHERE percentile_id = 2 " +
                "AND min_inclusive = (SELECT scale_score FROM exam WHERE id = -13)", Integer.class);

        assertThat(examsByID.get(-4L).getPercentileMean()).isEqualTo(meanScoreExam4);
        assertThat(examsByID.get(-4L).getPercentileRank()).isEqualTo(10);
    }

    private Map<Long, ExamWithPercentile> toExamById(final Map<Long, Map<Subject, IabReport>> report, final long studentId) {
        final List<ExamWithPercentile> exams = newArrayList();
        if (report.get(studentId).containsKey(MATH)) {
            exams.addAll(report.get(studentId).get(MATH).getExamsByAssessment().values().stream().collect(ArrayList::new, List::addAll, List::addAll));
        }

        if (report.get(studentId).containsKey(ELA)) {
            exams.addAll(report.get(studentId).get(ELA).getExamsByAssessment().values().stream().collect(ArrayList::new, List::addAll, List::addAll));
        }
        final Map<Long, ExamWithPercentile> examsByID = exams.stream().collect(Collectors.toMap(e -> (e.getId()), e -> e));
        return examsByID;
    }

    private Collection<Long> getExamIds(final Map<Long, Map<Subject, IabReport>> reports) {
        return reports.values().stream()
                .flatMap(map -> map.values().stream())
                .map(IabReport::getExamsByAssessment)
                .flatMap(map -> map.values().stream())
                .flatMap(Collection::stream)
                .map(e -> (e.getId()))
                .collect(Collectors.toSet());
    }
}
