package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IabReport;
import org.opentestsystem.rdw.reporting.processor.model.StudentEnrollment;
import org.opentestsystem.rdw.security.GroupGrant;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.Map;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newTreeMap;
import static java.util.Comparator.comparing;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.group;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIabReportRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIabReportRepositoryIT {

    @Autowired
    private JdbcIabReportRepository repository;

    @Test
    public void findOneShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), 0, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadDistrictGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(districtGroups(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(districts(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSchoolGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(schoolGroups(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(schools(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSubject() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 0, -1)).isNull();
    }

    @Test
    public void findOneShouldNotReturnNullForGroupPiiReadStatewide() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForGroupPiiReadStatewideStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldNotReturnNullForGroupPiiReadDistrictGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districtGroups(-9L))),  ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForGroupPiiReadDistrictGroupStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districtGroups(-9L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldNotReturnNullForGroupPiiReadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districts(-10L))),  ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForGroupPiiReadDistrictStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districts(-10L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldNotReturnNullForGroupPiiReadSchoolGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schoolGroups(-11L))), ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForGroupPiiReadSchoolGroupStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schoolGroups(-11L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldNotReturnNullForGroupPiiReadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schools(-10L))), ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForGroupPiiReadSchoolStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schools(-10L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNotNullFindByGroupForAllSubjects() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-20L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForBadGroupId() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-30L), -1, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReportForCorrectStudentAndYear() throws Exception {

        final Assessment iab1 = Assessment.builder()
                .id(-2)
                .name("iab1")
                .schoolYear(1997)
                .gradeCode("g2")
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .cutPoints(newArrayList())
                .build();

        final Assessment iab2 = Assessment.builder()
                .id(-3)
                .name("iab2")
                .schoolYear(2016)
                .gradeCode("g1")
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .resourceUrl(null)
                .cutPoints(newArrayList())
                .build();

        final Exam iab1_exam1 = Exam.builder()
                .id(-4)
                .schoolYear(1997)
                .sessionId("session4")
                .dateTime(Instants.from("1997-01-02"))
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab1_exam2 = Exam.builder()
                .id(-3)
                .schoolYear(1997)
                .sessionId("session3")
                .dateTime(Instants.from("1997-01-01"))
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam1 = Exam.builder()
                .id(-6)
                .schoolYear(1997)
                .sessionId("session6")
                .dateTime(Instants.from("1997-01-04"))
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam2 = Exam.builder()
                .id(-5)
                .schoolYear(1997)
                .sessionId("session5")
                .dateTime(Instants.from("1997-01-03"))
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Map<Assessment, Collection<Exam>> assessments = newTreeMap(comparing(Assessment::getName));
        assessments.put(iab1, newArrayList(iab1_exam1, iab1_exam2));
        assessments.put(iab2, newArrayList(iab2_exam1, iab2_exam2));

        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 1997, 1))
                .isEqualToComparingFieldByFieldRecursively(
                        IabReport.builder()
                                .student(Student.builder()
                                        .id(-1)
                                        .ssid("student1_ssid")
                                        .firstName("student1_firstName")
                                        .lastName("student1_lastName")
                                        .genderCode("g1")
                                        .build()
                                )
                                .studentEnrollment(StudentEnrollment.builder()
                                        .stateCode("CA")
                                        .districtName("district1")
                                        .schoolName("school1")
                                        .gradeCode("g2")
                                        .build()
                                )
                                .examsByAssessment(assessments)
                                .build()
                );
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsBySchoolAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(2);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);

        assertThat(reports.get(-2L)).hasSize(1);
        assertThat(reports.get(-2L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsByGroupAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(-20L)
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByIndividualPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(districts(-10L)),
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByGroupPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final UserPermissions specificGroup = UserPermissions.builder()
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .groupsById(ImmutableMap.of(-10L, new GroupGrant(-10L, 0)))
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

}
