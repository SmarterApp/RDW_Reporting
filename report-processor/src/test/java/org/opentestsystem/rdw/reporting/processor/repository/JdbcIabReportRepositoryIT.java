package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IabReport;
import org.opentestsystem.rdw.security.GroupGrant;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.group;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIabReportRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIabReportRepositoryIT {

    @Autowired
    private JdbcIabReportRepository repository;

    @Test
    public void itShouldFindAllIabReportsForStudentsBySchoolAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(2);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);

        assertThat(reports.get(-2L)).hasSize(1);
        assertThat(reports.get(-2L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForStudentsByGroupAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(-20L)
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByIndividualPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(districts(-10L)),
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

    @Test
    public void itShouldFindAllIabReportsForAStudentByGroupPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final UserPermissions specificGroup = UserPermissions.builder()
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .groupsById(ImmutableMap.of(-10L, new GroupGrant(-10L, 0)))
                .build();

        final Map<Long, Map<Subject, IabReport>> reports = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getExamsByAssessment()).hasSize(1);
        assertThat(reports.get(-1L).get(ELA).getExamsByAssessment()).hasSize(2);
    }

}
