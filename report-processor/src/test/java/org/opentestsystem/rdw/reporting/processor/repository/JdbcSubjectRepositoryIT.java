package org.opentestsystem.rdw.reporting.processor.repository;

import org.junit.Test;
import org.junit.runner.RunWith;

import org.opentestsystem.rdw.reporting.common.multitenant.StaticTenantIdUtil;
import org.opentestsystem.rdw.reporting.common.test.CachingTest;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@CachingTest
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcSubjectRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcSubjectRepositoryIT {

    @Autowired
    public SubjectRepository repository;

    @Autowired
    protected CacheManager cacheManager;

    @Test
    public void itShouldFindAllSubjects() {
        assertThat(repository.findAll()).containsExactlyInAnyOrder("Math", "ELA", "sub");
    }

    @Test
    public void itShouldCacheResults() {
        final Cache subjects = cacheManager.getCache("subjects");
        final String key = StaticTenantIdUtil.tenantIdKey() + "_findAll";

        assertThat(subjects.get(key)).isNull();

        repository.findAll();
        assertThat(subjects.get(key)).isNotNull();
    }
}
