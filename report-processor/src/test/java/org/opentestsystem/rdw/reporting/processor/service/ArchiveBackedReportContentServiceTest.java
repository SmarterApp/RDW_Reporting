package org.opentestsystem.rdw.reporting.processor.service;

import com.amazonaws.services.s3.Headers;
import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.MockBuilder;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.APPLICATION_PDF_UTF8;

@RunWith(MockitoJUnitRunner.class)
public class ArchiveBackedReportContentServiceTest {

    @Mock
    private ArchiveService archiveService;

    @Mock
    private ReportService reportService;

    private Map<String, byte[]> archive;
    private ArchiveBackedReportContentService service;

    @Before
    public void setup() {
        archive = new HashMap<>();

        doAnswer(invocation -> {
            final String location = invocation.getArgumentAt(0, String.class);
            final InputStream content = invocation.getArgumentAt(1, InputStream.class);
            final byte[] contentBytes = IOUtils.toByteArray(content);
            archive.put(location, contentBytes);
            return null;
        }).when(archiveService).writeResource(anyString(), any(InputStream.class), any(Properties.class));

        when(archiveService.openResource(anyString())).thenAnswer(invocation -> {
            final String location = invocation.getArgumentAt(0, String.class);
            if (!archive.containsKey(location)) return null;

            return new ByteArrayInputStream(archive.get(location));
        });

        when(archiveService.readProperties(anyString())).thenAnswer(invocation -> {
            final Properties properties = new Properties();
            final String location = invocation.getArgumentAt(0, String.class);
            if (!archive.containsKey(location)) return properties;

            properties.put(Headers.CONTENT_LENGTH, (long) archive.get(location).length);
            properties.put(Headers.CONTENT_TYPE, APPLICATION_PDF_UTF8.toString());
            return properties;
        });

        when(reportService.update(any(Report.class)))
                .thenAnswer(invocation -> invocation.getArgumentAt(0, Report.class));

        service = new ArchiveBackedReportContentService(archiveService, reportService);
    }

    @Test
    public void itShouldWriteContentsToTheArchiveService() throws Exception {
        final Report original = MockBuilder.report();

        try (final InputStream contents = new ByteArrayInputStream("Contents".getBytes())) {
            final Report updated = service.writeContent(original, contents, 123L, APPLICATION_PDF_UTF8);

            final ReportContentResource resource = service.openContent(updated);
            try (final InputStream retrievedContents = resource.getInputStream()) {
                assertThat(IOUtils.toString(retrievedContents)).isEqualTo("Contents");
            }
            assertThat(resource.contentLength()).isGreaterThan(0);
            assertThat(resource.getMediaType()).isEqualTo(APPLICATION_PDF_UTF8);
        }
    }

    @Test
    public void itShouldReturnNullWhenOpeningAnAbsentReport() {
        final Report report = MockBuilder.report()
                .copy()
                .reportResourceUri(URI.create("no_report_here.pdf"))
                .build();

        assertThat(service.openContent(report)).isNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowIfOpeningAReportWithoutAResourceLocation() {
        final Report report = MockBuilder.report()
                .copy()
                .reportResourceUri(null)
                .build();

        service.openContent(report);
    }

    @Test
    public void itShouldDeleteResourceWhenUriIsPresentAndNoArchiveServiceExceptions() {
        final Report report = MockBuilder.report()
                .copy()
                .reportResourceUri(URI.create("abc"))
                .build();
        service.deleteContents(newHashSet(report));
        verify(archiveService).delete("abc");
    }

    @Test
    public void itShouldNotThrowWhenDeleteResourceIfUriIsPresentAndArchiveServiceExceptions() {
        final Report report = MockBuilder.report()
                .copy()
                .reportResourceUri(URI.create("abc"))
                .build();
        doThrow(new RuntimeException()).when(archiveService).delete("abc");
        service.deleteContents(newHashSet(report));
        verify(archiveService).delete("abc");
    }

    @Test
    public void itShouldSkipDeletingAReportWithoutAResourceLocation() {
        final Report report = MockBuilder.report()
                .copy()
                .reportResourceUri(null)
                .build();

        service.deleteContents(newHashSet(report));
        verify(archiveService, never()).delete(anyString());
    }
}