package org.opentestsystem.rdw.reporting.processor.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.common.model.StudentPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.jackson.ReportModule;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.configuration.JacksonConfiguration;
import org.opentestsystem.rdw.reporting.processor.model.UserQuery;
import org.opentestsystem.rdw.reporting.processor.service.UserQueryService;
import org.opentestsystem.rdw.reporting.processor.web.converter.ReportHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserQueryController.class)
@Import({
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        JacksonConfiguration.class
})
public class UserQueryControllerIT {

    @Autowired
    private ObjectMapper mapper;

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserQueryService service;

    // fails without this for some reason....
    @MockBean
    private ReportHandler reportHandler;

    private final User user = User.builderExt()
            .id("testUser")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();


    @Test
    public void itShouldGetAll() throws Exception {

        final List<UserQuery> queries = ImmutableList.of(
                userQuery()
        );

        when(service.get(user))
                .thenReturn(queries);

        mvc.perform(
                get("/queries")
                        .contentType(MediaType.APPLICATION_JSON)
                        .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[0].user").doesNotExist())
                .andExpect(jsonPath("$[0].query.type").value("Student"))
                .andExpect(jsonPath("$[0].query.name").value("My Query"));
    }

    @Test
    public void itShouldGetOne() throws Exception {

        final UserQuery query = userQuery();

        when(service.get(user, query.getId()))
                .thenReturn(Optional.of(query));

        mvc.perform(
                get("/queries/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.user").doesNotExist())
                .andExpect(jsonPath("$.query.type").value("Student"))
                .andExpect(jsonPath("$.query.name").value("My Query"));
    }

    @Test
    public void itShouldSend404GetFails() throws Exception {

        when(service.get(user, 1L))
                .thenReturn(Optional.empty());

        mvc.perform(
                get("/queries/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldCreate() throws Exception {

        final UserQuery query = userQuery();

        when(service.create(any(User.class), any(ReportQuery.class)))
                .thenReturn(query);

        mvc.perform(
                post("/queries")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(query.getQuery()))
                        .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.user").doesNotExist())
                .andExpect(jsonPath("$.query.type").value("Student"))
                .andExpect(jsonPath("$.query.name").value("My Query"));
    }

    @Test
    public void itShouldSend500WhenCreateFails() throws Exception {

        final UserQuery query = userQuery();

        when(service.create(any(User.class), any(ReportQuery.class)))
                .thenThrow(new IllegalStateException());

        mvc.perform(
                post("/queries")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(query.getQuery()))
                        .with(user(user)))
                .andExpect(status().is5xxServerError());
    }

    @Test
    public void itShouldUpdate() throws Exception {

        final UserQuery query = userQuery();

        when(service.update(any(User.class), any(UserQuery.class)))
                .thenReturn(query);

        mvc.perform(
                put("/queries")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(query.getQuery()))
                        .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.user").doesNotExist())
                .andExpect(jsonPath("$.query.type").value("Student"))
                .andExpect(jsonPath("$.query.name").value("My Query"));
    }

    @Test
    public void itShouldSend404WhenUpdateFails() throws Exception {

        final UserQuery query = userQuery();

        when(service.update(any(User.class), any(UserQuery.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(
                put("/queries")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsBytes(query.getQuery()))
                        .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldDelete() throws Exception {
        mvc.perform(
                delete("/queries/1")
                        .with(user(user)))
                .andExpect(status().isNoContent());

        verify(service, times(1)).delete(user, 1L);
    }

    @Test
    public void itShouldSend404WhenDeleteFails() throws Exception {

        doThrow(new NoSuchElementException())
                .when(service)
                .delete(user, 1L);

        mvc.perform(
                delete("/queries/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .with(user(user)))
                .andExpect(status().isNotFound());
    }

    private UserQuery userQuery() {
        return UserQuery.builder()
                .id(1L)
                .user("suppressed")
                .query(StudentPrintableReportQuery.builder()
                        .name("My Query")
                        .build()
                )
                .build();
    }

}
