package org.opentestsystem.rdw.reporting.processor.repository;

import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.StudentPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.jackson.ReportModule;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.processor.model.UserQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;

// TODO test failure to update/delete when where clause user_login doesn't match
@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {
        ITDataSourceConfiguration.class,
        JdbcUserQueryRepository.class,
        JacksonAutoConfiguration.class,
        JdbcUserQueryRepositoryIT.ObjectMapperConfiguration.class
})
public class JdbcUserQueryRepositoryIT {

    static class ObjectMapperConfiguration {
        @Bean
        public Jackson2ObjectMapperBuilderCustomizer customizeObjectMapper() {
            return builder -> builder
                    .failOnUnknownProperties(false)
                    .modulesToInstall(new GuavaModule(), new ReportModule());
        }
    }

    @Autowired
    private UserQueryRepository repository;

    @Autowired
    private NamedParameterJdbcTemplate template;

    @Test
    public void itShouldInsert() {
        final UserQuery userQuery = userQuery();

        final UserQuery inserted = repository.create(userQuery);
        assertThat(inserted.getId()).isGreaterThan(0);
        assertThat(inserted.getUser()).isEqualTo(userQuery.getUser());
        assertThat(inserted.getQuery()).isEqualToComparingFieldByFieldRecursively(userQuery.getQuery());
        assertThat(inserted.getCreated()).isNotNull();
        assertThat(inserted.getUpdated()).isNotNull();
        assertThat(findLabel(inserted.getId())).isEqualTo(userQuery.getQuery().getName());
        assertThat(findQueryType(inserted.getId())).isEqualTo(userQuery.getQuery().getType().name());
    }

    @Test
    public void itShouldUpdate() {
        final UserQuery created = repository.create(userQuery());
        final UserQuery update = created.copy()
                .query(((StudentPrintableReportQuery) created.getQuery()).copy()
                        .name("new name")
                        .schoolYear(2000)
                        .build()
                )
                .build();

        final UserQuery updated = repository.update(update);
        assertThat(updated.getId()).isEqualTo(created.getId());
        assertThat(updated.getUser()).isEqualTo(created.getUser());
        assertThat(updated.getQuery()).isEqualToComparingFieldByFieldRecursively(update.getQuery());
        assertThat(updated.getCreated()).isEqualTo(created.getCreated());
        assertThat(updated.getUpdated()).isNotNull();
        assertThat(updated.getUpdated()).isNotEqualTo(update.getUpdated());
        assertThat(findLabel(updated.getId())).isEqualTo(update.getQuery().getName());
        assertThat(findQueryType(updated.getId())).isEqualTo(update.getQuery().getType().name());
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowExceptionOnUpdateOfMissingEntity() {
        final UserQuery created = repository.create(userQuery());
        final UserQuery update = created.copy()
                .id(2L)
                .build();

        repository.update(update);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowExceptionOnUpdateOfEntityWithWrongUser() {
        final UserQuery created = repository.create(userQuery());
        final UserQuery update = created.copy()
                .user("other user")
                .build();

        repository.update(update);
    }

    @Test
    public void itShouldDelete() {
        final UserQuery created = repository.create(userQuery());
        assertThat(repository.findAllByUser(created.getUser()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(created);
        repository.deleteByUserAndId(created.getUser(), created.getId());
        assertThat(repository.findAllByUser(created.getUser())).isEmpty();
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowExceptionOnDeleteOfMissingEntity() {
        final UserQuery created = repository.create(userQuery());
        repository.deleteByUserAndId(created.getUser(), 2L);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowExceptionOnDeleteOfEntityWithWrongUser() {
        final UserQuery created = repository.create(userQuery());
        repository.deleteByUserAndId("other user", created.getId());
    }

    @Test
    public void itShouldFindAllByUser() {
        final UserQuery creation = userQuery();
        assertThat(repository.findAllByUser(creation.getUser()))
                .isEmpty();
        final UserQuery created = repository.create(creation);
        assertThat(repository.findAllByUser(created.getUser()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(created);
    }

    @Test
    public void itShouldFindByUserAndId() {
        final UserQuery creation = userQuery();
        assertThat(repository.findByUserAndId(creation.getUser(), 1L))
                .isNull();
        final UserQuery created = repository.create(creation);
        assertThat(repository.findByUserAndId(created.getUser(), created.getId()))
                .isEqualToComparingFieldByFieldRecursively(created);
    }

    private UserQuery userQuery() {
        return UserQuery.builder()
                .user("user")
                .query(StudentPrintableReportQuery.builder()
                        .name("My Query")
                        .build()
                )
                .build();
    }

    private String findLabel(final long id) {
        return template.queryForObject(
                "SELECT label FROM user_query WHERE id = :id",
                new MapSqlParameterSource("id", id),
                String.class
        );
    }

    private String findQueryType(final long id) {
        return template.queryForObject(
                "SELECT query_type FROM user_query WHERE id = :id",
                new MapSqlParameterSource("id", id),
                String.class
        );
    }

}