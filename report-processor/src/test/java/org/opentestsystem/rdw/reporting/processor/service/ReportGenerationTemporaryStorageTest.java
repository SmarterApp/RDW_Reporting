package org.opentestsystem.rdw.reporting.processor.service;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.util.function.Supplier;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class ReportGenerationTemporaryStorageTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    private ReportGenerationTemporaryStorage storage;

    @Before
    public void setup() {
        final File root = temporaryFolder.getRoot();
        storage = new ReportGenerationTemporaryStorage(123L, "file://" + root.getPath() + "/");
    }

    @Test
    public void itShouldStoreAndRetrieveContents() throws Exception {
        try (final InputStream chunk1 = new ByteArrayInputStream("content 1".getBytes());
             final InputStream chunk2 = new ByteArrayInputStream("content 2".getBytes())) {
            storage.writeChunk(1, chunk2);
            storage.writeChunk(0, chunk1);
        }

        final StringBuilder contents = new StringBuilder();
        for (final Supplier<InputStream> chunkSupplier : storage.getChunks()) {
            try (final InputStream storedContent = chunkSupplier.get()) {
                contents.append(IOUtils.toString(storedContent));
            }
        }
        assertThat(contents.toString()).isEqualTo("content 1content 2");
    }

    @Test
    public void itShouldCleanUpFiles() throws Exception {
        try (final InputStream content = new ByteArrayInputStream("content 1".getBytes())) {
            storage.writeChunk(0, content);
        }

        assertThat(temporaryFolder.getRoot().exists()).isTrue();
        assertThat(temporaryFolder.getRoot().listFiles()).isNotEmpty();
        storage.cleanup();
        assertThat(temporaryFolder.getRoot().listFiles()).isEmpty();
    }

}