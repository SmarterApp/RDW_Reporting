package org.opentestsystem.rdw.reporting.processor.thymeleaf;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.repository.ReportTemplateRepository;
import org.springframework.core.io.DefaultResourceLoader;
import org.thymeleaf.templateresource.ITemplateResource;
import org.thymeleaf.templateresource.StringTemplateResource;

import java.io.IOException;
import java.io.Reader;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ReportTemplateResolverTest {

    private ReportTemplateResolver resolver;
    private ReportTemplateRepository repository;

    @Before
    public void createResolver() {
        repository = mock(ReportTemplateRepository.class);
        resolver = new ReportTemplateResolver(repository, new DefaultResourceLoader());
    }

    @Test
    public void itShouldReturnNullForUnknowableTemplate() {
        final ITemplateResource resource = resolver.computeTemplateResource(null, "owner", "whatevs", "whatevs.html", null, null);
        assertThat(resource).isNull();
    }

    @Test
    public void itShouldUseRepositoryToLoadTemplate() throws IOException {
        final String contents = "Math_sum contents";
        when(repository.getAsString("Math_sum.html")).thenReturn(Optional.of(contents));
        final ITemplateResource resource = resolver.computeTemplateResource(null, "owner", "Math_sum", "Math_sum.html", null, null);
        assertThat(resource).isInstanceOf(StringTemplateResource.class);
        try (final Reader reader = ((StringTemplateResource)resource).reader()) {
            assertThat(IOUtils.toString(reader)).isEqualTo(contents);
        }
    }

    @Test
    public void itShouldReturnDefaultTemplate() throws IOException {
        final String contents = "default contents";
        when(repository.getAsString("Science_ica.html")).thenReturn(Optional.empty());
        when(repository.getAsString(ReportTemplateResolver.DefaultTemplateName)).thenReturn(Optional.of(contents));
        final ITemplateResource resource = resolver.computeTemplateResource(null, "owner", "Science_ica", "Science_ica.html", null, null);
        assertThat(resource).isInstanceOf(StringTemplateResource.class);
        try (final Reader reader = ((StringTemplateResource)resource).reader()) {
            assertThat(IOUtils.toString(reader)).isEqualTo(contents);
        }
    }

    @Test
    public void itShouldReturnEmbeddedDefaultTemplate() throws IOException {
        when(repository.getAsString("ELPAC_iab.html")).thenReturn(Optional.empty());
        when(repository.getAsString(ReportTemplateResolver.DefaultTemplateName)).thenReturn(Optional.empty());
        final ITemplateResource resource = resolver.computeTemplateResource(null, "owner", "ELPAC_iab", "ELPAC_iab.html", null, null);
        assertThat(resource).isInstanceOf(StringTemplateResource.class);
        try (final Reader reader = ((StringTemplateResource)resource).reader()) {
            assertThat(IOUtils.toString(reader)).contains("embedded");
        }
    }

    @Test
    public void itShouldFallbackToLegacyTemplate() throws IOException {
        when(repository.getAsString("Math_iab.html")).thenReturn(Optional.empty());
        final ITemplateResource resource = resolver.computeTemplateResource(null, "owner", "Math_iab", "Math_iab.html", null, null);
        assertThat(resource).isInstanceOf(StringTemplateResource.class);
        try (final Reader reader = ((StringTemplateResource)resource).reader()) {
            assertThat(IOUtils.toString(reader)).hasSizeGreaterThan(10000);
        }
    }
}
