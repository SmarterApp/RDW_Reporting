package org.opentestsystem.rdw.reporting.processor.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.GroupPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.PrintableReportOrder;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.test.support.ReportQueries;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.configuration.JacksonConfiguration;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.service.ExamReportService;
import org.opentestsystem.rdw.reporting.processor.web.converter.ReportHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URI;
import java.time.Instant;
import java.util.Locale;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.calls;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.CompletedChunk;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.TotalChunk;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserReportController.class)
@Import({
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        JacksonConfiguration.class
})
public class UserReportControllerIT {

    private static final StudentPrintableReportQuery StudentQuery = StudentPrintableReportQuery.builder()
            .studentId(1L)
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .language(new Locale("eng"))
            .build();

    private static final SchoolGradePrintableReportQuery SchoolGradeQuery = SchoolGradePrintableReportQuery.builder()
            .schoolId(1L)
            .gradeId(2)
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .order(PrintableReportOrder.StudentName)
            .language(new Locale("eng"))
            .build();

    private static final GroupPrintableReportQuery GroupQuery = GroupPrintableReportQuery.builder()
            .groupId(new UserGroupId(1L, null))
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .order(PrintableReportOrder.StudentName)
            .language(new Locale("eng"))
            .build();

    private static final CustomAggregateReportQuery CustomAggregateQuery = ReportQueries.basicAggregateQuery()
            .name("My UserReport")
            .build();

    @Autowired
    private ObjectMapper mapper;

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ExamReportService service;

    @MockBean
    private ReportHandler reportHandler;

    @MockBean
    private ReportResourceMapper reportMapper;

    private final User user = User.builderExt()
            .id("testUser")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void createStudentReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(StudentPrintableReportQuery.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(StudentQuery))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createStudentReportShouldReturnHandle() throws Exception {

        when(service.createReport(any(User.class), any(StudentPrintableReportQuery.class)))
                .thenReturn(UserReport.builder()
                        .id(1L)
                        .status(ReportStatus.PENDING)
                        .reportResourceUri(URI.create("/somewhere.pdf"))
                        .metadata(CompletedChunk, "0")
                        .metadata(TotalChunk, "123")
                        .user("my-user")
                        .label("my-label")
                        .created(Instant.now())
                        .query(StudentQuery)
                        .build());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(StudentQuery))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.status").value("PENDING"))
                .andExpect(jsonPath("$.label").value("my-label"))
                .andExpect(jsonPath("$.query.type").value("Student"))
                .andExpect(jsonPath("$.query.assessmentTypeCode").value("ica"))
                .andExpect(jsonPath("$.query.subjectCode").value("Math"))
                .andExpect(jsonPath("$.query.schoolYear").value(2))
                .andExpect(jsonPath("$.created").isNotEmpty())
                .andExpect(jsonPath("$.metadata.completed_chunk_count").value("0"))
                .andExpect(jsonPath("$.metadata.total_chunk_count").value("123"));

    }

    @Test
    public void createSchoolGradeReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(SchoolGradePrintableReportQuery.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(SchoolGradeQuery))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createSchoolGradeReportShouldReturnReport() throws Exception {

        when(service.createReport(any(User.class), any(SchoolGradePrintableReportQuery.class)))
                .thenReturn(UserReport.builder().id(1L).build());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(SchoolGradeQuery))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));
    }

    @Test
    public void createGroupReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(GroupPrintableReportQuery.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(GroupQuery))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createGroupReportShouldReturnHandle() throws Exception {
        final ArgumentCaptor<GroupPrintableReportQuery> groupRequestCaptor = ArgumentCaptor.forClass(GroupPrintableReportQuery.class);
        when(service.createReport(any(User.class), groupRequestCaptor.capture()))
                .thenReturn(UserReport.builder().id(1L).build());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(GroupQuery))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));

        assertThat(groupRequestCaptor.getValue()).isEqualToComparingFieldByFieldRecursively(GroupQuery);
    }

    @Test
    public void createAggregateReportShouldReturnHandle() throws Exception {
        final ArgumentCaptor<CustomAggregateReportQuery> aggregateCaptor = ArgumentCaptor.forClass(CustomAggregateReportQuery.class);
        when(service.createReport(any(User.class), aggregateCaptor.capture()))
                .thenReturn(UserReport.builder().id(1L).build());

        mvc.perform(post("/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(CustomAggregateQuery))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));

        assertThat(aggregateCaptor.getValue()).isEqualToComparingFieldByFieldRecursively(CustomAggregateQuery);
    }

    @Test
    public void itShouldDelete() throws Exception {
        mvc.perform(delete("/reports/1")
                .contentType(MediaType.APPLICATION_JSON)
                .with(user(user)))
                .andExpect(status().isNoContent());

        verify(service, times(1)).delete(user, 1L);
    }

    @Test
    public void itShouldSend404WhenDeleteFails() throws Exception {

        doThrow(new NoSuchElementException())
                .when(service)
                .delete(user, 1L);

        mvc.perform(delete("/reports/1")
                .contentType(MediaType.APPLICATION_JSON)
                .with(user(user)))
                .andExpect(status().isNotFound());
    }
}
