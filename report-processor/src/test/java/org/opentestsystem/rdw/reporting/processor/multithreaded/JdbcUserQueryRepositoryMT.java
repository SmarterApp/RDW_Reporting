package org.opentestsystem.rdw.reporting.processor.multithreaded;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.multithreaded.MultiThreadedTest;
import org.opentestsystem.rdw.reporting.processor.model.UserQuery;
import org.opentestsystem.rdw.reporting.processor.repository.JdbcUserQueryRepository;
import org.opentestsystem.rdw.reporting.processor.repository.UserQueryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Profile("mtTest")
@Import(JdbcUserQueryRepository.class)
@Component
public class JdbcUserQueryRepositoryMT extends MultiThreadedTest {

    @Autowired
    private UserQueryRepository repository;

    @Override
    protected void work() {

        final UserQuery a = repository.create(
                UserQuery.builder()
                        .user("test")
                        .query(SchoolGradePrintableReportQuery.builder()
                                .name("1")
                                .schoolId(1)
                                .gradeId(1)
                                .build()
                        )
                        .build()
        );

        final UserQuery b = repository.findByUserAndId(a.getUser(), a.getId());

        final UserQuery c = repository.update(
                b.copy()
                        .query(SchoolGradePrintableReportQuery.builder()
                                .name("2")
                                .schoolId(2)
                                .gradeId(2)
                                .build()
                        )
                        .build()
        );

        final UserQuery d = repository.update(
                c.copy()
                        .query(SchoolGradePrintableReportQuery.builder()
                                .name("3")
                                .schoolId(3)
                                .gradeId(3)
                                .build()
                        )
                        .build()
        );

        repository.deleteByUserAndId(a.getUser(), a.getId());
    }

    @Override
    protected void cleanUp() {
        final List<String> sqls = newArrayList(
                "DELETE FROM user_query"
        );
        for (final String sql : Lists.reverse(sqls)) {
            getJdbcTemplate().getJdbcOperations().execute(sql);
        }
    }
}
