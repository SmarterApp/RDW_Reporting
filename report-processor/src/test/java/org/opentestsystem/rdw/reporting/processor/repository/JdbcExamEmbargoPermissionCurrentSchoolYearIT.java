package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.StudentHistoryExamWrapper;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.getEmbargoPermissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;


/**
 * Test the embargo related SQL clause of the permissions.
 * This is done by configuring the school-year to the test data value
 */
@RunWith(SpringRunner.class)
@RepositoryIT
@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@ActiveProfiles({"test", "test-current-school-year"})
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentExamPermissionRepository.class})
@SqlGroup({
        @Sql(scripts = {"classpath:reporting-permissions-integration-test-data.sql"}),
        @Sql(statements = {"update school set embargo_enabled = 0 where id <> -30",
                //add an interim exam for student -1 and 1997
                "insert into exam (id, type_id, grade_id, grade_code, student_id, school_id, opportunity, iep, lep, section504, economic_disadvantage," +
                        "  school_year, asmt_id, asmt_version, completeness_code, administration_condition_code, session_id," +
                        "  scale_score, scale_score_std_err, performance_level, completed_at," +
                        "  claim1_category, claim1_scale_score, claim1_scale_score_std_err," +
                        "  claim2_category, claim2_scale_score, claim2_scale_score_std_err," +
                        "  claim3_category, claim3_scale_score, claim3_scale_score_std_err," +
                        "  claim4_category, claim4_scale_score, claim4_scale_score_std_err," +
                        "  update_import_id, updated, migrate_id) values" +
                        " (-99, 1, -1, 'g1', -1, -30, 0, 0, 0, 0, 0, 1997, -1, 'v1', 'Complete', 'Valid', 'session1', 2000, 20, 1, '1997-01-01 00:00:00.000000', 1, 100, 10, 2, 200, 20, 3, 300, 30, 4, 400, 40, -1, '1997-07-18 20:14:34.000000', -1)"
        })
})
public class JdbcExamEmbargoPermissionCurrentSchoolYearIT {


    @Autowired
    private StudentExamPermissionRepository repository;

    @Autowired
    JdbcTemplate template;

    private int examCount;
    private int sumExamSchool30Count;

    private final static Map<String, Permission> individualStatewide = ImmutableMap.copyOf(permissions(individualOf(PermissionScope.STATEWIDE)));
    private User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builderExt()
                .id("userId")
                .username("someone-10@somewhere.com")
                .password("redacted");

        sumExamSchool30Count = template.queryForObject("SELECT count(*) FROM exam e " +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school s ON s.id = e.school_id" +
                " WHERE e.student_id = -1 AND s.id = -30 AND a.type_id =3 ", Integer.class);

        examCount = template.queryForObject("SELECT count(*) FROM exam e WHERE e.student_id = -1", Integer.class);
    }

    @Test
    public void isShouldReturnSummativeExamsForSchoolsWithReleasedEmbargo() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), -1L)
                .stream()
                .filter(e -> (e.getExam().getSchool().getId() != -30))
                .filter(e -> (e.getAssessment().getType() == SUMMATIVE)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new StudentHistoryExamWrapper.Builder().exam(exam3().build()).assessment(assessmentBuilder3().build()).build()
                );
    }

    @Test
    public void isShouldNotReturnSummativeExamsForSchoolsWithEmbargoedData() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), -1L)
                .stream()
                .filter(e -> (e.getExam().getSchool().getId() == -30))
                .filter(e -> (e.getAssessment().getType() == SUMMATIVE))
                .count())
                .isZero();
    }

    @Test
    public void isShouldReturnInterimExamsForSchoolsWithEmbargoedExams() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(individualStatewide).build(), -1L)
                .stream()
                .filter(e -> (e.getExam().getSchool().getId() == -30))
                .filter(e -> (e.getAssessment().getType() != SUMMATIVE))
                .map(e -> (e.getExam().getId()))
                .collect(toList())).containsExactly(-99L);
    }

    @Test
    public void isShouldNotReturnResultsForDistrictAdmin() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(getEmbargoPermissions(false, -20L)).build(), -1L).size())
                .isEqualTo(examCount - sumExamSchool30Count);
    }

    @Test
    public void isShoulNotReturnResultsForStateAdmin() {
        assertThat(repository.findAllForStudent(userBuilder.permissionsById(getEmbargoPermissions(true, null)).build(), -1L).size())
                .isEqualTo(examCount - sumExamSchool30Count);
    }

    public static Exam.Builder exam3() {
        return Exam.builder()
                .gradeCode("g1")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .id(-3)
                .schoolYear(1997)
                .sessionId("session3")
                .dateTime(Instants.from("1997-01-01"))
                .gradeCode("g3")
                .scaleScore(
                        ScaleScore.builder().level(3).value(2200).standardError(22).build()
                )
                .claimScaleScores(newArrayList(
                        ScaleScore.builder().level(1).value(1000).standardError(100).build(),
                        ScaleScore.builder().level(2).value(2000).standardError(200).build(),
                        ScaleScore.builder().level(3).value(3000).standardError(300).build()
                ))
                .school(School.builder().id(-20L).districtId(-10).name("school2").schoolGroupId(-10L).build());
    }

    public static Assessment.Builder assessmentBuilder3() {
        return Assessment.builder()
                .id(-3)
                .type(AssessmentType.SUMMATIVE)
                .label("sum1")
                .gradeCode("g1")
                .schoolYear(1997)
                .subjectCode("Math")
                .claimCodes(newArrayList("sum_claim1", "sum_claim2", "sum_claim3"));
    }
}
