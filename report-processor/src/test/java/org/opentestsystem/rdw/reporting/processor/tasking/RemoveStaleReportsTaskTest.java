package org.opentestsystem.rdw.reporting.processor.tasking;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.RemoveReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.test.util.ReflectionTestUtils;

import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class RemoveStaleReportsTaskTest {

    private static final Logger log = LoggerFactory.getLogger(RemoveStaleReportsTaskTest.class);

    @InjectMocks()
    private RemoveStaleReportsTask removeStaleReportsTask;
    @Mock
    private RemoveReportService removeReportService;
    @Mock
    private Report report;
    private ThreadPoolTaskScheduler taskScheduler;

    @Before
    public void setup() {
        taskScheduler = new ThreadPoolTaskScheduler();
        taskScheduler.setPoolSize(1);
        taskScheduler.setThreadNamePrefix("RemoveStaleReportsThread");
        taskScheduler.initialize();
        removeStaleReportsTask = new RemoveStaleReportsTask(removeReportService, taskScheduler);
        ReflectionTestUtils.setField(removeStaleReportsTask, "maxRandomMinutes", 0);
        ReflectionTestUtils.setField(removeStaleReportsTask, "maxReportLifetimeDays", 30);
    }

    @After
    public void tearDown() {
        taskScheduler.shutdown();
    }

    @Test
    public void itShouldRemoveStaleReports() throws InterruptedException {
        removeStaleReportsTask.removeStaleReports();
        Thread.sleep(500L);
        verify(removeReportService).deleteOldReports(30);
    }

}
