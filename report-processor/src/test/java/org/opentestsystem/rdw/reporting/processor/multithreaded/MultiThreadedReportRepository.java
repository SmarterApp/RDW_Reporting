package org.opentestsystem.rdw.reporting.processor.multithreaded;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.multithreaded.MultiThreadedTest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.repository.JdbcReportRepository;
import org.opentestsystem.rdw.reporting.processor.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Profile("mtTest")
@Import(JdbcReportRepository.class)
@Component
public class MultiThreadedReportRepository extends MultiThreadedTest {
    @Autowired
    private ReportRepository repository;

    @Override
    protected void work() {
        final Report report = repository.update(
                repository.update(
                        repository.create(Report.builder()
                                .user("test")
                                .status(ReportStatus.RUNNING)
                                .reportRequest(SchoolGradeExamReportRequest.builder()
                                        .schoolId(123)
                                        .gradeId(3)
                                        .build())
                                .created(Instant.now())
                                .label("label")
                                .build()
                        ).copy()
                                .metadata("completed_chunk_count", "0")
                                .metadata("some other name", "value")
                                .build()
                ).copy()
                        .metadata("new value", "0")
                        .metadata("completed_chunk_count", "0")
                        .build());
        repository.completeChunk(report);
    }

    @Override
    protected void cleanUp() {
        final List<String> sqls = newArrayList(
                "DELETE FROM user_report_metadata",
                "DELETE FROM user_report"
        );
        for (final String sql : Lists.reverse(sqls)) {
            getJdbcTemplate().getJdbcOperations().execute(sql);
        }
    }
}
