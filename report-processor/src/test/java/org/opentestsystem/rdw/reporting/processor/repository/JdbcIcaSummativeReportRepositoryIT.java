package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReport;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.reporting.processor.model.IcaSummativeReport;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.group;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.individual;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIcaSummativeReportRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIcaSummativeReportRepositoryIT {

    @Autowired
    @Qualifier("reportingSystemPropertiesResolver")
    //TODO: mutating this for test purposes is not ideal instead use spring profiles (see JdbcExamRepositoryIT*)
    private ReportingSystemPropertiesImpl reportingSystemProperties;


    @Autowired
    private JdbcIcaSummativeReportRepository repository;

    @After
    public void cleanup() {
        reportingSystemProperties.setTransferAccessEnabled(false);
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsBySchoolAndYear() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(2);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");

        assertThat(reports.get(-2L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsBySchoolAndYearAndSubject() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .subjectCode("Math")
                .gradeId(-1)
                .assessmentTypeCode("sum")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).isNullOrEmpty();

        assertThat(reports.get(-2L)).hasSize(1);
        assertThat(getFirstBySubject(reports.get(-2L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
    }

    @Test
    public void itShouldFindAllSummativeReportsForStudentsBySchoolAndYear() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .assessmentTypeCode("sum")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(statewide()),
                of(-1L, -2L),
                examQueryParams);

        // there is 1 student with results
        assertThat(reports).hasSize(1);
        // there are 2 exams for the student but "sub" doesn't support ISR's
        assertThat(reports.get(-2L)).hasSize(1);
        assertThat(getFirstBySubject(reports.get(-2L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsBySchoolAndYearRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Individual)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);
        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-100L, -102L);

    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsByGroup() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(-20L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsByUserGroup() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(null, -200L))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");
    }

    @Test
    public void itShouldFindAllSummativeReportsForStudentsByGroup() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(-40L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("sum")
                .build();
        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams);

        // only 1 student has exams matching query
        assertThat(reports).hasSize(1);
        // there are 2 exams but "sub" doesn't support printed reports
        assertThat(reports.get(-2L)).hasSize(1);
        final IcaSummativeReport report = getFirstBySubject(reports.get(-2L), "Math");
        assertThat(report.getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(report.getExam().getTraitScores()).hasSize(3);
    }

    @Test
    public void itShouldNotFindAllIcaReportsForStudentsByGroupForUserWithoutGroupAccess() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(-30L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        // another groups access
        assertThat(repository.findAllForStudentsByExamFilter(
                group(statewide()),
                of(-1L, -2L),
                examQueryParams)).isEmpty();

        // PII access to students but not the group
        assertThat(repository.findAllForStudentsByExamFilter(
                User.builderExt()
                        .id("userId")
                        .username("another@somewhere.com")
                        .password("redacted")
                        .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                        .build(),
                of(-1L, -2L),
                examQueryParams)).isEmpty();
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsByGroupRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(-100L, null))
                .schoolYear(1998)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);
        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-100L, -102L);
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsByUserGroupRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(new UserGroupId(null, -1000L))
                .schoolYear(1998)
                .queryPermissionType(Group)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);
        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                group(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-100L, -102L);
    }

    @Test
    public void itShouldFindAllIcaReportsForAStudentByIndividualPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                individual(districts(-10L)),
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");
    }

    @Test
    public void itShouldFindAllIcaReportsForAStudentByIndividualPiiRightsRespectingTransferAccess() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                individual(schools(-13L)),
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-100L, -102L);
    }

    @Test
    public void itShouldFindAllIcaReportsForAStudentByGroupPiiRights() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final User specificGroup = User.builderExt()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Collection<IcaSummativeReport>> reports = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-1L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(getFirstBySubject(reports.get(-1L), "Math").getAssessment().getSubjectCode()).isEqualTo("Math");
        assertThat(getFirstBySubject(reports.get(-1L), "ELA").getAssessment().getSubjectCode()).isEqualTo("ELA");
    }

    @Test
    public void itShouldFindAllIcaReportsForAStudentByGroupPiiRightsRespectingTransferAccess() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builderExt()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> withTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withTransfer))
                .containsOnly(-100L, -102L);
    }

    @Test
    public void itShouldFindAllIcaReportsForAStudentByGroupPiiRightsRespectingDisabledTransferAccess() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .assessmentTypeCode("ica")
                .disableTransferAccess(true)
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builderExt()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Map<Long, Collection<IcaSummativeReport>> withoutTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(withoutTransfer))
                .containsOnly(-102L);

        reportingSystemProperties.setTransferAccessEnabled(true);
        final Map<Long, Collection<IcaSummativeReport>> disabledTransfer = repository.findAllForStudentsByExamFilter(
                specificGroup,
                of(-100L),
                examQueryParams);

        assertThat(getExamIds(disabledTransfer))
                .containsOnly(-102L);
    }

    private Collection<Long> getExamIds(final Map<Long, Collection<IcaSummativeReport>> reports) {
        return reports.values().stream()
                .flatMap(Collection::stream)
                .map(icaReport -> icaReport.getExam().getId())
                .collect(Collectors.toSet());
    }

    private <T extends AbstractExamReport> T getFirstBySubject(final Collection<T> reports, final String subject) {
        return reports.stream().filter(report -> subject.equals(report.getSubject())).findFirst()
                .orElseThrow(() -> new IllegalStateException("Cannot find report for subject"));
    }

}
