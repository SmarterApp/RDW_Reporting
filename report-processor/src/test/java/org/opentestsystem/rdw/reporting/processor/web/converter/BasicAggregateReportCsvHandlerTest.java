package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Iterators;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpHeaders;
import org.springframework.mock.http.MockHttpOutputMessage;

import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.util.List;
import java.util.Locale;

import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV_UTF8;
import static org.springframework.http.MediaType.APPLICATION_JSON;


public abstract class BasicAggregateReportCsvHandlerTest<R extends AggregateRow> extends AggregateReportCsvHandlerTest {

    @Mock
    private MessageSource messageSource;

    @Mock
    private ReportContentResource resource;

    private MockHttpOutputMessage outputMessage;
    private byte[] reportPayload;
    private Report report;
    private BasicAggregateReportCsvHandler handler;

    protected abstract R reportRow(final Organization organization);

    protected abstract BasicAggregateReportCsvHandler createHandlerUnderTest(MessageSource messageSource, ObjectMapper objectMapper);

    protected abstract AbstractAggregateReportQuery.Builder getQueryBuilder();

    protected abstract int getHeadersCount();

    @Before
    public void setup() throws Exception {
        final ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
        outputMessage = new MockHttpOutputMessage();

        when(messageSource.getMessage(anyString(), any(Object[].class), any(Locale.class)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgument(0));

        // 1 state, 3 districts, 3 schools per district => 13 rows
        final List<R> data = newArrayList(reportRow(state()));
        final List<District> districts = newArrayList(district(), district(), district());
        districts.forEach(district -> {
            data.add(reportRow(district));
            data.add(reportRow(school(district.getId())));
            data.add(reportRow(school(district.getId())));
            data.add(reportRow(school(district.getId())));
        });
        reportPayload = objectMapper.writeValueAsBytes(data);

        final AbstractAggregateReportQuery query = getQueryBuilder().build();
        final AggregateReportRequest request = AggregateReportRequest.builder()
                .query(query)
                .build();
        report = spy(Report.builder()
                .status(ReportStatus.COMPLETED)
                .reportRequest(request)
                .label("my report")
                .build());
        when(resource.getReport()).thenAnswer(invocation -> report);
        when(resource.getInputStream()).thenAnswer(invocation -> new ByteArrayInputStream(reportPayload));

        handler = createHandlerUnderTest(messageSource, objectMapper);
    }

    @Test
    public void itShouldHandleAggregateReportPayloads() {
        assertThat(handler.accept(resource, null)).isTrue();
    }

    @Test
    public void itShouldNotHandleAggregateReportPayloadsIfJsonIsRequested() {
        assertThat(handler.accept(resource, APPLICATION_JSON)).isFalse();
    }

    @Test
    public void itShouldOnlyHandleAggregateReportPayloads() {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder().build();
        when(report.getReportRequest()).thenReturn(request);
        assertThat(handler.accept(resource, null)).isFalse();
    }

    @Test
    public void itShouldWriteHtmlHeaders() throws Exception {
        handler.writeResource(resource, outputMessage);

        final HttpHeaders headers = outputMessage.getHeaders();
        assertThat(headers.getContentType()).isEqualTo(TEXT_CSV_UTF8);
        assertThat(headers.getFirst(HttpHeaders.CONTENT_DISPOSITION)).contains("my_report");
    }

    @Test
    public void itShouldWriteJsonAsCsv() throws Exception {
        handler.writeResource(resource, outputMessage);

        try (final StringReader reader = new StringReader(outputMessage.getBodyAsString())) {
            final CSVParser parser = CSVFormat.DEFAULT
                    .withFirstRecordAsHeader()
                    .parse(reader);

            assertThat(parser.getHeaderMap()).hasSize(getHeadersCount());
            final List<CSVRecord> rows = parser.getRecords();
            assertThat(rows).hasSize(13);
        }
    }

    @Test
    public void itShouldWriteFiltersAsAttributes() throws Exception {
        final StudentFilters filters = StudentFilters.builder()
                .genderCodes(ImmutableSet.of("Male"))
                .build();

        final AggregateReportRequest request = AggregateReportRequest.builder()
                .query(getQueryBuilder()
                        .studentFilters(filters)
                        .build())
                .build();
        when(report.getReportRequest()).thenReturn(request);

        handler.writeResource(resource, outputMessage);

        try (final StringReader reader = new StringReader(outputMessage.getBodyAsString())) {
            final CSVParser parser = CSVFormat.DEFAULT
                    .withFirstRecordAsHeader()
                    .parse(reader);
            final List<CSVRecord> rows = parser.getRecords();
            final String attributes = Iterators.getLast(rows.get(0).iterator());
            assertThat(attributes).contains("ReportDate");
            assertThat(attributes).contains("Sex: Male");
        }
    }
}