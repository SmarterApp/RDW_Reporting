package org.opentestsystem.rdw.reporting.processor.multithreaded;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.multithreaded.MultiThreadedTest;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.repository.JdbcUserReportRepository;
import org.opentestsystem.rdw.reporting.processor.repository.UserReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Profile("mtTest")
@Import(JdbcUserReportRepository.class)
@Component
public class JdbcUserReportRepositoryMT extends MultiThreadedTest {
    @Autowired
    private UserReportRepository repository;

    @Override
    protected void work() {
        final UserReport a = repository.create(UserReport.builder()
                .user("test")
                .status(ReportStatus.RUNNING)
                .query(SchoolGradePrintableReportQuery.builder()
                        .schoolId(123)
                        .gradeId(3)
                        .build())
                .created(Instant.now())
                .label("label")
                .build()
        );

        final UserReport b = repository.update(
                a.copy()
                        .metadata("completed_chunk_count", "0")
                        .metadata("some other name", "value")
                        .build()
        );

        final UserReport c = repository.update(
                b.copy()
                        .metadata("new value", "0")
                        .metadata("completed_chunk_count", "0")
                        .build()
        );

        repository.completeChunk(c);
        repository.deleteByUserAndId("test", a.getId());
    }

    @Override
    protected void cleanUp() {
        final List<String> sqls = newArrayList(
                "DELETE FROM user_report_metadata",
                "DELETE FROM user_report"
        );
        for (final String sql : Lists.reverse(sqls)) {
            getJdbcTemplate().getJdbcOperations().execute(sql);
        }
    }
}
