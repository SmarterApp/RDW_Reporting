package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.springframework.context.MessageSource;

import java.util.Map;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;

@RunWith(MockitoJUnitRunner.class)
public class ClaimAggregateReportCsvHandlerWithFilteredSubgroupQueryTest extends AbstractAggregateReportCsvHandlerWithFilteredSubgroupQueryTest<ClaimRow> {

    @Override
    protected ClaimRow reportRow(final String subgroupKey, final Organization organization) {
        return super.reportRowBuilder(ClaimRow.builder(), organization)
                .dimension(Dimension.builder().type(DimensionType.Custom).code(subgroupKey).build())
                .claimCode("W-2")
                .build();
    }

    @Override
    protected ClaimAggregateReportCsvHandler createHandlerUnderTest(final MessageSource messageSource, final ObjectMapper objectMapper) {
        return new ClaimAggregateReportCsvHandler(messageSource, objectMapper);
    }

    @Override
    protected AbstractAggregateReportQuery.Builder getQueryBuilder() {
        final Map<String, StudentFilters> subgroups = newHashMap();
        subgroups.put("overall", StudentFilters.builder()
                .build());
        subgroups.put("subgroupA", StudentFilters.builder()
                .genderCodes(of("Male"))
                .build());
        subgroups.put("subgroupB", StudentFilters.builder()
                .genderCodes(of("Female"))
                .build());

        return ClaimAggregateReportQuery.builder()
                .assessmentTypeCode(ICA.code())
                .subjectCodes(of(MATH.code().toLowerCase(), Subject.ELA.code().toUpperCase()))
                .schoolYears(of(2017, 2018))
                .assessmentGradeCodes(of("01", "02", "03", "04", "05"))
                .includeState(true)
                .includeAllDistricts(false)
                .subgroups(subgroups)
                .districtIds(of(1L))
                .schoolIds(of(1L))
                .claimCodes(of("W-2"));
    }

    @Override
    protected int getHeadersCount() {
        return 15;
    }
}