package org.opentestsystem.rdw.reporting.processor.multithreaded;

import org.opentestsystem.rdw.reporting.common.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A console application that runs all available {@link MultiThreadedTest}s
 * The exist status 0 indicates a success.
 * The exist status > 0 indicates a number of failed tests
 */
@ComponentScan({
        "org.opentestsystem.rdw.reporting.processor.model.jackson",
        "org.opentestsystem.rdw.reporting.processor.model",
        "org.opentestsystem.rdw.reporting.processor.repository",
        "org.opentestsystem.rdw.reporting.processor.repository.impl",
        "org.opentestsystem.rdw.reporting.common.model",
        "org.opentestsystem.rdw.reporting.common.repository",
        "org.opentestsystem.rdw.reporting.common.jdbc",
        "org.opentestsystem.rdw.reporting.processor.multithreaded"
})
@Import({YamlPropertiesConfigurator.class,
        DataSourceAutoConfiguration.class,
        JdbcTemplateAutoConfiguration.class,
        DataSourceConfiguration.class,
        MultiThreadedTestConfiguration.class})
@EnableTransactionManagement
public class MultiThreadedApplicationTest {
    private static final Logger logger = LoggerFactory.getLogger(MultiThreadedApplicationTest.class);
    private final static int TestThreadCount = 10;
    private final static int expectedTests = 1;

    public static void main(final String[] args) throws Exception {
        final ConfigurableApplicationContext ctx =
                new SpringApplicationBuilder(MultiThreadedApplicationTest.class)
                        .profiles("test", "mtTest")
                        .web(false)
                        .run(args);

        final List<Integer> failed = newArrayList();
        final String[] beans = ctx.getBeanNamesForType(MultiThreadedTest.class);

        if (beans.length != expectedTests) {
            logger.error("Found {} beans, expected {}", beans.length, expectedTests);
            System.exit(1);
        }

        final ExecutorService pool = Executors.newFixedThreadPool(TestThreadCount);
        for (int i = 0; i < 20; i++) {
            for (final String test : beans) {
                logger.info("Running test for [" + test + "] with thread count =" + TestThreadCount);
                final boolean passed = ctx.getBean(test, MultiThreadedTest.class).run(pool, TestThreadCount);
                logger.info(test + " " + (passed ? "passed" : "failed"));

                failed.add(passed ? 0 : 1);
            }
        }

        System.exit(failed.stream().mapToInt(Integer::intValue).sum());
    }
}