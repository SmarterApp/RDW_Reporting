package org.opentestsystem.rdw.reporting.processor.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.processor.MockBuilder.report;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(
        classes = {
                ITDataSourceConfiguration.class,
                JdbcReportRepository.class,
                JacksonAutoConfiguration.class
        })
public class JdbcReportRepositoryIT {

    @Autowired
    private JdbcReportRepository repository;

    @Test
    public void itShouldInsertAReport() throws Exception {
        final Report report = report();
        assertThat(report.getId()).isNull();

        final Report inserted = repository.insert(report);
        assertThat(inserted.getId()).isGreaterThan(0);
        assertThat(inserted.getUser()).isEqualTo(report.getUser());
        assertThat(inserted.getLabel()).isEqualTo(report.getLabel());
        assertThat(inserted.getCreated()).isEqualTo(report.getCreated());
        assertThat(inserted.getReportResourceUri()).isEqualTo(report.getReportResourceUri());
        assertThat(inserted.getStatus()).isEqualTo(report.getStatus());
        assertThat(inserted.getReportRequest().getSchoolYear()).isEqualTo(report.getReportRequest().getSchoolYear());
    }

    @Test
    public void itShouldUpdateAReport() throws Exception {
        final Report original = repository.insert(report());
        final Report modified = Report.builder()
                .copy(original)
                .label("Some New Label")
                .build();

        final Report updated = repository.update(modified);
        assertThat(updated.getLabel()).isEqualTo(modified.getLabel());

        final Report fetched = repository.findById(original.getId());
        assertThat(fetched.getLabel()).isEqualTo(modified.getLabel());
    }

    @Test
    public void itShouldFindOneById() throws Exception {
        final Report original = repository.insert(report());

        final Report fetched = repository.findById(original.getId());
        assertThat(fetched.getId()).isEqualTo(original.getId());
        assertThat(fetched.getCreated()).isEqualTo(original.getCreated());
        assertThat(fetched.getLabel()).isEqualTo(original.getLabel());
        assertThat(fetched.getUser()).isEqualTo(original.getUser());
        assertThat(fetched.getStatus()).isEqualTo(original.getStatus());
        assertThat(fetched.getReportResourceUri()).isEqualTo(original.getReportResourceUri());
        assertThat(fetched.getReportRequest().getSchoolYear()).isEqualTo(original.getReportRequest().getSchoolYear());
    }

    @Test
    public void itShouldHandleAMissingReportById() throws Exception {
        assertThat(repository.findById(123L)).isNull();
    }

    @Test
    public void itShouldFindAllReportsForAUser() throws Exception {
        final Report reportA = repository.insert(report());
        final Report reportB = repository.insert(report());
        repository.insert(Report.builder()
                .copy(report())
                .user("another user")
                .build());

        final List<Report> userReports = repository.findByUserAndIds(reportA.getUser(), of());

        assertThat(userReports.stream().map(Report::getId))
                .hasSize(2)
                .containsOnly(reportA.getId(), reportB.getId());
    }

    @Test
    public void itShouldFindAllReportsForAUserFilteredByIds() throws Exception {
        final Report reportA = repository.insert(report());
        final Report reportB = repository.insert(report());
        repository.insert(report());
        repository.insert(Report.builder()
                .copy(report())
                .user("another user")
                .build());

        final List<Report> userReports = repository
                .findByUserAndIds(reportA.getUser(), of(reportA.getId(), reportB.getId()));

        assertThat(userReports.stream().map(Report::getId))
                .hasSize(2)
                .containsOnly(reportA.getId(), reportB.getId());
    }

    @Test
    public void itShouldHandleNoReportsForAUser() throws Exception {
        assertThat(repository.findByUserAndIds("user", of())).isEmpty();
    }

    @Test
    public void itShouldMarkChunksCompleted() {
        Report report = Report.builder()
                .copy(report())
                .totalChunkCount(10)
                .completeChunkCount(0)
                .build();

        report = repository.insert(report);
        report = repository.completeChunk(report);
        assertThat(report.getCompleteChunkCount()).isEqualTo(1);

        report = repository.completeChunk(report);
        assertThat(report.getCompleteChunkCount()).isEqualTo(2);
    }
}