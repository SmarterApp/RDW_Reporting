package org.opentestsystem.rdw.reporting.processor.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.common.model.jackson.AggregateReportModule;
import org.opentestsystem.rdw.reporting.common.test.support.ReportQueries;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExamReportOrder;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.PrintOptions;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.service.ExamReportService;
import org.opentestsystem.rdw.reporting.processor.web.converter.ReportHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URI;
import java.time.Instant;
import java.util.Locale;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.CompletedChunk;
import static org.opentestsystem.rdw.reporting.processor.stream.FetchStudents.TotalChunk;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ReportController.class)
@Import({
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        ReportControllerIT.ObjectMapperConfiguration.class
})
public class ReportControllerIT {

    private static final StudentExamReportRequest StudentRequest = StudentExamReportRequest.builder()
            .studentId(1L)
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final SchoolGradeExamReportRequest SchoolGradeRequest = SchoolGradeExamReportRequest.builder()
            .schoolId(1L)
            .gradeId(2)
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .order(ExamReportOrder.STUDENT_NAME)
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final GroupExamReportRequest GroupRequest = GroupExamReportRequest.builder()
            .groupId(1L)
            .subjectCode("Math")
            .schoolYear(2)
            .assessmentTypeCode("ica")
            .order(ExamReportOrder.STUDENT_NAME)
            .language(new Locale("eng"))
            .options(new PrintOptions(false))
            .build();

    private static final AggregateReportRequest AggregateRequest = AggregateReportRequest.builder()
            .query(ReportQueries.basicAggregateQuery().build())
            .name("My Report")
            .build();

    @Autowired
    private ObjectMapper mapper;

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ExamReportService service;

    @MockBean
    private ReportHandler reportHandler;

    @MockBean
    private ReportResourceMapper reportMapper;

    private final User user = User.builder()
            .id("testUser")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void createStudentReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(StudentExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/students/1/report")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(StudentRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createStudentReportShouldReturnHandle() throws Exception {

        when(service.createReport(any(User.class), any(StudentExamReportRequest.class)))
                .thenReturn(Report.builder()
                        .id(1L)
                        .status(ReportStatus.PENDING)
                        .reportResourceUri(URI.create("/somewhere.pdf"))
                        .metadata(CompletedChunk, "0")
                        .metadata(TotalChunk, "123")
                        .user("my-user")
                        .label("my-label")
                        .created(Instant.now())
                        .reportRequest(StudentRequest)
                        .build());

        mvc.perform(post("/students/1/report")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(StudentRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.*", hasSize(10)))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.status").value("PENDING"))
                .andExpect(jsonPath("$.label").value("my-label"))
                .andExpect(jsonPath("$.reportType").value("Student"))
                .andExpect(jsonPath("$.assessmentTypeCode").value("ica"))
                .andExpect(jsonPath("$.subjectCodes", contains("Math")))
                .andExpect(jsonPath("$.schoolYears", contains(2)))
                .andExpect(jsonPath("$.created").isNotEmpty())
                .andExpect(jsonPath("$.request").isNotEmpty())
                .andExpect(jsonPath("$.metadata.completed_chunk_count").value("0"))
                .andExpect(jsonPath("$.metadata.total_chunk_count").value("123"));

    }

    @Test
    public void createSchoolGradeReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(SchoolGradeExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/schools/1/assessmentGrades/2/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(SchoolGradeRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createSchoolGradeReportShouldReturnReport() throws Exception {

        when(service.createReport(any(User.class), any(SchoolGradeExamReportRequest.class)))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/schools/1/assessmentGrades/2/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(SchoolGradeRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));
    }

    @Test
    public void createGroupReportShouldSend404WhenServiceThrowsException() throws Exception {
        when(service.createReport(any(User.class), any(GroupExamReportRequest.class)))
                .thenThrow(new NoSuchElementException());

        mvc.perform(post("/groups/1/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(GroupRequest))
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void createGroupReportShouldReturnHandle() throws Exception {
        final ArgumentCaptor<GroupExamReportRequest> groupRequestCaptor = ArgumentCaptor.forClass(GroupExamReportRequest.class);
        when(service.createReport(any(User.class), groupRequestCaptor.capture()))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/groups/1/reports")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(GroupRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));

        assertThat(groupRequestCaptor.getValue()).isEqualToComparingFieldByFieldRecursively(GroupRequest);
    }

    @Test
    public void createAggregateReportShouldReturnHandle() throws Exception {
        final ArgumentCaptor<AggregateReportRequest> aggregateCaptor = ArgumentCaptor.forClass(AggregateReportRequest.class);
        when(service.createReport(any(User.class), aggregateCaptor.capture()))
                .thenReturn(Report.builder().id(1L).build());

        mvc.perform(post("/aggregate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(AggregateRequest))
                .with(user(user)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L));

        assertThat(aggregateCaptor.getValue()).isEqualToComparingFieldByFieldRecursively(AggregateRequest);
    }

    static class ObjectMapperConfiguration {

        @Bean
        public Jackson2ObjectMapperBuilderCustomizer customizeObjectMapper() {
            return builder -> builder
                    .failOnUnknownProperties(false)
                    .modulesToInstall(new GuavaModule(), new AggregateReportModule());
        }
    }
}