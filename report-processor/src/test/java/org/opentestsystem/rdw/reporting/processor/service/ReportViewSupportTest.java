package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.processor.model.IcaSummativeReport;
import org.opentestsystem.rdw.reporting.processor.model.ScaleScoreView;
import org.springframework.context.MessageSource;

import java.util.Arrays;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class ReportViewSupportTest {

    private final Assessment simpleICA = Assessment.builder()
            .type(AssessmentType.ICA)
            .cutPoints(newArrayList(2000, 2200, 2400, 2600, 2800))
            .build();

    private final Assessment simpleIAB = Assessment.builder()
            .type(AssessmentType.IAB)
            .cutPoints(newArrayList(2000, 0, 2450, 0, 2900))
            .build();

    private final Assessment simpleIAB2 = Assessment.builder()
            .type(AssessmentType.IAB)
            .cutPoints(newArrayList(100, 0, 400, 0, 700))
            .build();


    private ReportViewSupport support;

    @Before
    public void before() {
        final MessageSource messageSource = mock(MessageSource.class);
        this.support = new ReportViewSupport(messageSource);
    }

    @Test
    public void getLastTwoDigitsShouldReturnLastTwoDigits() {
        assertThat(support.getLastTwoDigits(1997)).isEqualTo("97");
    }

    @Test
    public void getLastTwoDigitsShouldReturnGivenValueIfLengthIsLessThanTwo() {
        assertThat(support.getLastTwoDigits(7)).isEqualTo("7");
    }

    @Test
    public void getLastTwoDigitsShouldReturnGivenValueIfLengthIsTwo() {
        assertThat(support.getLastTwoDigits(17)).isEqualTo("17");
    }

    @Test
    public void getScaleScoreViewShouldEnforcePositionMinimumOfOne() {
        assertThat(support.getScaleScoreView(exam(-100), simpleIAB).getPosition()).isEqualTo(1);
    }

    @Test
    public void getScaleScoreViewShouldEnforcePositionMaximumOf100() {
        assertThat(support.getScaleScoreView(exam(10000), simpleIAB).getPosition()).isEqualTo(100);
    }

    @Test
    public void getScaleScoreViewShouldReturn3LevelsForIAB() {
        assertThat(support.getScaleScoreView(exam(), simpleIAB).getLevels()).hasSize(3);
    }

    @Test
    public void getScaleScoreViewShouldReturn4LevelsForICA() {
        assertThat(support.getScaleScoreView(exam(), simpleICA).getLevels()).hasSize(4);
    }

    @Test
    public void getScaleScoreViewShouldSetPositionCorrectlyWhenMinimum() {
        assertThat(support.getScaleScoreView(exam(simpleIAB.getCutPoints().get(0)), simpleIAB).getPosition()).isEqualTo(1);
    }

    @Test
    public void getScaleScoreViewShouldSetPositionCorrectlyWhenMaximum() {
        assertThat(support.getScaleScoreView(exam(simpleIAB.getCutPoints().get(4)), simpleIAB).getPosition()).isEqualTo(100);
    }

    @Test
    public void getScaleScoreViewShouldSetPositionCorrectly() {
        assertThat(support.getScaleScoreView(exam(2400), simpleICA).getPosition()).isEqualTo(50);
    }

    @Test
    public void getScaleScoreViewShouldReturnCorrectLevelsForSimpleICA() {
        assertThat(support.getScaleScoreView(exam(0, 0), simpleICA).getLevels())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        level(0, 25),
                        level(25, 25),
                        level(50, 25),
                        level(75, 25)
                );
    }

    @Test
    public void getScaleScoreViewShouldReturnCorrectLevelsForSimpleIAB() {
        assertThat(support.getScaleScoreView(exam(0, 100), simpleIAB).getLevels())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        level(0, 33),
                        level(33, 33),
                        level(66, 34)
                );
    }

    @Test
    public void getScaleScoreViewShouldReturnCorrectLevelsForHighStdErrIAB() {
        assertThat(support.getScaleScoreView(exam(100, 200), simpleIAB2).getLevels())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        level(0, 1),
                        level(1, 98),
                        level(99, 1)
                );
    }

    @Test
    public void getClaimCodeComparatorShouldSortWritingLast() {
        // this is the normal display order of ELA claims
        final IcaSummativeReport elaReport = IcaSummativeReport.builder()
                .subjectDefinition(SubjectDefinition.builder()
                        .scorableClaims(ImmutableList.of("SOCK_R", "2-W", "SOCK_LS", "4-CR"))
                        .build())
                .build();

        final List<String> claims = Arrays.asList("2-W", "4-CR", "SOCK_R", "SOCK_LS");
        claims.sort(support.getClaimCodeComparator(elaReport));

        assertThat(claims).containsExactly("SOCK_R", "SOCK_LS", "4-CR", "2-W");
    }

    @Test
    public void getClaimCodeComparatorShouldBeOkayIfWritingClaimIsNotThere() {
        // this is the normal display order of Math claims
        final IcaSummativeReport mathReport = IcaSummativeReport.builder()
                .subjectDefinition(SubjectDefinition.builder()
                        .scorableClaims(ImmutableList.of("1", "SOCK_2", "3"))
                        .build())
                .build();

        final List<String> claims = Arrays.asList("SOCK_2", "3", "1");
        claims.sort(support.getClaimCodeComparator(mathReport));

        assertThat(claims).containsExactly("1", "SOCK_2", "3");
    }

    /*
        Support methods
     */

    private Exam exam(final int scaleScore, final double standardError) {
        return Exam.builder()
                .scaleScore(ScaleScore.builder()
                        .value(scaleScore)
                        .standardError(standardError)
                        .build()
                )
                .build();
    }

    private Exam exam(final int scaleScore) {
        return exam(scaleScore, 0);
    }

    private Exam exam() {
        return exam(0, 0);
    }

    private ScaleScoreView.Level level(final int position, final int width) {
        return new ScaleScoreView.Level(position, width);
    }

}
