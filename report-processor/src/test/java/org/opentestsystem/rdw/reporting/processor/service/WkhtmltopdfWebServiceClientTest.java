package org.opentestsystem.rdw.reporting.processor.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Charsets;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.processor.model.Request;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.util.StreamUtils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.http.MediaType.APPLICATION_JSON;

@RunWith(MockitoJUnitRunner.class)
public class WkhtmltopdfWebServiceClientTest {

    @Mock
    private ClientHttpRequestFactory requestFactory;

    @Mock
    private ClientHttpRequest request;

    @Mock
    private ClientHttpResponse response;

    @Mock
    private ObjectMapper objectMapper;

    private WkhtmltopdfWebServiceClient client;

    @Before
    public void createClient() throws Exception {
        doAnswer(invocation -> {
            invocation.getArgumentAt(0, OutputStream.class)
                    .write(invocation.getArgumentAt(1, Object.class).toString().getBytes());
            return null;
        }).when(objectMapper).writeValue(any(OutputStream.class), anyObject());

        final String endpoint = "http://wkhtmltopdf";
        final URI uri = URI.create(endpoint);
        when(requestFactory.createRequest(eq(uri), eq(HttpMethod.POST)))
                .thenReturn(request);

        final HttpHeaders headers = new HttpHeaders();
        when(request.getHeaders()).thenReturn(headers);
        when(request.execute()).thenReturn(response);

        when(response.getStatusCode()).thenReturn(HttpStatus.OK);

        client = new WkhtmltopdfWebServiceClient(requestFactory, endpoint, objectMapper);
    }

    @Test
    public void itShouldPostRequest() throws Exception {
        final Request requestBody = new Request("html".getBytes());

        try (final ByteArrayOutputStream requestStream = new ByteArrayOutputStream();
             final ByteArrayInputStream responseStream = new ByteArrayInputStream("pdf".getBytes())) {
            when(request.getBody()).thenReturn(requestStream);
            when(response.getBody()).thenReturn(responseStream);

            try (final InputStream response = client.toPdf(requestBody)) {
                assertThat(StreamUtils.copyToString(response, Charsets.UTF_8)).isEqualTo("pdf");
            }
        }

        verify(objectMapper).writeValue(any(OutputStream.class), eq(requestBody));
        assertThat(request.getHeaders().getContentType()).isEqualTo(APPLICATION_JSON);
    }

    @Test
    public void itShouldDealWithBadResponse() throws Exception {
        final Request requestBody = new Request("html".getBytes());

        try (final ByteArrayOutputStream requestStream = new ByteArrayOutputStream();
             final ByteArrayInputStream responseStream = new ByteArrayInputStream("Some Error".getBytes())) {
            when(request.getBody()).thenReturn(requestStream);
            when(response.getBody()).thenReturn(responseStream);
            when(response.getStatusCode()).thenReturn(HttpStatus.BAD_REQUEST);
            try {
                client.toPdf(requestBody);
            } catch (final RuntimeException e) {
                assertThat(e.getMessage()).contains("Some Error");
            }
        }
    }
}