package org.opentestsystem.rdw.reporting.processor.status;

import org.assertj.core.api.Assertions;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.reporting.processor.model.Request;
import org.opentestsystem.rdw.reporting.processor.service.WkhtmltopdfWebServiceClient;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Map;

import static com.google.common.base.Charsets.UTF_8;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class WkhtmltopdfStatusIndicatorTest {

    private WkhtmltopdfWebServiceClient client;
    private WkhtmltopdfStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        client = mock(WkhtmltopdfWebServiceClient.class);

        statusIndicator = new WkhtmltopdfStatusIndicator(client);
    }

    @Test
    public void itShouldHaveAName() {
        Assertions.assertThat(statusIndicator.name()).isEqualTo("wkhtmltopdf-service");
    }

    @Test
    public void itShouldBeReadDatabaseLevel() {
        Assertions.assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        Assertions.assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() throws Exception {
        try (final InputStream response = new ByteArrayInputStream("OK".getBytes(UTF_8))) {
            when(client.toPdf(any(Request.class))).thenReturn(response);

            final Status status = statusIndicator.status(5);
            assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
            final Map<String, Object> details = status.getDetails();
            assertThat(details).hasSize(1);
            assertThat(details.containsKey("responseTime"));
        }
    }

    @Test
    public void itShouldReturnFailedStatus() throws Exception {
        when(client.toPdf(any(Request.class))).thenThrow(new RuntimeException("test fail"));

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
        final Map<String, Object> details = status.getDetails();
        assertThat(details).hasSize(2);
        assertThat(details.containsKey("responseTime"));
        assertThat(details.get("message")).isEqualTo("test fail");
    }
}