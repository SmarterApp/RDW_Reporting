package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultReportRemovalServiceTest {
    @InjectMocks
    private DefaultReportRemovalService removeReportService;
    @Mock
    private ReportService reportService;
    @Mock
    private ReportContentService reportContentService;
    @Mock
    private Report report;

    @Test
    public void itShouldRemoveOldReports() {
        List<Report> foundReports = Collections.singletonList(report);
        Set<Report> foundReportSet = newHashSet(foundReports);
        when(reportService.findAllOlderThanNumberOfDays(30)).thenReturn(foundReports);
        when(reportContentService.deleteContents(foundReports)).thenReturn(foundReportSet);
        when(report.getId()).thenReturn(123L);
        removeReportService.deleteOldReports(30);
        verify(reportService).delete(newHashSet(123L));
    }

    @Test
    public void itShouldRemoveFromDatabaseOnlyWhichHasBeenRemovedFromArchiveService() {
        List<Report> foundReports = Collections.singletonList(report);
        Set<Report> foundReportSet = newHashSet(foundReports);
        when(reportService.findAllOlderThanNumberOfDays(30)).thenReturn(foundReports);
        when(reportContentService.deleteContents(foundReportSet)).thenReturn(new HashSet<>());
        when(report.getId()).thenReturn(123L);
        removeReportService.deleteOldReports(30);
        verify(reportService).delete(new HashSet<>());
    }

}
