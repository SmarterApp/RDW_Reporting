package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.stream.FetchStudentsSource;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;

import java.time.Instant;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;
import static org.opentestsystem.rdw.reporting.common.security.PermissionScope.STATEWIDE;
import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.IndividualPiiRead;

@RunWith(MockitoJUnitRunner.class)
public class SpringStreamReportGeneratorTest {

    @Mock
    private ReportService reportService;

    @Mock
    private FetchStudentsSource source;

    @Captor
    private ArgumentCaptor<Message<ReportRequestMessage>> messageCaptor;

    private SpringStreamReportGenerator generator;

    @Before
    public void setup() {
        final MessageChannel channel = mock(MessageChannel.class);
        when(source.fetchStudents()).thenReturn(channel);

        generator = new SpringStreamReportGenerator(reportService, source);
    }

    @Test
    public void itShouldInsertAReportRecordAndPublishAReportRequestMessage() throws Exception {
        final BatchExamReportRequestHolder requestHolder = requestHolder();

        when(reportService.create(any(Report.class)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgumentAt(0, Report.class)
                        .copy()
                        .id(456L)
                        .build());

        final Report report = generator.generateReport(requestHolder);
        assertThat(report.getReportRequest()).isEqualTo(requestHolder.getRequest());
        assertThat(report.getCreated()).isLessThanOrEqualTo(Instant.now());
        assertThat(report.getUser()).isEqualTo(requestHolder.getUser());
        assertThat(report.getLabel()).isEqualTo(requestHolder.getLabel());
        assertThat(report.getStatus()).isEqualTo(PENDING);

        verify(source.fetchStudents()).send(messageCaptor.capture());
        final ReportRequestMessage payload = messageCaptor.getValue().getPayload();
        assertThat(payload.getReportId()).isEqualTo(report.getId());
        assertThat(payload.getUserPermissions()).isEqualTo(requestHolder.getUserPermissions());
    }

    @Test
    public void itShouldFailAReportIfThereIsAnException() throws Exception {
        final BatchExamReportRequestHolder requestHolder = requestHolder();

        when(source.fetchStudents().send(any(Message.class)))
                .thenThrow(new RuntimeException("Bad Juju"));

        when(reportService.create(any(Report.class)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgumentAt(0, Report.class)
                        .copy()
                        .id(456L)
                        .build());

        try {
            generator.generateReport(requestHolder);
        } catch (final Exception ignore) {}

        final ArgumentCaptor<Report> reportCaptor = ArgumentCaptor.forClass(Report.class);
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    private BatchExamReportRequestHolder requestHolder() {
        final SchoolGradeExamReportRequest reportRequest = SchoolGradeExamReportRequest.builder()
                .schoolId(123L)
                .gradeId(7)
                .build();

        final UserPermissions userPermissions = UserPermissions.builder()
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, STATEWIDE)))
                .groupsById(Collections.emptyMap())
                .build();

        return new BatchExamReportRequestHolder(
                reportRequest,
                userPermissions,
                "user",
                "label"
        );
    }

}