package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.AbstractPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ReportRequestMessage;
import org.opentestsystem.rdw.reporting.processor.model.UserReport;
import org.opentestsystem.rdw.reporting.processor.stream.AggregateReportRequestProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.ExportExamsProcessor;
import org.opentestsystem.rdw.reporting.processor.stream.PdfReportProcessor;
import org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;

@RunWith(MockitoJUnitRunner.class)
public class SpringStreamReportGeneratorTest {

    @Mock
    private UserReportService userReportService;

    @Mock
    private PdfReportProcessor pdfSource;

    @Mock
    private ExportExamsProcessor exportSource;

    @Mock
    private AggregateReportRequestProcessor aggregateReportsSource;

    @Mock
    private MessageSecurityService messageSecurityService;

    @Captor
    private ArgumentCaptor<Message<ReportRequestMessage>> messageCaptor;

    private SpringStreamReportGenerator generator;

    @Before
    public void setup() {
        final MessageChannel channel = mock(MessageChannel.class);
        when(pdfSource.fetchStudentsOut()).thenReturn(channel);

        when(messageSecurityService.withUser(any(), any()))
                .thenAnswer(invocation -> invocation.getArgument(0));

        generator = new SpringStreamReportGenerator(userReportService, exportSource, pdfSource, aggregateReportsSource, messageSecurityService);
    }

    @Test
    public void itShouldInsertAReportRecordAndPublishAReportRequestMessage() {
        final AbstractPrintableReportQuery query = query();
        final User user = UserTestBuilder.user();

        when(userReportService.create(any(UserReport.class)))
                .thenAnswer(invocationOnMock -> {
                    final UserReport report = invocationOnMock.getArgument(0);
                    return report
                            .copy()
                            .id(456L)
                            .build();
                });

        final UserReport report = generator.generateReport(query, user);
        assertThat(report.getQuery()).isEqualTo(query);
        assertThat(report.getCreated()).isBeforeOrEqualTo(Instant.now());
        assertThat(report.getUser()).isEqualTo(user.getUsername());
        assertThat(report.getLabel()).isEqualTo(query.getName());
        assertThat(report.getStatus()).isEqualTo(PENDING);

        verify(pdfSource.fetchStudentsOut()).send(messageCaptor.capture());
        final ReportRequestMessage payload = messageCaptor.getValue().getPayload();
        assertThat(payload.getReportId()).isEqualTo(report.getId());
    }

    @Test
    public void itShouldFailAReportIfThereIsAnException() {
        when(pdfSource.fetchStudentsOut().send(any(Message.class)))
                .thenThrow(new RuntimeException("Bad Juju"));

        when(userReportService.create(any(UserReport.class)))
                .thenAnswer(invocationOnMock -> {
                    final UserReport report = invocationOnMock.getArgument(0);
                    return report
                            .copy()
                            .id(456L)
                            .build();
                });

        try {
            generator.generateReport(query(), UserTestBuilder.user());
        } catch (final Exception ignore) {}

        final ArgumentCaptor<UserReport> reportCaptor = ArgumentCaptor.forClass(UserReport.class);
        verify(userReportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    private SchoolGradePrintableReportQuery query() {
        return SchoolGradePrintableReportQuery.builder()
                .schoolId(123L)
                .gradeId(7)
                .name("label")
                .build();
    }
}
