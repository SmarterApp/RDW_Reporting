package org.opentestsystem.rdw.reporting.processor.requesthandler;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class SchoolGradeExamQueryParamsParserTest {

    private SchoolGradeExamQueryParamsParser parser;

    @Before
    public void setup() {
        parser = new SchoolGradeExamQueryParamsParser();
    }

    @Test
    public void itShouldAcceptGroupExamReportRequests() {
        assertThat(parser.accept(mock(AbstractExamReportRequest.class))).isFalse();
        assertThat(parser.accept(mock(SchoolGradeExamReportRequest.class))).isTrue();
    }

    @Test
    public void itShouldCreateAnExamQueryParams() {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .schoolYear(1997)
                .subjectCode("ELA")
                .schoolId(123L)
                .gradeId(4)
                .assessmentTypeCode("iab")
                .build();
        final ExamQueryParams params = parser.parseQueryParams(request);

        assertThat(params.getAssessmentTypeCode()).isEqualTo("iab");
        assertThat(params.getGradeId()).isEqualTo(4);
        assertThat(params.getSchoolId()).isEqualTo(123L);
        assertThat(params.getSubjectCode()).isEqualTo("ELA");
        assertThat(params.getSchoolYear()).isEqualTo(1997);
    }
}