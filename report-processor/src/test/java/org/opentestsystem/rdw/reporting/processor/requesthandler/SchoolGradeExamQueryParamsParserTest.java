package org.opentestsystem.rdw.reporting.processor.requesthandler;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.codedentity.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.codedentity.SubjectService;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;

public class SchoolGradeExamQueryParamsParserTest {

    private AssessmentTypeService assessmentTypeService;
    private SubjectService subjectService;
    private SchoolGradeExamQueryParamsParser parser;

    @Before
    public void setup() {
        assessmentTypeService = mock(AssessmentTypeService.class);
        subjectService = mock(SubjectService.class);
        when(assessmentTypeService.getIdsByCode()).thenReturn(ImmutableMap.of("a1", 1));
        when(subjectService.getIdsByCode()).thenReturn(ImmutableMap.of("s1", 1));
        parser = new SchoolGradeExamQueryParamsParser(assessmentTypeService, subjectService);
    }

    @Test
    public void itShouldAcceptGroupExamReportRequests() {
        assertThat(parser.accept(mock(AbstractExamReportRequest.class))).isFalse();
        assertThat(parser.accept(mock(SchoolGradeExamReportRequest.class))).isTrue();
    }

    @Test
    public void itShouldCreateAnExamQueryParams() {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .schoolYear(1997)
                .subjectCode("s1")
                .schoolId(123L)
                .gradeId(4)
                .assessmentTypeCode("a1")
                .build();

        final ExamQueryParams expected = ExamQueryParams.builder()
                .schoolId(request.getSchoolId())
                .gradeId(request.getGradeId())
                .assessmentTypeCode(request.getAssessmentTypeCode())
                .assessmentTypeId(1)
                .subjectCode(request.getSubjectCode())
                .subjectId(1)
                .schoolYear(request.getSchoolYear())
                .queryPermissionType(Individual)
                .build();

        assertThat(parser.parseQueryParams(request)).isEqualToComparingFieldByField(expected);
    }
}