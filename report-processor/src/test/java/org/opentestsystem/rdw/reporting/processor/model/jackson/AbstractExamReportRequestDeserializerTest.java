package org.opentestsystem.rdw.reporting.processor.model.jackson;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.model.jackson.AggregateReportModule;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.AggregateReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;

import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;

import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static junit.framework.TestCase.fail;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.UserGroupType.Admin;

public class AbstractExamReportRequestDeserializerTest {

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new ObjectMapper();
        objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        objectMapper.registerModules(new GuavaModule(), new ReportModule(), new AggregateReportModule());
    }

    @Test
    public void itShouldRoundTripASchoolGradeRequest() throws Exception {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .gradeId(11)
                .schoolId(123)
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final SchoolGradeExamReportRequest deserialized = (SchoolGradeExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getGradeId()).isEqualTo(11);
        assertThat(deserialized.getSchoolId()).isEqualTo(123);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

    @Test
    public void itShouldRoundTripAGroupRequest() throws Exception {
        final GroupExamReportRequest request = GroupExamReportRequest.builder()
                .groupId(new UserGroupId(123L, null))
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final GroupExamReportRequest deserialized = (GroupExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
        assertThat(deserialized.getGroupId().getId()).isEqualTo(123);
        assertThat(deserialized.getGroupId().getType()).isEqualTo(Admin);
    }

    @Test
    public void itShouldRoundTripAStudentRequest() throws Exception {
        final StudentExamReportRequest request = StudentExamReportRequest.builder()
                .studentId(123)
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final StudentExamReportRequest deserialized = (StudentExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getStudentId()).isEqualTo(123);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

    @Test
    public void itShouldRoundTripAnExamExportRequest() throws Exception {
        final ExportExamReportRequest request = ExportExamReportRequest.builder()
                .districtIds(ImmutableSet.of(123L, 456L))
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final ExportExamReportRequest deserialized = (ExportExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getDistrictIds()).containsOnly(123L, 456L);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

    @Test
    public void itShouldRoundTripAnAggregateReportRequest() throws Exception {
        final StudentFilters filters = StudentFilters.builder()
                .genderCodes(newHashSet("Gender"))
                .ethnicityCodes(newHashSet("Ethnicity"))
                .lepCodes(newHashSet("LEP"))
                .migrantStatusCodes(newHashSet("Migrant"))
                .section504Codes(newHashSet("504"))
                .iepCodes(newHashSet("IEP"))
                .economicDisadvantageCodes(newHashSet("Eco"))
                .build();

        final CustomAggregateReportQuery query = CustomAggregateReportQuery.builder()
                .assessmentTypeCode("AssessmentType")
                .subjectCodes(newHashSet("ELA"))
                .schoolYears(newHashSet(1999))
                .assessmentGradeCodes(newHashSet("Grades"))
                .includeState(true)
                .includeAllDistricts(true)
                .includeAllSchoolsOfDistricts(true)
                .includeAllDistrictsOfSchools(true)
                .districtIds(newHashSet(123L))
                .schoolIds(newHashSet(456L))
                .completenessCodes(newHashSet("Completeness"))
                .administrativeConditionCodes(newHashSet("AdminCond"))
                .valueDisplayType("ValueDisplay")
                .achievementLevelDisplayType("AchievementDisplay")
                .columnOrder(newArrayList("ColumnOrder"))
                .dimensionTypes(newHashSet(Gender))
                .studentFilters(filters)
                .build();

        final AggregateReportRequest request = AggregateReportRequest.builder()
                .query(query)
                .name("My Report")
                .language(Locale.US)
                .build();

        final String json = objectMapper.writeValueAsString(request);
        final AggregateReportRequest deserialized = objectMapper.readValue(json, AggregateReportRequest.class);
        assertThat(deserialized.getQuery()).isEqualToComparingFieldByFieldRecursively(request.getQuery());
    }

    @Test
    public void itShouldDeserializeALegacyAggregateReportRequestAnAggregateReportRequest() {
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-aggregate-report-request-1_2.json");
        assertThat(deserialized).isInstanceOf(AggregateReportRequest.class);

        final AggregateReportRequest request = (AggregateReportRequest) deserialized;
        assertThat(request.getSchoolYear()).isEqualTo(2018);
        assertThat(request.getName()).isEqualTo("Custom Aggregate Report");

        final CustomAggregateReportQuery query = (CustomAggregateReportQuery) request.getQuery();
        assertThat(query.getAssessmentTypeCode()).isEqualTo("sum");
        assertThat(query.getSubjectCodes()).containsOnly("ELA", "Math");
        assertThat(query.getSchoolYears()).containsOnly(2018);
        assertThat(query.getAssessmentGradeCodes()).containsOnly("06");
        assertThat(query.isIncludeState()).isTrue();
        assertThat(query.isIncludeAllDistricts()).isFalse();
        assertThat(query.isIncludeAllSchoolsOfDistricts()).isFalse();
        assertThat(query.isIncludeAllDistrictsOfSchools()).isTrue();
        assertThat(query.getDistrictIds()).isEmpty();
        assertThat(query.getSchoolIds()).isEmpty();
        assertThat(query.getCompletenessCodes()).containsOnly("Complete");
        assertThat(query.getAdministrativeConditionCodes()).containsOnly("Valid");
        assertThat(query.getDimensionTypes()).containsOnly(Gender, Ethnicity);
        assertThat(query.getValueDisplayType()).isEqualTo("Percent");
        assertThat(query.getAchievementLevelDisplayType()).isEqualTo("Separate");
        assertThat(query.getColumnOrder()).containsExactly(
                "organization",
                "assessmentGrade",
                "schoolYear",
                "dimension");

        final StudentFilters filters = query.getStudentFilters();
        assertThat(filters.getGenderCodes()).containsOnly("Male");
        assertThat(filters.getEthnicityCodes()).containsOnly("White", "Asian");
        assertThat(filters.getLepCodes()).isEmpty();
        assertThat(filters.getMigrantStatusCodes()).containsOnly("yes");
        assertThat(filters.getSection504Codes()).containsOnly("yes");
        assertThat(filters.getIepCodes()).containsOnly("no");
        assertThat(filters.getEconomicDisadvantageCodes()).containsOnly("no");
    }

    @Test
    public void itShouldSupportV1_2AbstractExamReportRequests() {
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-school-group-report-request-1_2.json");
        assertThat(deserialized).isInstanceOf(SchoolGradeExamReportRequest.class);
        assertThat(deserialized).isEqualToComparingOnlyGivenFields(
                SchoolGradeExamReportRequest.builder()
                        .assessmentTypeCode("ica")
                        .subjectCode("Math")
                        .build(),
                "assessmentTypeCode",
                "subjectCode"
        );
    }

    @Test
    public void itShouldDeserializeAGroupRequest() {
        // this payload has groupId as an integer, which only happened for a couple weeks during development
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-group-exam-report-request-1_2-.json");
        assertThat(deserialized).isInstanceOf(GroupExamReportRequest.class);
        final GroupExamReportRequest request = (GroupExamReportRequest) deserialized;
        assertThat(request.getGroupId().getId()).isEqualTo(1378);
    }

    @Test
    public void itShouldDeserializeAProductionGroupRequestA() {
        // this payload came from v1.1.x production and has the groupGrant field and no groupId
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-group-report-request-a-1_1.json");
        assertThat(deserialized).isInstanceOf(GroupExamReportRequest.class);
        final GroupExamReportRequest request = (GroupExamReportRequest) deserialized;
        assertThat(request.getGroupId().getId()).isEqualTo(23602);
    }

    @Test
    public void itShouldDeserializeAProductionGroupRequestB() {
        // this payload came from v1.1.x production and has the groupGrant field and no groupId
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-group-report-request-b-1_1.json");
        assertThat(deserialized).isInstanceOf(GroupExamReportRequest.class);
        final GroupExamReportRequest request = (GroupExamReportRequest) deserialized;
        assertThat(request.getGroupId().getId()).isEqualTo(151642);
    }

    @Test
    public void itShouldDeserializeAProductionStudentRequestA() {
        // this payload came from v1.1.x production
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-student-report-request-a-1_1.json");
        assertThat(deserialized).isInstanceOf(StudentExamReportRequest.class);
        final StudentExamReportRequest request = (StudentExamReportRequest) deserialized;
        assertThat(request.getStudentId()).isEqualTo(177669);
    }

    @Test
    public void itShouldDeserializeAProductionExamExportRequestA() {
        // this payload came from v1.1.x production
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-exam-export-report-request-a-1_1.json");
        assertThat(deserialized).isInstanceOf(ExportExamReportRequest.class);
        final ExportExamReportRequest request = (ExportExamReportRequest) deserialized;
        assertThat(request.getSchoolIds()).containsExactly(1344L);
    }

    @Test
    public void itShouldDeserializeAProductionSchoolGradeRequestA() {
        // this payload came from v1.1.x production
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-school-grade-report-request-a-1_1.json");
        assertThat(deserialized).isInstanceOf(SchoolGradeExamReportRequest.class);
        final SchoolGradeExamReportRequest request = (SchoolGradeExamReportRequest) deserialized;
        assertThat(request.getSchoolId()).isEqualTo(1344);
        assertThat(request.getGradeId()).isEqualTo(11);
    }

    @Test
    public void itShouldDeserializeAnAggregateRequestA() {
        // this payload came from v1.1.x production
        final AbstractExamReportRequest deserialized = deserializeRequestResource("/serialized-aggregate-report-request-a-1_1.json");
        assertThat(deserialized).isInstanceOf(AggregateReportRequest.class);
        final AggregateReportRequest request = (AggregateReportRequest) deserialized;

        final CustomAggregateReportQuery query = (CustomAggregateReportQuery) request.getQuery();
        assertThat(query.getSchoolYears()).containsExactly(2018);
        assertThat(query.getAssessmentGradeCodes()).containsExactlyInAnyOrder("03", "05");
    }


    private AbstractExamReportRequest deserializeRequestResource(final String resource) {
        try (final InputStream is = this.getClass().getResourceAsStream(resource)) {
            return objectMapper.readValue(is, AbstractExamReportRequest.class);
        } catch (final IOException e) {
            fail("failed to deserialize " + resource);
            return null;
        }
    }
}