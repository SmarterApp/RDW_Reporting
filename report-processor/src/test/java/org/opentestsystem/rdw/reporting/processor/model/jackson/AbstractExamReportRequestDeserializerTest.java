package org.opentestsystem.rdw.reporting.processor.model.jackson;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import com.google.common.io.Resources;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.processor.model.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.GroupExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.StudentExamReportRequest;

import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
import static com.google.common.base.Charsets.UTF_8;
import static com.google.common.io.Resources.getResource;
import static org.assertj.core.api.Assertions.assertThat;

public class AbstractExamReportRequestDeserializerTest {

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new ObjectMapper();
        objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.registerModule(new ReportModule());
    }

    @Test
    public void itShouldDeserializeLegacyGroupExamReportRequestJson() throws Exception {
        final String legacyJson = Resources.toString(getResource("legacy_GroupExamReportRequest.json"), UTF_8);
        final AbstractExamReportRequest deserialized = objectMapper.readValue(legacyJson, AbstractExamReportRequest.class);
        assertThat(deserialized).isInstanceOf(GroupExamReportRequest.class);
    }

    @Test
    public void itShouldRoundTripASchoolGradeRequest() throws Exception {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .gradeId(11)
                .schoolId(123)
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final SchoolGradeExamReportRequest deserialized = (SchoolGradeExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getGradeId()).isEqualTo(11);
        assertThat(deserialized.getSchoolId()).isEqualTo(123);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

    @Test
    public void itShouldRoundTripAGroupRequest() throws Exception {
        final GroupExamReportRequest request = GroupExamReportRequest.builder()
                .groupId(123)
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final GroupExamReportRequest deserialized = (GroupExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
        assertThat(deserialized.getGroupId()).isEqualTo(123);
    }

    @Test
    public void itShouldRoundTripAStudentRequest() throws Exception {
        final StudentExamReportRequest request = StudentExamReportRequest.builder()
                .studentId(123)
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final StudentExamReportRequest deserialized = (StudentExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getStudentId()).isEqualTo(123);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

    @Test
    public void itShouldRoundTripAnExamExportRequest() throws Exception {
        final ExportExamReportRequest request = ExportExamReportRequest.builder()
                .districtIds(ImmutableSet.of(123L, 456L))
                .schoolYear(1234)
                .build();
        final String json = objectMapper.writeValueAsString(request);
        final ExportExamReportRequest deserialized = (ExportExamReportRequest) objectMapper.readValue(json, AbstractExamReportRequest.class);
        assertThat(deserialized.getDistrictIds()).containsOnly(123L, 456L);
        assertThat(deserialized.getSchoolYear()).isEqualTo(1234);
    }

}