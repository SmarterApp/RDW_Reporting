package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.util.HashMap;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.http.HttpHeaders.AUTHORIZATION;

@RunWith(MockitoJUnitRunner.class)
public class DefaultMessageSecurityServiceTest {

    @Mock
    private JwtService jwtService;

    @Mock
    private User user;

    private DefaultMessageSecurityService service;

    @Before
    public void setup() {
        when(jwtService.encode(any(User.class))).thenReturn("encoded_user");
        when(jwtService.decode(any(String.class))).thenReturn(user);

        service = new DefaultMessageSecurityService(jwtService);
    }

    @Test
    public void itShouldEncodeAUserAsAMessageHeader() {
        final Message<String> original = MessageBuilder.createMessage("payload", new MessageHeaders(new HashMap<>()));
        final Message<String> encoded = service.withUser(original, user);
        assertThat(encoded.getHeaders().get(AUTHORIZATION)).isEqualTo("Bearer encoded_user");
    }

    @Test
    public void itShouldDecodeAUserAsAMessageHeader() {
        final MessageHeaders authHeaders = new MessageHeaders(ImmutableMap.of(AUTHORIZATION, "Bearer some_user"));
        final Message<String> message = MessageBuilder.createMessage("payload", authHeaders);

        final User decodedUser = service.getUser(message);
        assertThat(decodedUser).isEqualTo(user);

        final ArgumentCaptor<String> encodedUserCaptor = ArgumentCaptor.forClass(String.class);
        verify(jwtService).decode(encodedUserCaptor.capture());
        assertThat(encodedUserCaptor.getValue()).isEqualTo("some_user");
    }
}