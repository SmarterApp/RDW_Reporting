package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;
import static org.opentestsystem.rdw.reporting.common.security.PermissionScope.STATEWIDE;

@RunWith(MockitoJUnitRunner.class)
public class SpringBatchReportGeneratorTest {

    @Mock
    private ReportService reportService;

    @Mock
    private ReportGenerationJobParameterProvider parameterProvider;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job generateReportJob;

    @Captor
    private ArgumentCaptor<JobParameters> parameterCaptor;

    private SpringBatchReportGenerator generator;

    @Before
    public void setup() {
        generator = new SpringBatchReportGenerator(reportService, parameterProvider, jobLauncher, generateReportJob);
    }

    @Test
    public void itShouldInsertAReportRecordAndTriggerAReportGenerationJob() throws Exception {
        final BatchExamReportRequestHolder requestHolder = requestHolder();

        when(reportService.insert(any(Report.class)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgumentAt(0, Report.class)
                        .copy()
                        .id(456L)
                        .build());

        final JobParameters jobParameters = mock(JobParameters.class);
        when(parameterProvider.toJobParameters(eq(456L), any(PermissionScope.class)))
                .thenReturn(jobParameters);

        final Report report = generator.generateReport(requestHolder);
        assertThat(report.getReportRequest()).isEqualTo(requestHolder.getRequest());
        assertThat(report.getCreated()).isLessThanOrEqualTo(Instant.now());
        assertThat(report.getUser()).isEqualTo(requestHolder.getUser());
        assertThat(report.getLabel()).isEqualTo(requestHolder.getLabel());
        assertThat(report.getStatus()).isEqualTo(PENDING);

        verify(jobLauncher).run(eq(generateReportJob), parameterCaptor.capture());
        assertThat(parameterCaptor.getValue()).isEqualTo(jobParameters);
    }

    @Test
    public void itShouldFailAReportIfJobCannotBeStarted() throws Exception {
        final BatchExamReportRequestHolder requestHolder = requestHolder();

        when(jobLauncher.run(eq(generateReportJob), any(JobParameters.class)))
                .thenThrow(new JobExecutionAlreadyRunningException("Bad Juju"));

        when(reportService.insert(any(Report.class)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgumentAt(0, Report.class)
                        .copy()
                        .id(456L)
                        .build());

        final JobParameters jobParameters = mock(JobParameters.class);
        when(parameterProvider.toJobParameters(eq(456L), any(PermissionScope.class)))
                .thenReturn(jobParameters);

        try {
            generator.generateReport(requestHolder);
        } catch (final IllegalStateException ignore) {}

        final ArgumentCaptor<Report> reportCaptor = ArgumentCaptor.forClass(Report.class);
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    private BatchExamReportRequestHolder requestHolder() {
        final SchoolGradeExamReportRequest reportRequest = SchoolGradeExamReportRequest.builder()
                .schoolId(123L)
                .gradeId(7)
                .build();

        return new BatchExamReportRequestHolder(
                reportRequest,
                STATEWIDE,
                "user",
                "label"
        );
    }

}