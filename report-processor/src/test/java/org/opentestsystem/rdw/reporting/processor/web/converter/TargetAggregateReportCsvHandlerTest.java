package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery.Builder;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.TargetReportQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel;
import org.opentestsystem.rdw.reporting.common.model.TargetRow;
import org.springframework.context.MessageSource;

import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@RunWith(MockitoJUnitRunner.class)
public class TargetAggregateReportCsvHandlerTest extends AbstractAggregateReportCsvHandlerWithBasicQueryTest<TargetRow> {

    @Override
    protected TargetRow reportRow(final Organization organization) {
        return reportRowBuilder(TargetRow.builder(), organization)
                .dimension(Dimension.builder().type(Overall).build())
                .studentRelativeResidualScoresLevel(TargetReportingLevel.Below)
                .standardMetRelativeResidualLevel(TargetReportingLevel.Above)
                .claimCode("claim")
                .targetNaturalId("targetId")
                .build();
    }

    @Override
    protected AbstractAggregateReportCsvHandler createHandlerUnderTest(final MessageSource messageSource, final ObjectMapper objectMapper) {
        return new TargetAggregateReportCsvHandler(messageSource, objectMapper);
    }

    @Override
    protected Builder getQueryBuilder() {
        return TargetReportQuery.builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .subjectCode("Math")
                .schoolYear(2018)
                .assessmentGradeCodes(ImmutableSet.of("01"))
                .schoolIds(ImmutableSet.of(1L));
    }

    @Override
    protected int getHeadersCount() {
        return 17;
    }
}