package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.security.GroupGrant;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingRoles.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.group;
import static org.opentestsystem.rdw.reporting.common.test.support.UserPermissionsTestBuilder.individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentRepositoryIT {

    @Autowired
    private JdbcStudentRepository repository;

    @Test
    public void itShouldFindStudentsBySchoolAndGradeAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .build();
        final Collection<Student> studentIds = repository.findStudentsByExamQueryParams(
                individual(statewide()),
                examQueryParams);

        assertThat(studentIds.stream().map(Student::getId)).containsOnly(-2L, -1L);
    }

    @Test
    public void itShouldHandleNoStudentResults() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(123L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .build();

        assertThat(repository.findStudentsByExamQueryParams(
                individual(statewide()),
                examQueryParams)
        ).isEmpty();
    }

    @Test
    public void itShouldFindStudentIdsByGroupId() throws Exception {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Group)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(group(statewide()), g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);

        final ExamQueryParams g2Params = ExamQueryParams.builder()
                .groupId(-20L)
                .schoolYear(1997)
                .queryPermissionType(Group)
                .build();
        final Collection<Student> g2Students = repository.findStudentsByExamQueryParams(group(statewide()), g2Params);

        assertThat(g2Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldFindASingleStudentWithIndividualPermissions() throws Exception {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-1L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(
                individual(statewide()),
                g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldFindASingleStudentWithGroupPermissions() throws Exception {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-1L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final UserPermissions specificGroup = UserPermissions.builder()
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .groupsById(ImmutableMap.of(-10L, GroupGrant.builder().id(-10L).build()))
                .build();

        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);
    }

}