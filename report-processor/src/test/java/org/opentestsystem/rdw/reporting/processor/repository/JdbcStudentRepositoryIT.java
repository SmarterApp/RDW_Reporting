package org.opentestsystem.rdw.reporting.processor.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.PermissionScope.STATEWIDE;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentRepositoryIT {

    @Autowired
    private JdbcStudentRepository repository;

    @Test
    public void itShouldFindStudentsBySchoolAndGradeAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(-10L)
                .schoolYear(1997)
                .build();
        final Collection<Student> studentIds = repository.findStudentsByExamQueryParams(STATEWIDE, examQueryParams);

        assertThat(studentIds.stream().map(Student::getId)).containsOnly(-2L, -1L);
    }

    @Test
    public void itShouldHandleNoStudentResults() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(123L)
                .schoolYear(1997)
                .build();

        assertThat(repository.findStudentsByExamQueryParams(STATEWIDE, examQueryParams)).isEmpty();
    }

    @Test
    public void itShouldFindStudentIdsByGroupId() throws Exception {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(-10L)
                .schoolYear(1997)
                .gradeId(-1)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(STATEWIDE, g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);

        final ExamQueryParams g2Params = ExamQueryParams.builder()
                .groupId(-20L)
                .schoolYear(1997)
                .gradeId(-1)
                .build();
        final Collection<Student> g2Students = repository.findStudentsByExamQueryParams(STATEWIDE, g2Params);

        assertThat(g2Students.stream().map(Student::getId)).containsOnly(-1L);
    }

}