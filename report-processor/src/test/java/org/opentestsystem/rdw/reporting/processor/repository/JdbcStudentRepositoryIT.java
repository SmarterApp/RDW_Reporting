package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableMap;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Group;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Individual;
import static org.opentestsystem.rdw.reporting.processor.model.ExamQueryParams.PermissionType.Unknown;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.group;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.individual;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentRepositoryIT {

    @Autowired
    private ReportingSystemSettings systemSettings;

    @Autowired
    private JdbcStudentRepository repository;

    @After
    public void tearDown() {
        systemSettings.setTransferAccessEnabled(false);
    }

    @Test
    public void itShouldFindStudentsBySchoolAndGradeAndYear() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(-10L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .build();
        final Collection<Student> studentIds = repository.findStudentsByExamQueryParams(
                individual(statewide()),
                examQueryParams);

        assertThat(studentIds.stream().map(Student::getId)).containsOnly(-2L, -1L);
    }

    @Test
    public void itShouldFindStudentsBySchoolAndGradeAndYearRespectingTransferAccess() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-1)
                .schoolId(-13L)
                .schoolYear(1998)
                .queryPermissionType(Individual)
                .subjectCode("Math")
                .build();

        final Collection<Student> withoutTransfer = repository.findStudentsByExamQueryParams(
                individual(schools(-13L)),
                examQueryParams);
        assertThat(withoutTransfer).isEmpty();

        systemSettings.setTransferAccessEnabled(true);
        final Collection<Student> withTransfer = repository.findStudentsByExamQueryParams(
                individual(schools(-13L)),
                examQueryParams);
        assertThat(getStudentIds(withTransfer))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldHandleNoStudentResults() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(123L)
                .schoolYear(1997)
                .queryPermissionType(Individual)
                .build();

        assertThat(repository.findStudentsByExamQueryParams(
                individual(statewide()),
                examQueryParams)
        ).isEmpty();
    }

    @Test
    public void itShouldFindStudentIdsByGroupId() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(-10L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(group(statewide()), g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);

        final ExamQueryParams g2Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(-20L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Collection<Student> g2Students = repository.findStudentsByExamQueryParams(group(statewide()), g2Params);

        assertThat(g2Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldFindStudentIdsByUserGroupId() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(null, -100L))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(group(statewide()), g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);

        final ExamQueryParams g2Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(-20L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();
        final Collection<Student> g2Students = repository.findStudentsByExamQueryParams(group(statewide()), g2Params);

        assertThat(g2Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldNotFindStudentIdsByGroupIdForUserWithoutGroupAccess() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(-30L, null))
                .schoolYear(1997)
                .queryPermissionType(Group)
                .gradeId(-1)
                .build();

        // another groups access
        assertThat(repository.findStudentsByExamQueryParams(group(statewide()), g1Params)).isEmpty();

        // PII access to students but not the group
        assertThat(repository.findStudentsByExamQueryParams(User.builder()
                .id("userId")
                .username("another@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
                .build(), g1Params)).isEmpty();

    }

    @Test
    public void itShouldFindStudentIdsByGroupIdRespectingTransferAccess() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(new UserGroupId(-100L, null))
                .schoolYear(1998)
                .queryPermissionType(Group)
                .gradeId(-1)
                .subjectCode("Math")
                .build();
        final Collection<Student> withoutTransfer = repository.findStudentsByExamQueryParams(
                group(schools(-13L)),
                g1Params);
        assertThat(withoutTransfer).isEmpty();

        systemSettings.setTransferAccessEnabled(true);
        final Collection<Student> withTransfer = repository.findStudentsByExamQueryParams(
                group(schools(-13L)),
                g1Params);
        assertThat(getStudentIds(withTransfer))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldFindASingleStudentWithIndividualPermissions() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-1L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();
        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(
                individual(statewide()),
                g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldFindASingleStudentWithIndividualPermissionsRespectingTransferAccess() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-100L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .subjectCode("Math")
                .build();

        final Collection<Student> withoutTransfer = repository.findStudentsByExamQueryParams(
                individual(schools(-13L)),
                g1Params);
        assertThat(withoutTransfer).isEmpty();

        systemSettings.setTransferAccessEnabled(true);
        final Collection<Student> withTransfer = repository.findStudentsByExamQueryParams(
                individual(schools(-13L)),
                g1Params);
        assertThat(getStudentIds(withTransfer))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldFindASingleStudentWithGroupPermissions() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-1L)
                .schoolYear(1997)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .build();

        final Permission groupPermission = groupOf(schools(-10L));
        final User specificGroup = User.builder()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Collection<Student> g1Students = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);

        assertThat(g1Students.stream().map(Student::getId)).containsOnly(-1L);
    }

    @Test
    public void itShouldFindASingleStudentWithGroupPermissionsRespectingTransferAccess() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-100L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .subjectCode("Math")
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builder()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Collection<Student> withoutTransfer = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);
        assertThat(withoutTransfer).isEmpty();

        systemSettings.setTransferAccessEnabled(true);
        final Collection<Student> withTransfer = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);
        assertThat(getStudentIds(withTransfer))
                .containsOnly(-100L);
    }

    @Test
    public void itShouldFindASingleStudentWithGroupPermissionsRespectingDisabledTransferAccess() {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .studentId(-100L)
                .schoolYear(1998)
                .queryPermissionType(Unknown)
                .gradeId(-1)
                .subjectCode("Math")
                .disableTransferAccess(true)
                .build();

        final Permission groupPermission = groupOf(schools(-13L));
        final User specificGroup = User.builder()
                .id("userId")
                .username("someone@somewhere.com")
                .password("redacted")
                .permissionsById(ImmutableMap.of(GroupPiiRead, groupPermission))
                .build();

        final Collection<Student> withoutTransfer = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);
        assertThat(withoutTransfer).isEmpty();

        systemSettings.setTransferAccessEnabled(true);
        final Collection<Student> disabledTransfer = repository.findStudentsByExamQueryParams(
                specificGroup,
                g1Params);
        assertThat(disabledTransfer).isEmpty();
    }

    private Collection<Long> getStudentIds(final Collection<Student> students) {
        return students.stream()
                .map(Student::getId)
                .collect(Collectors.toSet());
    }

}