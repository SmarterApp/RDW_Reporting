package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.repository.ReportRepository;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyCollection;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultReportServiceTest {

    @Mock
    private ReportRepository reportRepository;

    @Captor
    private ArgumentCaptor<List<Long>> longListCaptor;

    private DefaultReportService service;

    @Before
    public void setup() {
        service = new DefaultReportService(reportRepository);
    }

    @Test
    public void itShouldDelegateInsertingToRepository() {
        final Report report = mock(Report.class);
        when(reportRepository.create(report)).thenReturn(report);

        assertThat(service.create(report)).isEqualTo(report);
    }

    @Test
    public void itShouldDelegateFindAllByUserAndIdToRepository() {
        final List<Report> reports = newArrayList(mock(Report.class), mock(Report.class));
        when(reportRepository.findByUserAndIds(eq("user"), anyCollection()))
                .thenReturn(reports);

        assertThat(service.findAllByUserAndId("user", of(1L, 2L, 3L)))
                .containsExactlyElementsOf(reports);

        verify(reportRepository).findByUserAndIds(eq("user"), longListCaptor.capture());
        assertThat(longListCaptor.getValue()).containsExactly(1L, 2L, 3L);
    }

    @Test
    public void itShouldDelegateFindingOneByIdToRepository() {
        final Report report = mock(Report.class);
        when(reportRepository.findById(123L)).thenReturn(report);

        assertThat(service.findOneById(123L).orElse(null)).isEqualTo(report);
    }

    @Test
    public void itShouldDelegateUpdatingAReportToTheRepository() {
        final Report report = mock(Report.class);
        when(reportRepository.update(report)).thenReturn(report);

        assertThat(service.update(report)).isEqualTo(report);
    }

    @Test
    public void itShouldDelegateMarkingAChunkCompleteToTheRepository() {
        final Report report = mock(Report.class);
        when(reportRepository.completeChunk(report)).thenReturn(report);
        assertThat(service.completeChunk(report)).isEqualTo(report);
    }

    @Test
    public void itShouldDeleteOnlyNonEmpyCollections() {
        final Set<Long> ids = new HashSet<>();
        service.delete(ids);
        verify(reportRepository, never()).deleteIds(ids);
    }
}