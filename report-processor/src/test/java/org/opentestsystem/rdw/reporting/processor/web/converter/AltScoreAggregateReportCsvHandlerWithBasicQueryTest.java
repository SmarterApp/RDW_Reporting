package org.opentestsystem.rdw.reporting.processor.web.converter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.springframework.context.MessageSource;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@RunWith(MockitoJUnitRunner.class)
public class AltScoreAggregateReportCsvHandlerWithBasicQueryTest extends AbstractAggregateReportCsvHandlerWithBasicQueryTest<AltScoreRow> {

    @Override
    protected AltScoreRow reportRow(final Organization organization) {
        return super.reportRowBuilder(AltScoreRow.builder(), organization)
                .dimension(Dimension.builder().type(Overall).build())
                .altScoreCode("1")
                .build();
    }

    @Override
    protected AltScoreAggregateReportCsvHandler createHandlerUnderTest(final MessageSource messageSource, final ObjectMapper objectMapper) {
        return new AltScoreAggregateReportCsvHandler(messageSource, objectMapper);
    }

    @Override
    protected AbstractAggregateReportQuery.Builder getQueryBuilder() {
        return AltScoreAggregateReportQuery.builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .altScoreCodesBySubject(ImmutableMap.of("ELA", ImmutableSet.of("1", "2")))
                .schoolYears(of(2018))
                .assessmentGradeCodes(of("01", "02", "03", "04", "05"))
                .includeState(true)
                .includeAllDistricts(false)
                .dimensionTypes(of(Gender))
                .districtIds(of(1L))
                .schoolIds(of(1L));
    }

    @Override
    protected int getHeadersCount() {
        return 20;
    }
}