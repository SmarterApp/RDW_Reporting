package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultRemoveReportServiceTest {
    @InjectMocks
    private DefaultRemoveReportService removeReportService;
    @Mock
    private ReportService reportService;
    @Mock
    private ReportContentService reportContentService;
    @Mock
    private Report report;

    @Test
    public void itShouldRemoveOldReports() {
        List<Report> foundReports = Arrays.asList(report);
        when(reportService.findAllOlderThanNumberOfDays(30)).thenReturn(foundReports);
        when(reportContentService.deleteContents(foundReports)).thenReturn(foundReports);
        when(report.getId()).thenReturn(123L);
        removeReportService.deleteOldReports(30);
        verify(reportService).delete(Arrays.asList(123L));
    }

    @Test
    public void itShouldRemoveFromDatabaseOnlyWhichHasBeenRemovedFromArchiveService() {
        List<Report> foundReports = Arrays.asList(report);
        when(reportService.findAllOlderThanNumberOfDays(30)).thenReturn(foundReports);
        when(reportContentService.deleteContents(foundReports)).thenReturn(Arrays.asList());
        when(report.getId()).thenReturn(123L);
        removeReportService.deleteOldReports(30);
        verify(reportService).delete(Arrays.asList());
    }

}
