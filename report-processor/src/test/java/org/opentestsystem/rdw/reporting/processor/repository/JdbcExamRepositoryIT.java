package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableSet;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.report.ExamExportQueryOptions;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamRepositoryIT {

    private final static String TestCsvFormat = "/tmp/exam-export-test-%s.csv";

    private String testCsv = "";
    private static final int HeaderRowCountOnly = 1;

    @Autowired
    private JdbcExamRepository repository;

    @Before
    public void Setup() {
        testCsv = String.format(TestCsvFormat, new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss:SSS").format(new Date()));
    }

    @Test
    public void exportByDistrictWithStatewideShouldExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .districtIds(ImmutableSet.of(-10L))
                .schoolYear(1996)
                .build();

        repository.export(statewide(), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(4);
    }

    @Test
    public void exportByDistrictWithNoAccessShouldNotExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .districtIds(ImmutableSet.of(-10L))
                .schoolYear(1996)
                .build();

        repository.export(districts(-20L), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(HeaderRowCountOnly);
    }

    @Test
    public void exportBySchoolGroupWithSchoolGroupAccessShouldExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .schoolGroupIds(ImmutableSet.of(-20L))
                .schoolYear(1997)
                .build();

        repository.export(schoolGroups(-20L), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(2);
    }

    @Test
    public void exportBySchoolGroupWithNotSchoolGroupAccessShouldExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .schoolGroupIds(ImmutableSet.of(-20L))
                .schoolYear(1997)
                .build();

        repository.export(schoolGroups(-10L), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(HeaderRowCountOnly);
    }

    @Test
    public void exportBySchoolWithSchoolAccessShouldExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        repository.export(schools(-11L), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(2);
    }

    @Test
    public void exportBySchoolWithNotSchoolAccessShouldExportDistrictExams() throws IOException {

        ExamExportQueryOptions query = ExamExportQueryOptions
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        repository.export(schools(-12L), query, testCsv);
        int count = getTestFileLineCount();
        assertThat(count).isEqualTo(HeaderRowCountOnly);
    }

    @After
    public void cleanUp() throws IOException {
        try {
            Files.delete(Paths.get(testCsv));
        }
        catch (Exception welpAtLeastItried) {
            // This will always throw an exception in TeamCity because the java user can't delete a file created by
            // the mysql account.  This should work locally though, so at least I'm not polluting your local /tmp/
        }
    }

    private int getTestFileLineCount() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(testCsv));
        int count = 0;

        while (reader.readLine() != null) {
            count++;
        }

        return count;
    }
}
