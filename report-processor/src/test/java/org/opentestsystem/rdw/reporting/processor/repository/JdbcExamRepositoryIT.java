package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.opencsv.CSVReaderBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.Assume.assumeThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamRepositoryIT {

    private static final String TestCsvFormat = "/tmp/exam-export-test-%s.csv";
    private static final int HeaderRowCountOnly = 1;

    @Autowired
    private ReportingSystemSettings systemSettings;

    @Autowired
    private JdbcExamRepository repository;

    @Value("${test.aurora:false}")
    private boolean testAurora;
    private String testCsv = "";
    private User.Builder userBuilder;

    @Before
    public void setup() {
        // the way this test is written, it can't be run against Aurora
        assumeThat("", testAurora, is(false));

        testCsv = String.format(TestCsvFormat, new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss:SSS").format(new Date()));
        userBuilder = User.builder()
                .id("userId")
                .username("someone-10@somewhere.com")
                .password("redacted");
    }

    @After
    public void cleanUp() {
        systemSettings.setTransferAccessEnabled(false);
        try {
            Files.delete(Paths.get(testCsv));
        } catch (final Exception welpAtLeastItried) {
            // This will always throw an exception in TeamCity because the java user can't delete a file created by
            // the mysql account.  This should work locally though, so at least I'm not polluting your local /tmp/
        }
    }

    @Test
    public void exportByDistrictWithStatewideShouldExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .districtIds(ImmutableSet.of(-10L))
                .schoolYear(1996)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(PermissionScope.STATEWIDE))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(4);
    }

    @Test
    public void exportByDistrictWithNoAccessShouldNotExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .districtIds(ImmutableSet.of(-10L))
                .schoolYear(1996)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(districts(-20L)))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(HeaderRowCountOnly);
    }

    @Test
    public void exportBySchoolGroupWithSchoolGroupAccessShouldExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolGroupIds(ImmutableSet.of(-20L))
                .schoolYear(1997)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(schoolGroups(-20L)))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(2);
    }

    @Test
    public void exportBySchoolGroupWithNotSchoolGroupAccessShouldExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolGroupIds(ImmutableSet.of(-20L))
                .schoolYear(1997)
                .build();

        repository.export(userBuilder.permissionsById(permissions(individualOf(schoolGroups(-10L)))).build(), query, testCsv);

        assertThat(getCsvLineCount()).isEqualTo(HeaderRowCountOnly);
    }

    @Test
    public void exportBySchoolWithSchoolAccessShouldExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(schools(-11L)))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(2);
    }

    @Test
    public void exportBySchoolWithNotSchoolAccessShouldExportDistrictExams() throws IOException {

        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(schools(-12L)))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(HeaderRowCountOnly);
    }

    @Test
    public void exportSingleSchoolExportExamRowData() throws IOException {
        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(PermissionScope.STATEWIDE))).build();

        repository.export(user, query, testCsv);
        final String[] row = getCsvData().get(1);

        assertThat(getField(row, "DistrictId")).isEqualTo("districtNat1");
        assertThat(getField(row, "DistrictName")).isEqualTo("district1");

        assertThat(getField(row, "NcesId")).isEqualTo("");
        assertThat(getField(row, "SchoolId")).isEqualTo("schoolNat2");
        assertThat(getField(row, "SchoolName")).isEqualTo("school2");

        assertThat(getField(row, "StudentIdentifier")).isEqualTo("student2_ssid");
        assertThat(getField(row, "FirstName")).isEqualTo("student2_firstName");
        assertThat(getField(row, "LastOrSurname")).isEqualTo("student2_lastName");

        assertThat(getField(row, "SubmitDateTime")).isEqualTo("1997-01-01 00:00:00.000000");
        assertThat(getField(row, "SchoolYear")).isEqualTo("1997");
        assertThat(getField(row, "TestSessionId")).isEqualTo("session3");

        assertThat(getField(row, "AssessmentType")).isEqualTo("Interim");
        assertThat(getField(row, "AssessmentSubType")).isEqualTo("IAB");
        assertThat(getField(row, "AssessmentName")).isEqualTo("iab1");
        assertThat(getField(row, "Subject")).isEqualTo("Math");

        assertThat(getField(row, "GradeLevelWhenAssessed")).isEqualTo("g2");
        assertThat(getField(row, "Completeness")).isEqualTo("Complete");
        assertThat(getField(row, "AdministrationCondition")).isEqualTo("Valid");

        assertThat(getField(row, "ScaleScoreAchievementLevel")).isEqualTo("2");
        assertThat(getField(row, "ScaleScore")).isEqualTo("2100");
        assertThat(getField(row, "ScaleScoreStandardError")).isEqualTo("21");

        assertThat(getField(row, "Claim1ScoreAchievementLevel")).isEqualTo("");
        assertThat(getField(row, "Claim2ScoreAchievementLevel")).isEqualTo("");
        assertThat(getField(row, "Claim3ScoreAchievementLevel")).isEqualTo("");
        assertThat(getField(row, "Claim4ScoreAchievementLevel")).isEqualTo("");
        assertThat(getField(row, "Claim5ScoreAchievementLevel")).isEqualTo("");
        assertThat(getField(row, "Claim6ScoreAchievementLevel")).isEqualTo("");

        assertThat(getField(row, "Sex")).isEqualTo("g1");
        assertThat(getField(row, "MigrantStatus")).isEqualTo("");
        assertThat(getField(row, "Section504Status")).isEqualTo("No");
        assertThat(getField(row, "IDEAIndicator")).isEqualTo("No");
        assertThat(getField(row, "LEPStatus")).isEqualTo("Yes");
        assertThat(getField(row, "EnglishLanguageAcquisitionStatus")).isEqualTo("RFEP");
        assertThat(getField(row, "EnglishLanguageAcquisitionStatusStartDate")).isEqualTo("1996-08-01");

        assertThat(getField(row, "HispanicOrLatinoEthnicity")).isEqualTo("No");
        assertThat(getField(row, "AmericanIndianOrAlaskaNative")).isEqualTo("No");
        assertThat(getField(row, "Asian")).isEqualTo("No");
        assertThat(getField(row, "BlackOrAfricanAmerican")).isEqualTo("No");
        assertThat(getField(row, "White")).isEqualTo("No");
        assertThat(getField(row, "NativeHawaiianOrOtherPacificIslander")).isEqualTo("No");
        assertThat(getField(row, "TwoOrMoreRaces")).isEqualTo("No");
        assertThat(getField(row, "Filipino")).isEqualTo("Yes");

        assertThat(getField(row, "AssignedAccommodationList")).isEqualTo("TDS_BT_UCT|NEA0|NEA_Abacus");
    }

    @Test
    public void itShouldHaveAHeaderRow() throws IOException {
        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolIds(ImmutableSet.of(-11L))
                .schoolYear(1997)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(PermissionScope.STATEWIDE))).build();

        repository.export(user, query, testCsv);
        final String[] row = getCsvData().get(0);
        assertThat(row).containsExactlyElementsOf(csvFields);
    }

    @Test
    public void itShouldRespectTransferAccess() throws IOException {
        final ExportExamReportRequest query = ExportExamReportRequest
                .builder()
                .schoolIds(ImmutableSet.of(-13L))
                .schoolYear(1998)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(PermissionScope.STATEWIDE))).build();
        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(3);
        cleanUp();
        setup();

        systemSettings.setTransferAccessEnabled(true);

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(5);
    }

    private int getCsvLineCount() throws IOException {
        return getCsvData().size();
    }

    private List<String[]> getCsvData() throws IOException {
        return new CSVReaderBuilder(new FileReader(testCsv))
                .build()
                .readAll();
    }

    private static String getField(String[] row, String name) {
        return row[csvFields.indexOf(name)];
    }

    private static final List<String> csvFields = ImmutableList.of(
            "DistrictId",
            "DistrictName",

            "NcesId",
            "SchoolId",
            "SchoolName",

            "StudentIdentifier",
            "FirstName",
            "LastOrSurname",

            "SubmitDateTime",
            "SchoolYear",
            "TestSessionId",

            "AssessmentType",
            "AssessmentSubType",
            "AssessmentName",
            "Subject",

            "GradeLevelWhenAssessed",
            "Completeness",
            "AdministrationCondition",

            "ScaleScoreAchievementLevel",
            "ScaleScore",
            "ScaleScoreStandardError",

            "Claim1ScoreAchievementLevel",
            "Claim2ScoreAchievementLevel",
            "Claim3ScoreAchievementLevel",
            "Claim4ScoreAchievementLevel",
            "Claim5ScoreAchievementLevel",
            "Claim6ScoreAchievementLevel",

            "Sex",
            "MigrantStatus",
            "Section504Status",
            "IDEAIndicator",
            "LEPStatus",
            "EnglishLanguageAcquisitionStatus",
            "EnglishLanguageAcquisitionStatusStartDate",

            "HispanicOrLatinoEthnicity",
            "AmericanIndianOrAlaskaNative",
            "Asian",
            "BlackOrAfricanAmerican",
            "White",
            "NativeHawaiianOrOtherPacificIslander",
            "TwoOrMoreRaces",
            "Filipino",

            "AssignedAccommodationList"
    );
}
