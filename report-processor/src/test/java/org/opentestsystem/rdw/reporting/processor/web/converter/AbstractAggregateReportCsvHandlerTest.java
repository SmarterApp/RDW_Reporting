package org.opentestsystem.rdw.reporting.processor.web.converter;

import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.State;

import java.util.concurrent.atomic.AtomicInteger;

public abstract class AbstractAggregateReportCsvHandlerTest {
    private static final AtomicInteger idGenerator = new AtomicInteger(1);

    protected State state() {
        return State.builder()
                .name("State")
                .build();
    }

    protected District district() {
        final int districtId = idGenerator.getAndIncrement();
        return District.builder()
                .name("District " + districtId)
                .id((long) districtId)
                .build();
    }

    protected School school(final long districtId) {
        final int schoolId = idGenerator.getAndIncrement();
        return School.builder()
                .organizationType(OrganizationType.School)
                .name("School " + schoolId)
                .id((long) schoolId)
                .districtId(districtId)
                .build();
    }

    protected <B extends AggregateRow.Builder<B, ?>> B reportRowBuilder(final B builder, final Organization organization) {
        return builder
                .assessment(ActiveAssessment.builder()
                        .id(123)
                        .examSchoolYear(1999)
                        .subjectCode("Math")
                        .label("An Assessment")
                        .gradeCode("03")
                        .build())
                .measures(Measures.builder()
                        .avgScaleScore(2500)
                        .avgStdErr(50)
                        .level1Count(1)
                        .level2Count(2)
                        .level3Count(3)
                        .level4Count(4)
                        .build())
                .organization(organization);
    }
}