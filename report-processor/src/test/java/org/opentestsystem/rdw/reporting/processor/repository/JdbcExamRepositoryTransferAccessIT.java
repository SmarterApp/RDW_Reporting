package org.opentestsystem.rdw.reporting.processor.repository;

import com.google.common.collect.ImmutableSet;
import com.opencsv.CSVReaderBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.DistrictSchoolExportReportQuery;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.Assume.assumeThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test-transfer-access")
public class JdbcExamRepositoryTransferAccessIT {

    private static final String TestCsvFormat = "/tmp/exam-export-test-%s.csv";

    @Autowired
    private JdbcExamRepository repository;

    @Value("${test.aurora:false}")
    private boolean testAurora;
    private String testCsv = "";
    private User.Builder userBuilder;

    @Before
    public void setup() {
        // the way this test is written, it can't be run against Aurora
        assumeThat("", testAurora, is(false));

        testCsv = String.format(TestCsvFormat, new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss:SSS").format(new Date()));
        userBuilder = User.builderExt()
                .id("userId")
                .username("someone-10@somewhere.com")
                .password("redacted");
    }

    @After
    public void cleanUp() {
        try {
            Files.delete(Paths.get(testCsv));
        } catch (final Exception welpAtLeastItried) {
            // This will always throw an exception in TeamCity because the java user can't delete a file created by
            // the mysql account.  This should work locally though, so at least I'm not polluting your local /tmp/
        }
    }

    @Test
    public void itShouldRespectTransferAccess() throws IOException {
        final DistrictSchoolExportReportQuery query = DistrictSchoolExportReportQuery
                .builder()
                .schoolIds(ImmutableSet.of(-13L))
                .schoolYear(1998)
                .build();

        final User user = userBuilder.permissionsById(permissions(individualOf(PermissionScope.STATEWIDE))).build();

        repository.export(user, query, testCsv);
        assertThat(getCsvLineCount()).isEqualTo(5);
    }

    private int getCsvLineCount() throws IOException {
        return getCsvData().size();
    }

    private List<String[]> getCsvData() throws IOException {
        return new CSVReaderBuilder(new FileReader(testCsv))
                .build()
                .readAll();
    }

}
