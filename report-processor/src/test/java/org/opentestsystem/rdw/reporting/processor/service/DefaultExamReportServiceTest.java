package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.model.ReportStatus;
import org.opentestsystem.rdw.reporting.processor.model.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.web.ReportContentResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;

import java.io.ByteArrayInputStream;
import java.time.Instant;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyListOf;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.APPLICATION_PDF_UTF8;
import static org.opentestsystem.rdw.reporting.processor.util.MediaTypes.APPLICATION_ZIP;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;
import static org.springframework.http.HttpHeaders.CONTENT_LENGTH;
import static org.springframework.http.HttpHeaders.CONTENT_TYPE;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(MockitoJUnitRunner.class)
public class DefaultExamReportServiceTest {

    @Mock
    private ReportGenerator reportGenerator;

    @Mock
    private ReportService reportService;

    @Mock
    private ReportContentService reportContentService;

    private DefaultExamReportService service;

    private User user = User.builder()
            .id("user")
            .username("username")
            .password("password")
            .build();

    @Before
    public void before() {
        this.service = new DefaultExamReportService(reportGenerator, reportService, reportContentService);
    }

    @Test
    public void itShouldRetrieveAListOfReportsByUser() throws Exception {
        final List<Report> expected = newArrayList(report(123L), report(456L));
        when(reportService.findAllByUserAndId(eq("username"), anyListOf(Long.class)))
                .thenReturn(expected);

        assertThat(service.getReports(user, newArrayList())).isEqualTo(expected);
    }

    @Test
    public void itShouldRetrieveAListOfReportsByUserAndId() throws Exception {
        final List<Report> expected = newArrayList(report(123L), report(456L));
        when(reportService.findAllByUserAndId(eq("username"), anyListOf(Long.class)))
                .thenReturn(expected);

        assertThat(service.getReports(user, newArrayList(123L, 456L))).isEqualTo(expected);
    }

    @Test
    public void itShouldRetrievePDFReportContents() throws Exception {
        final Report report = report(123L);
        final byte[] contents = "PDF CONTENTS".getBytes();
        final ReportContentResource resource = new ReportContentResource(
                new ByteArrayInputStream(contents),
                (long) contents.length,
                APPLICATION_PDF_UTF8
        );

        when(reportService.findOneById(report.getId())).thenReturn(Optional.of(report));
        when(reportContentService.openContent(eq(report))).thenAnswer((id) -> resource);

        final ResponseEntity<ReportContentResource> response = service.openReportContent(user, 123);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getHeaders()).containsEntry(CONTENT_TYPE, newArrayList("application/pdf;charset=UTF-8"));
        assertThat(response.getHeaders()).containsEntry(CONTENT_DISPOSITION, newArrayList("attachment; filename*=UTF-8''my-report.pdf"));
        assertThat(response.getBody().contentLength()).isEqualTo((long) contents.length);
    }

    @Test
    public void itShouldRetrieveZipReportContents() throws Exception {
        final Report report = report(123L);
        final byte[] contents = "ZIP CONTENTS".getBytes();
        final ReportContentResource resource = new ReportContentResource(
                new ByteArrayInputStream(contents),
                (long) contents.length,
                APPLICATION_ZIP
        );

        when(reportService.findOneById(report.getId())).thenReturn(Optional.of(report));
        when(reportContentService.openContent(eq(report))).thenAnswer((id) -> resource);

        final ResponseEntity<ReportContentResource> response = service.openReportContent(user, 123);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getHeaders()).containsEntry(CONTENT_TYPE, newArrayList("application/zip"));
        assertThat(response.getHeaders()).containsEntry(CONTENT_DISPOSITION, newArrayList("attachment; filename*=UTF-8''my-report.zip"));
        assertThat(response.getBody().contentLength()).isEqualTo((long) contents.length);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldHandleAMissingReportWhenRequestingContents() throws Exception {
        when(reportService.findOneById(123)).thenReturn(Optional.empty());
        service.openReportContent(user, 123);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldReturnNotFoundWhenUserDoesNotMatchReportWhenRequestingContents() throws Exception {
        final User notTheReportOwner = User.builder()
                .id("id")
                .username("not the report owner")
                .password("pass")
                .build();
        when(reportService.findOneById(123)).thenReturn(Optional.of(report(123L)));
        service.openReportContent(notTheReportOwner, 123);
    }

    private Report report(final long id) {
        final SchoolGradeExamReportRequest request = SchoolGradeExamReportRequest.builder()
                .schoolId(1L)
                .gradeId(2)
                .schoolYear(1997)
                .build();

        return Report.builder()
                .user("username")
                .status(ReportStatus.RUNNING)
                .label("my-report")
                .created(Instant.now())
                .id(id)
                .reportRequest(request)
                .build();
    }

}
