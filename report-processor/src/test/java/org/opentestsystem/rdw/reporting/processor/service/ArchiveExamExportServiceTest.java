package org.opentestsystem.rdw.reporting.processor.service;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.reporting.processor.model.ExportExamReportRequest;
import org.opentestsystem.rdw.reporting.processor.model.UserPermissions;
import org.opentestsystem.rdw.reporting.processor.repository.ExamRepository;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(MockitoJUnitRunner.class)
public class ArchiveExamExportServiceTest {
    @Mock
    private ExamRepository repository;

    @Mock
    private ArchiveService archiveService;

    private ArchiveExamExportService examExportService;

    private UserPermissions validUserPermissions = UserPermissions
            .builder()
            .permissionsById(ImmutableMap.of(IndividualPiiRead, new Permission(IndividualPiiRead, statewide())))
            .build();

    private UserPermissions emptyPermissions = new UserPermissions();

    @Before
    public void setup() {
        examExportService = new ArchiveExamExportService(repository, archiveService);
    }

    @Test
    public void itShouldReturnFileRelativeLocation() {
        final String relativePath = "/tmp/export-exam-1.csv";

        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn(relativePath);

        when(archiveService.getRawUri("export-exam-1.csv"))
                .thenReturn("file://tmp/export-exam-1.csv");

        assertThat(examExportService.exportExam(validUserPermissions, new ExportExamReportRequest(), 1).toASCIIString()).isEqualToIgnoringCase("export-exam-1.csv");
    }

    @Test
    public void itShouldTrimFileSchemaWhenPassingToRepo() {
        final String relativePath = "/tmp/export-exam-1.csv";

        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn(relativePath);

        when(archiveService.getRawUri("export-exam-1.csv"))
                .thenReturn("file://tmp/export-exam-1.csv");

        ExportExamReportRequest query = new ExportExamReportRequest();

        assertThat(examExportService.exportExam(validUserPermissions, query, 1).toASCIIString()).isEqualToIgnoringCase("export-exam-1.csv");
        verify(repository).export(statewide(), query, relativePath);
    }

    @Test
    public void itShouldNotTrimS3SchemaWhenPassingToRepo() {
        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn("s3://bucket/export-exam-1.csv.part_0000");

        when(archiveService.getRawUri("export-exam-1.csv"))
                .thenReturn("s3://bucket/export-exam-1.csv");

        ExportExamReportRequest query = new ExportExamReportRequest();

        assertThat(examExportService.exportExam(validUserPermissions, query, 1).toASCIIString()).isEqualToIgnoringCase("export-exam-1.csv.part_0000");
        verify(repository).export(statewide(), query, "s3://bucket/export-exam-1.csv");
    }

    @Test
    public void itShouldIncludeExportBasePath() {
        final String relativePath = "/tmp/user/exams/export-exam-1.csv";

        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn(relativePath);

        when(archiveService.getRawUri("user/exams/export-exam-1.csv"))
                .thenReturn("file://tmp/user/exams/export-exam-1.csv");

        ExportExamReportRequest query = new ExportExamReportRequest();
        examExportService.setExportBasePath("user/exams");

        assertThat(examExportService.exportExam(validUserPermissions, query, 1).toASCIIString()).isEqualToIgnoringCase("user/exams/export-exam-1.csv");
        verify(repository).export(statewide(), query, relativePath);
    }

    @Test
    public void itShouldIncludeExportBasePathWithTrailingSlash() {
        final String relativePath = "/tmp/user/exams/export-exam-1.csv";

        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn(relativePath);

        when(archiveService.getRawUri("user/exams/export-exam-1.csv"))
                .thenReturn("file://tmp/user/exams/export-exam-1.csv");

        ExportExamReportRequest query = new ExportExamReportRequest();
        examExportService.setExportBasePath("user/exams/");

        assertThat(examExportService.exportExam(validUserPermissions, query, 1).toASCIIString()).isEqualToIgnoringCase("user/exams/export-exam-1.csv");
        verify(repository).export(statewide(), query, "/tmp/user/exams/export-exam-1.csv");
    }

    @Test
    public void itShouldPassEmptyPermissionScopeWhenUserPermissionsIsEmpty() {
        final String relativePath = "/tmp/export-exam-1.csv";

        when(repository.export(any(PermissionScope.class), any(ExportExamReportRequest.class), anyString()))
                .thenReturn(relativePath);

        when(archiveService.getRawUri("export-exam-1.csv"))
                .thenReturn("file://tmp/export-exam-1.csv");

        ExportExamReportRequest query = new ExportExamReportRequest();

        assertThat(examExportService.exportExam(emptyPermissions, query, 1).toASCIIString()).isEqualToIgnoringCase("export-exam-1.csv");
        verify(repository).export(PermissionScope.EMPTY, query, relativePath);
    }
}
