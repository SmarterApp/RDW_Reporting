package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.multitenant.storage.TenantPathDefaultResolver;
import org.opentestsystem.rdw.reporting.common.model.DistrictSchoolExportReportQuery;
import org.opentestsystem.rdw.reporting.common.multitenant.TenantPathService;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.processor.repository.ExamRepository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.individual;
import static org.opentestsystem.rdw.reporting.processor.test.support.UserTestBuilder.user;

@RunWith(MockitoJUnitRunner.class)
public class ArchiveExamExportServiceTest {
    @Mock
    private ExamRepository repository;

    @Mock
    private ArchiveService archiveService;

    @Mock
    private TenantPathService tenantPathService;

    private ArchiveExamExportService examExportService;

    private final User validUser = individual(statewide());
    private final User emptyPermissions = user();

    // service builds a report filename using the report id
    private final String FileName = "export-exam-1.csv";
    private final String S3Protocol = "s3://bucket/";
    private final String DefaultPrefix = "";
    private final String TenantPrefix = "NV";
    private String rootPath;
    private String RelativePath;

    //private TenantPathDefaultResolver tenantPathResolver = new TenantPathDefaultResolver();


    // Sets up examExportService and paths
    private void setupExportService(String prefix) {
        when(tenantPathService.getPrefix()).thenReturn(prefix);
        examExportService = new ArchiveExamExportService(repository, archiveService, tenantPathService);
        rootPath = examExportService.getExportBasePath();
        RelativePath = rootPath + FileName;
    }

    // File Archive methods
    private void setupFileArchiveTest () {
        when(archiveService.getRawUri(RelativePath))
                .thenReturn("file://" + RelativePath);

        when(repository.export(any(PermissionSource.class), any(DistrictSchoolExportReportQuery.class), anyString()))
                .thenAnswer((Answer<String>) invocationOnMock -> (String) invocationOnMock.getArguments()[2]);
    }

    private void setupFileArchiveDefaultTest () {
        setupExportService(DefaultPrefix);
        setupFileArchiveTest();
    }

    private void setupFileArchiveTenantTest () {
        setupExportService(TenantPrefix);
        setupFileArchiveTest();
    }

    // S3 setup methods
    private void setupS3ArchiveTest() {
        when(archiveService.getRawUri(RelativePath))
                .thenReturn(S3Protocol + RelativePath);

        when(repository.export(any(PermissionSource.class), any(DistrictSchoolExportReportQuery.class), anyString()))
                .thenAnswer((Answer<String>) invocationOnMock -> invocationOnMock.getArguments()[2] + ".part_0000");
    }

    private void setupS3ArchiveDefaultTenantTest() {
        setupExportService(DefaultPrefix);
        setupS3ArchiveTest();
    }

    private void setupS3ArchiveTenantTest() {
        setupExportService(TenantPrefix);
        setupS3ArchiveTest();
    }

    @Test
    public void itShouldReturnFileRelativeLocation() {
        setupFileArchiveDefaultTest();
        assertThat(examExportService.exportExams(validUser, new DistrictSchoolExportReportQuery(), 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
    }


    @Test
    public void itShouldReturnFileRelativeLocationWithTenantSet() {
        setupFileArchiveTenantTest();
        assertThat(examExportService.exportExams(validUser, new DistrictSchoolExportReportQuery(), 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
    }

    @Test
    public void itShouldPassQueryAndTrimFileSchemaWhenCallingRepo() {
        setupFileArchiveDefaultTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(validUser, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
        verify(repository).export(validUser, query, "/" + RelativePath);
    }

    @Test
    public void itShouldPassQueryAndTrimFileSchemaWhenCallingRepoWithTenantSet() {
        setupFileArchiveTenantTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(validUser, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
        verify(repository).export(validUser, query, "/" + RelativePath);
    }

    @Test
    public void itShouldNotTrimS3SchemaWhenPassingToRepo() {
        setupS3ArchiveDefaultTenantTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(validUser, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath + ".part_0000");
        verify(repository).export(validUser, query, S3Protocol + RelativePath);
    }


    @Test
    public void itShouldNotTrimS3SchemaWhenPassingToRepoWithTenantSet() {
        setupS3ArchiveTenantTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(validUser, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath + ".part_0000");
        verify(repository).export(validUser, query, S3Protocol + RelativePath);
    }

    @Test
    public void itShouldPassEmptyPermissionScopeWhenUserPermissionsIsEmpty() {
        setupFileArchiveDefaultTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(emptyPermissions, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
        verify(repository).export(emptyPermissions, query, "/" + RelativePath);
    }

    @Test
    public void itShouldPassEmptyPermissionScopeWhenUserPermissionsIsEmptyWithTenantSet() {
        setupFileArchiveTenantTest();

        final DistrictSchoolExportReportQuery query = new DistrictSchoolExportReportQuery();

        assertThat(examExportService.exportExams(emptyPermissions, query, 1).toASCIIString())
                .isEqualToIgnoringCase(RelativePath);
        verify(repository).export(emptyPermissions, query, "/" + RelativePath);
    }

}
