package org.opentestsystem.rdw.reporting.processor.stream;

import com.amazonaws.services.s3.Headers;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.AggregateResponseMessage;
import org.opentestsystem.rdw.reporting.processor.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.net.URI;
import java.util.HashMap;
import java.util.Optional;
import java.util.Properties;

import static java.lang.Long.parseLong;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.COMPLETED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.PENDING;
import static org.springframework.http.MediaType.APPLICATION_JSON;

@RunWith(MockitoJUnitRunner.class)
public class AggregateReportResponseHandlerTest {

    private static final long ReportId = 123;
    private static final URI ReportUri = URI.create("/REPORTS/123");
    private static final Long contentLength = 456L;

    @Mock
    private ReportService reportService;

    @Mock
    private ReportContentService contentService;

    @Captor
    private ArgumentCaptor<Report> reportCaptor;

    private Report report;
    private Message<AggregateResponseMessage> message;
    private AggregateReportResponseHandler handler;

    @Before
    public void setup() {
        report = Report.builder()
                .id(ReportId)
                .status(PENDING)
                .build();

        final AggregateResponseMessage payload = AggregateResponseMessage.builder()
                .id(ReportId)
                .resultCount(456)
                .status(COMPLETED)
                .build();
        message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));

        when(reportService.findOneById(eq(ReportId))).thenAnswer(invocation -> Optional.of(report));

        final Properties properties = new Properties();
        properties.put(Headers.CONTENT_LENGTH, contentLength);
        when(contentService.readProperties(eq(report), eq(APPLICATION_JSON))).thenReturn(properties);
        when(contentService.createUri(eq(report), eq(APPLICATION_JSON))).thenReturn(ReportUri);

        handler = new AggregateReportResponseHandler(reportService, contentService);
    }

    @Test
    public void itShouldUpdateACompletedReport() {
        handler.handleAggregateReportResponse(message);
        verify(contentService).readProperties(eq(report), eq(APPLICATION_JSON));
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(COMPLETED);
        assertThat(reportCaptor.getValue().getReportResourceUri()).isEqualTo(ReportUri);
        assertThat(parseLong(reportCaptor.getValue().getMetadata().get("totalCount"))).isEqualTo(message.getPayload().getResultCount());
    }

    @Test
    public void itShouldHandleAnUnknownReport() {
        when(reportService.findOneById(anyLong())).thenReturn(Optional.empty());

        handler.handleAggregateReportResponse(message);
        verify(reportService).findOneById(eq(ReportId));
        verifyZeroInteractions(contentService);
        verify(reportService, never()).update(any(Report.class));
    }

    @Test
    public void itShouldAbortIfReportIsAlreadyFailed() {
        report = report.copy()
                .status(FAILED)
                .build();

        handler.handleAggregateReportResponse(message);
        verifyZeroInteractions(contentService);
        verify(reportService, never()).update(any(Report.class));
    }

    @Test
    public void itShouldFailAReportIfTheStatusIsInvalid() {
        final AggregateResponseMessage payload = AggregateResponseMessage.builder()
                .id(ReportId)
                .resultCount(456)
                .build();
        message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));

        handler.handleAggregateReportResponse(message);
        verifyZeroInteractions(contentService);
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    @Test
    public void itShouldFailAReportIfTheStatusIsCompletedAndContentLengthIsInvalid() {
        final Properties properties = new Properties();
        when(contentService.readProperties(eq(report), eq(APPLICATION_JSON))).thenReturn(properties);

        handler.handleAggregateReportResponse(message);
        verify(contentService).readProperties(eq(report), eq(APPLICATION_JSON));
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    @Test
    public void itShouldFailAReportIfTheStatusIsCompletedAndResultCountIsInvalid() {
        final AggregateResponseMessage payload = AggregateResponseMessage.builder()
                .id(ReportId)
                .status(COMPLETED)
                .build();
        message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));

        handler.handleAggregateReportResponse(message);
        verify(contentService).readProperties(eq(report), eq(APPLICATION_JSON));
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

    @Test
    public void itShouldUpdateAFailedReport() {
        final AggregateResponseMessage payload = AggregateResponseMessage.builder()
                .id(ReportId)
                .status(FAILED)
                .build();
        message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));
        handler.handleAggregateReportResponse(message);
        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }
}