createDockerfile {
    environmentVariable("MAX_HEAP_SIZE", "-Xmx768m")
}

dependencies {
    implementation project(':rdw-reporting-common')
    implementation project(':rdw-reporting-common-web')

    implementation 'org.opentestsystem.rdw.common:rdw-common-archive'
    implementation 'org.opentestsystem.rdw.common:rdw-common-model'
    implementation 'org.opentestsystem.rdw.common:rdw-common-multi-tenant'
    implementation 'org.opentestsystem.rdw.common:rdw-common-security'
    implementation 'org.opentestsystem.rdw.common:rdw-common-status'
    implementation 'org.opentestsystem.rdw.common:rdw-common-utils'

    implementation 'com.amazon.redshift:redshift-jdbc42-no-awssdk:1.2.8.1005'
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.healthmarketscience.sqlbuilder:sqlbuilder:2.1.7'  // this shouldn't be necessary, why??
    implementation 'org.apache.commons:commons-csv'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
    implementation 'org.springframework.integration:spring-integration-security'

    // this is for retrying connection to config server
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.retry:spring-retry'

    testImplementation project(path: ':rdw-reporting-common', configuration: 'tests')
    testImplementation project(path: ':rdw-reporting-common-web', configuration: 'tests')
    testImplementation 'org.apache.commons:commons-math3:3.6.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testImplementation 'org.springframework.security:spring-security-test'
}

// Task to run RST (redshift integration tests).
//
// RSTs require AWS databases. The convention is for developers to use the CI instances and either
// use the CI schemas or create personal schemas with a prefix. Using the CI schemas can lead to
// conflicts so let's use developer Bob as our example for running RSTs ...
//
// Note that this does *not* run the schema scripts, it assumes test databases are in good shape.
// If you need to run the schema scripts you'll need to set gradle properties for the data sources, e.g.:
/*
gradle -Pschema_prefix=bob_ \
-Predshift_url=jdbc:redshift://rdw-qa.cibkulpjrgtr.us-west-2.redshift.amazonaws.com:5439/ci \
-Predshift_user=bob -Predshift_password=password \
cleanReportingOlapTest migrateReportingOlapTest
 */
//
// To run these tests locally, you must either manually adjust the application-redshift.yml file
// (but don't check in your changes!) or set environment variables. If you are using the default
// CI data resources with personal schemas you should set:
//   DATASOURCES_OLAP_RO_USERNAME
//   DATASOURCES_OLAP_RO_PASSWORD
// If you are running from the command-line you can use local bash export to do it in one command, e.g.:
/*
(export DATASOURCES_OLAP_RO_USERNAME=bob; \
 export DATASOURCES_OLAP_RO_PASSWORD=password; \
 gradle rst)
*/
task RST(type: Test) {
    include '**/*RST.*'
    group = 'Verification'
    description = 'Runs the redshift integration tests (slow!).'
    outputs.upToDateWhen { false }
    doFirst {
        println "Running Redshift System Tests..."
    }
}

