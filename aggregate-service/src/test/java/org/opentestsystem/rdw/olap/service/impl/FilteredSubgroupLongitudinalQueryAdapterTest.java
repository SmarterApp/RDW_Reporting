package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.service.LongitudinalYearGradeService;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anySet;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.service.impl.AggregateTestUtils.toLongitudinalQueryBuilderWithCommonAttributes;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Most of the functionality is shared and tested by FilteredSubgroupQueryAdapter's Test
 */
@SuppressWarnings("unchecked")
public class FilteredSubgroupLongitudinalQueryAdapterTest {

    private FilteredSubgroupLongitudinalQueryAdapter queryAdapter;
    private Set<String> asmtGradeCodes = of("11", "08", "07");
    private final List<YearGradePair> yearGradePairs = ImmutableList.of(new YearGradePair(1999, "11"), new YearGradePair(1996, "08"), new YearGradePair(1995, "07"));
    private final String overallSubgroup = Overall.name();

    @Before
    public void setUp() {

        final LongitudinalYearGradeService longitudinalYearGradeService = mock(LongitudinalYearGradeService.class);
        when(longitudinalYearGradeService.toYearGradePairs(anyInt(), anySet())).thenReturn(yearGradePairs);
        queryAdapter = new FilteredSubgroupLongitudinalQueryAdapter(mock(QueryProviderRepositoryHelper.class), longitudinalYearGradeService);
    }

    @Test
    public void itShouldConvertQueryIntoMultipleQueriesPerOrganization() {

        final LongitudinalReportQuery query = LongitudinalReportQuery.builder()
                .assessmentGradeCodes(asmtGradeCodes)
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .toSchoolYear(1999)
                .includeState(true)
                .districtIds(of(-19L, -29L))
                .schoolIds(of(123L))
                .subgroup(overallSubgroup, StudentFilters.builder().genderCodes(of("male")).build())
                .build();

        final StudentFilters filters = query.getSubgroups().get(overallSubgroup);

        final LongitudinalOrganizationQuery stateQuery = toLongitudinalQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .genderCodes(query.getSubgroups().get(overallSubgroup).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(overallSubgroup)
                .gradeYearPairs(yearGradePairs)
                .build();

        final LongitudinalOrganizationQuery schoolQuery = toLongitudinalQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.School)
                .organizationIds(query.getSchoolIds())
                .genderCodes(query.getSubgroups().get(overallSubgroup).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(overallSubgroup)
                .gradeYearPairs(yearGradePairs)
                .build();

        final LongitudinalOrganizationQuery districtQuery = toLongitudinalQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.District)
                .organizationIds(query.getDistrictIds())
                .genderCodes(query.getSubgroups().get(overallSubgroup).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(overallSubgroup)
                .gradeYearPairs(yearGradePairs)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldConvertQueryIntoMultipleQueriesPerSubject() {
        final LongitudinalReportQuery query = LongitudinalReportQuery.builder()
                .assessmentGradeCodes(asmtGradeCodes)
                .subjectCodes(of(MATH.code(), ELA.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .toSchoolYear(1999)
                .includeState(true)
                .subgroup(overallSubgroup, StudentFilters.builder().genderCodes(of("male")).build())
                .build();

        final StudentFilters filters = query.getSubgroups().get(overallSubgroup);

        final LongitudinalReportQuery mathQuery = query.copy().subjectCodes(of(MATH.code())).build();

        final LongitudinalOrganizationQuery stateQuery = toLongitudinalQueryBuilderWithCommonAttributes(mathQuery, filters)
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .genderCodes(query.getSubgroups().get(overallSubgroup).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(overallSubgroup)
                .gradeYearPairs(yearGradePairs)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(stateQuery.copy().subjectCode(ELA.code()).build(), OrganizationType.State));
    }

    @Test
    public void itShouldNotSupportMultipleSubjects() {
        assertThat(queryAdapter.isSupportMultipleSubjects()).isFalse();
    }
}