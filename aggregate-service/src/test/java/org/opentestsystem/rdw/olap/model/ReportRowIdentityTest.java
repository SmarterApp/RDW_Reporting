package org.opentestsystem.rdw.olap.model;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportRowIdentityTest {

    private ActiveAssessment assessmentA;
    private ActiveAssessment assessmentB;
    private Organization organizationA;
    private Organization organizationB;
    private Dimension dimensionA;
    private Dimension dimensionB;
    private Measures measuresA;
    private Measures measuresB;

    @Before
    public void setup() {
        final ActiveAssessment.Builder assessmentBuilder = ActiveAssessment.builder()
                .gradeCode("3")
                .subjectCode("Math")
                .examSchoolYear(2016);
        assessmentA = assessmentBuilder.id(1).build();
        assessmentB = assessmentBuilder.id(2).build();

        final Organization.Builder organizationBuilder = Organization.builder()
                .organizationType(OrganizationType.School)
                .name("A School")
                .name("natural_id");
        organizationA = organizationBuilder.id(1L).build();
        organizationB = organizationBuilder.id(2L).build();

        final Dimension.Builder dimensionBuilder = Dimension.builder()
                .type(DimensionType.Gender);
        dimensionA = dimensionBuilder.code("Male").build();
        dimensionB = dimensionBuilder.code("Female").build();

        measuresA = Measures.builder()
                .avgScaleScore(1234)
                .avgStdErr(12)
                .level1Count(1)
                .level2Count(2)
                .level3Count(3)
                .level4Count(4)
                .build();
        measuresB = Measures.builder()
                .avgScaleScore(4321)
                .avgStdErr(21)
                .level1Count(4)
                .level2Count(3)
                .level3Count(2)
                .level4Count(1)
                .build();

    }

    @Test
    public void itShouldIdentifyReportRowsWithDifferentMeasuresAsEquivalent() {
        final ReportRow.Builder builder = ReportRow.builder()
                .assessment(assessmentA)
                .organization(organizationA)
                .dimension(dimensionA);
        final ReportRow row = builder.measures(measuresA).build();
        final ReportRow equivalentRow = builder.measures(measuresB).build();
        assertThat(new ReportRowIdentity(row)).isEqualTo(new ReportRowIdentity(equivalentRow));
        assertThat(new ReportRowIdentity(row).hashCode()).isEqualTo(new ReportRowIdentity(equivalentRow).hashCode());
    }

    @Test
    public void itShouldNotIdentifyDifferentRowsAsEquivalent() {
        final ReportRow row = ReportRow.builder()
                .assessment(assessmentA)
                .organization(organizationA)
                .dimension(dimensionA)
                .measures(measuresA)
                .build();

        assertThat(new ReportRowIdentity(row))
                .isNotEqualTo(new ReportRowIdentity(ReportRow.builder()
                        .assessment(assessmentB)
                        .organization(organizationA)
                        .dimension(dimensionA)
                        .measures(measuresA)
                        .build()));
    }
}