package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.stream.Collectors.toSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.IEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.LEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.StudentEnrolledGrade;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})

@Import({JdbcCustomAggregateReportRowRepository.class})
@Sql(scripts = {"classpath:OlapEntitiesSetup.sql"})
public class JdbcCustomAggregateReportRowRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository reportRepository;

    @Autowired
    JdbcTemplate template;

    @Value("${app.state.name}")
    private String stateName;

    private ReportRow stateOverall;
    private ReportQuery.Builder queryBuilder;
    private int ethnicityCount;
    private int genderCount;
    private int districtsCount;

    @Before
    public void setUp() {

        ethnicityCount = countRowsInTable(template, "ethnicity");
        genderCount = countRowsInTable(template, "gender");
        districtsCount = countRowsInTable(template, "district");

        queryBuilder = ReportQuery.builder()
                .asmtGrades(of(-8))
                .includeState(true)
                .schoolYears(of(1999))
                .subjectIds(of(1))
                .assessmentType(AssessmentType.ICA)
                .dimensionType(Overall)
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"));

        final ImmutableSet<Double> scaleScores = of(2500.0, 2400.0, 2300.0, 2100.0, 2000.0);
        final DescriptiveStatistics stats = new DescriptiveStatistics();
        for (final Double scaleScore : scaleScores) {
            stats.addValue(scaleScore);
        }
        stateOverall = ReportRow.builder()
                .assessment(new Assessment(-8, -8, 1))
                .examSchoolYear(1999)
                .organization(new Organization(stateName, null, State))
                .dimension(new Dimension(null, Overall))
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(stats.getMean()))
                        .avgStdErr((int) Math.round(stats.getStandardDeviation() / Math.sqrt(scaleScores.size())))
                        .level1Count(2)
                        .level2Count(1)
                        .level3Count(1)
                        .level4Count(1)
                        .build())
                .build();
    }

    @Test
    public void itShouldFindByQuery() {
        assertThat(reportRepository.findByQuery(queryBuilder.build())).usingFieldByFieldElementComparator().containsExactly(stateOverall);
        assertThat(reportRepository.findByQuery(queryBuilder.subjectIds(of(2)).build())).isEmpty();

        assertThat(reportRepository.findByQuery(ReportQuery.builder()
                .asmtGrades(of(-9))
                .includeState(true)
                .schoolYears(of(1999))
                .subjectIds(of(2))
                .assessmentType(AssessmentType.SUMMATIVE)
                .dimensionType(Overall)
                .build()).size()).isEqualTo(1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForIAB() {
        reportRepository.findByQuery(queryBuilder.assessmentType(AssessmentType.IAB).build());
    }

    @Test
    public void itShouldChooseAllDistrictsFlagOverListOfDistrictIds() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .districts(ImmutableMap.of(-100, false))
                .includeAllDistricts(true)
                .build()).size()).isEqualTo(districtsCount);
    }

    @Test
    public void itShouldFindByQueryWithIEP() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(IEP))
                .build()).size()).isEqualTo((districtsCount + 1) * 2);

        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(IEP))
                .build());

        assertThat(rows.size()).isEqualTo(2);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(countStudents(row.getMeasures())).isEqualTo(1);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(0);
        }
    }

    @Test
    public void itShouldFindByQueryWithLEP() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(LEP))
                .build()).size()).isEqualTo((districtsCount + 1) * 2);

        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(LEP))
                .build());

        assertThat(rows.size()).isEqualTo(2);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(countStudents(row.getMeasures())).isEqualTo(0);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(1);
        }
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantage() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(EconomicDisadvantage))
                .build()).size()).isEqualTo((districtsCount + 1) * 2);

        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(EconomicDisadvantage))
                .build());

        assertThat(rows.size()).isEqualTo(2);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(countStudents(row.getMeasures())).isEqualTo(1);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(0);
        }
    }

    @Test
    public void itShouldFindByQueryWithSection504() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(Section504))
                .build()).size()).isEqualTo((districtsCount + 1) * 3);

        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(Section504))
                .build());

        assertThat(rows.size()).isEqualTo(3);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(countStudents(row.getMeasures())).isEqualTo(0);
            else if (row.getDimension().getCode().equalsIgnoreCase("yes")) assertThat(countStudents(row.getMeasures())).isEqualTo(0);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(1);
        }
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatus() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(MigrantStatus))
                .build()).size()).isEqualTo((districtsCount + 1) * 3);

        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(MigrantStatus))
                .build());

        assertThat(rows.size()).isEqualTo(3);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(countStudents(row.getMeasures())).isEqualTo(0);
            else if (row.getDimension().getCode().equalsIgnoreCase("yes")) assertThat(countStudents(row.getMeasures())).isEqualTo(1);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(0);
        }
    }

    @Test
    public void itShouldFindByQueryWithEnrolledGrade() {
        final List<ReportRow> rows = reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .schoolIds(of(-8))
                .dimensionTypes(of(StudentEnrolledGrade))
                .build());

        assertThat(rows.size()).isEqualTo(2);
        for (final ReportRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("-5")) assertThat(countStudents(row.getMeasures())).isEqualTo(1);
            else assertThat(countStudents(row.getMeasures())).isEqualTo(2);
        }
    }

    @Test
    public void itShouldBackFillMissingDataForAllDimensionsButStudentEnrolledGrade() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay LEFT JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-5) AND a.subject_id IN (2) AND a.type_id = 1 AND ay.school_year IN (1888)", Integer.class);


        assertThat(reportRepository.findByQuery(queryBuilder
                .assessmentType(AssessmentType.ICA)
                .includeState(false)
                .includeAllDistricts(true)
                .schoolIds(null)
                .schoolYears(of(1888))
                .subjectIds(of(2))
                .asmtGrades(of(-5))
                .dimensionTypes(of(Overall))
                .build()).size()).isEqualTo(asmtCount * districtsCount);

        //we do not back-fill the data for the StudentEnrolledGrade
        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, StudentEnrolledGrade)).build()).size())
                .isEqualTo(asmtCount * districtsCount);

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP, IEP)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 2 + 1));

        assertThat(reportRepository.findByQuery(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP, IEP, EconomicDisadvantage)).build()).size())
                .isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 2 + 2 + 1));
    }

    @Test
    public void itShouldEstimateReportRowCount() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay LEFT JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-5, -9) AND a.subject_id IN (1, 2) AND a.type_id = 1 AND ay.school_year IN (1888, 1999)", Integer.class);
        queryBuilder
                .assessmentType(AssessmentType.ICA)
                .includeState(false)
                .includeAllDistricts(true)
                .schoolIds(null)
                .schoolYears(of(1888, 1999))
                .subjectIds(of(1, 2))
                .asmtGrades(of(-5, -9));

        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).build())).isEqualTo(asmtCount * districtsCount);
        //for the StudentEnrolledGrade we always assume that there is one entry found
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, StudentEnrolledGrade)).build())).isEqualTo(asmtCount * districtsCount * 2);
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP, IEP)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 2 + 1));
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall, Gender, Ethnicity, MigrantStatus, Section504, LEP, IEP, EconomicDisadvantage)).build())).isEqualTo(asmtCount * districtsCount * (genderCount + ethnicityCount + 3 + 3 + 2 + 2 + 2 + 1));

        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).includeState(true).includeAllDistricts(false).build())).isEqualTo(asmtCount);
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).includeState(false).includeAllDistricts(false).districts(ImmutableMap.of(-9, false)).build())).isEqualTo(asmtCount);
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).includeState(false).includeAllDistricts(false).districts(ImmutableMap.of(-9, true)).build())).isEqualTo(asmtCount * 3);
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).includeState(true).includeAllDistricts(false).districts(ImmutableMap.of(-9, true)).build())).isEqualTo(asmtCount * 4);
        assertThat(reportRepository.estimateReportRowCount(queryBuilder.dimensionTypes(of(Overall)).includeState(false).includeAllDistricts(false).districts(null).schoolIds(of(-9)).build())).isEqualTo(asmtCount);
    }

    @Test
    public void itShouldFindByQueryWithGender() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .schoolIds(of(-9))
                .dimensionTypes(of(Gender))
                .build()).size()).isEqualTo(countRowsInTable(template, "gender"));
    }

    @Test
    public void itShouldFindByQueryWithAllSchoolsForDistricts() {
        final ReportQuery query = queryBuilder
                .includeState(false)
                .includeAllDistricts(false)
                .districts(ImmutableMap.of(-9, true))
                .build();

        final List<ReportRow> expectedRows = reportRepository.findByQuery(query
                .copy()
                .districts(ImmutableMap.of(-9, false))
                .schoolIds(of(-9, -10))
                .build());

        assertThat(reportRepository.findByQuery(query)).usingFieldByFieldElementComparator().containsOnlyElementsOf(expectedRows);

        // (1 state + 3 districts + 2 schools) = 6
        assertThat(reportRepository.findByQuery(query
                .copy()
                .includeState(true)
                .includeAllDistricts(true)
                .districts(ImmutableMap.of(-9, false, -8, false, -7, false))
                .schoolIds(of(-9, -8)).build()).size()).isEqualTo(6);

        // (1 state + 3 districts + 2 schools) X 5 dim = 30
        assertThat(reportRepository.findByQuery(query
                .copy()
                .includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(Overall, Gender, Ethnicity))
                .districts(ImmutableMap.of(-9, false, -8, false, -7, false))
                .schoolIds(of(-9, -8)).build()).size()).isEqualTo(30);


        // (1 state + 3 districts + 2 schools(in district 9) + 2 schools) = 8
        //NOTE: in this case we get duplicate school -9, but this should not happen with the UI controlling the selection
        assertThat(reportRepository.findByQuery(query
                .copy()
                .includeState(true)
                .includeAllDistricts(true)
                .districts(ImmutableMap.of(-9, true, -8, false, -7, false))
                .schoolIds(of(-9, -8)).build()).size()).isEqualTo(8);
    }

    @Test
    public void itShouldFindByQueryWithEthnicity() {
        // district -99 does not exist
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .districts(ImmutableMap.of(-99, false))
                .dimensionTypes(of(Ethnicity))
                .build()).size()).isZero();

        final List<ReportRow> reportRows = reportRepository.findByQuery(queryBuilder.
                includeState(false)
                .districts(ImmutableMap.of(-9, false))
                .dimensionTypes(of(Ethnicity))
                .build());

        assertThat(reportRows.size()).isEqualTo(countRowsInTable(template, "ethnicity"));
        assertThat(reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(Collectors.toList()).size()).isEqualTo(1);

        assertThat(reportRepository.findByQuery(queryBuilder.
                includeState(true)
                .includeAllDistricts(true)
                .dimensionTypes(of(Ethnicity))
                .build()).size()).isEqualTo((districtsCount + 1) * countRowsInTable(template, "ethnicity"));
    }

    @Test
    public void itShouldFindByQueryWithMultipleValuesOfDiffParams() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay LEFT JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-8,-9) AND a.subject_id IN (1,2) AND a.type_id = 1 AND ay.school_year IN (1999, 2000)", Integer.class);

        final List<ReportRow> reportRows = reportRepository.findByQuery(queryBuilder
                .assessmentType(AssessmentType.ICA)
                .includeState(true)
                .asmtGrades(of(-8, -9))
                .subjectIds(of(1, 2))
                .schoolYears(of(1999, 2000))
                .dimensionTypes(of(Ethnicity, Gender, Overall))
                .build());

        assertThat(reportRows.size()).isEqualTo(asmtCount * (ethnicityCount + genderCount + 1));

        final List<ReportRow> rowsWithNonZeroValues = reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(Collectors.toList());
        assertThat(rowsWithNonZeroValues.size()).isEqualTo(11);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getOrganization).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator()
                .containsOnly(new Organization(stateName, null, State));

        // This verifies that the data is grouped by asmt_id to support a use case when there are two assessments for
        // the same subject/grade/type and exam school year.
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                new Assessment(-8, -8, 1),
                new Assessment(-9, -9, 2));

        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getExamSchoolYear).filter(y -> (y == 1999)).count()).isEqualTo(8);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getExamSchoolYear).filter(y -> (y == 2000)).count()).isEqualTo(3);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).filter(a -> (a.getSubjectId() == 1)).count()).isEqualTo(5);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).filter(a -> (a.getSubjectId() == 2)).count()).isEqualTo(6);
    }

    @Test
    @Sql(scripts = {"classpath:OlapEntitiesSetup.sql"},
            statements = {"INSERT INTO  fact_student_exam (id, school_year, asmt_id, asmt_grade_id, completeness_id," +
                    "                                    administration_condition_id, performance_level," +
                    "                                    scale_score, scale_score_std_err, grade_id, student_id, school_id," +
                    "                                    iep, lep, section504, economic_disadvantage, migrant_status," +
                    "                                    claim1_scale_score, claim1_scale_score_std_err,claim1_category," +
                    "                                    claim2_scale_score, claim2_scale_score_std_err,claim2_category," +
                    "                                    claim3_scale_score, claim3_scale_score_std_err,claim3_category," +
                    "                                    claim4_scale_score, claim4_scale_score_std_err,claim4_category," +
                    "                                    completed_at, updated, update_import_id, migrate_id) VALUES " +
                    "(-34, 2000 , -10, -9, -9, -9, 1, 2500, 17, -8, -9, -9, true, true, false, false, true,  2000, 0.11, 1, 2100, 0.12, 2, 2500, 0.13, 3, 3500, .15, 4, '2016-08-14 19:05:33.000000', '2016-09-14 19:05:33.000000', -1, -1)",
                    "INSERT INTO asmt_active_year (asmt_id, school_year) VALUES (-10, 2000)"})
    public void itShouldGroupByAssessmentId() {

        //if two different ICAs are administered at the same school year, we should group the data by the asmt id

        final List<ReportRow> reportRows = reportRepository.findByQuery(queryBuilder
                .asmtGrades(of(-9))
                .subjectIds(of(2))
                .schoolYears(of(2000))
                .dimensionTypes(of(Overall))
                .build());
        assertThat(reportRows.stream().map(ReportRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                new Assessment(-10, -9, 2),
                new Assessment(-9, -9, 2));
    }

    private int countStudents(final Measures measures) {
        return measures.getLevel1Count() + measures.getLevel2Count() + measures.getLevel3Count() + measures.getLevel4Count();
    }
}