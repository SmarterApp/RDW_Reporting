package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AltScoreOrganizationQuery;
import org.opentestsystem.rdw.olap.model.AltScoreReportResult;
import org.opentestsystem.rdw.olap.repository.AltScoreReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AltScoreRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

/**
 * Yes, this test suite is anemic to say the least. However, the alt score implementation was
 * copied from the claim score implementation so we really just need to test that the basic
 * SQL clauses are correct. No need to redo testing of dimensions, filters, etc.
 */
@Sql(scripts = {"classpath:AltScoreEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcAltScoreReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private AltScoreReportRepository repository;

    private AltScoreOrganizationQuery.Builder queryBuilder;

    // this test is for a user without embargo permissions
    private static final User user = User.builderExt()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            //only invalid district and school ids; repository should ignore them
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Before
    public void setUp() {
        queryBuilder = AltScoreOrganizationQuery.builder()
                .assessmentGradeCodes(of("-3"))
                .organizationType(State)
                .schoolYears(of(2000))
                .altScoreCodesBySubject(ImmutableMap.of("ELA", ImmutableSet.of("Alt")))
                .assessmentTypeCode(ICA.code())
                .dimensionType(Overall);
    }

    @Test
    public void itShouldReturnStateData() {
        final AltScoreReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.build(), State);
        assertThat(reportResult.isHasResults()).isTrue();
        assertThat(reportResult.getResultCount()).isEqualTo(1);

        final AltScoreRow.Builder rowBuilder = AltScoreRow.builder()
                .assessment(ActiveAssessment.builder().id(-9).gradeCode("-3").subjectCode("ELA").label("asmt-9").examSchoolYear(2000).build())
                .organization(Organization.builder().organizationType(State).build())
                .dimension(Dimension.builder().type(Overall).build());

        assertThat(reportResult.getPayload())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(rowBuilder
                                .altScoreCode("Alt")
                                .measures(Measures.builder()
                                    .avgScaleScore(106)
                                    .avgStdErr(11)
                                    .level1Count(2).level2Count(1).level3Count(1)
                                    .level4Count(0).level5Count(0).level6Count(0)
                                    .build())
                                .build());
    }
}
