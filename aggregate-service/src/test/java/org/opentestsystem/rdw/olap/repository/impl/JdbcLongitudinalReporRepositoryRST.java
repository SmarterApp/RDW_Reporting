package org.opentestsystem.rdw.olap.repository.impl;


import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.GradeYearPair;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.repository.LongitudinalReportRepository;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;
import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

/**
 * This test covers code in the {@link JdbcFilteredSubgroupReportRepository}, but not its base class.
 * The base class functionality is tested via {@link JdbcBasicReportRepository}.
 */
@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:LongitudinalEntitiesSetup.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:LongitudinalEntitiesTeardown.sql"})
})
@ActiveProfiles("redshift")
public class JdbcLongitudinalReporRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private JdbcTemplate template;

    @Autowired
    private LongitudinalReportRepository repository;

    private static final User user = User.builder()
            .id(UUID.randomUUID().toString())
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Test
    public void itShouldBackFillMissingData() {
        final List<LongitudinalRow> reportRows = repository.findByOrganizationType(user, LongitudinalReportQuery.builder()
                .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                .subjectCode(MATH.code())
                .dimensionType(Overall)
                .organizationType(State)
                .build(), OrganizationType.District).getPayload();

        final int districtCount = countRowsInTable(template, "district");
        assertThat(reportRows.size()).isEqualTo(districtCount * 3);
        //check that we have a back filled row
        assertThat(reportRows.stream().filter(r -> r.getMeasures().getStudentCount() == 0).count()).isEqualTo(districtCount * 3);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        repository.findByOrganizationType(user, LongitudinalReportQuery.builder().build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForSchoolOrganizationType() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .organizationType(School)
                .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                .subjectCode("test")
                .build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForDistrictOrganizationType() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .organizationType(District)
                        .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                        .subjectCode("test")
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .organizationType(State)
                        .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAssessmentType() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .dimensionType(DimensionType.Overall)
                        .organizationType(State)
                        .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                        .subjectCode("test")
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireDimension() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .organizationType(State)
                        .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                        .subjectCode("test")
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                        .subjectCode("test")
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYearGrades() {
        repository.findByOrganizationType(user, LongitudinalReportQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .subjectCode("test")
                        .organizationType(State)
                        .build()
                , OrganizationType.State);
    }


    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForAllSchoolsInState() {
        final LongitudinalReportQuery query = LongitudinalReportQuery.builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .organizationType(State)
                .gradeYearPairs(ImmutableList.of(new GradeYearPair("04", 1998), new GradeYearPair("05", 1999), new GradeYearPair("06", 2000)))
                .subjectCode("test")
                .build();
        repository.findByOrganizationType(user, query, School);
    }
}