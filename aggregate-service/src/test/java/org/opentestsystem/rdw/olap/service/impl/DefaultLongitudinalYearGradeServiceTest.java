package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.service.AssessmentGradeService;
import org.opentestsystem.rdw.reporting.common.model.Grade;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultLongitudinalYearGradeServiceTest {
    private DefaultLongitudinalYearGradeService service;

    @Before
    public void setUp() {
        final AssessmentGradeService assessmentGradeService = mock(AssessmentGradeService.class);
        when(assessmentGradeService.getAssessmentGrades()).thenReturn(ImmutableList.of(
                Grade.builder().code("06").sequence(9).build(),
                Grade.builder().code("07").sequence(10).build(),
                Grade.builder().code("08").sequence(11).build(),
                Grade.builder().code("09").sequence(12).build(),
                Grade.builder().code("10").sequence(13).build(),
                Grade.builder().code("11").sequence(14).build()));

        service = new DefaultLongitudinalYearGradeService(assessmentGradeService);
    }

    @Test
    public void itShouldReturnYearGradePair() {
        assertThat(service.toYearGradePairs(2018, ImmutableSet.of("11")))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new YearGradePair(2018, "11"));

        assertThat(service.toYearGradePairs(2018, ImmutableSet.of("11", "08", "07")))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new YearGradePair(2018, "11"), new YearGradePair(2015, "08"), new YearGradePair(2014, "07"));

        assertThat(service.toYearGradePairs(2018, ImmutableSet.of("08", "07", "06")))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new YearGradePair(2018, "08"), new YearGradePair(2017, "07"), new YearGradePair(2016, "06"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAtLeastOneCode() {
        service.toYearGradePairs(2018, ImmutableSet.of());
    }
}