package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.service.OrganizationSearchService;
import org.opentestsystem.rdw.olap.service.OrganizationService;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultOrganizationSearchServiceTest {

    private final User userWithoutPermission = user().build();
    private final User userWithStatewidePermission = user()
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.STATEWIDE)))
            .build();
    private final School school1 = School.builder().id(1L).districtId(1L).name("A School 1").build();
    private final School school2 = School.builder().id(2L).districtId(2L).name("A School 2").build();
    private final District district1 = District.builder().id(1L).name("A District 1").build();
    private final District district2 = District.builder().id(2L).name("A District 2").build();
    private final Set<Organization> AllOrgs = ImmutableSet.of(
            school1,
            school2,
            district1,
            district2
    );
    private OrganizationService organizationService;
    private OrganizationSearchService service;

    private User.Builder user() {
        return User.builder()
                .id("id")
                .username("username")
                .password("password");
    }

    @Before
    public void before() {
        this.organizationService = mock(OrganizationService.class);
        when(organizationService.getSchoolsAndDistricts()).thenReturn(AllOrgs);
        this.service = new DefaultOrganizationSearchService(organizationService);
    }

    @Test
    public void itShouldNotThrowExceptionOnNullSearch() {
        assertThat(service.getOrganizations(userWithStatewidePermission, null)).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyWhenMissingPermission() {
        assertThat(service.getOrganizations(userWithoutPermission, "A")).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyWhenSearchDoesntMatch() {
        assertThat(service.getOrganizations(userWithStatewidePermission, "3")).isEmpty();
    }

    @Test
    public void itShouldReturnAllOrgsForTextThatMatchesAllOrgNames() {
        assertThat(service.getOrganizations(userWithStatewidePermission, "A"))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(AllOrgs);
    }

    @Test
    public void itShouldReturnSomeOrgsForTextThatMatchesThoseOrgNames() {
        assertThat(service.getOrganizations(userWithStatewidePermission, "1"))
                .usingFieldByFieldElementComparator()
                .containsExactly(school1, district1);
    }

    @Test
    public void itShouldReturnSomeOrgsWhenTheUserIsOnlyEntitledToSomeOrgs() {

        final User user = user()
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .addDistrictId(1L)
                        .build())))
                .build();

        assertThat(service.getOrganizations(user, "A"))
                .usingFieldByFieldElementComparator()
                .containsExactly(school1, district1);
    }

}