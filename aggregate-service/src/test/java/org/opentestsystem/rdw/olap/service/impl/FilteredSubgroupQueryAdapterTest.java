package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.service.impl.AggregateTestUtils.toQueryBuilderWithCommonAttributes;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class FilteredSubgroupQueryAdapterTest {

    private FilteredSubgroupQueryAdapter queryAdapter;

    @Before
    public void setUp() {
        queryAdapter = new FilteredSubgroupQueryAdapter(mock(QueryProviderRepositoryHelper.class));
    }

    @Test
    public void itShouldConvertQueryIntoMultipleOrganizationQueries() {
        final String subgroupName = Overall.name();

        final FilteredSubgroupCustomAggregateReportQuery query = FilteredSubgroupCustomAggregateReportQuery.builder()
                .assessmentGradeCodes(of("-8"))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .schoolYears(of(1999))
                .includeState(true)
                .districtIds(of(-19L, -29L))
                .schoolIds(of(123L))
                .subgroup(subgroupName, StudentFilters.builder().genderCodes(of("male")).build())
                .build();

        final StudentFilters filters = query.getSubgroups().get(subgroupName);

        final AggregateReportQuery stateQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .genderCodes(query.getSubgroups().get(subgroupName).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupName)
                .build();

        final AggregateReportQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.School)
                .organizationIds(query.getSchoolIds())
                .genderCodes(query.getSubgroups().get(subgroupName).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupName)
                .build();

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.District)
                .organizationIds(query.getDistrictIds())
                .genderCodes(query.getSubgroups().get(subgroupName).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupName)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));

    }
}