package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.CacheConfiguration;
import org.opentestsystem.rdw.reporting.common.multitenant.StaticTenantIdUtil;
import org.opentestsystem.rdw.reporting.common.multitenant.TenantKeyGenerator;
import org.opentestsystem.rdw.reporting.common.test.CachingTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ContextConfiguration;

import java.lang.reflect.Method;

@ContextConfiguration(classes = {CacheConfiguration.class})
@CachingTest
public abstract class CachedRepositoryBackedIT extends RepositoryBackedIT {

    @Autowired
    protected CacheManager cacheManager;

    @Autowired
    protected CacheConfiguration cacheConfiguration;

    @Autowired
    protected TenantKeyGenerator tenantKeyGenerator;

    /**
     * Helper to get the tenant-qualified cached value.
     * This is a backward-compatible helper since most tests have a very simple cache key.
     * It has deep knowledge of the tenant key generator algorithm.
     *
     * @param cache cache name from AggregateServiceCache, e.g. "elases"
     * @param methodName method name, e.g. "findAll"
     * @return cache value
     */
    protected Cache.ValueWrapper getCachedValue(final String cache, final String methodName) {
        // tenant-qualified key name (matches key expression in the Cacheable annotation)
        final String tenantKey = StaticTenantIdUtil.tenantIdKey() + "_" + methodName;
        return cacheManager.getCache(cache).get(tenantKey);
    }

    /**
     * Helper to get the tenant-qualified cached value.
     * This is the most robust version of the helper with all options using the key generator.
     *
     * @param cache cache name from AggregateServiceCache, e.g. "elases"
     * @param method method being tested
     * @param params params for method call
     * @return cache value
     */
    protected Cache.ValueWrapper getCachedValue(final String cache, final Method method, final Object... params) {
        final String key = (String)tenantKeyGenerator.generate(null, method, params);
        return cacheManager.getCache(cache).get(key);
    }
}
