package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.springframework.core.task.TaskExecutor;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class CustomAggregateReportQueryHandlerTest extends AbstractAggregateQueryHandlerTest<AggregateRow,
        CustomAggregateReportResult,
        CustomAggregateReportQuery,
        AggregateOrganizationQuery> {

    private CustomAggregateReportRepository repository;
    private CustomAggregateQueryConverter queryAdapter;
    private CustomAggregateReportQueryHandler serviceUnderTest;

    @Override
    protected AggregateQueryHandler createServiceUnderTest(final AuthorizationService authorizationService, final AggregateReportSettings aggregateReportSettings, final TaskExecutor threadPoolTaskExecutor) {
        queryAdapter = mock(CustomAggregateQueryConverter.class);
        repository = mock(CustomAggregateReportRepository.class);
        serviceUnderTest = new CustomAggregateReportQueryHandler(repository, authorizationService, aggregateReportSettings, queryAdapter, threadPoolTaskExecutor);
        return serviceUnderTest;
    }

    @Override
    protected CustomAggregateReportResult getRepositoryResults() {
        return CustomAggregateReportResult.builder()
                .row(AggregateTestUtils.reportRow(OrganizationType.School, -123L, Overall).build())
                .build();
    }

    public ReportRepository getRepository() {
        return repository;
    }

    public AggregateQueryConverter getQueryAdapter() {
        return queryAdapter;
    }

    @Override
    protected AggregateOrganizationQuery getOrganizationTypeQuery() {
        return mock(AggregateOrganizationQuery.class);
    }

    @Override
    protected CustomAggregateReportQuery.Builder getAggregateQueryBuilderWithValidQuery() {
        return CustomAggregateReportQuery.builder()
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(of("-8"))
                .schoolYears(of(1999))
                .schoolIds(of(123L))
                .subjectCodes(of("Math"))
                .assessmentTypeCode(IAB.code());
    }

    @Override
    protected CustomAggregateReportQuery.Builder getEmtpyAggregateQueryBuilder() {
        return CustomAggregateReportQuery.builder();
    }

    @Override
    public void itShouldHandleQuery() {
        assertThat(serviceUnderTest.handles(CustomAggregateReportQuery.builder().build())).isTrue();
        assertThat(serviceUnderTest.handles(LongitudinalReportQuery.builder().build())).isFalse();

        assertThat(serviceUnderTest.handles(CustomAggregateReportQuery.builder().subgroup("test", StudentFilters.builder().build()).build())).isTrue();
        assertThat(serviceUnderTest.handles(LongitudinalReportQuery.builder().subgroup("test", StudentFilters.builder().build()).build())).isFalse();
    }

    @Override
    public void itShouldReturnReportResultBuilder() {
        assertThat(serviceUnderTest.getReportResultBuilder()).isInstanceOf(CustomAggregateReportResult.Builder.class);
    }

    @Test
    public void itShouldAddOverallDimension() {
        final CustomAggregateReportQuery query = getAggregateQueryBuilderWithValidQuery().dimensionTypes(null).build();

        final ArgumentCaptor<CustomAggregateReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(CustomAggregateReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getDimensionTypes()).contains(Overall);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() {
        serviceUnderTest.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().subjectCodes(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireConfiguredAssessmentWhenIncludeStateResults() {
        serviceUnderTest.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().includeState(true).assessmentTypeCode(ICA.code()).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        serviceUnderTest.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().includeState(false).schoolIds(ImmutableSet.of()).build());
    }
}