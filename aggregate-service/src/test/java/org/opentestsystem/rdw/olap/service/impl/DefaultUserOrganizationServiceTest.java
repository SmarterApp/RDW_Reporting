package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.service.OrganizationService;
import org.opentestsystem.rdw.olap.service.UserOrganizationService;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultUserOrganizationServiceTest {

    private final User userWithoutPermission = user().build();
    private final User userWithStatewidePermission = user()
            .permissionsById(permissions(
                    new Permission(AggregateRead, PermissionScope.STATEWIDE),
                    new Permission(EmbargoRead, PermissionScope.STATEWIDE)
            ))
            .build();
    private final School school1 = School.builder().id(1L).districtId(1L).name("A School 1").build();
    private final School school2 = School.builder().id(2L).districtId(2L).name("A School 2").build();
    private final District district1 = District.builder().id(1L).name("A District 1").build();
    private final District district2 = District.builder().id(2L).name("A District 2").build();
    private final Set<Organization> AllOrgs = of(
            school1,
            school2,
            district1,
            district2
    );
    private EmbargoRepository embargoRepository;
    private UserOrganizationService service;

    private User.Builder user() {
        return User.builderExt()
                .id("id")
                .username("username")
                .password("password");
    }

    private User.Builder user(final Set<Long> schoolIds, final Set<Long> districtIds) {
        final PermissionScope permissionScope = PermissionScope.builder()
                .addDistrictIds(districtIds)
                .addSchoolIds(schoolIds)
                .build();
        return user().permissionsById(permissions(
                new Permission(AggregateRead, permissionScope),
                new Permission(EmbargoRead, permissionScope)
        ));
    }

    @Before
    public void before() {
        final OrganizationService organizationService = mock(OrganizationService.class);
        when(organizationService.getSchoolsAndDistricts()).thenReturn(AllOrgs);
        this.embargoRepository = mock(EmbargoRepository.class);
        this.service = new DefaultUserOrganizationService(organizationService, this.embargoRepository);
    }

    @Test
    public void itShouldReturnAllOrgsOnEmptyQuery() {
        assertThat(service.getOrganizations(
                userWithStatewidePermission,
                OrganizationQuery.builder().build()))
                .containsOnly(district1, district2, school1, school2);
    }

    @Test
    public void itShouldReturnNoOrgsOnBlankNameQuery() {
        assertThat(service.getOrganizations(
                userWithStatewidePermission,
                OrganizationQuery.builder().name("").build()))
                .isEmpty();
    }

    @Test
    public void itShouldReturnEmptyWhenMissingPermission() {
        assertThat(service.getOrganizations(userWithoutPermission, OrganizationQuery.builder().name("A").build())).isEmpty();
    }

    @Test
    public void itShouldReturnEmptyWhenSearchDoesntMatch() {
        assertThat(service.getOrganizations(userWithStatewidePermission, OrganizationQuery.builder().name("3").build())).isEmpty();
    }

    @Test
    public void itShouldReturnAllOrgsForTextThatMatchesAllOrgNames() {
        assertThat(service.getOrganizations(userWithStatewidePermission, OrganizationQuery.builder().name("A").build()))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(AllOrgs);
    }

    @Test
    public void itShouldReturnSomeOrgsForTextThatMatchesThoseOrgNames() {
        assertThat(service.getOrganizations(userWithStatewidePermission, OrganizationQuery.builder().name("1").build()))
                .usingFieldByFieldElementComparator()
                .containsExactly(school1, district1);
    }

    @Test
    public void itShouldReturnSomeOrgsWhenTheUserIsOnlyEntitledToSomeOrgs() {

        final User user = user()
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .addDistrictId(1L)
                        .build())))
                .build();

        assertThat(service.getOrganizations(user, OrganizationQuery.builder().name("A").build()))
                .usingFieldByFieldElementComparator()
                .containsExactly(school1, district1);
    }

    @Test
    public void itShouldOnlyReturnDistrictsWithMatchingTypeAndId() {
        assertThat(service.getOrganizations(
                userWithStatewidePermission,
                OrganizationQuery.builder()
                        .types(of(OrganizationType.District))
                        .ids(of(1L))
                        .build()))
                .containsOnly(district1);
    }

    @Test
    public void itShouldOnlyReturnSchoolsWithMatchingTypeAndId() {
        assertThat(service.getOrganizations(
                userWithStatewidePermission,
                OrganizationQuery.builder()
                        .types(of(OrganizationType.School))
                        .ids(of(1L))
                        .build()))
                .containsOnly(school1);
    }

    @Test
    public void itShouldFilterTypeAndIdResultsByUserPermissions() {
        final User user = user()
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .addDistrictId(1L)
                        .build())))
                .build();

        assertThat(service.getOrganizations(
                user,
                OrganizationQuery.builder()
                        .types(of(OrganizationType.School))
                        .ids(of(1L, 2L))
                        .build()))
                .containsOnly(school1);
    }

    @Test
    public void getDefaultOrganizationShouldReturnDistrictForSingleDistrictUser() {
        final User user = user(of(), of(1L)).build();
        assertThat(service.getDefaultOrganization(user)).contains(district1);
    }

    @Test
    public void getDefaultOrganizationShouldReturnDistrictForSingleDistrictMultiSchoolUser() {
        final User user = user(of(1L, 2L), of(1L)).build();
        assertThat(service.getDefaultOrganization(user)).contains(district1);
    }

    @Test
    public void getDefaultOrganizationShouldReturnDistrictForSingleDistrictAndSingleSchoolUser() {
        final User user = user(of(1L), of(1L)).build();
        assertThat(service.getDefaultOrganization(user)).contains(district1);
    }

    @Test
    public void getDefaultOrganizationShouldReturnSchoolForSingleSchoolUser() {
        final User user = user(of(1L), of()).build();
        assertThat(service.getDefaultOrganization(user)).contains(school1);
    }

    @Test
    public void getDefaultOrganizationShouldReturnEmptyForMultiSchoolUser() {
        final User user = user(of(1L, 2L), of()).build();
        assertThat(service.getDefaultOrganization(user)).isNotPresent();
    }

    @Test
    public void getDefaultOrganizationShouldReturnEmptyForMultiDistrictUser() {
        final User user = user(of(), of(1L, 2L)).build();
        assertThat(service.getDefaultOrganization(user)).isNotPresent();
    }

    @Test
    public void getDefaultOrganizationShouldReturnEmptyForMultiSchoolAndDistrictUser() {
        final User user = user(of(1L, 2L), of(1L, 2L)).build();
        assertThat(service.getDefaultOrganization(user)).isNotPresent();
    }

    @Test
    public void getDefaultOrganizationShouldReturnEmptyForStatewideUser() {
        assertThat(service.getDefaultOrganization(userWithStatewidePermission)).isNotPresent();
    }

    @Test
    public void getDefaultOrganizationShouldReturnEmptyForOrganizationlessUser() {
        assertThat(service.getDefaultOrganization(userWithoutPermission)).isNotPresent();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldReturnTrueWhenStatewideEmbargoEnabledAndUserIsStatewide() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(true);
        assertThat(service.hasEmbargoedOrganizations(userWithStatewidePermission)).isTrue();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldReturnFalseWhenStatewideEmbargoEnabledAndUserIsNotStatewide() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(true);
        assertThat(service.hasEmbargoedOrganizations(user(of(1L), of()).build())).isFalse();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldIgnoreStatewideFlagWhenOrgIsReleasedAndStateIsNot() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(true);
        when(embargoRepository.findAllEmbargoedDistrictIds()).thenReturn(newArrayList());
        assertThat(service.hasEmbargoedOrganizations(user(of(1L), of()).build())).isFalse();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldReturnTrueWhenOneOrMoreUserDistrictIsEmbargoed() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(false);
        when(embargoRepository.findAllEmbargoedDistrictIds()).thenReturn(newArrayList(1L));
        assertThat(service.hasEmbargoedOrganizations(userWithStatewidePermission)).isTrue();
        assertThat(service.hasEmbargoedOrganizations(user(of(), of(1L)).build())).isTrue();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldReturnTrueWhenOneOrMoreUserSchoolIsEmbargoed() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(false);
        when(embargoRepository.findAllEmbargoedDistrictIds()).thenReturn(newArrayList(1L));
        assertThat(service.hasEmbargoedOrganizations(userWithStatewidePermission)).isTrue();
        assertThat(service.hasEmbargoedOrganizations(user(of(1L), of()).build())).isTrue();
    }

    @Test
    public void hasEmbargoedOrganizationsShouldReturnFalseWhenNoUserOrganizationsAreEmbargoed() {
        when(embargoRepository.isStateEmbargoed()).thenReturn(false);
        when(embargoRepository.findAllEmbargoedDistrictIds()).thenReturn(newArrayList(1L));
        assertThat(service.hasEmbargoedOrganizations(user(of(2L), of(2L)).build())).isFalse();
    }

}
