package org.opentestsystem.rdw.olap.repository.impl;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcClaimReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private ClaimReportRepository repository;


    @Value("${reporting.state.name}")
    private String stateName;

    private AggregateOrganizationQuery.Builder queryBuilder;

    // this test is for a user without embargo permissions
    private static final User user = User.builder()
            .id(UUID.randomUUID().toString())
            .username("someone-10@somewhere.com")
            .password("redacted")
            //only invalid district and school ids; repository should ignore them
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Before
    public void setUp() {
        queryBuilder = AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .claimCodes(of("SOCK_2", "2"))
                .dimensionType(Overall);
    }

    @Test
    public void itShouldRunQuery() {
        final ClaimReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.build(), State);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isFalse();
        assertThat(reportResult.getResultCount()).isEqualTo(2);

        assertThat(reportResult.getPayload().size()).isEqualTo(2);
        assertThat(reportResult.getPayload().stream().map(ClaimRow::getClaimCode).collect(toList())).containsExactlyInAnyOrder("SOCK_2", "2");
    }
}