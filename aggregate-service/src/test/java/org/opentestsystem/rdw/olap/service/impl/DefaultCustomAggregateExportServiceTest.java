package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.context.MessageSource;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.Locale.US;
import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;

@RunWith(MockitoJUnitRunner.class)
public class DefaultCustomAggregateExportServiceTest {

    @Mock
    private CustomAggregateService aggregateService;

    @Mock
    private MessageSource messageSource;

    @Mock
    private User user;

    private DefaultCustomAggregateExportService service;

    @Before
    public void setup() {
        when(messageSource.getMessage(anyString(), any(Object[].class), eq(US)))
                .thenAnswer(invocationOnMock -> invocationOnMock.getArgumentAt(0, String.class));

        service = new DefaultCustomAggregateExportService(aggregateService, messageSource);
    }

    @Test
    public void itShouldReturnAResponseEntityWithExpectedHeaders() {
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        reportRows.addAll(reportRow(Gender));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, queryBuilder().build());
        final HttpHeaders headers = entity.getHeaders();
        assertThat(headers.getContentType()).isEqualTo(TEXT_CSV);
        assertThat(headers.getFirst(CONTENT_DISPOSITION)).contains("attachment");
    }

    @Test
    public void itShouldPrintIcaCsvHeaders() {
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        reportRows.addAll(reportRow(Gender));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, queryBuilder().build());
        final String[] rows = new String(entity.getBody().getByteArray()).split("\n");
        final String[] headers = rows[0].trim().split(",");
        assertThat(headers.length).isEqualTo(14);
        assertThat(headers).containsExactly(
                "report.aggregate.export.header.organization",
                "report.aggregate.export.header.natural-id",
                "report.aggregate.export.header.assessment-type",
                "report.aggregate.export.header.grade",
                "report.aggregate.export.header.year",
                "report.aggregate.export.header.dimension",
                "report.aggregate.export.header.student-count",
                "report.aggregate.export.header.score",
                "report.aggregate.export.header.standard-deviation",
                "report.ica.level.1.description",
                "report.ica.level.2.description",
                "report.ica.level.3.description",
                "report.ica.level.4.description",
                "report.aggregate.export.header.attributes");
    }

    @Test
    public void itShouldPrintIcaCsvData() {
        final ReportQuery query = queryBuilder().build();
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        reportRows.addAll(reportRow(Gender));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, query);
        final String[] rows = new String(entity.getBody().getByteArray()).split("\n");

        final ReportRow source = reportRows.get(1);
        final String[] data = rows[2].trim().split(",");
        assertThat(data.length).isEqualTo(13);
        assertThat(data).containsExactly(
                source.getOrganization().getName(),
                EMPTY,
                query.getAssessmentType().name(),
                String.valueOf(source.getAssessment().getGradeId()),
                "1998-99",
                "Gender: Male",
                String.valueOf(source.getMeasures().getLevel1Count() +
                        source.getMeasures().getLevel2Count() +
                        source.getMeasures().getLevel3Count() +
                        source.getMeasures().getLevel4Count()),
                String.valueOf(source.getMeasures().getAvgScaleScore()),
                String.valueOf(source.getMeasures().getAvgStdErr()),
                String.valueOf(source.getMeasures().getLevel1Count()),
                String.valueOf(source.getMeasures().getLevel2Count()),
                String.valueOf(source.getMeasures().getLevel3Count()),
                String.valueOf(source.getMeasures().getLevel4Count()));
    }

    @Test
    public void itShouldPrintIabCsvHeaders() {
        final ReportQuery query = queryBuilder().assessmentType(IAB).build();
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        reportRows.addAll(reportRow(Gender));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, query);
        final String[] rows = new String(entity.getBody().getByteArray()).split("\n");
        final String[] headers = rows[0].trim().split(",");
        assertThat(headers.length).isEqualTo(14);
        assertThat(headers).containsExactly(
                "report.aggregate.export.header.organization",
                "report.aggregate.export.header.natural-id",
                "report.aggregate.export.header.assessment",
                "report.aggregate.export.header.assessment-type",
                "report.aggregate.export.header.grade",
                "report.aggregate.export.header.year",
                "report.aggregate.export.header.dimension",
                "report.aggregate.export.header.student-count",
                "report.aggregate.export.header.score",
                "report.aggregate.export.header.standard-deviation",
                "report.iab.level.1.label",
                "report.iab.level.2.label",
                "report.iab.level.3.label",
                "report.aggregate.export.header.attributes");
    }

    @Test
    public void itShouldPrintIabCsvData() {
        final ReportQuery query = queryBuilder().assessmentType(IAB).build();
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        reportRows.addAll(reportRow(Gender));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, query);
        final String[] rows = new String(entity.getBody().getByteArray()).split("\n");

        final ReportRow source = reportRows.get(1);
        final String[] data = rows[2].trim().split(",");
        assertThat(data.length).isEqualTo(13);
        assertThat(data).containsExactly(
                source.getOrganization().getName(),
                EMPTY,
                source.getAssessment().getLabel(),
                query.getAssessmentType().name(),
                String.valueOf(source.getAssessment().getGradeId()),
                "1998-99",
                "Gender: Male",
                String.valueOf(source.getMeasures().getLevel1Count() +
                        source.getMeasures().getLevel2Count() +
                        source.getMeasures().getLevel3Count() +
                        source.getMeasures().getLevel4Count()),
                String.valueOf(source.getMeasures().getAvgScaleScore()),
                String.valueOf(source.getMeasures().getAvgStdErr()),
                String.valueOf(source.getMeasures().getLevel1Count()),
                String.valueOf(source.getMeasures().getLevel2Count()),
                String.valueOf(source.getMeasures().getLevel3Count()));
    }

    @Test
    public void itShouldPrintQueryAttributes() {
        final List<ReportRow> reportRows = new ArrayList<>();
        reportRows.addAll(reportRow(Overall));
        when(aggregateService.findByQuery(any(User.class), any(ReportQuery.class)))
                .thenReturn(reportRows);

        final ResponseEntity<ByteArrayResource> entity = service.exportReport(user, queryBuilder().build());
        final String[] rows = new String(entity.getBody().getByteArray()).split("\n");

        final String[] data = rows[1].trim().split(",");
        assertThat(data.length).isEqualTo(14);
        final String attributes = data[13];
        assertThat(attributes).matches("Report Date: .+");
    }

    private List<ReportRow> reportRow(final DimensionType dimensionType) {
        final List<ReportRow> rows = new ArrayList<>();
        switch (dimensionType) {
            case Overall:
                rows.add(rowBuilder().dimension(new Dimension(null, Overall)).build());
                break;
            case Gender:
                rows.add(rowBuilder().dimension(new Dimension("Male", Gender)).build());
                rows.add(rowBuilder().dimension(new Dimension("Female", Gender)).build());
                break;
        }
        return rows;
    }

    private ReportQuery.Builder queryBuilder() {
        return ReportQuery.builder()
                .schoolYears(of(1999))
                .assessmentType(ICA)
                .includeState(true)
                .includeAllDistricts(false)
                .asmtGrades(of(-8))
                .subjectIds(of(1));
    }

    private ReportRow.Builder rowBuilder() {
        final ImmutableSet<Double> scaleScores = of(2500.0, 2400.0, 2300.0, 2100.0, 2000.0);
        final DescriptiveStatistics stats = new DescriptiveStatistics();
        for (final Double scaleScore : scaleScores) {
            stats.addValue(scaleScore);
        }

        return ReportRow.builder()
                .assessment(Assessment.builder().id(-8).gradeId(-8).subjectCode("Math").label("asmt-8").build())
                .examSchoolYear(1999)
                .organization(Organization.builder().name("California").type(State).build())
                .dimension(new Dimension(null, Overall))
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(stats.getMean()))
                        .avgStdErr((int) Math.round(stats.getStandardDeviation() / Math.sqrt(scaleScores.size())))
                        .level1Count(2)
                        .level2Count(1)
                        .level3Count(1)
                        .level4Count(1)
                        .build());
    }
}