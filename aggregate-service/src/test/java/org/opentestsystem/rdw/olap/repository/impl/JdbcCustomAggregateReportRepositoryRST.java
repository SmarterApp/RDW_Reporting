package org.opentestsystem.rdw.olap.repository.impl;


import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.TestUtils.verifyBooleanDimensionStudentCountByYesNoUnknown;
import static org.opentestsystem.rdw.olap.TestUtils.verifyStateStudentCount;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.ELAS;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.IEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.LEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.StudentEnrolledGrade;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Sql(scripts = {"classpath:OlapEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcCustomAggregateReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository repository;

    @Autowired
    private JdbcTemplate template;

    @Value("${reporting.state.name}")
    private String stateName;

    private AggregateOrganizationQuery.Builder queryBuilder;
    private int ethnicityCount;
    private int genderCount;
    private int districtsCount;

    // this test is for a user without embargo permissions
    private static final User user = User.builder()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            //only invalid district and school ids; repository should ignore them
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Before
    public void setUp() {
        ethnicityCount = countRowsInTable(template, "ethnicity");
        genderCount = countRowsInTable(template, "gender");
        districtsCount = countRowsInTable(template, "district");

        queryBuilder = AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .dimensionType(Overall);
    }

    @Test
    public void itShouldFindByQueryWithIAB() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-3"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(ELA.code()))
                .assessmentTypeCode(IAB.code())
                .dimensionType(Overall).build(), State);

        assertThat(report.getPayload().size()).isEqualTo(2);

        Measures measures = report.getPayload().stream().filter(r -> r.getAssessment().getId() == -12).collect(toList()).get(0).getMeasures();
        assertThat(measures.getLevel1Count()).isEqualTo(3);
        assertThat(measures.getLevel2Count()).isEqualTo(1);
        assertThat(measures.getLevel3Count()).isEqualTo(1);
        assertThat(measures.getLevel4Count()).isNull();

        //verify that we backfilled asmt by id
        measures = report.getPayload().stream().filter(r -> r.getAssessment().getId() == -13).collect(toList()).get(0).getMeasures();
        assertThat(measures.getStudentCount()).isZero();
    }

    @Test
    public void itShouldFindByQuery() {
        assertThat(repository.findByOrganizationType(user, queryBuilder.subjectCodes(of(ELA.code())).build(), State).getPayload()).isEmpty();

        verifyStateStudentCount(repository.findByOrganizationType(user, AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-3"))
                .schoolYears(of(1999))
                .organizationType(State)
                .subjectCodes(of(ELA.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .build(), State).getPayload(), 6);
    }

    @Test
    public void itShouldReturnSubgroupKeyAsCustomDimensionForBackFilledAndDataRows() {
        final List<AggregateRow> reportRows = repository.findByOrganizationType(user, AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .subgroupKey("testSubgroupKey")
                .dimensionType(Overall).build(), District).getPayload();

        assertThat(reportRows.size()).isEqualTo(3);
        assertThat(reportRows.stream()
                .filter(r -> r.getDimension().getCode().equals("testSubgroupKey") && r.getDimension().getType() == DimensionType.Custom)
                .count()).isEqualTo(3);
        //check that we have a back filled row
        assertThat(reportRows.stream().filter(r -> r.getMeasures().getStudentCount() == 0).count()).isEqualTo(1);
    }

    @Test
    public void itShouldReturnState() {
        final ImmutableSet<Double> scaleScores = of(2500.0, 2400.0, 2300.0, 2100.0, 2000.0);
        final DescriptiveStatistics stats = new DescriptiveStatistics();
        for (final Double scaleScore : scaleScores) {
            stats.addValue(scaleScore);
        }
        final AggregateRow stateOverall = AggregateRow.builder()
                .assessment(ActiveAssessment.builder().id(-8).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build())
                .organization(Organization.builder().name(stateName).organizationType(State).build())
                .dimension(Dimension.builder().type(Overall).build())
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(stats.getMean()))
                        .avgStdErr((int) Math.round(stats.getStandardDeviation() / Math.sqrt(scaleScores.size())))
                        .level1Count(2)
                        .level2Count(1)
                        .level3Count(1)
                        .level4Count(1)
                        .build())
                .build();

        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder.build(), State);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(report.getPayload()).usingFieldByFieldElementComparator().containsExactly(stateOverall);
    }

    @Test
    public void itShouldReturnAllDistrictsInState() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .build(), District);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(report.getPayload().size()).isEqualTo(districtsCount);
    }

    @Test
    public void itShouldReturnDistricts() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-17L, -18L, -19L, -99L))
                .build(), District);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(report.getPayload().size()).isEqualTo(districtsCount);
    }

    @Test
    public void itShouldReturnAllSchoolsInDistrict() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L, -99L))
                .build(), School);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(report.getPayload().size()).isEqualTo(2);
    }

    @Test
    public void itShouldReturnSchools() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L, -10L, -99L))
                .build(), School);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(report.getPayload().size()).isEqualTo(2);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimension() {
        final CustomAggregateReportResult report = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L))
                .dimensionType(IEP)
                .build(), School);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        List<AggregateRow> rows = report.getPayload();
        assertThat(rows.size()).isEqualTo(2);
        for (final AggregateRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(1);
            else assertThat(row.getMeasures().getStudentCount()).isEqualTo(0);
        }

        rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(IEP)
                .organizationIds(null)
                .build(), District).getPayload();
        assertThat(rows.size()).isEqualTo((districtsCount) * 2);

        rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(IEP)
                .build(), State).getPayload();
        verifyStateStudentCount(rows, 5);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimensionAndGenderFilters() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(IEP)
                .genderCodes(of("gender-18"))
                .build(), State).getPayload();

        verifyStateStudentCount(rows, 2);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimensionAndFilter() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(IEP)
                .iepCodes(of("yes"))
                .build(), State).getPayload();

        verifyStateStudentCount(rows, 3);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimension() {
        List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L))
                .dimensionType(LEP)
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(2);
        for (final AggregateRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(0);
            else assertThat(row.getMeasures().getStudentCount()).isEqualTo(1);
        }

        rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .organizationIds(null)
                .dimensionType(LEP)
                .build(), District).getPayload();
        assertThat(rows.size()).isEqualTo((districtsCount) * 2);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimensionAndEthnicityFilter() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(LEP)
                .ethnicityCodes(of("ethnicity-28", "ethnicity-29"))
                .build(), State).getPayload();

        assertThat(rows.stream()
                .filter(r -> (r.getDimension().getCode().equals("yes")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(3);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(LEP)
                .lepCodes(of("no"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount));

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(LEP)
                .lepCodes(of("no"))
                .build(), State).getPayload(), 0);

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(LEP)
                .lepCodes(of("no", "yes"))
                .build(), State).getPayload(), 5);
    }

    @Test
    public void itShouldFindByQueryWithELASDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(ELAS)
                .elasCodes(of("EL"))
                .build(), District).getPayload().size()).isEqualTo(districtsCount);

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(ELAS)
                .elasCodes(of("RFEP"))
                .build(), State).getPayload(), 0);

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(ELAS)
                .elasCodes(of("EL", "RFEP"))
                .build(), State).getPayload(), 5);
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimension() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(EconomicDisadvantage)
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * 2);

        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L))
                .dimensionType(EconomicDisadvantage)
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(2);
        for (final AggregateRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(1);
            else assertThat(row.getMeasures().getStudentCount()).isEqualTo(0);
        }
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(EconomicDisadvantage)
                .economicDisadvantageCodes(of("yes"))
                .build(), District).getPayload().size()).isEqualTo(districtsCount);
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimensionAndGenderFilter() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(EconomicDisadvantage)
                .genderCodes(of("gender-18"))
                .build(), State).getPayload();

        verifyStateStudentCount(rows, 2);
    }

    @Test
    public void itShouldFindByQueryWithSection504Dimension() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Section504)
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * 3);

        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L))
                .dimensionType(Section504)
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(3);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 0, 1);
    }

    @Test
    public void itShouldFindByQueryWithSection504DimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Section504)
                .section504Codes(of("undefined", "yes"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * 2);
    }

    @Test
    public void itShouldFindByQueryWithSection504DimensionAndEconomicDisadvantageFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Section504)
                .economicDisadvantageCodes(of("no"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * 3);

        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Section504)
                .economicDisadvantageCodes(of("no"))
                .build(), State).getPayload();

        assertThat(rows.size()).isEqualTo(3);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 4, 1);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimension() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * 3);

        List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .dimensionType(MigrantStatus)
                .organizationIds(of(-9L))
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"))
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(3);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 0, 0);

        rows = repository.findByOrganizationType(user, queryBuilder.genderCodes(of("gender-18")).build(), School).getPayload();
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .migrantStatusCodes(of("yes"))
                .build(), District).getPayload().size()).isEqualTo(districtsCount);

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .migrantStatusCodes(of("yes"))
                .build(), State).getPayload(), 5);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAndLEPFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .lepCodes(of("no"))
                .build(), District).getPayload().size()).isEqualTo(districtsCount * 3);

        verifyStateStudentCount(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .lepCodes(of("no"))
                .build(), State).getPayload(), 0);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAnELASFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(MigrantStatus)
                .elasCodes(of("EL"))
                .build(), District).getPayload().size()).isEqualTo(districtsCount * 3);
    }

    @Test
    public void itShouldFindByQueryWithGenderDimension() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-9L))
                .dimensionType(Gender)
                .build(), School).getPayload().size()).isEqualTo(countRowsInTable(template, "gender"));
    }

    @Test
    public void itShouldFindByQueryWithGenderDimensionAndFilter() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-8L))
                .dimensionType(Gender)
                .genderCodes(of("gender-19"))
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(1);
        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-19"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(1);
    }

    @Test
    public void itShouldFindByQueryWithGenderDimensionAndMigrantStatusFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Gender)
                .migrantStatusCodes(of("no"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * genderCount);

        List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Gender)
                .migrantStatusCodes(of("no"))
                .build(), State).getPayload();

        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-18"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(0);
        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-19"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(0);

        rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Gender)
                .migrantStatusCodes(of("yes"))
                .build(), State).getPayload();

        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-18"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(2);
        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-19"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(3);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimension() {
        final List<AggregateRow> reportRows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L))
                .dimensionType(Ethnicity)
                .build(), District).getPayload();

        assertThat(reportRows.size()).isEqualTo(ethnicityCount);
        assertThat(reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(toList()).size()).isEqualTo(1);

        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .organizationIds(null)
                .dimensionType(Ethnicity)
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * ethnicityCount);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L))
                .dimensionType(Ethnicity)
                .ethnicityCodes(of("ethnicity-28"))
                .build(), District).getPayload().size()).isEqualTo(1);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndIepFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .iepCodes(of("no"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * ethnicityCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .iepCodes(of("no"))
                .build(), District).getPayload().stream()
                .filter(r -> (r.getDimension().getCode().equals("ethnicity-29")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(1);

        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .iepCodes(of("yes"))
                .build(), State).getPayload().stream()
                .filter(r -> (r.getDimension().getCode().equals("ethnicity-29")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(2);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndSection504Filter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .section504Codes(of("undefined"))
                .build(), District).getPayload().size()).isEqualTo((districtsCount) * ethnicityCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .section504Codes(of("undefined"))
                .build(), State).getPayload().stream()
                .filter(r -> (r.getDimension().getCode().equals("ethnicity-29")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(1);

        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(State)
                .dimensionType(Ethnicity)
                .section504Codes(of("no"))
                .build(), State).getPayload().stream()
                .filter(r -> (r.getDimension().getCode().equals("ethnicity-29")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(2);
    }

    @Test
    public void itShouldFindByQueryWithEnrolledGradeDimension() {
        final List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-8L))
                .dimensionType(StudentEnrolledGrade)
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(2);
        for (final AggregateRow row : rows) {
            if (row.getDimension().getCode().equals("-5")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(1);
            else assertThat(row.getMeasures().getStudentCount()).isEqualTo(2);
        }
    }

    @Test
    public void itShouldFindByQueryWithEnrolledGradeDimensionAndDifferentFilters() {
        List<AggregateRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(School)
                .organizationIds(of(-8L))
                .dimensionType(StudentEnrolledGrade)
                .genderCodes(of("gender-18"))
                .build(), School).getPayload();

        assertThat(rows.size()).isEqualTo(1);
        assertThat(rows.get(0).getDimension().getCode()).isEqualTo("-4");
        assertThat(rows.get(0).getMeasures().getStudentCount()).isEqualTo(2);

        rows = repository.findByOrganizationType(user, queryBuilder.completenessCodes(of("Complete")).build(), School).getPayload();
        assertThat(rows.size()).isEqualTo(1);
        assertThat(rows.get(0).getDimension().getCode()).isEqualTo("-4");
        assertThat(rows.get(0).getMeasures().getStudentCount()).isEqualTo(1);

        rows = repository.findByOrganizationType(user, queryBuilder.administrativeConditionCodes(of("IN")).build(), School).getPayload();
        assertThat(rows.size()).isEqualTo(0);

        rows = repository.findByOrganizationType(user, queryBuilder.genderCodes(of("gender-19")).build(), School).getPayload();
        assertThat(rows.size()).isEqualTo(1);
        assertThat(rows.get(0).getDimension().getCode()).isEqualTo("-5");
        assertThat(rows.get(0).getMeasures().getStudentCount()).isEqualTo(1);

        rows = repository.findByOrganizationType(user, queryBuilder.administrativeConditionCodes(of("SD")).build(), School).getPayload();
        assertThat(rows.size()).isEqualTo(0);
    }

    @Test
    public void itShouldBackFillMissingDataForAllDimensionsButStudentEnrolledGrade() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay LEFT JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-5) AND a.subject_id IN (2) AND a.type_id = 1 AND ay.school_year IN (1888)", Integer.class);
        queryBuilder
                .assessmentTypeCode(ICA.code())
                .organizationType(State)
                .schoolYears(of(1888))
                .subjectCodes(of(ELA.code()))
                .assessmentGradeCodes(of("-5"))
                .dimensionType(Overall)
                // the below two filters do not change the back-filling rules
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"));

        //we do not back-fill the data for the StudentEnrolledGrade
        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(StudentEnrolledGrade).build(), District).getPayload().size()).isEqualTo(0);

        final List<AggregateRow> reportRows = repository.findByOrganizationType(user, queryBuilder.dimensionType(Overall).build(), District).getPayload();
        assertThat(reportRows.size()).isEqualTo(asmtCount * districtsCount);

        //make sure assessment label and subject codes are populated in back-filled data
        assertThat(reportRows.stream().map(r -> r.getAssessment().getLabel()).filter(Objects::nonNull).collect(toList()).size()).isEqualTo(asmtCount * districtsCount);
        assertThat(reportRows.stream().map(r -> r.getAssessment().getSubjectCode()).filter(Objects::nonNull).collect(toList()).size()).isEqualTo(asmtCount * districtsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Gender).genderCodes(of("gender-18")).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Gender).genderCodes(null).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * genderCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Ethnicity).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * ethnicityCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Ethnicity).ethnicityCodes(of("ethnicity-28")).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(MigrantStatus).ethnicityCodes(null).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * 3);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Section504).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * 3);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(LEP).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * 2);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(IEP).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * 2);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(EconomicDisadvantage).build(), District).getPayload().size())
                .isEqualTo(asmtCount * districtsCount * 2);
    }

    @Test
    public void itShouldEstimateReportRowCount() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-5, -3) AND a.subject_id IN (1, 2) AND a.type_id = 1 AND ay.school_year IN (1888, 1999)", Integer.class);
        queryBuilder
                .assessmentTypeCode(ICA.code())
                .organizationType(State)
                .schoolYears(of(1888, 1999))
                .subjectCodes(of(MATH.code(), ELA.code()))
                .assessmentGradeCodes(of("-5", "-3"))
                // the below two filters do not change the counting rules
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"));

        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).build(), District)).isEqualTo(asmtCount * districtsCount);
        //for the StudentEnrolledGrade we always assume that there is one entry found
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(StudentEnrolledGrade).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Gender).build(), District)).isEqualTo(asmtCount * districtsCount * genderCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Ethnicity).build(), District)).isEqualTo(asmtCount * districtsCount * ethnicityCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(MigrantStatus).build(), District)).isEqualTo(asmtCount * districtsCount * 3);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Section504).build(), District)).isEqualTo(asmtCount * districtsCount * 3);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(LEP).build(), District)).isEqualTo(asmtCount * districtsCount * 2);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(IEP).build(), District)).isEqualTo(asmtCount * districtsCount * 2);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(EconomicDisadvantage).build(), District)).isEqualTo(asmtCount * districtsCount * 2);

        //test with filters
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Gender).genderCodes(of("gender-19")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Ethnicity).genderCodes(of("gender-19")).ethnicityCodes(of("ethnicity-28")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(MigrantStatus).genderCodes(null).ethnicityCodes(null).migrantStatusCodes(of("yes")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Section504).genderCodes(null).ethnicityCodes(null).section504Codes(of("undefined")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(LEP).section504Codes(null).lepCodes(of("yes")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(IEP).lepCodes(null).iepCodes(of("yes")).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(EconomicDisadvantage).iepCodes(null).economicDisadvantageCodes(of("yes")).build(), District)).isEqualTo(asmtCount * districtsCount);

        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).organizationType(State).build(), State)).isEqualTo(asmtCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).organizationType(District).organizationIds(of(-19L, -17L, -99L)).build(), District)).isEqualTo(asmtCount * 2);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).organizationType(School).organizationIds(of(-9L, -10L, -99L)).build(), School)).isEqualTo(asmtCount * 2);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).organizationType(State).organizationIds(null).build(), District)).isEqualTo(asmtCount * districtsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).organizationType(District).organizationIds(of(-19L)).build(), School)).isEqualTo(asmtCount * 2);
    }

    @Test
    public void itShouldFindByQueryWithMultipleValuesOfDiffParams() {
        final Integer asmtCount = template.queryForObject("SELECT count(*) AS count FROM asmt_active_year ay LEFT JOIN asmt a ON a.id = ay.asmt_id" +
                "  WHERE a.grade_id IN (-4,-3) AND a.subject_id IN (1,2) AND a.type_id = 1 AND ay.school_year IN (1999, 2000)", Integer.class);

        final List<AggregateRow> reportRows = repository.findByOrganizationType(user, queryBuilder
                .assessmentTypeCode(ICA.code())
                .organizationType(State)
                .assessmentGradeCodes(of("-4", "-3"))
                .subjectCodes(of(MATH.code(), ELA.code()))
                .schoolYears(of(1999, 2000))
                .dimensionType(Overall)
                .build(), State).getPayload();

        assertThat(reportRows.size()).isEqualTo(asmtCount);

        final List<AggregateRow> rowsWithNonZeroValues = reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(Collectors.toList());
        assertThat(rowsWithNonZeroValues.size()).isEqualTo(3);
        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getOrganization).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator()
                .containsOnly(Organization.builder().name(stateName).organizationType(State).build());

        // This verifies that the data is grouped by asmt_id to support a use case when there are two assessments for
        // the same subject/grade/type and exam school year.
        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                ActiveAssessment.builder().id(-8).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build(),
                ActiveAssessment.builder().id(-9).gradeCode("-3").subjectCode("ELA").examSchoolYear(2000).label("asmt-9").build(),
                ActiveAssessment.builder().id(-9).gradeCode("-3").subjectCode("ELA").examSchoolYear(1999).label("asmt-9").build());

        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getAssessment).filter(a -> (a.getExamSchoolYear() == 1999)).count()).isEqualTo(2);
        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getAssessment).filter(a -> (a.getExamSchoolYear() == 2000)).count()).isEqualTo(1);
        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getAssessment).filter(a -> (a.getSubjectCode().equals("Math"))).count()).isEqualTo(1);
        assertThat(rowsWithNonZeroValues.stream().map(AggregateRow::getAssessment).filter(a -> (a.getSubjectCode().equals("ELA"))).count()).isEqualTo(2);
    }

    @Test
    @Sql(scripts = {"classpath:OlapEntitiesSetup.sql"},
            statements = {"INSERT INTO  exam (id, school_year, asmt_id, elas_id, completeness_id," +
                    "                                    administration_condition_id, performance_level," +
                    "                                    scale_score, grade_id, student_id, school_id," +
                    "                                    iep, lep, section504, economic_disadvantage, migrant_status," +
                    "                                    completed_at, updated, update_import_id, migrate_id) VALUES " +
                    "(-34, 2000 , -10, -11, -9, -99, 1, 2500, -4, -9, -9, true, true, false, false, true, '2016-08-14 19:05:33.000000', '2016-09-14 19:05:33.000000', -1, -1)",
                    "INSERT INTO asmt_active_year (asmt_id, school_year) VALUES (-10, 2000)"})
    public void itShouldGroupByAssessmentId() {

        //if two different ICAs are administered at the same school year, we should group the data by the asmt id
        // note that we are not back-filling by asmt id since it is not an IAB
        final List<AggregateRow> reportRows = repository.findByOrganizationType(user, queryBuilder
                .assessmentGradeCodes(of("-3"))
                .subjectCodes(of(ELA.code()))
                .schoolYears(of(2000))
                .dimensionType(Overall)
                .build(), State).getPayload();
        assertThat(reportRows.stream().map(AggregateRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                ActiveAssessment.builder().id(-10).gradeCode("-3").subjectCode("ELA").label("asmt-9-again").examSchoolYear(2000).build(),
                ActiveAssessment.builder().id(-9).gradeCode("-3").subjectCode("ELA").label("asmt-9").examSchoolYear(2000).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery.builder().build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForSchoolOrganizationType() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .organizationType(School)
                .schoolYears(of(2000))
                .subjectCodes(of("test"))
                .assessmentGradeCodes(of("grade"))
                .build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForDistrictOrganizationType() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .organizationType(District)
                        .schoolYears(of(2000))
                        .subjectCodes(of("test"))
                        .assessmentGradeCodes(of("grade"))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .organizationType(State)
                        .schoolYears(of(2000))
                        .assessmentGradeCodes(of("grade"))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAssessmentType() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .dimensionType(DimensionType.Overall)
                        .subjectCodes(of("test"))
                        .organizationType(State)
                        .schoolYears(of(2000))
                        .assessmentGradeCodes(of("grade"))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireDimension() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .subjectCodes(of("test"))
                        .organizationType(State)
                        .schoolYears(of(2000))
                        .assessmentGradeCodes(of("grade"))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .subjectCodes(of("test"))
                        .schoolYears(of(2000))
                        .assessmentGradeCodes(of("grade"))
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYear() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .subjectCodes(of("test"))
                        .assessmentGradeCodes(of("grade"))
                        .organizationType(State)
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrade() {
        repository.findByOrganizationType(user, AggregateOrganizationQuery
                        .builder()
                        .assessmentTypeCode(SUMMATIVE.code())
                        .dimensionType(DimensionType.Overall)
                        .subjectCodes(of("test"))
                        .schoolYears(of(2000))
                        .organizationType(State)
                        .build()
                , OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForAllSchoolsInState() {
        final AggregateOrganizationQuery query = AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .organizationType(State)
                .build();
        repository.findByOrganizationType(user, query, School);
    }
}