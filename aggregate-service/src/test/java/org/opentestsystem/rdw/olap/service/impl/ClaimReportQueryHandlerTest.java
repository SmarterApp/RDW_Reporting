package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.repository.ClaimRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.Claim;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.springframework.core.task.TaskExecutor;

import java.util.List;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class ClaimReportQueryHandlerTest extends AbstractAggregateQueryHandlerTest<ClaimRow,
        ClaimReportResult,
        ClaimAggregateReportQuery,
        ClaimOrganizationQuery> {
    private ClaimReportRepository repository;
    private ClaimQueryConverter queryAdapter;
    private ClaimReportQueryHandler serviceUnderTest;
    private ClaimRepository claimRepository;

    @Override
    protected AggregateQueryHandler createServiceUnderTest(final AuthorizationService authorizationService, final AggregateReportSettings aggregateReportSettings, final TaskExecutor threadPoolTaskExecutor) {
        queryAdapter = mock(ClaimQueryConverter.class);
        repository = mock(ClaimReportRepository.class);
        claimRepository = mock(ClaimRepository.class);
        serviceUnderTest = new ClaimReportQueryHandler(repository, authorizationService, aggregateReportSettings, queryAdapter, threadPoolTaskExecutor, claimRepository);
        return serviceUnderTest;
    }

    @Override
    protected ClaimReportResult getRepositoryResults() {
        return ClaimReportResult.builder()
                .row(ClaimRow.builder()
                        .dimension(Dimension.builder().type(Overall).build())
                        .assessment(AggregateTestUtils.assessment)
                        .measures(AggregateTestUtils.measures)
                        .claimCode("ClaimCode")
                        .organization(Organization.builder()
                                .organizationType(OrganizationType.School)
                                .name("schoolName")
                                .id(-123L)
                                .naturalId("schoolId")
                                .build())
                        .build())
                .build();

    }

    public ReportRepository getRepository() {
        return repository;
    }

    public AggregateQueryConverter getQueryAdapter() {
        return queryAdapter;
    }

    @Override
    protected ClaimOrganizationQuery getOrganizationTypeQuery() {
        return mock(ClaimOrganizationQuery.class);
    }

    @Override
    protected ClaimAggregateReportQuery.Builder getAggregateQueryBuilderWithValidQuery() {
        return ClaimAggregateReportQuery.builder()
                .claimCodesBySubject(ImmutableMap.of(MATH.code(), ImmutableSet.of("SOCK_2", "1", "3")))
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(of("-8"))
                .schoolYears(of(1999))
                .schoolIds(of(123L))
                .assessmentTypeCode(ICA.code());
    }

    @Override
    protected ClaimAggregateReportQuery.Builder getEmtpyAggregateQueryBuilder() {
        return ClaimAggregateReportQuery.builder();
    }

    @Override
    public void itShouldHandleQuery() {
        assertThat(serviceUnderTest.handles(ClaimAggregateReportQuery.builder().build())).isTrue();
        assertThat(serviceUnderTest.handles(LongitudinalReportQuery.builder().build())).isFalse();

        assertThat(serviceUnderTest.handles(ClaimAggregateReportQuery.builder().subgroup("test", StudentFilters.builder().build()).build())).isTrue();
        assertThat(serviceUnderTest.handles(LongitudinalReportQuery.builder().subgroup("test", StudentFilters.builder().build()).build())).isFalse();
    }

    @Override
    public void itShouldReturnReportResultBuilder() {
        assertThat(serviceUnderTest.getReportResultBuilder()).isInstanceOf(ClaimReportResult.Builder.class);
    }

    @Test
    public void itShouldAddOverallDimension() {
        final ClaimAggregateReportQuery query = getAggregateQueryBuilderWithValidQuery().dimensionTypes(null).build();

        final ArgumentCaptor<ClaimAggregateReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(ClaimAggregateReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getDimensionTypes()).contains(Overall);
    }

    @Test
    public void itShouldUseClaimRepositoryToAddAllClaimsIfNoneIsGiven() {
        final ClaimAggregateReportQuery query = getAggregateQueryBuilderWithValidQuery()
                .claimCodesBySubject(ImmutableMap.of(MATH.code(), newArrayList()))
                .build();

        final List<Claim> claimCodes = ImmutableList.of(
                Claim.builder().code("claim1").subjectCode(MATH.code()).assessmentTypeCode(ICA.code()).build(),
                Claim.builder().code("claim2").subjectCode(MATH.code()).assessmentTypeCode(ICA.code()).build());

        when(claimRepository.findAll()).thenReturn(claimCodes);
        final ArgumentCaptor<ClaimAggregateReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(ClaimAggregateReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getClaimCodesBySubject()).containsValues(of("claim1", "claim2"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForIABAssessmentType() {
        serviceUnderTest.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().assessmentTypeCode(IAB.code()).build());
    }
}