package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.model.TargetReportResult;
import org.opentestsystem.rdw.olap.repository.TargetReportRepository;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataLoadingRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@SuppressWarnings({"SqlNoDataSourceInspection"})
@ActiveProfiles({"redshift", "redshift-embargo"})
public class JdbcTargetReportRepositoryEmbargoRST extends RepositoryBackedIT {

    @Autowired
    private TargetReportRepository repository;

    private final static int mathTargetsCount = 11;

    private static final TargetOrganizationQuery school8districts18Sum1999Query = TargetOrganizationQuery.builder()
            .assessmentGradeCode("-4")
            .organizationType(OrganizationType.School)
            .organizationIds(of(-8L))
            .schoolYear(1999)
            .subjectCode("Math")
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builderExt()
                .id("userId")
                .username("someone-10@somewhere.com")
                .password("redacted")
                .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)));
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"})
    @Test
    public void itShouldReturnExamsWithEmbargoStatusLoadingForTestDataLoader() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                                new Permission(TestDataLoadingRead, PermissionScope.builder()
                                        .statewide(true)
                                        .build()))).build(),
                school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(3);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 1, 1, -10)"})
    @Test
    public void itShouldReturnExamsWithEmbargoStatusReviewingForStateTestDataReviewer() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .statewide(true)
                        .build()),
                    new Permission(TestDataReviewingRead, PermissionScope.builder()
                        .statewide(true)
                        .build()))).build(),
            school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(3);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 1, 1, -10)"})
    @Test
    public void itShouldReturnExamsWithEmbargoStatusReviewingForDistrictTestDataReviewer() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .statewide(true)
                        .build()),
                    new Permission(TestDataReviewingRead, PermissionScope.builder()
                        .statewide(false)
                        .addDistrictIds(of(-18L))
                        .build()))).build(),
            school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(3);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 1, 1, -10)"})
    @Test
    public void itShouldNotReturnExamsWithEmbargoStatusReviewingForWrongDistrict() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder
                .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                        .statewide(true)
                        .build()),
                    new Permission(TestDataReviewingRead, PermissionScope.builder()
                        .statewide(false)
                        .addDistrictIds(of(-17L))
                        .build()))).build(),
            school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(0);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"})
    @Test
    public void itShouldNotReturnExamsWithEmbargoStatusLoadingForNormalUser() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder.build(), school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(0);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 1, 1, -10)"})
    @Test
    public void itShouldNotReturnExamsWithEmbargoStatusReviewingForNormalUser() {
        final TargetReportResult report = repository.findByOrganizationType(userBuilder.build(), school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(0);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 1, 2, -10)"})
    @Test
    public void itShouldReturnExamsForDistrictsWithEmbargoReleased() {
        TargetReportResult report = repository.findByOrganizationType(userBuilder.build(), school8districts18Sum1999Query, School);

        assertThat(report.getPayload().size()).isEqualTo(mathTargetsCount);
        assertThat(report.getPayload().get(0).getMeasures().getStudentCount()).isEqualTo(3);
    }
}
