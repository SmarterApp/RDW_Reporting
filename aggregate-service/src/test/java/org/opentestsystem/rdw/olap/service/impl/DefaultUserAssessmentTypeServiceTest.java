package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.olap.service.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.model.CodedEntity;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.List;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultUserAssessmentTypeServiceTest {


    private DefaultUserAssessmentTypeService service;
    private Set<String> assessmentTypeCodes = ImmutableSet.of("ica", "sum");
    private Set<String> statewideUserAssessmentTypeCodes = ImmutableSet.of("sum");
    private List<CodedEntity> assessmentTypes = ImmutableList.of(
            CodedEntity.builder().code("ica").id(1).build(),
            CodedEntity.builder().code("iab").id(2).build(),
            CodedEntity.builder().code("sum").id(3).build()
    );

    @Before
    public void before() {
        final AssessmentTypeService assessmentTypeService = mock(AssessmentTypeService.class);
        final AggregateReportingPropertiesTenant settings = new AggregateReportingPropertiesTenant();
        settings.setAssessmentTypes(assessmentTypeCodes);
        settings.setStatewideUserAssessmentTypes(statewideUserAssessmentTypeCodes);
        service = new DefaultUserAssessmentTypeService(assessmentTypeService, settings);
        when(assessmentTypeService.getAssessmentTypes()).thenReturn(assessmentTypes);
    }

    @Test
    public void itShouldReturnStatewideTypesForStatewideUser() throws Exception {
        assertThat(service.getAssessmentTypes(user(true)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(CodedEntity.builder().code("sum").id(3).build());
    }

    @Test
    public void itShouldReturnNonStatewideTypesForNonStatewideUser() throws Exception {
        assertThat(service.getAssessmentTypes(user(false)))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        CodedEntity.builder().code("ica").id(1).build(),
                        CodedEntity.builder().code("sum").id(3).build()
                );
    }

    private User user(final boolean statewide) {
        final PermissionScope scope = statewide
                ? PermissionScope.STATEWIDE
                : PermissionScope.builder().addSchoolId(1L).build();

        return User.builderExt()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(permissions(new Permission(AggregateRead, scope)))
                .build();
    }

}
