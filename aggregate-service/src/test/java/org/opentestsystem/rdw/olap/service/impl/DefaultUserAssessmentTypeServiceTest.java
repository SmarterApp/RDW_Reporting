package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.service.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultUserAssessmentTypeServiceTest {

    private AssessmentTypeService assessmentTypeService;
    private CodedEntity summativeAssessmentType = CodedEntity.builder().id(3).code("sum").build();
    private Set<CodedEntity> assessmentTypes = ImmutableSet.of(
            CodedEntity.builder().id(1).code("ica").build(),
            CodedEntity.builder().id(2).code("iab").build(),
            summativeAssessmentType
    );

    @Before
    public void before() {
        assessmentTypeService = mock(AssessmentTypeService.class);
        when(assessmentTypeService.getAssessmentTypes()).thenReturn(assessmentTypes);
    }

    @Test
    public void itShouldReturnAllTypesForStatewideUserWhenFlagEnabled() throws Exception {
        assertThat(service(true).getAssessmentTypes(user(true)))
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldNotReturnInterimTypesForStatewideUserWhenFlagDisabled() throws Exception {
        assertThat(service(false).getAssessmentTypes(user(true)))
                .containsExactly(summativeAssessmentType);
    }

    @Test
    public void itShouldReturnAllTypesForNonStatewideUserWhenFlagEnabled() throws Exception {
        assertThat(service(true).getAssessmentTypes(user(false)))
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldReturnAllTypesForNonStatewideUserWhenFlagDisabled() throws Exception {
        assertThat(service(false).getAssessmentTypes(user(false)))
                .containsExactlyElementsOf(assessmentTypes);
    }

    private DefaultUserAssessmentTypeService service(final boolean statewideInterimEnabled) {
        final AggregateReportSettings settings = new AggregateReportSettings();
        settings.setStatewideInterimEnabled(statewideInterimEnabled);
        return new DefaultUserAssessmentTypeService(assessmentTypeService, settings);
    }

    private User user(final boolean statewide) {
        final PermissionScope scope = statewide
                ? PermissionScope.STATEWIDE
                : PermissionScope.builder().addSchoolId(1L).build();

        return User.builder()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(permissions(new Permission(AggregateRead, scope)))
                .build();
    }

}