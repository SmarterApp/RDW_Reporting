package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.BasicCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.service.impl.AggregateTestUtils.toQueryBuilderWithCommonAttributes;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class BasicQueryAdapterTest {

    private BasicQueryAdapter queryAdapter;
    private QueryProviderRepositoryHelper repositoryHelper;
    private BasicCustomAggregateReportQuery.Builder queryBuilder;

    @Before
    public void setUp() {
        repositoryHelper = mock(QueryProviderRepositoryHelper.class);
        queryAdapter = new BasicQueryAdapter(repositoryHelper);
        queryBuilder = BasicCustomAggregateReportQuery.builder()
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(of("-8"))
                .schoolIds(of(123L))
                .schoolYears(of(1999))
                .schoolIds(of(123L))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code());
    }


    @Test
    public void itShouldConvertQueryIntoMultipleOrganizationQueries() {
        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeState(true)
                .districtIds(of(-19L, -29L))
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery stateQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.School)
                .organizationIds(query.getSchoolIds())
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(query.getDistrictIds())
                .dimensionType(Overall)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldConvertQueryIntoMultipleDimensionQueries() {
        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeState(true)
                .schoolIds(of())
                .dimensionTypes(of(Overall, Gender, Ethnicity))
                .build();

        final AggregateReportQuery overallQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery genderQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Gender)
                .build();

        final AggregateReportQuery ethnicityQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Ethnicity)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(overallQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(genderQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(ethnicityQuery, OrganizationType.State));
    }

    @Test
    public void itShouldIncludeAllDistricts() {

        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of(-19L))
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        assertThat(queryAdapter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.District));

    }

    @Test
    public void itShouldIncludeDistrictsAndDistrictsOfSchools() {
        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeAllDistricts(false)
                .schoolIds(of(-123L))
                .includeAllDistrictsOfSchools(true)
                .districtIds(of(-19L, -27L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findAllDistrictsOfSchools(query.getSchoolIds())).thenReturn(of(-19L, -77L));

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L, -27L, -77L))
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.School)
                .organizationIds(of(-123L))
                .dimensionType(Overall)
                .build();

        assertThat(queryAdapter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistricts() {

        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeAllSchoolsOfDistricts(true)
                .districtIds(of(-19L))
                .schoolIds(of(-2L))
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findSchoolsIdsByDistrictIds(eq(of(-19L)))).thenReturn(of(-2L));

        assertThat(queryAdapter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistrictsForAllDistricts() {
        final BasicCustomAggregateReportQuery query = queryBuilder
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of())
                .includeAllSchoolsOfDistricts(true)
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery stateQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final AggregateReportQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findAllDistrictIds()).thenReturn(of(-19L));

        assertThat(queryAdapter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(stateQuery, OrganizationType.District),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.School));
    }
}