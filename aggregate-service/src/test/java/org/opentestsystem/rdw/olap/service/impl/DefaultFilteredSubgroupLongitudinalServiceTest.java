package org.opentestsystem.rdw.olap.service.impl;


import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult;
import org.opentestsystem.rdw.olap.repository.LongitudinalReportRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryAdapter;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.BasicCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupLongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.springframework.core.task.TaskExecutor;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class DefaultFilteredSubgroupLongitudinalServiceTest extends AbstractCustomAggregateServiceTest<LongitudinalRow,
        LongitudinalReportResult,
        FilteredSubgroupLongitudinalReportQuery,
        LongitudinalReportQuery> {

    private LongitudinalReportRepository repository;
    private FilteredSubgroupLongitudinalQueryAdapter queryAdapter;
    private DefaultFilteredSubgroupLongitudinalService serviceUnderTest;

    @Override
    protected AggregateQueryHandler createServiceUnderTest(final AuthorizationService authorizationService, final AggregateReportSettings aggregateReportSettings, final TaskExecutor threadPoolTaskExecutor) {
        queryAdapter = mock(FilteredSubgroupLongitudinalQueryAdapter.class);
        repository = mock(LongitudinalReportRepository.class);
        serviceUnderTest = new DefaultFilteredSubgroupLongitudinalService(repository, authorizationService, aggregateReportSettings, queryAdapter, threadPoolTaskExecutor);
        return serviceUnderTest;
    }

    @Override
    protected FilteredSubgroupLongitudinalReportQuery.Builder getAggregateQueryBuilderWithValidQuery() {
        return FilteredSubgroupLongitudinalReportQuery.builder()
                .subgroup(Overall.name(), StudentFilters.builder().build())
                .assessmentGradeCodes(of("-8"))
                .schoolIds(ImmutableSet.of(123L))
                .toSchoolYear(1999)
                .schoolIds(of(123L))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code());
    }

    @Override
    protected FilteredSubgroupLongitudinalReportQuery.Builder getEmtpyAggregateQueryBuilder() {
        return FilteredSubgroupLongitudinalReportQuery.builder();
    }

    @Override
    protected AggregateQueryAdapter getQueryAdapter() {
        return queryAdapter;
    }

    @Override
    protected ReportRepository getRepository() {
        return repository;
    }

    @Override
    protected LongitudinalReportResult getRepositoryResults() {
        return LongitudinalReportResult.builder()
                .row(AggregateTestUtils.longitudinalRow(OrganizationType.School, -123L, Overall).build())
                .build();
    }

    @Override
    protected LongitudinalReportQuery getOrganizationTypeQuery() {
        return mock(LongitudinalReportQuery.class);
    }

    @Override
    public void itShouldHandleQuery() {
        assertThat(serviceUnderTest.handles(FilteredSubgroupLongitudinalReportQuery.builder().build())).isTrue();
        assertThat(serviceUnderTest.handles(BasicCustomAggregateReportQuery.builder().build())).isFalse();
    }

    @Override
    public void itShouldReturnReportResultBuilder() {
        assertThat(serviceUnderTest.getReportResultBuilder()).isInstanceOf(LongitudinalReportResult.Builder.class);
    }

    @Test
    public void itShouldAddOverallSubgroupIfNoneIsGiven() {
        final FilteredSubgroupLongitudinalReportQuery query = getAggregateQueryBuilderWithValidQuery()
                .subgroups(null)
                .build();

        final ArgumentCaptor<FilteredSubgroupLongitudinalReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(FilteredSubgroupLongitudinalReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getSubgroups().keySet()).contains(Overall.name());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSummativeAssessmentType() {
        serviceUnderTest.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().assessmentTypeCode(ICA.code()).build());
    }

    @Test
    public void itShouldAssumeSummativeForMissingAssessmentType() {
        final FilteredSubgroupLongitudinalReportQuery query = getAggregateQueryBuilderWithValidQuery().assessmentTypeCode(null).build();

        final ArgumentCaptor<FilteredSubgroupLongitudinalReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(FilteredSubgroupLongitudinalReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getAssessmentTypeCode()).isEqualTo(SUMMATIVE.code());
    }
}