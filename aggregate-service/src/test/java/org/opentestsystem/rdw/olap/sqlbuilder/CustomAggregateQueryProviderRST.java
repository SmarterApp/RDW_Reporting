package org.opentestsystem.rdw.olap.sqlbuilder;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;

@RunWith(SpringRunner.class)
@ComponentScan({"org.opentestsystem.rdw.olap.repository", "org.opentestsystem.rdw.olap.repository.impl", "org.opentestsystem.rdw.olap.sqlbuilder"})
@Import({
        SqlBuilderConfig.class,
        QueryProvider.class
})
public class CustomAggregateQueryProviderRST extends RepositoryBackedIT {

    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    @Value("${app.state.name}")
    private String stateName;

    private static final String state504 = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'State' AS organization_type, NULL AS organization_id, NULL AS organization_natural_id, 'California' AS organization_name, 'Section504' AS dimension, fe.section504 AS dimension_id, CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( ( true = :all_section504s OR fe.section504 in (:section504_ids) ))) GROUP BY  fe.school_year, fe.asmt_id, fe.section504";
    private static final String allDistricts504 = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'District' AS organization_type, d.id AS organization_id, d.natural_id AS organization_natural_id, d.name AS organization_name, 'Section504' AS dimension, fe.section504 AS dimension_id, CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id JOIN district d ON d.id = sch.district_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( ( true = :all_section504s OR fe.section504 in (:section504_ids) ))) GROUP BY  fe.school_year, fe.asmt_id, d.id, d.name, d.natural_id, fe.section504";
    private static final String school504 = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'School' AS organization_type, sch.id AS organization_id, sch.natural_id AS organization_natural_id, sch.name AS organization_name, sch.district_id AS district_id, 'Section504' AS dimension, fe.section504 AS dimension_id, CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( sch.id in (:school_ids)) AND ( ( true = :all_section504s OR fe.section504 in (:section504_ids) ))) GROUP BY  fe.school_year, fe.asmt_id, sch.id, sch.name, sch.natural_id, sch.district_id, fe.section504";
    private static final String district504 = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'District' AS organization_type, d.id AS organization_id, d.natural_id AS organization_natural_id, d.name AS organization_name, 'Section504' AS dimension, fe.section504 AS dimension_id, CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id JOIN district d ON d.id = sch.district_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( d.id in (:district_ids)) AND ( ( true = :all_section504s OR fe.section504 in (:section504_ids) ))) GROUP BY  fe.school_year, fe.asmt_id, d.id, d.name, d.natural_id, fe.section504";
    private static final String allSchoolsInDistrict504 = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'School' AS organization_type, sch.id AS organization_id, sch.natural_id AS organization_natural_id, sch.name AS organization_name, sch.district_id AS district_id, 'Section504' AS dimension, fe.section504 AS dimension_id, CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( sch.district_id in (:school_district_ids)) AND ( ( true = :all_section504s OR fe.section504 in (:section504_ids) ))) GROUP BY  fe.school_year, fe.asmt_id, sch.id, sch.name, sch.natural_id, sch.district_id, fe.section504";

    private static final String stateOverall = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'State' AS organization_type, NULL AS organization_id, NULL AS organization_natural_id, 'California' AS organization_name, 'Overall' AS dimension, null  AS dimension_id, null AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id WHERE ( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) GROUP BY  fe.school_year, fe.asmt_id";
    private static final String allDistrictsOverall = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'District' AS organization_type, d.id AS organization_id, d.natural_id AS organization_natural_id, d.name AS organization_name, 'Overall' AS dimension, null  AS dimension_id, null AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id JOIN district d ON d.id = sch.district_id WHERE ( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) GROUP BY  fe.school_year, fe.asmt_id, d.id, d.name, d.natural_id";
    private static final String districtOverall = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'District' AS organization_type, d.id AS organization_id, d.natural_id AS organization_natural_id, d.name AS organization_name, 'Overall' AS dimension, null  AS dimension_id, null AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id JOIN district d ON d.id = sch.district_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( d.id in (:district_ids))) GROUP BY  fe.school_year, fe.asmt_id, d.id, d.name, d.natural_id";
    private static final String schoolOverall = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'School' AS organization_type, sch.id AS organization_id, sch.natural_id AS organization_natural_id, sch.name AS organization_name, sch.district_id AS district_id, 'Overall' AS dimension, null  AS dimension_id, null AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( sch.id in (:school_ids))) GROUP BY  fe.school_year, fe.asmt_id, sch.id, sch.name, sch.natural_id, sch.district_id";
    private static final String allSchoolsInDistrictOverall = "SELECT  round(avg(scale_score)) AS score, round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, fe.school_year, fe.asmt_id, 'School' AS organization_type, sch.id AS organization_id, sch.natural_id AS organization_natural_id, sch.name AS organization_name, sch.district_id AS district_id, 'Overall' AS dimension, null  AS dimension_id, null AS dimension_code FROM fact_student_exam fe JOIN asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id WHERE (( fe.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) AND ( sch.district_id in (:school_district_ids))) GROUP BY  fe.school_year, fe.asmt_id, sch.id, sch.name, sch.natural_id, sch.district_id";

    @Test
    public void testSQL() {

        final Organization state = Organization.builder().name(stateName).organizationType(OrganizationType.State).build();
        final CustomAggregateQueryWithReportTemplateProvider aggregateQueryProvider = new CustomAggregateQueryWithReportTemplateProvider(state, queryProvider, reportQueryRepositoryHelper);
        final ReportQuery.Builder builder = ReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .includeState(true)
                .includeAllDistricts(true)
                .schoolIds(of(1L))
                .dimensionTypes(of(Overall, Section504));

        assertThat(newArrayList(aggregateQueryProvider.toQuery(builder.build())).stream().map(QueryWithReportTemplate::getSqlQuery).collect(Collectors.toList()))
                .containsExactlyInAnyOrder(state504, allDistricts504, school504, stateOverall, allDistrictsOverall, schoolOverall);

        assertThat(newArrayList(aggregateQueryProvider.toQuery(builder.includeAllDistricts(false).build())).stream().map(QueryWithReportTemplate::getSqlQuery).collect(Collectors.toList()))
                .containsExactlyInAnyOrder(state504, school504, stateOverall, schoolOverall);

        assertThat(newArrayList(aggregateQueryProvider.toQuery(builder.includeState(false).build())).stream().map(QueryWithReportTemplate::getSqlQuery).collect(Collectors.toList()))
                .containsExactlyInAnyOrder(school504, schoolOverall);

        assertThat(newArrayList(aggregateQueryProvider.toQuery(builder.schoolIds(null).districtIds(of(1L)).includeAllSchoolsOfDistricts(false).build())).stream().map(QueryWithReportTemplate::getSqlQuery).collect(Collectors.toList()))
                .containsExactlyInAnyOrder(district504, districtOverall);

        assertThat(newArrayList(aggregateQueryProvider.toQuery(builder.schoolIds(null).districtIds(of(1L)).includeAllSchoolsOfDistricts(true).build())).stream().map(QueryWithReportTemplate::getSqlQuery).collect(Collectors.toList()))
                .containsExactlyInAnyOrder(district504, districtOverall, allSchoolsInDistrictOverall, allSchoolsInDistrict504);
    }
}