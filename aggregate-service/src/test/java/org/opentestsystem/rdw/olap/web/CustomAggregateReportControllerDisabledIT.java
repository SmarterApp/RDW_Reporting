package org.opentestsystem.rdw.olap.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.BasicCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomAggregateReportController.class)
// API is disabled by default, thus the name of this test suite
public class CustomAggregateReportControllerDisabledIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    private String serializedQuery;

    @Before
    public void setup() throws Exception {
        final ObjectMapper objectMapper = new ObjectMapper();
        final BasicCustomAggregateReportQuery query = BasicCustomAggregateReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .schoolYears(of(2017))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .build();

        serializedQuery = objectMapper.writeValueAsString(query);
    }

    @Test
    public void isShouldPostCustomAggregateReport() throws Exception {
        mvc.perform(post("/aggregate")
                .content(serializedQuery)
                .contentType(MediaType.APPLICATION_JSON))

                .andExpect(status().isNotFound());
    }
}