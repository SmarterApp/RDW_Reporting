package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ComponentScan({"org.opentestsystem.rdw.olap.repository", "org.opentestsystem.rdw.olap.repository.impl", "org.opentestsystem.rdw.olap.sqlbuilder"})
@Import({
        SqlBuilderConfig.class,
        QueryProvider.class
})
public class LongitudinalReportQueryTemplateProviderRST extends RepositoryBackedIT {

    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    @Value("${reporting.state.name}")
    private String stateName;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    private LongitudinalSqlQueryWithReportTemplateProvider aggregateQueryProvider;
    private LongitudinalOrganizationQuery.Builder builder;

    private User user = User.builder()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)))
            .build();

    private static final String stateOverallSql = "SELECT  round(avg(CASE WHEN e.years_in_one_org = :cohort_years THEN e.scale_score ELSE NULL END)) AS cohort_score, " +
            "round(avg(e.scale_score)) AS score, " +
            "round(stddev_samp(CASE WHEN e.years_in_one_org = :cohort_years THEN e.scale_score ELSE NULL END)/sqrt(sum(CASE WHEN e.years_in_one_org = :cohort_years THEN 1 ELSE 0 END))) AS cohort_std_err, " +
            "round(stddev_samp(e.scale_score)/sqrt(count(*))) AS std_err, " +
            "sum(CASE WHEN e.performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
            "sum(CASE WHEN e.performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
            "sum(CASE WHEN e.performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
            "sum(CASE WHEN e.performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
            "sum(CASE WHEN e.performance_level = 5 THEN 1 ELSE 0 END) AS level5, " +
            "sum(CASE WHEN e.performance_level = 6 THEN 1 ELSE 0 END) AS level6, " +
            "sum(CASE WHEN (e.performance_level = 1 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level1, " +
            "sum(CASE WHEN (e.performance_level = 2 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level2, " +
            "sum(CASE WHEN (e.performance_level = 3 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level3, " +
            "sum(CASE WHEN (e.performance_level = 4 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level4, " +
            "sum(CASE WHEN (e.performance_level = 5 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level5, " +
            "sum(CASE WHEN (e.performance_level = 6 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level6, " +
            "e.school_year, " +
            "e.subject_id, " +
            "e.asmt_grade_id, " +
            "max(e.asmt_id) as asmt_id, " +
            "CASE WHEN max(e.asmt_id) = min(e.asmt_id) THEN true ELSE false END AS singleAsmtInAggregate, " +
            "'State' AS organization_type, " +
            "NULL AS organization_id, " +
            "'Overall' AS dimension," +
            " null  AS dimension_id," +
            " null AS dimension_code " +
            "FROM (\n" +
            "   SELECT\n" +
            "     f.*,\n" +
            "     count(*) OVER (PARTITION BY f.student_id ) AS years_in_one_org\n" +
            "   FROM exam_longitudinal f\n" +
            "   WHERE\n" +
            "     f.subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)\n" +
            ") e " +
            "WHERE ( e.school_year < 2018 OR EXISTS (SELECT 1 FROM state_embargo WHERE aggregate = 0) OR 1 = :state_embargo_admin) " +
            "GROUP BY  e.school_year, e.subject_id, e.asmt_grade_id";

    @Before
    public void setUp() {
        final Organization state = Organization.builder().name(stateName).organizationType(State).build();
        aggregateQueryProvider = new LongitudinalSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, user);
        builder = LongitudinalOrganizationQuery.builder()
                .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                .gradeYearPairs(of(new YearGradePair(1999, "-4")))
                .subjectCode("Math");
    }

    @Test
    public void testSqlBuilderGroupByStateWithDimensionOverall() {
        final LongitudinalOrganizationQuery query = builder
                .dimensionType(Overall)
                .organizationType(State)
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, State).getSqlQuery()).isEqualTo(stateOverallSql);
    }
}