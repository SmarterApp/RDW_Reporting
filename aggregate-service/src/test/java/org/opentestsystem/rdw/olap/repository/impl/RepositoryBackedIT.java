package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.olap.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class,
        QueryUtils.class,
        RepositoryBackedIT.Config .class
})
@ContextConfiguration(classes = {TestDataSourceConfiguration.class})
@ActiveProfiles("redshift")
@Transactional(transactionManager = "txManager")
@ImportAutoConfiguration(RefreshAutoConfiguration.class)
@EnableConfigurationProperties
public abstract class RepositoryBackedIT {

    @BeforeClass
    public static void setTenantContext() {
        TenantContextHolder.setTenantId("CA");
    }

    @Configuration
    public static class Config {

        @Bean
        public TenantProperties tenantProperties() {
            final TenantProperties tenantProperties = new TenantProperties();
            tenantProperties.setTenants(ImmutableMap.of(
                    "CA", new Tenant("CA", "CA", "California"),
                    "NV", new Tenant("NV", "NV", "Nevada")
            ));
            return tenantProperties;
        }

        @Bean
        public TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                                   TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }
        
        @Bean
        ReportingTenantIdResolver tenantIdResolver() {
            return new ReportingTenantIdResolver();
        }

        @Bean
        @ConfigurationProperties("reporting")
        ReportingSystemPropertiesImpl reportingSystemPropertiesResolver() {
            return new ReportingSystemPropertiesImpl();
        }
    }

}
