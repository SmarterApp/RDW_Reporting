package org.opentestsystem.rdw.olap.stream;

import com.amazonaws.services.s3.Headers;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.AggregateRequestMessage;
import org.opentestsystem.rdw.reporting.common.model.AggregateResponseMessage;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.test.support.ReportQueries;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.io.InputStream;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.COMPLETED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.springframework.http.MediaType.APPLICATION_JSON;

@RunWith(MockitoJUnitRunner.class)
public class AggregateReportsTest {

    private static final URI ReportUri = URI.create("/some/report/123.json");
    private static final AtomicInteger OrganizationId = new AtomicInteger(1);

    @Mock
    private AggregateRequestProcessor processor;

    @Mock
    private MessageSecurityService messageSecurityService;

    @Mock
    private CustomAggregateService service;

    @Mock
    private ArchiveService archiveService;

    @Mock
    private User user;

    @Mock
    private MessageChannel responseChannel;

    @Captor
    private ArgumentCaptor<Message<AggregateResponseMessage>> responseMessageCaptor;

    private Message<AggregateRequestMessage> message;
    private ObjectMapper objectMapper;
    private AggregateReports handler;

    @Before
    public void setup() {
        when(messageSecurityService.getUser(any(Message.class))).thenReturn(user);

        when(processor.aggregateResponse()).thenReturn(responseChannel);

        final ReportQuery query = ReportQueries.reportQuery().build();
        final AggregateRequestMessage payload = AggregateRequestMessage.builder()
                .id(123)
                .query(query)
                .responseLocation(ReportUri)
                .build();
        message = MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>()));

        objectMapper = new Jackson2ObjectMapperBuilder()
                .build();

        final List<ReportRow> results = newArrayList(reportRow(), reportRow(), reportRow());
        when(service.findByQuery(eq(user), eq(query))).thenReturn(results);

        handler = new AggregateReports(processor, messageSecurityService, service, objectMapper, archiveService);
    }

    @Test
    public void itShouldSendASuccessfulResponseOnCompletion() {
        handler.handleAggregateRequest(message);

        verify(responseChannel).send(responseMessageCaptor.capture());
        final AggregateResponseMessage payload = responseMessageCaptor.getValue().getPayload();
        assertThat(payload.getResultCount()).isEqualTo(3);
        assertThat(payload.getId()).isEqualTo(message.getPayload().getId());
        assertThat(payload.getStatus()).isEqualTo(COMPLETED);
    }

    @Test
    public void itShouldSendAFailureResponseOnError() {
        when(service.findByQuery(eq(user), eq(message.getPayload().getQuery())))
                .thenThrow(new RuntimeException("Bad Juju"));

        handler.handleAggregateRequest(message);

        verify(responseChannel).send(responseMessageCaptor.capture());
        final AggregateResponseMessage payload = responseMessageCaptor.getValue().getPayload();
        assertThat(payload.getId()).isEqualTo(message.getPayload().getId());
        assertThat(payload.getStatus()).isEqualTo(FAILED);
        assertThat(payload.getMessage()).isNotEmpty();
    }

    @Test
    public void itShouldWriteResultJsonToTheArchiveService() {
        handler.handleAggregateRequest(message);

        final ArgumentCaptor<Properties> propertiesCaptor = ArgumentCaptor.forClass(Properties.class);
        verify(archiveService).writeResource(eq(ReportUri.toASCIIString()), any(InputStream.class), propertiesCaptor.capture());
        final Properties properties = propertiesCaptor.getValue();
        assertThat((long) properties.get(Headers.CONTENT_LENGTH)).isGreaterThan(0);
        assertThat(properties.get(Headers.CONTENT_TYPE)).isEqualTo(APPLICATION_JSON.toString());
    }

    private ReportRow reportRow() {
        final Assessment assessment = Assessment.builder()
                .id(1)
                .subjectCode("Math")
                .gradeId(3)
                .examSchoolYear(1999)
                .label("Assessment")
                .build();

        final Measures measures = Measures.builder()
                .avgScaleScore(2500)
                .avgStdErr(12)
                .level1Count(1)
                .level2Count(2)
                .level3Count(3)
                .level4Count(4)
                .build();

        final long orgId = OrganizationId.getAndIncrement();
        final Organization organization = Organization.builder()
                .organizationType(OrganizationType.School)
                .name(UUID.randomUUID().toString())
                .id(orgId)
                .naturalId("Natural_" + orgId)
                .build();

        return ReportRow.builder()
                .dimension(new Dimension(null, Overall))
                .assessment(assessment)
                .measures(measures)
                .organization(organization)
                .build();
    }
}