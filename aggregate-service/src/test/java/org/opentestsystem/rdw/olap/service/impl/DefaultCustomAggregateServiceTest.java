package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.core.task.TaskExecutor;

import static com.google.common.collect.ImmutableSet.of;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;

public class DefaultCustomAggregateServiceTest {
    private CustomAggregateReportRepository repository;
    private CustomAggregateService service;
    private AggregateReportSettings aggregateReportSettings;
    private AuthorizationService authorizationService;
    private ReportQuery.Builder builder;
    private QueryProviderRepositoryHelper repositoryHelper;
    private TaskExecutor threadPoolTaskExecutor;
    private User user;

    public DefaultCustomAggregateServiceTest() {
        super();
    }

    @Before
    public void setUp() {
        repository = mock(CustomAggregateReportRepository.class);
        authorizationService = mock(AuthorizationService.class);
        aggregateReportSettings = mock(AggregateReportSettings.class);
        repositoryHelper = mock(QueryProviderRepositoryHelper.class);
        threadPoolTaskExecutor = mock(TaskExecutor.class);
        when(aggregateReportSettings.getStateAggregateAssessmentTypes()).thenReturn(ImmutableSet.of(SUMMATIVE.code()));

        service = new DefaultCustomAggregateService(repository, authorizationService, aggregateReportSettings, repositoryHelper, threadPoolTaskExecutor);

        builder = ReportQuery.builder()
                .assessmentGradeCodes(of("-8"))
                .schoolIds(ImmutableSet.of(123L))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()));

        user = User.builder()
                .id("id")
                .username("username")
                .password("password")
                .build();
    }

    @Test(expected = NullPointerException.class)
    public void itShouldRequireNotNullQuery() {
        service.findByQuery(user, null);
    }

    @Ignore
    @Test
    public void itShouldValidate() {
        service.estimateReportRowCount(user, builder.build());
        service.estimateReportRowCount(user, builder.includeState(false).includeAllDistricts(true).build());
        service.estimateReportRowCount(user, builder.includeState(false).includeAllDistricts(false).districtIds(of(1L)).build());
        service.estimateReportRowCount(user, builder.includeState(false).includeAllDistricts(false).districtIds(null).schoolIds(of(1L)).build());
        service.estimateReportRowCount(user, builder.includeState(true).assessmentTypeCode(SUMMATIVE.code()).build());
        service.estimateReportRowCount(user, builder.includeState(false).assessmentTypeCode(IAB.code()).build());

        service.findByQuery(user, builder.build());
        service.findByQuery(user, builder.includeState(false).includeAllDistricts(true).build());
        service.findByQuery(user, builder.includeState(false).includeAllDistricts(false).districtIds(of(1L)).build());
        service.findByQuery(user, builder.includeState(false).includeAllDistricts(false).districtIds(null).schoolIds(of(1L)).build());
        service.findByQuery(user, builder.includeState(true).assessmentTypeCode(SUMMATIVE.code()).build());
        service.findByQuery(user, builder.includeState(false).assessmentTypeCode(IAB.code()).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireConfiguredAssessmentWhenIncludeStateResults() {
        service.estimateReportRowCount(user, builder.includeState(true).assessmentTypeCode(ICA.code()).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        service.findByQuery(user, ReportQuery.builder().build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubjectId() {
        service.estimateReportRowCount(user, builder.subjectCodes(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrades() {
        service.findByQuery(user, builder.assessmentGradeCodes(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYears() {
        service.estimateReportRowCount(user, builder.schoolYears(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        service.estimateReportRowCount(user, builder.includeState(false).schoolIds(ImmutableSet.of()).build());
    }
}