package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.olap.TestUtils.verifyDistrictStudentCount;
import static org.opentestsystem.rdw.olap.TestUtils.verifyStateStudentCount;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.getTestDataLoadingPermissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.getTestDataReviewingPermissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@ActiveProfiles({"redshift", "redshift-embargo"})
public class JdbcClaimReportRepositoryEmbargoRST extends RepositoryBackedIT {

    @Autowired
    private ClaimReportRepository repository;

    private static final ClaimOrganizationQuery stateSum1999Query = ClaimOrganizationQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .organizationType(State)
            .schoolYears(of(1999))
            .claimCodesBySubject(ImmutableMap.of("ELA", ImmutableSet.of("SOCK_R")))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private static final ClaimOrganizationQuery districts18And19Sum1999Query = ClaimOrganizationQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .organizationType(District)
            .schoolYears(of(1999))
            .organizationIds(of(-18L, -19L))
            .claimCodesBySubject(ImmutableMap.of("ELA", ImmutableSet.of("SOCK_R")))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builderExt()
                .id("userId")
                .username("someone-10@somewhere.com")
                .password("redacted")
                .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)));
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 2, -10),(1999, -19, 2, 2, -10)"})
    @Test
    public void isShouldReturnSummativeExamsForStateWithEmbargoReleased() {
        final ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);

        verifyStateStudentCount(report.getPayload(), 6);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 1, -10),(1999, -19, 2, 1, -10)"})
    @Test
    public void isShouldReturnSummativeExamForStateWithEmbargoStateReviewingForTestDataLoadingOrReviewing() {
        ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataReviewingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 6);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataLoadingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 6);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 0, -10),(1999, -19, 2, 0, -10)"})
    @Test
    public void isShouldReturnSummativeExamForStateWithEmbargoStateLoadingForTestDataLoadingOnly() {
        ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataReviewingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataLoadingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 6);
    }


    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"})
    @Test
    public void isShouldReturnSummativeExamForStateWithoutExplicitEmbargoStateForTestDataLoadingOnly() {
        ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataReviewingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getTestDataLoadingPermissions(true, null)).build(), stateSum1999Query, State);
        verifyStateStudentCount(report.getPayload(), 6);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 2, -10),(1999, -19, 2, 2, -10)"})
    @Test
    public void isShouldReturnSummativeExamsForDistrictsWithEmbargoStatusReleased() {
        final ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), districts18And19Sum1999Query, District);

        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 1, -10),(1999, -19, 2, 1, -10)"})
    @Test
    public void itShouldNotReturnSummativeExamsForDistrictsWithEmbargoStatusReviewing() {
        final ClaimReportResult report = repository.findByOrganizationType(userBuilder.build(), districts18And19Sum1999Query, District);

        verifyDistrictStudentCount(report.getPayload(), -18, 0);
        verifyDistrictStudentCount(report.getPayload(), -19, 0);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 1, -10),(1999, -19, 2, 1, -10)"})
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoStatusReviewingStateTestDataReviewing() {
        final ClaimReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(
                            new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                            new Permission(TestDataReviewingRead, PermissionScope.builder()
                                        .statewide(true)
                                        .build()))).build(),
                districts18And19Sum1999Query, District);

        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }

    @Sql(scripts = {"classpath:ClaimEntitiesSetup.sql"}, statements = {"INSERT INTO district_embargo (school_year, district_id, subject_id, aggregate, migrate_id) VALUES (1999, -18, 2, 1, -10),(1999, -19, 2, 1, -10)"})
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoStatusReviewingForDistrictTestDataReviewing() {
        final ClaimReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(
                            new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                            new Permission(TestDataReviewingRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-19L))
                                        .build()))).build(),
                districts18And19Sum1999Query, District);

        verifyDistrictStudentCount(report.getPayload(), -18, 0);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }
}
