package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataLoadingRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@Import(JdbcEmbargoRepository.class)
public class JdbcEmbargoRepositoryRST extends CachedRepositoryBackedIT {
    @Autowired
    private EmbargoRepository repository;

    private final User userWithoutPermission = user().build();
    private final User userWithStatewideReviewingPermission = user()
        .permissionsById(permissions(
            new Permission(AggregateRead, PermissionScope.STATEWIDE),
            new Permission(TestDataReviewingRead, PermissionScope.STATEWIDE)
        ))
        .build();
    private final User userWithDistrictReviewingPermission = user()
        .permissionsById(permissions(
            new Permission(AggregateRead, PermissionScope.builder().statewide(false).addDistrictId(-18L).build()),
            new Permission(TestDataReviewingRead, PermissionScope.builder().statewide(false).addDistrictId(-18L).build())
        ))
        .build();
    private final User userWithLoadingPermission = user()
        .permissionsById(permissions(
            new Permission(AggregateRead, PermissionScope.STATEWIDE),
            new Permission(TestDataLoadingRead, PermissionScope.STATEWIDE)
        ))
        .build();

    @Sql(scripts = {"classpath:EmbargoEntitiesSetup.sql"})
    @Test
    public void itShouldReturnFalseWhenAllResultsReleased() {
        assertThat(repository.hasEmbargoAccess(userWithoutPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithStatewideReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithDistrictReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithLoadingPermission)).isFalse();
    }

    @Sql(scripts = {"classpath:EmbargoEntitiesSetup.sql"}, statements = {
        "UPDATE district_embargo set aggregate = 0 WHERE district_id = -18; "
    })
    @Test
    public void itShouldReturnTrueForLoaderWhenEmbargoStatusIsLoading() {
        assertThat(repository.hasEmbargoAccess(userWithoutPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithStatewideReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithDistrictReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithLoadingPermission)).isTrue();
    }

    @Sql(scripts = {"classpath:EmbargoEntitiesSetup.sql"}, statements = {
        "UPDATE district_embargo set aggregate = 1 WHERE district_id = -18; "
    })
    @Test
    public void itShouldReturnTrueForLoaderAndReviewerWhenEmbargoStatusIsReviewing() {
        assertThat(repository.hasEmbargoAccess(userWithoutPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithStatewideReviewingPermission)).isTrue();
        assertThat(repository.hasEmbargoAccess(userWithDistrictReviewingPermission)).isTrue();
        assertThat(repository.hasEmbargoAccess(userWithLoadingPermission)).isTrue();
    }

    @Sql(scripts = {"classpath:EmbargoEntitiesSetup.sql"}, statements = {
        "UPDATE district_embargo set aggregate = 1 WHERE district_id = -19; "
    })
    @Test
    public void itShouldReturnFalseForDistrictReviewerWhenEmbargoStatusIsReviewingForDifferentDistrict() {
        assertThat(repository.hasEmbargoAccess(userWithDistrictReviewingPermission)).isFalse();
    }

    @Sql(scripts = {"classpath:EmbargoEntitiesSetup.sql"}, statements = {
        "DELETE from district_embargo WHERE district_id = -18; "
    })
    @Test
    public void itShouldReturnTrueForLoaderWhenEmbargoStatusIsMissing() {
        assertThat(repository.hasEmbargoAccess(userWithoutPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithStatewideReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithDistrictReviewingPermission)).isFalse();
        assertThat(repository.hasEmbargoAccess(userWithLoadingPermission)).isTrue();
    }

    private User.Builder user() {
        return User.builderExt()
            .id("id")
            .username("username")
            .password("password");
    }
}
