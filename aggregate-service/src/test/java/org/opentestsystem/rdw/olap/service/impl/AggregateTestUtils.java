package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

@SuppressWarnings("unchecked")
final class AggregateTestUtils {

    private static final ActiveAssessment assessment = ActiveAssessment.builder()
            .id(1)
            .subjectCode("Math")
            .gradeCode("3")
            .examSchoolYear(1999)
            .label("Assessment")
            .build();

    private static final Measures measures = Measures.builder()
            .avgScaleScore(2500)
            .avgStdErr(12)
            .level1Count(1)
            .level2Count(2)
            .level3Count(3)
            .level4Count(4)
            .build();

    static AggregateRow.Builder reportRow(final OrganizationType type, final Long organizationId, final DimensionType dimensionType) {

        return AggregateRow.builder()
                .dimension(Dimension.builder().type(dimensionType).build())
                .assessment(assessment)
                .measures(measures)
                .organization(Organization.builder()
                        .organizationType(type)
                        .name("schoolName")
                        .id(organizationId)
                        .naturalId("schoolId")
                        .build());
    }

    static LongitudinalRow.Builder longitudinalRow(final OrganizationType type, final Long organizationId, final DimensionType dimensionType) {
        return LongitudinalRow.builder()
                .dimension(Dimension.builder().type(dimensionType).build())
                .assessment(assessment)
                .measures(measures)
                .cohortMeasures(measures)
                .organization(Organization.builder()
                        .organizationType(type)
                        .name("schoolName")
                        .id(organizationId)
                        .naturalId("schoolId")
                        .build());
    }

    static AggregateReportQuery.Builder toQueryBuilderWithCommonAttributes(final AbstractAggregateReportQuery reportQuery, final StudentFilters filters) {
        return AggregateReportQuery.builder()
                .assessmentTypeCode(reportQuery.getAssessmentTypeCode())
                .assessmentGradeCodes(reportQuery.getAssessmentGradeCodes())
                .subjectCodes(reportQuery.getSubjectCodes())
                .schoolYears(reportQuery.getSchoolYears())
                .completenessCodes(reportQuery.getCompletenessCodes())
                .administrativeConditionCodes(reportQuery.getAdministrativeConditionCodes())
                .genderCodes(filters.getGenderCodes())
                .ethnicityCodes(filters.getEthnicityCodes())
                .lepCodes(filters.getLepCodes())
                .elasCodes(filters.getElasCodes())
                .migrantStatusCodes(filters.getMigrantStatusCodes())
                .section504Codes(filters.getSection504Codes())
                .iepCodes(filters.getIepCodes())
                .economicDisadvantageCodes(filters.getEconomicDisadvantageCodes());
    }

    static LongitudinalReportQuery.Builder toLongitudinalQueryBuilderWithCommonAttributes(final AbstractAggregateReportQuery reportQuery, final StudentFilters filters) {
        return LongitudinalReportQuery.builder()
                .assessmentTypeCode(reportQuery.getAssessmentTypeCode())
                .subjectCode(reportQuery.getSubjectCodes().iterator().next())
                .completenessCodes(reportQuery.getCompletenessCodes())
                .administrativeConditionCodes(reportQuery.getAdministrativeConditionCodes())
                .genderCodes(filters.getGenderCodes())
                .ethnicityCodes(filters.getEthnicityCodes())
                .lepCodes(filters.getLepCodes())
                .elasCodes(filters.getElasCodes())
                .migrantStatusCodes(filters.getMigrantStatusCodes())
                .section504Codes(filters.getSection504Codes())
                .iepCodes(filters.getIepCodes())
                .economicDisadvantageCodes(filters.getEconomicDisadvantageCodes());
    }
}
