package org.opentestsystem.rdw.olap.sqlbuilder;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.CustomAggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ComponentScan({"org.opentestsystem.rdw.olap.repository", "org.opentestsystem.rdw.olap.repository.impl", "org.opentestsystem.rdw.olap.sqlbuilder"})
@Import({
        SqlBuilderConfig.class,
        QueryProvider.class
})
public class ClaimQueryReportTemplateProviderRST extends RepositoryBackedIT {
    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    @Value("${reporting.state.name}")
    private String stateName;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    private ClaimQueryReportTemplateProvider claimQueryReportTemplateProvider;
    private CustomAggregateOrganizationQuery.Builder builder;

    private User user = User.builder()
            .id(UUID.randomUUID().toString())
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)))
            .build();

    @Before
    public void setUp() {
        final Organization state = Organization.builder().name(stateName).organizationType(State).build();
        claimQueryReportTemplateProvider = new ClaimQueryReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, user);
        builder = CustomAggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .organizationType(State);
    }

    private static final String stateOverallSql = "SELECT  " +
            "sum(CASE WHEN category = 1 THEN 1 ELSE 0 END) AS level1, " +
            "sum(CASE WHEN category = 2 THEN 1 ELSE 0 END) AS level2, " +
            "sum(CASE WHEN category = 3 THEN 1 ELSE 0 END) AS level3, " +
            "fe.school_year, fe.asmt_id, " +
            "fe.subject_claim_score_id, " +
            "scs.code as claim_code, " +
            "'State' AS organization_type, " +
            "NULL AS organization_id, " +
            "'Overall' AS dimension, null  AS dimension_id, " +
            "null AS dimension_code " +
            "FROM fact_exam_claim_score fe " +
            "JOIN subject_claim_score scs ON scs.id = fe.subject_claim_score_id " +
            "JOIN asmt a ON a.id = fe.asmt_id" +
            " WHERE (( fe.school_year IN (:school_years) " +
            "AND a.grade_id IN (:asmt_grade_ids) " +
            "AND a.subject_id in (:subject_ids) " +
            "AND a.type_id = :asmt_type_id " +
            "AND ( true = :all_claims OR scs.code in (:subject_claim_score_codes) )) " +
            "AND ( fe.school_year < 2018 OR EXISTS (SELECT 1 FROM state_embargo WHERE aggregate = 0) OR 1 = :state_embargo_admin)) " +
            "GROUP BY  " +
            "fe.school_year, " +
            "fe.asmt_id, " +
            "fe.subject_claim_score_id, " +
            "scs.code";

    @Test
    public void testSqlBuilderGroupByStateWithDimensionOverall() {
        assertThat(claimQueryReportTemplateProvider.toQuery(builder.build(), State).getSqlQuery()).isEqualTo(stateOverallSql);
    }

}