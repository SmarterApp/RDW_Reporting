package org.opentestsystem.rdw.olap.repository.impl;


import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.model.TargetReportResult;
import org.opentestsystem.rdw.olap.repository.TargetReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.TargetRow;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Above;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Below;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Excluded;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.InsufficientData;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Sql(scripts = {"classpath:TargetEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcTargetReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private TargetReportRepository repository;

    @Value("${reporting.state.name}")
    private String stateName;

    private final static int mathTargetsCount = 11;

    private TargetOrganizationQuery.Builder queryBuilder;
    // this test is for a user without embargo permissions
    private static final User user = User.builder()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            //only invalid district and school ids; repository should ignore them
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Before
    public void setUp() {

        queryBuilder = TargetOrganizationQuery.builder()
                .assessmentGradeCode("-4")
                .organizationType(OrganizationType.School)
                .organizationIds(of(-8L))
                .schoolYear(1999)
                .subjectCode(MATH.code())
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall);
    }

    @Test
    public void itShouldRunQueryWithSchool() {

        final TargetReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.build(), OrganizationType.School);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isTrue();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);

        final ImmutableSet<Double> scaleScores = of(2500.0, 2400.0, 2300.0);
        final DescriptiveStatistics stats = new DescriptiveStatistics();
        for (final Double scaleScore : scaleScores) {
            stats.addValue(scaleScore);
        }

        final TargetRow templateRow = TargetRow.builder()
                .assessment(ActiveAssessment.builder().id(-8).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build())
                .organization(School.builder().id(-8L).name("School-8").naturalId("id-8").organizationType(OrganizationType.School).districtId(-18L).build())
                .dimension(Dimension.builder().type(Overall).build())
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(stats.getMean()))
                        .avgStdErr((int) Math.round(stats.getStandardDeviation() / Math.sqrt(scaleScores.size())))
                        .studentCount(3)
                        .build())
                .build();

        assertThat(reportResult.getPayload()).usingRecursiveFieldByFieldElementComparator()
                .contains(
                        //back-filled row
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(InsufficientData)
                                .standardMetRelativeResidualLevel(InsufficientData)
                                .targetNaturalId("MD|D")
                                .claimCode("4")
                                .build(),

                        //insufficient due to calculations
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(InsufficientData)
                                .standardMetRelativeResidualLevel(InsufficientData)
                                .targetNaturalId("OA|D")
                                .claimCode("2")
                                .build(),

                        //excluded
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Excluded)
                                .standardMetRelativeResidualLevel(Excluded)
                                .targetNaturalId("MD|D")
                                .claimCode("3")
                                .build(),
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Below)
                                .standardMetRelativeResidualLevel(Below)
                                .targetNaturalId("NBT|E-3")
                                .claimCode("1")
                                .build(),
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Above)
                                .standardMetRelativeResidualLevel(Above)
                                .targetNaturalId("MD|J-3")
                                .claimCode("1")
                                .build()
                );
    }

    @Test
    public void itShouldRunQueryWithDistrict() {
        final TargetReportResult reportResult = repository.findByOrganizationType(user,
                queryBuilder.organizationIds(of(-19L)).organizationType(OrganizationType.District).build(), District);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isTrue();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldRunQueryWithSchoolThatHasNoDataAndBackFillAllRows() {
        final TargetReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.organizationIds(of(-7L)).build(), OrganizationType.School);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isFalse();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);
    }
}