package org.opentestsystem.rdw.olap.repository.impl;


import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.model.TargetReportResult;
import org.opentestsystem.rdw.olap.repository.TargetReportRepository;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.TargetRow;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Objects;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.olap.TestUtils.verifyBooleanDimensionStudentCountByYesNoUnknown;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.IEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.LEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.StudentEnrolledGrade;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Above;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Below;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.Excluded;
import static org.opentestsystem.rdw.reporting.common.model.TargetReportingLevel.InsufficientData;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Sql(scripts = {"classpath:TargetEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcTargetReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private TargetReportRepository repository;

    @Value("${reporting.state.name}")
    private String stateName;

    @Autowired
    private JdbcTemplate template;

    private final static int mathTargetsCount = 11;

    private int ethnicityCount;
    private int genderCount;
    private TargetOrganizationQuery.Builder queryBuilder;

    // this test is for a user without embargo permissions
    private static final User user = User.builderExt()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            //only invalid district and school ids; repository should ignore them
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Before
    public void setUp() {
        ethnicityCount = countRowsInTable(template, "ethnicity");
        genderCount = countRowsInTable(template, "gender");

        queryBuilder = TargetOrganizationQuery.builder()
                .assessmentGradeCode("-4")
                .organizationType(OrganizationType.School)
                .organizationIds(of(-8L))
                .schoolYear(1999)
                .subjectCode("Math")
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall);
    }

    @Test
    public void itShouldRunQueryWithSchool() {

        final TargetReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.build(), OrganizationType.School);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isTrue();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);

        final ImmutableSet<Double> scaleScores = of(2500.0, 2400.0, 2300.0);
        final DescriptiveStatistics stats = new DescriptiveStatistics();
        for (final Double scaleScore : scaleScores) {
            stats.addValue(scaleScore);
        }

        final TargetRow templateRow = TargetRow.builder()
                .assessment(ActiveAssessment.builder().id(-8).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build())
                .organization(School.builder().id(-8L).name("School-8").naturalId("id-8").organizationType(OrganizationType.School).districtId(-18L).build())
                .dimension(Dimension.builder().type(Overall).build())
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(stats.getMean()))
                        .avgStdErr((int) Math.round(stats.getStandardDeviation() / Math.sqrt(scaleScores.size())))
                        .studentCount(3)
                        .build())
                .build();

        assertThat(reportResult.getPayload()).usingRecursiveFieldByFieldElementComparator()
                .contains(
                        //back-filled row
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(InsufficientData)
                                .standardMetRelativeResidualLevel(InsufficientData)
                                .targetNaturalId("MD|D")
                                .claimCode("4")
                                .build(),

                        //insufficient due to calculations
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(InsufficientData)
                                .standardMetRelativeResidualLevel(InsufficientData)
                                .targetNaturalId("OA|D")
                                .claimCode("2")
                                .build(),

                        //excluded
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Excluded)
                                .standardMetRelativeResidualLevel(Excluded)
                                .targetNaturalId("MD|D")
                                .claimCode("3")
                                .build(),
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Below)
                                .standardMetRelativeResidualLevel(Below)
                                .targetNaturalId("NBT|E-3")
                                .claimCode("1")
                                .build(),
                        templateRow.copy()
                                .studentRelativeResidualScoresLevel(Above)
                                .standardMetRelativeResidualLevel(Above)
                                .targetNaturalId("MD|J-3")
                                .claimCode("1")
                                .build()
                );
    }

    @Test
    public void itShouldRunQueryWithDistrict() {
        final TargetReportResult reportResult = repository.findByOrganizationType(user,
                queryBuilder.organizationIds(of(-19L)).organizationType(OrganizationType.District).build(), District);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isTrue();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldRunQueryWithSchoolThatHasNoDataAndBackFillAllRows() {
        final TargetReportResult reportResult = repository.findByOrganizationType(user, queryBuilder.organizationIds(of(-7L)).build(), OrganizationType.School);
        assertThat(reportResult.isCreatedWhileDataEmbargoed()).isFalse();
        assertThat(reportResult.isHasResults()).isFalse();
        assertThat(reportResult.getResultCount()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimension() {
        final TargetReportResult report = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(IEP)
                .build(), OrganizationType.School);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        final List<TargetRow> rows = report.getPayload();
        assertThat(rows.size()).isEqualTo(2 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 2, 1, 0);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimensionAndFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user,
                queryBuilder.dimensionType(IEP)
                        .iepCodes(of("yes"))
                        .build(), OrganizationType.School).getPayload(), 2, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithIEPDimensionAndGenderFilters() {
        final TargetReportResult report = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(IEP)
                .genderCodes(of("gender-18"))
                .build(), OrganizationType.School);

        final List<TargetRow> rows = report.getPayload();
        assertThat(rows.size()).isEqualTo(2 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 1, 0);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimension() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(LEP)
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(2 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 3, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimensionAndEthnicityFilter() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(LEP)
                .ethnicityCodes(of("ethnicity-28", "ethnicity-29"))
                .build(), OrganizationType.School).getPayload();

        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithLEPDimensionAndFilter() {
        List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(LEP)
                .lepCodes(of("no"))
                .build(), OrganizationType.School).getPayload();

        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 0, 0);

        rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(LEP)
                .lepCodes(of("no", "yes"))
                .build(), OrganizationType.School).getPayload();

        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 3, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithELASDimensionAndFilter() {
        List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(LEP)
                .elasCodes(of("RFEP"))
                .build(), OrganizationType.School).getPayload();
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimension() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(EconomicDisadvantage)
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(2 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 2, 0);
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimensionAndFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(EconomicDisadvantage)
                .economicDisadvantageCodes(of("yes"))
                .build(), OrganizationType.School).getPayload(), 1, 0, 0);

        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(EconomicDisadvantage)
                .economicDisadvantageCodes(of("no"))
                .build(), OrganizationType.School).getPayload(), 0, 2, 0);
    }

    @Test
    public void itShouldFindByQueryWithEconomicDisadvantageDimensionAndGenderFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(EconomicDisadvantage)
                .genderCodes(of("gender-19"))
                .build(), OrganizationType.School).getPayload(), 0, 1, 0);
    }

    @Test
    public void itShouldFindByQueryWithSection504Dimension() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Section504)
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(3 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 1, 1);
    }

    @Test
    public void itShouldFindByQueryWithSection504DimensionAndFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Section504)
                .section504Codes(of("undefined", "yes"))
                .build(), OrganizationType.School).getPayload(), 1, 0, 1);
    }

    @Test
    public void itShouldFindByQueryWithSection504DimensionAndEconomicDisadvantageFilter() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Section504)
                .economicDisadvantageCodes(of("no"))
                .build(), OrganizationType.School).getPayload();
        assertThat(rows.size()).isEqualTo(3 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 0, 1);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimension() {
        List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(3 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 2, 0, 1);

        rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"))
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(3 * mathTargetsCount);
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 1, 0, 0);

        rows = repository.findByOrganizationType(user, queryBuilder.genderCodes(of("gender-18")).build(), OrganizationType.School).getPayload();
        verifyBooleanDimensionStudentCountByYesNoUnknown(rows, 0, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAndFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .migrantStatusCodes(of("undefined"))
                .build(), OrganizationType.School).getPayload(), 0, 0, 1);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAndLEPFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .lepCodes(of("no"))
                .build(), OrganizationType.School).getPayload(), 0, 0, 0);

        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .lepCodes(of("yes"))
                .build(), OrganizationType.School).getPayload(), 2, 0, 1);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAnELASFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .elasCodes(of("RFEP"))
                .build(), OrganizationType.School).getPayload(), 0, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithMigrantStatusDimensionAMilitaryConnectedFilter() {
        verifyBooleanDimensionStudentCountByYesNoUnknown(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(MigrantStatus)
                .militaryConnectedCodes(of("Active"))
                .build(), OrganizationType.School).getPayload(), 0, 0, 0);
    }

    @Test
    public void itShouldFindByQueryWithGenderDimension() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(OrganizationType.School)
                .organizationIds(of(-9L))
                .dimensionType(Gender)
                .build(), OrganizationType.School).getPayload().size()).isEqualTo(genderCount * mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithGenderDimensionAndFilter() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Gender)
                .genderCodes(of("gender-19"))
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(mathTargetsCount);
        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-19"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithGenderDimensionAndMigrantStatusFilter() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Gender)
                .migrantStatusCodes(of("no"))
                .build(), OrganizationType.School).getPayload();

        assertThat(rows.size()).isEqualTo(genderCount * mathTargetsCount);
        assertThat(rows.stream().filter(r -> (r.getDimension().getCode().equals("gender-19"))).mapToInt(r -> (r.getMeasures().getStudentCount())).sum()).isEqualTo(0);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimension() {
        final List<TargetRow> reportRows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L))
                .dimensionType(Ethnicity)
                .build(), District).getPayload();

        assertThat(reportRows.size()).isEqualTo(ethnicityCount * mathTargetsCount);
        assertThat(reportRows.stream().filter(r -> (r.getMeasures().getStudentCount() > 0)).collect(toList()).size()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndFilter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L))
                .dimensionType(Ethnicity)
                .ethnicityCodes(of("ethnicity-28"))
                .build(), District).getPayload().size()).isEqualTo(mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndIepFilter() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(District)
                .organizationIds(of(-19L))
                .dimensionType(Ethnicity)
                .iepCodes(of("no"))
                .build(), District).getPayload();

        assertThat(rows.stream()
                .filter(r -> (r.getDimension().getCode().equals("ethnicity-29")))
                .mapToInt(r -> (r.getMeasures().getStudentCount()))
                .sum()).isEqualTo(mathTargetsCount);

        assertThat(rows.size()).isEqualTo(ethnicityCount * mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithEthnicityDimensionAndSection504Filter() {
        assertThat(repository.findByOrganizationType(user, queryBuilder
                .dimensionType(Ethnicity)
                .section504Codes(of("undefined"))
                .build(), OrganizationType.School).getPayload().size()).isEqualTo(ethnicityCount * mathTargetsCount);
    }

    @Test
    public void itShouldFindByQueryWithEnrolledGradeDimension() {
        final List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(OrganizationType.School)
                .organizationIds(of(-8L))
                .dimensionType(StudentEnrolledGrade)
                .build(), OrganizationType.School).getPayload();

        // NOTE: since we do not back fill with the student enrolled grade, the result includes only db data and no back-filled rows
        assertThat(rows.size()).isEqualTo(13);
        assertThat(rows.stream().filter(r -> r.getMeasures().getStudentCount() == 0).collect(toList())).isEmpty();
    }

    @Test
    public void itShouldFindByQueryWithEnrolledGradeDimensionAndDifferentFilters() {
        List<TargetRow> rows = repository.findByOrganizationType(user, queryBuilder
                .organizationType(OrganizationType.School)
                .organizationIds(of(-8L))
                .dimensionType(StudentEnrolledGrade)
                .genderCodes(of("gender-18"))
                .build(), OrganizationType.School).getPayload();

        // NOTE: since we do not back fill with the student enrolled grade, the result includes only db data and no back-filled rows
        assertThat(rows.size()).isEqualTo(10);
        assertThat(rows.get(0).getDimension().getCode()).isEqualTo("-4");
        assertThat(rows.get(0).getMeasures().getStudentCount()).isEqualTo(2);

        rows = repository.findByOrganizationType(user, queryBuilder.completenessCodes(of("Complete")).build(), OrganizationType.School).getPayload();
        assertThat(rows.size()).isEqualTo(3);
        assertThat(rows.get(0).getDimension().getCode()).isEqualTo("-4");
        assertThat(rows.get(0).getMeasures().getStudentCount()).isEqualTo(1);

        rows = repository.findByOrganizationType(user, queryBuilder.administrativeConditionCodes(of("IN")).build(), OrganizationType.School).getPayload();
        assertThat(rows.size()).isEqualTo(0);
    }

    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"}, statements = {"DELETE FROM exam_target_score"})
    @Test
    public void itShouldBackFillMissingDataForAllDimensionsButStudentEnrolledGrade() {
        queryBuilder
                // the below two filters do not change the back-filling rules
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"));

        //we do not back-fill the data for the StudentEnrolledGrade
        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(StudentEnrolledGrade).build(), OrganizationType.School).getPayload().size()).isEqualTo(0);

        final List<TargetRow> reportRows = repository.findByOrganizationType(user, queryBuilder.dimensionType(Overall).build(), OrganizationType.School).getPayload();
        assertThat(reportRows.size()).isEqualTo(mathTargetsCount);

        //make sure assessment label and subject codes are populated in back-filled data
        assertThat(reportRows.stream().map(r -> r.getAssessment().getLabel()).filter(Objects::nonNull).collect(toList()).size()).isEqualTo(mathTargetsCount);
        assertThat(reportRows.stream().map(r -> r.getAssessment().getSubjectCode()).filter(Objects::nonNull).collect(toList()).size()).isEqualTo(mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Gender).genderCodes(of("gender-18")).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Gender).genderCodes(null).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(genderCount * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Ethnicity).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(ethnicityCount * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Ethnicity).ethnicityCodes(of("ethnicity-28")).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(MigrantStatus).ethnicityCodes(null).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(3 * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(Section504).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(3 * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(LEP).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(2 * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(IEP).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(2 * mathTargetsCount);

        assertThat(repository.findByOrganizationType(user, queryBuilder.dimensionType(EconomicDisadvantage).build(), OrganizationType.School).getPayload().size())
                .isEqualTo(2 * mathTargetsCount);
    }

    @Test
    public void itShouldEstimateReportRowCount() {
        queryBuilder
                // the below two filters do not change the counting rules
                .administrativeConditionCodes(of("IN"))
                .completenessCodes(of("Complete"));

        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Overall).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        //for the StudentEnrolledGrade we always assume that there is one entry found
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(StudentEnrolledGrade).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Gender).build(), OrganizationType.School)).isEqualTo(genderCount * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Ethnicity).build(), OrganizationType.School)).isEqualTo(ethnicityCount * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(MigrantStatus).build(), OrganizationType.School)).isEqualTo(3 * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Section504).build(), OrganizationType.School)).isEqualTo(3 * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(LEP).build(), OrganizationType.School)).isEqualTo(2 * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(IEP).build(), OrganizationType.School)).isEqualTo(2 * mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(EconomicDisadvantage).build(), OrganizationType.School)).isEqualTo(2 * mathTargetsCount);

        //test with filters
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Gender).genderCodes(of("gender-19")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Ethnicity).genderCodes(of("gender-19")).ethnicityCodes(of("ethnicity-28")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(MigrantStatus).genderCodes(null).ethnicityCodes(null).migrantStatusCodes(of("yes")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(Section504).genderCodes(null).ethnicityCodes(null).section504Codes(of("undefined")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(LEP).section504Codes(null).lepCodes(of("yes")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(IEP).lepCodes(null).iepCodes(of("yes")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
        assertThat(repository.estimateReportRowCountByOrganizationType(queryBuilder.dimensionType(EconomicDisadvantage).iepCodes(null).economicDisadvantageCodes(of("yes")).build(), OrganizationType.School)).isEqualTo(mathTargetsCount);
    }

    @Test
    @Sql(scripts = {"classpath:TargetEntitiesSetup.sql"},
            statements = {"INSERT INTO exam_target_score(id, target_id, exam_id, school_year, asmt_id, student_relative_residual_score, standard_met_relative_residual_score, " +
                    "                                    student_id,completed_at, updated, update_import_id, migrate_id) VALUES " +
                    "  (-110,  -11, -350, 1999, -18, -1,    -1,      -5, '2016-08-14 19:05:33.000000', '2016-09-14 19:05:33.000000', -1, -1), " +
                    "  (-1920, -43, -350, 1999, -18, 0.1,    0.1,    -5, '2016-08-14 19:05:33.000000', '2016-09-14 19:05:33.000000', -1, -1)",
                    "INSERT INTO  exam (id, school_year, asmt_id, elas_id, language_id, completeness_id," +
                            "                                    administration_condition_id, performance_level," +
                            "                                    scale_score, grade_id, student_id, school_id," +
                            "                                    iep, lep, section504, economic_disadvantage, migrant_status," +
                            "                                    completed_at, updated, update_import_id, migrate_id) VALUES " +
                            "(-350, 1999 , -18, -11, -21, -9, -99, 1, 2500, -4, -9, -9, true, true, false, false, true, '2016-08-14 19:05:33.000000', '2016-09-14 19:05:33.000000', -1, -1)",
                    "INSERT INTO asmt_active_year (asmt_id, school_year) VALUES (-18, 1999)"})
    public void itShouldGroupByAssessmentId() {

        //if two different Summatives are administered at the same school year, we should group the data by the asmt id
        final List<TargetRow> reportRows = repository.findByOrganizationType(user, queryBuilder
                .build(), OrganizationType.School).getPayload();
        assertThat(reportRows.stream().map(TargetRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                ActiveAssessment.builder().id(-18).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build(),
                ActiveAssessment.builder().id(-8).gradeCode("-4").subjectCode("Math").label("asmt-8").examSchoolYear(1999).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        repository.findByOrganizationType(user, TargetOrganizationQuery.builder().build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() {
        repository.findByOrganizationType(user, queryBuilder.subjectCode(null).build(), OrganizationType.School);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrade() {
        repository.findByOrganizationType(user, queryBuilder.assessmentGradeCode(null).build(), OrganizationType.School);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailWithState() {
        repository.findByOrganizationType(user, queryBuilder.organizationType(OrganizationType.State).build(), OrganizationType.State);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailWithMoreThanOneSchool() {
        repository.findByOrganizationType(user, queryBuilder.organizationIds(of(123L, 124L)).build(), OrganizationType.School);
    }
}
