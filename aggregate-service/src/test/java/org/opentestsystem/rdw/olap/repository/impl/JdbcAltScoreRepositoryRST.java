package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AltScore;
import org.opentestsystem.rdw.reporting.common.model.CodedEntity;
import org.opentestsystem.rdw.olap.model.ScorableEntity;
import org.opentestsystem.rdw.olap.repository.AltScoreRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.olap.model.AggregateServiceCache.AltScores;

@Import(JdbcAltScoreRepository.class)
// there are no alt-scores defined as part of the default data set, so let's add a couple for Math
@Sql(statements = {
    "INSERT INTO subject_score (id, subject_id, asmt_type_id, score_type_id, code) VALUES (-90, 1, 3, 2, 'Theory'), (-91, 1, 3, 2, 'Applied')"
})
public class JdbcAltScoreRepositoryRST extends CachedRepositoryBackedIT {

    @Autowired
    public AltScoreRepository repository;

    @Test
    public void itShouldFindAllAltScoresOrderedByDisplayOrder() {
        final List<AltScore> altScores = repository.findAll();
        assertThat(altScores.size()).isEqualTo(2);
        assertThat(altScores.stream().map(ScorableEntity::getSubjectCode)).containsExactly("Math", "Math");
        assertThat(altScores.stream().map(ScorableEntity::getAssessmentTypeCode)).containsExactly("sum", "sum");
        assertThat(altScores.stream().map(CodedEntity::getCode)).containsExactlyInAnyOrder("Theory", "Applied");
    }

    @Test
    public void findAllShouldBeCached() {
        assertThat(getCachedValue(AltScores, "findAll")).isNull();

        repository.findAll();
        assertThat(getCachedValue(AltScores, "findAll")).isNotNull();

        cacheConfiguration.clearRepositoryCache();
        assertThat(getCachedValue(AltScores, "findAll")).isNull();
    }

}