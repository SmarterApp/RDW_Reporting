package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.UserOrganizationService;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultAuthorizationServiceTest {

    private UserOrganizationService userOrganizationService;
    private AuthorizationService service;

    private Set<Organization> organizations = ImmutableSet.of(
            School.builder().id(1).districtId(1).build(),
            School.builder().id(2).districtId(2).build(),
            District.builder().id(1).build(),
            District.builder().id(2).build()
    );

    private List<CodedEntity> assessmentTypes = newArrayList(
            CodedEntity.builder().id(1).code("ica").build(),
            CodedEntity.builder().id(2).code("iab").build(),
            CodedEntity.builder().id(3).code("sum").build()
    );

    private User user(final boolean statewide) {
        final PermissionScope scope = statewide
                ? PermissionScope.STATEWIDE
                : PermissionScope.builder().addSchoolId(1L).build();

        return User.builder()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(permissions(new Permission(AggregateRead, scope)))
                .build();
    }

    @Before
    public void before() {
        userOrganizationService = mock(UserOrganizationService.class);
        when(userOrganizationService.getOrganizations(any(User.class))).thenReturn(organizations);

        service = new DefaultAuthorizationService(userOrganizationService, false);
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForNonStatewideUsersWhenFlagDisabled() {
        assertThat(service.getAuthorizedAssessmentTypes(user(false), assessmentTypes))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldReturnNonInterimAssessmentTypesForStatewideUsersWhenFlagDisabled() {
        assertThat(service.getAuthorizedAssessmentTypes(user(true), assessmentTypes))
                .usingFieldByFieldElementComparator()
                .containsExactly(assessmentTypes.get(2));
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForNonStatewideUsersWhenFlagEnabled() {
        service = new DefaultAuthorizationService(userOrganizationService, true);
        assertThat(service.getAuthorizedAssessmentTypes(user(false), assessmentTypes))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForStatewideUsersWhenFlagEnabled() {
        service = new DefaultAuthorizationService(userOrganizationService, true);
        assertThat(service.getAuthorizedAssessmentTypes(user(true), assessmentTypes))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test(expected = Exception.class)
    public void checkAuthorizationShouldThrowExceptionWhenFlagDisabledAndAssessmentTypeIsNotAuthorized() {
        service.checkAuthorization(user(true), ReportQuery.builder().assessmentType(AssessmentType.ICA).build());
    }

    @Test
    public void checkAuthorizationShouldNotThrowExceptionWhenFlagEnabled() {
        service = new DefaultAuthorizationService(userOrganizationService, true);
        service.checkAuthorization(user(true), ReportQuery.builder().assessmentType(AssessmentType.ICA).build());
    }

    @Test
    public void checkAuthorizationShouldNotThrowExceptionWhenFlagDisabledAndUserIsNotStatewide() {
        service.checkAuthorization(user(false), ReportQuery.builder().assessmentType(AssessmentType.ICA).build());
    }

    @Test
    public void checkAuthorizationShouldNotThrowExceptionWhenFlagEnabledAndUserIsNotStatewide() {
        service = new DefaultAuthorizationService(userOrganizationService, true);
        service.checkAuthorization(user(false), ReportQuery.builder().assessmentType(AssessmentType.ICA).build());
    }

    @Test(expected = Exception.class)
    public void checkAuthorizationShouldThrowExceptionWhenUserDoesNotHaveTheRequestedSchool() {
        service.checkAuthorization(user(false), ReportQuery.builder().schoolIds(ImmutableSet.of(3)).build());
    }

    @Test(expected = Exception.class)
    public void checkAuthorizationShouldThrowExceptionWhenUserDoesNotHaveTheRequestedDistrict() {
        service.checkAuthorization(user(false), ReportQuery.builder().districts(ImmutableMap.of(3, false)).build());
    }

    @Test
    public void checkAuthorizationShouldNotThrowExceptionWhenUserHasTheRequestedSchool() {
        service.checkAuthorization(user(false), ReportQuery.builder().schoolIds(ImmutableSet.of(1)).build());
    }

    @Test
    public void checkAuthorizationShouldNotThrowExceptionWhenUserHasTheRequestedDistrict() {
        service.checkAuthorization(user(false), ReportQuery.builder().districts(ImmutableMap.of(1, false)).build());
    }

}
