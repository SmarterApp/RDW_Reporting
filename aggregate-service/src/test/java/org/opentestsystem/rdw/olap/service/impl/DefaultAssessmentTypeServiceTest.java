package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultAssessmentTypeServiceTest {

    private AssessmentTypeRepository repository;
    private DefaultAssessmentTypeService service;
    private List<CodedEntity> assessmentTypes = newArrayList(
            CodedEntity.builder().id(1).code("ica").build(),
            CodedEntity.builder().id(2).code("iab").build(),
            CodedEntity.builder().id(3).code("sum").build()
    );

    private User user(final boolean statewide) {
        final PermissionScope scope = statewide
                ? PermissionScope.STATEWIDE
                : PermissionScope.builder().addSchoolId(1L).build();

        return User.builder()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(permissions(new Permission(AggregateRead, scope)))
                .build();
    }

    @Before
    public void before() {
        repository = mock(AssessmentTypeRepository.class);
        when(repository.findAll()).thenReturn(assessmentTypes);
        service = new DefaultAssessmentTypeService(repository, false);
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForNonStatewideUsersWhenFlagDisabled() {
        assertThat(service.getAssessmentTypes(user(false)))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldReturnNonInterimAssessmentTypesForStatewideUsersWhenFlagDisabled() {
        assertThat(service.getAssessmentTypes(user(true)))
                .usingFieldByFieldElementComparator()
                .containsExactly(assessmentTypes.get(2));
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForNonStatewideUsersWhenFlagEnabled() {
        service = new DefaultAssessmentTypeService(repository, true);
        assertThat(service.getAssessmentTypes(user(false)))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

    @Test
    public void itShouldReturnAllAssessmentTypesForStatewideUsersWhenFlagEnabled() {
        service = new DefaultAssessmentTypeService(repository, true);
        assertThat(service.getAssessmentTypes(user(true)))
                .usingFieldByFieldElementComparator()
                .containsExactlyElementsOf(assessmentTypes);
    }

}
