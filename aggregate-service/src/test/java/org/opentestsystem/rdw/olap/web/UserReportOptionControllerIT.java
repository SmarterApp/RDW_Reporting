package org.opentestsystem.rdw.olap.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.service.UserReportOptionService;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserReportOptionController.class)
public class UserReportOptionControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserReportOptionService service;

    @Test
    public void itShouldGetTheReportOptions() throws Exception {

        final ReportOptions options = ReportOptions.builder()
                .assessmentTypes(newArrayList("2"))
                .assessmentGrades(newArrayList("3"))
                .ethnicities(newArrayList("5"))
                .languages(newArrayList("spa"))
                .genders(newArrayList("6"))
                .subjects(newArrayList())
                .schoolYears(newArrayList(2000, 2001))
                .build();

        when(service.getReportOptions(any(User.class))).thenReturn(options);

        mvc.perform(get("/reportOptions"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessmentTypes", hasSize(1)))
                .andExpect(jsonPath("$.assessmentTypes[0]").value("2"))
                .andExpect(jsonPath("$.assessmentGrades", hasSize(1)))
                .andExpect(jsonPath("$.assessmentGrades[0]").value("3"))
                .andExpect(jsonPath("$.ethnicities", hasSize(1)))
                .andExpect(jsonPath("$.ethnicities[0]").value("5"))
                .andExpect(jsonPath("$.languages", hasSize(1)))
                .andExpect(jsonPath("$.languages[0]").value("spa"))
                .andExpect(jsonPath("$.genders", hasSize(1)))
                .andExpect(jsonPath("$.genders[0]").value("6"))
                .andExpect(jsonPath("$.subjects", hasSize(0)))
                .andExpect(jsonPath("$.schoolYears", hasSize(2)))
                .andExpect(jsonPath("$.schoolYears[0]").value(2000))
                .andExpect(jsonPath("$.schoolYears[1]").value(2001));
    }
}
