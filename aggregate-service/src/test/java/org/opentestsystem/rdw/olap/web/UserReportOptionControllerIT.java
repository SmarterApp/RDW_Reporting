package org.opentestsystem.rdw.olap.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.service.UserReportOptionService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Sets.newHashSet;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(UserReportOptionController.class)
@WithMockUser(username = "test", password = "test", roles = "USER")
public class UserReportOptionControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserReportOptionService service;

    @Test
    public void itShouldGetTheReportOptions() throws Exception {

        final ReportOptions options = ReportOptions.builder()
                .assessmentTypes(newHashSet(
                        CodedEntity.builder().id(2).code("2").build()
                ))
                .assessmentGrades(newHashSet(
                        CodedEntity.builder().id(3).code("3").build()
                ))
                .ethnicities(newHashSet(
                        CodedEntity.builder().id(5).code("5").build()
                ))
                .genders(newHashSet(
                        CodedEntity.builder().id(6).code("6").build()
                ))
                .subjects(newHashSet(
                ))
                .schoolYears(newHashSet(
                        2000, 2001
                ))
                .build();

        when(service.getReportOptions(any(User.class))).thenReturn(options);

        mvc.perform(get("/reportOptions"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessmentTypes", hasSize(1)))
                .andExpect(jsonPath("$.assessmentTypes[?(@.id==2 && @.code=='2')]").exists())
                .andExpect(jsonPath("$.assessmentGrades", hasSize(1)))
                .andExpect(jsonPath("$.assessmentGrades[?(@.id==3 && @.code=='3')]").exists())
                .andExpect(jsonPath("$.ethnicities", hasSize(1)))
                .andExpect(jsonPath("$.ethnicities[?(@.id==5 && @.code=='5')]").exists())
                .andExpect(jsonPath("$.genders", hasSize(1)))
                .andExpect(jsonPath("$.genders[?(@.id==6 && @.code=='6')]").exists())
                .andExpect(jsonPath("$.subjects", hasSize(0)))
                .andExpect(jsonPath("$.schoolYears", hasSize(2)))
                .andExpect(jsonPath("$.schoolYears[?(@ == 2000)]").exists())
                .andExpect(jsonPath("$.schoolYears[?(@ == 2001)]").exists());
    }

}