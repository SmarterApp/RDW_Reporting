package org.opentestsystem.rdw.olap.web;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.service.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Set;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(AssessmentTypeController.class)
@WithMockUser(username = "test", password = "test", roles = "USER")
public class AssessmentTypeControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private AssessmentTypeService service;

    @Test
    public void itShouldGetTheReportOptions() throws Exception {

        final Set<CodedEntity> types = ImmutableSet.of(
                CodedEntity.builder().id(1).code("1").build()
        );

        when(service.getAssessmentTypes(any(User.class))).thenReturn(types);

        mvc.perform(get("/assessmentTypes"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[?(@.id==1 && @.code=='1')]").exists());

    }

}