package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public abstract class AbstractQueryConverterTest<Q extends AbstractAggregateReportQuery, B extends AbstractAggregateReportQuery.Builder<Q, B>> {
    private AbstractQueryConverter queryConverter;
    private QueryProviderRepositoryHelper repositoryHelper;
    private final String subgroupOverall = Overall.name();

    protected abstract AbstractQueryConverter createQueryConverterUnderTest(QueryProviderRepositoryHelper repositoryHelper);

    protected abstract B getAggregateReportQueryBuilder();

    protected abstract OrganizationTypeQuery.Builder toQueryBuilderWithCommonAttributes(Q reportQuery, StudentFilters filters);

    @Before
    public void setUp() {
        repositoryHelper = mock(QueryProviderRepositoryHelper.class);
        queryConverter = createQueryConverterUnderTest(repositoryHelper);
    }

    @Test
    public void itShouldConvertQueryIntoMultipleOrganizationQueries() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeState(true)
                .districtIds(of(-19L, -29L))
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery stateQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.School)
                .organizationIds(query.getSchoolIds())
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(query.getDistrictIds())
                .dimensionType(Overall)
                .build();

        assertThat(queryConverter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldConvertQueryIntoMultipleDimensionQueries() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeState(true)
                .schoolIds(of())
                .dimensionTypes(of(Overall, Gender, Ethnicity))
                .build();

        final OrganizationTypeQuery overallQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery genderQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Gender)
                .build();

        final OrganizationTypeQuery ethnicityQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Ethnicity)
                .build();

        assertThat(queryConverter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(overallQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(genderQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(ethnicityQuery, OrganizationType.State));
    }

    @Test
    public void itShouldIncludeAllDistricts() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of(-19L))
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeDistrictsAndDistrictsOfSchools() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeAllDistricts(false)
                .schoolIds(of(-123L))
                .includeAllDistrictsOfSchools(true)
                .districtIds(of(-19L, -27L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findAllDistrictsOfSchools(query.getSchoolIds())).thenReturn(of(-19L, -77L));

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L, -27L, -77L))
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.School)
                .organizationIds(of(-123L))
                .dimensionType(Overall)
                .build();

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistricts() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeAllSchoolsOfDistricts(true)
                .districtIds(of(-19L))
                .schoolIds(of(-2L))
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findSchoolsIdsByDistrictIds(eq(of(-19L)))).thenReturn(of(-2L));

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistrictsForAllDistricts() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of())
                .includeAllSchoolsOfDistricts(true)
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery stateQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getStudentFilters())
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .build();

        when(repositoryHelper.findAllDistrictIds()).thenReturn(of(-19L));

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(stateQuery, OrganizationType.District),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.School));
    }


    @Test
    public void itShouldConvertFilteredSubgroupQueryIntoMultipleOrganizationQueries() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .includeState(true)
                .districtIds(of(-19L, -29L))
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .build();

        final StudentFilters filters = query.getSubgroups().get(subgroupOverall);

        final OrganizationTypeQuery stateQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .genderCodes(query.getSubgroups().get(subgroupOverall).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        final OrganizationTypeQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.School)
                .organizationIds(query.getSchoolIds())
                .genderCodes(query.getSubgroups().get(subgroupOverall).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, filters)
                .organizationType(OrganizationType.District)
                .organizationIds(query.getDistrictIds())
                .genderCodes(query.getSubgroups().get(subgroupOverall).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        assertThat(queryConverter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));

    }

    @Test
    public void itShouldConvertFilteredSubgroupQueryIntoMultipleSubgroupQueries() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .subgroup("test", StudentFilters.builder().genderCodes(of("female")).build())
                .includeState(true)
                .schoolIds(of())
                .build();

        final OrganizationTypeQuery overallQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        final OrganizationTypeQuery testQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get("test"))
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .subgroupKey("test")
                .build();

        assertThat(queryConverter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(new AggregateReportQueryDescription(overallQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(testQuery, OrganizationType.State));
    }

    @Test
    public void itShouldIncludeAllDistrictsWithFilteredSubgroupQuery() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of(-19L))
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeDistrictsAndDistrictsOfSchoolsWithFilteredSubgroupQuery() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .includeAllDistricts(false)
                .schoolIds(of(-123L))
                .includeAllDistrictsOfSchools(true)
                .districtIds(of(-19L, -27L))
                .build();

        when(repositoryHelper.findAllDistrictsOfSchools(query.getSchoolIds())).thenReturn(of(-19L, -77L));

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L, -27L, -77L))
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        final OrganizationTypeQuery schoolQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.School)
                .organizationIds(of(-123L))
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(schoolQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistrictsWithFilteredSubgroupQuery() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .includeAllSchoolsOfDistricts(true)
                .districtIds(of(-19L))
                .schoolIds(of(-2L))
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        when(repositoryHelper.findSchoolsIdsByDistrictIds(eq(of(-19L)))).thenReturn(of(-2L));

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(districtQuery, OrganizationType.School),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.District));
    }

    @Test
    public void itShouldIncludeAllSchoolsOfDistrictsForAllDistrictsWithFilteredSubgroupQuery() {
        final Q query = (Q) getAggregateReportQueryBuilder()
                .subgroup(subgroupOverall, StudentFilters.builder().genderCodes(of("male")).build())
                .includeAllDistricts(true)
                .schoolIds(of())
                .districtIds(of())
                .includeAllSchoolsOfDistricts(true)
                .build();

        final OrganizationTypeQuery stateQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        final OrganizationTypeQuery districtQuery = toQueryBuilderWithCommonAttributes(query, query.getSubgroups().get(subgroupOverall))
                .organizationType(OrganizationType.District)
                .organizationIds(of(-19L))
                .dimensionType(Overall)
                .subgroupKey(subgroupOverall)
                .build();

        when(repositoryHelper.findAllDistrictIds()).thenReturn(of(-19L));

        assertThat(queryConverter.convert(query))
                .usingRecursiveFieldByFieldElementComparator()
                .contains(new AggregateReportQueryDescription(stateQuery, OrganizationType.District),
                        new AggregateReportQueryDescription(districtQuery, OrganizationType.School));
    }
}