package org.opentestsystem.rdw.olap.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.BasicAggregateReportResult;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandlerProvider;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableSet.of;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomAggregateReportController.class)
// API is disabled by default so test has to enable it
@ActiveProfiles("api-enabled")
@Import(ObjectMapperTestConfiguration.class)
public class CustomAggregateReportControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    private String serializedQuery;

    @MockBean
    private AggregateQueryHandlerProvider handlerProvider;

    @Before
    public void setup() throws Exception {
        final ObjectMapper objectMapper = new ObjectMapper();

        final StudentFilters filters = StudentFilters.builder()
                .genderCodes(of())
                .lepCodes(of())
                .ethnicityCodes(of())
                .migrantStatusCodes(of())
                .section504Codes(of())
                .iepCodes(of())
                .economicDisadvantageCodes(of())
                .build();

        final BasicAggregateReportQuery query = BasicAggregateReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .schoolYears(of(2017))
                .subjectCodes(of(MATH.code()))
                .schoolIds(of())
                .districtIds(of())
                .assessmentTypeCode(ICA.code())
                .completenessCodes(of())
                .administrativeConditionCodes(of())
                .studentFilters(filters)
                .build();

        serializedQuery = objectMapper.writeValueAsString(query);

        final BasicAggregateReportResult result = BasicAggregateReportResult.builder()
                .rows(ImmutableList.of(
                        BasicAggregateRow.builder()
                                .measures(Measures.builder()
                                        .avgScaleScore(2000)
                                        .level1Count(100)
                                        .level2Count(200)
                                        .level3Count(300)
                                        .level4Count(400)
                                        .build())
                                .organization(Organization.builder().name("CA").id(1L).organizationType(OrganizationType.State).build())
                                .dimension(Dimension.builder().type(DimensionType.Overall).build())
                                .assessment(ActiveAssessment.builder().id(2).gradeCode("3").subjectCode("Math").examSchoolYear(2017).build())
                                .build(),
                        BasicAggregateRow.builder()
                                .measures(Measures.builder()
                                        .avgScaleScore(2300)
                                        .level1Count(101)
                                        .level2Count(201)
                                        .level3Count(301)
                                        .level4Count(401)
                                        .build())
                                .organization(School.builder().districtId(9).name("San Diego High").id(1L).organizationType(OrganizationType.School).build())
                                .dimension(Dimension.builder().type(DimensionType.Overall).build())
                                .assessment(ActiveAssessment.builder().id(2).gradeCode("3").subjectCode("Math").examSchoolYear(2016).build())
                                .build()
                ))
                .build();

        final AggregateQueryHandler handler = mock(AggregateQueryHandler.class);
        when(handlerProvider.findHandler(any(AggregateQuery.class))).thenReturn(handler);
        when(handler.findByQuery(any(User.class), any(AggregateQuery.class))).thenReturn(result);
        when(handler.handles(any(AggregateQuery.class))).thenReturn(true);
    }

    @Test
    public void isShouldPostCustomAggregateReport() throws Exception {
        mvc.perform(post("/aggregate")
                .content(serializedQuery)
                .contentType(MediaType.APPLICATION_JSON))

                .andExpect(status().isOk())
                .andExpect(jsonPath("$.payload", hasSize(2)))
                .andExpect(jsonPath("$.payload[0].dimension.type", equalTo("Overall")))
                .andExpect(jsonPath("$.payload[0].assessment.examSchoolYear", equalTo(2017)))
                .andExpect(jsonPath("$.payload[0].assessment.id", equalTo(2)))
                .andExpect(jsonPath("$.payload[0].assessment.gradeCode", equalTo("3")))
                .andExpect(jsonPath("$.payload[0].assessment.subjectCode", equalTo("Math")))
                .andExpect(jsonPath("$.payload[0].organization.organizationType", equalTo("State")))
                .andExpect(jsonPath("$.payload[0].organization.id", equalTo(1)))
                .andExpect(jsonPath("$.payload[0].organization.name", equalTo("CA")))
                .andExpect(jsonPath("$.payload[0].measures.avgScaleScore", equalTo(2000)))
                .andExpect(jsonPath("$.payload[0].measures.level1Count", equalTo(100)))
                .andExpect(jsonPath("$.payload[0].measures.level2Count", equalTo(200)))
                .andExpect(jsonPath("$.payload[0].measures.level3Count", equalTo(300)))
                .andExpect(jsonPath("$.payload[0].measures.level4Count", equalTo(400)))
                .andExpect(jsonPath("$.payload[1].organization.organizationType", equalTo("School")))
                .andExpect(jsonPath("$.payload[1].organization.districtId", equalTo(9)));
    }
}