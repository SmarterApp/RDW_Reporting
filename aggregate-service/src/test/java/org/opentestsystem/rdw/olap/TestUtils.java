package org.opentestsystem.rdw.olap;

import org.opentestsystem.rdw.reporting.common.model.AggregateRow;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

final public class TestUtils {
    private TestUtils() {
    }

    public static void verifyStateStudentCount(final List<? extends AggregateRow> rows, final int expectedCount) {
        assertThat(rows.stream()
                .filter(r -> (r.getOrganization().getOrganizationType() == State))
                .mapToInt(r -> r.getMeasures().getStudentCount())
                .sum())
                .isEqualTo(expectedCount);
    }

    public static void verifyBooleanDimensionStudentCountByYesNoUnknown(final List<? extends AggregateRow> rows, final int yesCount, final int noCount, final int unknownCount) {
        for (final AggregateRow row : rows) {
            if (row.getDimension().getCode().equalsIgnoreCase("no")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(noCount);
            else if (row.getDimension().getCode().equalsIgnoreCase("yes")) assertThat(row.getMeasures().getStudentCount()).isEqualTo(yesCount);
            else assertThat(row.getMeasures().getStudentCount()).isEqualTo(unknownCount);
        }
    }

    public static void verifyDistrictStudentCount(final List<? extends AggregateRow> rows, final long districtId, final int expectedCount) {
        assertThat(rows.stream()
                .filter(r -> (r.getOrganization().getOrganizationType() == District && r.getOrganization().getId() == districtId))
                .mapToInt(r -> r.getMeasures().getStudentCount())
                .sum())
                .isEqualTo(expectedCount);
    }

    public static String normalizeSql(final String input) {
        return input.replaceAll("\\s+", " ")
            .replaceAll("\\(\\s+", "(")
            .replaceAll("\\s+\\)", ")");
    }
}
