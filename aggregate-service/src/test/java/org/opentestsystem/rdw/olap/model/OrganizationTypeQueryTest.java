package org.opentestsystem.rdw.olap.model;

import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

public class OrganizationTypeQueryTest {

    @Test
    public void itShouldValidate() {
        final OrganizationTypeQuery.Builder builder = OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .subjectCodes(of("test"))
                .organizationType(State)
                .assessmentGradeCodes(of("grade"))
                .schoolYears(of(2000));

        builder.build().validate();
        builder.organizationType(School).organizationIds(of(1L)).build().validate();
        builder.organizationType(District).organizationIds(of(1L)).build().validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        OrganizationTypeQuery.builder().build().validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForSchoolOrganizationType() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .organizationType(School)
                .schoolYears(of(2000))
                .subjectCodes(of("test"))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganizationIdsForDistrictOrganizationType() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .organizationType(District)
                .schoolYears(of(2000))
                .subjectCodes(of("test"))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .organizationType(State)
                .schoolYears(of(2000))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAssessmentType() {
        OrganizationTypeQuery
                .builder()
                .dimensionType(DimensionType.Overall)
                .subjectCodes(of("test"))
                .organizationType(State)
                .schoolYears(of(2000))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireDimension() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .subjectCodes(of("test"))
                .organizationType(State)
                .schoolYears(of(2000))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .subjectCodes(of("test"))
                .schoolYears(of(2000))
                .assessmentGradeCodes(of("grade"))
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYear() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .subjectCodes(of("test"))
                .assessmentGradeCodes(of("grade"))
                .organizationType(State)
                .build()
                .validate();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrade() {
        OrganizationTypeQuery
                .builder()
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(DimensionType.Overall)
                .subjectCodes(of("test"))
                .schoolYears(of(2000))
                .organizationType(State)
                .build()
                .validate();
    }
}