package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandlerProvider;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;

import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultAggregateQueryHandlerProviderTest {

    @Mock
    private AggregateQuery handledQuery;

    private AggregateQueryHandlerProvider provider;
    private AggregateQueryHandler handler;

    @Before
    public void setUp() {
        handler = mock(AggregateQueryHandler.class);


        final Set<AggregateQueryHandler> handlers = of(handler);
        provider = new DefaultAggregateQueryHandlerProvider(handlers);
    }

    @Test
    public void itShouldReturnHandler() {
        when(handler.handles(handledQuery)).thenReturn(true);
        assertThat(provider.findHandler(handledQuery)).isEqualTo(handler);
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowForMissingHandler() {
        when(handler.handles(handledQuery)).thenReturn(false);
        provider.findHandler(handledQuery);
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowForUnknownQuery() {
        provider.findHandler(mock(AggregateQuery.class));
    }
}