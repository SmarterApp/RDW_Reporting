package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.AggregateReportResult;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandlerProvider;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;

import java.util.Objects;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class DefaultAggregateQueryHandlerProviderTest {

    @Mock
    private AggregateQuery handledQuery;

    @Mock
    private AggregateQuery unhandledQuery;

    private AggregateQueryHandlerProvider provider;

    @Before
    public void setUp() {
        final Set<AggregateQueryHandler> handlers = of(new TestAggregateQueryHandler());
        provider = new DefaultAggregateQueryHandlerProvider(handlers);
    }

    @Test
    public void itShouldReturnHandler() {
        assertThat(provider.findHandler(handledQuery)).isInstanceOfAny(TestAggregateQueryHandler.class);
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowForUnknownQuery() {
        provider.findHandler(unhandledQuery);
    }

    private class TestAggregateQueryHandler implements AggregateQueryHandler {

        @Override
        public boolean handles(final AggregateQuery query) {
            return Objects.equals(handledQuery, query);
        }

        @Override
        public AggregateReportResult<ImmutableList> findByQuery(final User user, final AggregateQuery query) {
            return null;
        }

        @Override
        public int estimateReportRowCount(final User user, final AggregateQuery query) {
            return 0;
        }
    }
}