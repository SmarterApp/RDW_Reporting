package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.service.LongitudinalYearGradeService;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.BasicLongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anySet;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.service.impl.AggregateTestUtils.toLongitudinalQueryBuilderWithCommonAttributes;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Most of the functionality is shared and tested by BasicQueryAdapter's Test.
 */
@SuppressWarnings("unchecked")
public class BasicLongitudinalReportQueryAdapterTest {
    private Set<String> asmtGradeCodes = of("11", "08", "07");
    private final List<YearGradePair> yearGradePairs = ImmutableList.of(new YearGradePair(1999, "11"), new YearGradePair(1996, "08"), new YearGradePair(1995, "07"));

    private BasicLongitudinalReportQueryAdapter queryAdapter;
    private BasicLongitudinalReportQuery.Builder queryBuilder;

    @Before
    public void setUp() {
        final LongitudinalYearGradeService longitudinalYearGradeService = mock(LongitudinalYearGradeService.class);
        when(longitudinalYearGradeService.toYearGradePairs(anyInt(), anySet())).thenReturn(yearGradePairs);

        final QueryProviderRepositoryHelper repositoryHelper = mock(QueryProviderRepositoryHelper.class);
        queryAdapter = new BasicLongitudinalReportQueryAdapter(repositoryHelper, longitudinalYearGradeService);
        queryBuilder = BasicLongitudinalReportQuery.builder()
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(asmtGradeCodes)
                .toSchoolYear(1999)
                .assessmentTypeCode(SUMMATIVE.code());
    }

    @Test
    public void itShouldConvertQueryIntoMultipleSubjectQueries() {
        final BasicLongitudinalReportQuery query = queryBuilder
                .subjectCodes(of(MATH.code(), ELA.code()))
                .includeState(true)
                .build();

        final LongitudinalReportQuery overallQuery = toLongitudinalQueryBuilderWithCommonAttributes(query.copy().subjectCodes(of(MATH.code())).build(), query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .gradeYearPairs(yearGradePairs)
                .dimensionType(Overall)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new AggregateReportQueryDescription(overallQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(overallQuery.copy().subjectCode(ELA.code()).build(), OrganizationType.State));
    }

    @Test
    public void itShouldNotSupportMultipleSubjects() {
        assertThat(queryAdapter.isSupportMultipleSubjects()).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForQueryWithMultipleSubjects() {
        final BasicLongitudinalReportQuery query = queryBuilder
                .subjectCodes(of(MATH.code(), ELA.code()))
                .includeState(true)
                .build();

        queryAdapter.toOrganizationQueryBuilderWithCommonAttributes(query, query.getStudentFilters());
    }
}