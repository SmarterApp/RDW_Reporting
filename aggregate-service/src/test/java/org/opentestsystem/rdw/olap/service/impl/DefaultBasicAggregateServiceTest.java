package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryAdapter;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.BasicCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupCustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.core.task.TaskExecutor;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class DefaultBasicAggregateServiceTest extends AbstractCustomAggregateServiceTest<AggregateRow,
        CustomAggregateReportResult,
        BasicCustomAggregateReportQuery,
        AggregateReportQuery> {

    private CustomAggregateReportRepository repository;
    private BasicQueryAdapter queryAdapter;
    private DefaultBasicCustomAggregateService serviceUnderTest;

    @Override
    protected AggregateQueryHandler createServiceUnderTest(final AuthorizationService authorizationService, final AggregateReportSettings aggregateReportSettings, final TaskExecutor threadPoolTaskExecutor) {
        queryAdapter = mock(BasicQueryAdapter.class);
        repository = mock(CustomAggregateReportRepository.class);
        serviceUnderTest = new DefaultBasicCustomAggregateService(repository, authorizationService, aggregateReportSettings, queryAdapter, threadPoolTaskExecutor);
        return serviceUnderTest;
    }

    @Override
    protected CustomAggregateReportResult getRepositoryResults() {
        return CustomAggregateReportResult.builder()
                .row(AggregateTestUtils.reportRow(OrganizationType.School, -123L, Overall).build())
                .build();
    }

    public ReportRepository getRepository() {
        return repository;
    }

    public AggregateQueryAdapter getQueryAdapter() {
        return queryAdapter;
    }

    @Override
    protected AggregateReportQuery getOrganizationTypeQuery() {
        return mock(AggregateReportQuery.class);
    }

    @Override
    protected BasicCustomAggregateReportQuery.Builder getAggregateQueryBuilderWithValidQuery() {
        return BasicCustomAggregateReportQuery.builder()
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(of("-8"))
                .schoolIds(ImmutableSet.of(123L))
                .schoolYears(of(1999))
                .schoolIds(of(123L))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(IAB.code());
    }

    @Override
    protected BasicCustomAggregateReportQuery.Builder getEmtpyAggregateQueryBuilder() {
        return BasicCustomAggregateReportQuery.builder();
    }

    @Override
    public void itShouldHandleQuery() {
        assertThat(serviceUnderTest.handles(BasicCustomAggregateReportQuery.builder().build())).isTrue();
        assertThat(serviceUnderTest.handles(FilteredSubgroupCustomAggregateReportQuery.builder().build())).isFalse();
    }

    @Override
    public void itShouldReturnReportResultBuilder() {
        assertThat(serviceUnderTest.getReportResultBuilder()).isInstanceOf(CustomAggregateReportResult.Builder.class);
    }

    @Test
    public void itShouldAddOverallDimension() {
        final BasicCustomAggregateReportQuery query = getAggregateQueryBuilderWithValidQuery().dimensionTypes(null).build();

        final ArgumentCaptor<BasicCustomAggregateReportQuery> queryArgumentCaptor = ArgumentCaptor.forClass(BasicCustomAggregateReportQuery.class);

        serviceUnderTest.estimateReportRowCount(user, query);
        verify(queryAdapter).convert(queryArgumentCaptor.capture());
        assertThat(queryArgumentCaptor.getValue().getDimensionTypes()).contains(Overall);
    }
}