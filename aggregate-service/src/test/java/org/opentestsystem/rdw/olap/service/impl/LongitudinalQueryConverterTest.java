package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.service.LongitudinalYearGradeService;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery.Builder;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anySet;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.olap.service.impl.AggregateTestUtils.toLongitudinalQueryBuilderWithCommonAttributes;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
public class LongitudinalQueryConverterTest extends AbstractQueryConverterTest<LongitudinalReportQuery, Builder> {

    private Set<String> asmtGradeCodes = of("11", "08", "07");
    private final List<YearGradePair> yearGradePairs = ImmutableList.of(new YearGradePair(1999, "11"), new YearGradePair(1996, "08"), new YearGradePair(1995, "07"));
    private final String overallSubgroup = Overall.name();

    private LongitudinalQueryConverter queryAdapter;

    @Override
    protected AbstractQueryConverter createQueryConverterUnderTest(final QueryProviderRepositoryHelper repositoryHelper) {
        final LongitudinalYearGradeService longitudinalYearGradeService = mock(LongitudinalYearGradeService.class);
        when(longitudinalYearGradeService.toYearGradePairs(anyInt(), anySet())).thenReturn(yearGradePairs);

        queryAdapter = new LongitudinalQueryConverter(repositoryHelper, longitudinalYearGradeService);
        return queryAdapter;
    }

    @Override
    protected LongitudinalReportQuery.Builder getAggregateReportQueryBuilder() {
        return LongitudinalReportQuery.builder()
                .dimensionType(DimensionType.Overall)
                .assessmentGradeCodes(asmtGradeCodes)
                .schoolIds(of(123L))
                .toSchoolYear(1999)
                .subjectCodes(of("Math"))
                .assessmentTypeCode(SUMMATIVE.code());
    }

    @Override
    protected OrganizationTypeQuery.Builder toQueryBuilderWithCommonAttributes(final LongitudinalReportQuery reportQuery,
                                                                               final StudentFilters filters) {
        return toLongitudinalQueryBuilderWithCommonAttributes(reportQuery, filters != null ? filters : StudentFilters.builder().build())
                .gradeYearPairs(yearGradePairs);
    }

    @Test
    public void itShouldConvertQueryIntoMultipleSubjectQueries() {
        final LongitudinalReportQuery query = getAggregateReportQueryBuilder()
                .subjectCodes(of("Math", "ELA"))
                .schoolIds(of())
                .includeState(true)
                .build();

        final LongitudinalOrganizationQuery overallQuery = toLongitudinalQueryBuilderWithCommonAttributes(query.copy().subjectCodes(of("Math")).build(), query.getStudentFilters())
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .gradeYearPairs(yearGradePairs)
                .dimensionType(Overall)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new AggregateReportQueryDescription(overallQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(overallQuery.copy().subjectCode("ELA").build(), OrganizationType.State));
    }

    @Test
    public void itShouldConvertFilteredSubgroupQueryIntoMultipleSubjectQueries() {
        final LongitudinalReportQuery query = LongitudinalReportQuery.builder()
                .assessmentGradeCodes(asmtGradeCodes)
                .subjectCodes(of("Math", "ELA"))
                .assessmentTypeCode(SUMMATIVE.code())
                .toSchoolYear(1999)
                .includeState(true)
                .subgroup(overallSubgroup, StudentFilters.builder().genderCodes(of("male")).build())
                .build();

        final StudentFilters filters = query.getSubgroups().get(overallSubgroup);

        final LongitudinalReportQuery mathQuery = query.copy().subjectCodes(of("Math")).build();

        final LongitudinalOrganizationQuery stateQuery = toLongitudinalQueryBuilderWithCommonAttributes(mathQuery, filters)
                .organizationType(OrganizationType.State)
                .organizationIds(of())
                .genderCodes(query.getSubgroups().get(overallSubgroup).getGenderCodes())
                .dimensionType(Overall)
                .subgroupKey(overallSubgroup)
                .gradeYearPairs(yearGradePairs)
                .build();

        assertThat(queryAdapter.convert(query)).usingRecursiveFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        new AggregateReportQueryDescription(stateQuery, OrganizationType.State),
                        new AggregateReportQueryDescription(stateQuery.copy().subjectCode("ELA").build(), OrganizationType.State));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailForQueryWithMultipleSubjects() {
        final LongitudinalReportQuery query = getAggregateReportQueryBuilder()
                .subjectCodes(of("Math", "ELA"))
                .includeState(true)
                .build();

        queryAdapter.getOrganizationTypeQueryBuilder(query, query.getStudentFilters());
    }
}