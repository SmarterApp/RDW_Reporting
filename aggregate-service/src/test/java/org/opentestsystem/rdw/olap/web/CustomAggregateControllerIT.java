package org.opentestsystem.rdw.olap.web;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableSet.of;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomAggregateController.class)
@WithMockUser(username = "test", password = "test", roles = "USER")
public class CustomAggregateControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private CustomAggregateService service;

    @Test
    public void isShouldGetCustomAggregateReport() throws Exception {
        when(service.findByQuery(refEq(
                ReportQuery.builder()
                        .asmtGrades(of(4))
                        .includeState(true)
                        .schoolYears(of(2017))
                        .subjectIds(of(1))
                        .schoolIds(of())
                        .districts(ImmutableMap.of())
                        .assessmentType(AssessmentType.ICA)
                        .build()))
        ).thenReturn(ImmutableList.of(
                ReportRow.builder()
                        .measures(Measures.builder()
                                .avgScaleScore(2000)
                                .level1Count(100)
                                .level2Count(200)
                                .level3Count(300)
                                .level4Count(400)
                                .build())
                        .organization(Organization.builder().name("CA").id(1).type(OrganizationType.State).build())
                        .dimension(new Dimension(null, DimensionType.Overall))
                        .examSchoolYear(2017)
                        .assessment(Assessment.builder().id(2).gradeId(3).subjectCode("Math").build())
                        .build(),
                ReportRow.builder()
                        .measures(Measures.builder()
                                .avgScaleScore(2300)
                                .level1Count(101)
                                .level2Count(201)
                                .level3Count(301)
                                .level4Count(401)
                                .build())
                        .organization(Organization.builder().name("san Diego Unified").id(1).type(OrganizationType.District).build())
                        .dimension(new Dimension(null, DimensionType.Overall))
                        .examSchoolYear(2016)
                        .assessment(Assessment.builder().id(2).gradeId(3).subjectCode("Math").build())
                        .build()
        ));

        mvc.perform(get("/api/customaggregate?subjectIds=1&schoolYears=2017&asmtGrades=4&state=TF&assessmentType=ICA"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$[0].dimension.type", equalTo("Overall")))
                .andExpect(jsonPath("$[0].examSchoolYear", equalTo(2017)))
                .andExpect(jsonPath("$[0].assessment.id", equalTo(2)))
                .andExpect(jsonPath("$[0].assessment.gradeId", equalTo(3)))
                .andExpect(jsonPath("$[0].assessment.subjectId", equalTo(1)))
                .andExpect(jsonPath("$[0].organization.type", equalTo("State")))
                .andExpect(jsonPath("$[0].organization.id", equalTo(1)))
                .andExpect(jsonPath("$[0].organization.name", equalTo("CA")))
                .andExpect(jsonPath("$[0].measures.avgScaleScore", equalTo(2000)))
                .andExpect(jsonPath("$[0].measures.level1Count", equalTo(100)))
                .andExpect(jsonPath("$[0].measures.level2Count", equalTo(200)))
                .andExpect(jsonPath("$[0].measures.level3Count", equalTo(300)))
                .andExpect(jsonPath("$[0].measures.level4Count", equalTo(400)))
                .andExpect(jsonPath("$[1].organization.type", equalTo("District")));
    }

    @Test
    public void isShouldGetEstimateReportRowCount() throws Exception {
        when(service.estimateReportRowCount(refEq(
                ReportQuery.builder()
                        .asmtGrades(of(4))
                        .includeState(true)
                        .schoolYears(of(2017))
                        .subjectIds(of(1))
                        .schoolIds(of())
                        .districts(ImmutableMap.of())
                        .assessmentType(AssessmentType.ICA)
                        .build()))
        ).thenReturn(99);

        mvc.perform(get("/api/customaggregate/estimateReportRowCount?subjectIds=1&schoolYears=2017&asmtGrades=4&state=TF&assessmentType=ICA"))
                .andExpect(status().isOk())
                .andExpect(content().string("99"));
    }
}