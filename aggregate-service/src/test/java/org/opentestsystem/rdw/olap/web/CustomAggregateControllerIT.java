package org.opentestsystem.rdw.olap.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.service.CustomAggregateExportService;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableSet.of;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.refEq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV;
import static org.springframework.http.HttpHeaders.CONTENT_LENGTH;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomAggregateController.class)
@WithMockUser(username = "test", password = "test", roles = "USER")
public class CustomAggregateControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private CustomAggregateService service;

    @MockBean
    private CustomAggregateExportService exportService;

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void isShouldGetCustomAggregateReport() throws Exception {
        final ReportQuery query = ReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .schoolYears(of(2017))
                .subjectCodes(of(MATH.code()))
                .schoolIds(of())
                .districtIds(of())
                .assessmentTypeCode(ICA.code())
                .genderCodes(of())
                .completenessCodes(of())
                .administrativeConditionCodes(of())
                .lepCodes(of())
                .ethnicityCodes(of())
                .migrantStatusCodes(of())
                .section504Codes(of())
                .iepCodes(of())
                .economicDisadvantageCodes(of())
                .build();

        final String serializedQuery = objectMapper.writeValueAsString(query);

        when(service.findByQuery(any(User.class), any(ReportQuery.class))).thenReturn(ImmutableList.of(
                ReportRow.builder()
                        .measures(Measures.builder()
                                .avgScaleScore(2000)
                                .level1Count(100)
                                .level2Count(200)
                                .level3Count(300)
                                .level4Count(400)
                                .build())
                        .organization(Organization.builder().name("CA").id(1L).organizationType(OrganizationType.State).build())
                        .dimension(new Dimension(null, DimensionType.Overall))
                        .assessment(ActiveAssessment.builder().id(2).gradeCode("3").subjectCode("Math").examSchoolYear(2017).build())
                        .build(),
                ReportRow.builder()
                        .measures(Measures.builder()
                                .avgScaleScore(2300)
                                .level1Count(101)
                                .level2Count(201)
                                .level3Count(301)
                                .level4Count(401)
                                .build())
                        .organization(School.builder().districtId(9).name("San Diego High").id(1L).organizationType(OrganizationType.School).build())
                        .dimension(new Dimension(null, DimensionType.Overall))
                        .assessment(ActiveAssessment.builder().id(2).gradeCode("3").subjectCode("Math").examSchoolYear(2016).build())
                        .build()
        ));

        mvc.perform(post("/customaggregate")
                .content(serializedQuery)
                .contentType(MediaType.APPLICATION_JSON))

                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$[0].dimension.type", equalTo("Overall")))
                .andExpect(jsonPath("$[0].assessment.examSchoolYear", equalTo(2017)))
                .andExpect(jsonPath("$[0].assessment.id", equalTo(2)))
                .andExpect(jsonPath("$[0].assessment.gradeId", equalTo(3)))
                .andExpect(jsonPath("$[0].assessment.subjectCode", equalTo("Math")))
                .andExpect(jsonPath("$[0].organization.organizationType", equalTo("State")))
                .andExpect(jsonPath("$[0].organization.id", equalTo(1)))
                .andExpect(jsonPath("$[0].organization.name", equalTo("CA")))
                .andExpect(jsonPath("$[0].measures.avgScaleScore", equalTo(2000)))
                .andExpect(jsonPath("$[0].measures.level1Count", equalTo(100)))
                .andExpect(jsonPath("$[0].measures.level2Count", equalTo(200)))
                .andExpect(jsonPath("$[0].measures.level3Count", equalTo(300)))
                .andExpect(jsonPath("$[0].measures.level4Count", equalTo(400)))
                .andExpect(jsonPath("$[1].organization.organizationType", equalTo("School")))
                .andExpect(jsonPath("$[1].organization.districtId", equalTo(9)));
    }

    @Ignore
    @Test
    public void isShouldGetEstimateReportRowCount() throws Exception {
        when(service.estimateReportRowCount(
                any(User.class),
                refEq(ReportQuery.builder()
                        .assessmentGradeCodes(of("-4"))
                        .includeState(true)
                        .schoolYears(of(2017))
                        .subjectCodes(of(MATH.code()))
                        .schoolIds(of())
                        .districtIds(of())
                        .assessmentTypeCode(ICA.code())
                        .genderCodes(of())
                        .completenessCodes(of())
                        .administrativeConditionCodes(of())
                        .lepCodes(of())
                        .ethnicityCodes(of())
                        .migrantStatusCodes(of())
                        .section504Codes(of())
                        .iepCodes(of())
                        .economicDisadvantageCodes(of())
                        .build())
                )
        ).thenReturn(99);

        mvc.perform(get("/customaggregate/estimateReportRowCount?subjectIds=1&schoolYears=2017&asmtGradeIds=4&state=TF&assessmentType=ICA"))
                .andExpect(status().isOk())
                .andExpect(content().string("99"));
    }

    @Test
    public void itShouldExportACSV() throws Exception {
        final ReportQuery query = ReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .schoolYears(of(2017))
                .subjectCodes(of(MATH.code()))
                .schoolIds(of())
                .districtIds(of())
                .assessmentTypeCode(ICA.code())
                .genderCodes(of())
                .completenessCodes(of())
                .administrativeConditionCodes(of())
                .build();
        final String serializedQuery = objectMapper.writeValueAsString(query);

        final ByteArrayResource csvResource = new ByteArrayResource("csv,content".getBytes());
        final HttpHeaders headers = new HttpHeaders();
        headers.setContentType(TEXT_CSV);

        final ResponseEntity<ByteArrayResource> csvResponse = new ResponseEntity<>(csvResource, headers, HttpStatus.OK);

        when(exportService.exportReport(any(User.class), any(ReportQuery.class)))
                .thenReturn(csvResponse);

        mvc.perform(post("/customaggregate/export")
                .content(serializedQuery)
                .contentType(MediaType.APPLICATION_JSON))

                .andExpect(status().isOk())
                .andExpect(header().longValue(CONTENT_LENGTH, csvResource.getByteArray().length))
                .andExpect(content().string("csv,content"));
    }
}