package org.opentestsystem.rdw.olap.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableSet.of;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomAggregateController.class)
@WithMockUser(username = "test", password = "test", roles = "USER")
public class CustomAggregateControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private CustomAggregateService service;
    private String serializedQuery;

    @Before
    public void setup() throws Exception {
        final ObjectMapper objectMapper = new ObjectMapper();
        final ReportQuery query = ReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .schoolYears(of(2017))
                .subjectCodes(of(MATH.code()))
                .schoolIds(of())
                .districtIds(of())
                .assessmentTypeCode(ICA.code())
                .genderCodes(of())
                .completenessCodes(of())
                .administrativeConditionCodes(of())
                .lepCodes(of())
                .ethnicityCodes(of())
                .migrantStatusCodes(of())
                .section504Codes(of())
                .iepCodes(of())
                .economicDisadvantageCodes(of())
                .build();

        serializedQuery = objectMapper.writeValueAsString(query);
    }

    @Test
    public void isShouldEstimateReportRowCount() throws Exception {
        when(service.estimateReportRowCount(any(User.class), any(ReportQuery.class))).thenReturn(99);

        mvc.perform(post("/aggregate/estimatedRowCount")
                .content(serializedQuery)
                .contentType(MediaType.APPLICATION_JSON))

                .andExpect(status().isOk())
                .andExpect(content().string("99"));
    }
}