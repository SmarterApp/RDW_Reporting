package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;
import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.repository.impl.TestUtils.verifyDistrictStudentCount;
import static org.opentestsystem.rdw.olap.repository.impl.TestUtils.verifyStateStudentCount;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.getEmbargoPermissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@ComponentScan({"org.opentestsystem.rdw.olap.repository", "org.opentestsystem.rdw.olap.repository.impl", "org.opentestsystem.rdw.olap.sqlbuilder"})
@Import({SqlBuilderConfig.class,
        QueryProvider.class,
        QueryWithReportTemplate.class,
        QueryPoolExecutor.class
})
@ActiveProfiles({"redshift", "redshift-embargo"})
public class JdbcCustomAggregateReportRowRepositoryEmbargoRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository reportRepository;

    @Autowired
    private JdbcTemplate template;

    private static ReportQuery stateSum1999Query = ReportQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .includeState(true)
            .schoolYears(of(1999))
            .subjectCodes(of(ELA.code()))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private static ReportQuery districts18And19Sum1999Query = ReportQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .includeState(false)
            .schoolYears(of(1999))
            .districtIds(of(-18L, -19L))
            .subjectCodes(of(ELA.code()))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();


    private User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone-10@somewhere.com")
                .password("redacted")
                .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)));
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (0, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnSummativeExamsForStateWithEmbargoReleased() {
        verifyStateStudentCount(reportRepository.findByQuery(userBuilder.build(), stateSum1999Query), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnSummativeExamForStateWithEmbargoEnabledForEmbargoEdminOnly() {
        verifyStateStudentCount(reportRepository.findByQuery(
                userBuilder.build(), stateSum1999Query), 0);

        verifyStateStudentCount(reportRepository.findByQuery(
                userBuilder.permissionsById(getEmbargoPermissions(true, null)).build(), stateSum1999Query), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {
                            "INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)",
                            "INSERT INTO asmt_active_year (asmt_id, school_year) VALUES (-11, 1998)",
                            "UPDATE fact_student_exam SET school_year = 1998 WHERE asmt_id = -11"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = {
                            "DELETE from state_embargo",
                            "DELETE FROM asmt_active_year WHERE asmt_id = -11"
                    }
            )
    })
    @Test
    public void isShouldReturnPreviousYearSummativeExamsRegardlessOfEmbargo() {
        verifyStateStudentCount(reportRepository.findByQuery(userBuilder.build(), ReportQuery.builder()
                .assessmentGradeCodes(of("-3"))
                .includeState(true)
                .schoolYears(of(1998))
                .subjectCodes(of(ELA.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .build()), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnInterimExamsForStateWithEmbargoEnabled() {
        final List<ReportRow> rows = reportRepository.findByQuery(userBuilder.build(), ReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .includeState(true)
                .districtIds(of(-18L, -19L))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .dimensionType(Overall)
                .build());

        verifyStateStudentCount(rows, 5);
        verifyDistrictStudentCount(rows, -18, 3);
        verifyDistrictStudentCount(rows, -19, 2);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"UPDATE school SET embargo_enabled = 0 WHERE district_id = -18"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsForDistrictsWithEmbargoReleased() {
        final List<ReportRow> rows = reportRepository.findByQuery(userBuilder.build(), districts18And19Sum1999Query);
        verifyDistrictStudentCount(rows, -18, 3);
        verifyDistrictStudentCount(rows, -19, 0);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoEnabledForStateEmbargoAdmin() {
        final List<ReportRow> rows = reportRepository.findByQuery(userBuilder.permissionsById(getEmbargoPermissions(true, null)).build(),
                districts18And19Sum1999Query);

        verifyDistrictStudentCount(rows, -18, 3);
        verifyDistrictStudentCount(rows, -19, 3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoEnabledForDistrictEmbargoAdmin() {
        final List<ReportRow> rows = reportRepository.findByQuery(userBuilder.permissionsById(getEmbargoPermissions(false, -19L)).build(),
                districts18And19Sum1999Query);

        verifyDistrictStudentCount(rows, -18, 0);
        verifyDistrictStudentCount(rows, -19, 3);
    }
}