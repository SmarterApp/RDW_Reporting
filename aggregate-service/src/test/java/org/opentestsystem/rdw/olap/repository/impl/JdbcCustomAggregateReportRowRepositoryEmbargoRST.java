package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.BasicAggregateReportResult;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.TestUtils.verifyDistrictStudentCount;
import static org.opentestsystem.rdw.olap.TestUtils.verifyStateStudentCount;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.getEmbargoPermissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@ActiveProfiles({"redshift", "redshift-embargo"})
public class JdbcCustomAggregateReportRowRepositoryEmbargoRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository<BasicAggregateReportResult> repository;

    private static final AggregateReportQuery stateSum1999Query = AggregateReportQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .organizationType(State)
            .schoolYears(of(1999))
            .subjectCodes(of(ELA.code()))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private static final AggregateReportQuery districts18And19Sum1999Query = AggregateReportQuery.builder()
            .assessmentGradeCodes(of("-3"))
            .organizationType(District)
            .schoolYears(of(1999))
            .organizationIds(of(-18L, -19L))
            .subjectCodes(of(ELA.code()))
            .assessmentTypeCode(SUMMATIVE.code())
            .dimensionType(Overall)
            .build();

    private User.Builder userBuilder;

    @Before
    public void setUp() {
        userBuilder = User.builder()
                .id(UUID.randomUUID().toString())
                .username("someone-10@somewhere.com")
                .password("redacted")
                .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)));
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (0, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnSummativeExamsForStateWithEmbargoReleased() {
        final BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);
        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();

        verifyStateStudentCount(report.getPayload(), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnSummativeExamForStateWithEmbargoEnabledForEmbargoAdminOnly() {
        BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder.build(), stateSum1999Query, State);
        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder.permissionsById(getEmbargoPermissions(true, null)).build(), stateSum1999Query, State);
        assertThat(report.isCreatedWhileDataEmbargoed()).isTrue();
        verifyStateStudentCount(report.getPayload(), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {
                            "INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)",
                            "INSERT INTO asmt_active_year (asmt_id, school_year) VALUES (-11, 1998)",
                            "UPDATE fact_student_exam SET school_year = 1998 WHERE asmt_id = -11"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = {
                            "DELETE from state_embargo",
                            "DELETE FROM asmt_active_year WHERE asmt_id = -11"
                    }
            )
    })
    @Test
    public void isShouldReturnPreviousYearSummativeExamsRegardlessOfEmbargo() {
        final BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder.build(), AggregateReportQuery.builder()
                .assessmentGradeCodes(of("-3"))
                .organizationType(State)
                .schoolYears(of(1998))
                .subjectCodes(of(ELA.code()))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .build(), State);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        verifyStateStudentCount(report.getPayload(), 6);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = "DELETE from state_embargo")
    })
    @Test
    public void isShouldReturnInterimExamsForStateWithEmbargoEnabled() {
        BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder.build(), AggregateReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .dimensionType(Overall)
                .build(), State);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        verifyStateStudentCount(report.getPayload(), 5);

        report = repository.findByOrganizationType(userBuilder.build(), AggregateReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(District)
                .organizationIds(of(-18L, -19L))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .dimensionType(Overall)
                .build(), District);
        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 2);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"UPDATE school SET embargo_enabled = 0 WHERE district_id = -18"}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsForDistrictsWithEmbargoReleased() {
        final BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder.build(), districts18And19Sum1999Query, District);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 0);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoEnabledForStateEmbargoAdmin() {
        final BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                                new Permission(EmbargoRead, PermissionScope.builder()
                                        .statewide(true)
                                        .build()))).build(),
                districts18And19Sum1999Query, District);

        assertThat(report.isCreatedWhileDataEmbargoed()).isTrue();
        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"})
    })
    @Test
    public void isShouldReturnSummativeExamsWithEmbargoEnabledForDistrictEmbargoAdmin() {
        final BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                                new Permission(EmbargoRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-19L))
                                        .build()))).build(),
                districts18And19Sum1999Query, District);

        assertThat(report.isCreatedWhileDataEmbargoed()).isTrue();
        verifyDistrictStudentCount(report.getPayload(), -18, 0);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"},
                    statements = {"UPDATE school SET embargo_enabled = 0 WHERE district_id in(-18, -19)",
                            "INSERT INTO state_embargo (aggregate, migrate_id) VALUES (1, -10)",}),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapEntitiesTeardown.sql"},
                    statements = {"DELETE from state_embargo"})
    })
    @Test
    public void isShouldNotReturnSummativeStateWithEmbargoEnabledForDistrictAdminWhenStateIsEmbargoEnabled() {
        BasicAggregateReportResult report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                                new Permission(EmbargoRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-19L))
                                        .build()))).build(),
                stateSum1999Query, State);

        assertThat(report.isCreatedWhileDataEmbargoed()).isFalse();
        verifyStateStudentCount(report.getPayload(), 0);

        report = repository.findByOrganizationType(userBuilder
                        .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-17L, -18L, -19L))
                                        .addSchoolIds(of(-7L, -8L, -9L, -10L))
                                        .build()),
                                new Permission(EmbargoRead, PermissionScope.builder()
                                        .statewide(false)
                                        .addDistrictIds(of(-19L))
                                        .build()))).build(),
                districts18And19Sum1999Query, District);

        verifyDistrictStudentCount(report.getPayload(), -18, 3);
        verifyDistrictStudentCount(report.getPayload(), -19, 3);
    }
}