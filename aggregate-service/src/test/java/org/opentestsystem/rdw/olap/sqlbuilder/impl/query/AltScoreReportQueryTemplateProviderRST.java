package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.AltScoreOrganizationQuery;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.olap.TestUtils.normalizeSql;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ComponentScan({
    "org.opentestsystem.rdw.olap.repository",
    "org.opentestsystem.rdw.olap.repository.impl",
    "org.opentestsystem.rdw.olap.sqlbuilder"
})
@Import({
        SqlBuilderConfig.class,
        QueryProvider.class
})
public class AltScoreReportQueryTemplateProviderRST extends RepositoryBackedIT {

    @Autowired
    private ReportingSystemProperties reportingSystemProperties;

    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    private AltScoreSqlQueryWithReportTemplateProvider reportQueryTemplateProvider;
    private AltScoreOrganizationQuery.Builder builder;

    private final User user = User.builderExt()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)))
            .build();

    @Before
    public void setUp() {
        final Organization state = Organization.builder().name("CA").organizationType(State).build();
        reportQueryTemplateProvider = new AltScoreSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, user, reportingSystemProperties);
        builder = AltScoreOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .schoolYears(of(1999))
                .altScoreCodesBySubject(ImmutableMap.of("ELA", ImmutableSet.of("1")))
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .organizationType(State);
    }

    private static final String stateOverallSql = "SELECT  " +
            "round(avg(eas.scale_score)) AS score, " +
            "round(stddev_samp(eas.scale_score)/sqrt(count(*))) as std_err, " +
            "sum(CASE WHEN eas.performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
            "sum(CASE WHEN eas.performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
            "sum(CASE WHEN eas.performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
            "sum(CASE WHEN eas.performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
            "sum(CASE WHEN eas.performance_level = 5 THEN 1 ELSE 0 END) AS level5, " +
            "sum(CASE WHEN eas.performance_level = 6 THEN 1 ELSE 0 END) AS level6, " +
            "e.school_year, " +
            "e.asmt_id, " +
            "eas.subject_score_id, " +
            "ss.code as alt_score_code, " +
            "'State' AS organization_type, " +
            "NULL AS organization_id, " +
            "'Overall' AS dimension, " +
            "null  AS dimension_id, " +
            "null AS dimension_code " +
            "FROM exam_alt_score eas " +
            "JOIN exam e on e.id = eas.exam_id " +
            "JOIN subject_score ss ON ss.id = eas.subject_score_id " +
            "JOIN asmt a ON a.id = e.asmt_id " +
            "JOIN school sch on e.school_id = sch.id " +
            " LEFT JOIN district_embargo de ON " +
            "   de.school_year = e.school_year AND " +
            "   de.district_id = sch.district_id AND " +
            "   de.subject_id = a.subject_id " +
            "WHERE (( e.school_year IN (:school_years) " +
            "AND a.grade_id IN (:asmt_grade_ids) " +
            "AND a.subject_id in (:subject_ids) " +
            "AND a.type_id = :asmt_type_id " +
            "AND ss.code in (:subject_alt_score_codes)) " +
            "  AND ( a.type_id <> 3 OR CASE coalesce(de.aggregate, 0) " +
            "      WHEN 0 THEN :state_embargo_loading = 1" +
            "      WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1" +
            "      WHEN 2 THEN true" +
            "  END)) " +
            "GROUP BY  e.school_year, e.asmt_id, eas.subject_score_id, ss.code";

    @Test
    public void testSqlBuilderGroupByStateWithDimensionOverall() {
        assertThat(normalizeSql(reportQueryTemplateProvider.toQuery(builder.build(), State).getSqlQuery()))
            .isEqualTo(normalizeSql(stateOverallSql));
    }

}
