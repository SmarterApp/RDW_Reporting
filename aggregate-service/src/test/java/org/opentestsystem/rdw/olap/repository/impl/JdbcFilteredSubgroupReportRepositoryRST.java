package org.opentestsystem.rdw.olap.repository.impl;


import org.junit.Test;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.FilteredSubgroupReportResult;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupRow;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

/**
 * This test covers code in the {@link JdbcFilteredSubgroupReportRepository}, but not its base class.
 * The base class functionality is tested via {@link JdbcBasicReportRepository}.
 */
@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@Sql(scripts = {"classpath:OlapEntitiesSetup.sql"})
@ActiveProfiles("redshift")
public class JdbcFilteredSubgroupReportRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository<FilteredSubgroupRow, FilteredSubgroupReportResult> repository;

    private static final User user = User.builder()
            .id(UUID.randomUUID().toString())
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(new Permission(AggregateRead, PermissionScope.builder()
                    .statewide(false)
                    .addDistrictIds(of(-100L))
                    .addSchoolIds(of(-100L))
                    .build())))
            .build();

    @Test
    public void itShouldBackFillMissingData() {
        final List<FilteredSubgroupRow> reportRows = repository.findByOrganizationType(user, AggregateReportQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .organizationType(State)
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()))
                .assessmentTypeCode(ICA.code())
                .subgroupKey("testSubgroupKey")
                .dimensionType(Overall).build(), District).getPayload();

        assertThat(reportRows.size()).isEqualTo(3);
        assertThat(reportRows.stream().filter(r -> r.getSubgroupKey().equals("testSubgroupKey")).count()).isEqualTo(3);
        //check that we have a back filled row
        assertThat(reportRows.stream().filter(r -> r.getMeasures().getStudentCount() == 0).count()).isEqualTo(1);
    }
}