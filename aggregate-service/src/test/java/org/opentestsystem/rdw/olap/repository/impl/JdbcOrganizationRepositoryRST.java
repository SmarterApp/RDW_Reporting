package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.test.CachingTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcOrganizationRepository.class)
@Sql(scripts = {"classpath:OlapEntitiesSetup.sql"})
@CachingTest
public class JdbcOrganizationRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private OrganizationRepository repository;

    @Test
    public void itShouldFindAllDistricts() {
        assertThat(repository.findMapOfDistrictsByIds().values())
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        District.builder().districtGroupId(-1L).id(-7L).name("District-7").naturalId("id-7").build(),
                        District.builder().districtGroupId(-1L).id(-8L).name("District-8").naturalId("id-8").build(),
                        District.builder().districtGroupId(-1L).id(-9L).name("District-9").naturalId("id-9").build()
                );
    }

    @Test
    public void itShouldFindAllSchools() {
        assertThat(repository.findMapOfSchoolsById().values())
                .usingFieldByFieldElementComparator()
                .containsExactlyInAnyOrder(
                        School.builder().districtGroupId(-1L).districtId(-7).schoolGroupId(-1L).id(-7L).name("School-7").naturalId("id-7").build(),
                        School.builder().districtGroupId(-1L).districtId(-8).schoolGroupId(-1L).id(-8L).name("School-8").naturalId("id-8").build(),
                        School.builder().districtGroupId(-1L).districtId(-9).schoolGroupId(-1L).id(-9L).name("School-9").naturalId("id-9").build(),
                        School.builder().districtGroupId(-1L).districtId(-9).schoolGroupId(-1L).id(-10L).name("School-10").naturalId("id-10").build()
                );
    }
}
