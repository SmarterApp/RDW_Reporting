package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.repository.StrictBooleanRepository;
import org.opentestsystem.rdw.olap.service.AdministrationConditionService;
import org.opentestsystem.rdw.olap.service.AssessmentGradeService;
import org.opentestsystem.rdw.olap.service.CompletenessService;
import org.opentestsystem.rdw.olap.service.EthnicityService;
import org.opentestsystem.rdw.olap.service.GenderService;
import org.opentestsystem.rdw.olap.service.SchoolYearService;
import org.opentestsystem.rdw.olap.service.SubjectService;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;

import java.util.Arrays;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultReportOptionServiceTest {


    private DefaultReportOptionService service;

    @Mock
    private AdministrationConditionService administrationConditionService;

    @Mock
    private AssessmentGradeService assessmentGradeService;

    @Mock
    private CompletenessService completenessService;

    @Mock
    private EthnicityService ethnicityService;

    @Mock
    private GenderService genderService;

    @Mock
    private SchoolYearService schoolYearService;

    @Mock
    private StrictBooleanRepository strictBooleanRepository;

    @Mock
    private SubjectService subjectService;

    @Before
    public void setup() {
        service = new DefaultReportOptionService(
                administrationConditionService,
                assessmentGradeService,
                completenessService,
                ethnicityService,
                genderService,
                schoolYearService,
                strictBooleanRepository,
                subjectService
        );
    }

    @Test
    public void isShouldMapServiceResponsesToFieldsCorrectly() {

        int id = 0;
        final List<CodedEntity> strictBooleanEntities = entities(100, 200);
        final ReportOptions expected = ReportOptions.builder()
                .assessmentTypes(null)
                .assessmentGrades(entities(id++))
                .completenesses(entities(id++))
                .dimensionTypes(DimensionType.orderedDisplayValues())
                .economicDisadvantages(strictBooleanEntities)
                .ethnicities(entities(id++))
                .individualEducationPlans(strictBooleanEntities)
                .interimAdministrationConditions(entities(id++))
                .limitedEnglishProficiencies(strictBooleanEntities)
                .migrantStatuses(strictBooleanEntities)
                .genders(entities(id++))
                .section504s(strictBooleanEntities)
                .schoolYears(newArrayList(1, 2, 3))
                .statewideReporter(false)
                .summativeAdministrationConditions(entities(id++))
                .build();

        when(administrationConditionService.getInterimConditions())
                .thenReturn(expected.getInterimAdministrationConditions());
        when(administrationConditionService.getSummativeConditions())
                .thenReturn(expected.getSummativeAdministrationConditions());
        when(assessmentGradeService.getAssessmentGrades())
                .thenReturn(expected.getAssessmentGrades());
        when(completenessService.getCompletenesses())
                .thenReturn(expected.getCompletenesses());
        when(ethnicityService.getEthnicities())
                .thenReturn(expected.getEthnicities());
        when(genderService.getGenders())
                .thenReturn(expected.getGenders());
        when(schoolYearService.getSchoolYears())
                .thenReturn(expected.getSchoolYears());
        when(strictBooleanRepository.findAll())
                .thenReturn(expected.getEconomicDisadvantages());
        when(subjectService.getSubjects())
                .thenReturn(expected.getSubjects());

        assertThat(service.getReportOptions()).isEqualToComparingFieldByFieldRecursively(expected);

    }

    private List<CodedEntity> entities(final int... ids) {
        return Arrays.stream(ids)
                .mapToObj(id -> CodedEntity.builder().id(id).code(String.valueOf(id)).build())
                .collect(toList());
    }

}