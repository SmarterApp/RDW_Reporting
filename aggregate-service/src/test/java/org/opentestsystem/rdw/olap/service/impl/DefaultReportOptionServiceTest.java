package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.AltScore;
import org.opentestsystem.rdw.olap.model.Claim;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.model.SubjectAssessment;
import org.opentestsystem.rdw.olap.service.AdministrationConditionService;
import org.opentestsystem.rdw.olap.service.AltScoreService;
import org.opentestsystem.rdw.olap.service.AssessmentGradeService;
import org.opentestsystem.rdw.olap.service.ClaimService;
import org.opentestsystem.rdw.olap.service.CompletenessService;
import org.opentestsystem.rdw.olap.service.SchoolYearService;
import org.opentestsystem.rdw.olap.service.SubjectService;
import org.opentestsystem.rdw.reporting.common.model.CodedEntity;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Grade;

import java.util.Arrays;
import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static java.lang.String.valueOf;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.olap.model.CodedEntities.codesOf;

@RunWith(MockitoJUnitRunner.class)
public class DefaultReportOptionServiceTest {

    private DefaultReportOptionService service;

    @Mock
    private AdministrationConditionService administrationConditionService;

    @Mock
    private AssessmentGradeService assessmentGradeService;

    @Mock
    private CompletenessService completenessService;

    @Mock
    private SchoolYearService schoolYearService;

    @Mock
    private SubjectService subjectService;

    @Mock
    private ClaimService claimService;

    @Mock
    private AltScoreService altScoreService;

    @Before
    public void setup() {
        service = new DefaultReportOptionService(
                administrationConditionService,
                assessmentGradeService,
                completenessService,
                schoolYearService,
                subjectService,
                claimService,
                altScoreService
        );
    }

    @Test
    public void isShouldMapServiceResponsesToFieldsCorrectly() {

        int id = 0;
        final List<Grade> assessmentGrades = grades(id++);
        final List<CodedEntity> completeness = entities(id++);
        final List<CodedEntity> interimAdministrationConditions = entities(id++);
        final List<SubjectAssessment> subjects = subjects(id++);
        final List<CodedEntity> summativeAdministrationConditions = entities(id++);
        final List<Claim> claims = of(Claim.builder().id(id).code(valueOf(id++)).build());
        final List<AltScore> altScores = of(AltScore.builder().id(id).code(valueOf(id++)).build());

        final ReportOptions expected = ReportOptions.builder()
                .assessmentTypes(null)
                .assessmentGrades(codesOf(assessmentGrades))
                .completenesses(codesOf(completeness))
                .dimensionTypes(DimensionType.orderedDisplayValues())
                .interimAdministrationConditions(codesOf(interimAdministrationConditions))
                .schoolYears(newArrayList(1, 2, 3))
                .statewideReporter(false)
                .subjects(subjects)
                .claims(claims)
                .altScores(altScores)
                .summativeAdministrationConditions(codesOf(summativeAdministrationConditions))
                .build();

        when(administrationConditionService.getInterimConditions()).thenReturn(interimAdministrationConditions);
        when(administrationConditionService.getSummativeConditions()).thenReturn(summativeAdministrationConditions);
        when(assessmentGradeService.getAssessmentGrades()).thenReturn(assessmentGrades);
        when(completenessService.getCompletenesses()).thenReturn(completeness);
        when(schoolYearService.getSchoolYears()).thenReturn(expected.getSchoolYears());
        when(subjectService.getSubjects()).thenReturn(subjects);
        when(claimService.findAll()).thenReturn(claims);
        when(altScoreService.findAll()).thenReturn(altScores);

        assertThat(service.getReportOptions()).isEqualToComparingFieldByFieldRecursively(expected);
    }

    private List<CodedEntity> entities(final int... ids) {
        return Arrays.stream(ids)
                .mapToObj(id -> CodedEntity.builder().id(id).code(valueOf(id)).build())
                .collect(toList());
    }

    private List<SubjectAssessment> subjects(final int... ids) {
        return Arrays.stream(ids)
                .mapToObj(id -> SubjectAssessment.builder().id(id).code(valueOf(id)).build())
                .collect(toList());
    }

    private List<Grade> grades(final int... ids) {
        return Arrays.stream(ids)
                .mapToObj(id -> Grade.builder().id(id).code(valueOf(id)).sequence(id).build())
                .collect(toList());
    }
}
