package org.opentestsystem.rdw.olap.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.AssessmentQuery;
import org.opentestsystem.rdw.olap.repository.AssessmentRepository;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultAssessmentServiceTest {

    private final List<Assessment> Assessments = newArrayList(
            assessment(1),
            assessment(2),
            assessment(3)
    );

    @Mock
    private AssessmentRepository repository;


    @Before
    public void before() {
        when(repository.findAll()).thenReturn(Assessments);
    }

    @Test
    public void getAssessmentsShouldReturnAllAssessments() {
        assertThat(service().getAssessments())
                .containsExactlyElementsOf(Assessments);
    }

    @Test
    public void getAssessmentsWithNullQueryShouldReturnAllAssessments() {
        assertThat(service().getAssessments(null))
                .containsExactlyElementsOf(Assessments);
    }

    @Test
    public void getAssessmentsWithEmptyQueryShouldReturnAllAssessments() {
        assertThat(service().getAssessments(AssessmentQuery.builder().build()))
                .containsExactlyElementsOf(Assessments);
    }

    @Test
    public void getAssessmentsWithIdsShouldFilterAssessmentsById() {
        final AssessmentQuery query = AssessmentQuery.builder()
                .ids(newHashSet(1, 2))
                .build();

        assertThat(service().getAssessments(query))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        assessment(1),
                        assessment(2)
                );
    }

    private DefaultAssessmentService service() {
        return new DefaultAssessmentService(repository);
    }

    private Assessment assessment(final int id) {
        final String idString = Integer.toString(id);
        return Assessment.builder()
                .id(id)
                .name("name " + idString)
                .label("label " + idString)
                .typeCode("type " + idString)
                .subjectCode("subject " + idString)
                .gradeCode("grade " + idString)
                .schoolYear(2000 + id)
                .cutPoints(newArrayList(id, id + 1, id + 2))
                .build();
    }
}