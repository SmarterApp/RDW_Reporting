package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ComponentScan({
    "org.opentestsystem.rdw.olap.repository",
    "org.opentestsystem.rdw.olap.repository.impl",
    "org.opentestsystem.rdw.olap.sqlbuilder"
})
@Import({
    SqlBuilderConfig.class,
    QueryProvider.class
})
@Sql(scripts = {"classpath:TargetEntitiesSetup.sql"})
public class TargetSqlQueryWithReportTemplateProviderRST extends RepositoryBackedIT {

    @Autowired
    private ReportingSystemProperties reportingSystemProperties;

    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    private TargetSqlQueryWithReportTemplateProvider targetReportQueryTemplateProvider;
    private TargetOrganizationQuery.Builder builder;

    @Override
    public int hashCode() {
        return super.hashCode();
    }

    private final User user = User.builderExt()
            .id("userId")
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)))
            .build();

    @Before
    public void setUp() {
        final Organization state = Organization.builder().name("CA").organizationType(State).build();
        targetReportQueryTemplateProvider = new TargetSqlQueryWithReportTemplateProvider(state, queryProvider, reportQueryRepositoryHelper, user, reportingSystemProperties);
        builder = TargetOrganizationQuery.builder()
                .assessmentGradeCode("-4")
                .schoolYear(1999)
                .subjectCode("Math")
                .assessmentTypeCode(SUMMATIVE.code())
                .dimensionType(Overall)
                .organizationIds(of(-99L))
                .organizationType(School);
    }

    private static final String stateOverallSql = "SELECT  " +
            "round(avg(e.scale_score)) AS score, " +
            "round(stddev_samp(e.scale_score)/sqrt(count(*))) as std_err, " +
            "count(*) as exam_count, " +
            "avg(ets.student_relative_residual_score) AS student_relative_residual_score, " +
            "stddev_samp(ets.student_relative_residual_score)/sqrt(count(*)) as student_relative_residual_score_std_err, " +
            "avg(ets.standard_met_relative_residual_score) AS standard_met_relative_residual_score, " +
            "stddev_samp(ets.standard_met_relative_residual_score)/sqrt(count(*)) as standard_met_relative_residual_score_std_err, " +
            "e.school_year, " +
            "e.asmt_id, " +
            "ets.target_id, " +
            "t.natural_id as target_natural_id, " +
            "t.claim_code, " +
            "'School' AS organization_type, " +
            "e.school_id AS organization_id, " +
            "'Overall' AS dimension, " +
            "null  AS dimension_id, " +
            "null AS dimension_code " +
            "FROM exam_target_score ets " +
            "JOIN exam e on e.id = ets.exam_id " +
            "JOIN target t ON t.id = ets.target_id " +
            "JOIN asmt a ON a.id = e.asmt_id " +
            "JOIN school sch ON sch.id = e.school_id " +
            "WHERE (( e.school_year = :school_year AND a.grade_id = :asmt_grade_id AND a.subject_id = :subject_id AND a.type_id = 3) " +
            "AND ( e.school_id in (:school_ids)) " +
            "AND ( e.school_year < :system_school_year OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids))) " +
            "GROUP BY  " +
            "e.school_year, " +
            "e.asmt_id, " +
            "ets.target_id, " +
            "t.natural_id, " +
            "t.claim_code," +
            " e.school_id";

    @Test
    public void testSqlBuilderGroupByStateWithDimensionOverall() {
        assertThat(targetReportQueryTemplateProvider.toQuery(builder.build(), School).getSqlQuery()).isEqualTo(stateOverallSql);
    }
}
