package org.opentestsystem.rdw.olap.sqlbuilder;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.repository.impl.RepositoryBackedIT;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.query.CustomAggregateSqlQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.UUID;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

@RunWith(SpringRunner.class)
@ComponentScan({"org.opentestsystem.rdw.olap.repository", "org.opentestsystem.rdw.olap.repository.impl", "org.opentestsystem.rdw.olap.sqlbuilder"})
@Import({
        SqlBuilderConfig.class,
        QueryProvider.class
})
public class CustomAggregateReportQueryTemplateProviderRST extends RepositoryBackedIT {

    @Autowired
    private QueryProviderRepositoryHelper reportQueryRepositoryHelper;

    @Autowired
    private QueryProvider queryProvider;

    @Value("${reporting.state.name}")
    private String stateName;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    private CustomAggregateSqlQueryWithReportTemplateProvider aggregateQueryProvider;
    private AggregateOrganizationQuery.Builder builder;

    private User user = User.builder()
            .id(UUID.randomUUID().toString())
            .username("someone-10@somewhere.com")
            .password("redacted")
            .permissionsById(permissions(individualOf(PermissionScope.STATEWIDE)))
            .build();

    @Before
    public void setUp() {
        final Organization state = Organization.builder().name(stateName).organizationType(State).build();
        aggregateQueryProvider = new CustomAggregateSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, user);
        builder = AggregateOrganizationQuery.builder()
                .assessmentGradeCodes(of("-4"))
                .schoolYears(of(1999))
                .subjectCodes(of(MATH.code()));
    }

    @Test
    public void testSqlBuilderGroupByStateWithDimension504() {
        testSqlBuilderGroupByStateWithDimension504(SUMMATIVE);
        testSqlBuilderGroupByStateWithDimension504(IAB);
        testSqlBuilderGroupByStateWithDimension504(ICA);
    }

    public void testSqlBuilderGroupByStateWithDimension504(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Section504)
                .organizationType(State)
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, State).getSqlQuery()).isEqualTo(state504Sql(assessmentType));
    }

    @Test
    public void testSqlBuilderGroupByStateWithDimensionOverall() {
        testSqlBuilderGroupByStateWithDimensionOverall(SUMMATIVE);
        testSqlBuilderGroupByStateWithDimensionOverall(IAB);
        testSqlBuilderGroupByStateWithDimensionOverall(ICA);
    }

    public void testSqlBuilderGroupByStateWithDimensionOverall(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Overall)
                .organizationType(State)
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, State).getSqlQuery()).isEqualTo(stateOverallSql(assessmentType));
    }

    @Test
    public void testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall() {
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(IAB);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Overall)
                .organizationType(State)
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, District).getSqlQuery()).isEqualTo(allDistrictsOverallSql(assessmentType));
    }

    @Test
    public void testSqlBuilderForAllDistrictsGroupByDistrictWithDimension504() {
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(IAB);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForAllDistrictsGroupByDistrictWithDimension504(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Section504)
                .organizationType(State)
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, District).getSqlQuery()).isEqualTo(allDistricts504Sql(assessmentType));
    }

    @Test
    public void testSqlBuilderForAllSchoolsInDistrictGroupBySchoolWithDimensionOverall() {
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(IAB);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForAllSchoolsInDistrictGroupBySchoolWithDimension504(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Overall)
                .organizationType(District)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, School).getSqlQuery()).isEqualTo(allSchoolsInDistrictOverallSql(assessmentType));
    }

    @Test
    public void testSqlBuilderForAllSchoolsInDistrictGroupBySchoolWithDimension504() {
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(IAB);
        testSqlBuilderForAllDistrictsGroupByDistrictWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForAllSchoolsInDistrictGroupBySchoolWithDimensionOverall(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Section504)
                .organizationType(District)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, School).getSqlQuery()).isEqualTo(allSchoolsInDistrict504Sql(assessmentType));
    }

    @Test
    public void testSqlBuilderForSchoolsGroupBySchoolWithDimensionOverall() {
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionOverall(IAB);
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForSchoolsGroupBySchoolWithDimensionOverall(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Overall)
                .organizationType(School)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, School).getSqlQuery()).isEqualTo(schoolOverallSql(assessmentType));
    }

    @Test
    public void testSqlBuilderForSchoolsGroupBySchoolWithDimensionO504() {
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionO504(SUMMATIVE);
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionO504(IAB);
        testSqlBuilderForSchoolsGroupBySchoolWithDimensionO504(ICA);
    }

    public void testSqlBuilderForSchoolsGroupBySchoolWithDimensionO504(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Section504)
                .organizationType(School)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, School).getSqlQuery()).isEqualTo(school504Sql(assessmentType));
    }

    @Test
    public void testSqlBuilderForDistrictGroupByDistrictWithDimensionOverall() {
        testSqlBuilderForDistrictGroupByDistrictWithDimensionOverall(SUMMATIVE);
        testSqlBuilderForDistrictGroupByDistrictWithDimensionOverall(IAB);
        testSqlBuilderForDistrictGroupByDistrictWithDimensionOverall(ICA);
    }

    public void testSqlBuilderForDistrictGroupByDistrictWithDimensionOverall(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Overall)
                .organizationType(District)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, District).getSqlQuery()).isEqualTo(districtOverallSql(assessmentType));
    }

    @Test
    public void testSqlBuilderForDistrictGroupByDistrictWithDimension504() {
        testSqlBuilderForDistrictGroupByDistrictWithDimension504(SUMMATIVE);
        testSqlBuilderForDistrictGroupByDistrictWithDimension504(IAB);
        testSqlBuilderForDistrictGroupByDistrictWithDimension504(ICA);
    }

    public void testSqlBuilderForDistrictGroupByDistrictWithDimension504(final AssessmentType assessmentType) {
        final AggregateOrganizationQuery query = builder.assessmentTypeCode(assessmentType.code())
                .dimensionType(Section504)
                .organizationType(District)
                .organizationIds(of(-1L))
                .build();
        assertThat(aggregateQueryProvider.toQuery(query, District).getSqlQuery()).isEqualTo(district504Sql(assessmentType));
    }

    private static String assessmentBasedLevelAndFrom(final AssessmentType assessmentType) {
        return assessmentType.equals(IAB) ?
                " FROM iab_exam e "
                : ", sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4 FROM exam e ";
    }

    private static String state504Sql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'State' AS organization_type, " +
                "NULL AS organization_id, " +
                "'Section504' AS dimension, " +
                "e.section504 AS dimension_id, " +
                "CASE WHEN e.section504 = 1 THEN 'yes' WHEN e.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                (assessmentType == SUMMATIVE ? "AND ( e.school_year < 2018 OR EXISTS (SELECT 1 FROM state_embargo WHERE aggregate = 0) OR 1 = :state_embargo_admin) " : "") +
                "AND ( ( true = :all_section504s OR e.section504 in (:section504_ids) ))) " +
                "GROUP BY  e.school_year, e.asmt_id, e.section504";
    }

    private static String allDistricts504Sql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'District' AS organization_type, " +
                "d.id AS organization_id, " +
                "'Section504' AS dimension, " +
                "e.section504 AS dimension_id, " +
                "CASE WHEN e.section504 = 1 THEN 'yes' WHEN e.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "JOIN district d ON d.id = sch.district_id " +
                "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                (assessmentType == SUMMATIVE ? "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids)) " : "") +
                "AND ( ( true = :all_section504s OR e.section504 in (:section504_ids) ))) " +
                "GROUP BY  e.school_year, e.asmt_id, d.id, e.section504";
    }

    private static String school504Sql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'School' AS organization_type, " +
                "e.school_id AS organization_id, " +
                "'Section504' AS dimension, " +
                "e.section504 AS dimension_id, C" +
                "ASE WHEN e.section504 = 1 THEN 'yes' WHEN e.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                "AND ( e.school_id in (:school_ids)) " +
                (assessmentType == SUMMATIVE ? "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids)) " : "") +
                "AND ( ( true = :all_section504s OR e.section504 in (:section504_ids) ))) " +
                "GROUP BY  e.school_year, e.asmt_id, e.school_id, e.section504";
    }

    private static String district504Sql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'District' AS organization_type, " +
                "d.id AS organization_id, " +
                "'Section504' AS dimension, " +
                "e.section504 AS dimension_id, " +
                "CASE WHEN e.section504 = 1 THEN 'yes' WHEN e.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "JOIN district d ON d.id = sch.district_id " +
                "WHERE (( e.school_year IN (:school_years) " +
                "AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                "AND ( d.id in (:district_ids)) " +
                (assessmentType == SUMMATIVE ? "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids)) " : "") +
                "AND ( ( true = :all_section504s OR e.section504 in (:section504_ids) ))) " +
                "GROUP BY  e.school_year, e.asmt_id, d.id, e.section504";
    }

    private static String allSchoolsInDistrict504Sql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'School' AS organization_type, " +
                "e.school_id AS organization_id, " +
                "'Section504' AS dimension, " +
                "e.section504 AS dimension_id, " +
                "CASE WHEN e.section504 = 1 THEN 'yes' WHEN e.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                "AND ( sch.district_id in (:school_district_ids)) " +
                (assessmentType == SUMMATIVE ? "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids)) " : "") +
                "AND ( ( true = :all_section504s OR e.section504 in (:section504_ids) ))) " +
                "GROUP BY  e.school_year, e.asmt_id, e.school_id, e.section504";
    }

    private static String stateOverallSql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'State' AS organization_type, " +
                "NULL AS organization_id, " +
                "'Overall' AS dimension, " +
                "null  AS dimension_id, " +
                "null AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                (assessmentType == SUMMATIVE ?
                        "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                                "AND ( e.school_year < 2018 OR EXISTS (SELECT 1 FROM state_embargo WHERE aggregate = 0) OR 1 = :state_embargo_admin)) "
                        : "WHERE ( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) ") +
                "GROUP BY  e.school_year, e.asmt_id";
    }

    private static String allDistrictsOverallSql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'District' AS organization_type, " +
                "d.id AS organization_id, " +
                "'Overall' AS dimension, " +
                "null  AS dimension_id, " +
                "null AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "JOIN district d ON d.id = sch.district_id " +
                (assessmentType == SUMMATIVE ?
                        "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                                "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids))) "
                        : "WHERE ( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) ") +
                "GROUP BY  e.school_year, e.asmt_id, d.id";
    }

    private static String districtOverallSql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'District' AS organization_type, " +
                "d.id AS organization_id, " +
                "'Overall' AS dimension, " +
                "null  AS dimension_id, " +
                "null AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                "JOIN district d ON d.id = sch.district_id " +
                (assessmentType == SUMMATIVE ?
                        "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                                "AND ( d.id in (:district_ids)) " +
                                "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids))) "
                        : "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                        "AND ( d.id in (:district_ids))) ") +
                "GROUP BY  e.school_year, e.asmt_id, d.id";
    }

    private static String schoolOverallSql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'School' AS organization_type, " +
                "e.school_id AS organization_id, " +
                "'Overall' AS dimension, " +
                "null  AS dimension_id, " +
                "null AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                (assessmentType == SUMMATIVE ?
                        "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                                "AND ( e.school_id in (:school_ids)) " +
                                "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids))) "
                        : "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                        "AND ( e.school_id in (:school_ids))) ") +
                "GROUP BY  e.school_year, e.asmt_id, e.school_id";
    }

    private static String allSchoolsInDistrictOverallSql(final AssessmentType assessmentType) {
        return "SELECT  round(avg(scale_score)) AS score, " +
                "round(stddev_samp(scale_score)/sqrt(count(*))) as std_err, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "e.school_year, " +
                "e.asmt_id, " +
                "'School' AS organization_type, " +
                "e.school_id AS organization_id, " +
                "'Overall' AS dimension, " +
                "null  AS dimension_id, " +
                "null AS dimension_code" +
                assessmentBasedLevelAndFrom(assessmentType) +
                "JOIN asmt a ON a.id = e.asmt_id " +
                "JOIN school sch ON sch.id = e.school_id " +
                (assessmentType == SUMMATIVE ?
                        "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                                "AND ( sch.district_id in (:school_district_ids)) " +
                                "AND ( e.school_year < 2018 OR sch.embargo_enabled = 0 OR 1 = :state_embargo_admin OR sch.district_id IN (:district_embargo_admin_ids))) "
                        : "WHERE (( e.school_year IN (:school_years) AND a.grade_id IN (:asmt_grade_ids) AND a.subject_id in (:subject_ids) AND a.type_id = :asmt_type_id) " +
                        "AND ( sch.district_id in (:school_district_ids))) ") +
                "GROUP BY  e.school_year, e.asmt_id, e.school_id";
    }
}