package org.opentestsystem.rdw.olap.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.AssessmentQuery;
import org.opentestsystem.rdw.olap.service.AssessmentService;
import org.opentestsystem.rdw.reporting.common.web.UserAwareControllerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(AssessmentController.class)
public class AssessmentControllerIT extends UserAwareControllerSupport {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private AssessmentService service;

    @Test
    public void getShouldReturnAssessments() throws Exception {

        final List<Assessment> assessments = newArrayList(
                Assessment.builder()
                        .id(1)
                        .name("a1_name")
                        .label("a1_label")
                        .typeCode("a1_type")
                        .subjectCode("a1_subject")
                        .gradeCode("a1_grade")
                        .schoolYear(100)
                        .cutPoints(newArrayList(1, 2, 3, 4, 5))
                        .build(),
                Assessment.builder()
                        .id(2)
                        .name("a2_name")
                        .label("a2_label")
                        .typeCode("a2_type")
                        .subjectCode("a2_subject")
                        .gradeCode("a2_grade")
                        .schoolYear(200)
                        .cutPoints(newArrayList(6, 7, 8, 9, 10))
                        .build()
        );

        when(service.getAssessments(any(AssessmentQuery.class))).thenReturn(assessments);

        mvc.perform(get("/assessments"))
                .andExpect(status().isOk())
                .andExpect(jsonPath(
                        "$[?(@.id==1" +
                                " && @.name=='a1_name'" +
                                " && @.label=='a1_label'" +
                                " && @.typeCode=='a1_type'" +
                                " && @.subjectCode=='a1_subject'" +
                                " && @.gradeCode=='a1_grade'" +
                                " && @.schoolYear==100" +
                                " && @.cutPoints==[1,2,3,4,5]" +
                                ")]"
                ).exists())
                .andExpect(jsonPath(
                        "$[?(@.id==2" +
                                " && @.name=='a2_name'" +
                                " && @.label=='a2_label'" +
                                " && @.typeCode=='a2_type'" +
                                " && @.subjectCode=='a2_subject'" +
                                " && @.gradeCode=='a2_grade'" +
                                " && @.schoolYear==200" +
                                " && @.cutPoints==[6,7,8,9,10]" +
                                ")]"
                ).exists());
    }

}