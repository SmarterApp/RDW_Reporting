package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.springframework.core.task.TaskExecutor;

import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.AggregateRowReportResult;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;
import org.opentestsystem.rdw.olap.service.AggregateQueryHandler;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingProperties;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.User;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;

@SuppressWarnings("unchecked")
public abstract class AbstractAggregateQueryHandlerTest<T extends AggregateRow,
        R extends AggregateRowReportResult<T>,
        Q extends AbstractAggregateReportQuery,
        O extends OrganizationTypeQuery> {

    private AggregateQueryHandler service;
    private AuthorizationService authorizationService;
    protected User user;

    /**
     * Returns a builder pre-loaded with a valid query
     */
    protected abstract <B extends AbstractAggregateReportQuery.Builder<Q, B>> B getAggregateQueryBuilderWithValidQuery();

    /**
     * Returns an empty builder
     */
    protected abstract <B extends AbstractAggregateReportQuery.Builder<Q, B>> B getEmtpyAggregateQueryBuilder();

    /**
     * @return an instance of the {@link AggregateQueryConverter} used to create a service
     */
    protected abstract AggregateQueryConverter<Q, O> getQueryAdapter();

    /**
     * @return an instance of the {@link ReportRepository} used to create a service
     */
    protected abstract ReportRepository<T, R, O> getRepository();

    /**
     * @return an instance of the {@link AggregateQueryHandler} under test
     */
    protected abstract AggregateQueryHandler createServiceUnderTest(
            AuthorizationService authorizationService, AggregateReportingProperties aggregateReportingProperties, TaskExecutor taskExecutor);

    /**
     * @return an instance of class of type R
     */
    protected abstract R getRepositoryResults();

    /**
     * @return an intance of class of type O
     */
    protected abstract O getOrganizationTypeQuery();


    @Before
    public void setUp() {
        final AggregateReportingProperties aggregateReportingPropertiesTenant = mock(AggregateReportingProperties.class);

        authorizationService = mock(AuthorizationService.class);
        final QueryPoolExecutor queryPoolExecutor = new QueryPoolExecutor();
        queryPoolExecutor.setPartitionSize(2);

        final TaskExecutor threadPoolTaskExecutor = queryPoolExecutor.threadPoolTaskExecutor();
        when(aggregateReportingPropertiesTenant.getStateAggregateAssessmentTypes()).thenReturn(ImmutableList.of(SUMMATIVE.code()));

        service = createServiceUnderTest(authorizationService, aggregateReportingPropertiesTenant, threadPoolTaskExecutor);

        user = User.builderExt().id("id").username("username").password("password").build();
    }

    @Test
    abstract public void itShouldHandleQuery();

    @Test
    abstract public void itShouldReturnReportResultBuilder();

    @Test
    public void itShouldCallAuthorizationServiceToFindByQuery() {
        final Q query = (Q) getAggregateQueryBuilderWithValidQuery().build();
        service.findByQuery(user, query);
        verify(authorizationService).checkAuthorization(user, query);
    }

    @Test
    public void itShouldUseQueryAdapterAndRepositoryToFinByQuery() {
        final Q query = (Q) getAggregateQueryBuilderWithValidQuery().build();
        final O organizationTypeQuery = getOrganizationTypeQuery();
        final AggregateReportQueryDescription queryDescription = new AggregateReportQueryDescription(organizationTypeQuery, OrganizationType.State);
        when(getQueryAdapter().convert(query)).thenReturn(newArrayList(queryDescription));

        final AggregateRowReportResult report = getRepositoryResults();
        when(getRepository().findByOrganizationType(user, organizationTypeQuery, OrganizationType.State))
                .thenAnswer(invocation -> report);

        assertThat(service.findByQuery(user, query)).isEqualToComparingFieldByFieldRecursively(report);
    }

    @Test
    public void itShouldMergeResultsFromMultipleQueries() {
        final Q query = (Q) getAggregateQueryBuilderWithValidQuery().build();
        final O organizationTypeQuery = getOrganizationTypeQuery();
        final AggregateReportQueryDescription queryDescription = new AggregateReportQueryDescription(organizationTypeQuery, OrganizationType.State);
        when(getQueryAdapter().convert(query)).thenReturn(newArrayList(queryDescription, queryDescription));

        final AggregateRowReportResult report = getRepositoryResults();
        when(getRepository().findByOrganizationType(user, organizationTypeQuery, OrganizationType.State))
                .thenAnswer(invocation -> report);
        assertThat(service.findByQuery(user, query)).isEqualToComparingFieldByFieldRecursively(report.copy().merge(report).build());
    }

    @Test
    public void itShouldCallAuthorizationServiceToEstimateReportRowCount() {
        final Q query = (Q) getAggregateQueryBuilderWithValidQuery().build();
        service.estimateReportRowCount(user, query);
        verify(authorizationService).checkAuthorization(user, query);
    }

    @Test
    public void itShouldUseQueryAdapterAndRepositoryToEstimateReportRowCount() {
        final Q query = (Q) getAggregateQueryBuilderWithValidQuery().build();

        final O organizationTypeQuery = getOrganizationTypeQuery();
        final AggregateReportQueryDescription queryDescription = new AggregateReportQueryDescription(organizationTypeQuery, OrganizationType.State);
        when(getQueryAdapter().convert(query)).thenReturn(newArrayList(queryDescription, queryDescription));

        when(getRepository().estimateReportRowCountByOrganizationType(organizationTypeQuery, OrganizationType.State)).thenReturn(30);
        assertThat(service.estimateReportRowCount(user, query)).isEqualTo(60);
    }

    @Test(expected = NullPointerException.class)
    public void itShouldRequireNotNullQuery() {
        service.findByQuery(user, null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        service.findByQuery(user, getEmtpyAggregateQueryBuilder().build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrades() {
        service.findByQuery(user, getAggregateQueryBuilderWithValidQuery().assessmentGradeCodes(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireConfiguredAssessmentWhenIncludeStateResults() {
        service.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().includeState(true).assessmentTypeCode(ICA.code()).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        service.estimateReportRowCount(user, getAggregateQueryBuilderWithValidQuery().includeState(false).schoolIds(ImmutableSet.of()).build());
    }

}
