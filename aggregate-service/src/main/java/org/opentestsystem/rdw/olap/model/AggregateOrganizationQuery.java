package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryAdapter;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;

import javax.validation.constraints.NotNull;
import java.util.Objects;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * Represents query parameters for the {@link ClaimReportRepository} and {@link CustomAggregateReportRepository}.
 * <p>
 * This query is created by a corresponding {@link AggregateQueryAdapter} by converting {@link AggregateQuery}
 */
@SuppressWarnings("unchecked")
public class AggregateOrganizationQuery extends OrganizationTypeQuery {
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;
    private Set<String> subjectCodes;
    private Set<String> claimCodes;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public Set<String> getSubjectCodes() {
        return subjectCodes;
    }

    /**
     * @return claim codes, can be empty
     */
    public Set<String> getClaimCodes() {
        return claimCodes;
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears;
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String assessmentGradeCode, final int schoolYear) {
        return (getSchoolYears().contains(schoolYear) && getSubjectCodes().contains(subjectCode) && getAssessmentGradeCodes().contains(assessmentGradeCode));
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof AggregateOrganizationQuery)) return false;
        final AggregateOrganizationQuery that = (AggregateOrganizationQuery) o;
        return super.equals(that)
                && Objects.equals(subjectCodes, that.subjectCodes)
                && Objects.equals(schoolYears, that.schoolYears)
                && Objects.equals(claimCodes, that.claimCodes)
                && Objects.equals(assessmentGradeCodes, that.assessmentGradeCodes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), subjectCodes, schoolYears, assessmentGradeCodes, claimCodes);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, AggregateOrganizationQuery> {
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private Set<String> claimCodes;

        @Override
        AggregateOrganizationQuery createInstance() {
            return new AggregateOrganizationQuery();
        }

        public AggregateOrganizationQuery build() {
            final AggregateOrganizationQuery query = super.build();
            query.subjectCodes = asImmutable(subjectCodes);
            query.schoolYears = asImmutable(schoolYears);
            query.assessmentGradeCodes = asImmutable(assessmentGradeCodes);
            query.claimCodes = asImmutable(claimCodes);
            return query;
        }

        public Builder copy(final AggregateOrganizationQuery query) {
            super.copy(query);
            subjectCodes = query.getSubjectCodes();
            schoolYears = query.getSchoolYears();
            assessmentGradeCodes = query.getAssessmentGradeCodes();
            claimCodes = query.getClaimCodes();
            return this;
        }

        public Builder subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder claimCodes(final Set<String> claimCodes) {
            this.claimCodes = newHashSet(claimCodes);
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }
    }
}