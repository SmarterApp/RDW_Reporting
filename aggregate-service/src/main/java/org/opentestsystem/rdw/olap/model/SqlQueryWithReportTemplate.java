package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An implementation of {@link BuildableTemplate} to hold the SQL string, parameters and {@link ReportTemplate}
 * derived from an instance of {@link OrganizationTypeQuery}.
 */
public class SqlQueryWithReportTemplate extends BuildableTemplate {
    private String sqlQuery;
    private MapSqlParameterSource parameterSource;
    private ReportTemplate reportTemplate;

    public String getSqlQuery() {
        return sqlQuery;
    }

    public MapSqlParameterSource getParameterSource() {
        return parameterSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public ReportTemplate getReportTemplate() {
        return reportTemplate;
    }

    public static class Builder extends BuildableTemplate.Builder<Builder> {
        private final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
        private final List<String> addOns = newArrayList();
        private ReportTemplate reportTemplate;

        public SqlQueryWithReportTemplate build(final QueryProvider queryProvider, final String templateSql) {
            final SqlQueryWithReportTemplate sqlQueryWithReportTemplate = new SqlQueryWithReportTemplate();
            sqlQueryWithReportTemplate.sqlQuery = queryProvider.newQuery(templateSql, addOns).toString();
            sqlQueryWithReportTemplate.parameterSource = parameterSource;
            sqlQueryWithReportTemplate.reportTemplate = reportTemplate;
            return sqlQueryWithReportTemplate;
        }

        @SuppressWarnings("unchecked")
        public Builder merge(final Builder another) {
            parameterSource.addValues(another.parameterSource.getValues());
            addOns.addAll(another.addOns);
            reportTemplate.copy().merge(another.reportTemplate).build();
            return this;
        }

        public Builder addOn(final String addOn) {
            addOns.add(addOn);
            return this;
        }

        public Builder parameter(final String paramName, final Object value) {
            parameterSource.addValue(paramName, value);
            return this;
        }

        public Builder reportTemplate(final ReportTemplate reportTemplate) {
            this.reportTemplate = reportTemplate;
            return this;
        }
    }
}
