package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.configuration.AggregateReportingProperties;
import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.model.ClaimReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.Claim;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.common.repository.ClaimRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Set;

import static com.amazonaws.util.CollectionUtils.isNullOrEmpty;
import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Sets.newHashSet;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;

/**
 * Responsible for handling {@link ClaimAggregateReportQuery}
 */
@Service
class ClaimReportQueryHandler extends AbstractAggregateQueryHandler<ClaimRow,
        ClaimReportResult,
        ClaimAggregateReportQuery,
        Builder,
        ClaimOrganizationQuery,
        ClaimOrganizationQuery.Builder> {

    private final ClaimRepository claimRepository;

    @Autowired
    ClaimReportQueryHandler(
            final ClaimReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportingProperties aggregateReportingProperties,
            final ClaimQueryConverter queryConverter,
            final TaskExecutor threadPoolTaskExecutor,
            final ClaimRepository claimRepository) {
        super(repository, queryConverter, authorizationService, aggregateReportingProperties, threadPoolTaskExecutor);
        this.claimRepository = claimRepository;
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return query.getType() == ReportQueryType.Claim;
    }

    @Override
    protected ClaimReportResult.Builder getReportResultBuilder() {
        return ClaimReportResult.builder();
    }

    @Override
    protected ClaimAggregateReportQuery preProcess(final ClaimAggregateReportQuery query) {
        checkArgument(!AssessmentType.IAB.code().equals(query.getAssessmentTypeCode()), "Claim report is not supported for IABs");

        final Map<String, Set<String>> missingClaimCodesBySubject = newHashMap();

        for (final String subjectCode : query.getClaimCodesBySubject().keySet()) {
            if (isNullOrEmpty(query.getClaimCodesBySubject().get(subjectCode))) {
                missingClaimCodesBySubject.put(subjectCode, findAllClaimCodes(query.getAssessmentTypeCode(), subjectCode));
            }
        }

        if (missingClaimCodesBySubject.isEmpty()) return super.preProcess(query);

        final Map<String, Set<String>> claimCodesBySubject = newHashMap(query.getClaimCodesBySubject());
        claimCodesBySubject.putAll(missingClaimCodesBySubject);
        return super.preProcess(query.copy().claimCodesBySubject(claimCodesBySubject).build());
    }

    private Set<String> findAllClaimCodes(final String assessmentTypeCode, final String subjectCode) {
        final Set<String> claimCodes = newHashSet();
        for (final Claim claim : claimRepository.findAll()) {
            if (claim.getAssessmentTypeCode().equals(assessmentTypeCode) && subjectCode.equals(claim.getSubjectCode())) {
                claimCodes.add(claim.getCode());
            }
        }
        return claimCodes;
    }
}