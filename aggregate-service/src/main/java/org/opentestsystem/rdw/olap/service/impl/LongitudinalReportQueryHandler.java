package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.configuration.AggregateReportingProperties;
import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.LongitudinalReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Responsible for handling of {@link LongitudinalReportQuery}
 */
@Service
class LongitudinalReportQueryHandler extends AbstractAggregateQueryHandler<LongitudinalRow,
        LongitudinalReportResult,
        LongitudinalReportQuery,
        Builder,
        LongitudinalOrganizationQuery,
        LongitudinalOrganizationQuery.Builder> {

    @Autowired
    LongitudinalReportQueryHandler(
            final LongitudinalReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportingProperties aggregateReportingProperties,
            final LongitudinalQueryConverter queryConverter,
            final TaskExecutor threadPoolTaskExecutor) {
        super(repository, queryConverter, authorizationService, aggregateReportingProperties, threadPoolTaskExecutor);
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return query.getType() == ReportQueryType.Longitudinal;
    }

    @Override
    protected LongitudinalReportResult.Builder getReportResultBuilder() {
        return LongitudinalReportResult.builder();
    }

    @Override
    protected LongitudinalReportQuery preProcess(final LongitudinalReportQuery query) {
        if (query.getAssessmentTypeCode() == null)
            return super.preProcess(query.copy().assessmentTypeCode(AssessmentType.SUMMATIVE.code()).build());

        checkArgument(AssessmentType.SUMMATIVE.code().equals(query.getAssessmentTypeCode()), "Longitudinal report supports summative assessments only");

        return super.preProcess(query);
    }
}