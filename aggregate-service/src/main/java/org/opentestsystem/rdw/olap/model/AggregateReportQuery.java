package org.opentestsystem.rdw.olap.model;

import javax.validation.constraints.NotNull;
import java.util.Objects;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * Represents query parameters for the custom aggregate repository.
 */
@SuppressWarnings("unchecked")
public class AggregateReportQuery extends OrganizationTypeQuery {
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;
    private Set<String> subjectCodes;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public Set<String> getSubjectCodes() {
        return subjectCodes == null ? newHashSet() : newHashSet(subjectCodes);
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears == null ? newHashSet() : newHashSet(schoolYears);
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes == null ? newHashSet() : newHashSet(assessmentGradeCodes);
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String assessmentGradeCode, final int schoolYear) {
        return (getSchoolYears().contains(schoolYear) && getSubjectCodes().contains(subjectCode) && getAssessmentGradeCodes().contains(assessmentGradeCode));
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof AggregateReportQuery)) return false;
        final AggregateReportQuery that = (AggregateReportQuery) o;
        return super.equals(that)
                && Objects.equals(subjectCodes, that.subjectCodes)
                && Objects.equals(schoolYears, that.schoolYears)
                && Objects.equals(assessmentGradeCodes, that.assessmentGradeCodes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), subjectCodes, schoolYears, assessmentGradeCodes);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, AggregateReportQuery> {
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;

        @Override
        AggregateReportQuery createInstance() {
            return new AggregateReportQuery();
        }

        public AggregateReportQuery build() {
            final AggregateReportQuery query = super.build();
            query.subjectCodes = subjectCodes;
            query.schoolYears = schoolYears;
            query.assessmentGradeCodes = assessmentGradeCodes;

            return query;
        }

        public Builder copy(final AggregateReportQuery query) {
            super.copy(query);
            subjectCodes = query.getSubjectCodes();
            schoolYears = query.getSchoolYears();
            assessmentGradeCodes = query.getAssessmentGradeCodes();

            return this;
        }

        public Builder subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }
    }
}