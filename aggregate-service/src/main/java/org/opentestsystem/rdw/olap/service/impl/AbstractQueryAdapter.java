package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.service.AggregateQueryAdapter;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

/**
 * This class represents common methods shared by all implementations of {@link AggregateQueryAdapter}
 */
@SuppressWarnings("unchecked")
abstract class AbstractQueryAdapter<Q extends AbstractAggregateReportQuery, T extends OrganizationTypeQuery, B extends OrganizationTypeQuery.Builder>
        implements AggregateQueryAdapter<Q, T> {

    final QueryProviderRepositoryHelper repositoryHelper;

    /**
     * Constructor
     */
    AbstractQueryAdapter(final QueryProviderRepositoryHelper repositoryHelper) {
        this.repositoryHelper = repositoryHelper;
    }

    /**
     * @return an instance of the {@link OrganizationTypeQuery.Builder} pre-loaded with the query specific attributes
     */
    protected abstract B getOrganizationTypeQueryBuilder(Q reportQuery, StudentFilters filters);

    /**
     * Longitudinal repository does not support multiple subjects. Because of this we convert queries into
     * one per subject before processing them further.
     */
    protected List<Q> unwrapToSupportedQueries(final Q reportQuery, boolean isSupportMultipleSubjects) {
        if (isSupportMultipleSubjects) return newArrayList(reportQuery);

        final List<Q> queries = newArrayList();

        // LongitudinalReportQuery supports one subject at a time
        for (final String subjectCode : reportQuery.getSubjectCodes()) {
            queries.add((Q) reportQuery.copy().subjectCodes(of(subjectCode)).build());
        }
        return queries;
    }

    protected B toOrganizationQueryBuilderWithCommonAttributes(final Q reportQuery, final StudentFilters filters) {
        return (B) getOrganizationTypeQueryBuilder(reportQuery, filters)
                .assessmentTypeCode(reportQuery.getAssessmentTypeCode())
                .completenessCodes(reportQuery.getCompletenessCodes())
                .administrativeConditionCodes(reportQuery.getAdministrativeConditionCodes())
                .genderCodes(filters.getGenderCodes())
                .ethnicityCodes(filters.getEthnicityCodes())
                .lepCodes(filters.getLepCodes())
                .elasCodes(filters.getElasCodes())
                .migrantStatusCodes(filters.getMigrantStatusCodes())
                .section504Codes(filters.getSection504Codes())
                .iepCodes(filters.getIepCodes())
                .economicDisadvantageCodes(filters.getEconomicDisadvantageCodes());
    }

    protected void appendState(final Q reportQuery,
                               final List<AggregateReportQueryDescription<T>> queries,
                               final T commonQuery) {
        if (reportQuery.isIncludeState()) {
            queries.add(new AggregateReportQueryDescription(commonQuery.copy().organizationType(State).build(), State));
        }
    }

    protected void appendDistricts(final Q reportQuery,
                                   final List<AggregateReportQueryDescription<T>> queries,
                                   final T commonQuery) {

        if (reportQuery.isIncludeAllDistricts()) {
            final T query = (T) commonQuery.
                    copy()
                    .organizationType(State)
                    .build();

            queries.add(new AggregateReportQueryDescription(query, District));

        } else if (!reportQuery.getDistrictIds().isEmpty() || isIncludeAllDistrictsOfSchools(reportQuery)) {
            //individual districts could be included two ways: by ids or via 'isIncludeAllDistrictsOfSchools' flag
            final Set<Long> districtIds = newHashSet(reportQuery.getDistrictIds());
            if (isIncludeAllDistrictsOfSchools(reportQuery)) {
                districtIds.addAll(repositoryHelper.findAllDistrictsOfSchools(reportQuery.getSchoolIds()));
            }

            if (!districtIds.isEmpty()) {
                final T query = (T) commonQuery
                        .copy()
                        .organizationType(District)
                        .organizationIds(districtIds)
                        .build();
                queries.add(new AggregateReportQueryDescription(query, District));
            }
        }
    }

    protected void appendSchools(final Q reportQuery, final List<AggregateReportQueryDescription<T>> queries, final T commonQuery) {
        //schools could be selected individually or as part of a district selection
        final Set<Long> districtsWithAllSchools = newHashSet();
        if (isIncludeAllSchoolsOfDistricts(reportQuery)) {
            final Set<Long> districtIds = reportQuery.isIncludeAllDistricts() ? repositoryHelper.findAllDistrictIds() : reportQuery.getDistrictIds();
            districtsWithAllSchools.addAll(districtIds);

            if (!districtsWithAllSchools.isEmpty()) {
                final T query = (T) commonQuery
                        .copy()
                        .organizationType(District)
                        .organizationIds(districtsWithAllSchools)
                        .build();

                queries.add(new AggregateReportQueryDescription(query, OrganizationType.School));
            }
        }

        if (!reportQuery.getSchoolIds().isEmpty()) {
            final Set<Long> schoolIds = newHashSet(reportQuery.getSchoolIds());

            //to avoid duplicate schools we need to filter those that are already included as part of districts selection
            if (isIncludeAllSchoolsOfDistricts(reportQuery)) {
                schoolIds.removeAll(repositoryHelper.findSchoolsIdsByDistrictIds(districtsWithAllSchools));
            }

            if (!schoolIds.isEmpty()) {
                final T query = (T) commonQuery
                        .copy()
                        .organizationType(OrganizationType.School)
                        .organizationIds(schoolIds)
                        .build();

                queries.add(new AggregateReportQueryDescription(query, OrganizationType.School));
            }
        }
    }

    protected boolean isIncludeAllSchoolsOfDistricts(final AbstractAggregateReportQuery query) {
        return query.isIncludeAllSchoolsOfDistricts() && (!query.getDistrictIds().isEmpty() || query.isIncludeAllDistricts());
    }

    protected boolean isIncludeAllDistrictsOfSchools(final AbstractAggregateReportQuery query) {
        return query.isIncludeAllDistrictsOfSchools() && !query.getSchoolIds().isEmpty();
    }
}
