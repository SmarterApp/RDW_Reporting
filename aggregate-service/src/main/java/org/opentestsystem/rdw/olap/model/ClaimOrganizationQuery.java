package org.opentestsystem.rdw.olap.model;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents query parameters for the {@link ClaimReportRepository}
 * <p>
 * This query is created by a corresponding {@link AggregateQueryConverter} from {@link ClaimAggregateReportQuery}
 */
@SuppressWarnings("unchecked")
public class ClaimOrganizationQuery extends OrganizationTypeQuery {
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;
    private ImmutableMap<String, Set<String>> claimCodesBySubject;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public ImmutableMap<String, Set<String>> getClaimCodesBySubject() {
        return claimCodesBySubject;
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears;
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String assessmentGradeCode, final int schoolYear) {
        return (getSchoolYears().contains(schoolYear) && getClaimCodesBySubject().keySet().contains(subjectCode) && getAssessmentGradeCodes().contains(assessmentGradeCode));
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof ClaimOrganizationQuery)) return false;
        final ClaimOrganizationQuery that = (ClaimOrganizationQuery) o;
        return super.equals(that)
                && Objects.equals(claimCodesBySubject, that.claimCodesBySubject)
                && Objects.equals(schoolYears, that.schoolYears)
                && Objects.equals(assessmentGradeCodes, that.assessmentGradeCodes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), claimCodesBySubject, schoolYears, assessmentGradeCodes);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, ClaimOrganizationQuery> {
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private Map<String, Set<String>> claimCodesBySubject;

        @Override
        ClaimOrganizationQuery createInstance() {
            return new ClaimOrganizationQuery();
        }

        public ClaimOrganizationQuery build() {
            final ClaimOrganizationQuery query = super.build();
            query.claimCodesBySubject = safeImmutableOf(claimCodesBySubject);
            query.schoolYears = safeImmutableOf(schoolYears);
            query.assessmentGradeCodes = safeImmutableOf(assessmentGradeCodes);
            return query;
        }

        public Builder copy(final ClaimOrganizationQuery query) {
            super.copy(query);
            this.claimCodesBySubject = query.claimCodesBySubject;
            this.schoolYears = query.schoolYears;
            this.assessmentGradeCodes = query.assessmentGradeCodes;
            return this;
        }

        public Builder claimCodesBySubject(final Map<String, Set<String>> claimCodesBySubject) {
            this.claimCodesBySubject = claimCodesBySubject;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }
    }
}