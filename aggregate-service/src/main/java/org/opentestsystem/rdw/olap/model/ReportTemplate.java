package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;

/**
 * An implementation of {@link BuildableTemplate} to hold the data entities represented by
 * an instance of {@link OrganizationTypeQuery}.
 * <p>
 * It is a helper class that is used to either back-fill empty report rows or derive an estimated row count.
 * <p>
 */
@SuppressWarnings("unchecked")
public class ReportTemplate extends BuildableTemplate {
    private Set<Organization> organizations;
    private Set<ActiveAssessment> assessments;
    private Set<Dimension> dimensions;
    private Map<String, Collection<String>> claimCodesBySubject;
    private boolean includeStudentEnrolledGradeDimension = false;

    public Set<Organization> getOrganizations() {
        return organizations;
    }

    public Set<ActiveAssessment> getAssessments() {
        return assessments;
    }

    public Set<Dimension> getDimensions() {
        return dimensions;
    }

    public Map<String, Collection<String>> getClaimCodesBySubject() {
        return claimCodesBySubject;
    }

    public boolean isIncludeStudentEnrolledGradeDimension() {
        return includeStudentEnrolledGradeDimension;
    }

    public static Builder builder() {
        return new Builder();
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static class Builder<B extends Builder> extends BuildableTemplate.Builder<B> {
        Set<Organization> organizations = newHashSet();
        Set<ActiveAssessment> assessments = newHashSet();
        Set<Dimension> dimensions = newHashSet();
        Map<String, Collection<String>> claimCodesBySubject = newHashMap();
        boolean includeStudentEnrolledGradeDimension = false;

        public ReportTemplate build() {
            final ReportTemplate reportTemplate = new ReportTemplate();
            reportTemplate.assessments = assessments;
            reportTemplate.organizations = organizations;
            reportTemplate.dimensions = dimensions;
            reportTemplate.includeStudentEnrolledGradeDimension = includeStudentEnrolledGradeDimension;
            reportTemplate.claimCodesBySubject = claimCodesBySubject;
            return reportTemplate;
        }

        @Override
        public Builder merge(final Builder another) {
            organizations.addAll(another.organizations);
            assessments.addAll(another.assessments);
            dimensions.addAll(another.dimensions);
            claimCodesBySubject.putAll(another.claimCodesBySubject);
            includeStudentEnrolledGradeDimension = (includeStudentEnrolledGradeDimension || another.includeStudentEnrolledGradeDimension);
            return this;
        }

        public Builder merge(final ReportTemplate another) {
            organizations.addAll(another.getOrganizations());
            assessments.addAll(another.getAssessments());
            dimensions.addAll(another.getDimensions());
            claimCodesBySubject.putAll(another.getClaimCodesBySubject());
            includeStudentEnrolledGradeDimension = (includeStudentEnrolledGradeDimension || another.isIncludeStudentEnrolledGradeDimension());
            return this;
        }

        public Builder copy(final ReportTemplate another) {
            organizations = another.getOrganizations();
            assessments = another.getAssessments();
            dimensions = another.getDimensions();
            claimCodesBySubject = another.getClaimCodesBySubject();
            includeStudentEnrolledGradeDimension = another.isIncludeStudentEnrolledGradeDimension();
            return this;
        }

        public Builder assessments(final Collection<ActiveAssessment> assessments) {
            this.assessments.addAll(assessments);
            return this;
        }

        public Builder districts(final Collection<District> districts) {
            this.organizations.addAll(districts);
            return this;
        }

        public Builder schools(final Collection<School> schools) {
            this.organizations.addAll(schools);
            return this;
        }

        public Builder state(final Organization state) {
            this.organizations.add(state);
            return this;
        }

        public Builder dimensions(final Collection<Dimension> dimensions) {
            this.dimensions.addAll(dimensions);
            return this;
        }

        public Builder claimCodesBySubject(final Map<String, Collection<String>> claimCodesBySubject) {
            this.claimCodesBySubject = claimCodesBySubject;
            return this;
        }

        public Builder includeStudentEnrolledGradeDimension(final boolean includeStudentEnrolledGradeDimension) {
            this.includeStudentEnrolledGradeDimension = includeStudentEnrolledGradeDimension;
            return this;
        }
    }
}