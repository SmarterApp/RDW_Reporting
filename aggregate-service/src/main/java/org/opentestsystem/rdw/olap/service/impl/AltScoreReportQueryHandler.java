package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.AltScore;
import org.opentestsystem.rdw.olap.model.AltScoreOrganizationQuery;
import org.opentestsystem.rdw.olap.model.AltScoreReportResult;
import org.opentestsystem.rdw.olap.model.AltScoreReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.AltScoreReportRepository;
import org.opentestsystem.rdw.olap.repository.AltScoreRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingProperties;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.AltScoreRow;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Sets.newHashSet;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeIsEmpty;

/**
 * Responsible for handling {@link AltScoreAggregateReportQuery}
 */
@Service
class AltScoreReportQueryHandler extends AbstractAggregateQueryHandler<AltScoreRow,
        AltScoreReportResult,
        AltScoreAggregateReportQuery,
        Builder,
        AltScoreOrganizationQuery,
        AltScoreOrganizationQuery.Builder> {

    private final AltScoreRepository altScoreRepository;

    @Autowired
    AltScoreReportQueryHandler(
            final AltScoreReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportingProperties aggregateReportingProperties,
            final AltScoreQueryConverter queryConverter,
            final TaskExecutor threadPoolTaskExecutor,
            final AltScoreRepository altScoreRepository) {
        super(repository, queryConverter, authorizationService, aggregateReportingProperties, threadPoolTaskExecutor);
        this.altScoreRepository = altScoreRepository;
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return query.getType() == ReportQueryType.AltScore;
    }

    @Override
    protected Builder getReportResultBuilder() {
        return AltScoreReportResult.builder();
    }

    @Override
    protected AltScoreAggregateReportQuery preProcess(final AltScoreAggregateReportQuery query) {
        checkArgument(!AssessmentType.IAB.code().equals(query.getAssessmentTypeCode()), "AltScore report is not supported for IABs");

        final Map<String, Set<String>> missingAltScoreCodesBySubject = newHashMap();

        for (final String subjectCode : query.getAltScoreCodesBySubject().keySet()) {
            if (safeIsEmpty(query.getAltScoreCodesBySubject().get(subjectCode))) {
                missingAltScoreCodesBySubject.put(subjectCode, findAllAltScoreCodes(query.getAssessmentTypeCode(), subjectCode));
            }
        }

        if (missingAltScoreCodesBySubject.isEmpty()) {
            return super.preProcess(query);
        }

        final Map<String, Set<String>> altScoreCodesBySubject = newHashMap(query.getAltScoreCodesBySubject());
        altScoreCodesBySubject.putAll(missingAltScoreCodesBySubject);
        return super.preProcess(query.copy().altScoreCodesBySubject(altScoreCodesBySubject).build());
    }

    private Set<String> findAllAltScoreCodes(final String assessmentTypeCode, final String subjectCode) {
        final Set<String> altScoreCodes = newHashSet();
        for (final AltScore altScore : altScoreRepository.findAll()) {
            if (altScore.getAssessmentTypeCode().equals(assessmentTypeCode) && subjectCode.equals(altScore.getSubjectCode())) {
                altScoreCodes.add(altScore.getCode());
            }
        }
        return altScoreCodes;
    }
}