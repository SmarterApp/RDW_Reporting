package org.opentestsystem.rdw.olap.sqlbuilder.impl.template;

import java.util.Set;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.model.ReportTemplate;
import org.opentestsystem.rdw.olap.sqlbuilder.AbstractReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

/**
 * This implementation is responsible for converting an instance of an {@link OrganizationTypeQuery} into a {@link ReportTemplate}
 */
@SuppressWarnings("unchecked")
public class SimpleReportTemplateProvider<B extends ReportTemplate.Builder, T extends ReportTemplate, Q extends OrganizationTypeQuery>
        extends AbstractReportTemplateProvider<B, T, Q> {

    private final Organization state;
    private final QueryProviderRepositoryHelper repositoryHelper;

    public SimpleReportTemplateProvider(final Organization state,
                                        final QueryProviderRepositoryHelper repositoryHelper) {
        this.repositoryHelper = repositoryHelper;
        this.state = state;
    }

    QueryProviderRepositoryHelper getRepositoryHelper() {
        return repositoryHelper;
    }

    @Override
    public T toQuery(final Q query, final OrganizationType groupByOrganizationType) {
        return super.toQuery(query, groupByOrganizationType);
    }

    @Override
    public B createBuilderWithCommonAttributes(final Q query) {
        final B builder = createBuilderInstance();
        builder.assessments(repositoryHelper.findAssessmentsForQuery(query));
        builder.dimensions(repositoryHelper.findDimensionsByTypeAndQueryFilters(query.getDimensionType(), query));
        return builder;
    }

    @Override
    public B createBuilderWithState(final String assessmentTypeCode) {
        return (B) createBuilderInstance().state(state);
    }

    @Override
    public B createBuilderWithAllDistricts(final String assessmentTypeCode) {
        return (B) createBuilderInstance().districts(repositoryHelper.findAllDistricts());
    }

    @Override
    public B createBuilderWithDistrictIds(final String assessmentTypeCode, final Set<Long> districtIds) {
        return (B) createBuilderInstance().districts(repositoryHelper.findDistrictsByIds(districtIds));
    }

    @Override
    public B createBuilderWithAllSchoolsOfDistricts(final String assessmentTypeCode, final Set<Long> districtIds) {
        return (B) createBuilderInstance().schools(repositoryHelper.findSchoolsByDistrictIds(districtIds));
    }

    @Override
    public B createBuilderWithSchoolIds(final String assessmentTypeCode, final Set<Long> schoolIds) {
        return (B) createBuilderInstance().schools(repositoryHelper.findSchoolsByIds(schoolIds));
    }

    @Override
    protected T build(final B builder) {
        return (T) builder.build();
    }

    @Override
    protected B createBuilderInstance() {
        return (B) ReportTemplate.builder();
    }
}
