package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.SimpleReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Qualifier;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padIntToSize;

/**
 * This implementation is responsible for converting {@link AggregateOrganizationQuery} into a {@link SqlQueryWithReportTemplate}
 * that contains a SQL string, SQL parameters and an empty report template to produce {@link CustomAggregateReportResult}
 */
@SuppressWarnings("unchecked")
public class CustomAggregateSqlQueryWithReportTemplateProvider
        extends AbstractSqlQueryWithReportTemplateProvider<AggregateOrganizationQuery, SimpleReportTemplateProvider> {

    private static final String customAggregateTemplateSql = "customAggregate";
    private static final String iabAddOn = "iab";
    private static final String icaOrSummativeAddOn = "icaOrSummative";

    public CustomAggregateSqlQueryWithReportTemplateProvider(
            final Organization state,
            final int organizationPartitionSize,
            final QueryProvider queryProvider,
            final QueryProviderRepositoryHelper repositoryHelper,
            final PermissionSource permissionSource,
            @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties) {
        super(new SimpleReportTemplateProvider(state, repositoryHelper), organizationPartitionSize, queryProvider, repositoryHelper, permissionSource, reportingSystemProperties);
    }

    @Override
    protected String getTemplateSql() {
        return customAggregateTemplateSql;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final AggregateOrganizationQuery query) {
        return addFiltersAndDimension(createBuilderInstance(), query)
                .reportTemplate(templateProvider.createBuilderWithCommonAttributes(query).build())
                .addOn(query.getAssessmentTypeCode().equals(AssessmentType.IAB.code()) ? iabAddOn : icaOrSummativeAddOn)
                .parameter("school_years", padIntToSize(query.getSchoolYears(), getRepositoryHelper().maxSchoolYears()))
                .parameter("asmt_grade_ids", padIntToSize(getRepositoryHelper().toGradeIds(query.getAssessmentGradeCodes()), getRepositoryHelper().maxAssessmentGrades()))
                .parameter("subject_ids", padIntToSize(getRepositoryHelper().toSubjectIds(query.getSubjectCodes()), getRepositoryHelper().maxSubjects()))
                .parameter("asmt_type_id", getRepositoryHelper().toAssessmentTypeId(query.getAssessmentTypeCode()));
    }
}
