package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Loading;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Reviewing;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataLoadingRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.TestDataReviewingRead;
import static org.opentestsystem.rdw.security.PermissionScope.getScopeOrEmpty;

@Repository
class JdbcEmbargoRepository implements EmbargoRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.embargo.loadingVisible}")
    private String loadingVisible;

    @Value("${sql.embargo.reviewingVisible}")
    private String reviewingVisible;

    JdbcEmbargoRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Map<EmbargoStatus,Boolean> hasEmbargoAccess(final PermissionSource permissionSource) {
         final boolean loading = template.queryForObject(
             loadingVisible,
            createParameters(permissionSource),
            Boolean.class);

        final boolean reviewing = template.queryForObject(
            reviewingVisible,
            createParameters(permissionSource),
            Boolean.class);

        return ImmutableMap.of(Loading, loading, Reviewing, reviewing);
    }

    protected Map<String, Object> createParameters(final PermissionSource permissionSource) {
        final Map<String, Permission> permissionMap = permissionSource.getPermissionsById();
        final PermissionScope loadingScope = getScopeOrEmpty(permissionMap, TestDataLoadingRead);
        final PermissionScope reviewingScope = getScopeOrEmpty(permissionMap, TestDataReviewingRead);


        final ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
        builder.put("state_embargo_loading", loadingScope.isStatewide())
            .put("state_embargo_reviewing", reviewingScope.isStatewide())
            .put("district_ids_embargo_loading", nullOrEmptyToDefault(loadingScope.getDistrictIds(), UNMATCHABLE_IDS))
            .put("district_ids_embargo_reviewing", nullOrEmptyToDefault(reviewingScope.getDistrictIds(), UNMATCHABLE_IDS));

        return builder.build();
    }
}
