package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.ClaimReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.common.model.AssessmentBoundaries.MaxScorableClaims;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padIntToSize;

/**
 * This implementation is responsible for converting {@link ClaimOrganizationQuery} into a {@link SqlQueryWithReportTemplate}
 * that contains a SQL string, SQL parameters and an empty report template to produce {@link ClaimReportResult}
 */
public class ClaimSqlQueryWithReportTemplateProvider extends AbstractSqlQueryWithReportTemplateProvider<ClaimOrganizationQuery, ClaimReportTemplateProvider> {

    private static final String claimAggregateTemplateSql = "claimAggregate";
    //it is used to pad claims to the fixed sized in the SQL 'in' clause
    private final List<String> claimsSqlPadding;

    public ClaimSqlQueryWithReportTemplateProvider(final Organization state,
                                                   final int organizationPartitionSize,
                                                   final QueryProvider queryProvider,
                                                   final QueryProviderRepositoryHelper repositoryHelper,
                                                   final PermissionSource permissionSource) {
        super(new ClaimReportTemplateProvider(state, repositoryHelper), organizationPartitionSize, queryProvider, repositoryHelper, permissionSource);
        claimsSqlPadding = padIntToSize(newArrayList(), MaxScorableClaims * repositoryHelper.maxSubjects()).stream().map(Object::toString).collect(toList());
    }

    @Override
    protected String getTemplateSql() {
        return claimAggregateTemplateSql;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final ClaimOrganizationQuery query) {
        return addFiltersAndDimension(createBuilderInstance(), query)
                .reportTemplate(templateProvider.createBuilderWithCommonAttributes(query).build())
                .parameter("school_years", padIntToSize(query.getSchoolYears(), getRepositoryHelper().maxSchoolYears()))
                .parameter("asmt_grade_ids", padIntToSize(getRepositoryHelper().toGradeIds(query.getAssessmentGradeCodes()), getRepositoryHelper().maxAssessmentGrades()))
                .parameter("subject_ids", getRepositoryHelper().toSubjectIds(query.getClaimCodesBySubject().keySet()))
                .parameter("asmt_type_id", getRepositoryHelper().toAssessmentTypeId(query.getAssessmentTypeCode()))
                .parameter("subject_claim_score_codes", padClaims(query.getClaimCodesBySubject().values().stream().flatMap(Collection::stream).collect(toList())));
    }

    private Collection<String> padClaims(final Collection<String> collection) {
        if (collection != null && collection.size() >= claimsSqlPadding.size()) return collection;

        if (collection == null) return claimsSqlPadding;
        final List<String> padded = newArrayList(claimsSqlPadding);

        final Iterator<String> iterator = collection.iterator();
        for (int i = 0; i < collection.size(); ++i) {
            padded.set(i, iterator.next());
        }
        return padded;
    }
}