package org.opentestsystem.rdw.olap.service;

import org.opentestsystem.rdw.olap.model.AggregateReportResult;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;

/**
 * Implementations of this interface are responsible for handling of {@link AggregateQuery}
 *
 * @param <T> The aggregate report content type
 */
@PreAuthorize("hasAuthority('PERM_CUSTOM_AGGREGATE_READ')")
public interface AggregateQueryHandler<T, R extends AggregateReportResult<T>, Q extends AggregateQuery> {

    /**
     * @param query {@link AggregateQuery}
     * @return True if this handler can process the given query
     */
    boolean handles(@NotNull AggregateQuery query);

    /**
     * Produce an {@link AggregateReportResult} for the given query.
     *
     * @param user  the {@link User} creating the report
     * @param query A query
     * @return An aggregate report result
     */
    R findByQuery(@NotNull User user, @NotNull Q query);

    /**
     * Estimates number of the rows in a custom aggregate report for the given query
     *
     * @param user  the {@link User} creating the report
     * @param query the query for the report
     * @return an estimated number of rows
     */
    int estimateReportRowCount(@NotNull User user, @NotNull Q query);
}
