package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.FilteredSubgroupAggregateService;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupCustomAggregateReportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.reporting.common.model.AggregateQueryType.FilteredSubgroup;

/**
 * Default implementation of an {@link FilteredSubgroupAggregateService} backed by a repository
 */
@Service
class DefaultFilteredSubgroupAggregateService extends AbstractFilteredSubgroupAggregateService<AggregateRow,
        CustomAggregateReportResult,
        FilteredSubgroupCustomAggregateReportQuery,
        CustomAggregateReportResult.Builder,
        AggregateReportQuery,
        AggregateReportQuery.Builder> implements FilteredSubgroupAggregateService {

    @Autowired
    DefaultFilteredSubgroupAggregateService(
            final CustomAggregateReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportSettings settings,
            final FilteredSubgroupQueryAdapter queryAdapter,
            final TaskExecutor threadPoolTaskExecutor) {
        super(repository, authorizationService, settings, queryAdapter, threadPoolTaskExecutor);
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return FilteredSubgroup.equals(query.getQueryType());
    }

    @Override
    protected Builder getReportResultBuilder() {
        return CustomAggregateReportResult.builder();
    }
}