package org.opentestsystem.rdw.olap.repository.impl;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.AggregateRowReportResult;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.model.ReportRowIdentity;
import org.opentestsystem.rdw.olap.model.ReportTemplate;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.query.AbstractSqlQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.SimpleReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.caseInsensitiveValue;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

/**
 * This class represents common functionality for implementations of {@link ReportRepository}
 */
abstract class AbstractReportRepository
        <T extends AggregateRow, R extends AggregateRowReportResult<T>, Q extends OrganizationTypeQuery, B extends AggregateRowReportResult.Builder<T, B, R>>
        implements ReportRepository<T, R, Q> {

    protected final ReportingSystemProperties reportingSystemProperties;
    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QueryProviderRepositoryHelper reportQueryRepositoryHelper;
    private final OrganizationRepository organizationRepository;
    private final EmbargoRepository embargoRepository;
    private final ActiveAssessmentRepository activeAssessmentRepository;

    private final QueryProvider queryProvider;
    private final int organizationPartitionSize;

    /**
     * Constructor
     */
    AbstractReportRepository(final ReportingSystemProperties reportingSystemProperties,
                             final JdbcTemplate jdbcTemplate,
                             final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                             final OrganizationRepository organizationRepository,
                             final ActiveAssessmentRepository activeAssessmentRepository,
                             final QueryProvider queryProvider,
                             final EmbargoRepository embargoRepository,
                             final int jdbcFetchSize,
                             final int organizationPartitionSize) {
        this.reportingSystemProperties = reportingSystemProperties;
        jdbcTemplate.setFetchSize(jdbcFetchSize);
        this.jdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        this.reportQueryRepositoryHelper = reportQueryRepositoryHelper;
        this.activeAssessmentRepository = activeAssessmentRepository;
        this.organizationRepository = organizationRepository;
        this.embargoRepository = embargoRepository;
        this.queryProvider = queryProvider;
        this.organizationPartitionSize = organizationPartitionSize;
    }

    /**
     * @return state
     */
    protected Organization getState() {
        // Retrieve from properties each time, because a change in tenants may have changed the value.
        return Organization.builder()
                .name(reportingSystemProperties.getState().getName())
                .organizationType(OrganizationType.State)
                .build();
    }

    /**
     * @return {@link QueryProviderRepositoryHelper}
     */
    protected QueryProviderRepositoryHelper getReportQueryRepositoryHelper() {
        return reportQueryRepositoryHelper;
    }

    /**
     * @return an instance of the {@link AggregateRowReportResult.Builder} of the appropriate sub-type
     */
    protected abstract B getReportBuilder();

    /**
     * Builds a report row from the given parameters
     */
    protected abstract T buildReportRow(ResultSet resultSet, Q query) throws SQLException;

    /**
     * Returns an instance of {@link AbstractSqlQueryWithReportTemplateProvider}
     */
    protected abstract <P extends SimpleReportTemplateProvider>
    AbstractSqlQueryWithReportTemplateProvider<Q, P> getQueryReportTemplateProvider(Organization state,
                                                                                    int organizationPartitionSize,
                                                                                    QueryProvider queryProvider,
                                                                                    QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                                                                    PermissionSource permissionSource);

    /**
     * Builds all {@link ReportRowIdentity} for the report
     *
     * @param reportTemplateContext          {@link ReportTemplate} initialized with all report related data
     * @param query                          a query
     * @param considerAsmtIdAsPartOfIdentity a flag indicating if assessment id should be consider as part of report row identity
     * @return a template report rows
     */
    protected abstract Map<ReportRowIdentity, T> buildTemplateRowsByIdentity(ReportTemplate reportTemplateContext,
                                                                             Q query,
                                                                             boolean considerAsmtIdAsPartOfIdentity);

    /**
     * Returns an instance of {@link ReportRowIdentity}.
     * This provides a default implementations while allowing for customization by a sub-class
     *
     * @param reportRow                      an instance of the {@link AggregateRow} to derive an identity from
     * @param considerAsmtIdAsPartOfIdentity a flag indicating if assessment id is considered to be a part of a row identity
     * @return an instance of {@link ReportRowIdentity}
     */
    protected ReportRowIdentity createReportRowIdentity(final T reportRow, final boolean considerAsmtIdAsPartOfIdentity) {
        return new ReportRowIdentity(reportRow, considerAsmtIdAsPartOfIdentity);
    }

    @Override
    public R findByOrganizationType(@NotNull final PermissionSource permissionSource,
                                    @NotNull final Q query,
                                    @NotNull final OrganizationType groupByOrganizationType) {
        validate(query);

        final SqlQueryWithReportTemplate sqlQueryWithReportTemplate =
                getQueryReportTemplateProvider(getState(), organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource)
                        .toQuery(query, groupByOrganizationType);

        final boolean considerAsmtIdAsPartOfIdentity = AssessmentType.IAB.code().equalsIgnoreCase(query.getAssessmentTypeCode());
        final Map<ReportRowIdentity, T> templateRows = buildTemplateRowsByIdentity(sqlQueryWithReportTemplate.getReportTemplate(), query, considerAsmtIdAsPartOfIdentity);
        final B reportBuilder = getReportBuilder();

        jdbcTemplate.query(
                sqlQueryWithReportTemplate.getSqlQuery(),
                sqlQueryWithReportTemplate.getParameterSource(),
                (row, index) -> {
                    final T r = buildReportRow(row, query);
                    reportBuilder.row(r);
                    reportBuilder.hasResults(true);
                    templateRows.remove(createReportRowIdentity(r, considerAsmtIdAsPartOfIdentity));
                    return r;
                });

        // back-fill with the left-over template rows
        if (!templateRows.isEmpty()) reportBuilder.rows(templateRows.values());
        return reportBuilder.build();
    }

    protected void validate(final Q query) {
        checkArgument(query.getAssessmentTypeCode() != null, "invalid query, missing an assessment type");
        checkArgument(query.getDimensionType() != null, "invalid query, missing a dimension type");
        checkArgument(query.getOrganizationType() != null && (query.getOrganizationType() == State || query.getOrganizationType() == District || query.getOrganizationType() == OrganizationType.School), "invalid query, unsupported organization type");
        // state shouldn't have org ids, district/school must have org ids
        checkArgument(query.getOrganizationType() != State ^ query.getOrganizationIds().isEmpty(), "invalid query, district/school requires organization ids and state does not");
    }

    protected Measures measures(final ResultSet row, final String asmtTypeCode, final String prefix) throws SQLException {
        final Measures.Builder builder = Measures.builder()
                .avgScaleScore(getNullable(row, row.getInt(prefix + "score")))
                .avgStdErr(getNullable(row, row.getInt(prefix + "std_err")))
                .level1Count(row.getInt(prefix + "level1"))
                .level2Count(row.getInt(prefix + "level2"))
                .level3Count(row.getInt(prefix + "level3"));

        if (!AssessmentType.IAB.code().equalsIgnoreCase(asmtTypeCode)) {
            builder.level4Count(row.getInt(prefix + "level4"));
            builder.level5Count(row.getInt(prefix + "level5"));
            builder.level6Count(row.getInt(prefix + "level6"));
        }
        return builder.build();
    }

    /**
     * Returns the {@link Dimension} for the report row. If the {@link OrganizationTypeQuery#subgroupKey} is not null, then the
     * built row represents a custom filtered result.
     */
    protected Dimension buildDimension(final ResultSet row, final Q query) throws SQLException {
        return (query.getSubgroupKey() != null) ?
                Dimension.builder().type(DimensionType.Custom).code(query.getSubgroupKey()).build() :
                Dimension.builder().code(getNullable(row, row.getString("dimension_code"))).type(caseInsensitiveValue(row.getString("dimension"))).build();

    }

    protected Dimension buildDimension(final Dimension dimension, final Q query) {
        return query.getSubgroupKey() != null ?
                Dimension.builder().type(DimensionType.Custom).code(query.getSubgroupKey()).build() : dimension;
    }

    /**
     * To simplify a report SQL, we are loading assessments and organizations separately.
     * This assumes/relies on the repositories results to be cached
     */
    protected ActiveAssessment findByIdAndSchoolYear(final String assessmentTypeCode, final int assessmentId, final int schoolYear) {
        for (final ActiveAssessment activeAssessment : activeAssessmentRepository.findAllByTypeCode(assessmentTypeCode)) {
            if (activeAssessment.getId() == assessmentId && activeAssessment.getExamSchoolYear() == schoolYear)
                return activeAssessment;
        }
        throw new IllegalArgumentException("unable to find an assessment by id " + assessmentId + " and school year " + schoolYear);
    }

    protected Organization findOneByIdAndType(final long id, final OrganizationType type) {
        switch (type) {
            case School:
                return organizationRepository.findMapOfSchoolsById().get(id);
            case District:
                return organizationRepository.findMapOfDistrictsByIds().get(id);
            case State:
                return getState();
            default:
                throw new IllegalStateException("Not supported organization type: " + type);
        }
    }
}
