package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.base.Strings;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.olap.service.OrganizationSearchService;
import org.opentestsystem.rdw.olap.service.OrganizationService;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;

import java.util.Set;
import java.util.function.Predicate;

import static com.google.common.collect.ImmutableSet.toImmutableSet;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;

@Service
class DefaultOrganizationSearchService implements OrganizationSearchService {

    private final OrganizationService service;

    @Autowired
    DefaultOrganizationSearchService(final OrganizationService service) {
        this.service = service;
    }

    @Override
    public Set<Organization> getOrganizations(final User user, final String nameSearch) {

        // fail fast
        if (Strings.isNullOrEmpty(nameSearch)) {
            return ImmutableSet.of();
        }

        final PermissionScope permissionScope = user.getPermissionScopeByPermissionId(AggregateRead);

        final Predicate<Organization> securityFilter = permissionScope.isStatewide()
                ? organization -> true
                : permissionScopeContainsOrganization(permissionScope);

        // Basic text contains method of text match which ignores case. This is meant to behave like SQL's "like %text%"
        final Predicate<Organization> nameContainsTextIgnoreCaseFilter = organization ->
                organization.getName().toLowerCase().contains(nameSearch.toLowerCase());

        return service.getSchoolsAndDistricts().stream()
                .filter(securityFilter)
                .filter(nameContainsTextIgnoreCaseFilter)
                .collect(toImmutableSet());
    }

    /**
     * @param permissionScope the permission scope to test containership with
     * @return predicate that evaluates true when the tested organization is contained within the organization IDs of the permission scope
     */
    private static Predicate<Organization> permissionScopeContainsOrganization(final PermissionScope permissionScope) {
        return organization -> {

            // If it's a district make sure the district is in the permission scope
            if (organization.getOrganizationType() == OrganizationType.District) {
                final District district = (District) organization;
                return permissionScope.getDistrictIds().contains(district.getId())
                        || permissionScope.getDistrictGroupIds().contains(district.getDistrictGroupId());
            }

            // If it's a school make sure the school or school's district is in the permission scope
            if (organization.getOrganizationType() == OrganizationType.School) {
                final School school = (School) organization;
                return permissionScope.getInstitutionIds().contains(school.getId())
                        || permissionScope.getInstitutionGroupIds().contains(school.getSchoolGroupId())
                        || permissionScope.getDistrictIds().contains(school.getDistrictId())
                        || permissionScope.getDistrictGroupIds().contains(school.getDistrictGroupId());
            }

            // If the org is not a school or district we are not interested in providing it
            return false;
        };
    }

}
