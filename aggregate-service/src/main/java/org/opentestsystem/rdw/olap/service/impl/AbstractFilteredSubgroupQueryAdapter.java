package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupAggregateReportQuery;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

@SuppressWarnings("unchecked")
abstract class AbstractFilteredSubgroupQueryAdapter
        <Q extends FilteredSubgroupAggregateReportQuery, T extends OrganizationTypeQuery, B extends OrganizationTypeQuery.Builder>
        extends AbstractQueryAdapter<Q, T, B> {

    AbstractFilteredSubgroupQueryAdapter(final QueryProviderRepositoryHelper repositoryHelper) {
        super(repositoryHelper);
    }

    @Override
    public Collection<AggregateReportQueryDescription<T>> convert(final Q reportQueryToCovert) {
        final List<AggregateReportQueryDescription<T>> queries = newArrayList();

        //each pair of organization/dimension is represented by a separate OrganizationTypeQuery
        for (final String subgroupsKey : reportQueryToCovert.getSubgroups().keySet()) {
            final B commonQueryBuilder = (B) toOrganizationQueryBuilderWithCommonAttributes(reportQueryToCovert, reportQueryToCovert.getSubgroups().get(subgroupsKey))
                    .subgroupKey(subgroupsKey)
                    .dimensionType(Overall);

            //convert queries to a single subject query if needed
            for (final Q reportQuery : unwrapToSupportedQueries(reportQueryToCovert, commonQueryBuilder.isSupportMultipleSubjects())) {
                final T commonQuery = (T) commonQueryBuilder.build();
                // for each level of organization add one or more builders to the result
                appendState(reportQuery, queries, commonQuery);
                appendDistricts(reportQuery, queries, commonQuery);
                appendSchools(reportQuery, queries, commonQuery);
            }
        }
        return queries;
    }
}
