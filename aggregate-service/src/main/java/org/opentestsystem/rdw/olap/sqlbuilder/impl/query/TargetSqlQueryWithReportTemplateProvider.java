package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.model.TargetReportResult;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.TargetReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import java.util.Set;

/**
 * This implementation is responsible for converting {@link TargetOrganizationQuery} into a {@link SqlQueryWithReportTemplate}
 * that contains a SQL string, SQL parameters and an empty report template to produce {@link TargetReportResult}
 */
public class TargetSqlQueryWithReportTemplateProvider extends AbstractSqlQueryWithReportTemplateProvider<TargetOrganizationQuery, TargetReportTemplateProvider> {

    private static final String targetAggregateTemplateSql = "targetAggregate";

    public TargetSqlQueryWithReportTemplateProvider(final Organization state,
                                                    final QueryProvider queryProvider,
                                                    final QueryProviderRepositoryHelper repositoryHelper,
                                                    final PermissionSource permissionSource) {
        // target report supports one school or one district;
        // because of this the organizationPartitionSize is 1, seems unreasonable to pad the SQL statement in this case
        super(new TargetReportTemplateProvider(state, repositoryHelper), 1, queryProvider, repositoryHelper, permissionSource);
    }

    @Override
    protected String getTemplateSql() {
        return targetAggregateTemplateSql;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final TargetOrganizationQuery query) {
        return addFiltersAndDimension(createBuilderInstance(), query)
                .reportTemplate(templateProvider.createBuilderWithCommonAttributes(query).build())
                .parameter("school_year", query.getSchoolYear())
                .parameter("asmt_grade_id", getRepositoryHelper().toGradeId(query.getAssessmentGradeCode()))
                .parameter("subject_id", getRepositoryHelper().toSubjectId(query.getSubjectCode()));
    }

    @Override
    public Builder createBuilderWithState(final String assessmentTypeCode) {
        throw new UnsupportedOperationException("state query is not supported for target report");
    }

    @Override
    public Builder createBuilderWithAllDistricts(final String assessmentTypeCode) {
        throw new UnsupportedOperationException("all districts query is not supported for target report");
    }

    @Override
    public Builder createBuilderWithAllSchoolsOfDistricts(final String assessmentTypeCode, final Set<Long> districtIds) {
        throw new UnsupportedOperationException("schools of district query is not supported for target report");
    }
}