package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.olap.repository.TargetReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;

import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * Represents query parameters for the {@link TargetReportRepository}
 * <p>
 * This query is created by a corresponding {@link AggregateQueryConverter} from {@link TargetOrganizationQuery}
 */
@SuppressWarnings("unchecked")
public class TargetOrganizationQuery extends OrganizationTypeQuery {

    private int schoolYear;
    private String subjectCode;
    private String assessmentGradeCode;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public String getAssessmentGradeCode() {
        return assessmentGradeCode;
    }

    public int getSchoolYear() {
        return schoolYear;

    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String asmtGradeCode, final int schoolYear) {
        return (this.schoolYear == schoolYear) && Objects.equals(this.subjectCode, subjectCode) && Objects.equals(this.assessmentGradeCode, asmtGradeCode);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof TargetOrganizationQuery)) return false;
        final TargetOrganizationQuery that = (TargetOrganizationQuery) o;
        return super.equals(that)
                && Objects.equals(subjectCode, that.subjectCode)
                && Objects.equals(assessmentGradeCode, that.assessmentGradeCode)
                && schoolYear == that.schoolYear;
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), subjectCode, schoolYear, assessmentGradeCode);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, TargetOrganizationQuery> {
        private int schoolYear;
        private String subjectCode;
        private String assessmentGradeCode;

        @Override
        TargetOrganizationQuery createInstance() {
            return new TargetOrganizationQuery();
        }

        public TargetOrganizationQuery build() {
            final TargetOrganizationQuery query = super.build();
            query.schoolYear = schoolYear;
            query.subjectCode = subjectCode;
            query.assessmentGradeCode = assessmentGradeCode;
            return query;
        }

        public Builder copy(final TargetOrganizationQuery query) {
            super.copy(query);
            schoolYear = query.getSchoolYear();
            subjectCode = query.getSubjectCode();
            assessmentGradeCode = query.getAssessmentGradeCode();
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder assessmentGradeCode(final String assessmentGradeCode) {
            this.assessmentGradeCode = assessmentGradeCode;
            return this;
        }

        public Builder schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }
    }
}