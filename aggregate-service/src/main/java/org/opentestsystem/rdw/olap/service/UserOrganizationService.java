package org.opentestsystem.rdw.olap.service;

import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

/**
 * Service responsible for managing organizations
 */
@PreAuthorize("hasAuthority('PERM_CUSTOM_AGGREGATE_READ')")
public interface UserOrganizationService {

    /**
     * Gets all the organizations the user has access to
     *
     * @param user the user accessing the organizations
     * @return all the schools the user has access to
     */
    Set<Organization> getOrganizations(@NotNull User user);

    /**
     * Gets all the organizations the user has access to and
     * filters them by the organization query
     *
     * @param user  the user accessing the organizations
     * @param query the organization query
     * @return all the matching organizations the user has access to
     */
    Set<Organization> getOrganizations(@NotNull User user, OrganizationQuery query);

    /**
     * Gets a default organization for aggregate reports.
     * If the user has permission for only one district that district will be returned.
     * If only one school that school will be returned.
     * If the user has multiple of either organization types, no organization will be returned.
     *
     * @param user the user accessing the organizations
     * @return the user's default organization if present
     */
    Optional<Organization> getDefaultOrganization(@NotNull User user);

    /**
     * True if the user is an embargo admin and one or more embargoed organizations
     *
     * @param user the user to check
     * @return map of embargo statuses (Loading and Reviewing) to booleans. True indicates the user
     *    can see the given embargo status and one or more organizations is in that status.
     */
    Map<EmbargoStatus,Boolean> hasEmbargoedOrganizations(@NotNull User user);
}
