package org.opentestsystem.rdw.olap.sqlbuilder.impl.query;

import org.opentestsystem.rdw.olap.model.AltScoreOrganizationQuery;
import org.opentestsystem.rdw.olap.model.AltScoreReportResult;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate;
import org.opentestsystem.rdw.olap.model.SqlQueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.AltScoreReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Qualifier;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.common.model.AssessmentBoundaries.MaxAltScores;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padIntToSize;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padToSize;

/**
 * This implementation is responsible for converting {@link AltScoreOrganizationQuery} into a {@link SqlQueryWithReportTemplate}
 * that contains a SQL string, SQL parameters and an empty report template to produce {@link AltScoreReportResult}
 */
public class AltScoreSqlQueryWithReportTemplateProvider extends AbstractSqlQueryWithReportTemplateProvider<AltScoreOrganizationQuery, AltScoreReportTemplateProvider> {

    private static final String altScoreAggregateTemplateSql = "altScoreAggregate";

    // used to pad altScores to the fixed sized in the SQL 'in' clause
    private final List<String> altScoresSqlPadding;

    public AltScoreSqlQueryWithReportTemplateProvider(
            final Organization state,
            final int organizationPartitionSize,
            final QueryProvider queryProvider,
            final QueryProviderRepositoryHelper repositoryHelper,
            final PermissionSource permissionSource,
            @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties) {
        super(new AltScoreReportTemplateProvider(state, repositoryHelper), organizationPartitionSize, queryProvider, repositoryHelper, permissionSource, reportingSystemProperties);
        altScoresSqlPadding = padIntToSize(newArrayList(), MaxAltScores * repositoryHelper.maxSubjects()).stream().map(Object::toString).collect(toList());
    }

    @Override
    protected String getTemplateSql() {
        return altScoreAggregateTemplateSql;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final AltScoreOrganizationQuery query) {
        return addFiltersAndDimension(createBuilderInstance(), query)
                .reportTemplate(templateProvider.createBuilderWithCommonAttributes(query).build())
                .parameter("school_years", padIntToSize(query.getSchoolYears(), getRepositoryHelper().maxSchoolYears()))
                .parameter("asmt_grade_ids", padIntToSize(getRepositoryHelper().toGradeIds(query.getAssessmentGradeCodes()), getRepositoryHelper().maxAssessmentGrades()))
                .parameter("subject_ids", getRepositoryHelper().toSubjectIds(query.getAltScoreCodesBySubject().keySet()))
                .parameter("asmt_type_id", getRepositoryHelper().toAssessmentTypeId(query.getAssessmentTypeCode()))
                .parameter("subject_alt_score_codes", padAltScoreCodes(query.getAltScoreCodesBySubject().values().stream().flatMap(Collection::stream).collect(toList())));
    }

    private Collection<String> padAltScoreCodes(final Collection<String> collection) {
        return padToSize(collection, altScoresSqlPadding.size(), altScoresSqlPadding);
    }
}
