package org.opentestsystem.rdw.olap.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import org.opentestsystem.rdw.multitenant.TenantContextHolder;

/**
 * Configuration for thread pool to run sql queries in parallel
 */
@Configuration
@EnableAsync
public class QueryPoolExecutor {

    private int partitionSize;

    @Autowired
    public void setPartitionSize(final @Value("${app.aggregate-reports.query-pool-size}") int partitionSize) {
        this.partitionSize = partitionSize;
    }

    @Bean
    public TaskExecutor threadPoolTaskExecutor() {
        final ThreadPoolTaskExecutor executor = new TenantAwareTaskExecutor();
        executor.setCorePoolSize(partitionSize);
        executor.setMaxPoolSize(partitionSize);
        executor.initialize();
        return executor;
    }

    public static class TenantAwareTaskExecutor extends ThreadPoolTaskExecutor {
        @Override
        public void execute(final Runnable task) {
            final String tenantId = TenantContextHolder.getTenantId();
            super.execute(() -> {
                TenantContextHolder.setTenantId(tenantId);
                task.run();
            });
        }

        @Override
        public void execute(final Runnable task, final long startTimeout) {
            final String tenantId = TenantContextHolder.getTenantId();
            super.execute(() -> {
                TenantContextHolder.setTenantId(tenantId);
                task.run();
            }, startTimeout);
        }
    }
}
