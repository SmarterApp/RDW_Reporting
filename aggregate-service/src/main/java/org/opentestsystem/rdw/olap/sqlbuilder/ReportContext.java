package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.model.AssessmentDescription;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;

import java.util.Collection;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * A helper that contains all data needed to build en empty template version of the report: all rows with empty measures.
 * <p>
 * It is used during conversion of the {@link OrganizationTypeQuery} to sql to back-fill missing
 * report rows or deriving an estimated row count.
 */
@SuppressWarnings("unchecked")
public class ReportContext<A extends AssessmentDescription> {
    private Set<Organization> organizations = newHashSet();
    private Set<A> assessments = newHashSet();
    private Set<Dimension> dimensions = newHashSet();
    private boolean includeStudentEnrolledGradeDimension = false;

    public int getEstimatedRowCount() {
        // since we do not back-fill student enrolled grades it is missing from the dimensions.
        // we assume only one grade per asmt/school year
        return organizations.size() * assessments.size() * (dimensions.size() + (includeStudentEnrolledGradeDimension ? 1 : 0));
    }

    public Set<Organization> getOrganizations() {
        return organizations;
    }

    public Set<A> getAssessments() {
        return assessments;
    }

    public Set<Dimension> getDimensions() {
        return dimensions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder<B extends Builder, T extends ReportContext, A extends AssessmentDescription> {
        protected Set<Organization> organizations = newHashSet();
        protected Set<A> assessments = newHashSet();
        protected Set<Dimension> dimensions = newHashSet();
        protected boolean includeStudentEnrolledGradeDimension = false;

        protected T createInstance() {
            return (T) new ReportContext();
        }

        public T build() {
            final ReportContext reportTemplate = createInstance();
            reportTemplate.assessments = assessments;
            reportTemplate.organizations = organizations;
            reportTemplate.dimensions = dimensions;
            reportTemplate.includeStudentEnrolledGradeDimension = includeStudentEnrolledGradeDimension;
            return (T) reportTemplate;
        }

        B merge(final B another) {
            organizations.addAll(another.organizations);
            assessments.addAll(another.assessments);
            dimensions.addAll(another.dimensions);
            includeStudentEnrolledGradeDimension = (includeStudentEnrolledGradeDimension || another.includeStudentEnrolledGradeDimension);
            return (B) this;
        }

        B assessments(final Collection<A> assessments) {
            this.assessments.addAll(assessments);
            return (B) this;
        }

        B districts(final Collection<District> districts) {
            this.organizations.addAll(districts);
            return (B) this;
        }

        B schools(final Collection<School> schools) {
            this.organizations.addAll(schools);
            return (B) this;
        }

        B state(final Organization state) {
            this.organizations.add(state);
            return (B) this;
        }

        B dimensions(final Collection<Dimension> dimensions) {
            this.dimensions.addAll(dimensions);
            return (B) this;
        }

        B includeStudentEnrolledGradeDimension(final boolean includeStudentEnrolledGradeDimension) {
            this.includeStudentEnrolledGradeDimension = includeStudentEnrolledGradeDimension;
            return (B) this;
        }
    }
}