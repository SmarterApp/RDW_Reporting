package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.service.AltScoreService;
import org.springframework.stereotype.Service;

import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;
import org.opentestsystem.rdw.olap.model.AggregateServiceCache;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.service.AdministrationConditionService;
import org.opentestsystem.rdw.olap.service.AssessmentGradeService;
import org.opentestsystem.rdw.olap.service.ClaimService;
import org.opentestsystem.rdw.olap.service.CompletenessService;
import org.opentestsystem.rdw.olap.service.ReportOptionService;
import org.opentestsystem.rdw.olap.service.SchoolYearService;
import org.opentestsystem.rdw.olap.service.SubjectService;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;

import java.util.ArrayList;
import java.util.List;

import static org.opentestsystem.rdw.olap.model.CodedEntities.codesOf;

/**
 * This implementation caches the generated report options
 */
@Service
class DefaultReportOptionService implements ReportOptionService {

    private final AdministrationConditionService administrationConditionService;
    private final AssessmentGradeService assessmentGradeService;
    private final CompletenessService completenessService;
    private final SchoolYearService schoolYearService;
    private final SubjectService subjectService;
    private final ClaimService claimService;
    private final AltScoreService altScoreService;

    DefaultReportOptionService(
            final AdministrationConditionService administrationConditionService,
            final AssessmentGradeService assessmentGradeService,
            final CompletenessService completenessService,
            final SchoolYearService schoolYearService,
            final SubjectService subjectService,
            final ClaimService claimService,
            final AltScoreService altScoreService) {
        this.administrationConditionService = administrationConditionService;
        this.assessmentGradeService = assessmentGradeService;
        this.completenessService = completenessService;
        this.schoolYearService = schoolYearService;
        this.subjectService = subjectService;
        this.claimService = claimService;
        this.altScoreService = altScoreService;
    }

    @TenantCacheable(value = AggregateServiceCache.ReportOptions)
    @Override
    public ReportOptions getReportOptions() {
        return ReportOptions.builder()
            .assessmentGrades(codesOf(assessmentGradeService.getAssessmentGrades()))
            .completenesses(codesOf(completenessService.getCompletenesses()))
            .claims(claimService.findAll())
            .altScores(altScoreService.findAll())
            .dimensionTypes(DimensionType.orderedDisplayValues())
            .interimAdministrationConditions(codesOf(administrationConditionService.getInterimConditions()))
            .schoolYears(schoolYearService.getSchoolYears())
            .subjects(subjectService.getSubjects())
            .summativeAdministrationConditions(codesOf(administrationConditionService.getSummativeConditions()))
            .build();
    }

    static List<AltScore> cannedData() {
        final List<AltScore> cannedData = new ArrayList<>();
        AltScore altScore;
        altScore = AltScore.builder().code("1").assessmentTypeCode("sum").subjectCode("ELPAC").build();
        cannedData.add(altScore);
        altScore = AltScore.builder().code("2").assessmentTypeCode("sum").subjectCode("ELPAC").build();
        cannedData.add(altScore);
        altScore = AltScore.builder().code("ASTRO").assessmentTypeCode("sum").subjectCode("Science").build();
        cannedData.add(altScore);
        altScore = AltScore.builder().code("BIO").assessmentTypeCode("sum").subjectCode("Science").build();
        cannedData.add(altScore);
        altScore = AltScore.builder().code("GEO").assessmentTypeCode("sum").subjectCode("Science").build();
        cannedData.add(altScore);
        altScore = AltScore.builder().code("PHYS").assessmentTypeCode("sum").subjectCode("Science").build();
        cannedData.add(altScore);
        return cannedData;
    }
}
