package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.AggregateServiceCache;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.jdbc.Organizations;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toMap;

@Repository
class JdbcOrganizationRepository implements OrganizationRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.organization.aggregate.findAllSchools}")
    private String findAllSchoolsQuery;

    @Value("${sql.organization.aggregate.findAllDistricts}")
    private String findAllDistrictsQuery;

    @Autowired
    JdbcOrganizationRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Cacheable(value = AggregateServiceCache.Organizations, key = "#root.methodName")
    @Override
    public Map<Long, School> findAllSchools() {
        return template.query(
                findAllSchoolsQuery,
                (row, index) -> Organizations.map(row))
                .stream()
                .map(s -> ((School) s))
                .collect(toMap(School::getId, s -> s));
    }

    @Cacheable(value = AggregateServiceCache.Organizations, key = "#root.methodName")
    @Override
    public Map<Long, District> findAllDistricts() {
        return template.query(
                findAllDistrictsQuery,
                (row, index) -> Organizations.map(row))
                .stream()
                .map(r -> ((District) r))
                .collect(toMap(District::getId, d -> d));
    }


    @Cacheable(value = AggregateServiceCache.Organizations, key = "#root.methodName")
    @Override
    public Map<Long, List<School>> findAllSchoolsByDistrictIds() {
        return template.query(
                findAllSchoolsQuery,
                (row, index) -> Organizations.map(row))
                .stream()
                .map(r -> ((School) r))
                .collect(Collectors.groupingBy(School::getDistrictId));
    }
}
