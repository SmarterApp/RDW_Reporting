package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.YearGradePair;
import org.opentestsystem.rdw.olap.service.AssessmentGradeService;
import org.opentestsystem.rdw.olap.service.LongitudinalYearGradeService;
import org.opentestsystem.rdw.reporting.common.model.Grade;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

@Service
class DefaultLongitudinalYearGradeService implements LongitudinalYearGradeService {
    private final AssessmentGradeService assessmentGradeService;

    DefaultLongitudinalYearGradeService(final AssessmentGradeService assessmentGradeService) {
        this.assessmentGradeService = assessmentGradeService;
    }

    @Override
    public List<YearGradePair> toYearGradePairs(final int toSchoolYear, final Set<String> gradeCodes) {
        if (gradeCodes.isEmpty()) throw new IllegalArgumentException("grade codes must not be empty");

        if (gradeCodes.size() == 1) return newArrayList(new YearGradePair(toSchoolYear, gradeCodes.iterator().next()));

        int toGradeSequence = 0;
        final List<Grade> grades = newArrayList();
        for (final Grade grade : assessmentGradeService.getAssessmentGrades()) {
            if (gradeCodes.contains(grade.getCode())) {
                grades.add(grade);
                if (toGradeSequence < grade.getSequence()) toGradeSequence = grade.getSequence();
            }
        }

        final int diff = toSchoolYear - toGradeSequence;
        return grades.stream().map(g -> new YearGradePair(diff + g.getSequence(), g.getCode())).collect(toList());
    }
}