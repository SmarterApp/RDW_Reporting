package org.opentestsystem.rdw.olap.sqlbuilder;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import java.util.List;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.IEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.LEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;

/**
 * This implementation is responsible for converting {@link ReportQuery} into one or more {@link QueryWithReportTemplate}s
 * representing the custom aggregate report
 */
public class CustomAggregateQueryWithReportTemplateProvider extends CustomAggregateReportContextProvider<Builder, QueryWithReportTemplate> {
    private static final List<Integer> UNMATCHABLE_INT_IDS = ImmutableList.of(-1);

    private static final String customAggregateTemplateSql = "customAggregate";
    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";
    private static final String allSchoolsInDistrictsAddOn = "allSchoolsInDistricts";
    private final QueryProvider queryProvider;

    public CustomAggregateQueryWithReportTemplateProvider(final Organization state,
                                                          final QueryProvider queryProvider,
                                                          final QueryProviderRepositoryHelper repositoryHelper) {
        super(state, repositoryHelper);
        this.queryProvider = queryProvider;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final ReportQuery query) {
        return super.createBuilderWithCommonAttributes(query)
                .parameter("school_years", query.getSchoolYears())
                .parameter("asmt_grade_ids", getRepositoryHelper().toGradeIds(query.getAssessmentGradeCodes()))
                .parameter("subject_ids", getRepositoryHelper().toSubjectIds(query.getSubjectCodes()))
                .parameter("asmt_type_id", getRepositoryHelper().toAssessmentTypeId(query.getAssessmentTypeCode()));
    }

    @Override
    public Builder createBuilderWithState() {
        return super.createBuilderWithState().addOn(stateAddOn);
    }

    @Override
    public Builder createBuilderWithAllDistricts() {
        return super.createBuilderWithAllDistricts().addOn(allDistrictsAddOn);
    }

    @Override
    public Builder createBuilderWithDistrictIds(final Set<Long> districtIds) {
        return super.createBuilderWithDistrictIds(districtIds)
                .addOn(allDistrictsAddOn)
                .addOn(districtsAddOn)
                .parameter("district_ids", districtIds);
    }

    @Override
    public Builder createBuilderWithAllSchoolsOfDistricts(final Set<Long> districtIds) {
        return super.createBuilderWithAllSchoolsOfDistricts(districtIds)
                .addOn(allSchoolsInDistrictsAddOn)
                .parameter("school_district_ids", districtIds);
    }

    @Override
    public Builder createBuilderWithSchoolIds(final Set<Long> schoolIds) {
        return super.createBuilderWithSchoolIds(schoolIds)
                .addOn(schoolsAddOn)
                .parameter("school_ids", schoolIds);
    }

    @Override
    public QueryWithReportTemplate build(final Builder builder) {
        return builder.build(queryProvider, customAggregateTemplateSql);
    }

    @Override
    public Builder createBuilderInstance() {
        return QueryWithReportTemplate.builder();
    }

    public Builder createBuilderWithFiltersAndDimensions(final DimensionType dimensionType, final ReportQuery query) {
        final Builder queryBuilder = super.createBuilderWithFiltersAndDimensions(dimensionType, query).addOn(dimensionType.name());

        if (!query.getCompletenessCodes().isEmpty()) {
            queryBuilder
                    .addOn("completeness")
                    .parameter("completeness_ids", getRepositoryHelper().toCompletenessIds(query.getCompletenessCodes()));
        }

        if (!query.getAdministrativeConditionCodes().isEmpty()) {
            queryBuilder
                    .addOn("administration_condition")
                    .parameter("administration_condition_ids", getRepositoryHelper().toAdministrativeConditionIds(query.getAdministrativeConditionCodes()));
        }

        final Set<Integer> genderIds = getRepositoryHelper().toGenderIds(query.getGenderCodes());
        final Set<Integer> ethnicityIds = getRepositoryHelper().toEthnicityIds(query.getEthnicityCodes());
        final Set<Integer> lepIds = getRepositoryHelper().toStrictBooleanIds(query.getLepCodes());
        final Set<Integer> migrantStatusIds = getRepositoryHelper().toBooleanIds(query.getMigrantStatusCodes());
        final Set<Integer> section504Ids = getRepositoryHelper().toBooleanIds(query.getSection504Codes());
        final Set<Integer> iepIds = getRepositoryHelper().toStrictBooleanIds(query.getIepCodes());
        final Set<Integer> economicDisadvantageIds = getRepositoryHelper().toStrictBooleanIds(query.getEconomicDisadvantageCodes());

        addFilter(queryBuilder, Gender, genderIds, dimensionType == Gender);
        addFilter(queryBuilder, Ethnicity, ethnicityIds, dimensionType == Ethnicity);
        addFilter(queryBuilder, LEP, lepIds, dimensionType == LEP);
        addFilter(queryBuilder, MigrantStatus, migrantStatusIds, dimensionType == MigrantStatus);
        addFilter(queryBuilder, Section504, section504Ids, dimensionType == Section504);
        addFilter(queryBuilder, IEP, iepIds, dimensionType == IEP);
        addFilter(queryBuilder, EconomicDisadvantage, economicDisadvantageIds, dimensionType == EconomicDisadvantage);

        switch (dimensionType) {
            case Gender:
                addFilterParams(queryBuilder, dimensionType, genderIds);
                break;
            case Ethnicity:
                addFilterParams(queryBuilder, dimensionType, ethnicityIds);
                break;
            case LEP:
                addFilterParams(queryBuilder, dimensionType, lepIds);
                break;
            case MigrantStatus:
                addFilterParams(queryBuilder, dimensionType, migrantStatusIds);
                break;
            case Section504:
                addFilterParams(queryBuilder, dimensionType, section504Ids);
                break;
            case IEP:
                addFilterParams(queryBuilder, dimensionType, iepIds);
                break;
            case EconomicDisadvantage:
                addFilterParams(queryBuilder, dimensionType, economicDisadvantageIds);
                break;
        }
        return queryBuilder;
    }

    private void addFilter(final Builder queryBuilder,
                           final DimensionType dimensionType,
                           final Set<Integer> dimensionFilters,
                           boolean isFilterSameAsDimension) {
        if (!isFilterSameAsDimension && !dimensionFilters.isEmpty()) {
            queryBuilder.addOn(dimensionType.name() + "_filter");
            addFilterParams(queryBuilder, dimensionType, dimensionFilters);
        }
    }

    private void addFilterParams(final Builder queryBuilder,
                                 final DimensionType dimensionType,
                                 final Set<Integer> dimensionFilters) {

        switch (dimensionType) {
            case Gender:
                queryBuilder.parameter("all_genders", dimensionFilters.isEmpty())
                        .parameter("gender_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;
            case Ethnicity:
                queryBuilder.parameter("all_ethnicities", dimensionFilters.isEmpty())
                        .parameter("ethnicity_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;

            case LEP:
                queryBuilder.parameter("all_leps", dimensionFilters.isEmpty())
                        .parameter("lep_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;

            case MigrantStatus:
                queryBuilder.parameter("all_migrant_statuses", dimensionFilters.isEmpty())
                        .parameter("migrant_status_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;
            case Section504:
                queryBuilder.parameter("all_section504s", dimensionFilters.isEmpty())
                        .parameter("section504_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;

            case IEP:
                queryBuilder.parameter("all_ieps", dimensionFilters.isEmpty())
                        .parameter("iep_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;

            case EconomicDisadvantage:
                queryBuilder.parameter("all_economic_disadvantages", dimensionFilters.isEmpty())
                        .parameter("economic_disadvantage_ids", nullOrEmptyToDefault(dimensionFilters, UNMATCHABLE_INT_IDS));
                break;
        }
    }
}