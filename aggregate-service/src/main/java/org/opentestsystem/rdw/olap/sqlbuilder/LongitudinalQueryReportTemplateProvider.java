package org.opentestsystem.rdw.olap.sqlbuilder;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.model.GradeYearPair;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryReportTemplate.Builder;
import org.opentestsystem.rdw.reporting.common.model.AssessmentDescription;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import java.util.Set;

/**
 * This implementation is responsible for converting {@link LongitudinalReportQuery} into a {@link QueryReportTemplate}
 */

public class LongitudinalQueryReportTemplateProvider extends BaseQueryReportTemplateProvider<LongitudinalReportQuery, AssessmentDescription> {

    private static final String longitudinalTemplateSql = "longitudinal";

    public LongitudinalQueryReportTemplateProvider(final Organization state,
                                                   final int organizationPartitionSize,
                                                   final QueryProvider queryProvider,
                                                   final QueryProviderRepositoryHelper repositoryHelper,
                                                   final PermissionSource permissionSource) {
        super(state, organizationPartitionSize, queryProvider, repositoryHelper, permissionSource);
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final LongitudinalReportQuery query) {
        final Set<Integer> subjectIds = getRepositoryHelper().toSubjectIds(ImmutableList.of(query.getSubjectCode()));
        if (subjectIds.size() != 1) throw new IllegalStateException("unknown subject code:" + query.getSubjectCode());

        final Builder builder = addFiltersAndDimension(super.createBuilderWithCommonAttributes(query), query)
                .parameter("subject_id", subjectIds.iterator().next())
                .parameter("cohort_years", query.getGradeYearPairs().size());

        for (final CodedEntity assessmentGradeCode : getRepositoryHelper().findAllAssessmentGrades()) {
            for (final GradeYearPair gradeYearPair : query.getGradeYearPairs()) {
                    builder.parameter("school_year_grade_" + assessmentGradeCode.getCode(), gradeYearPair.getGradeCode().equals(assessmentGradeCode.getCode()) ? gradeYearPair.getSchoolYear(): -1);
            }
        }

        return builder;
    }

    @Override
    protected String getTemplateSql() {
        return longitudinalTemplateSql;
    }
}