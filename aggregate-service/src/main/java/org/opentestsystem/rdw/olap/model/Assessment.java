package org.opentestsystem.rdw.olap.model;

import java.util.List;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents an assessment
 * <p>
 * TODO consolidate with common Assessment model when enum use is removed from it
 */
public class Assessment {

    private int id;
    private String name;
    private String label;
    private String typeCode;
    private String subjectCode;
    private String gradeCode;
    private int schoolYear;
    private List<Integer> cutPoints;

    /**
     * @return the assessment entity ID
     */
    public int getId() {
        return id;
    }

    /**
     * @return the assessment name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the assessment display name
     */
    public String getLabel() {
        return label;
    }

    /**
     * @return the assessment type code
     */
    public String getTypeCode() {
        return typeCode;
    }

    /**
     * @return the assessment subject code
     */
    public String getSubjectCode() {
        return subjectCode;
    }

    /**
     * @return the code of the grade the assessment was designed for
     */
    public String getGradeCode() {
        return gradeCode;
    }

    /**
     * @return the school year the assessment was designed for
     */
    public int getSchoolYear() {
        return schoolYear;
    }

    /**
     * Gets the assessment cut points.
     * Cut points are the point values which separate the performance levels of assessments.
     * These points are sorted in ascending order beginning with the minimum score and ending with the maximum.
     * In the case of IABs the cut points 1 and 3 are exam-specific and should be calculated using the following formula:
     * cut_point_1 = cut_point_2 - (1.5 * exam_scale_score_standard_error)
     * cut_point_2 = cut_point_3 + (1.5 * exam_scale_score_standard_error)
     *
     * @return the assessment cut points
     */
    public List<Integer> getCutPoints() {
        return cutPoints;
    }

    /**
     * Equality check is based on the assessment's entity ID
     * Entity IDs among assessments are unique in this system
     *
     * @param o the object to compare
     * @return <code>true</code> if the given object is an Assessment and has the same entity ID
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final Assessment that = (Assessment) o;
        return id == that.id;
    }

    /**
     * @return hash code based on the Assessment's entity ID
     */
    @Override
    public int hashCode() {
        return id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private int id;
        private String name;
        private String label;
        private String typeCode;
        private String subjectCode;
        private String gradeCode;
        private int schoolYear;
        private List<Integer> cutPoints;

        public Builder id(final int id) {
            this.id = id;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder typeCode(final String typeCode) {
            this.typeCode = typeCode;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder gradeCode(final String gradeCode) {
            this.gradeCode = gradeCode;
            return this;
        }

        public Builder schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder cutPoints(final List<Integer> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.name = name;
            assessment.label = label;
            assessment.typeCode = typeCode;
            assessment.subjectCode = subjectCode;
            assessment.gradeCode = gradeCode;
            assessment.schoolYear = schoolYear;
            assessment.cutPoints = safeImmutableOf(cutPoints);
            return assessment;
        }

    }

}
