package org.opentestsystem.rdw.olap.model;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.olap.repository.AltScoreReportRepository;
import org.opentestsystem.rdw.olap.service.AggregateQueryConverter;
import org.opentestsystem.rdw.reporting.common.model.AltScoreAggregateReportQuery;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents query parameters for the {@link AltScoreReportRepository}
 * <p>
 * This query is created by a corresponding {@link AggregateQueryConverter} from {@link AltScoreAggregateReportQuery}
 */
@SuppressWarnings("unchecked")
public class AltScoreOrganizationQuery extends OrganizationTypeQuery {
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;
    private ImmutableMap<String, Set<String>> altScoreCodesBySubject;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public ImmutableMap<String, Set<String>> getAltScoreCodesBySubject() {
        return altScoreCodesBySubject;
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears;
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String assessmentGradeCode, final int schoolYear) {
        return (getSchoolYears().contains(schoolYear)
             && getAltScoreCodesBySubject().containsKey(subjectCode)
             && getAssessmentGradeCodes().contains(assessmentGradeCode));
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (!(o instanceof AltScoreOrganizationQuery)) return false;
        final AltScoreOrganizationQuery that = (AltScoreOrganizationQuery) o;
        return super.equals(that)
                && Objects.equals(altScoreCodesBySubject, that.altScoreCodesBySubject)
                && Objects.equals(schoolYears, that.schoolYears)
                && Objects.equals(assessmentGradeCodes, that.assessmentGradeCodes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), altScoreCodesBySubject, schoolYears, assessmentGradeCodes);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, AltScoreOrganizationQuery> {
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private Map<String, Set<String>> altScoreCodesBySubject;

        @Override
        AltScoreOrganizationQuery createInstance() {
            return new AltScoreOrganizationQuery();
        }

        public AltScoreOrganizationQuery build() {
            final AltScoreOrganizationQuery query = super.build();
            query.altScoreCodesBySubject = safeImmutableOf(altScoreCodesBySubject);
            query.schoolYears = safeImmutableOf(schoolYears);
            query.assessmentGradeCodes = safeImmutableOf(assessmentGradeCodes);
            return query;
        }

        public Builder copy(final AltScoreOrganizationQuery query) {
            super.copy(query);
            this.altScoreCodesBySubject = query.altScoreCodesBySubject;
            this.schoolYears = query.schoolYears;
            this.assessmentGradeCodes = query.assessmentGradeCodes;
            return this;
        }

        public Builder altScoreCodesBySubject(final Map<String, Set<String>> altScoreCodesBySubject) {
            this.altScoreCodesBySubject = altScoreCodesBySubject;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }
    }
}