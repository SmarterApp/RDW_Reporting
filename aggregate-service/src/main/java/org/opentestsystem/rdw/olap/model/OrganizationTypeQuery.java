package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * Represents query parameters for the custom aggregate repository.
 * Note that the query is limited to one dimension and one organization type.
 */
public class OrganizationTypeQuery {
    private DimensionType dimensionType;
    private String assessmentTypeCode;
    private Set<String> subjectCodes;
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;

    private Set<Long> organizationIds;
    private OrganizationType organizationType;

    private Set<String> completenessCodes;
    private Set<String> administrativeConditionCodes;

    private Set<String> genderCodes;
    private Set<String> ethnicityCodes;
    private Set<String> lepCodes;
    private Set<String> migrantStatusCodes;
    private Set<String> section504Codes;
    private Set<String> iepCodes;
    private Set<String> economicDisadvantageCodes;

    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    public Set<String> getSubjectCodes() {
        return subjectCodes == null ? newHashSet() : newHashSet(subjectCodes);
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears == null ? newHashSet() : newHashSet(schoolYears);
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes == null ? newHashSet() : newHashSet(assessmentGradeCodes);
    }

    public Set<Long> getOrganizationIds() {
        return organizationIds == null ? newHashSet() : newHashSet(organizationIds);
    }

    public DimensionType getDimensionType() {
        return dimensionType;
    }

    public OrganizationType getOrganizationType() {
        return organizationType;
    }

    public Set<String> getCompletenessCodes() {
        return completenessCodes == null ? newHashSet() : newHashSet(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return administrativeConditionCodes == null ? newHashSet() : newHashSet(administrativeConditionCodes);
    }

    public Set<String> getGenderCodes() {
        return genderCodes == null ? newHashSet() : newHashSet(genderCodes);
    }

    public Set<String> getEthnicityCodes() {
        return ethnicityCodes == null ? newHashSet() : newHashSet(ethnicityCodes);
    }

    public Set<String> getLepCodes() {
        return lepCodes == null ? newHashSet() : newHashSet(lepCodes);
    }

    public Set<String> getMigrantStatusCodes() {
        return migrantStatusCodes == null ? newHashSet() : newHashSet(migrantStatusCodes);
    }

    public Set<String> getSection504Codes() {
        return section504Codes == null ? newHashSet() : newHashSet(section504Codes);
    }

    public Set<String> getIepCodes() {
        return iepCodes == null ? newHashSet() : newHashSet(iepCodes);
    }

    public Set<String> getEconomicDisadvantageCodes() {
        return economicDisadvantageCodes == null ? newHashSet() : newHashSet(economicDisadvantageCodes);
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public void validate() {
        checkArgument(assessmentTypeCode != null, "organization type query is assessmet type");
        checkArgument(dimensionType != null, "organization type query is missing dimension type");
        checkArgument(organizationType != null && (organizationType == State || organizationType == District || organizationType == School), "invalid prganization type for organization type query");
        checkArgument(!isEmpty(subjectCodes), "organization type query is missing subjects");
        checkArgument(!isEmpty(assessmentGradeCodes), "organization type query is missing asmt grades");
        checkArgument(!isEmpty(schoolYears), "organization type query is missing school years");

        if (getOrganizationType() == State && !getOrganizationIds().isEmpty()) {
            throw new IllegalArgumentException("invalid OrganizationTypeQuery, state does not require organization ids");
        }
        if ((getOrganizationType() == School || getOrganizationType() == District)
                && getOrganizationIds().isEmpty()) {
            throw new IllegalArgumentException("invalid OrganizationTypeQuery, missing organization ids");
        }
    }

    public static class Builder {
        private DimensionType dimensionType;
        private String assessmentTypeCode;
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private Set<Long> organizationIds;
        private OrganizationType organizationType;

        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private Set<String> genderCodes;
        private Set<String> ethnicityCodes;
        private Set<String> lepCodes;
        private Set<String> migrantStatusCodes;
        private Set<String> section504Codes;
        private Set<String> iepCodes;
        private Set<String> economicDisadvantageCodes;

        public OrganizationTypeQuery build() {
            final OrganizationTypeQuery query = new OrganizationTypeQuery();
            query.assessmentTypeCode = assessmentTypeCode;
            query.subjectCodes = subjectCodes;
            query.schoolYears = schoolYears;
            query.assessmentGradeCodes = assessmentGradeCodes;
            query.organizationType = organizationType;
            query.organizationIds = organizationIds;
            query.dimensionType = dimensionType;
            query.completenessCodes = completenessCodes;
            query.administrativeConditionCodes = administrativeConditionCodes;
            query.genderCodes = genderCodes;
            query.ethnicityCodes = ethnicityCodes;
            query.lepCodes = lepCodes;
            query.migrantStatusCodes = migrantStatusCodes;
            query.section504Codes = section504Codes;
            query.iepCodes = iepCodes;
            query.economicDisadvantageCodes = economicDisadvantageCodes;
            return query;
        }

        public Builder copy(final OrganizationTypeQuery query) {
            assessmentTypeCode = query.getAssessmentTypeCode();
            subjectCodes = query.getSubjectCodes();
            schoolYears = query.getSchoolYears();
            assessmentGradeCodes = query.getAssessmentGradeCodes();
            organizationType = query.getOrganizationType();
            organizationIds = query.getOrganizationIds();
            dimensionType = query.getDimensionType();
            completenessCodes = query.getCompletenessCodes();
            administrativeConditionCodes = query.getAdministrativeConditionCodes();
            genderCodes = query.getGenderCodes();
            ethnicityCodes = query.getEthnicityCodes();
            lepCodes = query.getLepCodes();
            migrantStatusCodes = query.getMigrantStatusCodes();
            section504Codes = query.getSection504Codes();
            iepCodes = query.getIepCodes();
            economicDisadvantageCodes = query.getEconomicDisadvantageCodes();
            return this;
        }

        public Builder assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return this;
        }

        public Builder subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }

        public Builder organizationIds(final Set<Long> organizationIds) {
            this.organizationIds = organizationIds;
            return this;
        }

        public Builder organizationType(final OrganizationType organizationType) {
            this.organizationType = organizationType;
            return this;
        }

        public Builder dimensionType(final DimensionType dimensionType) {
            this.dimensionType = dimensionType;
            return this;
        }

        public Builder completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return this;
        }

        public Builder administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return this;
        }

        public Builder genderCodes(final Set<String> genderCodes) {
            this.genderCodes = genderCodes;
            return this;
        }

        public Builder ethnicityCodes(final Set<String> ethnicityCodes) {
            this.ethnicityCodes = ethnicityCodes;
            return this;
        }

        public Builder lepCodes(final Set<String> lepCodes) {
            this.lepCodes = lepCodes;
            return this;
        }

        public Builder migrantStatusCodes(final Set<String> migrantStatusCodes) {
            this.migrantStatusCodes = migrantStatusCodes;
            return this;
        }

        public Builder section504Codes(final Set<String> section504Codes) {
            this.section504Codes = section504Codes;
            return this;
        }

        public Builder iepCodes(final Set<String> iepCodes) {
            this.iepCodes = iepCodes;
            return this;
        }

        public Builder economicDisadvantageCodes(final Set<String> economicDisadvantageCodes) {
            this.economicDisadvantageCodes = economicDisadvantageCodes;
            return this;
        }
    }
}