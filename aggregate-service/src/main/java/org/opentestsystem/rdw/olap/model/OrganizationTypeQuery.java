package org.opentestsystem.rdw.olap.model;

import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.reporting.common.model.AbstractAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import javax.validation.constraints.NotNull;
import java.util.Objects;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents common query parameters for implementations of {@link ReportRepository}.
 * <p>
 * A repository query is limited to one {@link DimensionType}, one organization type and one subgroup (if applicable).
 * <p>
 * If a subgroupKey is not null, then this represents a query built from the
 * {@link AbstractAggregateReportQuery#isFilteredSubgroupQuery()} for one of
 * the {@link AbstractAggregateReportQuery#subgroups}
 */
@SuppressWarnings("unchecked")
public abstract class OrganizationTypeQuery {
    private DimensionType dimensionType;
    private String assessmentTypeCode;
    private Set<Long> organizationIds;
    private OrganizationType organizationType;

    private Set<String> completenessCodes;
    private Set<String> administrativeConditionCodes;

    private Set<String> genderCodes;
    private Set<String> ethnicityCodes;
    private Set<String> lepCodes;
    private Set<String> elasCodes;
    private Set<String> migrantStatusCodes;
    private Set<String> section504Codes;
    private Set<String> iepCodes;
    private Set<String> economicDisadvantageCodes;

    private String subgroupKey;

    public String getSubgroupKey() {
        return subgroupKey;
    }

    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    public Set<Long> getOrganizationIds() {
        return organizationIds;
    }

    public DimensionType getDimensionType() {
        return dimensionType;
    }

    public OrganizationType getOrganizationType() {
        return organizationType;
    }

    public Set<String> getAdministrativeConditionCodes() {
        return administrativeConditionCodes;
    }

    public Set<String> getCompletenessCodes() {
        return completenessCodes;
    }

    public Set<String> getGenderCodes() {
        return genderCodes;
    }

    public Set<String> getEthnicityCodes() {
        return ethnicityCodes;
    }

    public Set<String> getLepCodes() {
        return lepCodes;
    }

    public Set<String> getElasCodes() {
        return elasCodes;
    }

    public Set<String> getMigrantStatusCodes() {
        return migrantStatusCodes;
    }

    public Set<String> getSection504Codes() {
        return section504Codes;
    }

    public Set<String> getIepCodes() {
        return iepCodes;
    }

    public Set<String> getEconomicDisadvantageCodes() {
        return economicDisadvantageCodes;
    }

    /**
     * Returns true if the query contains the given parameters
     */
    public abstract boolean contains(@NotNull String subjectCode, @NotNull String asmtGradeCode, final int schoolYear);

    /**
     * Returns this query builder pre-loaded with the query data
     */
    public abstract <B extends Builder> B copy();

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof OrganizationTypeQuery)) return false;
        final OrganizationTypeQuery that = (OrganizationTypeQuery) o;
        return Objects.equals(dimensionType, that.dimensionType)
                && Objects.equals(assessmentTypeCode, that.assessmentTypeCode)
                && Objects.equals(organizationIds, that.organizationIds)
                && Objects.equals(organizationType, that.organizationType)
                && Objects.equals(completenessCodes, that.completenessCodes)
                && Objects.equals(administrativeConditionCodes, that.administrativeConditionCodes)
                && Objects.equals(genderCodes, that.genderCodes)
                && Objects.equals(ethnicityCodes, that.ethnicityCodes)
                && Objects.equals(lepCodes, that.lepCodes)
                && Objects.equals(elasCodes, that.elasCodes)
                && Objects.equals(migrantStatusCodes, that.migrantStatusCodes)
                && Objects.equals(section504Codes, that.section504Codes)
                && Objects.equals(iepCodes, that.iepCodes)
                && Objects.equals(economicDisadvantageCodes, that.economicDisadvantageCodes)
                && Objects.equals(subgroupKey, that.subgroupKey);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dimensionType, assessmentTypeCode, organizationIds, organizationType, completenessCodes, administrativeConditionCodes,
                administrativeConditionCodes, genderCodes, ethnicityCodes, lepCodes, elasCodes, migrantStatusCodes, section504Codes, iepCodes,
                economicDisadvantageCodes, subgroupKey);
    }

    public static abstract class Builder<B extends Builder, Q extends OrganizationTypeQuery> {
        private DimensionType dimensionType;
        private String assessmentTypeCode;
        private Set<Long> organizationIds;
        private OrganizationType organizationType;

        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private Set<String> genderCodes;
        private Set<String> ethnicityCodes;
        private Set<String> lepCodes;
        private Set<String> elasCodes;
        private Set<String> migrantStatusCodes;
        private Set<String> section504Codes;
        private Set<String> iepCodes;
        private Set<String> economicDisadvantageCodes;

        private String subgroupKey;

        abstract Q createInstance();

        public Q build() {
            final OrganizationTypeQuery query = createInstance();
            query.assessmentTypeCode = assessmentTypeCode;
            query.organizationType = organizationType;
            query.organizationIds = safeImmutableOf(organizationIds);
            query.dimensionType = dimensionType;
            query.completenessCodes = safeImmutableOf(completenessCodes);
            query.administrativeConditionCodes = safeImmutableOf(administrativeConditionCodes);
            query.genderCodes = safeImmutableOf(genderCodes);
            query.ethnicityCodes = safeImmutableOf(ethnicityCodes);
            query.lepCodes = safeImmutableOf(lepCodes);
            query.elasCodes = safeImmutableOf(elasCodes);
            query.migrantStatusCodes = safeImmutableOf(migrantStatusCodes);
            query.section504Codes = safeImmutableOf(section504Codes);
            query.iepCodes = safeImmutableOf(iepCodes);
            query.economicDisadvantageCodes = safeImmutableOf(economicDisadvantageCodes);
            query.subgroupKey = subgroupKey;
            return (Q) query;
        }

        protected Builder copy(final Q query) {
            assessmentTypeCode = query.getAssessmentTypeCode();
            organizationType = query.getOrganizationType();
            organizationIds = query.getOrganizationIds();
            dimensionType = query.getDimensionType();
            completenessCodes = query.getCompletenessCodes();
            administrativeConditionCodes = query.getAdministrativeConditionCodes();
            genderCodes = query.getGenderCodes();
            ethnicityCodes = query.getEthnicityCodes();
            lepCodes = query.getLepCodes();
            elasCodes = query.getElasCodes();
            migrantStatusCodes = query.getMigrantStatusCodes();
            section504Codes = query.getSection504Codes();
            iepCodes = query.getIepCodes();
            economicDisadvantageCodes = query.getEconomicDisadvantageCodes();
            subgroupKey = query.getSubgroupKey();
            return this;
        }

        public B subgroupKey(final String subgroupKey) {
            this.subgroupKey = subgroupKey;
            return (B) this;
        }

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        public B organizationIds(final Set<Long> organizationIds) {
            this.organizationIds = organizationIds;
            return (B) this;
        }

        public B organizationType(final OrganizationType organizationType) {
            this.organizationType = organizationType;
            return (B) this;
        }

        public B dimensionType(final DimensionType dimensionType) {
            this.dimensionType = dimensionType;
            return (B) this;
        }

        public B completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return (B) this;
        }

        public B administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return (B) this;
        }

        public B genderCodes(final Set<String> genderCodes) {
            this.genderCodes = genderCodes;
            return (B) this;
        }

        public B ethnicityCodes(final Set<String> ethnicityCodes) {
            this.ethnicityCodes = ethnicityCodes;
            return (B) this;
        }

        public B lepCodes(final Set<String> lepCodes) {
            this.lepCodes = lepCodes;
            return (B) this;
        }

        public B elasCodes(final Set<String> elasCodes) {
            this.elasCodes = elasCodes;
            return (B) this;
        }

        public B migrantStatusCodes(final Set<String> migrantStatusCodes) {
            this.migrantStatusCodes = migrantStatusCodes;
            return (B) this;
        }

        public B section504Codes(final Set<String> section504Codes) {
            this.section504Codes = section504Codes;
            return (B) this;
        }

        public B iepCodes(final Set<String> iepCodes) {
            this.iepCodes = iepCodes;
            return (B) this;
        }

        public B economicDisadvantageCodes(final Set<String> economicDisadvantageCodes) {
            this.economicDisadvantageCodes = economicDisadvantageCodes;
            return (B) this;
        }
    }
}