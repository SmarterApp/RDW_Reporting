package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.reporting.common.model.AssessmentDescription;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Collection;
import java.util.Set;

import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padIntToSize;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padLongToSize;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.ELAS;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.EconomicDisadvantage;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.IEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.LEP;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.MigrantStatus;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Section504;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.security.PermissionScope.getScopeOrEmpty;

/**
 * This implementation is responsible for converting an instance of {@link OrganizationTypeQuery} into a {@link QueryWithReportTemplate}
 */
public abstract class OrganizationQueryWithReportTemplateProvider<Q extends OrganizationTypeQuery, A extends AssessmentDescription>
        extends OrganizationQueryReportTemplateProvider<Builder, QueryWithReportTemplate<A>, Q> {

    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";
    private static final String allSchoolsInDistrictsAddOn = "allSchoolsInDistricts";
    private static final String districtEmbargoAddOn = "districtEmbargo";
    private static final String stateEmbargoAddOn = "stateEmbargo";


    private final QueryProvider queryProvider;
    private final int organizationPartitionSize;

    private PermissionSource permissionSource;

    OrganizationQueryWithReportTemplateProvider(final Organization state,
                                                final int organizationPartitionSize,
                                                final QueryProvider queryProvider,
                                                final QueryProviderRepositoryHelper repositoryHelper,
                                                final PermissionSource permissionSource) {
        super(state, repositoryHelper);
        this.queryProvider = queryProvider;
        this.organizationPartitionSize = organizationPartitionSize;
        this.permissionSource = permissionSource;
    }

    protected abstract String getTemplateSql();

    @Override
    public Builder createBuilderWithState(final String assessmentTypeCode) {
        final Builder builder = super
                .createBuilderWithState(assessmentTypeCode)
                .addOn(stateAddOn);

        // apply embargo add-on for summatives
        if (assessmentTypeCode.equalsIgnoreCase(SUMMATIVE.code())) {
            builder.addOn(stateEmbargoAddOn)
                    .parameter("state_embargo_admin", getScopeOrEmpty(permissionSource.getPermissionsById(), EmbargoRead).isStatewide());
        }

        return builder;
    }

    @Override
    public Builder createBuilderWithAllDistricts(final String assessmentTypeCode) {
        final Builder builder = super
                .createBuilderWithAllDistricts(assessmentTypeCode)
                .addOn(allDistrictsAddOn);

        // apply embargo add-on for summatives
        if (assessmentTypeCode.equalsIgnoreCase(SUMMATIVE.code())) {
            addEmbargo(builder);
        }
        return builder;
    }

    @Override
    public Builder createBuilderWithDistrictIds(final String assessmentTypeCode, final Set<Long> districtIds) {
        final Builder builder = super
                .createBuilderWithDistrictIds(assessmentTypeCode, districtIds)
                .addOn(districtsAddOn)
                .parameter("district_ids", padLongToSize(districtIds, organizationPartitionSize));

        // apply embargo add-on for summatives
        if (assessmentTypeCode.equalsIgnoreCase(SUMMATIVE.code())) {
            addEmbargo(builder);
        }
        return builder;
    }

    @Override
    public Builder createBuilderWithAllSchoolsOfDistricts(final String assessmentTypeCode, final Set<Long> districtIds) {
        final Builder builder = super
                .createBuilderWithAllSchoolsOfDistricts(assessmentTypeCode, districtIds)
                .addOn(allSchoolsInDistrictsAddOn)
                .parameter("school_district_ids", padLongToSize(districtIds, organizationPartitionSize));

        // apply embargo add-on for summatives
        if (assessmentTypeCode.equalsIgnoreCase(SUMMATIVE.code())) {
            addEmbargo(builder);
        }
        return builder;
    }

    @Override
    public Builder createBuilderWithSchoolIds(final String assessmentTypeCode, final Set<Long> schoolIds) {
        final Builder builder = super
                .createBuilderWithSchoolIds(assessmentTypeCode, schoolIds)
                .addOn(schoolsAddOn)
                .parameter("school_ids", padLongToSize(schoolIds, organizationPartitionSize));

        // apply embargo add-on for summatives
        if (assessmentTypeCode.equalsIgnoreCase(SUMMATIVE.code())) {
            addEmbargo(builder);
        }
        return builder;
    }

    private void addEmbargo(final Builder builder) {
        final PermissionScope embargoScope = getScopeOrEmpty(permissionSource.getPermissionsById(), EmbargoRead);
        builder
                .addOn(districtEmbargoAddOn)
                .parameter("state_embargo_admin", embargoScope.isStatewide())
                .parameter("district_embargo_admin_ids", padLongToSize(embargoScope.getDistrictIds(), organizationPartitionSize));
    }

    @Override
    @SuppressWarnings("unchecked")
    public QueryWithReportTemplate<A> build(final Builder builder) {
        return builder.build(queryProvider, getTemplateSql());
    }

    @Override
    public Builder createBuilderInstance() {
        return QueryWithReportTemplate.builder();
    }

    Builder addFiltersAndDimension(final Builder queryBuilder, final Q query) {
        final DimensionType dimensionType = query.getDimensionType();
        queryBuilder.addOn(dimensionType.name());

        if (!query.getCompletenessCodes().isEmpty()) {
            queryBuilder
                    .addOn("completeness")
                    .parameter("completeness_ids",
                            padIntToSize(getRepositoryHelper().toCompletenessIds(query.getCompletenessCodes()),
                                    getRepositoryHelper().maxCompletenessCodes()));
        }

        if (!query.getAdministrativeConditionCodes().isEmpty()) {
            queryBuilder
                    .addOn("administration_condition")
                    .parameter("administration_condition_ids",
                            padIntToSize(getRepositoryHelper().toAdministrativeConditionIds(query.getAdministrativeConditionCodes()),
                                    getRepositoryHelper().maxAdministrativeConditions()));
        }

        final Set<Integer> genderIds = getRepositoryHelper().toGenderIds(query.getGenderCodes());
        final Set<Integer> ethnicityIds = getRepositoryHelper().toEthnicityIds(query.getEthnicityCodes());
        final Set<Integer> lepIds = getRepositoryHelper().toStrictBooleanIds(query.getLepCodes());
        final Set<Integer> elasIds = getRepositoryHelper().toElasIds(query.getElasCodes());
        final Set<Integer> migrantStatusIds = getRepositoryHelper().toBooleanIds(query.getMigrantStatusCodes());
        final Set<Integer> section504Ids = getRepositoryHelper().toBooleanIds(query.getSection504Codes());
        final Set<Integer> iepIds = getRepositoryHelper().toStrictBooleanIds(query.getIepCodes());
        final Set<Integer> economicDisadvantageIds = getRepositoryHelper().toStrictBooleanIds(query.getEconomicDisadvantageCodes());

        addFilter(queryBuilder, Gender, genderIds, dimensionType == Gender);
        addFilter(queryBuilder, Ethnicity, ethnicityIds, dimensionType == Ethnicity);
        addFilter(queryBuilder, LEP, lepIds, dimensionType == LEP);
        addFilter(queryBuilder, ELAS, elasIds, dimensionType == ELAS);
        addFilter(queryBuilder, MigrantStatus, migrantStatusIds, dimensionType == MigrantStatus);
        addFilter(queryBuilder, Section504, section504Ids, dimensionType == Section504);
        addFilter(queryBuilder, IEP, iepIds, dimensionType == IEP);
        addFilter(queryBuilder, EconomicDisadvantage, economicDisadvantageIds, dimensionType == EconomicDisadvantage);

        switch (dimensionType) {
            case Gender:
                addFilterParams(queryBuilder, dimensionType, genderIds);
                break;
            case Ethnicity:
                addFilterParams(queryBuilder, dimensionType, ethnicityIds);
                break;
            case LEP:
                addFilterParams(queryBuilder, dimensionType, lepIds);
                break;
            case ELAS:
                addFilterParams(queryBuilder, dimensionType, elasIds);
                break;
            case MigrantStatus:
                addFilterParams(queryBuilder, dimensionType, migrantStatusIds);
                break;
            case Section504:
                addFilterParams(queryBuilder, dimensionType, section504Ids);
                break;
            case IEP:
                addFilterParams(queryBuilder, dimensionType, iepIds);
                break;
            case EconomicDisadvantage:
                addFilterParams(queryBuilder, dimensionType, economicDisadvantageIds);
                break;
        }
        return queryBuilder;
    }

    private void addFilter(final Builder queryBuilder,
                           final DimensionType dimensionType,
                           final Collection<Integer> dimensionFilters,
                           boolean isFilterSameAsDimension) {
        if (!isFilterSameAsDimension && !dimensionFilters.isEmpty()) {
            queryBuilder.addOn(dimensionType.name() + "_filter");
            addFilterParams(queryBuilder, dimensionType, dimensionFilters);
        }
    }

    private void addFilterParams(final Builder queryBuilder,
                                 final DimensionType dimensionType,
                                 final Collection<Integer> dimensionFilters) {

        final Collection<Integer> paddedFiltersToMaxSize = padIntToSize(dimensionFilters, getRepositoryHelper().maxSize(dimensionType));
        switch (dimensionType) {
            case Gender:
                queryBuilder.parameter("all_genders", dimensionFilters.isEmpty())
                        .parameter("gender_ids", paddedFiltersToMaxSize);
                break;
            case Ethnicity:
                queryBuilder.parameter("all_ethnicities", dimensionFilters.isEmpty())
                        .parameter("ethnicity_ids", paddedFiltersToMaxSize);
                break;

            case LEP:
                queryBuilder.parameter("all_leps", dimensionFilters.isEmpty())
                        .parameter("lep_ids", paddedFiltersToMaxSize);
                break;

            case ELAS:
                queryBuilder.parameter("all_elas", dimensionFilters.isEmpty())
                        .parameter("elas_ids", paddedFiltersToMaxSize);
                break;

            case MigrantStatus:
                queryBuilder.parameter("all_migrant_statuses", dimensionFilters.isEmpty())
                        .parameter("migrant_status_ids", paddedFiltersToMaxSize);
                break;
            case Section504:
                queryBuilder.parameter("all_section504s", dimensionFilters.isEmpty())
                        .parameter("section504_ids", paddedFiltersToMaxSize);
                break;

            case IEP:
                queryBuilder.parameter("all_ieps", dimensionFilters.isEmpty())
                        .parameter("iep_ids", paddedFiltersToMaxSize);
                break;

            case EconomicDisadvantage:
                queryBuilder.parameter("all_economic_disadvantages", dimensionFilters.isEmpty())
                        .parameter("economic_disadvantage_ids", paddedFiltersToMaxSize);
                break;
        }
    }
}