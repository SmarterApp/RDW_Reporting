package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.model.AggregateQueryType.BasicCustomAggregate;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Default implementation of an {@link CustomAggregateService} backed by a repository
 */
@Service
class DefaultBasicAggregateService extends AbstractCustomAggregateService implements CustomAggregateService {

    @Autowired
    DefaultBasicAggregateService(
            final CustomAggregateReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportSettings settings,
            final QueryProviderRepositoryHelper repositoryHelper,
            final TaskExecutor threadPoolTaskExecutor) {
        super(repository, authorizationService, settings, repositoryHelper, threadPoolTaskExecutor);
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return query.getQueryType().equals(BasicCustomAggregate);
    }

    @Override
    protected Collection<AggregateReportQueryDescription> toOrganizationTypeQueries(final CustomAggregateReportQuery reportQuery) {
        final List<AggregateReportQueryDescription> queries = newArrayList();

        // some attributes are the same for all the queries
        final AggregateReportQuery.Builder commonQueryBuilder = toQueryBuilderWithCommonAttributes(reportQuery, reportQuery.getStudentFilters());

        //each pair of organization/dimension is represented by a separate CustomAggregateReportQuery
        for (final String subgroup : reportQuery.getSubgroups().keySet()) {
            final AggregateReportQuery commonQuery = commonQueryBuilder.dimensionType(DimensionType.caseInsensitiveValue(subgroup)).build();

            // for each level of organization add one or more builders to the result
            appendState(reportQuery, queries, commonQuery);
            appendDistricts(reportQuery, queries, commonQuery);
            appendSchools(reportQuery, queries, commonQuery);
        }
        return queries;
    }

    private static CustomAggregateReportQuery ensureDimension(final CustomAggregateReportQuery query, final DimensionType dimension) {
        return query.getSubgroups().keySet().contains(dimension.code()) ? query : query.copy().subgroup(Overall).build();
    }

    @Override
    protected CustomAggregateReportQuery checkIsValid(final CustomAggregateReportQuery query) {
        return super.checkIsValid(ensureDimension(query, Overall));
    }
}