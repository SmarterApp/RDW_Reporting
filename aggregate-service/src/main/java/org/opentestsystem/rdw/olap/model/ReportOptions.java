package org.opentestsystem.rdw.olap.model;

import com.google.common.collect.ImmutableSet;

import java.util.Set;

public class ReportOptions {

    private Set<CodedEntity> assessmentTypes;
    private Set<CodedEntity> subjects;
    private Set<CodedEntity> grades;
    private Set<Integer> schoolYears;
    private Set<CodedEntity> genders;
    private Set<CodedEntity> ethnicities;
    private Set<CodedEntity> administrationConditions;
    private Set<CodedEntity> completenesses;

    public Set<CodedEntity> getAssessmentTypes() {
        return assessmentTypes;
    }

    public Set<CodedEntity> getSubjects() {
        return subjects;
    }

    public Set<CodedEntity> getGrades() {
        return grades;
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears;
    }

    public Set<CodedEntity> getGenders() {
        return genders;
    }

    public Set<CodedEntity> getEthnicities() {
        return ethnicities;
    }

    public Set<CodedEntity> getAdministrationConditions() {
        return administrationConditions;
    }

    public Set<CodedEntity> getCompletenesses() {
        return completenesses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private Set<CodedEntity> assessmentTypes;
        private Set<CodedEntity> subjects;
        private Set<CodedEntity> grades;
        private Set<Integer> schoolYears;
        private Set<CodedEntity> genders;
        private Set<CodedEntity> ethnicities;
        private Set<CodedEntity> administrationConditions;
        private Set<CodedEntity> completenesses;


        public Builder assessmentTypes(final Set<CodedEntity> assessmentTypes) {
            this.assessmentTypes = assessmentTypes;
            return this;
        }

        public Builder subjects(final Set<CodedEntity> subjects) {
            this.subjects = subjects;
            return this;
        }

        public Builder grades(final Set<CodedEntity> grades) {
            this.grades = grades;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder genders(final Set<CodedEntity> genders) {
            this.genders = genders;
            return this;
        }

        public Builder ethnicities(final Set<CodedEntity> ethnicities) {
            this.ethnicities = ethnicities;
            return this;
        }

        public Builder administrationConditions(final Set<CodedEntity> administrationConditions) {
            this.administrationConditions = administrationConditions;
            return this;
        }

        public Builder completenesses(final Set<CodedEntity> completenesses) {
            this.completenesses = completenesses;
            return this;
        }

        public ReportOptions build() {
            final ReportOptions options = new ReportOptions();
            options.assessmentTypes = assessmentTypes != null ? ImmutableSet.copyOf(assessmentTypes) : ImmutableSet.of();
            options.subjects = subjects != null ? ImmutableSet.copyOf(subjects) : ImmutableSet.of();
            options.grades = grades != null ? ImmutableSet.copyOf(grades) : ImmutableSet.of();
            options.schoolYears = schoolYears != null ? ImmutableSet.copyOf(schoolYears) : ImmutableSet.of();
            options.genders = genders != null ? ImmutableSet.copyOf(genders) : ImmutableSet.of();
            options.ethnicities = ethnicities != null ? ImmutableSet.copyOf(ethnicities) : ImmutableSet.of();
            options.administrationConditions = administrationConditions != null ? ImmutableSet.copyOf(administrationConditions) : ImmutableSet.of();
            options.completenesses = completenesses != null ? ImmutableSet.copyOf(completenesses) : ImmutableSet.of();
            return options;
        }
    }

}
