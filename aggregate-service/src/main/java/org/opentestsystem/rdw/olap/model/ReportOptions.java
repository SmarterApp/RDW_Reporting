package org.opentestsystem.rdw.olap.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Organization;

import java.util.List;

/**
 * Relays the options that may be included in an aggregate report request
 */
public class ReportOptions {

    private List<String> assessmentGrades;
    private List<String> assessmentTypes;
    private List<String> completenesses;
    private Organization defaultOrganization;
    private List<DimensionType> dimensionTypes;
    private List<String> economicDisadvantages;
    private List<String> ethnicities;
    private List<String> genders;
    private List<String> individualEducationPlans;
    private List<String> interimAdministrationConditions;
    private List<String> limitedEnglishProficiencies;
    private List<String> englishLanguageAcquisitionStatuses;
    private List<String> migrantStatuses;
    private List<String> section504s;
    private List<Integer> schoolYears;
    private List<String> subjects;
    private List<String> summativeAdministrationConditions;
    private boolean statewideReporter;

    public static Builder builder() {
        return new Builder();
    }

    public List<String> getAssessmentGrades() {
        return assessmentGrades;
    }

    public List<String> getAssessmentTypes() {
        return assessmentTypes;
    }

    public List<String> getCompletenesses() {
        return completenesses;
    }

    public Organization getDefaultOrganization() {
        return defaultOrganization;
    }

    public List<DimensionType> getDimensionTypes() {
        return dimensionTypes;
    }

    public List<String> getEconomicDisadvantages() {
        return economicDisadvantages;
    }

    public List<String> getEthnicities() {
        return ethnicities;
    }

    public List<String> getGenders() {
        return genders;
    }

    public List<String> getIndividualEducationPlans() {
        return individualEducationPlans;
    }

    public List<String> getInterimAdministrationConditions() {
        return interimAdministrationConditions;
    }

    public List<String> getLimitedEnglishProficiencies() {
        return limitedEnglishProficiencies;
    }

    public List<String> getEnglishLanguageAcquisitionStatuses() {
        return englishLanguageAcquisitionStatuses;
    }

    public List<String> getMigrantStatuses() {
        return migrantStatuses;
    }

    public List<String> getSection504s() {
        return section504s;
    }

    public List<Integer> getSchoolYears() {
        return schoolYears;
    }

    public List<String> getSubjects() {
        return subjects;
    }

    public List<String> getSummativeAdministrationConditions() {
        return summativeAdministrationConditions;
    }

    public boolean isStatewideReporter() {
        return statewideReporter;
    }

    public static class Builder {

        private List<String> assessmentGrades;
        private List<String> assessmentTypes;
        private List<String> completenesses;
        private List<DimensionType> dimensionTypes;
        private List<String> economicDisadvantages;
        private List<String> ethnicities;
        private List<String> genders;
        private List<String> individualEducationPlans;
        private List<String> interimAdministrationConditions;
        private List<String> limitedEnglishProficiencies;
        private List<String> englishLanguageAcquisitionStatuses;
        private List<String> migrantStatuses;
        private List<String> section504s;
        private List<Integer> schoolYears;
        private List<String> subjects;
        private List<String> summativeAdministrationConditions;
        private boolean statewideReporter;
        private Organization defaultOrganization;

        public Builder assessmentGrades(final List<String> assessmentGrades) {
            this.assessmentGrades = assessmentGrades;
            return this;
        }

        public Builder assessmentTypes(final List<String> assessmentTypes) {
            this.assessmentTypes = assessmentTypes;
            return this;
        }

        public Builder completenesses(final List<String> completenesses) {
            this.completenesses = completenesses;
            return this;
        }

        public Builder defaultOrganization(final Organization defaultOrganization) {
            this.defaultOrganization = defaultOrganization;
            return this;
        }

        public Builder dimensionTypes(final List<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return this;
        }

        public Builder economicDisadvantages(final List<String> economicDisadvantages) {
            this.economicDisadvantages = economicDisadvantages;
            return this;
        }

        public Builder ethnicities(final List<String> ethnicities) {
            this.ethnicities = ethnicities;
            return this;
        }

        public Builder genders(final List<String> genders) {
            this.genders = genders;
            return this;
        }

        public Builder individualEducationPlans(final List<String> individualEducationPlans) {
            this.individualEducationPlans = individualEducationPlans;
            return this;
        }

        public Builder interimAdministrationConditions(final List<String> interimAdministrationConditions) {
            this.interimAdministrationConditions = interimAdministrationConditions;
            return this;
        }

        public Builder limitedEnglishProficiencies(final List<String> limitedEnglishProficiencies) {
            this.limitedEnglishProficiencies = limitedEnglishProficiencies;
            return this;
        }

        public Builder englishLanguageAcquisitionStatuses(final List<String> englishLanguageAcquisitionStatuses) {
            this.englishLanguageAcquisitionStatuses = englishLanguageAcquisitionStatuses;
            return this;
        }

        public Builder migrantStatuses(final List<String> migrantStatuses) {
            this.migrantStatuses = migrantStatuses;
            return this;
        }

        public Builder section504s(final List<String> section504s) {
            this.section504s = section504s;
            return this;
        }

        public Builder schoolYears(final List<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder subjects(final List<String> subjects) {
            this.subjects = subjects;
            return this;
        }

        public Builder summativeAdministrationConditions(final List<String> summativeAdministrationConditions) {
            this.summativeAdministrationConditions = summativeAdministrationConditions;
            return this;
        }

        public Builder statewideReporter(final boolean statewideReporter) {
            this.statewideReporter = statewideReporter;
            return this;
        }

        public Builder copy(final ReportOptions options) {
            this.assessmentGrades = options.assessmentGrades;
            this.assessmentTypes = options.assessmentTypes;
            this.completenesses = options.completenesses;
            this.defaultOrganization = options.defaultOrganization;
            this.dimensionTypes = options.dimensionTypes;
            this.economicDisadvantages = options.economicDisadvantages;
            this.ethnicities = options.ethnicities;
            this.genders = options.genders;
            this.individualEducationPlans = options.individualEducationPlans;
            this.interimAdministrationConditions = options.interimAdministrationConditions;
            this.limitedEnglishProficiencies = options.limitedEnglishProficiencies;
            this.englishLanguageAcquisitionStatuses = options.englishLanguageAcquisitionStatuses;
            this.migrantStatuses = options.migrantStatuses;
            this.section504s = options.section504s;
            this.schoolYears = options.schoolYears;
            this.subjects = options.subjects;
            this.summativeAdministrationConditions = options.summativeAdministrationConditions;
            this.statewideReporter = options.statewideReporter;
            return this;
        }

        public ReportOptions build() {
            final ReportOptions options = new ReportOptions();
            options.assessmentGrades = createImmutableList(assessmentGrades);
            options.assessmentTypes = createImmutableList(assessmentTypes);
            options.completenesses = createImmutableList(completenesses);
            options.defaultOrganization = defaultOrganization;
            options.dimensionTypes = createImmutableList(dimensionTypes);
            options.economicDisadvantages = createImmutableList(economicDisadvantages);
            options.ethnicities = createImmutableList(ethnicities);
            options.genders = createImmutableList(genders);
            options.individualEducationPlans = createImmutableList(individualEducationPlans);
            options.interimAdministrationConditions = createImmutableList(interimAdministrationConditions);
            options.limitedEnglishProficiencies = createImmutableList(limitedEnglishProficiencies);
            options.englishLanguageAcquisitionStatuses = createImmutableList(englishLanguageAcquisitionStatuses);
            options.migrantStatuses = createImmutableList(migrantStatuses);
            options.section504s = createImmutableList(section504s);
            options.schoolYears = createImmutableList(schoolYears);
            options.subjects = createImmutableList(subjects);
            options.summativeAdministrationConditions = createImmutableList(summativeAdministrationConditions);
            options.statewideReporter = statewideReporter;
            return options;
        }

        /**
         * Creates an immutable list from the given values.
         * If the value is null it returns an empty immutable list.
         *
         * @param values the values to create the list from
         * @param <T>    the type of values in the list
         * @return an immutable list copy of the values or an empty list if the values are null
         */
        private <T> ImmutableList<T> createImmutableList(final Iterable<T> values) {
            return values != null ? ImmutableList.copyOf(values) : ImmutableList.of();
        }

    }

}
