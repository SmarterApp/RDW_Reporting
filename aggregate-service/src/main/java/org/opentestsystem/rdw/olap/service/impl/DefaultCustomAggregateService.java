package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.AggregateReport;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Default implementation of an {@link CustomAggregateService} backed by a repository
 */
@Service
class DefaultCustomAggregateService implements CustomAggregateService {

    private final CustomAggregateReportRepository repository;
    private final AuthorizationService authorizationService;
    private final Set<String> stateAggregateAssessmentTypes;

    @Autowired
    DefaultCustomAggregateService(
            final CustomAggregateReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportSettings settings) {
        this.repository = repository;
        this.authorizationService = authorizationService;
        stateAggregateAssessmentTypes = settings.getStateAggregateAssessmentTypes();
    }

    @Override
    public AggregateReport findByQuery(final User user, final ReportQuery query) {
        authorizationService.checkAuthorization(user, query);
        return repository.findByQuery(user, checkIsValid(ensureDimension(query, Overall)));
    }

    @Override
    public int estimateReportRowCount(final User user, final ReportQuery query) {
        authorizationService.checkAuthorization(user, query);
        return repository.estimateReportRowCount(checkIsValid(ensureDimension(query, Overall)));
    }

    private static ReportQuery ensureDimension(final ReportQuery query, final DimensionType dimension) {
        return query.contains(dimension) ? query : query.copy().dimensionType(Overall).build();
    }

    private ReportQuery checkIsValid(final ReportQuery query) {
        checkArgument(!query.getSubjectCodes().isEmpty(), "report query is missing subjects");
        checkArgument(!query.getAssessmentGradeCodes().isEmpty(), "report query is missing asmt grades");
        checkArgument(!query.getSchoolYears().isEmpty(), "report query is missing school years");
        checkArgument(!query.getDimensionTypes().isEmpty(), "report query is missing dimensionTypes");
        checkArgument(!(!query.isIncludeState() && !query.isIncludeAllDistricts() && query.getDistrictIds().isEmpty() && query.getSchoolIds().isEmpty()), "report query is missing organization");
        checkArgument(!IAB.code().equals(query.getAssessmentTypeCode()), "custom aggregate report for IAB is not supported yet");
        if (query.isIncludeState()) checkArgument(stateAggregateAssessmentTypes.contains(query.getAssessmentTypeCode()), "report query cannot include state results for " + query.getAssessmentTypeCode() + " assessment types");
        return query;
    }
}