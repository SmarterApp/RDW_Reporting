package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.CustomAggregateService;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Default implementation of an {@link CustomAggregateService} backed by a repository
 */
@Service
class DefaultCustomAggregateService implements CustomAggregateService {

    private final CustomAggregateReportRepository repository;
    private final AuthorizationService authorizationService;

    @Autowired
    DefaultCustomAggregateService(
            final CustomAggregateReportRepository repository,
            final AuthorizationService authorizationService) {
        this.repository = repository;
        this.authorizationService = authorizationService;
    }

    @Override
    public List<ReportRow> findByQuery(final User user, final ReportQuery query) {
        authorizationService.checkAuthorization(user, query);
        checkIsValid(query);
        return repository.findByQuery(user, ensureDimension(query, Overall));
    }

    @Override
    public int estimateReportRowCount(final User user, final ReportQuery query) {
        authorizationService.checkAuthorization(user, query);
        checkIsValid(query);
        return repository.estimateReportRowCount(ensureDimension(query, Overall));
    }

    private ReportQuery ensureDimension(final ReportQuery query, final DimensionType dimension) {
        return query.contains(dimension) ? query : query.copy().dimensionType(Overall).build();
    }

    private void checkIsValid(final ReportQuery query) {
        checkArgument(!query.getSubjectCodes().isEmpty(), "report query is missing subjects");
        checkArgument(!query.getAssessmentGradeCodes().isEmpty(), "report query is missing asmt grades");
        checkArgument(!query.getSchoolYears().isEmpty(), "report query is missing school years");
        checkArgument(!query.getDimensionTypes().isEmpty(), "report query is missing dimensionTypes");
        checkArgument(!(!query.isIncludeState() && !query.isIncludeAllDistricts() && query.getDistrictIds().isEmpty() && query.getSchoolIds().isEmpty()), "report query is missing organization");
        checkArgument(!(query.isIncludeState() && !SUMMATIVE.code().equals(query.getAssessmentTypeCode())), "report query cannot include state results for non-summative assessment types");

        checkArgument(!IAB.code().equals(query.getAssessmentTypeCode()), "custom aggregate report for IAB is not supported yet");
    }

}