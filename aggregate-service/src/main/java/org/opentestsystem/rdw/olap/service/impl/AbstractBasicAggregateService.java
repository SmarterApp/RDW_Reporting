package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.AggregateRowReportResult;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;

import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Overall;

/**
 * Common functionality for implementations of {@link AbstractCustomAggregateService} for {@link BasicAggregateReportQuery}
 */
@SuppressWarnings("unchecked")
abstract class AbstractBasicAggregateService<T extends AggregateRow,
        R extends AggregateRowReportResult<T>,
        Q extends BasicAggregateReportQuery,
        B extends AggregateRowReportResult.Builder,
        O extends OrganizationTypeQuery,
        V extends OrganizationTypeQuery.Builder>
        extends AbstractCustomAggregateService<T, R, Q, B, O, V> {

    @Autowired
    AbstractBasicAggregateService(
            final ReportRepository<T, R, O> repository,
            final AuthorizationService authorizationService,
            final AggregateReportSettings settings,
            final AbstractBasicQueryAdapter<Q, O, V> queryAdapter,
            final TaskExecutor threadPoolTaskExecutor) {
        super(repository, queryAdapter, authorizationService, settings, threadPoolTaskExecutor);
    }

    private Q ensureDimension(final Q query, final DimensionType dimension) {
        return query.getDimensionTypes().contains(dimension) ? query : (Q) ((BasicAggregateReportQuery.Builder) query.copy()).dimensionType(Overall).build();
    }

    @Override
    protected Q checkIsValid(final Q query) {
        return super.checkIsValid(ensureDimension(query, Overall));
    }
}