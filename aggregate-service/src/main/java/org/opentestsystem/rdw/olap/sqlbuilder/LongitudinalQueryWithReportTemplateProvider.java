package org.opentestsystem.rdw.olap.sqlbuilder;

import com.google.common.collect.ImmutableList;
import com.sun.tools.javac.util.Pair;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate.Builder;
import org.opentestsystem.rdw.reporting.common.model.AssessmentDescription;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;

import java.util.Set;

/**
 * This implementation is responsible for converting {@link LongitudinalReportQuery} into a {@link QueryWithReportTemplate}
 */

public class LongitudinalQueryWithReportTemplateProvider extends OrganizationQueryWithReportTemplateProvider<LongitudinalReportQuery, AssessmentDescription> {

    private static final String longitudinalTemplateSql = "longitudinal";
    private final String highSchoolGradeCode;

    public LongitudinalQueryWithReportTemplateProvider(final Organization state,
                                                       final int organizationPartitionSize,
                                                       final QueryProvider queryProvider,
                                                       final QueryProviderRepositoryHelper repositoryHelper,
                                                       final PermissionSource permissionSource,
                                                       final String highSchoolGradeCode) {
        super(state, organizationPartitionSize, queryProvider, repositoryHelper, permissionSource);
        this.highSchoolGradeCode = highSchoolGradeCode;
    }

    @Override
    public Builder createBuilderWithCommonAttributes(final LongitudinalReportQuery query) {
        final Set<Integer> subjectIds = getRepositoryHelper().toSubjectIds(ImmutableList.of(query.getSubjectCode()));
        if (subjectIds.size() != 1) throw new IllegalStateException("unknown subject code:" + query.getSubjectCode());

        final Builder builder = addFiltersAndDimension(super.createBuilderWithCommonAttributes(query), query)
                .parameter("subject_id", subjectIds.iterator().next());

        for (final CodedEntity assessmentGradeCode : getRepositoryHelper().findAllAssessmentGrades()) {
            for (final Pair<String, Integer> gradeYearPair : query.getGradeYearPairs()) {
                if (gradeYearPair.fst.equals(assessmentGradeCode.getCode())) {
                    if (assessmentGradeCode.getCode().equals(highSchoolGradeCode)) {
                        builder.parameter("school_year_grade_hs", gradeYearPair.snd);
                    } else {
                        builder.parameter("school_year_grade_" + assessmentGradeCode.getCode(), gradeYearPair.snd);
                    }
                }
            }
        }
        return builder;
    }

    @Override
    protected String getTemplateSql() {
        return longitudinalTemplateSql;
    }
}