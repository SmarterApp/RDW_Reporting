package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.AggregateReportQueryDescription;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This class uses "template method" pattern for implementations of {@link AbstractQueryAdapter} that
 * convert instances of {@link @BasicAggregateReportQuery}
 */
@SuppressWarnings("unchecked")
abstract class AbstractBasicQueryAdapter<Q extends BasicAggregateReportQuery, T extends OrganizationTypeQuery, B extends OrganizationTypeQuery.Builder>
        extends AbstractQueryAdapter<Q, T, B> {

    AbstractBasicQueryAdapter(final QueryProviderRepositoryHelper repositoryHelper) {
        super(repositoryHelper);
    }

    @Override
    public Collection<AggregateReportQueryDescription<T>> convert(final Q reportQueryToCovert) {
        final List<AggregateReportQueryDescription<T>> queries = newArrayList();

        // some attributes are the same for all the queries
        final B commonQueryBuilder = toOrganizationQueryBuilderWithCommonAttributes(reportQueryToCovert, reportQueryToCovert.getStudentFilters());

        //convert queries to a single subject query if needed
        for (final Q reportQuery : unwrapToSupportedQueries(reportQueryToCovert, commonQueryBuilder.isSupportMultipleSubjects())) {
            //each pair of organization/dimension is represented by a separate AggregateReportQuery
            for (final DimensionType dimension : reportQuery.getDimensionTypes()) {
                final T commonQuery = (T) commonQueryBuilder.dimensionType(dimension).build();

                // for each level of organization add one or more builders to the result
                appendState(reportQuery, queries, commonQuery);
                appendDistricts(reportQuery, queries, commonQuery);
                appendSchools(reportQuery, queries, commonQuery);
            }
        }
        return queries;
    }
}
