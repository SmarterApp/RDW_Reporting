package org.opentestsystem.rdw.olap.model;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Objects;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Represents query parameters for the Longitudinal repository.
 */
@SuppressWarnings("unchecked")
public class LongitudinalReportQuery extends OrganizationTypeQuery {

    private List<YearGradePair> yearGradePairs;
    private String subjectCode;

    @Override
    public Builder copy() {
        return builder().copy(this);
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public List<YearGradePair> getYearGradePairs() {
        return yearGradePairs == null ? newArrayList() : newArrayList(yearGradePairs);
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean contains(@NotNull final String subjectCode, @NotNull final String asmtGradeCode, final int schoolYear) {
        return yearGradePairs.contains(new YearGradePair(schoolYear, asmtGradeCode)) && this.subjectCode.equals(subjectCode);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof LongitudinalReportQuery)) return false;
        final LongitudinalReportQuery that = (LongitudinalReportQuery) o;
        return super.equals(that)
                && Objects.equals(subjectCode, that.subjectCode)
                && Objects.equals(yearGradePairs, that.yearGradePairs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), subjectCode, yearGradePairs);
    }

    public static class Builder extends OrganizationTypeQuery.Builder<Builder, LongitudinalReportQuery> {
        private List<YearGradePair> yearGradePairs;
        private String subjectCode;

        @Override
        LongitudinalReportQuery createInstance() {
            return new LongitudinalReportQuery();
        }

        public LongitudinalReportQuery build() {
            final LongitudinalReportQuery query = super.build();
            query.subjectCode = subjectCode;
            query.yearGradePairs = yearGradePairs;
            return query;
        }

        public Builder copy(final LongitudinalReportQuery query) {
            super.copy(query);
            subjectCode = query.getSubjectCode();
            yearGradePairs = query.getYearGradePairs();
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder gradeYearPairs(final List<YearGradePair> yearGradePairs) {
            this.yearGradePairs = yearGradePairs;
            return this;
        }
    }
}