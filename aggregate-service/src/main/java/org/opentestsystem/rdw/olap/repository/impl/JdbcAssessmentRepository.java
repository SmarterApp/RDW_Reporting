package org.opentestsystem.rdw.olap.repository.impl;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.util.List;
import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;
import org.opentestsystem.rdw.olap.model.AggregateServiceCache;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.repository.AssessmentRepository;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
class JdbcAssessmentRepository implements AssessmentRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.assessment.findAll}")
    private String findAllQuery;

    JdbcAssessmentRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @TenantCacheable(value = AggregateServiceCache.Assessments)
    @Override
    public List<Assessment> findAll() {
        return template.query(
                findAllQuery,
                (ResultSet row, int index) -> {
                    final List<Integer> cutPoints = newArrayList();
                    cutPoints.add(row.getInt("min_score"));
                    cutPoints.add(getNullable(row, row.getInt("cut_point_1")));
                    cutPoints.add(getNullable(row, row.getInt("cut_point_2")));
                    cutPoints.add(getNullable(row, row.getInt("cut_point_3")));
                    cutPoints.add(getNullable(row, row.getInt("cut_point_4")));
                    cutPoints.add(getNullable(row, row.getInt("cut_point_5")));
                    cutPoints.add(row.getInt("max_score"));
                    return Assessment.builder()
                            .id(row.getInt("id"))
                            .name(row.getString("name"))
                            .label(row.getString("label"))
                            .typeCode(row.getString("type_code"))
                            .subjectCode(row.getString("subject_code"))
                            .gradeCode(row.getString("grade_code"))
                            .gradeSequence(row.getInt("grade_sequence"))
                            .schoolYear(row.getInt("school_year"))
                            .cutPoints(cutPoints)
                            .build();
                }
        );
    }
}
