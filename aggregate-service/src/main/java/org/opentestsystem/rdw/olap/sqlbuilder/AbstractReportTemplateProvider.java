package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.AggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.BuildableTemplate;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;


/**
 * This class defines the steps/flow for converting any instance of {@link OrganizationTypeQuery}
 * into an instance of {@link BuildableTemplate}
 */
@SuppressWarnings("unchecked")
public abstract class AbstractReportTemplateProvider
        <B extends BuildableTemplate.Builder, T extends BuildableTemplate, Q extends OrganizationTypeQuery>
        implements ReportTemplateProvider<T, Q> {

    /**
     * A SQL is assembled by combining SQL snippets from custom-aggregate-report-template.sql.yml.
     * <p>
     * There is a common template with the parameters shared by all queries that gets decorated with
     * the organization level snippets, as well as a dimension and filters.
     * <p>
     *
     * @param query                   the {@link AggregateOrganizationQuery} for the SQL
     * @param groupByOrganizationType the {@link OrganizationType} to group the data by, this defined the organization snippet to include
     */
    @Override
    public T toQuery(final Q query, final OrganizationType groupByOrganizationType) {
        return build((B) createOrganizationBuilder(query, groupByOrganizationType)
                .merge(createBuilderWithCommonAttributes(query)));
    }

    private B createOrganizationBuilder(final Q query, final OrganizationType groupByOrganizationType) {

        B organizationBuilder = null;

        switch (groupByOrganizationType) {
            case State:
                organizationBuilder = createBuilderWithState(query.getAssessmentTypeCode());
                break;
            case School:
                if (query.getOrganizationType() == District) {
                    organizationBuilder = createBuilderWithAllSchoolsOfDistricts(query.getAssessmentTypeCode(), query.getOrganizationIds());
                } else if (query.getOrganizationType() == OrganizationType.School) {
                    organizationBuilder = createBuilderWithSchoolIds(query.getAssessmentTypeCode(), query.getOrganizationIds());
                }
                break;
            case District:
                if (query.getOrganizationType() == State) {
                    organizationBuilder = createBuilderWithAllDistricts(query.getAssessmentTypeCode());
                } else if (query.getOrganizationType() == OrganizationType.District) {
                    organizationBuilder = createBuilderWithDistrictIds(query.getAssessmentTypeCode(), query.getOrganizationIds());
                }
                break;
        }

        if (organizationBuilder == null) throw new IllegalArgumentException("unsupported groupByOrganizationType and query organization type for the custom aggregate query");

        return organizationBuilder;
    }

    protected abstract B createBuilderInstance();

    protected abstract B createBuilderWithCommonAttributes(Q query);

    // each method below maps to a SQL snippet in the custom-aggregate-report-template.sql.yml
    // they all provide a new instance of a builder initialized with the named level of organization related parameters
    protected abstract B createBuilderWithState(String assessmentTypeCode);

    protected abstract B createBuilderWithAllDistricts(String assessmentTypeCode);

    protected abstract B createBuilderWithDistrictIds(String assessmentTypeCode, Set<Long> districtIds);

    protected abstract B createBuilderWithAllSchoolsOfDistricts(String assessmentTypeCode, Set<Long> districtIds);

    protected abstract B createBuilderWithSchoolIds(String assessmentTypeCode, Set<Long> schoolIds);

    protected abstract T build(final B builder);

}
