package org.opentestsystem.rdw.olap;

import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.actuate.info.InfoContributor;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.integration.config.GlobalChannelInterceptor;

import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.messaging.TenantChannelInterceptor;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestResolver;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.olap.stream.AggregateRequestProcessor;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.jackson.ReportModule;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantMessageRequestResolver;
import org.opentestsystem.rdw.reporting.common.service.impl.DefaultUserStudentFieldService;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.stream.DefaultMessageSecurityService;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtWebSecurityConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

import static org.springframework.util.StringUtils.isEmpty;

@Configuration
@Import({
        ArchiveServiceConfiguration.class,
        DefaultUserStudentFieldService.class,
        JwtWebSecurityConfiguration.class,
        QueryProvider.class,
        SecurityParameterProvider.class,
        SqlBuilderConfig.class,
        StatusConfiguration.class,
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        YamlPropertiesConfigurator.class,
        AggregateReportingConfiguration.class
})
@EnableBinding(AggregateRequestProcessor.class)
@EnableConfigurationProperties
public class ApplicationConfiguration {

    @Bean
    public ReportingTenantIdResolver tenantIdResolver() {
        return new ReportingTenantIdResolver();
    }

    @Bean
    @ConfigurationProperties("reporting")
    @RefreshScope
    public ReportingSystemSettings reportingSystemSettings() {
        return new ReportingSystemSettings();
    }

    @Bean
    @RefreshScope
    ReportingSystemPropertiesResolver reportingSystemPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                        ReportingSystemSettings reportingSystemSettings) {
        return new ReportingSystemPropertiesResolver(tenantKeyResolver, reportingSystemSettings);
    }

    @Bean
    @ConfigurationProperties("tenantProperties")
    @RefreshScope
    public TenantProperties tenantProperties() {
        return new TenantProperties();
    }

    @Bean
    public TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                               TenantIdResolver tenantIdResolver) {
        return new TenantKeyResolver(tenantProperties, tenantIdResolver);
    }

    @Bean
    public MessageSource messageSource(final ResourceLoader resourceLoader,
                                       @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties systemSettings) {

        final ResourceBundleMessageSource baseMessages = new ResourceBundleMessageSource();
        baseMessages.setBasenames("messages");
        baseMessages.setDefaultEncoding("UTF-8");

        if (isEmpty(systemSettings.getTranslationLocation())) {
            return baseMessages;
        }

        final ReloadableResourceBundleMessageSource configMessages = new ReloadableResourceBundleMessageSource();
        configMessages.setResourceLoader(resourceLoader);
        configMessages.setBasename(systemSettings.getTranslationLocation() + "messages");
        configMessages.setParentMessageSource(baseMessages);
        return configMessages;
    }

    @Bean
    public MessageSecurityService messageSecurityService(final JwtService jwtService) {
        return new DefaultMessageSecurityService(jwtService);
    }

    @Bean
    public Jackson2ObjectMapperBuilderCustomizer customizeObjectMapper() {
        return builder -> builder
                .failOnUnknownProperties(false)
                .modulesToInstall(new GuavaModule(), new ReportModule());
    }

    @Bean
    public TenantMessageRequestResolver tenantMessageRequestResolver(MessageSecurityService messageSecurityService) {
        return new ReportingTenantMessageRequestResolver(messageSecurityService);
    }

    @Bean
    @GlobalChannelInterceptor(patterns = {"Report*", "Aggregate*", "UserReport*"})
    public TenantChannelInterceptor getTenantChannelInterceptor(TenantMessageRequestResolver getTenantMessageRequestResolver) {
        return new TenantChannelInterceptor(getTenantMessageRequestResolver);
    }

    @Bean
    public InfoContributor tenantConfigurationStatusInfoContributor(TenantProperties tenantProperties,
                                                                    DataSourceElementsProperties dataSourceElementsProperties,
                                                                    ReportingSystemSettings reportingSystemSettings,
                                                                    AggregateReportingPropertiesRoot aggregateReportingPropertiesRoot) {
        return builder -> {
            //TODO: using the underlying @ConfigurationProperties name for the key, it might be better rename the
            // beans to be closer to the configuration
            builder.withDetail("tenantProperties", tenantProperties.getStatus());
            builder.withDetail("reporting", reportingSystemSettings.getStatus());
            builder.withDetail("datasources.olap_ro", dataSourceElementsProperties.getStatus());
            builder.withDetail("aggregate-reporting", aggregateReportingPropertiesRoot.getStatus());
        };
    }
}
