package org.opentestsystem.rdw.olap;

import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.opentestsystem.rdw.archive.ArchiveConfiguration;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.archive.ArchiveServiceFactory;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.multitenant.messaging.TenantChannelInterceptor;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestDefaultResolver;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestResolver;
import org.opentestsystem.rdw.olap.stream.AggregateRequestProcessor;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.jackson.ReportModule;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.service.impl.DefaultUserStudentFieldService;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.SqlBuilderConfig;
import org.opentestsystem.rdw.reporting.common.stream.DefaultMessageSecurityService;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.multitenant.TenantWebMvcConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtWebSecurityConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.core.env.Environment;
import org.springframework.core.io.ResourceLoader;
import org.springframework.integration.config.GlobalChannelInterceptor;
import org.springframework.messaging.Message;

import static org.opentestsystem.rdw.multitenant.TenantContextHolder.DEFAULT_TENANT_ID;
import static org.springframework.util.StringUtils.isEmpty;

@Configuration
@Import({
        ArchiveConfiguration.class,
        DefaultUserStudentFieldService.class,
        JwtWebSecurityConfiguration.class,
        QueryProvider.class,
        SecurityParameterProvider.class,
        SqlBuilderConfig.class,
        StatusConfiguration.class,
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        YamlPropertiesConfigurator.class,
        TenantWebMvcConfiguration.class
})
@EnableBinding(AggregateRequestProcessor.class)
public class ApplicationConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(ApplicationConfiguration.class);

    @Bean
    @ConfigurationProperties("reporting")
    public ReportingSystemSettings reportingSystemSettings() {
        return new ReportingSystemSettings();
    }

    @Bean("tenantIdResolver")
    public ReportingTenantIdResolver reportingTenantIdResolver() {
        return new ReportingTenantIdResolver();
    }

    @Bean("reportingSystemPropertiesResolver")
    ReportingSystemPropertiesResolver reportingSystemPropertiesResolver(ReportingTenantIdResolver reportingTenantIdResolver,
                                                                        ReportingSystemSettings reportingSystemSettings) {
        return new ReportingSystemPropertiesResolver(reportingTenantIdResolver, reportingSystemSettings);
    }

    @Bean
    public MessageSource messageSource(final ResourceLoader resourceLoader,
                                       @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties systemSettings) {

        final ResourceBundleMessageSource baseMessages = new ResourceBundleMessageSource();
        baseMessages.setBasenames("messages");
        baseMessages.setDefaultEncoding("UTF-8");

        if (isEmpty(systemSettings.getTranslationLocation())) {
            return baseMessages;
        }

        final ReloadableResourceBundleMessageSource configMessages = new ReloadableResourceBundleMessageSource();
        configMessages.setResourceLoader(resourceLoader);
        configMessages.setBasename(systemSettings.getTranslationLocation() + "messages");
        configMessages.setParentMessageSource(baseMessages);
        return configMessages;
    }

    @Bean
    public MessageSecurityService messageSecurityService(final JwtService jwtService) {
        return new DefaultMessageSecurityService(jwtService);
    }

    @Bean
    public ArchiveService archiveService(final ArchiveServiceFactory factory, final Environment env) {
        return factory.createArchiveService(env, "app.archive.");
    }

    @Bean
    public Jackson2ObjectMapperBuilderCustomizer customizeObjectMapper() {
        return builder -> builder
                .failOnUnknownProperties(false)
                .modulesToInstall(new GuavaModule(), new ReportModule());
    }

    @Bean
    public TenantMessageRequestResolver tenantMessageRequestResolver(MessageSecurityService messageSecurityService) {
        return new TenantMessageRequestDefaultResolver() {
            @Override
            public String resolveTenantId(Message<?> message) {
                //TODO: this is interim code until actual multi-tenant enabled
                //using this to detect messages with no user
                //production code will throw exception
                String tenantId = DEFAULT_TENANT_ID;
                try {
                    final User user = messageSecurityService.getUser(message);
                    tenantId = user.getTenantId();
                    logger.info("Resolving user {} to tenant {} for message.", user.getUsername(), tenantId);
                } catch (Exception e) {
                    logger.error("Error resolving user: ", e);
                }
                return tenantId;
            }
        };
    }

    @Bean
    @GlobalChannelInterceptor(patterns = {"Report*", "Aggregate*", "UserReport*"})
    public TenantChannelInterceptor getTenantChannelInterceptor(TenantMessageRequestResolver getTenantMessageRequestResolver) {
        return new TenantChannelInterceptor(getTenantMessageRequestResolver);
    }

}
