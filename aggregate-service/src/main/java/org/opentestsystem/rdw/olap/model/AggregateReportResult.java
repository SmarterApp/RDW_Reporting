package org.opentestsystem.rdw.olap.model;

/**
 * General aggregate report result container.
 * The generic payload contains the report results.
 *
 * @param <T> The aggregate report content type
 */
public abstract class AggregateReportResult<T> {

    private T payload;
    private boolean createdWhileDataEmbargoed;
    private boolean notEnoughResults;
    private int resultCount;
    private boolean hasResults;

    public T getPayload() {
        return payload;
    }

    public boolean isCreatedWhileDataEmbargoed() {
        return createdWhileDataEmbargoed;
    }

    public int getResultCount() {
        return resultCount;
    }

    public boolean isHasResults() {
        return hasResults;
    }

    /**
     * @return true if the result has insufficient data
     */
    public boolean isNotEnoughResults() {
        return notEnoughResults;
    }

    public static abstract class Builder<B extends Builder, V extends AggregateReportResult<T>, T> {
        private T payload;
        protected boolean createdWhileDataEmbargoed;
        protected int resultCount;
        protected boolean hasResults;
        protected boolean notEnoughResults = false;

        protected abstract V createInstance();

        public V build() {
            final V result = createInstance();
            final AggregateReportResult<T> aggregateReportResult = result;
            aggregateReportResult.payload = payload;
            aggregateReportResult.createdWhileDataEmbargoed = createdWhileDataEmbargoed;
            aggregateReportResult.resultCount = resultCount;
            aggregateReportResult.hasResults = hasResults;
            aggregateReportResult.notEnoughResults = notEnoughResults;
            return result;
        }

        public B merge(final V payload) {
            createdWhileDataEmbargoed(this.isCreatedWhileDataEmbargoed() || payload.isCreatedWhileDataEmbargoed());
            hasResults(this.hasResults || payload.isHasResults());
            notEnoughResults(this.notEnoughResults || payload.isNotEnoughResults());
            resultCount(this.resultCount + payload.getResultCount());
            return (B) this;
        }

        public B payload(final T payload) {
            this.payload = payload;
            return (B) this;
        }

        public B createdWhileDataEmbargoed(final boolean createdWhileDataEmbargoed) {
            this.createdWhileDataEmbargoed = createdWhileDataEmbargoed;
            return (B) this;
        }

        public B notEnoughResults(final boolean notEnoughResults) {
            this.notEnoughResults = notEnoughResults;
            return (B) this;
        }

        public B resultCount(final int resultCount) {
            this.resultCount = resultCount;
            return (B) this;
        }

        public B hasResults(final boolean hasResults) {
            this.hasResults = hasResults;
            return (B) this;
        }

        public boolean isCreatedWhileDataEmbargoed() {
            return this.createdWhileDataEmbargoed;
        }
    }
}
