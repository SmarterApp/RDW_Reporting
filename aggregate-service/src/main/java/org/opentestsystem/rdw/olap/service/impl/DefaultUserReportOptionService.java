package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.olap.service.*;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.opentestsystem.rdw.reporting.common.service.UserStudentFieldService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.opentestsystem.rdw.olap.model.CodedEntities;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;

import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;

@Service
class DefaultUserReportOptionService implements UserReportOptionService {

    private static final Map<DimensionType, StudentFieldType> StudentFieldTypesByDimensionType = ImmutableMap.<DimensionType, StudentFieldType>builder()
            .put(DimensionType.Gender, StudentFieldType.Gender)
            .put(DimensionType.Ethnicity, StudentFieldType.Ethnicity)
            .put(DimensionType.LEP, StudentFieldType.LimitedEnglishProficiency)
            .put(DimensionType.ELAS, StudentFieldType.EnglishLanguageAcquisitionStatus)
            .put(DimensionType.Language, StudentFieldType.PrimaryLanguage)
            .put(DimensionType.Section504, StudentFieldType.Section504)
            .put(DimensionType.IEP, StudentFieldType.IndividualEducationPlan)
            .put(DimensionType.MigrantStatus, StudentFieldType.MigrantStatus)
            .put(DimensionType.MilitaryConnectedCode, StudentFieldType.MilitaryStudentIdentifier)
            .put(DimensionType.EconomicDisadvantage, StudentFieldType.EconomicDisadvantage)
            .build();

    private final ReportOptionService reportOptionService;
    private final UserAssessmentTypeService userAssessmentTypeService;
    private final UserOrganizationService userOrganizationService;
    private final UserStudentFieldService userStudentFieldService;
    private final UserStudentFilterService userStudentFilterService;

    @Autowired
    DefaultUserReportOptionService(
            final ReportOptionService reportOptionService,
            final UserAssessmentTypeService assessmentTypeService,
            final UserOrganizationService userOrganizationService,
            final UserStudentFieldService userStudentFieldService,
            final UserStudentFilterService userStudentFilterService
            ) {
        this.reportOptionService = reportOptionService;
        this.userAssessmentTypeService = assessmentTypeService;
        this.userOrganizationService = userOrganizationService;
        this.userStudentFieldService = userStudentFieldService;
        this.userStudentFilterService = userStudentFilterService;
    }

    @Override
    public ReportOptions getReportOptions(final User user) {
        final Optional<Organization> organization = userOrganizationService.getDefaultOrganization(user);
        final ReportOptions staticOptions = reportOptionService.getReportOptions();
        final List<StudentFieldType> userStudentFields = userStudentFieldService.get(user);
        return ReportOptions.builder()
                .copy(staticOptions)
                .assessmentTypes(
                        CodedEntities.codesOf(userAssessmentTypeService.getAssessmentTypes(user))
                )
                .statewideReporter(
                        user.getPermissionScopeByPermissionId(AggregateRead).isStatewide()
                )
                .defaultOrganization(
                        organization.orElse(null)
                )
                .dimensionTypes(
                        staticOptions.getDimensionTypes().stream()
                                .filter(dimensionType ->
                                        userStudentFields.contains(
                                                StudentFieldTypesByDimensionType.get(dimensionType)
                                        )
                                )
                                .collect(toList())
                )
                .studentFilters(
                        userStudentFilterService.get(user)
                )
                .build();
    }

}
