package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.AggregateServiceCache;
import org.opentestsystem.rdw.olap.model.CodedEntities;
import org.opentestsystem.rdw.olap.model.ReportOptions;
import org.opentestsystem.rdw.olap.service.UserAssessmentTypeService;
import org.opentestsystem.rdw.olap.service.ReportOptionService;
import org.opentestsystem.rdw.olap.service.UserOrganizationService;
import org.opentestsystem.rdw.olap.service.UserReportOptionService;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.Optional;

import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;

@Service
class DefaultUserReportOptionService implements UserReportOptionService {

    private final ReportOptionService reportOptionService;
    private final UserAssessmentTypeService userAssessmentTypeService;
    private final UserOrganizationService userOrganizationService;

    @Autowired
    DefaultUserReportOptionService(
            final ReportOptionService reportOptionService,
            final UserAssessmentTypeService assessmentTypeService,
            final UserOrganizationService userOrganizationService) {
        this.reportOptionService = reportOptionService;
        this.userAssessmentTypeService = assessmentTypeService;
        this.userOrganizationService = userOrganizationService;
    }

    @Override
    public ReportOptions getReportOptions(final User user) {
        final Optional<Organization> organization = userOrganizationService.getDefaultOrganization(user);
        return ReportOptions.builder()
                .copy(reportOptionService.getReportOptions())
                .assessmentTypes(CodedEntities.codesOf(userAssessmentTypeService.getAssessmentTypes(user)))
                .statewideReporter(user.getPermissionScopeByPermissionId(AggregateRead).isStatewide())
                .defaultOrganization(organization.orElse(null))
                .build();
    }

}
