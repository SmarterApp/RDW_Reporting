package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.FilteredSubgroupReportResult;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Objects;

/**
 * An implementation of the {@link CustomAggregateReportRepository} that returns {@link FilteredSubgroupReportResult}
 */
@Repository
class JdbcFilteredSubgroupAggregateReportRepository extends AbstractCustomAggregateReportRepository<FilteredSubgroupRow, FilteredSubgroupReportResult, FilteredSubgroupReportResult.Builder>
        implements CustomAggregateReportRepository<FilteredSubgroupReportResult> {

    @Autowired
    public JdbcFilteredSubgroupAggregateReportRepository(final ReportingSystemSettings systemSettings,
                                                         final JdbcTemplate jdbcTemplate,
                                                         final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                                         final ActiveAssessmentRepository activeAssessmentRepository,
                                                         final OrganizationRepository organizationRepository,
                                                         final QueryProvider queryProvider,
                                                         final EmbargoRepository embargoRepository,
                                                         @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                                                         @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, activeAssessmentRepository, organizationRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected FilteredSubgroupReportResult.Builder getReportBuilder() {
        return FilteredSubgroupReportResult.builder();
    }

    @Override
    protected ReportRowIdentity getRowIdentity(final FilteredSubgroupRow row) {
        return new FilteredSubgroupAggregateReportRowIdentity(row);
    }

    @Override
    protected FilteredSubgroupRow buildReportRow(final Organization organization,
                                                 final ActiveAssessment assessment,
                                                 final Dimension dimension,
                                                 final Measures measures,
                                                 final AggregateReportQuery query) {
        return FilteredSubgroupRow.builder()
                .assessment(assessment)
                .organization(organization)
                .subgroupKey(query.getSubgroupKey())
                .measures(measures)
                .build();
    }

    /**
     * Provides an identity for the {@link FilteredSubgroupRow}, which is all the attributes but the {@link Measures}
     */
    static class FilteredSubgroupAggregateReportRowIdentity extends ReportRowIdentity<FilteredSubgroupRow> {

        FilteredSubgroupAggregateReportRowIdentity(final FilteredSubgroupRow reportRow) {
            super(reportRow);
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            final FilteredSubgroupAggregateReportRowIdentity that = (FilteredSubgroupAggregateReportRowIdentity) o;
            return Objects.equals(reportRow.getOrganization(), that.reportRow.getOrganization()) &&
                    Objects.equals(reportRow.getAssessment(), that.reportRow.getAssessment()) &&
                    Objects.equals(reportRow.getSubgroupKey(), that.reportRow.getSubgroupKey());
        }

        @Override
        public int hashCode() {
            return Objects.hash(reportRow.getOrganization(), reportRow.getAssessment(), reportRow.getSubgroupKey());
        }
    }
}