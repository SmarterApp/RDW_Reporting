package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.AggregateReportQuery;
import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;


/**
 * This class defines the steps for converting {@link AggregateReportQuery} into a collection of SQL statements.
 */
@SuppressWarnings("unchecked")
abstract class CustomAggregateProviderTemplate<B extends ReportContext.Builder, T extends ReportContext, Q extends OrganizationTypeQuery> implements QueryProvider<T, Q> {

    /**
     * A SQL is assembled by combining SQL snippets from custom-aggregate-report-template.sql.yml.
     * <p>
     * There is a common template with the parameters shared by all queries that gets decorated with
     * the organization level snippets, as well as a dimension and filters.
     * <p>
     *
     * @param query                   the {@link AggregateReportQuery} for the SQL
     * @param groupByOrganizationType the {@link OrganizationType} to group the data by, this defined the organization snippet to include
     */
    @Override
    public T toQuery(final Q query, final OrganizationType groupByOrganizationType) {

        validate(query);

        return build((B) createOrganizationBuilder(query, groupByOrganizationType)
                .merge(createBuilderWithCommonAttributes(query)));

    }

    protected void validate(final Q query) {
        checkArgument(query.getAssessmentTypeCode() != null, "invalid query, missing an assessment type");
        checkArgument(query.getDimensionType() != null, "invalid query, missing a dimension type");
        checkArgument(query.getOrganizationType() != null && (query.getOrganizationType() == State || query.getOrganizationType() == District || query.getOrganizationType() == School), "invalid query, unsupported organization type");

        // state shouldn't have org ids, district/school must have org ids
        checkArgument(query.getOrganizationType() != State ^ query.getOrganizationIds().isEmpty(), "invalid query, district/school requires organization ids and state does not");
    }

    private B createOrganizationBuilder(final Q query, final OrganizationType groupByOrganizationType) {

        B organizationBuilder = null;

        switch (groupByOrganizationType) {
            case State:
                organizationBuilder = createBuilderWithState(query.getAssessmentTypeCode());
                break;
            case School:
                if (query.getOrganizationType() == District) {
                    organizationBuilder = createBuilderWithAllSchoolsOfDistricts(query.getAssessmentTypeCode(), query.getOrganizationIds());
                } else if (query.getOrganizationType() == OrganizationType.School) {
                    organizationBuilder = createBuilderWithSchoolIds(query.getAssessmentTypeCode(), query.getOrganizationIds());
                }
                break;
            case District:
                if (query.getOrganizationType() == State) {
                    organizationBuilder = createBuilderWithAllDistricts(query.getAssessmentTypeCode());
                } else if (query.getOrganizationType() == OrganizationType.District) {
                    organizationBuilder = createBuilderWithDistrictIds(query.getAssessmentTypeCode(), query.getOrganizationIds());
                }
                break;
        }

        if (organizationBuilder == null) throw new IllegalArgumentException("unsupported groupByOrganizationType and query organization type for the custom aggregate query");

        return organizationBuilder;
    }

    protected abstract B createBuilderInstance();

    protected abstract B createBuilderWithCommonAttributes(Q query);

    // each method below maps to a SQL snippet in the custom-aggregate-report-template.sql.yml
    // they all provide a new instance of a builder initialized with the named level of organization related parameters
    protected abstract B createBuilderWithState(String assessmentTypeCode);

    protected abstract B createBuilderWithAllDistricts(String assessmentTypeCode);

    protected abstract B createBuilderWithDistrictIds(String assessmentTypeCode, Set<Long> districtIds);

    protected abstract B createBuilderWithAllSchoolsOfDistricts(String assessmentTypeCode, Set<Long> districtIds);

    protected abstract B createBuilderWithSchoolIds(String assessmentTypeCode, Set<Long> schoolIds);

    protected abstract T build(final B builder);

}
