package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.LongitudinalReportRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.repository.ReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.BaseQueryReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.LongitudinalQueryReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.AssessmentDescription;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.FilteredSubgroupRow;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.caseInsensitiveValue;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * An implementation of the {@link LongitudinalReportRepository}
 */
@Repository
class JdbcLongitudinalReportRepository extends AbstractReportRepository<AssessmentDescription, LongitudinalRow, LongitudinalReportResult, LongitudinalReportQuery, Builder>
        implements LongitudinalReportRepository {

    @Autowired
    public JdbcLongitudinalReportRepository(final ReportingSystemSettings systemSettings,
                                            final JdbcTemplate jdbcTemplate,
                                            final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                            final OrganizationRepository organizationRepository,
                                            final QueryProvider queryProvider,
                                            final EmbargoRepository embargoRepository,
                                            @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                                            @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, organizationRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected Builder getReportBuilder() {
        return LongitudinalReportResult.builder();
    }

    @Override
    protected ReportRowIdentity getRowIdentity(final LongitudinalRow row) {
        return new LongitudinalRowIdentity(row);
    }

    @Override
    protected void validate(final LongitudinalReportQuery query) {
        super.validate(query);
        checkArgument(query.getSubjectCode() != null, "invalid query, missing a subject");
        checkArgument(!isEmpty(query.getGradeYearPairs()), "invalid query, missing an assessment grade/school years");
    }

    @Override
    protected LongitudinalRow buildReportRow(final ResultSet row, final LongitudinalReportQuery query) throws SQLException {
        final String asmtTypeCode = query.getAssessmentTypeCode();
        return LongitudinalRow.builder()
                .organization(findOneByIdAndType(row.getLong("organization_id"), OrganizationType.valueOf(row.getString("organization_type"))))
                .assessment(AssessmentDescription.builder()
                        .examSchoolYear(row.getInt("school_year"))
                        .gradeCode(getReportQueryRepositoryHelper().toGradeCode(row.getInt("asmt_grade_id")))
                        .subjectCode(getReportQueryRepositoryHelper().toSubjectCode(row.getInt("subject_id")))
                        .build())
                .dimension(Dimension.builder().code(getNullable(row, row.getString("dimension_code"))).type(caseInsensitiveValue(row.getString("dimension"))).build())
                .measures(measures(row, asmtTypeCode, ""))
                .cohortMeasures(measures(row, asmtTypeCode, "cohort_"))
                .build();
    }

    @Override
    protected BaseQueryReportTemplateProvider<LongitudinalReportQuery, AssessmentDescription> getQueryReportTemplateProvider(final Organization state,
                                                                                                                             final int organizationPartitionSize,
                                                                                                                             final QueryProvider queryProvider,
                                                                                                                             final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                                                                                                             final PermissionSource permissionSource) {
        return new LongitudinalQueryReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource);
    }

    @Override
    protected LongitudinalRow buildEmptyReportRow(final Organization organization,
                                                  final AssessmentDescription assessment,
                                                  final Dimension dimension,
                                                  final LongitudinalReportQuery query) {
        return LongitudinalRow.builder()
                .assessment(assessment)
                .organization(organization)
                .dimension(dimension)
                .measures(getEmptyMeasure())
                .cohortMeasures(getEmptyMeasure())
                .build();
    }

    /**
     * Provides an identity for the {@link FilteredSubgroupRow}, which is all the attributes but the {@link Measures}
     */
    static class LongitudinalRowIdentity extends ReportRowIdentity<LongitudinalRow> {

        LongitudinalRowIdentity(final LongitudinalRow reportRow) {
            super(reportRow);
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            final LongitudinalRowIdentity that = (LongitudinalRowIdentity) o;
            return Objects.equals(reportRow.getOrganization(), that.reportRow.getOrganization()) &&
                    Objects.equals(reportRow.getAssessment(), that.reportRow.getAssessment()) &&
                    Objects.equals(reportRow.getDimension(), that.reportRow.getDimension());
        }

        @Override
        public int hashCode() {
            return Objects.hash(reportRow.getOrganization(), reportRow.getAssessment(), reportRow.getDimension());
        }
    }
}