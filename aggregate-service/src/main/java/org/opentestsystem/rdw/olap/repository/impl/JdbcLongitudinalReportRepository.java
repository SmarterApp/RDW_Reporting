package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult;
import org.opentestsystem.rdw.olap.model.LongitudinalReportResult.Builder;
import org.opentestsystem.rdw.olap.model.ReportRowIdentity;
import org.opentestsystem.rdw.olap.model.ReportTemplate;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.LongitudinalReportRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.query.LongitudinalSqlQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.SimpleReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalRow;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Maps.newHashMap;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * Implementation of the {@link LongitudinalReportRepository}
 */
@SuppressWarnings("unchecked")
@Repository
class JdbcLongitudinalReportRepository extends AbstractReportRepository<LongitudinalRow, LongitudinalReportResult, LongitudinalOrganizationQuery, Builder>
        implements LongitudinalReportRepository {

    @Autowired
    public JdbcLongitudinalReportRepository(final ReportingSystemSettings systemSettings,
                                            final JdbcTemplate jdbcTemplate,
                                            final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                            final OrganizationRepository organizationRepository,
                                            final ActiveAssessmentRepository activeAssessmentRepository,
                                            final QueryProvider queryProvider,
                                            final EmbargoRepository embargoRepository,
                                            @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                                            @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, organizationRepository, activeAssessmentRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected Builder getReportBuilder() {
        return LongitudinalReportResult.builder();
    }

    @Override
    protected void validate(final LongitudinalOrganizationQuery query) {
        super.validate(query);
        checkArgument(query.getSubjectCode() != null, "invalid query, missing a subject");
        checkArgument(!isEmpty(query.getYearGradePairs()), "invalid query, missing an assessment grade/school years");
    }

    @Override
    protected LongitudinalRow buildReportRow(final ResultSet row, final LongitudinalOrganizationQuery query) throws SQLException {
        final String asmtTypeCode = query.getAssessmentTypeCode();
        return LongitudinalRow.builder()
                .organization(findOneByIdAndType(row.getLong("organization_id"), OrganizationType.valueOf(row.getString("organization_type"))))
                .assessment(findByIdAndSchoolYear(asmtTypeCode, row.getInt("asmt_id"), row.getInt("school_year")))
                .dimension(buildDimension(row, query))
                .measures(measures(row, asmtTypeCode, ""))
                .cohortMeasures(measures(row, asmtTypeCode, "cohort_"))
                .singleAsmtInAggregate(row.getBoolean("singleAsmtInAggregate"))
                .build();
    }

    @Override
    protected LongitudinalSqlQueryWithReportTemplateProvider getQueryReportTemplateProvider(
            final Organization state,
            final int organizationPartitionSize,
            final QueryProvider queryProvider,
            final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
            final PermissionSource permissionSource) {
        return new LongitudinalSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource);
    }


    @Override
    public int estimateReportRowCountByOrganizationType(@NotNull final LongitudinalOrganizationQuery query,
                                                        @NotNull final OrganizationType groupByOrganizationType) {
        validate(query);
        final ReportTemplate reportTemplate = new SimpleReportTemplateProvider(getState(), getReportQueryRepositoryHelper())
                .toQuery(query, groupByOrganizationType);

        return (reportTemplate.getOrganizations().size()
                * reportTemplate.getAssessments().size()
                * (reportTemplate.getDimensions().size() + (reportTemplate.isIncludeStudentEnrolledGradeDimension() ? 1 : 0)));
    }

    @Override
    protected Map<ReportRowIdentity, LongitudinalRow> buildTemplateRowsByIdentity(final ReportTemplate queryWithReportTemplate,
                                                                                  final LongitudinalOrganizationQuery query,
                                                                                  final boolean considerAsmtIdAsPartOfIdentity) {
        final Map<ReportRowIdentity, LongitudinalRow> reportTemplate = newHashMap();
        // a template report consists of combinations of all the organizations and assessments
        queryWithReportTemplate.combinations((organization, assessment, dimension) -> {
            final LongitudinalRow row = buildEmptyReportRow(organization, assessment, dimension, query);
            reportTemplate.put(createReportRowIdentity(row, considerAsmtIdAsPartOfIdentity), row);
        });
        return reportTemplate;
    }

    private LongitudinalRow buildEmptyReportRow(final Organization organization,
                                                final ActiveAssessment assessment,
                                                final Dimension dimension,
                                                final LongitudinalOrganizationQuery query) {
        return LongitudinalRow.builder()
                .assessment(assessment)
                .organization(organization)
                .dimension(buildDimension(dimension, query))
                .measures(Measures.getEmptyMeasure())
                .cohortMeasures(Measures.getEmptyMeasure())
                .build();
    }

}