package org.opentestsystem.rdw.olap.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.BasicAggregateRow;

import java.util.Collection;
import java.util.List;

/**
 * Aggregate report result for {@link org.opentestsystem.rdw.reporting.common.model.BasicAggregateReportQuery}
 * requests.
 */
public class BasicAggregateReportResult extends AggregateReportResult<List<BasicAggregateRow>> {

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AggregateReportResult.Builder<Builder, BasicAggregateReportResult, List<BasicAggregateRow>> {

        private final ImmutableList.Builder<BasicAggregateRow> rowsBuilder = ImmutableList.builder();

        @Override
        protected BasicAggregateReportResult createInstance() {
            return new BasicAggregateReportResult();
        }

        @Override
        public BasicAggregateReportResult build() {
            final ImmutableList<BasicAggregateRow> rows = rowsBuilder.build();
            super.payload(rows);
            super.resultCount(rows.size());
            return super.build();
        }

        public Builder merge(final BasicAggregateReportResult report) {
            rows(report.getPayload());
            createdWhileDataEmbargoed(this.isCreatedWhileDataEmbargoed() || report.isCreatedWhileDataEmbargoed());
            hasResults(this.isHasResults() || report.isHasResults());
            return this;
        }

        public Builder rows(final Collection<BasicAggregateRow> rows) {
            this.rowsBuilder.addAll(rows);
            return this;
        }

        public Builder row(final BasicAggregateRow row) {
            this.rowsBuilder.add(row);
            return this;
        }
    }
}
