
package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.CustomAggregateOrganizationQuery;
import org.opentestsystem.rdw.olap.model.CustomAggregateReportResult;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.AggregateQueryReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.AggregateRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.google.common.base.Preconditions.checkArgument;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * Implementation of {@link CustomAggregateReportRepository}
 */
@SuppressWarnings("unchecked")
@Repository
public class JdbcCustomAggregateReportRepository
        extends AbstractReportRepository<AggregateRow, CustomAggregateReportResult, CustomAggregateOrganizationQuery, CustomAggregateReportResult.Builder>
        implements CustomAggregateReportRepository {

    /**
     * Constructor
     */
    @Autowired
    JdbcCustomAggregateReportRepository(final ReportingSystemSettings systemSettings,
                                        final JdbcTemplate jdbcTemplate,
                                        final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                        final ActiveAssessmentRepository activeAssessmentRepository,
                                        final OrganizationRepository organizationRepository,
                                        final QueryProvider queryProvider,
                                        final EmbargoRepository embargoRepository,
                                        @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                                        @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, organizationRepository, activeAssessmentRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected CustomAggregateReportResult.Builder getReportBuilder() {
        return CustomAggregateReportResult.builder();
    }

    @Override
    protected void validate(final CustomAggregateOrganizationQuery query) {
        super.validate(query);
        checkArgument(!isEmpty(query.getSubjectCodes()), "invalid query, missing a subject");
        checkArgument(!isEmpty(query.getAssessmentGradeCodes()), "invalid query, missing an assessment grade");
        checkArgument(!isEmpty(query.getSchoolYears()), "invalid query, missing a school year");
    }

    @Override
    protected AggregateQueryReportTemplateProvider getQueryReportTemplateProvider(
            final Organization state, final int organizationPartitionSize, final QueryProvider queryProvider, final QueryProviderRepositoryHelper reportQueryRepositoryHelper, final PermissionSource permissionSource) {
        return new AggregateQueryReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource);
    }

    @Override
    protected AggregateRow buildReportRow(final ResultSet row, final CustomAggregateOrganizationQuery query) throws SQLException {
        final String asmtTypeCode = query.getAssessmentTypeCode();
        return AggregateRow.builder()
                .organization(findOneByIdAndType(row.getLong("organization_id"), OrganizationType.valueOf(row.getString("organization_type"))))
                .assessment(findByIdAndSchoolYear(asmtTypeCode, row.getInt("asmt_id"), row.getInt("school_year")))
                .dimension(buildDimension(row, query))
                .measures(measures(row, asmtTypeCode, ""))
                .build();
    }

    @Override
    protected AggregateRow buildEmptyReportRow(final Organization organization,
                                               final ActiveAssessment assessment,
                                               final Dimension dimension,
                                               final CustomAggregateOrganizationQuery query) {
        return AggregateRow.builder()
                .assessment(assessment)
                .organization(organization)
                .dimension(buildDimension(dimension, query))
                .measures(Measures.getEmptyMeasure())
                .build();
    }
}