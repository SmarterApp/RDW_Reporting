package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.ReportQueryProvider;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.model.ReportQuery.checkIsValid;

@SuppressWarnings("unchecked")
@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {

    private static final List<Integer> UNMATCHABLE_IDS = ImmutableList.of(-1);

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ReportQueryProvider customAggregateQueryProvider;

    @Value("${sql.estimateReportRowCount}")
    private String estimateReportRowCountSql;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final ReportQueryProvider customAggregateQueryProvider) {
        this.jdbcTemplate = jdbcTemplate;
        this.customAggregateQueryProvider = customAggregateQueryProvider;
    }

    private static void validate(final ReportQuery query) {
        checkIsValid(query);
        checkArgument(!AssessmentType.IAB.equals(query.getAssessmentType()), "custom aggregate report for IAB is not supported yet");
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {

        validate(query);

        final List<ReportRow> reportRows = newArrayList();
        for (final String sql : customAggregateQueryProvider.toSqlQueryStrings(query)) {
            reportRows.addAll(jdbcTemplate.query(
                    sql,
                    buildParameters(query),
                    (row, index) -> ReportRow.builder()
                            .assessment(Assessment.builder()
                                    .id(row.getInt("asmt_id"))
                                    .gradeId(row.getInt("asmt_grade_id"))
                                    .subjectCode(row.getString("subject_code"))
                                    .label(row.getString("asmt_label"))
                                    .build())
                            .examSchoolYear(row.getInt("school_year"))
                            .dimension(new Dimension(getNullable(row, row.getString("dimension_code")), DimensionType.caseInsensitiveValue(row.getString("dimension"))))
                            .organization(Organization.builder()
                                    .name(row.getString("organization_name"))
                                    .id(getNullable(row, row.getInt("organization_id")))
                                    .type(OrganizationType.caseInsensitiveValue(row.getString("organization_type")))
                                    .naturalId(row.getString("organization_natural_id"))
                                    .build())
                            .measures(Measures.builder()
                                    .avgScaleScore(row.getInt("score"))
                                    .avgStdErr(row.getInt("std_err"))
                                    .level1Count(row.getInt("level1"))
                                    .level2Count(row.getInt("level2"))
                                    .level3Count(row.getInt("level3"))
                                    .level4Count(row.getInt("level4"))
                                    .build())
                            .build()));
        }
        return reportRows;
    }

    @Override
    public int estimateReportRowCount(@NotNull final ReportQuery query) {

        validate(query);

        final Set<DimensionType> dimensionTypes = query.getDimensionTypes();
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("school_years", query.getSchoolYears())
                .addValue("asmt_grade_ids", query.getAsmtGradeIds())
                .addValue("subject_ids", query.getSubjectIds())
                .addValue("asmt_type_id", query.getAssessmentType().id())
                .addValue("gender", dimensionTypes.contains(DimensionType.Gender))
                .addValue("ethnicity", dimensionTypes.contains(DimensionType.Ethnicity))
                .addValue("iep", dimensionTypes.contains(DimensionType.IEP))
                .addValue("lep", dimensionTypes.contains(DimensionType.LEP))
                .addValue("section504", dimensionTypes.contains(DimensionType.Section504))
                .addValue("economic_disadvantage", dimensionTypes.contains(DimensionType.EconomicDisadvantage))
                .addValue("migrant_status", dimensionTypes.contains(DimensionType.MigrantStatus))
                .addValue("student_enrolled_grade", dimensionTypes.contains(DimensionType.StudentEnrolledGrade))
                .addValue("overall", dimensionTypes.contains(DimensionType.Overall))
                .addValue("isIncludeState", query.isIncludeState())
                .addValue("isIncludeAllDistricts", query.isIncludeAllDistricts())
                .addValue("isIncludeDistricts", (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()))
                .addValue("district_ids", nullOrEmptyToDefault(query.getDistrictIds(), UNMATCHABLE_IDS))
                .addValue("isIncludeAllSchoolsInDistricts", !query.getDistrictIdsWithAllSchools().isEmpty())
                .addValue("school_district_ids", nullOrEmptyToDefault(query.getDistrictIdsWithAllSchools(), UNMATCHABLE_IDS))
                .addValue("isIncludeSchools", !query.getSchoolIds().isEmpty())
                .addValue("school_ids", nullOrEmptyToDefault(query.getSchoolIds(), UNMATCHABLE_IDS))
                .addValue("all_genders", query.getGendersId().isEmpty())
                .addValue("gender_ids", nullOrEmptyToDefault(query.getGendersId(), UNMATCHABLE_IDS))
                .addValue("all_ethnicities", query.getEthnicityIds().isEmpty())
                .addValue("ethnicity_ids", nullOrEmptyToDefault(query.getEthnicityIds(), UNMATCHABLE_IDS))
                .addValue("all_leps", query.getLepIds().isEmpty())
                .addValue("lep_ids", nullOrEmptyToDefault(query.getLepIds(), UNMATCHABLE_IDS))
                .addValue("all_migrant_statuses", query.getMigrantStatusIds().isEmpty())
                .addValue("migrant_status_ids", nullOrEmptyToDefault(query.getMigrantStatusIds(), UNMATCHABLE_IDS))
                .addValue("all_section504s", query.getSection504Ids().isEmpty())
                .addValue("section504_ids", nullOrEmptyToDefault(query.getSection504Ids(), UNMATCHABLE_IDS))
                .addValue("all_ieps", query.getIepIds().isEmpty())
                .addValue("iep_ids", nullOrEmptyToDefault(query.getIepIds(), UNMATCHABLE_IDS))
                .addValue("all_economic_disadvantages", query.getEconomicDisadvantageIds().isEmpty())
                .addValue("economic_disadvantage_ids", nullOrEmptyToDefault(query.getEconomicDisadvantageIds(), UNMATCHABLE_IDS));

        return jdbcTemplate.queryForObject(estimateReportRowCountSql, parameterSource, Integer.class);
    }

    private MapSqlParameterSource buildParameters(final ReportQuery query) {
        final MapSqlParameterSource parameters = new MapSqlParameterSource()
                .addValue("school_years", padToSize(query.getSchoolYears(), 5))
                .addValue("asmt_grade_ids", padToSize(query.getAsmtGradeIds(), 7))
                .addValue("subject_ids", padToSize(query.getSubjectIds(), 2))
                .addValue("asmt_type_id", query.getAssessmentType().id());

        if (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()) parameters.addValue("district_ids", padToSize(query.getDistrictIds(), 5));
        if (!query.getDistrictIdsWithAllSchools().isEmpty()) parameters.addValue("school_district_ids", padToSize(query.getDistrictIdsWithAllSchools(), 5));
        if (!query.getSchoolIds().isEmpty()) parameters.addValue("school_ids", padToSize(query.getSchoolIds(), 5));
        if (!query.getCompletenessIds().isEmpty()) parameters.addValue("completeness_ids", padToSize(query.getCompletenessIds(), 2));
        if (!query.getAdministrativeConditionIds().isEmpty()) parameters.addValue("administration_condition_ids", padToSize(query.getAdministrativeConditionIds(), 4));

        if (query.contains(DimensionType.Gender) || !query.getGendersId().isEmpty()) {
            parameters
                    .addValue("all_genders", query.getGendersId().isEmpty())
                    .addValue("gender_ids", padToSize(query.getGendersId(), 3));
        }
        if (query.contains(DimensionType.Ethnicity) || !query.getEthnicityIds().isEmpty()) {
            parameters
                    .addValue("all_ethnicities", query.getEthnicityIds().isEmpty())
                    .addValue("ethnicity_ids", padToSize(query.getEthnicityIds(), 8));
        }
        if (query.contains(DimensionType.LEP) || !query.getLepIds().isEmpty()) {
            parameters
                    .addValue("all_leps", query.getLepIds().isEmpty())
                    .addValue("lep_ids", padToSize(query.getLepIds(), 2));
        }
        if (query.contains(DimensionType.MigrantStatus) || !query.getMigrantStatusIds().isEmpty()) {
            parameters
                    .addValue("all_migrant_statuses", query.getMigrantStatusIds().isEmpty())
                    .addValue("migrant_status_ids", padToSize(query.getMigrantStatusIds(), 3));
        }
        if (query.contains(DimensionType.Section504) || !query.getSection504Ids().isEmpty()) {
            parameters
                    .addValue("all_section504s", query.getSection504Ids().isEmpty())
                    .addValue("section504_ids", padToSize(query.getSection504Ids(), 3));
        }
        if (query.contains(DimensionType.IEP) || !query.getIepIds().isEmpty()) {
            parameters
                    .addValue("all_ieps", query.getIepIds().isEmpty())
                    .addValue("iep_ids", padToSize(query.getIepIds(), 2));
        }
        if (query.contains(DimensionType.EconomicDisadvantage) || !query.getEconomicDisadvantageIds().isEmpty()) {
            parameters
                    .addValue("all_economic_disadvantages", query.getEconomicDisadvantageIds().isEmpty())
                    .addValue("economic_disadvantage_ids", padToSize(query.getEconomicDisadvantageIds(), 2));
        }
        return parameters;
    }

    private static List<Integer> padToSize(final Iterable<Integer> collection, final int size) {
        return padToSize(newArrayList(collection), size, -1);
    }

    private static List<Integer> padToSize(final List<Integer> collection, final int size, final int defaultValue) {
        if (collection != null && collection.size() >= size) return collection;

        final List<Integer> paddedCollection = (collection == null) ? newArrayList() : collection;
        for (int i = paddedCollection.size(); i < size; i++) {
            //TODO: change this if load test proves that we need it
            paddedCollection.add(defaultValue*(i+300));
        }
        return paddedCollection;
    }
}