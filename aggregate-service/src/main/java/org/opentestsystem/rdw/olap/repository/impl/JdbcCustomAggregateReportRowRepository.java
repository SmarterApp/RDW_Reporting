package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.CustomAggregateQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.CustomAggregateReportContextProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate;
import org.opentestsystem.rdw.olap.sqlbuilder.ReportContext;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.task.TaskExecutor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QueryProviderRepositoryHelper reportQueryRepositoryHelper;
    private final ActiveAssessmentRepository activeAssessmentRepository;
    private final QueryProvider queryProvider;
    private final Executor threadPoolTaskExecutor;
    private final Organization state;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(@Value("${app.state.name}") final String stateName,
                                                  final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                                                  final ActiveAssessmentRepository activeAssessmentRepository,
                                                  final QueryProvider queryProvider,
                                                  final TaskExecutor threadPoolTaskExecutor) {
        this.jdbcTemplate = jdbcTemplate;
        this.reportQueryRepositoryHelper = reportQueryRepositoryHelper;
        this.activeAssessmentRepository = activeAssessmentRepository;
        this.queryProvider = queryProvider;
        this.state = Organization.builder().name(stateName).organizationType(OrganizationType.State).build();
        this.threadPoolTaskExecutor = threadPoolTaskExecutor;

    }

    @Override
    public int estimateReportRowCount(@NotNull final ReportQuery query) {
        return new CustomAggregateReportContextProvider<>(state, reportQueryRepositoryHelper)
                .toQuery(query)
                .stream()
                .mapToInt(ReportContext::getEstimatedRowCount)
                .sum();
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {
        return new CustomAggregateQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper)
                .toQuery(query)
                .stream()
                .map(q -> new RunQueryTask(q, query.getAssessmentTypeCode()))
                .map(t -> CompletableFuture.supplyAsync(t::run, threadPoolTaskExecutor))
                .collect(toList())
                .stream()
                .map(CompletableFuture::join)
                .collect(ArrayList::new, List::addAll, List::addAll);
    }

    private class RunQueryTask {
        private final QueryWithReportTemplate queryWithReportTemplate;
        private final String asmtTypeCode;

        RunQueryTask(final QueryWithReportTemplate queryWithReportTemplate, final String asmtTypeCode) {
            this.queryWithReportTemplate = queryWithReportTemplate;
            this.asmtTypeCode = asmtTypeCode;
        }

        /**
         * Execute a SQL query and back-fill missing rows using {@link QueryWithReportTemplate#getReportTemplate()}
         */
        List<ReportRow> run() {
            final List<ReportRow> reportRows = newArrayList();
            final Set<ReportRow> templateRows = queryWithReportTemplate.getReportTemplate();
            reportRows.addAll(jdbcTemplate.query(
                    queryWithReportTemplate.getSqlQuery(),
                    queryWithReportTemplate.getParameterSource(),
                    (row, index) -> removeFromTemplateIfExists(templateRows, ReportRow.builder()
                            .assessment(findByIdAndSchoolYear(asmtTypeCode, row.getInt("asmt_id"), row.getInt("school_year")))
                            .dimension(Dimension.builder().code(getNullable(row, row.getString("dimension_code"))).type(DimensionType.caseInsensitiveValue(row.getString("dimension"))).build())
                            .organization(Organizations.map(row))
                            .measures(Measures.builder()
                                    .avgScaleScore(row.getInt("score"))
                                    .avgStdErr(row.getInt("std_err"))
                                    .level1Count(row.getInt("level1"))
                                    .level2Count(row.getInt("level2"))
                                    .level3Count(row.getInt("level3"))
                                    .level4Count(row.getInt("level4"))
                                    .build())
                            .build())));
            if (!templateRows.isEmpty()) reportRows.addAll(templateRows);
            return reportRows;
        }

        private ReportRow removeFromTemplateIfExists(final Set<ReportRow> template, final ReportRow rowToVerify) {
            template.removeIf(row -> (row.getDimension().equals(rowToVerify.getDimension())
                    && row.getOrganization().equals(rowToVerify.getOrganization())
                    && row.getAssessment().equals(rowToVerify.getAssessment())));
            return rowToVerify;
        }

        /**
         * To simplify a report SQL, we are loading assessments separately.
         * This assumes/relies on the {@link ActiveAssessmentRepository#findAllByTypeCode(String)} to be cached.
         */
        private ActiveAssessment findByIdAndSchoolYear(final String assessmentTypeCode, final int assessmentId, int schoolYear) {
            for (final ActiveAssessment activeAssessment : activeAssessmentRepository.findAllByTypeCode(assessmentTypeCode)) {
                if (activeAssessment.getId() == assessmentId && activeAssessment.getExamSchoolYear() == schoolYear)
                    return activeAssessment;
            }
            throw new IllegalArgumentException("unable to find an assessment by id " + assessmentId + " and school year " + schoolYear);
        }
    }
}