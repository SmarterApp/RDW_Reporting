package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.AdministrationConditionRepository;
import org.opentestsystem.rdw.olap.repository.AssessmentGradeRepository;
import org.opentestsystem.rdw.olap.repository.BooleanRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.repository.EthnicityRepository;
import org.opentestsystem.rdw.olap.repository.GenderRepository;
import org.opentestsystem.rdw.olap.repository.SchoolYearRepository;
import org.opentestsystem.rdw.olap.repository.StrictBooleanRepository;
import org.opentestsystem.rdw.olap.repository.SubjectRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.ReportQueryProvider;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;
import static java.lang.Math.max;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.padToSize;
import static org.opentestsystem.rdw.reporting.common.model.ReportQuery.checkIsValid;

@SuppressWarnings("unchecked")
@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {

    private final int booleanMaxCount;
    private final int strictBooleanMaxCount;
    private final int genderMaxCount;
    private final int ethnicityMaxCount;
    private final int asmtGradeMaxCount;
    private final int subjectMaxCount;
    private final int schoolYearMaxCount;
    private final int adminConditionMaxCount;

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ReportQueryProvider customAggregateQueryProvider;

    @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}")
    private int organizationPartitionSize;

    @Value("${sql.estimateReportRowCount}")
    private String estimateReportRowCountSql;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final ReportQueryProvider customAggregateQueryProvider,
                                                  final EthnicityRepository ethnicityRepository,
                                                  final SubjectRepository subjectRepository,
                                                  final AssessmentGradeRepository assessmentGradeRepository,
                                                  final GenderRepository genderRepository,
                                                  final SchoolYearRepository schoolYearRepository,
                                                  final AdministrationConditionRepository administrationConditionRepository,
                                                  final BooleanRepository booleanRepository,
                                                  final StrictBooleanRepository strictBooleanRepository) {
        this.jdbcTemplate = jdbcTemplate;
        this.customAggregateQueryProvider = customAggregateQueryProvider;

        //TODO: should this be moved into methods below? and the repository calls are cached?
        genderMaxCount = max(3, genderRepository.findAll().size());
        ethnicityMaxCount = max(8, ethnicityRepository.findAll().size());
        asmtGradeMaxCount = max(7, assessmentGradeRepository.findAll().size());
        subjectMaxCount = max(2, subjectRepository.findAll().size());
        schoolYearMaxCount = max(3, schoolYearRepository.findAll().size());
        adminConditionMaxCount = max(4, administrationConditionRepository.findAll().size());
        booleanMaxCount = max(3, booleanRepository.findAll().size());
        strictBooleanMaxCount = max(2, strictBooleanRepository.findAll().size());
    }

    private static void validate(final ReportQuery query) {
        checkIsValid(query);
        checkArgument(!AssessmentType.IAB.equals(query.getAssessmentType()), "custom aggregate report for IAB is not supported yet");
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {

        validate(query);

        final List<ReportRow> reportRows = newArrayList();
        for (final String sql : customAggregateQueryProvider.toSqlQueryStrings(query)) {
            reportRows.addAll(jdbcTemplate.query(
                    sql,
                    buildParameters(query),
                    (row, index) -> ReportRow.builder()
                            .assessment(Assessment.builder()
                                    .id(row.getInt("asmt_id"))
                                    .gradeId(row.getInt("asmt_grade_id"))
                                    .subjectCode(row.getString("subject_code"))
                                    .label(row.getString("asmt_label"))
                                    .build())
                            .examSchoolYear(row.getInt("school_year"))
                            .dimension(new Dimension(getNullable(row, row.getString("dimension_code")), DimensionType.caseInsensitiveValue(row.getString("dimension"))))
                            .organization(Organization.builder()
                                    .name(row.getString("organization_name"))
                                    .id(getNullable(row, row.getInt("organization_id")))
                                    .type(OrganizationType.caseInsensitiveValue(row.getString("organization_type")))
                                    .naturalId(row.getString("organization_natural_id"))
                                    .build())
                            .measures(Measures.builder()
                                    .avgScaleScore(row.getInt("score"))
                                    .avgStdErr(row.getInt("std_err"))
                                    .level1Count(row.getInt("level1"))
                                    .level2Count(row.getInt("level2"))
                                    .level3Count(row.getInt("level3"))
                                    .level4Count(row.getInt("level4"))
                                    .build())
                            .build()));
        }
        return reportRows;
    }

    @Override
    public int estimateReportRowCount(@NotNull final ReportQuery query) {

        validate(query);

        //TODO: do we want to loop for size greater than organizationPartitionSize?
        final Set<DimensionType> dimensionTypes = query.getDimensionTypes();
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("school_years", query.getSchoolYears())
                .addValue("asmt_grade_ids", query.getAsmtGradeIds())
                .addValue("subject_ids", query.getSubjectIds())
                .addValue("asmt_type_id", query.getAssessmentType().id())
                .addValue("gender", dimensionTypes.contains(DimensionType.Gender))
                .addValue("ethnicity", dimensionTypes.contains(DimensionType.Ethnicity))
                .addValue("iep", dimensionTypes.contains(DimensionType.IEP))
                .addValue("lep", dimensionTypes.contains(DimensionType.LEP))
                .addValue("section504", dimensionTypes.contains(DimensionType.Section504))
                .addValue("economic_disadvantage", dimensionTypes.contains(DimensionType.EconomicDisadvantage))
                .addValue("migrant_status", dimensionTypes.contains(DimensionType.MigrantStatus))
                .addValue("student_enrolled_grade", dimensionTypes.contains(DimensionType.StudentEnrolledGrade))
                .addValue("overall", dimensionTypes.contains(DimensionType.Overall))
                .addValue("isIncludeState", query.isIncludeState())
                .addValue("isIncludeAllDistricts", query.isIncludeAllDistricts())
                .addValue("isIncludeDistricts", (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()))
                .addValue("district_ids", padToSize(query.getDistrictIds(), organizationPartitionSize))
                .addValue("isIncludeAllSchoolsInDistricts", !query.getDistrictIdsWithAllSchools().isEmpty())
                .addValue("school_district_ids", padToSize(query.getDistrictIdsWithAllSchools(), organizationPartitionSize))
                .addValue("isIncludeSchools", !query.getSchoolIds().isEmpty())
                .addValue("school_ids", padToSize(query.getSchoolIds(), organizationPartitionSize))
                .addValue("all_genders", query.getGendersId().isEmpty())
                .addValue("gender_ids", padToSize(query.getGendersId(), genderMaxCount))
                .addValue("all_ethnicities", query.getEthnicityIds().isEmpty())
                .addValue("ethnicity_ids", padToSize(query.getEthnicityIds(), ethnicityMaxCount))
                .addValue("all_leps", query.getLepIds().isEmpty())
                .addValue("lep_ids", padToSize(query.getLepIds(), strictBooleanMaxCount))
                .addValue("all_migrant_statuses", query.getMigrantStatusIds().isEmpty())
                .addValue("migrant_status_ids", padToSize(query.getMigrantStatusIds(), booleanMaxCount))
                .addValue("all_section504s", query.getSection504Ids().isEmpty())
                .addValue("section504_ids", padToSize(query.getSection504Ids(), booleanMaxCount))
                .addValue("all_ieps", query.getIepIds().isEmpty())
                .addValue("iep_ids", padToSize(query.getIepIds(), strictBooleanMaxCount))
                .addValue("all_economic_disadvantages", query.getEconomicDisadvantageIds().isEmpty())
                .addValue("economic_disadvantage_ids", padToSize(query.getEconomicDisadvantageIds(), strictBooleanMaxCount));

        return jdbcTemplate.queryForObject(estimateReportRowCountSql, parameterSource, Integer.class);
    }

    private MapSqlParameterSource buildParameters(final ReportQuery query) {
        final MapSqlParameterSource parameters = new MapSqlParameterSource()
                .addValue("school_years", padToSize(query.getSchoolYears(), schoolYearMaxCount))
                .addValue("asmt_grade_ids", padToSize(query.getAsmtGradeIds(), asmtGradeMaxCount))
                .addValue("subject_ids", padToSize(query.getSubjectIds(), subjectMaxCount))
                .addValue("asmt_type_id", query.getAssessmentType().id());

        //TODO: do we want to loop for size greater than organizationPartitionSize?
        if (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()) {
            parameters.addValue("district_ids", padToSize(query.getDistrictIds(), organizationPartitionSize));
        }

        if (!query.getDistrictIdsWithAllSchools().isEmpty()) {
            parameters.addValue("school_district_ids", padToSize(query.getDistrictIdsWithAllSchools(), organizationPartitionSize));
        }
        if (!query.getSchoolIds().isEmpty()) parameters.addValue("school_ids", padToSize(query.getSchoolIds(), organizationPartitionSize));

        if (!query.getCompletenessIds().isEmpty()) {
            parameters.addValue("completeness_ids", padToSize(query.getCompletenessIds(), strictBooleanMaxCount));
        }
        if (!query.getAdministrativeConditionIds().isEmpty()) {
            parameters.addValue("administration_condition_ids", padToSize(query.getAdministrativeConditionIds(), adminConditionMaxCount));
        }

        if (query.contains(DimensionType.Gender) || !query.getGendersId().isEmpty()) {
            parameters
                    .addValue("all_genders", query.getGendersId().isEmpty())
                    .addValue("gender_ids", padToSize(query.getGendersId(), genderMaxCount));
        }
        if (query.contains(DimensionType.Ethnicity) || !query.getEthnicityIds().isEmpty()) {
            parameters
                    .addValue("all_ethnicities", query.getEthnicityIds().isEmpty())
                    .addValue("ethnicity_ids", padToSize(query.getEthnicityIds(), ethnicityMaxCount));
        }
        if (query.contains(DimensionType.LEP) || !query.getLepIds().isEmpty()) {
            parameters
                    .addValue("all_leps", query.getLepIds().isEmpty())
                    .addValue("lep_ids", padToSize(query.getLepIds(), strictBooleanMaxCount));
        }
        if (query.contains(DimensionType.MigrantStatus) || !query.getMigrantStatusIds().isEmpty()) {
            parameters
                    .addValue("all_migrant_statuses", query.getMigrantStatusIds().isEmpty())
                    .addValue("migrant_status_ids", padToSize(query.getMigrantStatusIds(), booleanMaxCount));
        }
        if (query.contains(DimensionType.Section504) || !query.getSection504Ids().isEmpty()) {
            parameters
                    .addValue("all_section504s", query.getSection504Ids().isEmpty())
                    .addValue("section504_ids", padToSize(query.getSection504Ids(), booleanMaxCount));
        }
        if (query.contains(DimensionType.IEP) || !query.getIepIds().isEmpty()) {
            parameters
                    .addValue("all_ieps", query.getIepIds().isEmpty())
                    .addValue("iep_ids", padToSize(query.getIepIds(), strictBooleanMaxCount));
        }
        if (query.contains(DimensionType.EconomicDisadvantage) || !query.getEconomicDisadvantageIds().isEmpty()) {
            parameters
                    .addValue("all_economic_disadvantages", query.getEconomicDisadvantageIds().isEmpty())
                    .addValue("economic_disadvantage_ids", padToSize(query.getEconomicDisadvantageIds(), strictBooleanMaxCount));
        }
        return parameters;
    }
}