package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.QueryWithReportTemplate;
import org.opentestsystem.rdw.olap.sqlbuilder.ReportQueryProvider;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ReportQueryProvider customAggregateQueryProvider;
    private final ActiveAssessmentRepository activeAssessmentRepository;

    @Value("${sql.estimateReportRowCount}")
    private String estimateReportRowCountSql;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final ReportQueryProvider customAggregateQueryProvider,
                                                  final ActiveAssessmentRepository activeAssessmentRepository) {
        this.jdbcTemplate = jdbcTemplate;
        this.customAggregateQueryProvider = customAggregateQueryProvider;
        this.activeAssessmentRepository = activeAssessmentRepository;
    }

    private static void validate(final ReportQuery query) {
        checkArgument(!IAB.code().equals(query.getAssessmentTypeCode()), "custom aggregate report for IAB is not supported yet");
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {

        validate(query);

        final List<ReportRow> reportRows = newArrayList();

        for (final QueryWithReportTemplate queryWithReportTemplate : customAggregateQueryProvider.toQuery(query)) {
            final Set<ReportRow> templateRows = queryWithReportTemplate.getReportTemplate();

            reportRows.addAll(jdbcTemplate.query(
                    queryWithReportTemplate.getSqlQuery(),
                    queryWithReportTemplate.getParameterSource(),
                    (row, index) -> removeFromTemplateIfExists(templateRows, ReportRow.builder()
                            .assessment(findByIdAndSchoolYear(query.getAssessmentTypeCode(), row.getInt("asmt_id"), row.getInt("school_year")))
                            .dimension(new Dimension(getNullable(row, row.getString("dimension_code")), DimensionType.caseInsensitiveValue(row.getString("dimension"))))
                            .organization(Organizations.map(row))
                            .measures(Measures.builder()
                                    .avgScaleScore(row.getInt("score"))
                                    .avgStdErr(row.getInt("std_err"))
                                    .level1Count(row.getInt("level1"))
                                    .level2Count(row.getInt("level2"))
                                    .level3Count(row.getInt("level3"))
                                    .level4Count(row.getInt("level4"))
                                    .build())
                            .build())));
            if (!templateRows.isEmpty()) reportRows.addAll(templateRows);
        }
        return reportRows;
    }

    /**
     * To simplify a report SQL, we are loading assessments separately.
     * This assumes/relies on the {@link ActiveAssessmentRepository#findAllByTypeCode(String)} to be cached.
     */
    private ActiveAssessment findByIdAndSchoolYear(final String assessmentTypeCode, final int assessmentId, int schoolYear) {
        for (final ActiveAssessment activeAssessment : activeAssessmentRepository.findAllByTypeCode(assessmentTypeCode)) {
            if (activeAssessment.getId() == assessmentId && activeAssessment.getExamSchoolYear() == schoolYear)
                return activeAssessment;
        }
        throw new IllegalArgumentException("unable to find an assessment by id " + assessmentId + " and school year " + schoolYear);
    }

    private ReportRow removeFromTemplateIfExists(final Set<ReportRow> template, final ReportRow rowToVerify) {
        ReportRow foundRow = null;

        for (final ReportRow row : template) {
            if (row.getDimension().equals(rowToVerify.getDimension()) && row.getOrganization().equals(rowToVerify.getOrganization()) && row.getAssessment().equals(rowToVerify.getAssessment()))
                foundRow = row;
        }

        if (foundRow != null) template.remove(foundRow);

        return rowToVerify;
    }

    @Override
    public int estimateReportRowCount(@NotNull final ReportQuery query) {

//        validate(query);
//        final Set<DimensionType> dimensionTypes = query.getDimensionTypes();
//        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
//                .addValue("school_years", query.getSchoolYears())
//                .addValue("asmt_grade_ids", query.getAssessmentGradeIds())
//                .addValue("subject_ids", query.getSubjectIds())
//                .addValue("asmt_type_id", query.getAssessmentType().id())
//                .addValue("gender", dimensionTypes.contains(DimensionType.Gender))
//                .addValue("ethnicity", dimensionTypes.contains(DimensionType.Ethnicity))
//                .addValue("iep", dimensionTypes.contains(DimensionType.IEP))
//                .addValue("lep", dimensionTypes.contains(DimensionType.LEP))
//                .addValue("section504", dimensionTypes.contains(DimensionType.Section504))
//                .addValue("economic_disadvantage", dimensionTypes.contains(DimensionType.EconomicDisadvantage))
//                .addValue("migrant_status", dimensionTypes.contains(DimensionType.MigrantStatus))
//                .addValue("student_enrolled_grade", dimensionTypes.contains(DimensionType.StudentEnrolledGrade))
//                .addValue("overall", dimensionTypes.contains(DimensionType.Overall))
//                .addValue("isIncludeState", query.isIncludeState())
//                .addValue("isIncludeAllDistricts", query.isIncludeAllDistricts())
//                .addValue("isIncludeDistricts", (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()))
//                .addValue("district_ids", nullOrEmptyToDefault(query.getDistrictIds(), UNMATCHABLE_IDS))
//                .addValue("isIncludeAllSchoolsInDistricts", !query.getDistrictIdsWithAllSchools().isEmpty())
//                .addValue("school_district_ids", nullOrEmptyToDefault(query.getDistrictIdsWithAllSchools(), UNMATCHABLE_IDS))
//                .addValue("isIncludeSchools", !query.getSchoolIds().isEmpty())
//                .addValue("school_ids", nullOrEmptyToDefault(query.getSchoolIds(), UNMATCHABLE_IDS))
//                .addValue("all_genders", query.getGendersId().isEmpty())
//                .addValue("gender_ids", nullOrEmptyToDefault(query.getGendersId(), UNMATCHABLE_INT_IDS))
//                .addValue("all_ethnicities", query.getEthnicityIds().isEmpty())
//                .addValue("ethnicity_ids", nullOrEmptyToDefault(query.getEthnicityIds(), UNMATCHABLE_INT_IDS))
//                .addValue("all_leps", query.getLepIds().isEmpty())
//                .addValue("lep_ids", nullOrEmptyToDefault(query.getLepIds(), UNMATCHABLE_INT_IDS))
//                .addValue("all_migrant_statuses", query.getMigrantStatusIds().isEmpty())
//                .addValue("migrant_status_ids", nullOrEmptyToDefault(query.getMigrantStatusIds(), UNMATCHABLE_INT_IDS))
//                .addValue("all_section504s", query.getSection504Ids().isEmpty())
//                .addValue("section504_ids", nullOrEmptyToDefault(query.getSection504Ids(), UNMATCHABLE_INT_IDS))
//                .addValue("all_ieps", query.getIepIds().isEmpty())
//                .addValue("iep_ids", nullOrEmptyToDefault(query.getIepIds(), UNMATCHABLE_INT_IDS))
//                .addValue("all_economic_disadvantages", query.getEconomicDisadvantageIds().isEmpty())
//                .addValue("economic_disadvantage_ids", nullOrEmptyToDefault(query.getEconomicDisadvantageIds(), UNMATCHABLE_INT_IDS));
//
//        return jdbcTemplate.queryForObject(estimateReportRowCountSql, parameterSource, Integer.class);
//        TODO:
        return 1000;
    }
}