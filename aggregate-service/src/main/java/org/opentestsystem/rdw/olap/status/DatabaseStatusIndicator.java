package org.opentestsystem.rdw.olap.status;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    private final NamedParameterJdbcTemplate olapJdbcTemplate;
    private final TenantProperties tenantProperties;

    @Autowired
    public DatabaseStatusIndicator(@Qualifier("olapJdbcTemplate") final NamedParameterJdbcTemplate olapJdbcTemplate,
                                   final TenantProperties tenantProperties) {
        this.olapJdbcTemplate = olapJdbcTemplate;
        this.tenantProperties = tenantProperties;
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    public String name() {
        return "OLAP-database";
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());

            final List<Status> statuses = newArrayList(getOlapReadStatus());
            builder.detail("databaseOperations - " + tenant.getId(), statuses);
            builder.worstRating(statuses);

            TenantContextHolder.clear();
        }
    }

    private Status getOlapReadStatus() {
        final Status.Builder builder = Status.builder()
                .detail("schema", "reporting")
                .detail("type", "READ");
        responseTime(builder, 10000, () ->
                olapJdbcTemplate.queryForList(
                        "SELECT * FROM status_indicator",
                        ImmutableMap.of()));
        return builder.build();
    }
}
