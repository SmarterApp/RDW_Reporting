
package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.model.ClaimRowIdentity;
import org.opentestsystem.rdw.olap.model.ReportRowIdentity;
import org.opentestsystem.rdw.olap.model.ReportTemplate;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.query.ClaimSqlQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.ClaimReportTemplateProvider;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Maps.newHashMap;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * Implementation of {@link ClaimReportRepository}
 */
@SuppressWarnings("unchecked")
@Repository
public class JdbcClaimReportRepository
        extends AbstractReportRepository<ClaimRow, ClaimReportResult, ClaimOrganizationQuery, ClaimReportResult.Builder>
        implements ClaimReportRepository {
    /**
     * Constructor
     */
    @Autowired
    JdbcClaimReportRepository(final ReportingSystemSettings systemSettings,
                              final JdbcTemplate jdbcTemplate,
                              final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                              final ActiveAssessmentRepository activeAssessmentRepository,
                              final OrganizationRepository organizationRepository,
                              final QueryProvider queryProvider,
                              final EmbargoRepository embargoRepository,
                              @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                              @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, organizationRepository, activeAssessmentRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected ClaimReportResult.Builder getReportBuilder() {
        return ClaimReportResult.builder();
    }

    @Override
    protected void validate(final ClaimOrganizationQuery query) {
        super.validate(query);
        checkArgument(!isEmpty(query.getClaimCodesBySubject()), "invalid query, missing a subject");
        checkArgument(!isEmpty(query.getAssessmentGradeCodes()), "invalid query, missing an assessment grade");
        checkArgument(!isEmpty(query.getSchoolYears()), "invalid query, missing a school year");
    }

    @Override
    protected ClaimSqlQueryWithReportTemplateProvider getQueryReportTemplateProvider(
            final Organization state,
            final int organizationPartitionSize,
            final QueryProvider queryProvider,
            final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
            final PermissionSource permissionSource) {
        return new ClaimSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource);
    }


    @Override
    protected ClaimRow buildReportRow(final ResultSet row, final ClaimOrganizationQuery query) throws SQLException {
        final String asmtTypeCode = query.getAssessmentTypeCode();
        return ClaimRow.builder()
                .organization(findOneByIdAndType(row.getLong("organization_id"), OrganizationType.valueOf(row.getString("organization_type"))))
                .assessment(findByIdAndSchoolYear(asmtTypeCode, row.getInt("asmt_id"), row.getInt("school_year")))
                .dimension(buildDimension(row, query))
                .measures(claimMeasures(row))
                .claimCode(row.getString("claim_code"))
                .build();
    }

    private Measures claimMeasures(final ResultSet row) throws SQLException {
        final Measures.Builder builder = Measures.builder()
                .level1Count(row.getInt("level1"))
                .level2Count(row.getInt("level2"))
                .level3Count(row.getInt("level3"))
                .level4Count(row.getInt("level4"))
                .level5Count(row.getInt("level5"))
                .level6Count(row.getInt("level6"));

        return builder.build();
    }

    @Override
    protected ReportRowIdentity createReportRowIdentity(final ClaimRow reportRow, final boolean considerAsmtIdAsPartOfIdentity) {
        return new ClaimRowIdentity(reportRow, considerAsmtIdAsPartOfIdentity);
    }

    @Override
    protected Map<ReportRowIdentity, ClaimRow> buildTemplateRowsByIdentity(final ReportTemplate queryWithReportTemplate,
                                                                           final ClaimOrganizationQuery query,
                                                                           final boolean considerAsmtIdAsPartOfIdentity) {
        final Map<ActiveAssessment, Set<String>> claimsByAssessment = getClaimsByAssessment(queryWithReportTemplate);

        final Map<ReportRowIdentity, ClaimRow> reportTemplate = newHashMap();
        // a template report consists of combinations of all the organizations and assessments
        queryWithReportTemplate.combinations((organization, assessment, dimension) -> {
            for (final String claimCode : claimsByAssessment.get(assessment)) {
                final ClaimRow row = buildEmptyReportRow(organization, assessment, dimension, query, claimCode);
                reportTemplate.put(createReportRowIdentity(row, considerAsmtIdAsPartOfIdentity), row);
            }
        });
        return reportTemplate;
    }


    private ClaimRow buildEmptyReportRow(final Organization organization,
                                         final ActiveAssessment assessment,
                                         final Dimension dimension,
                                         final ClaimOrganizationQuery query,
                                         final String claimCode) {
        return ClaimRow.builder()
                .assessment(assessment)
                .organization(organization)
                .dimension(buildDimension(dimension, query))
                .measures(Measures.getEmptyMeasure())
                .claimCode(claimCode)
                .build();
    }

    @Override
    public int estimateReportRowCountByOrganizationType(@NotNull final ClaimOrganizationQuery query,
                                                        @NotNull final OrganizationType groupByOrganizationType) {
        validate(query);
        final ReportTemplate reportTemplate = new ClaimReportTemplateProvider(getState(), getReportQueryRepositoryHelper())
                .toQuery(query, groupByOrganizationType);

        final Map<ActiveAssessment, Set<String>> claimsByAssessment = getClaimsByAssessment(reportTemplate);

        return (reportTemplate.getOrganizations().size()
                * claimsByAssessment.values().stream().flatMap(Collection::stream).collect(Collectors.toList()).size()
                * (reportTemplate.getDimensions().size() + (reportTemplate.isIncludeStudentEnrolledGradeDimension() ? 1 : 0)));
    }

    /**
     * @return collection of claims from the given {@link ReportTemplate} mapped by {@link ActiveAssessment} (may not be empty).
     * A set of claims for each assessment may not be null or empty;
     */
    private Map<ActiveAssessment, Set<String>> getClaimsByAssessment(final ReportTemplate reportTemplate) {
        final Map<ActiveAssessment, Set<String>> claimsByAssessment = newHashMap();
        final Map<String, Set<String>> claimCodesBySubject = reportTemplate.getClaimCodesBySubject();

        for (final ActiveAssessment activeAssessment : reportTemplate.getAssessments()) {
            if (!claimCodesBySubject.containsKey(activeAssessment.getSubjectCode())) throw new IllegalStateException("unable to find assessment for the claim subject");
            claimsByAssessment.put(activeAssessment, claimCodesBySubject.get(activeAssessment.getSubjectCode()));

        }
        return claimsByAssessment;
    }
}