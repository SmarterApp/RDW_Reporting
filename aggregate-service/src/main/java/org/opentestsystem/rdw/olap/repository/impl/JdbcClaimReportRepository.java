
package org.opentestsystem.rdw.olap.repository.impl;

import org.opentestsystem.rdw.olap.model.ClaimOrganizationQuery;
import org.opentestsystem.rdw.olap.model.ClaimReportResult;
import org.opentestsystem.rdw.olap.repository.ActiveAssessmentRepository;
import org.opentestsystem.rdw.olap.repository.ClaimReportRepository;
import org.opentestsystem.rdw.olap.repository.EmbargoRepository;
import org.opentestsystem.rdw.olap.repository.OrganizationRepository;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.query.ClaimSqlQueryWithReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.template.ClaimReportTemplateProvider;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.ClaimRow;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static org.springframework.util.CollectionUtils.isEmpty;

/**
 * Implementation of {@link ClaimReportRepository}
 */
@SuppressWarnings("unchecked")
@Repository
public class JdbcClaimReportRepository
        extends AbstractReportRepository<ClaimRow, ClaimReportResult, ClaimOrganizationQuery, ClaimReportResult.Builder>
        implements ClaimReportRepository {
    /**
     * Constructor
     */
    @Autowired
    JdbcClaimReportRepository(final ReportingSystemSettings systemSettings,
                              final JdbcTemplate jdbcTemplate,
                              final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
                              final ActiveAssessmentRepository activeAssessmentRepository,
                              final OrganizationRepository organizationRepository,
                              final QueryProvider queryProvider,
                              final EmbargoRepository embargoRepository,
                              @Value("${app.aggregate-reports.custom-aggregate-report-repository.jdbc-fetch-size}") final int jdbcFetchSize,
                              @Value("${app.aggregate-reports.custom-aggregate-report-repository.organization-partition-size}") final int organizationPartitionSize) {
        super(systemSettings, jdbcTemplate, reportQueryRepositoryHelper, organizationRepository, activeAssessmentRepository, queryProvider, embargoRepository, jdbcFetchSize, organizationPartitionSize);
    }

    @Override
    protected ClaimReportResult.Builder getReportBuilder() {
        return ClaimReportResult.builder();
    }

    @Override
    protected void validate(final ClaimOrganizationQuery query) {
        super.validate(query);
        checkArgument(!isEmpty(query.getSubjectCodes()), "invalid query, missing a subject");
        checkArgument(!isEmpty(query.getAssessmentGradeCodes()), "invalid query, missing an assessment grade");
        checkArgument(!isEmpty(query.getSchoolYears()), "invalid query, missing a school year");
    }

    @Override
    protected ClaimSqlQueryWithReportTemplateProvider getQueryReportTemplateProvider(
            final Organization state,
            final int organizationPartitionSize,
            final QueryProvider queryProvider,
            final QueryProviderRepositoryHelper reportQueryRepositoryHelper,
            final PermissionSource permissionSource) {
        return new ClaimSqlQueryWithReportTemplateProvider(state, organizationPartitionSize, queryProvider, reportQueryRepositoryHelper, permissionSource);
    }

    @Override
    protected ClaimReportTemplateProvider getReportTemplateProvider(final Organization state, final QueryProviderRepositoryHelper reportQueryRepositoryHelper) {
        return new ClaimReportTemplateProvider(state, reportQueryRepositoryHelper);
    }

    @Override
    protected ClaimRow buildReportRow(final ResultSet row, final ClaimOrganizationQuery query) throws SQLException {
        final String asmtTypeCode = query.getAssessmentTypeCode();
        return ClaimRow.builder()
                .organization(findOneByIdAndType(row.getLong("organization_id"), OrganizationType.valueOf(row.getString("organization_type"))))
                .assessment(findByIdAndSchoolYear(asmtTypeCode, row.getInt("asmt_id"), row.getInt("school_year")))
                .dimension(buildDimension(row, query))
                .measures(claimMeasures(row))
                .claimCode(row.getString("claim_code"))
                .build();
    }

    @Override
    protected ClaimRow buildEmptyReportRow(final Organization organization,
                                           final ActiveAssessment assessment,
                                           final Dimension dimension,
                                           final ClaimOrganizationQuery query,
                                           final String claimCode) {
        return ClaimRow.builder()
                .assessment(assessment)
                .organization(organization)
                .dimension(buildDimension(dimension, query))
                .measures(Measures.getEmptyMeasure())
                .claimCode(claimCode)
                .build();
    }


    private Measures claimMeasures(final ResultSet row) throws SQLException {
        final Measures.Builder builder = Measures.builder()
                .level1Count(row.getInt("level1"))
                .level2Count(row.getInt("level2"))
                .level3Count(row.getInt("level3"));

        return builder.build();
    }

    @Override
    protected ReportRowIdentity createReportRowIdentity(final ClaimRow reportRow, final boolean considerAsmtIdAsPartOfIdentity) {
        return new ClaimRowIdentity(reportRow, considerAsmtIdAsPartOfIdentity);
    }

    private static class ClaimRowIdentity extends AbstractReportRepository.ReportRowIdentity {
        final String claimCode;

        ClaimRowIdentity(final ClaimRow reportRow, final boolean considerAsmtIdAsPartOfIdentity) {
            super(reportRow, considerAsmtIdAsPartOfIdentity);
            claimCode = reportRow.getClaimCode();
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            final ClaimRowIdentity that = (ClaimRowIdentity) o;
            return Objects.equals(claimCode, that.claimCode) &&
                    super.equals(o);
        }

        @Override
        public int hashCode() {
            return Objects.hash(super.hashCode(), claimCode);
        }
    }
}