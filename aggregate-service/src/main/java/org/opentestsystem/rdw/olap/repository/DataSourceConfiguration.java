package org.opentestsystem.rdw.olap.repository;

import org.opentestsystem.rdw.multitenant.DataSourceElements;
import org.opentestsystem.rdw.multitenant.DataSourceUrlParts;
import org.opentestsystem.rdw.multitenant.TenantDataSourceOverrideResolver;
import org.opentestsystem.rdw.multitenant.TenantDatasourceOverride;
import org.opentestsystem.rdw.multitenant.TenantDynamicRoutingDataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.sql.DataSource;

/**
 * Configuration for DataSources.
 */
@Configuration
public class DataSourceConfiguration {

    /**
     * DataSourceElements for OLAP
     *
     * @return OLAP DataSourceElements
     */
    @Primary
    @Bean(name = "olapDataSourceElements")
    @ConfigurationProperties("spring.olap_datasource")
    public DataSourceElements olapDataSourceElements() {
        return new DataSourceElements();
    }

    /**
     * TenantDataSourceOverrideResolver for OLAP
     *
     * @param dataSourceElements olap DataSourceElements
     * @return TenantDataSourceOverrideResolver for OLAP
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "olapTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver olapTenantDataSourceOverrideResolver(@Qualifier("olapDataSourceElements") DataSourceElements dataSourceElements) {
        return createTenantDataSourceOverrideResolver(dataSourceElements);
    }

    /**
     * Data source for the olap reporting data mart with no transaction manager.
     *
     * @param dataSourceElements               olap DataSourceElements
     * @param tenantDataSourceOverrideResolver olap TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Bean(name = "olapDatasource")
    public DataSource olapDatasource(@Qualifier("olapDataSourceElements") DataSourceElements dataSourceElements,
                                          @Qualifier("olapTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElements, tenantDataSourceOverrideResolver);
    }

    /**
     * The jdbc template used for for the olap reporting data mart.
     *
     * @return DataSource
     */
    @Bean(name = "olapJdbcTemplate")
    public NamedParameterJdbcTemplate olapJdbcTemplate(@Qualifier("olapDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    private TenantDataSourceOverrideResolver createTenantDataSourceOverrideResolver(
            DataSourceElements dataSourceElements) {
        return tenantId -> {
            DataSourceUrlParts dataSourceUrlParts = dataSourceElements.getUrlParts();
            //This a temporary implementation
            //shortly we will use permanent storage or configuration
            //to determine the overrides, for now simply re-use the
            //default configuration regardless of tenant
            final String url = String.format("%s//%s/%s?%s",
                    dataSourceUrlParts.getProtocol(),
                    dataSourceUrlParts.getHosts(),
                    dataSourceUrlParts.getDatabase(),
                    dataSourceUrlParts.getProperties());
            final String username = dataSourceElements.getUsername();
            final String password = dataSourceElements.getPassword();
            return new TenantDatasourceOverride(username, password, url);
        };
    }

}