package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery;
import org.opentestsystem.rdw.olap.model.LongitudinalOrganizationQuery.Builder;
import org.opentestsystem.rdw.olap.service.LongitudinalYearGradeService;
import org.opentestsystem.rdw.olap.sqlbuilder.impl.QueryProviderRepositoryHelper;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Lists.newArrayList;

/*
 * Responsible for converting {@link LongitudinalReportQuery} into a collection
 * of corresponding {@link LongitudinalOrganizationQuery} queries
 */
@Component
class LongitudinalQueryConverter extends AbstractQueryConverter<LongitudinalReportQuery, LongitudinalOrganizationQuery, Builder> {

    private final LongitudinalYearGradeService longitudinalYearGradeService;

    @Autowired
    LongitudinalQueryConverter(final QueryProviderRepositoryHelper repositoryHelper,
                               final LongitudinalYearGradeService longitudinalYearGradeService) {
        super(repositoryHelper);
        this.longitudinalYearGradeService = longitudinalYearGradeService;
    }

    @Override
    protected LongitudinalOrganizationQuery.Builder getOrganizationTypeQueryBuilder(final LongitudinalReportQuery reportQuery,
                                                                                    final StudentFilters filters) {
        checkArgument(reportQuery.getSubjectCodes().size() == 1, "Only one subject is supported for the longitudinal report queries");

        return LongitudinalOrganizationQuery.builder()
                .subjectCode(reportQuery.getSubjectCodes().iterator().next())
                .gradeYearPairs(longitudinalYearGradeService.toYearGradePairs(reportQuery.getToSchoolYear(), reportQuery.getAssessmentGradeCodes()));
    }

    /**
     * {@link LongitudinalOrganizationQuery} supports one subject at a time. Because of this we are duplicating
     * the given query into multiple versions - one per subject.
     */
    @Override
    protected List<LongitudinalReportQuery> unwrapToSupportedQueries(final LongitudinalReportQuery reportQuery) {

        final List<LongitudinalReportQuery> queries = newArrayList();

        // LongitudinalOrganizationQuery supports one subject at a time
        for (final String subjectCode : reportQuery.getSubjectCodes()) {
            queries.add(reportQuery.copy().subjectCodes(of(subjectCode)).build());
        }
        return queries;
    }
}