package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.Organization;

import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.model.DimensionType.StudentEnrolledGrade;


/**
 * This implementation is responsible for converting {@link OrganizationTypeQuery} into {@link ReportContext}
 */
@SuppressWarnings("unchecked")
public class CustomAggregateReportContextProvider<B extends ReportContext.Builder, T extends ReportContext> extends CustomAggregateProviderTemplate<B, T> {

    private final Organization state;
    private final QueryProviderRepositoryHelper repositoryHelper;

    public CustomAggregateReportContextProvider(final Organization state,
                                                final QueryProviderRepositoryHelper repositoryHelper) {
        this.repositoryHelper = repositoryHelper;
        this.state = state;
    }

    QueryProviderRepositoryHelper getRepositoryHelper() {
        return repositoryHelper;
    }

    @Override
    public B createBuilderWithCommonAttributes(final OrganizationTypeQuery query) {
        final B builder = createBuilderInstance();

        builder.assessments(repositoryHelper.findAssessmentsForQuery(query));

        final DimensionType dimensionType = query.getDimensionType();

        //we do not back-fill data for this dimension type
        if (dimensionType.equals(StudentEnrolledGrade)) return (B) builder.includeStudentEnrolledGradeDimension(true);

        return (B) builder.dimensions(repositoryHelper.findDimensionsByTypeAndQueryFilters(dimensionType, query));
    }

    @Override
    public B createBuilderWithState(final String assessmentTypeCode) {
        return (B) createBuilderInstance().state(state);
    }

    @Override
    public B createBuilderWithAllDistricts(final String assessmentTypeCode) {
        return (B) createBuilderInstance().districts(repositoryHelper.findAllDistricts());
    }

    @Override
    public B createBuilderWithDistrictIds(final String assessmentTypeCode, final Set<Long> districtIds) {
        return (B) createBuilderInstance().districts(repositoryHelper.findDistrictsByIds(districtIds));
    }

    @Override
    public B createBuilderWithAllSchoolsOfDistricts(final String assessmentTypeCode, final Set<Long> districtIds) {
        return (B) createBuilderInstance().schools(repositoryHelper.findSchoolsByDistrictIds(districtIds));
    }

    @Override
    public B createBuilderWithSchoolIds(final String assessmentTypeCode, final Set<Long> schoolIds) {
        return (B) createBuilderInstance().schools(repositoryHelper.findSchoolsByIds(schoolIds));
    }

    @Override
    protected T build(final B builder) {
        return (T) builder.build();
    }

    @Override
    protected B createBuilderInstance() {
        return (B) ReportContext.builder();
    }
}