package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.olap.service.UserOrganizationService;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Set;

import static com.google.common.collect.ImmutableSet.toImmutableSet;
import static com.google.common.collect.Sets.newLinkedHashSet;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;

@Service
class DefaultAuthorizationService implements AuthorizationService {

    // TODO assessment type entity should carry policy settings like "allow-statewide-user-to-make-aggregate-reports"
    private static final Set<Integer> InterimAssessmentTypeIds = ImmutableSet.of(1, 2);
    private final UserOrganizationService userOrganizationService;
    private final boolean statewideInterimEnabled;

    @Autowired
    DefaultAuthorizationService(
            final UserOrganizationService userOrganizationService,
            @Value("${app.aggregate-reports.statewide-interim-enabled}") final boolean statewideInterimEnabled) {
        this.userOrganizationService = userOrganizationService;
        this.statewideInterimEnabled = statewideInterimEnabled;
    }

    @Override
    public void checkAuthorization(final User user, final ReportQuery query) {
        checkOrganizationPermissions(user, query.getDistrictIds(), query.getSchoolIds());
        checkAssessmentTypePermission(user, query.getAssessmentType());
    }

    @Override
    public Set<CodedEntity> getAuthorizedAssessmentTypes(final User user, final Collection<CodedEntity> assessmentTypes) {
        final PermissionScope permissionScope = user.getPermissionScopeByPermissionId(AggregateRead);
        // if the flag is set, statewide aggregate users can be prevented from generating statewide aggregate interim reports
        if (!statewideInterimEnabled && permissionScope.isStatewide()) {
            return assessmentTypes.stream()
                    .filter(type -> !InterimAssessmentTypeIds.contains(type.getId()))
                    .collect(toImmutableSet());
        }
        return ImmutableSet.copyOf(assessmentTypes);
    }

    /**
     * Checks to make sure the given user has permission to run aggregate reports on the given districts and schools
     *
     * @param user        the {@link User} creating the report
     * @param districtIds the requested district IDs for the report
     * @param schoolIds   the requested school IDs for the report
     */
    private void checkOrganizationPermissions(final User user, final Set<Integer> districtIds, final Set<Integer> schoolIds) {

        // reduce user's entitled schools and districts to IDs for security check
        final Set<Integer> userDistrictIds = newLinkedHashSet();
        final Set<Integer> userSchoolIds = newLinkedHashSet();
        for (final Organization organization : userOrganizationService.getOrganizations(user)) {
            if (organization.getOrganizationType() == OrganizationType.School) {
                userSchoolIds.add((int) organization.getId());
            } else if (organization.getOrganizationType() == OrganizationType.District) {
                userDistrictIds.add((int) organization.getId());
            }
        }

        for (final Integer districtId : districtIds) {
            if (!userDistrictIds.contains(districtId)) {
                throw new RuntimeException(String.format(
                        "user (%s) does not have access to district (ID: %s)", user.getUsername(), districtId));
            }
        }

        for (final Integer schoolId : schoolIds) {
            if (!userSchoolIds.contains(schoolId)) {
                throw new RuntimeException(String.format(
                        "user (%s) does not have access to school (ID: %s)", user.getUsername(), schoolId));
            }
        }
    }

    /**
     * Checks to make sure that the given user has rights to create reports of the given assessment type
     *
     * @param user           the {@link User} creating the report
     * @param assessmentType the requested assessment type of the report
     */
    private void checkAssessmentTypePermission(final User user, final AssessmentType assessmentType) {
        if (user.getPermissionScopeByPermissionId(AggregateRead).isStatewide()
        && !statewideInterimEnabled
        && InterimAssessmentTypeIds.contains(assessmentType.id())) {
            throw new RuntimeException(String.format(
                    "user (%s) is not allowed to create custom aggregate reports for assessment type (%s)",
                    user.getUsername(), assessmentType.name()));
        }
    }

}
