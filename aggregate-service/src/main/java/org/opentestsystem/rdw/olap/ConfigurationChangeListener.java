package org.opentestsystem.rdw.olap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
import org.springframework.context.event.EventListener;

public class ConfigurationChangeListener {
    private static final Logger logger = LoggerFactory.getLogger(ConfigurationChangeListener.class);

    private final CacheManager cacheManager;
    private final CacheConfiguration cacheConfiguration;

    @Autowired
    public ConfigurationChangeListener(final CacheManager cacheManager, final CacheConfiguration cacheConfiguration) {
        this.cacheManager = cacheManager;
        this.cacheConfiguration = cacheConfiguration;
    }

    /**
     * Listen for {@link EnvironmentChangeEvent} and clear all caches
     *
     * @param environmentChangeEvent event payload
     */
//    @EventListener
    public void environmentChangeEventClearCaches(final EnvironmentChangeEvent environmentChangeEvent) {
        logger.warn("EnvironmentChangeEvent - {}", environmentChangeEvent);
        try {
            cacheManager.getCacheNames().forEach(name -> {
                logger.warn("clearing " + name);
                cacheManager.getCache(name).clear();
            });
        } catch (Exception e) {
            //no end user log only
            logger.warn("Unable to publish configprops", e);
        }
    }

    @EventListener
    public void environmentChangeEventClearCaches2(final EnvironmentChangeEvent environmentChangeEvent) {
        logger.warn("EnvironmentChangeEvent - {}", environmentChangeEvent);
        try {
            cacheConfiguration.clearRepositoryCache();
        } catch (Exception e) {
            //no end user log only
            logger.warn("Unable to publish configprops", e);
        }
    }
}
