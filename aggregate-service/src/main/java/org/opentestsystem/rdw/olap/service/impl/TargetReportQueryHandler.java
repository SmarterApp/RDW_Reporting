package org.opentestsystem.rdw.olap.service.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.olap.AggregateReportSettings;
import org.opentestsystem.rdw.olap.model.TargetOrganizationQuery;
import org.opentestsystem.rdw.olap.model.TargetReportResult;
import org.opentestsystem.rdw.olap.model.TargetReportResult.Builder;
import org.opentestsystem.rdw.olap.repository.TargetReportRepository;
import org.opentestsystem.rdw.olap.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.model.AggregateQuery;
import org.opentestsystem.rdw.reporting.common.model.AggregateReportType;
import org.opentestsystem.rdw.reporting.common.model.TargetReportQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Responsible for handling {@link TargetReportQuery}
 */
@Service
class TargetReportQueryHandler extends AbstractAggregateQueryHandler<TargetRow,
        TargetReportResult,
        TargetReportQuery,
        Builder,
        TargetOrganizationQuery,
        TargetOrganizationQuery.Builder> {


    @Autowired
    TargetReportQueryHandler(
            final TargetReportRepository repository,
            final AuthorizationService authorizationService,
            final AggregateReportSettings settings,
            final TargetQueryConverter queryConverter,
            final TaskExecutor threadPoolTaskExecutor) {
        super(repository, queryConverter, authorizationService, settings, threadPoolTaskExecutor);
    }

    @Override
    public boolean handles(final AggregateQuery query) {
        return AggregateReportType.Target.equals(query.getReportType());
    }

    @Override
    protected Builder getReportResultBuilder() {
        return TargetReportResult.builder();
    }

    @Override
    protected TargetReportQuery preProcess(final TargetReportQuery query) {
        checkArgument(query.getSubjectCode() != null, "invalid query, missing a subject");
        checkArgument(query.getAssessmentGradeCodes().size() == 1, "invalid query, must have one assessment grade");
        checkArgument(!query.isIncludeAllDistrictsOfSchools() && !query.isIncludeAllDistricts()
                && !query.isIncludeState() && !query.isIncludeAllSchoolsOfDistricts()
                && ((query.getSchoolIds().size() == 1 && query.getDistrictIds().isEmpty()) ||
                (query.getDistrictIds().size() == 1 && query.getSchoolIds().isEmpty())), "invalid query, supports one school or one district only");
        checkArgument(!query.isFilteredSubgroupQuery(), "does not support filtered subgroups");

        if (query.getAssessmentTypeCode() == null) return super.preProcess(query.copy().assessmentTypeCode(AssessmentType.SUMMATIVE.code()).build());

        checkArgument(AssessmentType.SUMMATIVE.code().equals(query.getAssessmentTypeCode()), "supports summative assessments only");
        return super.preProcess(query);
    }
}