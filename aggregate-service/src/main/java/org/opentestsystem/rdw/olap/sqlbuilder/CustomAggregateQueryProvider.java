package org.opentestsystem.rdw.olap.sqlbuilder;

import com.google.common.collect.ImmutableSet;
import com.healthmarketscience.sqlbuilder.CustomSql;
import com.healthmarketscience.sqlbuilder.SelectQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.PropertyPlaceholderHelper;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.healthmarketscience.sqlbuilder.SetOperationQuery.unionAll;
import static java.util.Arrays.copyOf;

/**
 * This implementation is responsible for constructing a custom aggregate query.
 * <p>
 * It used a tokenized version of the SQL query and replaces tokens with the queries built using {@link QueryProvider}.
 */
@Component
public class CustomAggregateQueryProvider implements ReportQueryProvider {
    private static final String customAggregateTemplateSql = "customAggregate";
    private static final String customAggregateAllPermutationsTemplateSql = "customAggregateAllPermutations";
    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";
    private static final String allSchoolsInDistrictsAddOn = "allSchoolsInDistricts";

    private final QueryProvider queryProvider;

    @Value("${sql.customAggregate}")
    private String customAggregateSql;

    @Value("${sql.customAggregateByEnrolledGrade}")
    private String customAggregateByEnrolledGradeSql;

    @Autowired
    public CustomAggregateQueryProvider(final QueryProvider queryProvider) {
        this.queryProvider = queryProvider;
    }

    public String toSqlQueryString(final ReportQuery query) {
        final List<SelectQuery> queries = newArrayList();

        // {@link ReportQuery} may include different types of organizations as well as different dimensions.
        // Each pair of organization/dimension is a separate SQL query.
        // To avoid multiple round-trips to Redshift we build one query by combining them with 'UNION ALL' SQL clauses.
        for (final DimensionType dimension : query.getDimensionTypes()) {
            if (query.isIncludeState()) {
                queries.add(buildSql(newArrayList(stateAddOn), dimension, query));
            }

            if (query.isIncludeAllDistricts()) {
                queries.add(buildSql(newArrayList(allDistrictsAddOn), dimension, query));
            } else if (!query.getDistrictIds().isEmpty()) {
                queries.add(buildSql(newArrayList(allDistrictsAddOn, districtsAddOn), dimension, query));
            }

            if (!query.getDistrictIdsWithAllSchools().isEmpty()) {
                queries.add(buildSql(newArrayList(allSchoolsInDistrictsAddOn), dimension, query));
            }

            if (!query.getSchoolIds().isEmpty()) {
                queries.add(buildSql(newArrayList(schoolsAddOn), dimension, query));
            }
        }
        return queries.size() == 1 ? queries.get(0).toString() : unionAll(copyOf(queries.toArray(), queries.size(), SelectQuery[].class)).toString();
    }

    /**
     * Given `add-on`s that represent an `organization` part, build a SQL for the given dimension and query filters
     *
     * @param addOns        the collection of `add on`s that represent an `organization` part of SQL
     * @param dimensionType the {@link DimensionType} to add
     * @param query         the original {@link ReportQuery} with the filters
     * @return a built SQL string
     */
    private SelectQuery buildSql(final Collection<String> addOns, final DimensionType dimensionType, final ReportQuery query) {
        addOns.add(dimensionType.name());

        final Properties properties = new Properties();
        properties.put(customAggregateTemplateSql, buildCustomAggregateSqlString(query, ImmutableSet.copyOf(addOns)));

        if (dimensionType.equals(DimensionType.StudentEnrolledGrade)) {
            return new SelectQuery().addCustomColumns(new CustomSql(replacePlaceholders(customAggregateByEnrolledGradeSql, properties)));
        } else {
            properties.put(customAggregateAllPermutationsTemplateSql, queryProvider.newQuery(customAggregateAllPermutationsTemplateSql, addOns).toString());
            return new SelectQuery().addCustomColumns(new CustomSql(replacePlaceholders(customAggregateSql, properties)));
        }
    }

    private String buildCustomAggregateSqlString(final ReportQuery query, final ImmutableSet<String> addOns) {
        final Set<String> addOnsWithFilters = new HashSet(addOns);

        if (!query.getAdministrativeConditionCodes().isEmpty()) addOnsWithFilters.add("administration_condition");
        if (!query.getCompletenessCodes().isEmpty()) addOnsWithFilters.add("completeness");
        return queryProvider.newQuery(customAggregateTemplateSql, addOnsWithFilters).toString();
    }

    private String replacePlaceholders(final String val, final Properties properties) {
        final PropertyPlaceholderHelper propertyPlaceholderHelper = new PropertyPlaceholderHelper("@{template.", "}");
        return propertyPlaceholderHelper.replacePlaceholders(val, properties);
    }
}
