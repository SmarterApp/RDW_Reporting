package org.opentestsystem.rdw.olap.sqlbuilder;

import com.healthmarketscience.sqlbuilder.SelectQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

/**
 * This implementation is responsible for constructing a custom aggregate query.
 * <p>
 * It used a tokenized version of the SQL query and replaces tokens with the queries built using {@link QueryProvider}.
 */
@Component
public class CustomAggregateQueryProvider implements ReportQueryProvider {
    private static final String customAggregateTemplateSql = "customAggregate";
    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";
    private static final String allSchoolsInDistrictsAddOn = "allSchoolsInDistricts";

    private final QueryProvider queryProvider;

    @Autowired
    public CustomAggregateQueryProvider(final QueryProvider queryProvider) {
        this.queryProvider = queryProvider;
    }

    public Iterable<String> toSqlQueryStrings(final ReportQuery query) {
        final List<SelectQuery> queries = newArrayList();

        for (final DimensionType dimension : query.getDimensionTypes()) {
            if (query.isIncludeState()) {
                queries.add(buildSql(newArrayList(stateAddOn), dimension, query));
            }

            if (query.isIncludeAllDistricts()) {
                queries.add(buildSql(newArrayList(allDistrictsAddOn), dimension, query));
            } else if (!query.getDistrictIds().isEmpty()) {
                queries.add(buildSql(newArrayList(allDistrictsAddOn, districtsAddOn), dimension, query));
            }

            if (!query.getDistrictIdsWithAllSchools().isEmpty()) {
                queries.add(buildSql(newArrayList(allSchoolsInDistrictsAddOn), dimension, query));
            }

            if (!query.getSchoolIds().isEmpty()) {
                queries.add(buildSql(newArrayList(schoolsAddOn), dimension, query));
            }
        }
        return queries.stream().map(SelectQuery::toString).collect(toList());
    }

    /**
     * Given `add-on`s that represent an `organization` part, build a SQL for the given dimension and query filters
     *
     * @param addOns        the collection of `add on`s that represent an `organization` part of SQL
     * @param dimensionType the {@link DimensionType} to add
     * @param query         the original {@link ReportQuery} with the filters
     * @return a built SQL string
     */
    private SelectQuery buildSql(final Collection<String> addOns, final DimensionType dimensionType, final ReportQuery query) {
        addOns.add(dimensionType.name());

        if (!query.getAdministrativeConditionIds().isEmpty()) addOns.add("administration_condition");
        if (!query.getCompletenessIds().isEmpty()) addOns.add("completeness");
        if (dimensionType != DimensionType.Gender && !query.getGendersId().isEmpty()) addOns.add(DimensionType.Gender.name() + "_filter");
        if (dimensionType != DimensionType.Ethnicity && !query.getEthnicityIds().isEmpty()) addOns.add(DimensionType.Ethnicity.name() + "_filter");
        if (dimensionType != DimensionType.LEP && !query.getLepIds().isEmpty()) addOns.add(DimensionType.LEP.name() + "_filter");
        if (dimensionType != DimensionType.MigrantStatus && !query.getMigrantStatusIds().isEmpty()) addOns.add(DimensionType.MigrantStatus.name() + "_filter");
        if (dimensionType != DimensionType.Section504 && !query.getSection504Ids().isEmpty()) addOns.add(DimensionType.Section504.name() + "_filter");
        if (dimensionType != DimensionType.IEP && !query.getIepIds().isEmpty()) addOns.add(DimensionType.IEP.name() + "_filter");
        if (dimensionType != DimensionType.EconomicDisadvantage && !query.getEconomicDisadvantageIds().isEmpty()) addOns.add(DimensionType.EconomicDisadvantage.name() + "_filter");

        return queryProvider.newQuery(customAggregateTemplateSql, addOns);
    }
}
