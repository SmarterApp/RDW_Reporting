package org.opentestsystem.rdw.olap;

import com.google.common.collect.ImmutableSet;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.Set;

import static com.google.common.collect.ImmutableSet.toImmutableSet;

@Component
@ConfigurationProperties(prefix = "app.aggregate-reports")
public class AggregateReportSettings {

    /**
     * The assessment types non statewide aggregate reporters can select for aggregate reports
     */
    private Set<String> assessmentTypes;

    /**
     * The assessment types a statewide aggregate reporter can select for aggregate reports
     */
    private Set<String> statewideUserAssessmentTypes;

    /**
     * The assessment types allowed for the state level aggregation in the aggregate report
     */
    private Set<String> stateAggregateAssessmentTypes;

    public Set<String> getAssessmentTypes() {
        return assessmentTypes;
    }

    public void setAssessmentTypes(final Set<String> values) {
        this.assessmentTypes = toTypeSet(values);
    }

    public Set<String> getStatewideUserAssessmentTypes() {
        return statewideUserAssessmentTypes;
    }

    public Set<String> getStateAggregateAssessmentTypes() {
        return stateAggregateAssessmentTypes;
    }

    public void setStatewideUserAssessmentTypes(final Set<String> values) {
        this.statewideUserAssessmentTypes = toTypeSet(values);
    }

    public void setStateAggregateAssessmentTypes(final Set<String> values) {
        this.stateAggregateAssessmentTypes = toTypeSet(values);
    }

    /**
     * This helper allows the property to be set to "null" (or "none") to create an empty set.
     * This is necessary because the default setting for this property is not empty and there
     * is no Spring way to create an empty property that overrides the default setting.
     *
     * @param values type values, may be null
     * @return immutable set with "none"/"null" removed, may be empty but never null
     */
    private static ImmutableSet<String> toTypeSet(final Set<String> values) {
        return values == null ? ImmutableSet.of() : values.stream()
                .filter(value -> !value.equalsIgnoreCase("none") && !value.equalsIgnoreCase("null"))
                .collect(toImmutableSet());
    }
}
