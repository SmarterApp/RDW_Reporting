package org.opentestsystem.rdw.olap.service.impl;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.olap.model.CodedEntity;
import org.opentestsystem.rdw.olap.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.olap.service.AssessmentTypeService;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Set;

import static com.google.common.collect.ImmutableSet.toImmutableSet;
import static org.opentestsystem.rdw.olap.model.AggregateServicePermission.AggregateRead;

@Service
class DefaultAssessmentTypeService implements AssessmentTypeService {

    // TODO assessment type should have flag to indicate whether it is interim or not
    // or should cary policy settings like "allow-statewide-user-to-make-aggregate-reports"
    private static final Set<String> InterimAssessmentTypeCodes = ImmutableSet.of("iab", "ica");

    private final AssessmentTypeRepository repository;
    private final boolean interimAggregateReportsForStatewideUsersEnabled;

    @Autowired
    DefaultAssessmentTypeService(
            final AssessmentTypeRepository repository,
            @Value("${app.interim-aggregate-reports-for-statewide-users-enabled}") final boolean interimAggregateReportsForStatewideUsersEnabled) {
        this.repository = repository;
        this.interimAggregateReportsForStatewideUsersEnabled = interimAggregateReportsForStatewideUsersEnabled;
    }

    @Override
    public Set<CodedEntity> getAssessmentTypes(final User user) {
        final PermissionScope permissionScope = user.getPermissionScopeByPermissionId(AggregateRead);
        // if the flag is set, statewide aggregate users can be prevented from generating statewide aggregate interim reports
        if (!interimAggregateReportsForStatewideUsersEnabled && permissionScope.isStatewide()) {
            return repository.findAll().stream()
                    .filter(type -> !InterimAssessmentTypeCodes.contains(type.getCode()))
                    .collect(toImmutableSet());
        }
        return ImmutableSet.copyOf(repository.findAll());
    }

}
