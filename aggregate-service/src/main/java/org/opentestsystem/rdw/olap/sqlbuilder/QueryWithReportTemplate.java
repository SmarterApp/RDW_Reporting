package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.reporting.common.model.ActiveAssessment;
import org.opentestsystem.rdw.reporting.common.model.Dimension;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Measures;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.ReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ReportRow;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;

/**
 * This is a helper class that is used during conversion of the {@link ReportQuery} to a sql string, its parameters and a template version of the report.
 * The template version represents all report rows but with an 'empty' measure. It is used to backfill the missing data when the final report is created.
 */
public class QueryWithReportTemplate {
    private String sqlQuery;
    private MapSqlParameterSource parameterSource;
    private Set<ReportRow> reportTemplate;

    public String getSqlQuery() {
        return sqlQuery;
    }

    public MapSqlParameterSource getParameterSource() {
        return parameterSource;
    }

    public Set<ReportRow> getReportTemplate() {
        return newHashSet(reportTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private static final Measures emptyMeasure = Measures.builder().build();
        private final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
        private final List<String> addOns = newArrayList();

        private Set<Organization> organizations = newHashSet();
        private Set<ActiveAssessment> assessments = newHashSet();
        private Set<Dimension> dimensions = newHashSet();

        public QueryWithReportTemplate build(final QueryProvider queryProvider, final String templateSql) {

            final QueryWithReportTemplate queryWithReportTemplate = new QueryWithReportTemplate();
            queryWithReportTemplate.sqlQuery = queryProvider.newQuery(templateSql, addOns).toString();
            queryWithReportTemplate.parameterSource = parameterSource;
            queryWithReportTemplate.reportTemplate = newHashSet();

            for (final Organization organization : organizations) {
                for (final ActiveAssessment assessment : assessments) {
                    for (final Dimension dimension : dimensions) {
                        queryWithReportTemplate.reportTemplate.add(ReportRow.builder()
                                .assessment(assessment)
                                .organization(organization)
                                .dimension(dimension)
                                .measures(emptyMeasure)
                                .build());
                    }
                }
            }
            return queryWithReportTemplate;
        }

        Builder copy(final Builder another) {
            parameterSource.addValues(another.parameterSource.getValues());
            addOns.addAll(another.addOns);
            organizations.addAll(another.organizations);
            assessments.addAll(another.assessments);
            dimensions.addAll(another.dimensions);
            return this;
        }

        Builder addOn(final String addOn) {
            addOns.add(addOn);
            return this;
        }

        Builder parameter(final String paramName, final Object value) {
            parameterSource.addValue(paramName, value);
            return this;
        }

        Builder assessments(final Collection<ActiveAssessment> assessments) {
            this.assessments.addAll(assessments);
            return this;
        }

        Builder districts(final Collection<District> districts) {
            this.organizations.addAll(districts);
            return this;
        }

        Builder schools(final Collection<School> schools) {
            this.organizations.addAll(schools);
            return this;
        }

        Builder state(final Organization state) {
            this.organizations.add(state);
            return this;
        }

        Builder dimensions(final Collection<Dimension> dimensions) {
            this.dimensions.addAll(dimensions);
            return this;
        }
    }
}
