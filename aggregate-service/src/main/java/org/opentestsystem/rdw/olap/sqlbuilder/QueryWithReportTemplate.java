package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.OrganizationTypeQuery;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This is a helper class that is used during conversion of the {@link OrganizationTypeQuery} to a sql string and parameters.
 */
public class QueryWithReportTemplate extends ReportContext {
    private String sqlQuery;
    private MapSqlParameterSource parameterSource;

    public String getSqlQuery() {
        return sqlQuery;
    }

    public MapSqlParameterSource getParameterSource() {
        return parameterSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends ReportContext.Builder<Builder, QueryWithReportTemplate> {
        private final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
        private final List<String> addOns = newArrayList();

        public QueryWithReportTemplate build(final QueryProvider queryProvider, final String templateSql) {
            final QueryWithReportTemplate queryWithReportTemplate = super.build();
            queryWithReportTemplate.sqlQuery = queryProvider.newQuery(templateSql, addOns).toString();
            queryWithReportTemplate.parameterSource = parameterSource;
            return queryWithReportTemplate;
        }

        @Override
        protected QueryWithReportTemplate createInstance() {
            return new QueryWithReportTemplate();
        }

        Builder merge(final Builder another) {
            super.merge(another);
            parameterSource.addValues(another.parameterSource.getValues());
            addOns.addAll(another.addOns);
            return this;
        }

        Builder addOn(final String addOn) {
            addOns.add(addOn);
            return this;
        }

        Builder parameter(final String paramName, final Object value) {
            parameterSource.addValue(paramName, value);
            return this;
        }
    }
}
