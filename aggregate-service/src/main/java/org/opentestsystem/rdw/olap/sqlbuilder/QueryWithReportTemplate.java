package org.opentestsystem.rdw.olap.sqlbuilder;

import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.ReportRowContext;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;

/**
 * Represents a sql string, it's parameters and a template of the expected report.
 */
public class QueryWithReportTemplate {
    private String sqlQuery;
    private MapSqlParameterSource parameterSource;
    private Set<ReportRowContext> reportTemplate;

    public String getSqlQuery() {
        return sqlQuery;
    }

    public MapSqlParameterSource getParameterSource() {
        return parameterSource;
    }

    public Set<ReportRowContext> getReportTemplate() {
        return newHashSet(reportTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
        private final List<String> addOns = newArrayList();

        private final Set<Organization> organizations = new HashSet();
        private final Set<Assessment> assessments = new HashSet();
        private final Set<Dimension> dimensions = new HashSet();

        public QueryWithReportTemplate build(final QueryProvider queryProvider, final String templateSql) {

            final QueryWithReportTemplate queryWithReportTemplate = new QueryWithReportTemplate();
            queryWithReportTemplate.sqlQuery = queryProvider.newQuery(templateSql, addOns).toString();
            queryWithReportTemplate.parameterSource = parameterSource;
            queryWithReportTemplate.reportTemplate = newHashSet();

            for (final Organization organization : organizations) {
                for (final Assessment assessment : assessments) {
                    for (final Dimension dimension : dimensions) {
                        queryWithReportTemplate.reportTemplate.add(ReportRowContext.builder()
                                .assessment(assessment)
                                .organization(organization)
                                .dimension(dimension)
                                .build());
                    }
                }
            }
            return queryWithReportTemplate;
        }

        Builder copy(final Builder another) {
            parameterSource.addValues(another.parameterSource.getValues());
            addOns.addAll(another.addOns);
            organizations.addAll(another.organizations);
            assessments.addAll(another.assessments);
            dimensions.addAll(another.dimensions);
            return this;
        }

        Builder addOn(final String addOn) {
            addOns.add(addOn);
            return this;
        }

        Builder parameter(final String paramName, final Object value) {
            parameterSource.addValue(paramName, value);
            return this;
        }

        Builder assessment(final Assessment assessment) {
            assessments.add(assessment);
            return this;
        }

        Builder districts(final Collection<District> districts) {
            this.organizations.addAll(districts);
            return this;
        }

        Builder district(final District district) {
            this.organizations.add(district);
            return this;
        }

        Builder schools(final Collection<School> schools) {
            this.organizations.addAll(schools);
            return this;
        }

        Builder school(final School school) {
            this.organizations.add(school);
            return this;
        }

        Builder state(final Organization state) {
            this.organizations.add(state);
            return this;
        }

        Builder dimension(final Dimension dimension) {
            this.dimensions.add(dimension);
            return this;
        }

        Builder dimensions(final Collection<Dimension> dimensions) {
            this.dimensions.addAll(dimensions);
            return this;
        }
    }
}
