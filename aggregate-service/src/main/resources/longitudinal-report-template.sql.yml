sqlbuilder:
  templates:
    # This represents the parts of the SQL query that generates measures based on the available data.
    # They are combined with default addons (default-report-template-addons.sql.yml) by QueryProvider.
    longitudinal:
      clauses:
        # Just to explain why it could have more than one assessment id in a single aggregate and why we need a 'singleAsmtInAggregate' flag:
        # For this report we are migrating the latest Summative exam taken by a student and only when an asmt grade is equal to a student enrolled grade.
        # In a very unlikely case when different school/districts administer different assessments in the same school year we may end up with
        # multiple assessments in one aggregate. This introduces a challenge of what assessment to return and what cut points to use for the report visualization.
        # This approach does not solve the problem, but gives enough data to warn the user about this use case.
        select: >-
            round(avg(CASE WHEN e.years_in_one_org = :cohort_years THEN e.scale_score ELSE NULL END)) AS cohort_score,
            round(avg(e.scale_score)) AS score,
            round(stddev_samp(CASE WHEN e.years_in_one_org = :cohort_years THEN e.scale_score ELSE NULL END)/sqrt(sum(CASE WHEN e.years_in_one_org = :cohort_years THEN 1 ELSE 0 END))) AS cohort_std_err,
            round(stddev_samp(e.scale_score)/sqrt(count(*))) AS std_err,
            sum(CASE WHEN e.performance_level = 1 THEN 1 ELSE 0 END) AS level1,
            sum(CASE WHEN e.performance_level = 2 THEN 1 ELSE 0 END) AS level2,
            sum(CASE WHEN e.performance_level = 3 THEN 1 ELSE 0 END) AS level3,
            sum(CASE WHEN e.performance_level = 4 THEN 1 ELSE 0 END) AS level4,
            sum(CASE WHEN e.performance_level = 5 THEN 1 ELSE 0 END) AS level5,
            sum(CASE WHEN e.performance_level = 6 THEN 1 ELSE 0 END) AS level6,
            sum(CASE WHEN (e.performance_level = 1 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level1,
            sum(CASE WHEN (e.performance_level = 2 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level2,
            sum(CASE WHEN (e.performance_level = 3 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level3,
            sum(CASE WHEN (e.performance_level = 4 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level4,
            sum(CASE WHEN (e.performance_level = 5 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level5,
            sum(CASE WHEN (e.performance_level = 6 AND e.years_in_one_org = :cohort_years) THEN 1 ELSE 0 END) AS cohort_level6,
            e.school_year,
            e.subject_id,
            e.asmt_grade_id,
            max(e.asmt_id) as asmt_id,
            CASE WHEN max(e.asmt_id) = min(e.asmt_id) THEN true ELSE false END AS singleAsmtInAggregate

        groupBy: >-
            e.school_year,
            e.subject_id,
            e.asmt_grade_id

    # ------------ organizations -------------------------------------------------------------
      addons:
        state:
          clauses:
            select: >-
                 'State' AS organization_type,
                 NULL AS organization_id

            from: >-
                (
                   SELECT
                     f.*,
                     count(*) OVER (PARTITION BY f.student_id ) AS years_in_one_org
                   FROM exam_longitudinal f
                   WHERE
                     f.subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)
                ) e

        allDistricts:
          clauses:
            select: >-
               'District' AS organization_type,
               e.district_id AS organization_id

            from: >-
               (
                  SELECT
                    f.*,
                    sch.district_id,
                    sch.embargo_enabled,
                    count(*) OVER (PARTITION BY f.student_id, sch.district_id ) AS years_in_one_org
                  FROM exam_longitudinal f
                   JOIN school sch ON sch.id = f.school_id
                  WHERE
                    f.subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)
               ) e

            groupBy: >-
              e.district_id

        districts:
          clauses:
            select: >-
               'District' AS organization_type,
               e.district_id AS organization_id

            from: >-
               (
                  SELECT
                    f.*,
                    sch.district_id,
                    sch.embargo_enabled,
                    count(*) OVER (PARTITION BY f.student_id, sch.district_id ) AS years_in_one_org
                  FROM exam_longitudinal f
                   JOIN school sch ON sch.id = f.school_id
                  WHERE
                    f.subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)
                  AND sch.district_id in (:district_ids)
               ) e

            groupBy: >-
              e.district_id

        allSchoolsInDistricts:
          clauses:
            select: >-
                 'School' AS organization_type,
                 e.school_id AS organization_id

            from: >-
                (
                   SELECT
                     f.*,
                     sch.district_id,
                     sch.embargo_enabled,
                     count(*) OVER (PARTITION BY f.student_id, f.school_id ) AS years_in_one_org
                   FROM exam_longitudinal f
                    JOIN school sch ON sch.id = f.school_id
                   WHERE
                     f.subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)
                   AND sch.district_id in (:school_district_ids)
                ) e

            groupBy: >-
                 e.school_id

        schools:
          clauses:
            select: >-
                 'School' AS organization_type,
                 e.school_id AS organization_id

            from: >-
                (
                   SELECT
                     f.*,
                     sch.district_id,
                     sch.embargo_enabled,
                     count(*) OVER (PARTITION BY f.student_id, f.school_id ) AS years_in_one_org
                   FROM exam_longitudinal f
                    JOIN school sch ON sch.id = f.school_id
                   WHERE
                     subject_id = :subject_id AND school_year_asmt_grade_code IN (:yearGradePairs)
                    AND f.school_id in (:school_ids)
                ) e

            groupBy: >-
                 e.school_id

        districtEmbargo:
          clauses:
            where: >-
              e.school_year < :system_school_year
              OR e.embargo_enabled = 0
              OR 1 = :state_embargo_admin
              OR e.district_id IN (:district_embargo_admin_ids)

        stateEmbargo:
          clauses:
            where: >-
              e.school_year < :system_school_year
              OR EXISTS (SELECT 1 FROM state_embargo WHERE aggregate = 0)
              OR 1 = :state_embargo_admin
