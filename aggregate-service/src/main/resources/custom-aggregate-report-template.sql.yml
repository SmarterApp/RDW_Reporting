sqlbuilder:
  templates:
      # This represents the parts of the SQL query that generates measures based on the available data.
      # The query is assembled by combining the below clauses with 'organization' and 'dimension' parts.
      # One 'dimension' and at least one 'organization' part is required for a valid query.
      # Optionally, filter could be added on too.
      customAggregate:
        clauses:
          select: >-
              round(avg(scale_score)) AS score,
              round(stddev_samp(scale_score)/sqrt(count(*))) as std_err,
              sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1,
              sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2,
              sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3,
              sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4,
              fe.school_year,
              fe.asmt_id,
              a.grade_id as asmt_grade_id,
              a.label as asmt_label,
              sa.code as subject_code

          from: >-
              fact_student_exam fe

          join: >-
              JOIN asmt a ON a.id = fe.asmt_id
              JOIN subject sa ON sa.id = a.subject_id

          where: >-
              fe.school_year IN (:school_years) AND
              a.grade_id IN (:asmt_grade_ids) AND
              a.subject_id in (:subject_ids) AND
              a.type_id = :asmt_type_id

          groupBy: >-
              fe.school_year,
              fe.asmt_id,
              a.grade_id,
              a.label,
              sa.code

      # ------------ organization parts -------------------------------------------------------------
        addons:
            state:
              clauses:
                select: >-
                     'State' AS organization_type,
                     NULL AS organization_id,
                     NULL AS organization_natural_id,
                     '${app.state.name}' AS organization_name

            allDistricts:
              clauses:
                select: >-
                     'District' AS organization_type,
                     d.id AS organization_id,
                     d.natural_id AS organization_natural_id,
                     d.name AS organization_name

                join: >-
                    JOIN school sch ON sch.id = fe.school_id
                    JOIN district d ON d.id = sch.district_id

                groupBy: >-
                     d.id,
                     d.name,
                     d.natural_id

            districts:
              clauses:
                where: >-
                    d.id in (:district_ids)

            allSchoolsInDistricts:
              clauses:
                select: >-
                     'School' AS organization_type,
                     sch.id AS organization_id,
                     sch.natural_id AS organization_natural_id,
                     sch.name AS organization_name
                join: >-
                     JOIN school sch ON sch.id = fe.school_id

                where: >-
                     sch.district_id in (:school_district_ids)

                groupBy: >-
                     sch.id,
                     sch.name,
                     sch.natural_id

            schools:
              clauses:
                select: >-
                     'School' AS organization_type,
                     sch.id AS organization_id,
                     sch.natural_id AS organization_natural_id,
                     sch.name AS organization_name
                join: >-
                     JOIN school sch ON sch.id = fe.school_id

                where: >-
                    sch.id in (:school_ids)

                groupBy: >-
                     sch.id,
                     sch.name,
                     sch.natural_id

      # ---------- dimension parts -----------------------------------------------------------------------
            Overall:
              clauses:
                select: >-
                    'Overall' AS dimension,
                    null  AS dimension_id,
                    null AS dimension_code
            Gender:
              clauses:
                select: >-
                     'Gender' AS dimension,
                      s.gender_id  AS dimension_id,
                      gn.code AS dimension_code
                join: >-
                     JOIN student s ON fe.student_id = s.id
                     JOIN gender gn on gn.id = s.gender_id
                where: >-
                     ( true = :all_genders OR gn.code in (:gender_ids) )
                groupBy: >-
                     s.gender_id,
                     gn.code

            # If a student has multiple ethnicities, we are double-counting it - by design
            Ethnicity:
              clauses:
                select: >-
                     'Ethnicity' AS dimension,
                     se.ethnicity_id AS dimension_id,
                     e.code AS dimension_code
                join: >-
                     JOIN student_ethnicity se ON se.student_id = fe.student_id
                     JOIN ethnicity e ON e.id = se.ethnicity_id
                where: >-
                    ( true = :all_ethnicities OR se.ethnicity_id in (:ethnicity_ids) )
                groupBy: >-
                     se.ethnicity_id,
                     e.code

            IEP:
              clauses:
                select: >-
                     'IEP' AS dimension,
                     fe.iep AS dimension_id,
                     CASE WHEN fe.iep = 1 THEN 'yes' ELSE 'no' END AS dimension_code
                where: >-
                     ( true = :all_ieps OR fe.iep in (:iep_ids) )
                groupBy: >-
                     fe.iep

            LEP:
              clauses:
                select: >-
                     'LEP' AS dimension,
                     fe.lep AS dimension_id,
                     CASE WHEN fe.lep = 1 THEN 'yes' ELSE 'no' END AS dimension_code
                where: >-
                     ( true = :all_leps OR fe.lep in (:lep_ids) )
                groupBy: >-
                     fe.lep

            EconomicDisadvantage:
              clauses:
                select: >-
                     'EconomicDisadvantage' AS dimension,
                     fe.economic_disadvantage AS dimension_id,
                     CASE WHEN fe.economic_disadvantage = 1 THEN 'yes' ELSE 'no' END AS dimension_code
                where: >-
                     ( true = :all_economic_disadvantages OR fe.economic_disadvantage in (:economic_disadvantage_ids) )
                groupBy: >-
                     fe.economic_disadvantage

            Section504:
              clauses:
                select: >-
                     'Section504' AS dimension,
                     fe.section504 AS dimension_id,
                     CASE WHEN fe.section504 = 1 THEN 'yes' WHEN fe.section504 = 0 THEN 'no' ELSE 'undefined' END AS dimension_code
                where: >-
                     ( true = :all_section504s OR fe.section504 in (:section504_ids) )
                groupBy: >-
                     fe.section504

            MigrantStatus:
              clauses:
                select: >-
                     'MigrantStatus' AS dimension,
                     fe.migrant_status AS dimension_id,
                     CASE WHEN fe.migrant_status = 1 THEN 'yes' WHEN fe.migrant_status = 0 THEN 'no' ELSE 'undefined' END AS dimension_code
                where: >-
                     ( true = :all_migrant_statuses OR fe.migrant_status in (:migrant_status_ids) )
                groupBy: >-
                     fe.migrant_status

            # unlike all other dimensions we are not back-filling missing enrolled grades
            StudentEnrolledGrade:
               clauses:
                 select: >-
                      'StudentEnrolledGrade' AS dimension,
                      fe.grade_id AS dimension_id,
                      g.code AS dimension_code
                 join: >-
                      JOIN grade g ON g.id = fe.grade_id
                 groupBy: >-
                      fe.grade_id,
                      g.code

      # ------------ filters, must be added on when a dimension and filter do not overlap --------------------------------------------------
            completeness:
               clauses:
                 where: >-
                     fe.completeness_id in (:completeness_ids)

            administration_condition:
               clauses:
                 where: >-
                     fe.administration_condition_id in (:administration_condition_ids)

            Gender_filter:
               clauses:
                 join: >-
                     JOIN student s ON fe.student_id = s.id
                 where: >-
                    s.gender_id in (:gender_ids)

            Ethnicity_filter:
               clauses:
                 where: >-
                     EXISTS (select 1 from student_ethnicity where ethnicity_id in (:ethnicity_ids) and student_id = fe.student_id)

            IEP_filter:
               clauses:
                 where: >-
                     fe.iep in (:iep_ids)

            LEP_filter:
               clauses:
                 where: >-
                     fe.lep in (:lep_ids)

            EconomicDisadvantage_filter:
               clauses:
                 where: >-
                     fe.economic_disadvantage in (:economic_disadvantage_ids)

            Section504_filter:
               clauses:
                 where: >-
                     fe.section504 in (:section504_ids)

            MigrantStatus_filter:
               clauses:
                 where: >-
                     fe.migrant_status in (:migrant_status_ids)