sqlbuilder:
  templates:
    # This represents the parts of the SQL query that generates measures based on the available data.
    # They are combined with default addons (default-report-template-addons.sql.yml) by QueryProvider.
    targetAggregate:
      clauses:
        select: >-
            round(avg(e.scale_score)) AS score,
            round(stddev_samp(e.scale_score)/sqrt(count(*))) as std_err,
            count(*) as exam_count,
            avg(ets.student_relative_residual_score) AS student_relative_residual_score,
            stddev_samp(ets.student_relative_residual_score)/sqrt(count(*)) as student_relative_residual_score_std_err,
            avg(ets.standard_met_relative_residual_score) AS standard_met_relative_residual_score,
            stddev_samp(ets.standard_met_relative_residual_score)/sqrt(count(*)) as standard_met_relative_residual_score_std_err,
            e.school_year,
            e.asmt_id,
            ets.target_id,
            t.natural_id as target_natural_id,
            t.claim_code

        from: >-
            exam_target_score ets
            JOIN exam e on e.id = ets.exam_id
            JOIN target t ON t.id = ets.target_id
            JOIN asmt a ON a.id = e.asmt_id

        where: >-
            e.school_year = :school_year AND
            a.grade_id = :asmt_grade_id AND
            a.subject_id = :subject_id AND
            a.type_id = 3

        groupBy: >-
            e.school_year,
            e.asmt_id,
            ets.target_id,
            t.natural_id,
            t.claim_code


      # Note: target reports when organization = School also combine sqlbuilder.templates.default.addons.schools,
      #       which joins the school table with alias sch, so we have to join it here with a different alias.
      #       (Target reports for a different organization won't join in school, so it is needed here.)
      addons:
        districtEmbargo:
          clauses:
            join: >-
              JOIN school sch2 ON sch2.id = e.school_id
              LEFT JOIN district_embargo de ON
                de.school_year = e.school_year AND
                de.district_id = sch2.district_id AND
                de.subject_id = a.subject_id

            where: >-
              CASE coalesce(de.aggregate, 0)
                WHEN 0 THEN :state_embargo_loading = 1 OR sch2.district_id IN (:district_ids_embargo_loading)
                WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR sch2.district_id IN (:district_ids_embargo_loading) OR sch2.district_id IN (:district_ids_embargo_reviewing)
                WHEN 2 THEN true
              END
