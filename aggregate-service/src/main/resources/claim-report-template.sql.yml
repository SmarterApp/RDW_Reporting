sqlbuilder:
  templates:
    # This represents the parts of the SQL query that generates measures based on the available data.
    # They are combined with default addons (default-report-template-addons.sql.yml) by QueryProvider.
    claimAggregate:
      clauses:
        select: >-
            sum(CASE WHEN ecs.category = 1 THEN 1 ELSE 0 END) AS level1,
            sum(CASE WHEN ecs.category = 2 THEN 1 ELSE 0 END) AS level2,
            sum(CASE WHEN ecs.category = 3 THEN 1 ELSE 0 END) AS level3,
            sum(CASE WHEN ecs.category = 4 THEN 1 ELSE 0 END) AS level4,
            sum(CASE WHEN ecs.category = 5 THEN 1 ELSE 0 END) AS level5,
            sum(CASE WHEN ecs.category = 6 THEN 1 ELSE 0 END) AS level6,
            e.school_year,
            e.asmt_id,
            ecs.subject_claim_score_id,
            ss.code as claim_code

        from: >-
            exam_claim_score ecs
            JOIN exam e on e.id = ecs.exam_id
            JOIN subject_score ss ON ss.id = ecs.subject_claim_score_id
            JOIN asmt a ON a.id = e.asmt_id

        where: >-
            e.school_year IN (:school_years) AND
            a.grade_id IN (:asmt_grade_ids) AND
            a.subject_id in (:subject_ids) AND
            a.type_id = :asmt_type_id AND
            ss.code in (:subject_claim_score_codes)

        groupBy: >-
            e.school_year,
            e.asmt_id,
            ecs.subject_claim_score_id,
            ss.code

      addons:
        districtEmbargo:
          clauses:
            join: >-
              LEFT JOIN district_embargo de ON
                de.school_year = e.school_year AND
                de.district_id = sch.district_id AND
                de.subject_id = a.subject_id

            where: >-
              a.type_id <> 3
              OR CASE coalesce(de.aggregate, 0)
                WHEN 0 THEN :state_embargo_loading = 1 OR sch.district_id IN (:district_ids_embargo_loading)
                WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1 OR sch.district_id IN (:district_ids_embargo_loading) OR sch.district_id IN (:district_ids_embargo_reviewing)
                WHEN 2 THEN true
              END

        stateEmbargo:
          clauses:
            join: >-
              JOIN school sch on e.school_id = sch.id
              LEFT JOIN district_embargo de ON
                de.school_year = e.school_year AND
                de.district_id = sch.district_id AND
                de.subject_id = a.subject_id

            where: >-
              a.type_id <> 3
              OR CASE coalesce(de.aggregate, 0)
                WHEN 0 THEN :state_embargo_loading = 1
                WHEN 1 THEN :state_embargo_loading = 1 OR :state_embargo_reviewing = 1
                WHEN 2 THEN true
              END
