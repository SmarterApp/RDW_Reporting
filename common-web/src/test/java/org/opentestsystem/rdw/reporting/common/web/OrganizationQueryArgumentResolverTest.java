package org.opentestsystem.rdw.reporting.common.web;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Collection;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class OrganizationQueryArgumentResolverTest {

    @Mock
    private MethodParameter methodParameter;

    @Mock
    private ModelAndViewContainer mavContainer;

    @Mock
    private NativeWebRequest webRequest;

    @Mock
    private WebDataBinderFactory binderFactory;

    private Multimap<String, String> parameters;

    private OrganizationQueryArgumentResolver resolver;

    @Before
    public void setup() {
        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> OrganizationQuery.class);

        parameters = HashMultimap.create();
        when(webRequest.getParameter(anyString()))
                .thenAnswer(invocation -> parameters
                        .get(invocation.getArgument(0)).stream()
                        .findFirst()
                        .orElse(null));
        when(webRequest.getParameterValues(anyString()))
                .thenAnswer(invocation -> {
                    final Collection<String> values = parameters.get(invocation.getArgument(0));
                    return values.toArray(new String[values.size()]);
                });

        resolver = new OrganizationQueryArgumentResolver();
    }

    @Test
    public void itShouldResolveOrganizationQueryParameters() {
        assertThat(resolver.supportsParameter(methodParameter)).isTrue();

        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> Object.class);
        assertThat(resolver.supportsParameter(methodParameter)).isFalse();
    }

    @Test
    public void itShouldParseAnEmptyOrganizationQuery() throws Exception {
        final OrganizationQuery query = (OrganizationQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(query.getLimit()).isEqualTo(OrganizationQueryArgumentResolver.DefaultLimit);
        assertThat(query.getTypes()).isEmpty();
        assertThat(query.getName()).isNull();
        assertThat(query.getIds()).isEmpty();
    }

    @Test
    public void itShouldParseAnOrganizationQuery() throws Exception {
        parameters.putAll("types", of("state", "district", "schoolgroup"));
        parameters.put("limit", "123");
        parameters.put("name", "some name");
        parameters.putAll("id", of("1", "2", "3"));
        final OrganizationQuery query = (OrganizationQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(query.getLimit()).isEqualTo(123);
        assertThat(query.getTypes()).containsOnly(OrganizationType.State, OrganizationType.District, OrganizationType.SchoolGroup);
        assertThat(query.getName()).isEqualTo("some name");
        assertThat(query.getIds()).containsOnly(1L, 2L, 3L);
    }
}