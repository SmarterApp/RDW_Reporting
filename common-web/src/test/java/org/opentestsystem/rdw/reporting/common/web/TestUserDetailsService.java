package org.opentestsystem.rdw.reporting.common.web;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

/**
 * Test user details service providing a mock User using the Spring
 * {@link org.springframework.security.test.context.support.WithUserDetailsSecurityContextFactory }
 * test support framework.
 */
@Service
class TestUserDetailsService implements UserDetailsService {

    private final Map<String, User> userRepository = new ConcurrentHashMap<>();

    public TestUserDetailsService() {
        final User testUser = User.builderExt()
                .id("userId")
                .username("user")
                .password("redacted")
                .accountNonLocked(true)
                .accountNonExpired(true)
                .enabled(true)
                .credentialsNonExpired(true)
                .authorities(ImmutableSet.of(new SimpleGrantedAuthority("USER")))
                .permissionsById(ImmutableMap.of(
                        IndividualPiiRead, new Permission(IndividualPiiRead, PermissionScope.STATEWIDE)))
                .build();
        userRepository.put(testUser.getUsername(), testUser);
    }

    @Override
    public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException {
        return userRepository.get(username);
    }
}
