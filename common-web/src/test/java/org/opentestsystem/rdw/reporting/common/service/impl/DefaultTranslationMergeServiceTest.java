package org.opentestsystem.rdw.reporting.common.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.service.FrontendTranslationService;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.UrlResource;

import java.util.Locale;
import java.util.Map;

import static com.google.common.io.Resources.getResource;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultTranslationMergeServiceTest {

    @Mock
    private FrontendTranslationService translationService;

    @Mock
    private ResourceLoader resourceLoader;

    private DefaultTranslationMergeService mergeService;

    @Before
    public void setup() throws Exception {
        final ObjectMapper objectMapper = new ObjectMapper();
        final TenantProperties tenantProperties = new TenantProperties();
        tenantProperties.setTranslationLocation("i18n/");

        final Map<String, String> propertyValues = ImmutableMap.<String, String>builder()
                .put("parent.childB", "childBPropertiesValue")
                .put("parent.childC", "childCPropertiesValue")
                .build();
        when(translationService.getTranslationsByCode(any(Locale.class)))
                .thenReturn(propertyValues);

        when(resourceLoader.getResource(anyString()))
                .thenAnswer(invocation -> {
                    final String location = invocation.getArgumentAt(0, String.class);
                    try {
                        return new UrlResource(getResource(location));
                    } catch (final Exception notFound) {
                        return new UrlResource("file://no/existing/file.json");
                    }
                });

        mergeService = new DefaultTranslationMergeService(tenantProperties, resourceLoader, objectMapper, translationService);
    }

    @Test
    public void itShouldMergeMessageSourcesIntoJson() {
        final ObjectNode messages = mergeService.getLocaleMessages(Locale.forLanguageTag("es"));
        assertThat(messages).hasSize(1);

        final ObjectNode parentNode = (ObjectNode) messages.get("parent");
        assertThat(parentNode).hasSize(3);
        assertThat(parentNode.get("childA").asText()).isEqualTo("childAJsonValue");
        assertThat(parentNode.get("childB").asText()).isEqualTo("childBJsonValue");
        assertThat(parentNode.get("childC").asText()).isEqualTo("childCPropertiesValue");
    }

    @Test
    public void itShouldRequestResourcesFromTheConfiguredLocation() {
        mergeService.getLocaleMessages(Locale.forLanguageTag("es"));

        verify(translationService).getTranslationsByCode(Locale.forLanguageTag("es"));
        verify(resourceLoader).getResource("i18n/es.json");
    }

    @Test
    public void itShouldHandleAMissingLanguageResource() {
        final ObjectNode messages = mergeService.getLocaleMessages(Locale.forLanguageTag("vi"));
        assertThat(messages).hasSize(1);

        final ObjectNode parentNode = (ObjectNode) messages.get("parent");
        assertThat(parentNode).hasSize(2);
        assertThat(parentNode.get("childB").asText()).isEqualTo("childBPropertiesValue");
        assertThat(parentNode.get("childC").asText()).isEqualTo("childCPropertiesValue");
    }

}