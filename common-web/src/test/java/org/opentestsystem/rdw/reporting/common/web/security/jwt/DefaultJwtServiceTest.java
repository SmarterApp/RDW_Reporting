package org.opentestsystem.rdw.reporting.common.web.security.jwt;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.web.security.jackson2.UserMixin;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.jackson2.CoreJackson2Module;
import org.springframework.security.web.jackson2.WebJackson2Module;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;

public class DefaultJwtServiceTest {

    private DefaultJwtService service;

    @Before
    public void before() {
        this.service = createService();
    }

    @Test
    public void shouldEncodeAndDecode() {
        final User user = User.builderExt()
                .id("id")
                .username("username")
                .password("password")
                .firstName("first")
                .lastName("last")
                .authorities(newArrayList(new SimpleGrantedAuthority("ROLE_A")))
                .permissionsById(
                        permissions(groupOf(districts(10L)))
                )
                .build();

        final String serialized = service.encode(user);

        assertThat(serialized).isNotBlank();

        final User deserialized = service.decode(serialized);

        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(user);
    }

    private DefaultJwtService createService() {
        final JwtSettings settings = new JwtSettings();
        settings.setSecret("notbase64");

        final ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        mapper.registerModule(new CoreJackson2Module());
        mapper.registerModule(new WebJackson2Module());
        mapper.registerModule(new GuavaModule());
        mapper.addMixIn(User.class, UserMixin.class);

        return new DefaultJwtService(settings, mapper);
    }

}
