package org.opentestsystem.rdw.reporting.common.web;

import com.google.common.primitives.Ints;
import com.google.common.primitives.Longs;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import static org.apache.commons.lang.StringUtils.trimToEmpty;

/**
 * Argument resolver for {@link OrganizationQuery} instances.
 */
public class OrganizationQueryArgumentResolver implements HandlerMethodArgumentResolver {
    static final int DefaultLimit = 20;

    @Override
    public boolean supportsParameter(final MethodParameter parameter) {
        return parameter.getParameterType().equals(OrganizationQuery.class);
    }

    @Override
    public Object resolveArgument(final MethodParameter parameter,
                                  final ModelAndViewContainer mavContainer,
                                  final NativeWebRequest webRequest,
                                  final WebDataBinderFactory binderFactory) throws Exception {
        final Integer limit = Ints.tryParse(trimToEmpty(webRequest.getParameter("limit")));
        return OrganizationQuery.builder()
                .limit(limit == null ? DefaultLimit : limit)
                .name(webRequest.getParameter("name"))
                .types(resolveTypes(webRequest.getParameterValues("types")))
                .ids(resolveIds(webRequest.getParameterValues("id")))
                .build();
    }

    private Set<OrganizationType> resolveTypes(final String[] values) {
        if (values == null) {
            return Collections.emptySet();
        }

        return Arrays.stream(values)
                .map(OrganizationType::caseInsensitiveValue)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
    }

    private Set<Long> resolveIds(final String[] values) {
        if (values == null) {
            return Collections.emptySet();
        }

        return Arrays.stream(values)
                .map(Longs::tryParse)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
    }
}
