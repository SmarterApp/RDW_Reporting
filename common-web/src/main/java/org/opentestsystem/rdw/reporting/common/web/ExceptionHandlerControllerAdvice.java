package org.opentestsystem.rdw.reporting.common.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.context.config.ResourceNotFoundException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import javax.servlet.http.HttpServletRequest;
import java.util.NoSuchElementException;

/**
 * Central REST API exception handling
 */
@ControllerAdvice
public class ExceptionHandlerControllerAdvice extends ResponseEntityExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandlerControllerAdvice.class);
    private static final String LogMessagePreamble = "Problem handling request";

    /**
     * @param exception original exception
     * @param request   request resulting in exception
     * @return BAD_REQUEST (400) response
     */
    @ExceptionHandler(IllegalArgumentException.class)
    protected ResponseEntity<Object> handleIllegalArgumentException(final RuntimeException exception, final WebRequest request) {
        logger.warn(LogMessagePreamble, exception);
        return createOpaqueError(exception, request, HttpStatus.BAD_REQUEST);
    }

    /**
     * Maps {@link NoSuchElementException} and {@link ResourceNotFoundException} to HTTP 404
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler({
            ResourceNotFoundException.class,
            NoSuchElementException.class
    })
    protected ResponseEntity<Object> handleNotFoundException(final RuntimeException exception, final WebRequest request, final HttpServletRequest httpRequest) {
        logger.info("Requested resource not found: {}", httpRequest.getRequestURI());
        return createOpaqueError(exception, request, HttpStatus.NOT_FOUND);
    }

    /**
     * Maps {@link AccessDeniedException} to HTTP 404 instead of 403.
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return NOT_FOUND (404) response
     */
    @ExceptionHandler(AccessDeniedException.class)
    protected ResponseEntity<Object> handleAccessDeniedException(final RuntimeException exception, final WebRequest request) {
        logger.warn(LogMessagePreamble, exception);
        return createOpaqueError(exception, request, HttpStatus.NOT_FOUND);
    }

    /**
     * Maps all remaining unhandled {@link RuntimeException} to an HTTP 500 response
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @return INTERNAL_SERVER_ERROR (500) response
     */
    @ExceptionHandler(RuntimeException.class)
    protected ResponseEntity<Object> handleRuntimeException(final RuntimeException exception, final WebRequest request) {
        logger.warn(LogMessagePreamble, exception);
        return createOpaqueError(exception, request, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Creates an opaque exception response with no granular exception details
     *
     * @param exception original exception
     * @param request   request resulting in exception
     * @param status    the status of the exception to send
     * @return a response with the given status
     */
    private ResponseEntity<Object> createOpaqueError(final RuntimeException exception, final WebRequest request, final HttpStatus status) {
        return handleExceptionInternal(exception, status.getReasonPhrase(), new HttpHeaders(), status, request);
    }

}
