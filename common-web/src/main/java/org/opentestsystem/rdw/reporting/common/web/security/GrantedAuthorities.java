package org.opentestsystem.rdw.reporting.common.web.security;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Stream;

import static java.util.Collections.emptySet;
import static java.util.stream.Collectors.toSet;

/**
 * Utility for dealing with spring {@link GrantedAuthority}
 */
public final class GrantedAuthorities {

    private static final String ROLE_PREFIX = "ROLE_";
    private static final String PERMISSION_PREFIX = "PERM_";

    /**
     * Creates and returns a role authority for the given name.
     * If a name of "THING_READ" is provided a {@link GrantedAuthority} with id "ROLE_THING_READ" will be returned
     *
     * @param name The name of the role
     * @return role
     */
    public static GrantedAuthority toRole(final String name) {
        return new SimpleGrantedAuthority(ROLE_PREFIX + formatAuthorityName(name));
    }

    /**
     * Creates and returns a permission authority for the given name.
     * If a name of "THING_READ" is provided a {@link GrantedAuthority} with id "PERM_THING_READ" will be returned
     *
     * @param name The name of the permission
     * @return permission.
     */
    public static GrantedAuthority toPermission(final String name) {
        return new SimpleGrantedAuthority(PERMISSION_PREFIX + formatAuthorityName(name));
    }

    /**
     * Formats formats role or permission name in the spring standard format
     * of capitol letter words separated by underscores
     *
     * @param name The name of the role or permission
     * @return formatted name. (e.g. "Thing Read" becomes "THING_READ")
     */
    private static String formatAuthorityName(final String name) {
        if (name == null) {
            return "";
        }
        return name.trim().replaceAll("\\s+", "_").toUpperCase();
    }

    /**
     * Computes authorities from grants. This is for integrating with spring security
     *
     * @param roles The roles to compute the granted authorities for
     * @return immutable set of authorities
     */
    public static Set<GrantedAuthority> toGrantedAuthorities(
            final Collection<String> roles,
            final Collection<String> permissions) {
        return Stream.concat(
                Optional.ofNullable(roles)
                        .orElse(emptySet())
                        .stream()
                        .map(GrantedAuthorities::toRole),
                Optional.ofNullable(permissions)
                        .orElse(emptySet())
                        .stream()
                        .map(GrantedAuthorities::toPermission)
        ).collect(toSet());
    }

    private GrantedAuthorities() {}

}
