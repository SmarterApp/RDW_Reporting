package org.opentestsystem.rdw.reporting.common.web.security.jwt;

import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;
import org.apache.http.HttpHeaders;
import org.opentestsystem.rdw.reporting.common.web.security.Users;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.support.BearerAuthorizationHeaders;
import org.springframework.util.AntPathMatcher;
import org.springframework.util.PathMatcher;

public class JwtZuulFilter extends ZuulFilter {

    private final PathMatcher pathMatcher = new AntPathMatcher();
    private final JwtSettings settings;
    private final JwtService service;

    public JwtZuulFilter(final JwtSettings settings, final JwtService service) {
        this.settings = settings;
        this.service = service;
    }

    @Override
    public String filterType() {
        return "pre";
    }

    @Override
    public int filterOrder() {
        return 0;
    }

    @Override
    public boolean shouldFilter() {
        if (settings.getRoutePaths().isEmpty()) {
            return true;
        }
        final String requestUri = RequestContext.getCurrentContext().getRequest().getRequestURI();
        return settings.getRoutePaths().stream().anyMatch(path -> pathMatcher.matchStart(path, requestUri));
    }

    public Object run() {
        final String authorizationHeader = BearerAuthorizationHeaders.create(service.encode(Users.getCurrentUser()));
        RequestContext.getCurrentContext().addZuulRequestHeader(HttpHeaders.AUTHORIZATION, authorizationHeader);
        return null;
    }

}
