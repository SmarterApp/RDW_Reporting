package org.opentestsystem.rdw.reporting.common.web.security.jwt;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.jsonwebtoken.CompressionCodecs;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.apache.commons.io.Charsets;
import org.opentestsystem.rdw.reporting.common.web.security.User;

import java.io.IOException;
import java.util.Base64;

/**
 * This JWT service uses Jackson to directly serialize the user object into a JWT token claim (property)
 */
public class DefaultJwtService implements JwtService {

    private static final String UserClaim = "_user";
    private final String secret;
    private final ObjectMapper objectMapper;

    DefaultJwtService(final JwtSettings settings,
                      final ObjectMapper objectMapper) {
        this.secret = Base64.getEncoder().encodeToString(settings.getSecret().getBytes(Charsets.UTF_8));
        this.objectMapper = objectMapper;
    }

    @Override
    public String encode(final User user) {
        return Jwts.builder()
                .claim(UserClaim, userToJson(user))
                .compressWith(CompressionCodecs.DEFLATE)
                .signWith(SignatureAlgorithm.HS512, secret)
                .compact();
    }

    @Override
    public User decode(final String token) {
        return jsonToUser(
                (String) Jwts.parser()
                        .setSigningKey(secret)
                        .parseClaimsJws(token)
                        .getBody()
                        .get(UserClaim)
        );
    }

    private String userToJson(final User user) {
        try {
            return objectMapper.writeValueAsString(user);
        } catch (final JsonProcessingException exception) {
            throw new RuntimeException(exception);
        }
    }

    private User jsonToUser(final String serializedUser) {
        try {
            return objectMapper.readValue(serializedUser, User.class);
        } catch (final IOException exception) {
            throw new RuntimeException(exception);
        }
    }

}
