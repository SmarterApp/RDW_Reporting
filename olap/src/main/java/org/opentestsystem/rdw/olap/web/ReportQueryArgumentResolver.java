package org.opentestsystem.rdw.olap.web;

import org.opentestsystem.rdw.olap.model.DimensionType;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Maps.newHashMap;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;

/**
 * Argument resolver for {@link ReportQuery} instances.
 * <p>
 * Rules for submitting organizations from the {@link ReportQuery} in the URL GET are:
 * <p>
 * State: state=TF - optional, must be two character long; the first char represents 'True/False' for including state, and the second for including all children (districts).
 * District: districts=100F,200T - optional, a comma separated list of district ids and 'True/False' for including all children (schools).
 * School Ids: schoolIds=99,300 - optional, a comma separated list of school ids
 * <p>
 * Example URL: ...?subjectIds=1,2&schoolYears=2017,2018&asmtGrades=4,5&state=FF&districts=15F,17F&dimensions=gender,ethnicity&schoolIds=265,266
 * </p>
 */
public class ReportQueryArgumentResolver implements HandlerMethodArgumentResolver {

    @Override
    public boolean supportsParameter(final MethodParameter parameter) {
        return parameter.getParameterType().equals(ReportQuery.class);
    }

    @Override
    public Object resolveArgument(final MethodParameter parameter,
                                  final ModelAndViewContainer mavContainer,
                                  final NativeWebRequest webRequest,
                                  final WebDataBinderFactory binderFactory) throws Exception {


        final String state = webRequest.getParameter("state");
        checkArgument(state == null || state.length() == 2, "report query is missing state");

        final String dimensions = webRequest.getParameter("dimensions");
        final String districts = webRequest.getParameter("districts");

        final Map<Integer, Boolean> districtIds = newHashMap();
        if (districts != null) {
            for (final String district : districts.split(",")) {
                checkArgument(district.length() >1, "invalid district request");
                districtIds.put(Integer.parseInt(district.substring(0, district.length()-1)), district.toUpperCase().endsWith("T"));
            }
        }

        return ReportQuery.builder()
                .includeState(state != null && state.toUpperCase().startsWith("T"))
                .includeAllDistricts(state != null && state.toUpperCase().endsWith("T"))
                .subjectIds(toSet(checkMandatory(webRequest.getParameter("subjectIds"), "missing subject id")))
                .schoolYears(toSet(checkMandatory(webRequest.getParameter("schoolYears"), "missing school years")))
                .asmtGrades(toSet(checkMandatory(webRequest.getParameter("asmtGrades"), "missing assessment grades")))
                .schoolIds(toSet(webRequest.getParameter("schoolIds")))
                .districtIds(districtIds)
                .dimensions(dimensions == null ? null : Stream.of(dimensions.split(",")).map(type -> {
                    try {
                        return DimensionType.caseInsensitiveValue(type);
                    } catch (final IllegalArgumentException exception) {
                        return null;
                    }
                }).filter(Objects::nonNull).collect(Collectors.toSet()))
                .build();
    }

    private Set<Integer> toSet(final String value) {
        return value == null ? newHashSet() : Stream.of(value.split(",")).map(Integer::valueOf).filter(Objects::nonNull).collect(Collectors.toSet());
    }

    private <T> T checkMandatory(final T value, final String msg) {
        checkArgument(value != null, msg);
        return value;
    }
}
