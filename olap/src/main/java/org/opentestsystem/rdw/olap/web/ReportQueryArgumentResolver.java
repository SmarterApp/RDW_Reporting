package org.opentestsystem.rdw.olap.web;

import org.opentestsystem.rdw.olap.model.DimensionType;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Objects;
import java.util.stream.Stream;

import static com.google.common.base.Preconditions.checkArgument;
import static java.util.stream.Collectors.toList;

/**
 *
 * Argument resolver for {@link ReportQuery} instances.
 */
public class ReportQueryArgumentResolver implements HandlerMethodArgumentResolver {

    @Override
    public boolean supportsParameter(final MethodParameter parameter) {
        return parameter.getParameterType().equals(ReportQuery.class);
    }

    @Override
    public Object resolveArgument(final MethodParameter parameter,
                                  final ModelAndViewContainer mavContainer,
                                  final NativeWebRequest webRequest,
                                  final WebDataBinderFactory binderFactory) throws Exception {

        final String[] subjectIds = webRequest.getParameterValues("subjectIds");
        final String[] schoolYears = webRequest.getParameterValues("schoolYears");
        final String[] asmtGrades = webRequest.getParameterValues("asmtGrades");
        final String[] schoolIds = webRequest.getParameterValues("schoolIds");
        final String[] districtIds = webRequest.getParameterValues("districtIds");
        final String[] dimensions = webRequest.getParameterValues("dimensions");

        checkArgument(subjectIds.length > 0, "report query is missing subjects");
        checkArgument(schoolYears.length > 0, "report query is missing schoolYears");
        checkArgument(asmtGrades.length > 0, "report query is missing asmtGrades");

        return ReportQuery.builder()
                .includeState(Boolean.valueOf(webRequest.getParameter("includeState")))
                .includeAllDistricts(Boolean.valueOf(webRequest.getParameter("includeAllDistricts")))
                .includeAllSchools(Boolean.valueOf(webRequest.getParameter("includeAllSchools")))
                .subjectIds(Stream.of(subjectIds).map(Integer::valueOf).filter(Objects::nonNull).collect(toList()))
                .schoolYears(Stream.of(schoolYears).map(Integer::valueOf).filter(Objects::nonNull).collect(toList()))
                .asmtGrades(Stream.of(asmtGrades).map(Integer::valueOf).filter(Objects::nonNull).collect(toList()))
                .schoolIds(schoolIds == null ? null : Stream.of(schoolIds).map(Integer::valueOf).filter(Objects::nonNull).collect(toList()))
                .districtIds(districtIds == null ? null : Stream.of(districtIds).map(Integer::valueOf).filter(Objects::nonNull).collect(toList()))
                .dimensions(dimensions == null ? null : Stream.of(dimensions).map(type -> {
                    try {
                        return DimensionType.caseInsensitiveValue(type);
                    } catch (final IllegalArgumentException exception) {
                        return null;
                    }
                }).filter(Objects::nonNull).collect(toList()))
                .build();
    }
}
