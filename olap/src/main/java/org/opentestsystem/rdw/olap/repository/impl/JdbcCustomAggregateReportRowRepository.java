package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;
import com.healthmarketscience.sqlbuilder.CustomSql;
import com.healthmarketscience.sqlbuilder.SelectQuery;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.DimensionType;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.util.PropertyPlaceholderHelper;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Properties;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static com.healthmarketscience.sqlbuilder.SetOperationQuery.unionAll;
import static java.util.Arrays.copyOf;
import static org.opentestsystem.rdw.olap.model.ReportQuery.checkIsValid;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {
    private static final Logger logger = LoggerFactory.getLogger(JdbcCustomAggregateReportRowRepository.class);

    private static final String customAggregateTemplateSql = "customAggregate";
    private static final String customAggregateAllPermutationsTemplateSql = "customAggregateAllPermutations";
    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";private static final String allSchoolsInDistrictsAddOn = "allSchoolsInDistricts";

    @Value("${sql.customAggregate}")
    private String customAggregateSql;

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QueryProvider queryProvider;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final QueryProvider queryProvider) {
        this.jdbcTemplate = jdbcTemplate;
        this.queryProvider = queryProvider;
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {
        checkIsValid(query);

        final Builder parmBuilder = ImmutableMap.<String, Object>builder()
                .put("school_years", query.getSchoolYears())
                .put("asmt_grade_ids", query.getAsmtGrades())
                .put("subject_ids", query.getSubjectIds());

        if (!query.isIncludeAllDistricts() && !query.getDistrictIds().isEmpty()) {
            parmBuilder.put("district_ids", query.getDistrictIds());
        }

        if (!query.getDistrictIdsWithAllSchools().isEmpty()) {
            parmBuilder.put("school_district_ids", query.getDistrictIdsWithAllSchools());
        }

        if (!query.getSchoolIds().isEmpty()) {
            parmBuilder.put("school_ids", query.getSchoolIds());
        }

        final List<SelectQuery> selectQueries = toSelectQueries(query);

        return jdbcTemplate.query(
                selectQueries.size() == 1 ? selectQueries.get(0).toString() : unionAll(copyOf(selectQueries.toArray(), selectQueries.size(), SelectQuery[].class)).toString(),
                parmBuilder.build(),
                (row, index) -> ReportRow.builder()
                        .assessment(new Assessment(row.getInt("asmt_id"), row.getInt("asmt_grade_id"), row.getInt("subject_id")))
                        .examSchoolYear(row.getInt("school_year"))
                        .dimension(new Dimension(getNullable(row, row.getString("dimension_code")), DimensionType.caseInsensitiveValue(row.getString("dimension"))))
                        .organization(new Organization(row.getString("organization_name"), getNullable(row, row.getInt("organization_id")), OrganizationType.caseInsensitiveValue(row.getString("organization_type"))))
                        .measures(Measures.builder()
                                .avgScaleScore(row.getInt("score"))
                                .avgStdErr(row.getInt("std_err"))
                                .level1Count(row.getInt("level1"))
                                .level2Count(row.getInt("level2"))
                                .level3Count(row.getInt("level3"))
                                .level4Count(row.getInt("level4"))
                                .build())
                        .build());
    }

    private List<SelectQuery> toSelectQueries(final ReportQuery query) {
        final List<SelectQuery> queries = newArrayList();

        for (final DimensionType dimension : query.getDimensionTypes()) {
            final String dimensionName = dimension.toLowerCase();

            if (query.isIncludeState()) {
                queries.add(buildSql(of(stateAddOn, dimensionName)));
            }

            if (query.isIncludeAllDistricts()) {
                queries.add(buildSql(of(allDistrictsAddOn, dimensionName)));
            } else if (!query.getDistrictIds().isEmpty()) {
                queries.add(buildSql(of(allDistrictsAddOn, districtsAddOn, dimensionName)));
            }

            if (!query.getDistrictIdsWithAllSchools().isEmpty()) {
                queries.add(buildSql(of(allSchoolsInDistrictsAddOn, dimensionName)));
            }

            if (!query.getSchoolIds().isEmpty()) {
                queries.add(buildSql(of(schoolsAddOn, dimensionName)));
            }
        }
        return queries;
    }

    private SelectQuery buildSql(final List<String> addOns) {
        final Properties properties = new Properties();
        properties.put(customAggregateAllPermutationsTemplateSql, queryProvider.newQuery(customAggregateAllPermutationsTemplateSql, addOns).toString());
        properties.put(customAggregateTemplateSql, queryProvider.newQuery(customAggregateTemplateSql, addOns).toString());
        return new SelectQuery().addCustomColumns(new CustomSql(replacePlaceholders(customAggregateSql, properties)));
    }

    private String replacePlaceholders(final String val, final Properties properties) {
        final PropertyPlaceholderHelper propertyPlaceholderHelper = new PropertyPlaceholderHelper("@{template.", "}");
        return propertyPlaceholderHelper.replacePlaceholders(val, properties);
    }
}