package org.opentestsystem.rdw.olap.repository.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;
import com.healthmarketscience.sqlbuilder.SelectQuery;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.sqlbuilder.QueryProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static com.healthmarketscience.sqlbuilder.SetOperationQuery.unionAll;
import static java.util.Arrays.copyOf;
import static org.opentestsystem.rdw.olap.model.ReportQuery.checkIsValid;

@Repository
class JdbcCustomAggregateReportRowRepository implements CustomAggregateReportRepository {

    private static final String queryName = "customAggregate";
    private static final String stateAddOn = "state";
    private static final String districtsAddOn = "districts";
    private static final String allDistrictsAddOn = "allDistricts";
    private static final String schoolsAddOn = "schools";
    private static final String allSchoolsAddOn = "allSchools";

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QueryProvider queryProvider;

    @Autowired
    public JdbcCustomAggregateReportRowRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                                  final QueryProvider queryProvider) {
        this.jdbcTemplate = jdbcTemplate;
        this.queryProvider = queryProvider;
    }

    @Override
    public List<ReportRow> findByQuery(@NotNull final ReportQuery query) {
        checkIsValid(query);

        final Builder parmBuilder = ImmutableMap.<String, Object>builder()
                .put("school_years", query.getSchoolYears())
                .put("asmt_grade_ids", query.getAsmtGrades())
                .put("subject_ids", query.getSubjectIds());

        final List<SelectQuery> selectQueries = toSelectQueries(query, parmBuilder);

        return jdbcTemplate.query(
                selectQueries.size() == 1 ? selectQueries.get(0).toString() : unionAll(copyOf(selectQueries.toArray(), selectQueries.size(), SelectQuery[].class)).toString(),
                parmBuilder.build(),
                (row, index) -> ReportRow.builder()
                        .assessment(new Assessment(row.getInt("asmt_id"), row.getInt("asmt_grade_id"), row.getInt("subject_id")))
                        .examSchoolYear(row.getInt("school_year"))
                        .dimension(Dimension.caseInsensitiveValue(row.getString("type")))
                        .organization(new Organization(row.getString("org_name"), row.getInt("org_id"), OrganizationType.caseInsensitiveValue(row.getString("org_type"))))
                        .measures(Measures.builder()
                                .avgScaleScore(row.getDouble("score"))
                                .level1Count(row.getInt("level1"))
                                .level2Count(row.getInt("level2"))
                                .level3Count(row.getInt("level3"))
                                .level4Count(row.getInt("level4"))
                                .build())
                        .build());
    }

    private List<SelectQuery> toSelectQueries(final ReportQuery query, final Builder parmBuilder) {
        final List<SelectQuery> queries = newArrayList();

        for (final Dimension dimension : query.getDimensions()) {
            final String dimensionName = dimension.toLowerCase();
            if (query.isIncludeState()) {
                queries.add(queryProvider.newQuery(queryName, ImmutableList.of(stateAddOn, dimensionName)));
            }

            if (!query.getDistrictIds().isEmpty()) {
                queries.add(queryProvider.newQuery(queryName, ImmutableList.of(districtsAddOn, dimensionName)));
                parmBuilder.put("district_ids", query.getDistrictIds());
            } else if (query.isIncludeAllDistricts()) {
                queries.add(queryProvider.newQuery(queryName, ImmutableList.of(allDistrictsAddOn, dimensionName)));
            }

            if (!query.getSchoolIds().isEmpty()) {
                queries.add(queryProvider.newQuery(queryName, ImmutableList.of(schoolsAddOn, dimensionName)));
                parmBuilder.put("school_ids", query.getSchoolIds());
            } else if (query.isIncludeAllSchools()) {
                queries.add(queryProvider.newQuery(queryName, ImmutableList.of(allSchoolsAddOn, dimensionName)));
            }
        }
        return queries;
    }
}