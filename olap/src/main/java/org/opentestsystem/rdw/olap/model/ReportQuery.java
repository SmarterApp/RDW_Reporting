package org.opentestsystem.rdw.olap.model;

import javax.validation.constraints.NotNull;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashSet;

/**
 * Represents a query for the custom aggregate report
 */
public class ReportQuery {
    private Set<Integer> subjectIds;
    private Set<Integer> schoolYears;
    private Set<Integer> asmtGrades;
    private boolean includeState;
    private boolean includeAllSchools;
    private boolean includeAllDistricts;
    private Set<Integer> schoolIds;
    private Set<Integer> districtIds;
    private Set<DimensionType> dimensions;

    public Set<Integer> getSubjectIds() {
        return subjectIds == null ? newHashSet() : newHashSet(subjectIds);
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears == null ? newHashSet() : newHashSet(schoolYears);
    }

    public Set<Integer> getAsmtGrades() {
        return asmtGrades == null ? newHashSet() : newHashSet(asmtGrades);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllSchools() {
        return includeAllSchools;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public Set<Integer> getSchoolIds() {
        return schoolIds == null ? newHashSet() : newHashSet(schoolIds);
    }

    public Set<Integer> getDistrictIds() {
        return districtIds == null ? newHashSet() : newHashSet(districtIds);
    }

    public Set<DimensionType> getDimensionTypes() {
        return dimensions == null ? newHashSet() : newHashSet(dimensions);
    }

    public boolean contains(final DimensionType dimension) {
        for (final DimensionType existing : getDimensionTypes()) {
            if (existing.equals(dimension)) return true;
        }
        return false;
    }

    public ReportQuery.Builder copy() {
        return builder().copy(this);
    }

    public static void checkIsValid(@NotNull final ReportQuery query) {
        checkArgument(!query.getSubjectIds().isEmpty(), "report query is missing subjects");
        checkArgument(!query.getAsmtGrades().isEmpty(), "report query is missing asmt grades");
        checkArgument(!query.getSchoolYears().isEmpty(), "report query is missing school years");
        checkArgument(!query.getDimensionTypes().isEmpty(), "report query is missing dimensions");
        checkArgument(!(!query.isIncludeState() && !query.isIncludeAllDistricts() && !query.isIncludeAllSchools() && query.getDistrictIds().isEmpty() && query.getSchoolIds().isEmpty()), "report query is missing organization");
    }

    public static ReportQuery.Builder builder() {
        return new ReportQuery.Builder();
    }

    public static class Builder {
        private Set<Integer> subjectIds;
        private Set<Integer> schoolYears;
        private Set<Integer> asmtGrades;
        private boolean includeState = false;
        private boolean includeAllSchools = false;
        private boolean includeAllDistricts = false;
        private Set<Integer> schoolIds;
        private Set<Integer> districtIds;
        private Set<DimensionType> dimensions;

        public ReportQuery build() {
            ReportQuery query = new ReportQuery();
            query.subjectIds = subjectIds;
            query.schoolYears = schoolYears;
            query.asmtGrades = asmtGrades;
            query.includeState = includeState;
            query.includeAllSchools = includeAllSchools;
            query.includeAllDistricts = includeAllDistricts;
            query.schoolIds = schoolIds;
            query.districtIds = districtIds;
            query.dimensions = dimensions;
            return query;
        }

        public Builder copy(final ReportQuery query) {
            subjectIds = query.getSubjectIds();
            schoolYears = query.getSchoolYears();
            asmtGrades = query.getAsmtGrades();
            includeState = query.isIncludeState();
            includeAllSchools = query.isIncludeAllSchools();
            includeAllDistricts = query.isIncludeAllDistricts();
            schoolIds = query.getSchoolIds();
            districtIds = query.getDistrictIds();
            dimensions = query.getDimensionTypes();
            return this;
        }

        public Builder subjectIds(final Set<Integer> subjectIds) {
            this.subjectIds = subjectIds;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder asmtGrades(final Set<Integer> asmtGrades) {
            this.asmtGrades = asmtGrades;
            return this;
        }

        public Builder includeState(final boolean includeState) {
            this.includeState = includeState;
            return this;
        }

        public Builder includeAllSchools(final boolean includeAllSchools) {
            this.includeAllSchools = includeAllSchools;
            return this;
        }

        public Builder includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return this;
        }

        public Builder schoolIds(final Set<Integer> schoolIds) {
            this.schoolIds = schoolIds;
            return this;
        }

        public Builder districtIds(final Set<Integer> districtIds) {
            this.districtIds = districtIds;
            return this;
        }

        public Builder dimensions(final Set<DimensionType> dimensions) {
            this.dimensions = dimensions;
            return this;
        }

        public Builder dimension(final DimensionType dimension) {
            if (dimensions == null) dimensions = newHashSet();
            dimensions.add(dimension);
            return this;
        }
    }
}