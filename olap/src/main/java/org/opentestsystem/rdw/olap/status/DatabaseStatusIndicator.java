package org.opentestsystem.rdw.olap.status;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

/**
 * A {@link StatusIndicator} for database status.
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {
    private final NamedParameterJdbcTemplate olapJdbcTemplate;

    @Autowired
    public DatabaseStatusIndicator(@Qualifier("olapJdbcTemplate") final NamedParameterJdbcTemplate olapJdbcTemplate) {
        this.olapJdbcTemplate = olapJdbcTemplate;
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final List<Status> statuses = new ArrayList<>();
        statuses.add(getOlapReadStatus());
        if (DiagnosticLevel.WriteDatabase.isLessThanOrEqualTo(level)) {
            statuses.add(getOlapWriteStatus());
        }
        builder.detail("databaseOperations", statuses);
        builder.worstRating(statuses);
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    public String name() {
        return "OLAP-database-operations";
    }

    private Status getOlapReadStatus() {
        final Status.Builder builder = Status.builder()
                .detail("type", "READ");
        responseTime(builder, 10000, () ->
                olapJdbcTemplate.queryForList(
                        "SELECT * FROM status_indicator",
                        ImmutableMap.of()));
        return builder.build();
    }

    private Status getOlapWriteStatus() {
        final Status.Builder builder = Status.builder()
                .detail("type", "WRITE");
        responseTime(builder, 10000, () ->
                olapJdbcTemplate.update(
                        "UPDATE status_indicator SET updated = :now WHERE id = :id",
                        ImmutableMap.of(
                                "now", Timestamp.from(Instant.now()),
                                "id", 1
                        )));
        return builder.build();
    }
}
