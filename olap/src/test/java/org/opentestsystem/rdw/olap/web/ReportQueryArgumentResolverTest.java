package org.opentestsystem.rdw.olap.web;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.olap.model.DimensionType;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Collection;

import static com.google.common.collect.ImmutableSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ReportQueryArgumentResolverTest {

    @Mock
    private MethodParameter methodParameter;

    @Mock
    private ModelAndViewContainer mavContainer;

    @Mock
    private NativeWebRequest webRequest;

    @Mock
    private WebDataBinderFactory binderFactory;

    private Multimap<String, String> parameters;

    private ReportQueryArgumentResolver resolver;

    @Before
    public void setup() {
        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> ReportQuery.class);

        parameters = HashMultimap.create();
        when(webRequest.getParameter(anyString()))
                .thenAnswer(invocation -> parameters
                        .get(invocation.getArgumentAt(0, String.class)).stream()
                        .findFirst()
                        .orElse(null));
        when(webRequest.getParameterValues(anyString()))
                .thenAnswer(invocation -> {
                    final Collection<String> values = parameters.get(invocation.getArgumentAt(0, String.class));
                    return values.toArray(new String[values.size()]);
                });
        resolver = new ReportQueryArgumentResolver();
    }

    @Test
    public void itShouldResolveReportQueryParameters() {
        assertThat(resolver.supportsParameter(methodParameter)).isTrue();

        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> Object.class);
        assertThat(resolver.supportsParameter(methodParameter)).isFalse();
    }

    @Test
    public void itShouldParseReportQueryResource() throws Exception {
        parameters.putAll("subjectIds", of("1", "2"));
        parameters.putAll("schoolYears", of("2017", "2018"));
        parameters.putAll("asmtGrades", of("3", "4"));
        parameters.putAll("schoolIds", of("7", "8"));
        parameters.putAll("districtIds", of("5", "6"));
        parameters.putAll("dimensions", of("gender", "ethnicity"));
        parameters.put("includeState", "true");
        parameters.put("includeAllDistricts", "true");
        parameters.put("includeAllSchools", "true");

        final ReportQuery resource = (ReportQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);

        assertThat(resource).isEqualToComparingFieldByFieldRecursively(ReportQuery.builder()
                .subjectIds(of(1, 2))
                .schoolYears(of(2017, 2018))
                .asmtGrades(of(3, 4))
                .districtIds(of(5, 6))
                .schoolIds(of(7, 8))
                .dimensions(of(DimensionType.Gender, DimensionType.Ethnicity))
                .includeAllDistricts(true)
                .includeState(true)
                .build());
    }

    @Test
    public void itShouldParseReportQueryResourceWithOptionalFields() throws Exception {
        parameters.put("subjectIds", "1");
        parameters.put("schoolYears", "2017");
        parameters.put("asmtGrades", "4");

        final ReportQuery resource = (ReportQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(resource).isEqualToComparingFieldByField(ReportQuery.builder()
                .subjectIds(of(1))
                .schoolYears(of(2017))
                .asmtGrades(of(4))
                .dimensions(of())
                .build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubject() throws Exception {
        parameters.put("schoolYears", "2017");
        parameters.put("asmtGrades", "4");
        resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYear() throws Exception {
        parameters.put("subjectIds", "1");
        parameters.put("asmtGrades", "4");
        resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrade() throws Exception {
        parameters.put("subjectIds", "1");
        parameters.put("schoolYears", "2017");
        resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
    }

    @Test
    public void itShouldIgnoreUnsupportedDimension() throws Exception {
        parameters.put("subjectIds", "1");
        parameters.put("schoolYears", "2017");
        parameters.put("asmtGrades", "4");
        parameters.put("dimensions", "something");

        final ReportQuery resource = (ReportQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(resource.getDimensionTypes()).isEmpty();
    }
}