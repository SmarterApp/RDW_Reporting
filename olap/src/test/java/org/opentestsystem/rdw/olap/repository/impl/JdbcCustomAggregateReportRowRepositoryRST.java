package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.olap.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.olap.model.DimensionType.Gender;
import static org.opentestsystem.rdw.olap.model.DimensionType.Overall;

@Import(JdbcCustomAggregateReportRowRepository.class)
@Sql(scripts = {
        "classpath:OlapCodesSetup.sql",
        "classpath:OlapEntitiesSetup.sql"
})
public class JdbcCustomAggregateReportRowRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository reportRepository;

    private ReportRow stateOverall;
    private ReportQuery.Builder queryBuilder;

    @Before
    public void setUp() {
        queryBuilder = ReportQuery.builder()
                .asmtGrades(of(-98))
                .includeState(true)
                .schoolYears(of(1999))
                .subjectIds(of(1))
                .dimension(Overall);

        stateOverall = ReportRow.builder()
                .assessment(new Assessment(-98, -98, 1))
                .organization(new Organization(null, null, OrganizationType.State))
                .examSchoolYear(1999)
                .dimension(new Dimension(null, Overall))
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(of(2500, 2400, 2300, 2100, 2000).stream().mapToDouble(a -> a).average().getAsDouble()))
                        .avgStdErr((int) Math.round(Math.sqrt(((0.25 * 0.25) + (0.24 * 0.24) + (0.23 * 0.23) + (0.21 * 0.21) + (0.20 * 0.20)) / 5)))
                        .level1Count(2)
                        .level2Count(1)
                        .level3Count(1)
                        .level4Count(1)
                        .build()).build();
    }

    @Test
    public void itShouldFindByQuery() {
        assertThat(reportRepository.findByQuery(queryBuilder.build())).usingFieldByFieldElementComparator().containsExactly(stateOverall);
        assertThat(reportRepository.findByQuery(queryBuilder.subjectIds(of(2)).build())).isEmpty();
    }

    @Test
    public void itShouldFindByQueryAllSchoolsAndDistricts() {
        assertThat(reportRepository.findByQuery(queryBuilder.includeAllDistricts(true).includeAllSchools(true).build()).size()).isEqualTo(5);
    }

    @Test
    public void itShouldFindByQueryWithGender() {
        assertThat(reportRepository.findByQuery(queryBuilder.includeAllDistricts(true).includeAllSchools(true).dimensions(of(Overall, Gender)).build()).size()).isEqualTo(10);
    }

    @Test
    public void itShouldFindByQueryWithEthnicity() {
        assertThat(reportRepository.findByQuery(queryBuilder.includeAllDistricts(true).includeAllSchools(true).dimensions(of(Ethnicity)).build()).size()).isEqualTo(8);
    }
}