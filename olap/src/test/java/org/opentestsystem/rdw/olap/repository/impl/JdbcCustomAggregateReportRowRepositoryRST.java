package org.opentestsystem.rdw.olap.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.olap.model.Assessment;
import org.opentestsystem.rdw.olap.model.Dimension;
import org.opentestsystem.rdw.olap.model.Measures;
import org.opentestsystem.rdw.olap.model.Organization;
import org.opentestsystem.rdw.olap.model.ReportQuery;
import org.opentestsystem.rdw.olap.model.ReportRow;
import org.opentestsystem.rdw.olap.repository.CustomAggregateReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableSet.of;
import static java.util.stream.Collectors.toSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.olap.model.DimensionType.Ethnicity;
import static org.opentestsystem.rdw.olap.model.DimensionType.Gender;
import static org.opentestsystem.rdw.olap.model.DimensionType.Overall;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@Import(JdbcCustomAggregateReportRowRepository.class)
@Sql(scripts = {"classpath:OlapEntitiesSetup.sql"})
public class JdbcCustomAggregateReportRowRepositoryRST extends RepositoryBackedIT {

    @Autowired
    private CustomAggregateReportRepository reportRepository;

    @Autowired
    JdbcTemplate template;

    private ReportRow stateOverall;
    private ReportRow.Builder rowBuilder;
    private ReportQuery.Builder queryBuilder;

    @Before
    public void setUp() {
        queryBuilder = ReportQuery.builder()
                .asmtGrades(of(-8))
                .includeState(true)
                .schoolYears(of(1999))
                .subjectIds(of(1))
                .dimension(Overall);

        rowBuilder = ReportRow.builder()
                .assessment(new Assessment(-8, -8, 1))
                .examSchoolYear(1999);

        stateOverall = rowBuilder
                .organization(new Organization(null, null, State))
                .dimension(new Dimension(null, Overall))
                .measures(Measures.builder()
                        .avgScaleScore((int) Math.round(of(2500, 2400, 2300, 2100, 2000).stream().mapToDouble(a -> a).average().getAsDouble()))
                        .avgStdErr((int) Math.round(Math.sqrt(((25 * 25) + (24 * 24) + (23 * 23) + (21 * 21) + (20 * 20)) / 5)))
                        .level1Count(2)
                        .level2Count(1)
                        .level3Count(1)
                        .level4Count(1)
                        .build())
                .build();
    }

    @Test
    public void itShouldFindByQuery() {
        assertThat(reportRepository.findByQuery(queryBuilder.build())).usingFieldByFieldElementComparator().containsExactly(stateOverall);
        assertThat(reportRepository.findByQuery(queryBuilder.subjectIds(of(2)).build())).isEmpty();
    }

    @Test
    public void itShouldChooseAllOrganizationOverList() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false).schoolIds(of(-100))
                .includeAllSchools(true)
                .build()).size()).isEqualTo(countRowsInTable(template, "school"));

        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .districtIds(of(-100))
                .includeAllSchools(false)
                .includeAllDistricts(true)
                .build()).size()).isEqualTo(countRowsInTable(template, "district"));
    }

    @Test
    public void itShouldFindByQueryAllSchoolsAndDistricts() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeAllDistricts(true)
                .includeAllSchools(true)
                .build())
                .size()).isEqualTo(countRowsInTable(template, "district") + countRowsInTable(template, "school") + 1);
    }

    @Test
    public void itShouldFindByQueryWithGender() {
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .schoolIds(of(-9))
                .dimensions(of(Gender))
                .build()).size()).isEqualTo(countRowsInTable(template, "gender"));
    }

    @Test
    public void itShouldFindByQueryWithEthnicity() {
        // district -99 does not exist
        assertThat(reportRepository.findByQuery(queryBuilder
                .includeState(false)
                .districtIds(of(-99))
                .dimensions(of(Ethnicity))
                .build()).size()).isZero();

        final List<ReportRow> reportRows = reportRepository.findByQuery(queryBuilder.
                includeState(false)
                .districtIds(of(-9))
                .dimensions(of(Ethnicity))
                .build());

        assertThat(reportRows.size()).isEqualTo(countRowsInTable(template, "ethnicity"));
        assertThat(reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(Collectors.toList()).size()).isEqualTo(1);

        assertThat(reportRepository.findByQuery(queryBuilder.
                includeState(true)
                .includeAllDistricts(true)
                .includeAllSchools(true)
                .dimensions(of(Ethnicity))
                .build()).size()).isEqualTo((countRowsInTable(template, "district") + countRowsInTable(template, "school") + 1) * countRowsInTable(template, "ethnicity"));
    }

    @Test
    public void itShouldFindByQueryWithMultipleValuesOfDiffParams() {

        final List<Map<String, Object>> asmtByDim = template.queryForList
                ("SELECT a.id, a.type_id, a.subject_id, a.grade_id, f.school_year" +
                        "  FROM asmt a LEFT JOIN fact_student_exam f ON a.id = f.asmt_id" +
                        "  WHERE a.grade_id IN (-8,-9) AND a.subject_id IN (1,2) AND a.type_id = 1 AND f.school_year IN (1999, 2000)" +
                        "  GROUP BY a.id, a.type_id, a.subject_id, a.grade_id, f.school_year");

        final int grade8AsmtSubject1Count = (int) asmtByDim.stream().filter(a -> (a.get("grade_id").equals(-8) && a.get("subject_id").equals(1))).map(a -> a.get("id")).distinct().count();
        final int grade8AsmtSubject2Count = (int) asmtByDim.stream().filter(a -> (a.get("grade_id").equals(-8) && a.get("subject_id").equals(2))).map(a -> a.get("id")).distinct().count();
        final int grade9AsmtSubject1Count = (int) asmtByDim.stream().filter(a -> (a.get("grade_id").equals(-9) && a.get("subject_id").equals(1))).map(a -> a.get("id")).distinct().count();
        final int grade9AsmtSubject2Count = (int) asmtByDim.stream().filter(a -> (a.get("grade_id").equals(-9) && a.get("subject_id").equals(2))).map(a -> a.get("id")).distinct().count();


        final List<ReportRow> reportRows = reportRepository.findByQuery(queryBuilder
                .asmtGrades(of(-8, -9))
                .subjectIds(of(1, 2))
                .schoolYears(of(1999, 2000))
                .dimensions(of(Ethnicity, Gender, Overall))
                .build());

        final int ethnicityCount = countRowsInTable(template, "ethnicity");
        final int genderCount = countRowsInTable(template, "gender");

        //dim: 2 genders and 2 ethnicities = 4 total
        //subject 1 - one asmt for one grade 8 x 2 years X 4 dim = 8 rows
        //            overall - for each year = 2 rows
        //subject 2 - 2 asmt for ONE grade 9 x 2 years X 4 dim = 16 rows
        //            overall - for 2 asmt and 2 years = 4 rows

        assertThat(reportRows.size()).isEqualTo(
                (grade8AsmtSubject1Count * ethnicityCount * genderCount * 2) +
                        (grade8AsmtSubject2Count * ethnicityCount * genderCount * 2) +
                        (grade9AsmtSubject1Count * ethnicityCount * genderCount * 2) +
                        (grade9AsmtSubject2Count * ethnicityCount * genderCount * 2) +
                        2 * (grade8AsmtSubject1Count + grade8AsmtSubject2Count + grade9AsmtSubject1Count + grade9AsmtSubject2Count)
        );

        final List<ReportRow> rowsWithNonZeroValues = reportRows.stream().filter(r -> (r.getMeasures().getAvgScaleScore() != null)).collect(Collectors.toList());
        assertThat(rowsWithNonZeroValues.size()).isEqualTo(14);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getOrganization).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator()
                .containsOnly(new Organization(null, null, State));

        // This verifies that the data is grouped by asmt_id to support a use case when there are two assessments for
        // the same subject/grade/type and exam school year.
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).distinct().collect(toSet()))
                .usingFieldByFieldElementComparator().containsExactlyInAnyOrder(
                new Assessment(-8, -8, 1),
                new Assessment(-9, -9, 2),
                new Assessment(-10, -9, 2));

        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getExamSchoolYear).filter(y -> (y == 1999)).count()).isEqualTo(8);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getExamSchoolYear).filter(y -> (y == 2000)).count()).isEqualTo(6);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).filter(a -> (a.getSubjectId() == 1)).count()).isEqualTo(5);
        assertThat(rowsWithNonZeroValues.stream().map(ReportRow::getAssessment).filter(a -> (a.getSubjectId() == 2)).count()).isEqualTo(9);
    }
}