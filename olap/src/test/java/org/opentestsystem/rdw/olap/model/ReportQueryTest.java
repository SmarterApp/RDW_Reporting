package org.opentestsystem.rdw.olap.model;

import org.junit.Before;
import org.junit.Test;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.olap.model.DimensionType.Overall;

public class ReportQueryTest {

    private ReportQuery.Builder builder;

    @Before
    public void setUp() {
        builder = ReportQuery.builder()
                .asmtGrades(of(-8))
                .includeState(true)
                .schoolYears(of(1999))
                .subjectIds(of(1))
                .dimension(Overall);
    }

    @Test
    public void itShouldValidate() {
        ReportQuery.checkIsValid(builder.build());
        ReportQuery.checkIsValid(builder.includeState(false).includeAllDistricts(true).build());
        ReportQuery.checkIsValid(builder.includeState(false).includeAllDistricts(false).includeAllSchools(true).build());
        ReportQuery.checkIsValid(builder.includeState(false).includeAllDistricts(false).includeAllSchools(false).districtIds(of(1)).build());
        ReportQuery.checkIsValid(builder.includeState(false).includeAllDistricts(false).includeAllSchools(false).districtIds(null).schoolIds(of(1)).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireNotEmptyQuery() {
        ReportQuery.checkIsValid(ReportQuery.builder().build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubjectId() {
        ReportQuery.checkIsValid(builder.subjectIds(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireAsmtGrades() {
        ReportQuery.checkIsValid(builder.asmtGrades(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSchoolYears() {
        ReportQuery.checkIsValid(builder.schoolYears(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireDimensionTypes() {
        ReportQuery.checkIsValid(builder.dimensions(null).build());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireOrganization() {
        ReportQuery.checkIsValid(builder.includeState(false).build());
    }
}