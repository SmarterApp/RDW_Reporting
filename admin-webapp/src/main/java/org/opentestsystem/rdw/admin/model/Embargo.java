package org.opentestsystem.rdw.admin.model;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

/**
 * This class encapsulates the current embargo state for an organization.
 * It combines the multiple raw embargo settings and some useful metadata for the UI.
 */
public class Embargo {

    private OrganizationType organizationType;  // organization type, State, District, etc.
    private Long organizationId;                // organization id
    private String organizationName;            // organization name
    private Integer schoolYear;                 // school year
    private Boolean individualEnabled;
    private Boolean aggregateEnabled;
    private Boolean readOnly;                   // true for State if user doesn't have permissions to modify
    private Map<Subject, Long> examCounts;      // subject -> summative exam count

    /**
     * @return embargo organization type
     */
    public OrganizationType getOrganizationType() {
        return organizationType;
    }

    /**
     * @return embargo organization id; null for State
     */
    public Long getOrganizationId() {
        return organizationId;
    }

    /**
     * @return embargo organization name
     */
    public String getOrganizationName() {
        return organizationName;
    }

    /**
     * @return embargo school year
     */
    public Integer getSchoolYear() {
        return schoolYear;
    }

    /**
     * @return true if individual embargo is enabled, false if individual results are released
     */
    public Boolean isIndividualEnabled() {
        return individualEnabled;
    }

    /**
     * @return true if aggregate embargo is enabled, false if aggregate results are released
     */
    public Boolean isAggregateEnabled() {
        return aggregateEnabled;
    }

    /**
     * @return true if user isn't allowed to modify embargo settings for the state; null or false for districts
     */
    public Boolean isReadOnly() {
        return readOnly;
    }

    /**
     * @return map of subject to summative exam counts for given organization and school year
     */
    public Map<Subject, Long> getExamCounts() {
        return examCounts;
    }

    /**
     * @return new builder with this embargo's values
     */
    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return new builder
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private OrganizationType organizationType;
        private Long organizationId;
        private String organizationName;
        private Integer schoolYear;
        private Boolean individualEnabled;
        private Boolean aggregateEnabled;
        private Boolean readOnly;
        private Map<Subject, Long> examCounts = newHashMap();

        public Embargo build() {
            final Embargo embargo = new Embargo();

            embargo.organizationType = organizationType;
            embargo.organizationId = organizationId;
            embargo.organizationName = organizationName;
            embargo.schoolYear = schoolYear;
            embargo.individualEnabled = individualEnabled;
            embargo.aggregateEnabled = aggregateEnabled;
            embargo.readOnly = readOnly;
            embargo.examCounts = examCounts.isEmpty() ? null : ImmutableMap.copyOf(examCounts);

            return embargo;
        }

        public Builder copy(final Embargo embargo) {
            organizationType = embargo.organizationType;
            organizationId = embargo.organizationId;
            organizationName = embargo.organizationName;
            schoolYear = embargo.schoolYear;
            individualEnabled = embargo.individualEnabled;
            aggregateEnabled = embargo.aggregateEnabled;
            readOnly = embargo.readOnly;
            examCounts.clear();
            if (embargo.examCounts != null) {
                examCounts.putAll(embargo.examCounts);
            }
            return this;
        }

        public Builder organization(final OrganizationType type, final long id, final String name) {
            this.organizationType = type;
            this.organizationId = id;
            this.organizationName = name;
            return this;
        }

        public Builder organizationType(final OrganizationType type) {
            this.organizationType = type;
            return this;
        }

        public Builder organizationId(final Long id) {
            this.organizationId = id;
            return this;
        }

        public Builder organizationName(final String name) {
            this.organizationName = name;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder individualEnabled(final Boolean individualEnabled) {
            this.individualEnabled = individualEnabled;
            return this;
        }

        public Builder aggregateEnabled(final Boolean aggregateEnabled) {
            this.aggregateEnabled = aggregateEnabled;
            return this;
        }

        public Builder readOnly(final Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder examCount(final Subject subject, final long count) {
            this.examCounts.put(subject, count);
            return this;
        }

        public Builder examCounts(final Map<Subject, Long> counts) {
            if (counts != null && !counts.isEmpty()) {
                this.examCounts.putAll(counts);
            }
            return this;
        }
    }
}
