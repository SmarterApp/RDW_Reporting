package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.Ordering;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.repository.InstructionalResourceRepository;
import org.opentestsystem.rdw.admin.service.InstructionalResourceService;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.NoSuchElementException;

import static org.opentestsystem.rdw.admin.security.AdminPermission.InstructionalResourceWrite;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

/**
 * Default repository-backed implementation of an InstructionalResourceService.
 */
@Service
class DefaultInstructionalResourceService implements InstructionalResourceService {
    private static final Ordering<InstructionalResource> ResourceOrdering = Ordering.natural()
            .onResultOf(InstructionalResource::getAssessmentName)
            .compound(Ordering.natural()
                    .onResultOf(InstructionalResource::getOrganizationType))
            .compound(Ordering.natural()
                    .nullsFirst()
                    .onResultOf(InstructionalResource::getOrganizationName))
            .compound(Ordering.natural()
                    .onResultOf(InstructionalResource::getPerformanceLevel));


    private final InstructionalResourceRepository repository;
    private final OrganizationRepository organizationRepository;

    @Autowired
    public DefaultInstructionalResourceService(final InstructionalResourceRepository repository,
                                               final OrganizationRepository organizationRepository) {
        this.repository = repository;
        this.organizationRepository = organizationRepository;
    }

    @Override
    public List<InstructionalResource> findAll(final User user) {
        return ResourceOrdering.sortedCopy(repository.findAll(toScope(user)));
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public InstructionalResource create(final User user, final InstructionalResource instructionalResource) {
        final PermissionScope scope = toScope(user);

        checkAccess(scope, instructionalResource);

        repository.create(instructionalResource);
        return repository.findOne(scope, instructionalResource);
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public InstructionalResource update(final User user, final InstructionalResource instructionalResource) {
        final PermissionScope scope = toScope(user);

        final InstructionalResource existing = repository.findOne(scope, instructionalResource);
        if (existing == null) {
            throw new NoSuchElementException("Instructional Resource for Organization: " + instructionalResource.getOrganizationType().name() +
                    " id: " + instructionalResource.getOrganizationId() +
                    " performance level: " + instructionalResource.getPerformanceLevel() +
                    " not found");
        }
        final InstructionalResource updated = InstructionalResource.builder()
                .copy(existing)
                .resource(instructionalResource.getResource())
                .build();

        repository.update(updated);
        return updated;
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public void delete(final User user, final InstructionalResource instructionalResource) {
        final PermissionScope scope = toScope(user);

        checkAccess(scope, instructionalResource);

        repository.delete(instructionalResource);
    }

    private PermissionScope toScope(final User user) {
        return user.getPermissionScopeByPermissionId(InstructionalResourceWrite);
    }

    private boolean invalidOrganization(final PermissionScope permissionScope, final InstructionalResource instructionalResource) {
        if (instructionalResource.getOrganizationType() == State) {
            return !permissionScope.isStatewide();
        }
        final Organization organization = organizationRepository.findOneByTypeAndId(permissionScope, instructionalResource.getOrganizationType(), instructionalResource.getOrganizationId());
        return organization == null;
    }

    private void checkAccess(final PermissionScope permissionScope, final InstructionalResource instructionalResource) {
        if (invalidOrganization(permissionScope, instructionalResource)) {
            throw new NoSuchElementException("Organization: " + instructionalResource.getOrganizationType().name() +
                    " id: " + instructionalResource.getOrganizationId() + " not found");
        }
    }
}
