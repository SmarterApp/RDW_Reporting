package org.opentestsystem.rdw.admin.security;

import org.opentestsystem.rdw.reporting.common.web.security.auth.AuthorizationService;
import org.opentestsystem.rdw.reporting.common.web.security.auth.CachingPermissionService;
import org.opentestsystem.rdw.reporting.common.web.security.auth.DefaultAuthorizationService;
import org.opentestsystem.rdw.reporting.common.web.security.auth.GroupGrantRepository;
import org.opentestsystem.rdw.reporting.common.web.security.auth.JdbcGroupGrantRepository;
import org.opentestsystem.rdw.reporting.common.web.security.saml.SamlWebSecurityConfiguration;
import org.opentestsystem.rdw.security.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

@Profile("!test")
@Configuration
public class WebSecurityConfiguration extends SamlWebSecurityConfiguration {

    @Override
    public AuthenticationSuccessHandler authenticationSuccessHandler() {
        return new SavedRequestAwareAuthenticationSuccessHandler();
    }

    @Override
    public AuthenticationFailureHandler authenticationFailureHandler() {
        final SimpleUrlAuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();
        failureHandler.setUseForward(true);
        failureHandler.setDefaultFailureUrl("/error");
        return failureHandler;
    }

    @Bean
    public CachingPermissionService cachingPermissionService(
            @Qualifier("defaultPermissionService") final PermissionService permissionService) {
        return new CachingPermissionService(permissionService);
    }

    @Bean
    public GroupGrantRepository groupGrantRepository(
            final NamedParameterJdbcTemplate jdbcTemplate) {
        return new JdbcGroupGrantRepository(jdbcTemplate);
    }

    @Bean
    public AuthorizationService authorizationService(
            final @Value("${app.state.code}") String stateCode,
            final @Qualifier("cachingPermissionService") PermissionService permissionService,
            final OrganizationRepository organizationRepository,
            final GroupGrantRepository groupGrantRepository) {
        return new DefaultAuthorizationService(stateCode, permissionService, organizationRepository, groupGrantRepository);
    }

}
