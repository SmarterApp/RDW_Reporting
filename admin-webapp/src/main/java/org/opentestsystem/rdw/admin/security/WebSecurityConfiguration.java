package org.opentestsystem.rdw.admin.security;

import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtSecurityConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtWebSecurityConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

@Configuration
@ConditionalOnProperty(name = "app.test-mode", havingValue = "false", matchIfMissing = true)
@Import({
        JwtWebSecurityConfiguration.class
})
public class WebSecurityConfiguration {

}
//public class WebSecurityConfiguration extends SamlWebSecurityConfiguration {
//
//    @Override
//    public AuthenticationSuccessHandler authenticationSuccessHandler() {
//        return new SavedRequestAwareAuthenticationSuccessHandler();
//    }
//
//    @Override
//    public AuthenticationFailureHandler authenticationFailureHandler() {
//        final SimpleUrlAuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();
//        failureHandler.setUseForward(true);
//        failureHandler.setDefaultFailureUrl("/error");
//        return failureHandler;
//    }
//
//    @Bean
//    public CachingPermissionService cachingPermissionService(
//            @Qualifier("defaultPermissionService") final PermissionService permissionService) {
//        return new CachingPermissionService(permissionService);
//    }
//
//    @Bean
//    public GroupGrantRepository groupGrantRepository(
//            @Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate jdbcTemplate) {
//        return new JdbcGroupGrantRepository(jdbcTemplate);
//    }
//
//    @Bean
//    public AuthorizationService authorizationService(
//            final @Value("${app.state.code}") String stateCode,
//            final @Qualifier("cachingPermissionService") PermissionService permissionService,
//            final OrganizationRepository organizationRepository,
//            final GroupGrantRepository groupGrantRepository) {
//        return new DefaultAuthorizationService(stateCode, permissionService, organizationRepository, groupGrantRepository);
//    }
//
//}
