package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.ImportStatus;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.StudentGroupBatchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * JDBC implementation of {@link StudentGroupBatchRepository}.
 */
@Repository
class JdbcStudentGroupBatchRepository implements StudentGroupBatchRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.student_group_batch.create}")
    private String sqlCreate;

    @Value("${sql.student_group_batch.findOne}")
    private String sqlFindOne;

    @Value("${sql.student_group_batch.findOneByDigest}")
    private String sqlFindOneByDigest;

    @Value("${sql.student_group_batch.sqlFindByCreator}")
    private String sqlFindByCreator;

    @Autowired
    JdbcStudentGroupBatchRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Transactional
    public StudentGroupBatch create(final StudentGroupBatch studentGroupBatch) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("status", studentGroupBatch.getStatus().getValue())
                .addValue("digest", studentGroupBatch.getDigest())
                .addValue("creator", studentGroupBatch.getCreator())
                .addValue("message", studentGroupBatch.getMessage())
                .addValue("filename", studentGroupBatch.getFilename());

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);

        return findOne(keyHolder.getKey().longValue());
    }

    @Override
    public StudentGroupBatch findOne(final long id) {
        try {
            return jdbcTemplate.queryForObject(sqlFindOne, new MapSqlParameterSource().addValue("id", id), new StudentGroupBatchRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public StudentGroupBatch findOneByDigest(final String digest) {
        try {
            return jdbcTemplate.queryForObject(sqlFindOneByDigest, new MapSqlParameterSource().addValue("digest", digest), new StudentGroupBatchRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public List<StudentGroupBatch> findByCreator(final String creator) {
        return jdbcTemplate.query(sqlFindByCreator, new MapSqlParameterSource().addValue("creator", creator), new StudentGroupBatchRowMapper());
    }

    private static class StudentGroupBatchRowMapper implements RowMapper<StudentGroupBatch> {
        @Override
        public StudentGroupBatch mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return StudentGroupBatch.builder()
                    .id(rs.getLong("id"))
                    .digest(rs.getString("digest"))
                    .status(ImportStatus.fromValue(rs.getInt("status")))
                    .creator(rs.getString("creator"))
                    .created(rs.getTimestamp("created").toInstant())
                    .updated(rs.getTimestamp("updated").toInstant())
                    .message(rs.getString("message"))
                    .filename(rs.getString("filename"))
                    .build();
        }
    }
}
