package org.opentestsystem.rdw.admin.security.session;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.security.jackson2.CoreJackson2Module;
import org.springframework.security.web.jackson2.WebJackson2Module;
import org.springframework.session.data.redis.config.ConfigureRedisAction;

/**
 * This class allows spring-redis to work in a secured redis environment
 */
@Configuration
@ConditionalOnProperty(name = "spring.session.store-type", havingValue = "redis")
public class SecuredRedisConfiguration {

    /**
     * This bean informs spring-redis to not configure session expiration and deletion keyspace events.
     * In a secured environment, these events must be configured manually by a redis admin.
     * <p>
     * Without this instruction, spring-redis will try to configure redis to dispatch these events and cause a startup
     * exception.
     *
     * @return ConfigureRedisAction.NO_OP
     */
    @Bean
    public static ConfigureRedisAction configureRedisAction() {
        return ConfigureRedisAction.NO_OP;
    }

    /**
     * Register a session RedisSerializer for persisting session information in Redis.
     *
     * @param objectMapper The application ObjectMapper
     * @return The session RedisSerializer
     */
    @Bean("springSessionDefaultRedisSerializer")
    public RedisSerializer<Object> springSessionDefaultRedisSerializer(final ObjectMapper objectMapper) {
        final ObjectMapper redisObjectMapper = objectMapper.copy();
        redisObjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        redisObjectMapper.registerModule(new WebJackson2Module());
        redisObjectMapper.registerModule(new GuavaModule());
        redisObjectMapper.registerModule(new CoreJackson2Module());
        redisObjectMapper.registerModule(new SamlModule());

        return new GenericJackson2JsonRedisSerializer(redisObjectMapper);
    }
}
