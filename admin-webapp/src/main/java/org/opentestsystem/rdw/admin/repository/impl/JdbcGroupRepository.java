package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.repository.GroupRepository;
import org.opentestsystem.rdw.common.model.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import static java.lang.Integer.parseInt;
import static org.opentestsystem.rdw.admin.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
public class JdbcGroupRepository implements GroupRepository {
    private final NamedParameterJdbcTemplate template;

    @Value("${sql.group.findAllByQuery}")
    private String findAllQuery;

    @Value("${sql.group.findAllDistinctSchoolYears}")
    private String findAllDistinctSchoolYears;

    @Value("${sql.group.delete}")
    private String deleteSql;

    @Autowired
    JdbcGroupRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Group> findAllByQuery(@NotNull final PermissionScope permissionScope, @NotNull final GroupQuery query) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(permissionScope))
                        .addValues(getQueryParameters(query)),
                (row, index) -> mapResultToGroup(row)
        );
    }

    @Override
    public List<Integer> findAllDistinctSchoolYears(@NotNull final PermissionScope permissionScope) {
        return template.query(
                findAllDistinctSchoolYears,
                getSecurityParameters(permissionScope),
                (row, index) -> row.getInt("school_year")
        );
    }

    @Override
    public void delete(final PermissionScope permissionScope,
                       final long id,
                       final long importId) {
        final int result = template.update(
                deleteSql,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(permissionScope))
                        .addValue("id", id)
                        .addValue("import_id", importId)
        );

        if(result == 0)
            throw new NoSuchElementException();
    }

    private static Group mapResultToGroup(final ResultSet row) throws SQLException {
        return Group.builder()
                .id(row.getLong("id"))
                .name(row.getString("group_name"))
                .schoolName(row.getString("school_name"))
                .schoolYear(row.getInt("school_year"))
                .subject(parseSubject(row.getString("subject_id")))
                .studentCount(row.getInt("student_count"))
                .build();
    }

    private static Map<String, Object> getQueryParameters(final GroupQuery query) {
        return ImmutableMap.<String, Object>builder()
                .put("school_id", query.getSchoolId())
                .put("subject_ids", query
                        .getSubjects()
                        .stream()
                        .map(Subject::id)
                        .collect(Collectors.toSet()))
                .put("school_year", query.getSchoolYear())
                .build();
    }

    private static Subject parseSubject(final String id) {
        try {
            return id == null
                    ? null
                    : Subject.valueOf(parseInt(id));
        } catch (IllegalArgumentException ignore) {
            return null;
        }
    }
}
