package org.opentestsystem.rdw.admin;

import org.opentestsystem.rdw.admin.web.NotFoundIndexTemplate;
import org.opentestsystem.rdw.security.client.permissionservice.PermissionWebServiceClient;
import org.opentestsystem.rdw.security.service.ComponentPermissionService;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.filter.ForwardedHeaderFilter;

import static org.springframework.boot.autoconfigure.security.SecurityProperties.DEFAULT_FILTER_ORDER;

@Configuration
public class ApplicationConfiguration {

    @Bean
    public PermissionWebServiceClient permissionWebServiceClient(
            @Value("${permissionservice.endpoint}") final String endpoint) {
        return new PermissionWebServiceClient(new RestTemplate(), endpoint);
    }

    @Bean
    public PermissionService defaultPermissionService(
            final PermissionWebServiceClient client,
            @Value("${permissionservice.component}") final String component) {
        return new ComponentPermissionService(client, component);
    }

    @Bean
    public EmbeddedServletContainerCustomizer notFoundCustomizer() {
        return new NotFoundIndexTemplate();
    }

    /**
     * Register a filter bean to extract values from "Forwarded" and "X-Forwarded-*" headers. This is so
     * the request info (e.g. host, schema) is correct, especially for interacting with SSO handlers.
     *
     * @return The filter registration bean
     */
    @Bean
    public FilterRegistrationBean forwardedHeaderFilter() {
        final FilterRegistrationBean registrationBean = new FilterRegistrationBean(new ForwardedHeaderFilter());
        //Must fire before the security filter chain
        registrationBean.setOrder(DEFAULT_FILTER_ORDER - 100);
        return registrationBean;
    }
}

