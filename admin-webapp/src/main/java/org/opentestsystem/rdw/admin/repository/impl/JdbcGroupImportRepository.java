package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.repository.GroupImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

/**
 * JDBC-backed implementation of a GroupImportRepository.
 */
@Repository
public class JdbcGroupImportRepository implements GroupImportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.import.createQuery}")
    private String createQuery;

    @Value("${sql.import.triggerQuery}")
    private String triggerQuery;

    @Autowired
    public JdbcGroupImportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public long create(final String digest, final String batch) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("digest", digest)
                .addValue("batch", batch);

        template.update(createQuery, parameterSource, keyHolder);

        return keyHolder.getKey().longValue();
    }

    @Override
    public void setProcessed(final long importId) {
        template.update(
                triggerQuery,
                new MapSqlParameterSource()
                        .addValue("import_id", importId));
    }
}
