package org.opentestsystem.rdw.admin.security.session;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.MissingNode;
import org.opentestsystem.rdw.admin.security.User;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.providers.ExpiringUsernameAuthenticationToken;

import java.io.IOException;
import java.util.Date;
import java.util.List;

/**
 * This class is responsible for deserializing SAMLCollection instances using
 * the built-in spring-saml deserialization method.
 *
 * Nearly all functionality is taken from {@link org.springframework.security.jackson2.UsernamePasswordAuthenticationTokenDeserializer}
 * with an additional deserialization of the tokenExpiration property and
 * handling of the credential property as a SAMLCredential object.
 */
class ExpiringUsernameAuthenticationTokenDeserializer extends StdDeserializer<ExpiringUsernameAuthenticationToken> {

    public ExpiringUsernameAuthenticationTokenDeserializer() {
        super(ExpiringUsernameAuthenticationToken.class);
    }

    /**
     * This method construct {@link UsernamePasswordAuthenticationToken} object from serialized json.
     * @param jp the JsonParser
     * @param ctxt the DeserializationContext
     * @return the user
     * @throws IOException if a exception during IO occurs
     * @throws JsonProcessingException if an error during JSON processing occurs
     */
    @Override
    public ExpiringUsernameAuthenticationToken deserialize(final JsonParser jp, final DeserializationContext ctxt) throws IOException {
        final ExpiringUsernameAuthenticationToken token;
        final ObjectMapper mapper = (ObjectMapper) jp.getCodec();
        final JsonNode jsonNode = mapper.readTree(jp);
        final Boolean authenticated = readJsonNode(jsonNode, "authenticated").asBoolean();
        final JsonNode principalNode = readJsonNode(jsonNode, "principal");
        final Object principal;
        if(principalNode.isObject()) {
            principal = mapper.readValue(principalNode.toString(), new TypeReference<User>() {});
        } else {
            principal = principalNode.asText();
        }
        final JsonNode expirationNode = readJsonNode(jsonNode, "tokenExpiration");
        final Date expiration = expirationNode.isMissingNode() ? null : mapper.readValue(expirationNode.toString(), Date.class);

        final Object credentials = mapper.readValue(readJsonNode(jsonNode, "credentials").toString(), Object.class);

        final List<GrantedAuthority> authorities = mapper.readValue(
                readJsonNode(jsonNode, "authorities").toString(), new TypeReference<List<GrantedAuthority>>() {
                });
        if (authenticated) {
            token = new ExpiringUsernameAuthenticationToken(expiration, principal, credentials, authorities);
        } else {
            token = new ExpiringUsernameAuthenticationToken(principal, credentials);
        }
        token.setDetails(readJsonNode(jsonNode, "details"));
        return token;
    }

    private JsonNode readJsonNode(final JsonNode jsonNode, final String field) {
        return jsonNode.has(field) ? jsonNode.get(field) : MissingNode.getInstance();
    }

}


