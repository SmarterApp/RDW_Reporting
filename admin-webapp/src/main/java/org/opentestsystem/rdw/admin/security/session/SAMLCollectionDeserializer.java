package org.opentestsystem.rdw.admin.security.session;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;
import org.opensaml.xml.XMLObject;
import org.springframework.security.saml.parser.SAMLCollection;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Iterator;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This class is responsible for deserializing SAMLCollection instances using
 * the built-in spring-saml deserialization method.
 *
 * @see SAMLCollection#readObject(ObjectInputStream)
 */
class SAMLCollectionDeserializer extends StdScalarDeserializer<SAMLCollection> {

    private final SAMLXmlDeserializer deserializer;

    public SAMLCollectionDeserializer() {
        super(SAMLCollection.class);
        this.deserializer = new SAMLXmlDeserializer();
    }

    @Override
    public SAMLCollection deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
        final List<XMLObject> values = newArrayList();
        final ObjectMapper mapper = (ObjectMapper) p.getCodec();
        if (!p.isExpectedStartArrayToken()) {
            throw new IllegalStateException("Unable to parse SAMLCollection: initial token not array start");
        }
        p.nextToken();

        final Iterator<String> serializedValues = mapper.readValues(p, ctxt.constructType(String.class));

        while (serializedValues.hasNext()) {
            values.add(deserializer.deserialize(serializedValues.next()));
        }

        return new SAMLCollection(values);
    }
}