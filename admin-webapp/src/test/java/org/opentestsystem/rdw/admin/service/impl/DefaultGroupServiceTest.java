package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.repository.GroupImportRepository;
import org.opentestsystem.rdw.admin.repository.GroupRepository;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.SchoolService;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.security.PermissionScope.STATEWIDE;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupServiceTest {

    @Mock
    public GroupRepository repository;

    @Mock
    public GroupImportRepository importRepository;

    @Mock
    public SchoolService schoolService;

    @Mock
    public User user;

    private DefaultGroupService service;

    @Before
    public void setup() {
        service = new DefaultGroupService(repository, importRepository, schoolService);

        final Map<String, Permission> permissions = new HashMap<>();
        final Permission permission = new Permission("GROUP_WRITE", STATEWIDE);
        permissions.put("GROUP_WRITE", permission);
        when(user.getPermissionsById()).thenReturn(permissions);
    }

    @Test
    public void itShouldDeleteAGroupWithAnImport() {
        final long importId = 123L;
        when(importRepository.create(anyString(), eq("group delete")))
                .thenReturn(importId);
        final long groupId = 456L;

        service.delete(user, groupId);
        verify(repository).delete(STATEWIDE, groupId, importId);
        verify(importRepository).setProcessed(importId);
    }

}