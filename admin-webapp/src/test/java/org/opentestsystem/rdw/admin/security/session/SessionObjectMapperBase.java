package org.opentestsystem.rdw.admin.security.session;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import org.junit.Before;
import org.opensaml.Configuration;
import org.opensaml.DefaultBootstrap;
import org.opensaml.saml2.core.Response;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.parse.BasicParserPool;
import org.springframework.security.jackson2.CoreJackson2Module;
import org.springframework.security.web.jackson2.WebJackson2Module;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.InputStream;

/**
 * Base test class providing a configured Session ObjectMapper instance.
 */
public abstract class SessionObjectMapperBase {

    private ObjectMapper objectMapper;

    @Before
    public void setupObjectMapper() {
        objectMapper = new ObjectMapper();
        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        objectMapper.registerModule(new SamlModule());
        objectMapper.registerModule(new WebJackson2Module());
        objectMapper.registerModule(new GuavaModule());
        objectMapper.registerModule(new CoreJackson2Module());
    }

    protected ObjectMapper getObjectMapper() {
        return objectMapper;
    }

    protected Response readResponseFromResource(final String resource) throws Exception {
        try (final InputStream is = this.getClass().getResourceAsStream(resource)) {
            DefaultBootstrap.bootstrap();
            final BasicParserPool pool = new BasicParserPool();
            pool.setNamespaceAware(true);
            final Document document = pool.parse(is);
            final Element root = document.getDocumentElement();

            final UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
            final Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(root);
            return (Response) unmarshaller.unmarshall(root);
        }
    }
}
