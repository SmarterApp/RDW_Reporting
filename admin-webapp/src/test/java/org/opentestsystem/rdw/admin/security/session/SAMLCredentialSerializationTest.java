package org.opentestsystem.rdw.admin.security.session;

import org.junit.Before;
import org.junit.Test;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.Attribute;
import org.opensaml.saml2.core.NameID;
import org.opensaml.saml2.core.Response;
import org.springframework.security.saml.SAMLCredential;

import java.util.List;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

public class SAMLCredentialSerializationTest extends SessionObjectMapperBase {

    private SAMLCredential credential;

    @Before
    public void setup() throws Exception {
        final Response response = readResponseFromResource("/samlResponse.large.xml");
        final Assertion assertion = response.getAssertions().get(0);
        final NameID nameID = assertion.getSubject().getNameID();
        final List<Attribute> attributes = assertion.getAttributeStatements().stream()
                .flatMap(statement -> statement.getAttributes().stream())
                .collect(Collectors.toList());

        credential = new SAMLCredential(nameID, assertion, "https://some.sso.provider.org/", attributes,"https://somewhere.org/");
    }

    @Test
    public void itShouldRoundTripSAMLCredentials() throws Exception {
        final String serializedCredential = getObjectMapper().writeValueAsString(credential);
        final SAMLCredential deserializedCredential = getObjectMapper().readValue(serializedCredential, SAMLCredential.class);

        assertThat(deserializedCredential.getNameID().getValue())
                .isNotBlank()
                .isEqualTo(credential.getNameID().getValue());
        assertThat(deserializedCredential.getAuthenticationAssertion().getID())
                .isNotBlank()
                .isEqualTo(credential.getAuthenticationAssertion().getID());
    }
}