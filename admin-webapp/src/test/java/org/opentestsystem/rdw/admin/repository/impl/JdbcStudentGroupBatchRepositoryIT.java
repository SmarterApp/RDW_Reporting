package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.ImportStatus;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.admin.repository.StudentGroupBatchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import javax.sql.DataSource;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcStudentGroupBatchRepository.class})
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO upload_student_group_batch (id, status, digest, creator, created, updated, message) VALUES" +
                "( -99,  0,  'digest-99', 'creator-99', '2017-07-18 19:45:33.966000', '2017-07-18 19:45:43.966000', 'message-99')," +
                "( -98,  1,  'digest-98', 'creator-1', '2017-07-18 19:46:33.966000', '2017-07-18 19:46:43.966000',  null)," +
                "( -97, -1,  'digest-97', 'creator-1', '2017-07-18 19:47:33.966000', '2017-07-18 19:47:43.966000',  null);"
})
public class JdbcStudentGroupBatchRepositoryIT {

    @Autowired
    private StudentGroupBatchRepository repository;

    @Autowired
    private DataSource dataSource;

    private JdbcTemplate jdbcTemplate;

    @Before
    public void setUp() {
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Test
    public void itShouldCreate() {
        final int initialCount = countRowsInTable(jdbcTemplate, "upload_student_group_batch");

        final StudentGroupBatch testBatch = repository.create(StudentGroupBatch.builder()
                .creator("creator")
                .digest("digest")
                .message("test")
                .status(ImportStatus.ACCEPTED)
                .filename("myFilename.csv")
                .build());
        assertThat(testBatch.getCreator()).isEqualTo("creator");
        assertThat(testBatch.getDigest()).isEqualTo("digest");
        assertThat(testBatch.getMessage()).isEqualTo("test");
        assertThat(testBatch.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(testBatch.getCreated()).isNotNull();
        assertThat(testBatch.getCreated()).isEqualTo(testBatch.getUpdated());
        assertThat(testBatch.getFilename()).isEqualTo("myFilename.csv");

        assertThat(countRowsInTable(jdbcTemplate, "upload_student_group_batch")).isEqualTo(initialCount + 1);
    }

    @Test
    public void itShouldFindOne() {
        assertThat(repository.findOne(-99)).isEqualTo(StudentGroupBatch
                .builder()
                .id(-99L)
                .status(ImportStatus.ACCEPTED)
                .digest("digest-99")
                .creator("creator-99")
                .created(Instant.parse("2017-07-18T19:45:33.966Z"))
                .updated(Instant.parse("2017-07-18T19:45:43.966Z"))
                .message("message-99")
                .build()
        );

        assertThat(repository.findOne(-1000)).isNull();
    }

    @Test
    public void itShouldFindOneByDigest() {
        assertThat(repository.findOneByDigest("digest-99")).isEqualTo(StudentGroupBatch
                .builder()
                .id(-99L)
                .status(ImportStatus.ACCEPTED)
                .digest("digest-99")
                .creator("creator-99")
                .created(Instant.parse("2017-07-18T19:45:33.966Z"))
                .updated(Instant.parse("2017-07-18T19:45:43.966Z"))
                .message("message-99")
                .build()
        );

        assertThat(repository.findOneByDigest("digest-1000")).isNull();
    }

    @Test
    public void itShouldFindByCreator() {
        assertThat(repository.findByCreator("creator-1")).containsExactlyInAnyOrder(StudentGroupBatch
                        .builder()
                        .id(-98L)
                        .status(ImportStatus.PROCESSED)
                        .digest("digest-98")
                        .creator("creator-1")
                        .created(Instant.parse("2017-07-18T19:46:33.966Z"))
                        .updated(Instant.parse("2017-07-18T19:46:43.966Z"))
                        .build(),

                StudentGroupBatch
                        .builder()
                        .id(-97L)
                        .status(ImportStatus.INVALID)
                        .digest("digest-97")
                        .creator("creator-1")
                        .created(Instant.parse("2017-07-18T19:47:33.966Z"))
                        .updated(Instant.parse("2017-07-18T19:47:43.966Z"))
                        .build()
        );

        assertThat(repository.findByCreator("creator-1000")).isEmpty();
    }
}