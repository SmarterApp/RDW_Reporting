package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.repository.ImportRepository;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;


@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {
        JdbcGroupRepository.class,
        JdbcImportRepository.class
})
@Sql(
        config = @SqlConfig(dataSource = "warehouseDatasource", transactionManager = "warehouseTxManager"),
        scripts = {"classpath:warehouse-integration-test-data.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcGroupRepositoryIT {

    @Autowired
    JdbcGroupRepository repository;

    @Autowired
    ImportRepository importRepository;

    @Autowired
    @Qualifier("warehouseJdbcTemplate")
    NamedParameterJdbcTemplate template;

    @Test
    public void itShouldFindByQuery() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        final List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(2);
    }

    @Test
    public void itShouldFindWhenSubjectIdIsNull() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.ELA))
                .build();

        final List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(1);
    }

    @Test
    public void itShouldFindWhenSchoolInDistrictOrSchoolGroupPermissionScope() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        assertThat(repository.findAllByQuery(districtGroups(-9L), query)).hasSize(2);
        assertThat(repository.findAllByQuery(schoolGroups(-11L), query)).hasSize(2);
    }

    @Test
    public void itShouldNotFindWhenSchoolNotInDistrictOrSchoolGroupPermissionScope() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-30)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        assertThat(repository.findAllByQuery(districtGroups(-9L), query)).isEmpty();
        assertThat(repository.findAllByQuery(schoolGroups(-11L), query)).isEmpty();
    }

    @Test
    public void itShouldNotFindWhenSchoolNotInDistrictPermissionScope() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        assertThat(repository.findAllByQuery(districts(-20L), query)).isEmpty();
    }

    @Test
    public void itShouldNotFindWhenSchoolNotInSchoolPermissionScope() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        assertThat(repository.findAllByQuery(schools(-20L), query)).isEmpty();
    }

    @Test
    public void itShouldPopulateGroupWhenFound() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        final List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(2);

        assertThat(actual.get(0))
                .isEqualToComparingFieldByFieldRecursively(
                        Group.builder()
                                .id(-10)
                                .name("group1")
                                .schoolName("school1")
                                .schoolId(-10)
                                .subjectCode("Math")
                                .schoolYear(2017)
                                .studentCount(1)
                                .build());
        assertThat(actual.get(1))
                .isEqualToComparingFieldByField(
                        Group.builder()
                                .id(-20)
                                .name("group2")
                                .schoolName("school1")
                                .schoolId(-10)
                                .subjectCode(null)
                                .schoolYear(2017)
                                .studentCount(0)
                                .build()
                );
    }

    @Test
    public void itShouldFindDistinctSchoolYears() {
        final List<Integer> actual = repository.findAllDistinctSchoolYears(statewide());

        assertThat(actual)
                .hasSize(2)
                .contains(2017)
                .contains(2016);
    }

    @Test
    public void itShouldFindDistinctSchoolYearsWithOnlySchoolPermission() {
        final List<Integer> actual = repository.findAllDistinctSchoolYears(schools(-20L));

        assertThat(actual)
                .hasSize(1)
                .contains(2016);
    }

    @Test
    public void itShouldUpdateGroups() {
        final GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjects(ImmutableSet.of(Subject.MATH))
                .build();

        List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(2);
        assertThat(actual.get(0).getId()).isEqualTo(-10);

        final long importId = importRepository.create(ImportContent.GROUPS, "admin group modification", "digest", "batch");
        repository.delete(statewide(), -10, importId);
        actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(1);
        assertThat(actual.get(0).getId()).isNotEqualTo(-10);

        final Map<String, Object> groupMap = template.queryForMap(
                "SELECT * from student_group WHERE id = -10",
                ImmutableMap.of());
        assertThat(groupMap.get("update_import_id")).isEqualTo(importId);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldThrowIfNotUpdated() {
        repository.delete(schools(-50L), -10, 123);
    }
}
