package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.ImportStatus;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.StudentGroupBatchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(StudentGroupBatchController.class)
public class StudentGroupBatchControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private StudentGroupBatchService service;

    private User user = User.builder()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void getStudentGroupBatchesShouldReturnResults() throws Exception {
        final List<StudentGroupBatch> result = newArrayList();
        result.add((StudentGroupBatch.builder().id(-99L).digest("digest").status(ImportStatus.ACCEPTED).build()));
        when(service.findAllStudentGroupBatches(any(User.class))).thenReturn(result);

        mvc.perform(get("/api/studentGroupBatches")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value("-99"))
                .andExpect(jsonPath("$[0].digest").value("digest"))
                .andExpect(jsonPath("$[0].status").value("ACCEPTED"));
    }


    @Test
    public void postStudentGroupsShouldReturnNewBatch() throws Exception {
        final MockMultipartFile uploadFile = new MockMultipartFile("file", "test-content".getBytes());

        when(service.upload(any(User.class), any(MultipartFile.class))).thenReturn(StudentGroupBatch.builder().id(-99L).digest("digest").status(ImportStatus.ACCEPTED).build());

        mvc.perform(fileUpload("/api/studentGroups").file(uploadFile)
                .with(user(user)))
                .andExpect(status().isAccepted())
                .andExpect(jsonPath("$.id").value("-99"))
                .andExpect(jsonPath("$.digest").value("digest"))
                .andExpect(jsonPath("$.status").value("ACCEPTED"));
    }

    @Test
    public void postStudentGroupsShouldReturnNothingOnFailure() throws Exception {
        final MockMultipartFile uploadFile = new MockMultipartFile("file", "test-content".getBytes());

        when(service.upload(any(User.class), any(MultipartFile.class))).thenThrow(new IllegalArgumentException());

        mvc.perform(fileUpload("/api/studentGroups").file(uploadFile)
                .with(user(user)))
                .andExpect(status().isBadRequest());
    }
}