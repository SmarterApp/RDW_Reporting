package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.configuration.ApplicationProperties;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.repository.InstructionalResourceRepository;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.PermissionScope;

import java.net.URL;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.AdminUserPermissionsTestBuilder.instructionalResources;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.DistrictGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.SchoolGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(MockitoJUnitRunner.class)
public class DefaultInstructionalResourceServiceTest {

    @Mock
    private OrganizationRepository organizationRepository;

    @Mock
    private InstructionalResourceRepository repository;

    @Captor
    private ArgumentCaptor<InstructionalResource> resourceCaptor;

    private InstructionalResource districtResource;
    private InstructionalResource stateResource;
    private InstructionalResource stateResourceWithName;
    private User user;
    private DefaultInstructionalResourceService service;

    @Before
    public void setup() throws Exception {
        final ApplicationProperties applicationProperties = new ApplicationProperties();
        applicationProperties.getState().setName("State Name");

        districtResource = InstructionalResource.builder()
                .assessmentName("Assesssment A")
                .performanceLevel(0)
                .organizationType(District)
                .organizationId(2)
                .resource(new URL("http://some-resource/"))
                .build();

        stateResource = InstructionalResource.builder()
                .assessmentName("Assessment A")
                .performanceLevel(0)
                .organizationType(State)
                .resource(new URL("http://some-state-resource/"))
                .build();

        stateResourceWithName = InstructionalResource.builder()
                .assessmentName("Assessment A")
                .performanceLevel(0)
                .organizationType(State)
                .organizationName(applicationProperties.getState().getName())
                .resource(new URL("http://some-state-resource/"))
                .build();

        user = User.builder()
                .id("aUser")
                .username("user")
                .password("pass")
                .permissionsById(instructionalResources(statewide()).getPermissionsById())
                .build();

        when(organizationRepository.findOneByTypeAndId(any(PermissionScope.class), any(OrganizationType.class), anyInt()))
                .thenReturn(mock(Organization.class));

        service = new DefaultInstructionalResourceService(repository, organizationRepository, applicationProperties);
    }

    @Test
    public void itShouldCreateAResource() {
        when(repository.findOne(eq(statewide()), eq(districtResource)))
                .thenReturn(districtResource);

        final InstructionalResource response = service.create(user, districtResource);
        assertThat(response).isEqualToComparingFieldByFieldRecursively(districtResource);

        verify(repository).create(eq(districtResource));
        verify(organizationRepository).findOneByTypeAndId(eq(statewide()), eq(District), eq(districtResource.getOrganizationId()));
    }

    @Test
    public void itShouldCreateAStateResource() {
        when(repository.findOne(eq(statewide()), eq(stateResource)))
                .thenReturn(stateResource);

        final InstructionalResource response = service.create(user, stateResource);
        assertThat(response).isEqualToComparingFieldByFieldRecursively(stateResourceWithName);

        verify(repository).create(eq(stateResource));
        verifyZeroInteractions(organizationRepository);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotCreateAResourceIfOrganizationIsNotFound() {
        when(organizationRepository.findOneByTypeAndId(any(PermissionScope.class), any(OrganizationType.class), anyInt()))
                .thenReturn(null);

        service.create(user, districtResource);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotCreateAStateResourceIfUserDoesNotHaveStatePermissions() {
        user = User.builder()
                .id("aUser")
                .username("user")
                .password("pass")
                .permissionsById(instructionalResources(districts(1L)).getPermissionsById())
                .build();

        service.create(user, stateResource);
    }

    @Test
    public void itShouldUpdateAResource() throws Exception {
        final InstructionalResource updated = InstructionalResource.builder()
                .copy(districtResource)
                .resource(new URL("http://updated-resource/"))
                .build();

        when(repository.findOne(eq(statewide()), eq(updated)))
                .thenReturn(districtResource);

        assertThat(service.update(user, updated))
                .isEqualToComparingFieldByFieldRecursively(updated);

        verify(repository).update(resourceCaptor.capture());
        assertThat(resourceCaptor.getValue())
                .isEqualToComparingFieldByFieldRecursively(updated);
    }

    @Test
    public void itShouldDeleteAResource() {
        service.delete(user, districtResource);
        verify(organizationRepository).findOneByTypeAndId(eq(statewide()), eq(District), eq(districtResource.getOrganizationId()));
        verify(repository).delete(districtResource);
    }

    @Test
    public void itShouldDeleteAStateResource() {
        service.delete(user, stateResource);
        verify(repository).delete(stateResource);
        verifyZeroInteractions(organizationRepository);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotDeleteAResourceIfOrganizationIsNotFound() {
        when(organizationRepository.findOneByTypeAndId(any(PermissionScope.class), any(OrganizationType.class), anyInt()))
                .thenReturn(null);

        service.delete(user, districtResource);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotDeleteAStateResourceIfUserDoesNotHaveStatePermissions() {
        user = User.builder()
                .id("aUser")
                .username("user")
                .password("pass")
                .permissionsById(instructionalResources(districts(1L)).getPermissionsById())
                .build();

        service.delete(user, stateResource);
    }

    @Test
    public void itShouldOrderFoundResources() {
        final List<InstructionalResource> orderedResources = newArrayList();
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(State).performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(State).performanceLevel(1).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(State).performanceLevel(2).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(State).performanceLevel(3).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(DistrictGroup).organizationName("District Group A").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(DistrictGroup).organizationName("District Group B").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(District).organizationName("District A").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(District).organizationName("District B").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(SchoolGroup).organizationName("School Group A").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(SchoolGroup).organizationName("School Group B").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(School).organizationName("School A").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment A").organizationType(School).organizationName("School B").performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment B").organizationType(State).performanceLevel(0).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment B").organizationType(State).performanceLevel(1).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment B").organizationType(State).performanceLevel(2).build());
        orderedResources.add(InstructionalResource.builder().assessmentName("Assessment B").organizationType(State).performanceLevel(3).build());

        final List<InstructionalResource> randomizedResources = newArrayList(orderedResources);
        Collections.shuffle(randomizedResources);

        when(repository.findAll(eq(statewide()))).thenReturn(randomizedResources);

        assertThat(service.findAll(user))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(service.setStateName(orderedResources));
    }

}