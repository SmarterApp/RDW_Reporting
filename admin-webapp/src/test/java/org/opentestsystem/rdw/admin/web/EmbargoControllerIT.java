package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.service.EmbargoService;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.web.ExceptionHandlerControllerAdvice;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.security.AdminPermission.EmbargoWrite;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(EmbargoController.class)
@Import(ExceptionHandlerControllerAdvice.class)
public class EmbargoControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private EmbargoService service;

    private final User user = User.builder()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .permissionsById(ImmutableMap.of(EmbargoWrite, new Permission(EmbargoWrite, districts(123L))))
            .build();

    @Test
    public void itShouldGetEmbargosForUser() throws Exception {
        when(service.findAll(user)).thenReturn(ImmutableList.of(
                Embargo.builder()
                        .organizationType(OrganizationType.State)
                        .individualEnabled(false)
                        .aggregateEnabled(true)
                        .readOnly(true)
                        .build(),
                Embargo.builder()
                        .organizationType(OrganizationType.District)
                        .organizationId(123L)
                        .organizationName("LAUSD")
                        .individualEnabled(false)
                        .aggregateEnabled(false)
                        .build()
        ));

        mvc.perform(get("/api/embargos")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].organizationType").value("State"))
                .andExpect(jsonPath("$[0].individualEnabled").value("false"))
                .andExpect(jsonPath("$[0].aggregateEnabled").value("true"))
                .andExpect(jsonPath("$[0].readOnly").value("true"))
                .andExpect(jsonPath("$[1].organizationType").value("District"))
                .andExpect(jsonPath("$[1].organizationId").value("123"))
                .andExpect(jsonPath("$[1].organizationName").value("LAUSD"))
                .andExpect(jsonPath("$[1].individualEnabled").value("false"))
                .andExpect(jsonPath("$[1].aggregateEnabled").value("false"));
    }

    @Test
    public void itShouldPutEmbargoForState() throws Exception {
        mvc.perform(put("/api/embargos/State/0/Aggregate")
                .content("false")
                .with(user(user)))
                .andExpect(status().isOk());

        final ArgumentCaptor<Embargo> embargoCaptor = ArgumentCaptor.forClass(Embargo.class);
        verify(service).save(eq(user), embargoCaptor.capture());
        final Embargo embargo = embargoCaptor.getValue();
        assertThat(embargo.getOrganizationType()).isEqualTo(OrganizationType.State);
        assertThat(embargo.getOrganizationId()).isNull();
        assertThat(embargo.isAggregateEnabled()).isFalse();
        assertThat(embargo.isIndividualEnabled()).isNull();
    }

    @Test
    public void itShouldPutEmbargoForDistrict() throws Exception {
        mvc.perform(put("/api/embargos/District/123/Individual")
                .content("true")
                .with(user(user)))
                .andExpect(status().isOk());

        final ArgumentCaptor<Embargo> embargoCaptor = ArgumentCaptor.forClass(Embargo.class);
        verify(service).save(eq(user), embargoCaptor.capture());
        final Embargo embargo = embargoCaptor.getValue();
        assertThat(embargo.getOrganizationType()).isEqualTo(OrganizationType.District);
        assertThat(embargo.getOrganizationId()).isEqualTo(123);
        assertThat(embargo.isAggregateEnabled()).isNull();
        assertThat(embargo.isIndividualEnabled()).isTrue();
    }

    @Test
    public void putRequiresPermissions() throws Exception {
        doThrow(NoSuchElementException.class).when(service).save(eq(user), any(Embargo.class));

        mvc.perform(put("/api/embargos/District/123/Individual")
                .content("true")
                .with(user(user)))
                .andExpect(status().isNotFound());
    }

    @Test
    public void putRequiresValidType() throws Exception {
        mvc.perform(put("/api/embargos/School/100/Individual")
                .content("true")
                .with(user(user)))
                .andExpect(status().isBadRequest());
    }

    @Test
    public void putRequiresValidScope() throws Exception {
        mvc.perform(put("/api/embargos/District/123/BarterTown")
                .content("true")
                .with(user(user)))
                .andExpect(status().isBadRequest());
    }

    @Test
    public void putRequiresNumericId() throws Exception {
        mvc.perform(put("/api/embargos/State/null/Aggregate")
                .content("true")
                .with(user(user)))
                .andExpect(status().isBadRequest());
    }
}
