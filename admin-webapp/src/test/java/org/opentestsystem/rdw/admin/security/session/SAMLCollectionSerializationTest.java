package org.opentestsystem.rdw.admin.security.session;

import org.junit.Before;
import org.junit.Test;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.Attribute;
import org.opensaml.saml2.core.Response;
import org.springframework.security.saml.parser.SAMLCollection;

import java.util.List;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

public class SAMLCollectionSerializationTest extends SessionObjectMapperBase {

    private SAMLCollection<Attribute> collection;

    @Before
    public void setup() throws Exception {
        final Response response = readResponseFromResource("/samlResponse.large.xml");
        final Assertion assertion = response.getAssertions().get(0);
        final List<Attribute> attributes = assertion.getAttributeStatements().stream()
                .flatMap(statement -> statement.getAttributes().stream())
                .collect(Collectors.toList());

        collection = new SAMLCollection<>(attributes);
    }

    @Test
    public void itShouldRoundTripASAMLCollection() throws Exception {
        final String serializedCollection = getObjectMapper().writeValueAsString(collection);
        final SAMLCollection<Attribute> deserializedCollection = getObjectMapper().readValue(serializedCollection, SAMLCollection.class);

        assertThat(deserializedCollection.getObject())
                .hasSameSizeAs(collection.getObject());

        assertThat(deserializedCollection.getObject().stream()
                .map(attribute -> attribute.getAttributeValues().size()))

                .containsExactlyElementsOf(collection.getObject().stream()
                        .map(attribute -> attribute.getAttributeValues().size())
                        .collect(Collectors.toList()));
    }
}