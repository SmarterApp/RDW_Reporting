package org.opentestsystem.rdw.admin.security.session;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.security.User;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import static org.assertj.core.api.Assertions.assertThat;

public class UserSerializationTest extends SessionObjectMapperBase {

    private User user;

    @Before
    public void setup() {
        user = User.builder()
                .id("testUser")
                .username("username")
                .password("password")
                .firstName("firstName")
                .permissionsById(ImmutableMap.of())
                .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
                .build();
    }

    @Test
    public void itShouldRoundTripAUser() throws Exception {
        final String serializedUser = getObjectMapper().writeValueAsString(user);
        final User deserializedUser = getObjectMapper().readValue(serializedUser, User.class);

        assertThat(deserializedUser.getUsername()).isEqualTo(user.getUsername());
        assertThat(deserializedUser.getAuthorities()).containsOnlyElementsOf(user.getAuthorities());
        assertThat(deserializedUser.getFirstName()).isEqualTo(user.getFirstName());
    }
}