package org.opentestsystem.rdw.reporting.processor.requesthandler;

import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.ExamFilter;
import org.opentestsystem.rdw.reporting.common.report.ExamReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.repository.StudentIdRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;

import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;

/**
 * This class is responsible for fetching the list of Student Ids
 * that should be included in a report for a given school and grade.
 */
@Component
public class SchoolGradeStudentIdFetcher implements StudentIdFetcher {

    private final StudentIdRepository studentIdRepository;

    @Autowired
    public SchoolGradeStudentIdFetcher(final StudentIdRepository studentIdRepository) {
        this.studentIdRepository = studentIdRepository;
    }

    @Override
    public boolean accept(final AbstractExamReportRequest reportRequest) {
        return SchoolGradeExamReportRequest.class.isInstance(reportRequest);
    }

    @Override
    public Collection<Long> fetchStudentIds(final AbstractExamReportRequest reportRequest,
                                            final PermissionScope permissionScope) {
        final SchoolGradeExamReportRequest request = (SchoolGradeExamReportRequest) reportRequest;
        final ExamFilter examFilter = ExamFilter.builder()
                .schoolYear(request.getSchoolYear())
                .schoolId(request.getSchoolId())
                .assessmentType(
                        request.getAssessmentType() == ExamReportAssessmentType.IAB ? IAB
                                : request.getAssessmentType() == ExamReportAssessmentType.ICA ? ICA
                                : null)
                .gradeId(request.getGradeId())
                .subject(request.getSubject())
                .build();

        return studentIdRepository.findStudentIdsBySchoolGradeAndYear(
                permissionScope,
                examFilter);
    }
}
