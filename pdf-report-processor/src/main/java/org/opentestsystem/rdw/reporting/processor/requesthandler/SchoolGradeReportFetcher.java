package org.opentestsystem.rdw.reporting.processor.requesthandler;

import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReport;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.iab.IabReport;
import org.opentestsystem.rdw.reporting.common.report.iab.IabReportRepository;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReport;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReportRepository;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.model.StudentCompositeReport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;

/**
 * This class is responsible for fetching and collating IAB and ICA reports
 * for a collection of students within the context of a school and grade.
 */
@Component
public class SchoolGradeReportFetcher implements ReportFetcher {

    private final IabReportRepository iabReportRepository;
    private final IcaReportRepository icaReportRepository;

    @Autowired
    public SchoolGradeReportFetcher(final IabReportRepository iabReportRepository,
                                    final IcaReportRepository icaReportRepository) {
        this.iabReportRepository = iabReportRepository;
        this.icaReportRepository = icaReportRepository;
    }

    @Override
    public boolean accept(final AbstractExamReportRequest reportRequest) {
        return SchoolGradeExamReportRequest.class.isInstance(reportRequest);
    }

    @Override
    public Map<Long, StudentCompositeReport> fetchReports(final AbstractExamReportRequest reportRequest,
                                                          final PermissionScope permissionScope,
                                                          final List<Long> studentIds) {
        final SchoolGradeExamReportRequest request = (SchoolGradeExamReportRequest) reportRequest;
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolYear(request.getSchoolYear())
                .schoolId(request.getSchoolId())
                .assessmentType(request.getAssessmentType() == null ? null : request.getAssessmentType().getAssessmentType())
                .gradeId(request.getGradeId())
                .subject(request.getSubject())
                .build();

        final Map<Long, StudentCompositeReport> compositeReports = new HashMap<>();

        appendIABReports(compositeReports, permissionScope, studentIds, examQueryParams);
        appendICAReports(compositeReports, permissionScope, studentIds, examQueryParams);
        //TODO Append Summitive Reports

        return compositeReports;
    }

    private void appendIABReports(final Map<Long, StudentCompositeReport> compositeReports,
                                  final PermissionScope permissionScope,
                                  final Collection<Long> studentIds,
                                  final ExamQueryParams examQueryParams) {
        if (examQueryParams.getAssessmentType() != null && examQueryParams.getAssessmentType() != IAB) {
            return;
        }

        final Map<Long, Map<Subject, IabReport>> iabReports = iabReportRepository
                .findAllForStudentsByExamFilter(
                        permissionScope,
                        studentIds,
                        examQueryParams);

        iabReports.entrySet().forEach(studentEntry -> {
            final Optional<Student> student = studentEntry.getValue().values().stream()
                    .filter(Objects::nonNull)
                    .map(AbstractExamReport::getStudent)
                    .findFirst();
            if (!student.isPresent()) return;

            final StudentCompositeReport compositeReport = StudentCompositeReport.builder()
                    .iabEla(studentEntry.getValue().get(ELA))
                    .iabMath(studentEntry.getValue().get(MATH))
                    .student(student.get())
                    .build();
            compositeReports.put(studentEntry.getKey(), compositeReport);
        });
    }

    private void appendICAReports(final Map<Long, StudentCompositeReport> compositeReports,
                                  final PermissionScope permissionScope,
                                  final Collection<Long> studentIds,
                                  final ExamQueryParams examQueryParams) {
        if (examQueryParams.getAssessmentType() != null && examQueryParams.getAssessmentType() != ICA) {
            return;
        }

        final Map<Long, Map<Subject, IcaReport>> icaReports = icaReportRepository
                .findAllForStudentsByExamFilter(
                        permissionScope,
                        studentIds,
                        examQueryParams);

        icaReports.entrySet().forEach(studentEntry -> {
            final Optional<Student> student = studentEntry.getValue().values().stream()
                    .filter(Objects::nonNull)
                    .map(AbstractExamReport::getStudent)
                    .findFirst();
            if (!student.isPresent()) return;

            final StudentCompositeReport existing = compositeReports
                    .computeIfAbsent(studentEntry.getKey(), (id) -> StudentCompositeReport.builder().build());

            final StudentCompositeReport compositeReport = StudentCompositeReport.builder()
                    .copy(existing)
                    .icaEla(studentEntry.getValue().get(ELA))
                    .icaMath(studentEntry.getValue().get(MATH))
                    .student(student.get())
                    .build();
            compositeReports.put(studentEntry.getKey(), compositeReport);
        });
    }
}
