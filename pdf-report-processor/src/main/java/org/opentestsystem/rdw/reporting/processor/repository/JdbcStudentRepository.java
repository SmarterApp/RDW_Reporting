package org.opentestsystem.rdw.reporting.processor.repository;

import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collection;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getExamFilterParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

/**
 * JDBC-backed implementation of a StudentRepository
 */
@Repository
public class JdbcStudentRepository implements StudentRepository {

    @Value("${sql.student.findByExamQueryParams}")
    private String findByExamQueryParams;

    @Value("${sql.student.findByExamQueryParamsWithGroup}")
    private String findByExamQueryParamsWithGroup;

    private final NamedParameterJdbcTemplate template;

    @Autowired
    public JdbcStudentRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Collection<Student> findStudentsByExamQueryParams(final PermissionScope permissionScope,
                                                             final ExamQueryParams examQueryParams) {
        final String query = examQueryParams.getGroupId() == null ? findByExamQueryParams : findByExamQueryParamsWithGroup;

        return template.query(
                query,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(permissionScope))
                        .addValues(getExamFilterParameters(examQueryParams)),
                (row, rowNum) -> Students.map(row, Student.builder()).build()
        );
    }
}
