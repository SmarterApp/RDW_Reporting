package org.opentestsystem.rdw.reporting.processor.configuration;

import org.springframework.batch.core.configuration.annotation.BatchConfigurer;
import org.springframework.batch.core.scope.context.JobContext;
import org.springframework.batch.core.scope.context.JobSynchronizationManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.task.TaskDecorator;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import javax.sql.DataSource;

/**
 * Configure Spring Batch.
 */
@Configuration
public class BatchConfiguration {

    @Bean
    @Primary
    public BatchConfigurer batchConfigurer(final DataSource dataSource,
                                           @Qualifier("batchJobExecutor") final TaskExecutor taskExecutor) {
        return new ReportingBatchConfigurer(dataSource, taskExecutor);
    }

    @Bean
    public TaskExecutor batchJobExecutor() {
        final ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(2);
        executor.setMaxPoolSize(5);
        executor.setDaemon(true);
        executor.setThreadGroupName("spring-batch-job");
        executor.setAwaitTerminationSeconds(10);
        return executor;
    }

    @Bean
    public TaskExecutor batchStepExecutor() {
        final ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(4);
        executor.setMaxPoolSize(10);
        executor.setDaemon(true);
        executor.setThreadGroupName("spring-batch-step");
        executor.setAwaitTerminationSeconds(10);
        executor.setTaskDecorator(jobScopeDecorator());
        return executor;
    }

    /**
     * This decorator is required to pass the current JobScope into steps executed
     * outside of the job thread.
     *
     * @return A JobScope task decorator.
     */
    private TaskDecorator jobScopeDecorator() {
        return runnable -> {
            final JobContext parentContext = JobSynchronizationManager.getContext();
            return () -> {
                JobSynchronizationManager.register(parentContext.getJobExecution());

                try {
                    runnable.run();
                } finally {
                    JobSynchronizationManager.close();
                }
            };
        };
    }
}
