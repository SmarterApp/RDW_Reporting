package org.opentestsystem.rdw.reporting.processor.web;

import com.google.common.collect.ImmutableSet;
import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerator;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;

import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;
import static org.springframework.http.HttpHeaders.CONTENT_TYPE;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

/**
 * This controller is responsible for providing access to Reports.
 */
@Controller
@RequestMapping("/api/reports")
public class ReportController {

    private final ReportGenerator reportGenerator;
    private final ReportService reportService;

    @Autowired
    public ReportController(final ReportGenerator reportGenerator,
                            final ReportService reportService) {
        this.reportGenerator = reportGenerator;
        this.reportService = reportService;
    }

    /**
     * Generate a new Report.
     *
     * @param request The report generation request
     * @return The new Report
     */
    @PostMapping(produces = APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.ACCEPTED)
    @ResponseBody
    public Report createReport(@RequestBody final BatchExamReportRequestHolder requestHolder) {
        return reportGenerator.generateReport(requestHolder);
    }

    /**
     * Retrieve the list of Reports for a user, optionally filtered by id.
     *
     * @param user      The user identifier
     * @param reportIds The report ids, empty will retrieve the list of all reports for the user
     * @return The list of Reports
     */
    @GetMapping(produces = APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<Report> getReports(
            @RequestParam("user") final String user,
            @RequestParam(value = "id", required = false) Set<Long> reportIds) {
        return service.findAllByUserAndId(user, reportIds != null ? reportIds : ImmutableSet.of());
    }

    /**
     * Retrieve the report content for the given report.
     *
     * @param reportId A report id
     * @throws IOException If there is a problem reading/writing the response
     */
    @GetMapping("{reportId}/content")
    public void getReportContent(@PathVariable final Long reportId,
                               @RequestParam("user") final String user,
                               final HttpServletResponse response) throws IOException {

        final Report report = service.findOneById(reportId)
                .orElseThrow(NoSuchElementException::new);

        if (!report.getUser().equals(user)) {
            throw new NoSuchElementException();
        }

        final String filename = report.getLabel().replaceAll("\\s", "_") + ".pdf";

        try (final InputStream pdfBytes = reportService.getContent(reportId);
             final OutputStream responseOutput = response.getOutputStream()) {
            response.setStatus(200);
            response.setHeader(CONTENT_TYPE, APPLICATION_PDF_VALUE);
            response.setHeader(CONTENT_DISPOSITION, "attachment; filename=" + filename);
            IOUtils.copy(pdfBytes, responseOutput);
            response.flushBuffer();
        }
    }
}
