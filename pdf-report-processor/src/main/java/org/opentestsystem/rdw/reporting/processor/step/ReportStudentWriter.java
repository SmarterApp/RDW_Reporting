package org.opentestsystem.rdw.reporting.processor.step;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.model.StudentCompositeReport;
import org.opentestsystem.rdw.reporting.processor.requesthandler.ReportFetcher;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.configuration.annotation.JobScope;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStream;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * This writer is responsible for delegating to the appropriate report writer
 * for the Job's {@link BatchExamReportRequestHolder#getRequest()} and writing
 * the reports into a job-scoped student report map.
 */
@Component
@JobScope
public class ReportStudentWriter implements ItemWriter<Long>, ItemStream {

    private final Map<Long, StudentCompositeReport> studentReports;
    private final Set<ReportFetcher> reportFetchers;
    private final ReportGenerationJobParameterProvider parameterProvider;
    private final Map<String, Object> jobParameters;

    private AbstractExamReportRequest reportRequest;
    private PermissionScope permissionScope;
    private ReportFetcher reportFetcher;

    @Autowired
    public ReportStudentWriter(final Map<Long, StudentCompositeReport> studentReports,
                               final Set<ReportFetcher> reportFetchers,
                               final ReportGenerationJobParameterProvider parameterProvider,
                               @Value("#{jobParameters}") final Map<String, Object> jobParameters) {
        this.studentReports = studentReports;
        this.reportFetchers = reportFetchers;
        this.parameterProvider = parameterProvider;
        this.jobParameters = jobParameters;
    }

    @Override
    public void write(final List<? extends Long> studentIdChunk) throws Exception {
        final List<Long> studentIds = studentIdChunk.stream()
                .filter(Long.class::isInstance)
                .map(Long.class::cast)
                .collect(Collectors.toList());
        studentReports.putAll(this.reportFetcher.fetchReports(reportRequest, permissionScope, studentIds));
    }

    @Override
    public void open(final ExecutionContext executionContext) throws ItemStreamException {
        final Report report = parameterProvider.reportFromParameters(jobParameters);
        this.reportRequest = report.getReportRequest();
        this.reportFetcher = this.reportFetchers.stream()
                .filter(fetcher -> fetcher.accept(reportRequest))
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Unable to find ReportFetcher for Report: " + report.getId()));

        this.permissionScope = parameterProvider.permissionScopeFromParameters(jobParameters);
    }

    @Override
    public void update(final ExecutionContext executionContext) throws ItemStreamException {
    }

    @Override
    public void close() throws ItemStreamException {
    }
}
