package org.opentestsystem.rdw.reporting.processor.step;

import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReport;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.iab.IabReport;
import org.opentestsystem.rdw.reporting.common.report.iab.IabReportRepository;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReport;
import org.opentestsystem.rdw.reporting.common.report.ica.IcaReportRepository;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.model.StudentCompositeReport;
import org.opentestsystem.rdw.reporting.processor.requesthandler.ExamQueryParamsParser;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.configuration.annotation.JobScope;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStream;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import static org.opentestsystem.rdw.common.model.AssessmentType.IAB;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;

/**
 * This writer is responsible for delegating to the appropriate report writer
 * for the Job's {@link BatchExamReportRequestHolder#getRequest()} and writing
 * the reports into a job-scoped student report map.
 */
@Component
@JobScope
public class ReportStudentWriter implements ItemWriter<Long>, ItemStream {

    private final Map<Long, StudentCompositeReport> studentReports;
    private final Set<ExamQueryParamsParser> queryParamsParsers;
    private final ReportGenerationJobParameterProvider parameterProvider;
    private final Map<String, Object> jobParameters;
    private final IabReportRepository iabReportRepository;
    private final IcaReportRepository icaReportRepository;

    private AbstractExamReportRequest reportRequest;
    private PermissionScope permissionScope;
    private ExamQueryParams queryParams;

    @Autowired
    public ReportStudentWriter(final Map<Long, StudentCompositeReport> studentReports,
                               final Set<ExamQueryParamsParser> queryParamsParsers,
                               final ReportGenerationJobParameterProvider parameterProvider,
                               final IabReportRepository iabReportRepository,
                               final IcaReportRepository icaReportRepository,
                               @Value("#{jobParameters}") final Map<String, Object> jobParameters) {
        this.studentReports = studentReports;
        this.queryParamsParsers = queryParamsParsers;
        this.parameterProvider = parameterProvider;
        this.jobParameters = jobParameters;
        this.iabReportRepository = iabReportRepository;
        this.icaReportRepository = icaReportRepository;
    }

    @Override
    public void write(final List<? extends Long> studentIdChunk) throws Exception {
        final List<Long> studentIds = studentIdChunk.stream()
                .filter(Long.class::isInstance)
                .map(Long.class::cast)
                .collect(Collectors.toList());

        appendIABReports(studentReports, permissionScope, studentIds, queryParams);
        appendICAReports(studentReports, permissionScope, studentIds, queryParams);
        //TODO Append Summitive Reports
    }

    @Override
    public void open(final ExecutionContext executionContext) throws ItemStreamException {
        final Report report = parameterProvider.reportFromParameters(jobParameters);
        this.reportRequest = report.getReportRequest();

        final ExamQueryParamsParser parser = this.queryParamsParsers.stream()
                .filter(fetcher -> fetcher.accept(reportRequest))
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Unable to find ExamQueryParamsParser for Report: " + report.getId()));
        this.queryParams = parser.parseQueryParams(report.getReportRequest());

        this.permissionScope = parameterProvider.permissionScopeFromParameters(jobParameters);
    }

    @Override
    public void update(final ExecutionContext executionContext) throws ItemStreamException {
    }

    @Override
    public void close() throws ItemStreamException {
    }

    private void appendIABReports(final Map<Long, StudentCompositeReport> compositeReports,
                                  final PermissionScope permissionScope,
                                  final Collection<Long> studentIds,
                                  final ExamQueryParams examQueryParams) {
        if (examQueryParams.getAssessmentType() != null && examQueryParams.getAssessmentType() != IAB) {
            return;
        }

        final Map<Long, Map<Subject, IabReport>> iabReports = iabReportRepository
                .findAllForStudentsByExamFilter(
                        permissionScope,
                        studentIds,
                        examQueryParams);

        iabReports.entrySet().forEach(studentEntry -> {
            final Optional<Student> student = studentEntry.getValue().values().stream()
                    .filter(Objects::nonNull)
                    .map(AbstractExamReport::getStudent)
                    .findFirst();
            if (!student.isPresent()) return;

            final StudentCompositeReport compositeReport = StudentCompositeReport.builder()
                    .iabEla(studentEntry.getValue().get(ELA))
                    .iabMath(studentEntry.getValue().get(MATH))
                    .student(student.get())
                    .build();
            compositeReports.put(studentEntry.getKey(), compositeReport);
        });
    }

    private void appendICAReports(final Map<Long, StudentCompositeReport> compositeReports,
                                  final PermissionScope permissionScope,
                                  final Collection<Long> studentIds,
                                  final ExamQueryParams examQueryParams) {
        if (examQueryParams.getAssessmentType() != null && examQueryParams.getAssessmentType() != ICA) {
            return;
        }

        final Map<Long, Map<Subject, IcaReport>> icaReports = icaReportRepository
                .findAllForStudentsByExamFilter(
                        permissionScope,
                        studentIds,
                        examQueryParams);

        icaReports.entrySet().forEach(studentEntry -> {
            final Optional<Student> student = studentEntry.getValue().values().stream()
                    .filter(Objects::nonNull)
                    .map(AbstractExamReport::getStudent)
                    .findFirst();
            if (!student.isPresent()) return;

            final StudentCompositeReport existing = compositeReports
                    .computeIfAbsent(studentEntry.getKey(), (id) -> StudentCompositeReport.builder().build());

            final StudentCompositeReport compositeReport = StudentCompositeReport.builder()
                    .copy(existing)
                    .icaEla(studentEntry.getValue().get(ELA))
                    .icaMath(studentEntry.getValue().get(MATH))
                    .student(student.get())
                    .build();
            compositeReports.put(studentEntry.getKey(), compositeReport);
        });
    }
}
