package org.opentestsystem.rdw.reporting.processor.service;

import org.apache.commons.io.FileUtils;
import org.opentestsystem.rdw.archive.ArchiveServiceFactory;
import org.opentestsystem.rdw.archive.LocalArchiveService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.List;
import java.util.TreeSet;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * This class is responsible for temporarily storing student Report chunks
 * within the context of a Job.  It is backed by a LocalArchiveService.
 *
 * It is responsible for cleaning up the temporary storage when requested.
 */
public class ReportGenerationTemporaryStorage {
    private final static Logger logger = LoggerFactory.getLogger(ReportGenerationTemporaryStorage.class);

    private final LocalArchiveService archiveService;
    private final String root;
    private final TreeSet<Integer> chunks = new TreeSet<>();

    public ReportGenerationTemporaryStorage(final long executionId,
                                            final String rootUri) {
        root = rootUri + "execution_" + executionId + "/";
        this.archiveService = (LocalArchiveService) ArchiveServiceFactory.newInstance(root);
    }

    /**
     * Write the given chunk content into temporary storage.
     *
     * @param chunkIdx  The chunk index
     * @param content   The chunk content
     */
    public void writeChunk(final int chunkIdx, final InputStream content) {
        chunks.add(chunkIdx);
        final String location = chunkIdx + ".pdf";
        archiveService.writeResource(location, content, null);
    }

    /**
     * Retrieve the stored chunk contents in chunk order.
     *
     * @return The ordered chunk contents.
     */
    public List<Supplier<InputStream>> getChunks() {
        return chunks.stream()
                .map(chunkIdx -> (Supplier<InputStream>) () -> {
                    final String location = chunkIdx + ".pdf";
                    return archiveService.openResource(location);
                })
                .collect(Collectors.toList());
    }

    /**
     * Remove any persistent storage.
     */
    public void cleanup() {
        final File file = new File(URI.create(root));
        try {
            FileUtils.deleteDirectory(file);
        } catch (final IOException e) {
            logger.warn("Unable to purge report generation directory", e);
        }
    }
}
