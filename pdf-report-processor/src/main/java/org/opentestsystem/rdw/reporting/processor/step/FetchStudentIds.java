package org.opentestsystem.rdw.reporting.processor.step;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.requesthandler.StudentIdFetcher;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;

/**
 * This Spring Batch tasklet is responsible for fetching student ids within the context of a Job's
 * {@link org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest}
 */
@Component
public class FetchStudentIds implements Tasklet {

    private final BlockingQueue<Long> studentIds;
    private final Set<StudentIdFetcher> studentIdFetchers;
    private final ReportGenerationJobParameterProvider parameterProvider;

    @Autowired
    public FetchStudentIds(final BlockingQueue<Long> studentIds,
                           final Set<StudentIdFetcher> studentIdFetchers,
                           final ReportGenerationJobParameterProvider parameterProvider) {
        this.studentIds = studentIds;
        this.studentIdFetchers = studentIdFetchers;
        this.parameterProvider = parameterProvider;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        final Map<String, Object> jobParams = chunkContext.getStepContext().getJobParameters();
        final PermissionScope permissionScope = parameterProvider.permissionScopeFromParameters(jobParams);
        final Report report = parameterProvider.reportFromParameters(jobParams);

        //Find a registered StudentIdFetcher that can handle the request.
        final StudentIdFetcher fetcher = studentIdFetchers.stream()
                .filter(idFetcher -> idFetcher.accept(report.getReportRequest()))
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Unable to find StudentIdFetcher for Report: " + report.getId()));
        studentIds.addAll(fetcher.fetchStudentIds(report.getReportRequest(), permissionScope));
        return RepeatStatus.FINISHED;
    }
}
