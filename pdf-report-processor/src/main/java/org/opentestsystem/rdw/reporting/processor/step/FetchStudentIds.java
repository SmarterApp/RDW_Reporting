package org.opentestsystem.rdw.reporting.processor.step;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.repository.StudentIdRepository;
import org.opentestsystem.rdw.reporting.processor.requesthandler.ExamQueryParamsParser;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;

/**
 * This Spring Batch tasklet is responsible for fetching student ids within the context of a Job's
 * {@link org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest}
 */
@Component
public class FetchStudentIds implements Tasklet {

    private final BlockingQueue<Long> studentIds;
    private final Set<ExamQueryParamsParser> queryParamsParsers;
    private final ReportGenerationJobParameterProvider parameterProvider;
    private final StudentIdRepository studentIdRepository;

    @Autowired
    public FetchStudentIds(final BlockingQueue<Long> studentIds,
                           final Set<ExamQueryParamsParser> queryParamsParsers,
                           final ReportGenerationJobParameterProvider parameterProvider,
                           final StudentIdRepository studentIdRepository) {
        this.studentIds = studentIds;
        this.queryParamsParsers = queryParamsParsers;
        this.parameterProvider = parameterProvider;
        this.studentIdRepository = studentIdRepository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        final Map<String, Object> jobParams = chunkContext.getStepContext().getJobParameters();
        final PermissionScope permissionScope = parameterProvider.permissionScopeFromParameters(jobParams);
        final Report report = parameterProvider.reportFromParameters(jobParams);

        //Find a registered ExamQueryParamsParser that can handle the request.
        final ExamQueryParamsParser parser = queryParamsParsers.stream()
                .filter(idFetcher -> idFetcher.accept(report.getReportRequest()))
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Unable to find ExamQueryParamsParser for Report: " + report.getId()));
        final ExamQueryParams queryParams = parser.parseQueryParams(report.getReportRequest());

        final Collection<Long> ids = studentIdRepository.findStudentIdsByExamQueryParams(
                permissionScope,
                queryParams);

        studentIds.addAll(ids);
        return RepeatStatus.FINISHED;
    }
}
