package org.opentestsystem.rdw.reporting.processor.service;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.List;
import java.util.function.Supplier;

/**
 * This PdfMergeService implementation uses Piped Streams and a separate writing thread
 * to provide streaming PDF merging.
 */
@Service
public class StreamingPdfMerger implements PdfMergeService {
    private final static Logger logger = LoggerFactory.getLogger(StreamingPdfMerger.class);

    @Override
    public InputStream mergePdfs(final List<Supplier<InputStream>> sourcePdfs) throws IOException {

        final PipedOutputStream outputStream = new PipedOutputStream();
        final PipedInputStream inputStream = new PipedInputStream(outputStream);

        //Perform the merge and write results to the piped stream on a temporary thread
        new Thread(() -> doMerge(outputStream, sourcePdfs)).start();
        return inputStream;
    }

    private void doMerge(final OutputStream outputStream,
                         final List<Supplier<InputStream>> sourcePdfs) {

        final Document document = new Document();
        try {
            final PdfWriter writer = PdfWriter.getInstance(document, outputStream);
            document.open();
            final PdfContentByte cb = writer.getDirectContent();

            int chunkIdx = 0;
            for (final Supplier<InputStream> sourcePdf : sourcePdfs) {
                logger.debug("Appending chunk: {} to composite PDF", chunkIdx++);
                try (final InputStream sourceData = sourcePdf.get()) {
                    final PdfReader reader = new PdfReader(sourceData);
                    for (int i = 1; i <= reader.getNumberOfPages(); i++) {
                        document.newPage();
                        //import the page from source pdf
                        final PdfImportedPage page = writer.getImportedPage(reader, i);
                        //add the page to the destination pdf
                        cb.addTemplate(page, 0, 0);
                    }
                }
            }
        } catch (final IOException | DocumentException e) {
            logger.warn("Unable to merge PDFs", e);
        } finally {
            try {
                outputStream.flush();
                document.close();
                outputStream.close();
            } catch (final IOException e) {
                logger.error("Unable to close PDF merge outputstream", e);
            }
        }
    }
}
