package org.opentestsystem.rdw.reporting.processor.service;

import org.apache.commons.io.IOUtils;
import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * This PdfMergeService implementation uses Piped Streams and a separate writing thread
 * to provide streaming PDF merging.
 */
@Service
public class StreamingPdfMerger implements PdfMergeService {
    private final static Logger logger = LoggerFactory.getLogger(StreamingPdfMerger.class);

    @Override
    public InputStream mergePdfs(final List<Supplier<InputStream>> sourcePdfs) throws IOException {

        final PipedOutputStream outputStream = new PipedOutputStream();
        final PipedInputStream inputStream = new PipedInputStream(outputStream);

        //Perform the merge and write results to the piped stream on a temporary thread
        new Thread(() -> doMerge(outputStream, sourcePdfs)).start();
        return inputStream;
    }

    private void doMerge(final OutputStream outputStream,
                         final List<Supplier<InputStream>> sourcePdfs) {

        final List<InputStream> sourcePdfStreams = sourcePdfs.stream().map(Supplier::get).collect(Collectors.toList());
        try {
            final PDFMergerUtility mergerUtility = new PDFMergerUtility();
            mergerUtility.setDestinationStream(outputStream);
            mergerUtility.addSources(sourcePdfStreams);
            mergerUtility.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
        } catch (final IOException e) {
            logger.warn("Unable to merge PDFs", e);
        } finally {
            //Unfortunately, the PDFMergerUtility requires a collection of open InputStreams
            //and may not close all of them if there is an error during merging.
            sourcePdfStreams.forEach(IOUtils::closeQuietly);
            IOUtils.closeQuietly(outputStream);
        }
    }
}
