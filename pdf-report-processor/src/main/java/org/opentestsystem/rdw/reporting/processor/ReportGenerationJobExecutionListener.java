package org.opentestsystem.rdw.reporting.processor;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * This execution listener is responsible for providing additional job
 * execution processing on start and completion.
 */
@Component
public class ReportGenerationJobExecutionListener extends JobExecutionListenerSupport {
    private static final Logger logger = LoggerFactory.getLogger(ReportGenerationJobExecutionListener.class);

    private final ReportGenerationJobParameterProvider parameterProvider;
    private final ReportService reportService;

    @Autowired
    public ReportGenerationJobExecutionListener(final ReportGenerationJobParameterProvider parameterProvider,
                                                final ReportService reportService) {
        this.parameterProvider = parameterProvider;
        this.reportService = reportService;
    }

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        final Report report = parameterProvider
                .reportFromParameters(jobExecution.getJobParameters().getParameters());

        reportService.update(Report.builder()
                .copy(report)
                .status(ReportStatus.RUNNING)
                .jobExecutionId(jobExecution.getId())
                .build());

        logger.info("Report Generation Report id [{}] Job id [{}] is launched",
                report.getId(),
                jobExecution.getJobId());
    }

    @Override
    public void afterJob(final JobExecution jobExecution) {
        final Report report = parameterProvider
                .reportFromParameters(jobExecution.getJobParameters().getParameters());

        if (report.getStatus() == ReportStatus.RUNNING) {
            final ReportStatus status = jobExecution.getExitStatus().equals(ExitStatus.COMPLETED)
                    ? ReportStatus.COMPLETED
                    : ReportStatus.FAILED;

            reportService.update(Report.builder()
                .copy(report)
                .status(status)
                .build());
        }

        logger.info("Report Generation Report id [{}] Job id [{}] is complete with status [{}]",
                report.getId(),
                jobExecution.getJobId(),
                jobExecution.getExitStatus());
    }
}
