package org.opentestsystem.rdw.reporting.processor.step;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.PdfMergeService;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationTemporaryStorage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.function.Supplier;

/**
 * This Spring Batch tasklet is responsible for generating a
 * combined report PDF within the context of a Job, merging
 * all of the job's report PDF chunks into a single PDF.
 */
@Component
public class GeneratePdf implements Tasklet {
    private static final Logger logger = LoggerFactory.getLogger(GeneratePdf.class);

    private final ReportGenerationJobParameterProvider parameterProvider;
    private final ReportContentService reportContentService;
    private final ReportGenerationTemporaryStorage reportGenerationTemporaryStorage;
    private final PdfMergeService pdfMerger;

    @Autowired
    public GeneratePdf(final ReportGenerationJobParameterProvider parameterProvider,
                       final ReportContentService reportContentService,
                       final ReportGenerationTemporaryStorage reportGenerationTemporaryStorage,
                       final PdfMergeService pdfMerger) {
        this.parameterProvider = parameterProvider;
        this.reportContentService = reportContentService;
        this.reportGenerationTemporaryStorage = reportGenerationTemporaryStorage;
        this.pdfMerger = pdfMerger;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        final Report report = parameterProvider.reportFromParameters(chunkContext.getStepContext().getJobParameters());

        final List<Supplier<InputStream>> chunkPdfs = reportGenerationTemporaryStorage.getChunks();
        final File mergedPdf = pdfMerger.mergePdfs(chunkPdfs);

        try (final FileInputStream pdfStream = new FileInputStream(mergedPdf)) {
            //Store PDF contents
            reportContentService.writeContent(report, pdfStream, mergedPdf.length());
        }

        logger.warn("Merged PDF: {}", mergedPdf);
//        if (!mergedPdf.delete()) {
//            logger.warn("Unable to remove temporary merged report PDF file: {}", mergedPdf);
//        }

        return RepeatStatus.FINISHED;
    }
}
