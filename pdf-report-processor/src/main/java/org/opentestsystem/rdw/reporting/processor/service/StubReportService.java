package org.opentestsystem.rdw.reporting.processor.service;

import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.ReportStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toMap;

/**
 * Default implementation of a ReportService
 */
@Service
public class StubReportService implements ReportService {

    private static final String stubUser = "dwtest@example.com";

    private static final List<Report> reports = newArrayList(Report.builder()
                    .id(4L)
                    .label("Stub Report 4")
                    .status(ReportStatus.COMPLETED)
                    .created(new Calendar.Builder().setDate(2017, 0, 10).build().toInstant())
                    .user(stubUser)
                    .build(),
            Report.builder()
                    .id(3L)
                    .label("Stub Report 3")
                    .status(ReportStatus.EXPIRED)
                    .created(new Calendar.Builder().setDate(2017, 0, 8).build().toInstant())
                    .user(stubUser)
                    .build(),
            Report.builder()
                    .id(2L)
                    .label("Stub Report 2")
                    .status(ReportStatus.FAILED)
                    .created(new Calendar.Builder().setDate(2017, 0, 7).build().toInstant())
                    .user(stubUser)
                    .build(),
            Report.builder()
                    .id(1L)
                    .label("Stub Report 1")
                    .status(ReportStatus.RUNNING)
                    .created(new Calendar.Builder().setDate(2017, 0, 5).build().toInstant())
                    .user(stubUser)
                    .build());

    private static final Map<Long, Report> reportsById = reports.stream()
            .collect(toMap(Report::getId, report -> report));

    private static final AtomicLong reportIdx = new AtomicLong(1);

    @Autowired
    public StubReportService() {
    }

    @Override
    public Report insert(final Report report) {
        return report.copy()
                .id(reportIdx.getAndIncrement())
                .build();
    }

    @Override
    public List<Report> findAllByUserAndId(final String user, final Collection<Long> reportIds) {
        return reports;
    }

    @Override
    public InputStream getContent(final long reportId) {
        return getClass().getClassLoader().getResourceAsStream("stub-report.pdf");
    }

    @Override
    public Optional<Report> findOneById(final long reportId) {
        return Optional.ofNullable(reportsById.get(reportId));
    }

    @Override
    public Report update(final Report report) {
        return report;
    }

}
