package org.opentestsystem.rdw.reporting.processor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.report.AbstractExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.BatchExamReportRequestHolder;
import org.opentestsystem.rdw.reporting.common.report.processor.ExamReportPdfProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.messaging.Message;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
@SpringBootTest
@DirtiesContext
public class PdfExamReportProcessorSinkIT {

    @Autowired
    private Sink channel;

    @Autowired
    private MessageCollector messageCollector;

    @MockBean
    private ExamReportPdfProcessor processor;

    @Autowired
    private PdfExamReportProcessorSink sink;

    @Test
    public void sinkShouldProcessRequest() {

        final Message<BatchExamReportRequestHolder> message = MessageBuilder
                .withPayload(new BatchExamReportRequestHolder(null, null, "user", "label"))
                .build();

        channel.input().send(message);

        verify(processor, times(1))
                .process(any(Object.class), any(AbstractExamReportRequest.class));
    }


}
