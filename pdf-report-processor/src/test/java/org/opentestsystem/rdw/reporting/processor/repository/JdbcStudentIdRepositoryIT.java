package org.opentestsystem.rdw.reporting.processor.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.security.PermissionScope.STATEWIDE;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcStudentIdRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcStudentIdRepositoryIT {

    @Autowired
    private JdbcStudentIdRepository repository;

    @Test
    public void itShouldFindStudentsBySchoolAndGradeAndYear() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(-10L)
                .schoolYear(2017)
                .build();
        final Collection<Long> studentIds = repository.findStudentIdsByExamQueryParams(STATEWIDE, examQueryParams);

        assertThat(studentIds).containsOnly(-2L, -1L);
    }

    @Test
    public void itShouldHandleNoStudentResults() throws Exception {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .gradeId(-2)
                .schoolId(123L)
                .schoolYear(2017)
                .build();

        assertThat(repository.findStudentIdsByExamQueryParams(STATEWIDE, examQueryParams)).isEmpty();
    }

    @Test
    public void itShouldFindStudentIdsByGroupId() throws Exception {
        final ExamQueryParams g1Params = ExamQueryParams.builder()
                .groupId(-1L)
                .schoolYear(2017)
                .build();
        final Collection<Long> g1StudentIds = repository.findStudentIdsByExamQueryParams(STATEWIDE, g1Params);

        assertThat(g1StudentIds).containsOnly(-1L, -2L);

        final ExamQueryParams g2Params = ExamQueryParams.builder()
                .groupId(-2L)
                .schoolYear(2017)
                .build();
        final Collection<Long> g2StudentIds = repository.findStudentIdsByExamQueryParams(STATEWIDE, g2Params);

        assertThat(g2StudentIds).containsOnly(-1L);
    }

}