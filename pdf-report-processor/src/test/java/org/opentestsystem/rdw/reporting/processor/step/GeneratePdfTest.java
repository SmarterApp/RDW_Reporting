package org.opentestsystem.rdw.reporting.processor.step;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.common.report.ReportViewSupport;
import org.opentestsystem.rdw.reporting.common.report.processor.HtmlToPdfProcessor;
import org.opentestsystem.rdw.reporting.common.report.processor.TemplateProcessor;
import org.opentestsystem.rdw.reporting.processor.model.StudentCompositeReport;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyMapOf;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.report.ExamReportOrder.STUDENT_SSID;

@RunWith(MockitoJUnitRunner.class)
public class GeneratePdfTest {

    @Mock
    private TemplateProcessor templateProcessor;

    @Mock
    private ReportViewSupport support;

    @Mock
    private ReportGenerationJobParameterProvider parameterProvider;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private HtmlToPdfProcessor htmlToPdfProcessor;

    @Mock
    private ReportContentService reportContentService;

    @Captor
    private ArgumentCaptor<Map<String, Object>> modelCaptor;

    private AtomicLong atomicLong;
    private Report report;
    private AbstractBatchExamReportRequest reportRequest;
    private Map<Long, StudentCompositeReport> studentReports;
    private GeneratePdf tasklet;

    @Before
    public void setup() {
        atomicLong = new AtomicLong(1);

        studentReports = new HashMap<>();

        when(templateProcessor.process(anyString(), anyMapOf(String.class, Object.class), any(Locale.class)))
                .thenReturn("HTML Response".getBytes());

        final StepContext stepContext = mock(StepContext.class);
        final Map<String, Object> params = new HashMap<>();
        when(stepContext.getJobParameters()).thenReturn(params);
        when(chunkContext.getStepContext()).thenReturn(stepContext);

        report = mock(Report.class);
        when(parameterProvider.reportFromParameters(params)).thenReturn(report);

        reportRequest = mock(AbstractBatchExamReportRequest.class);
        final PrintOptions printOptions = new PrintOptions(false);
        when(reportRequest.getOptions()).thenReturn(printOptions);
        when(reportRequest.getLanguage()).thenReturn(Locale.US);
        when(report.getReportRequest()).thenReturn(reportRequest);

        tasklet = new GeneratePdf(
                studentReports,
                parameterProvider,
                templateProcessor,
                support,
                htmlToPdfProcessor,
                reportContentService);
    }

    @Test
    public void itShouldOrderTheStudentsByName() throws Exception {
        final StudentCompositeReport reportA = compositeReport("LastA", "FirstA", "SSID1");
        final StudentCompositeReport reportB = compositeReport("LastA", "FirstB", "SSID2");
        final StudentCompositeReport reportC = compositeReport("LastB", "FirstA", "SSID3");

        studentReports.put(reportC.getStudent().getId(), reportC);
        studentReports.put(reportB.getStudent().getId(), reportB);
        studentReports.put(reportA.getStudent().getId(), reportA);

        tasklet.execute(stepContribution, chunkContext);

        verify(templateProcessor).process(
                eq("batch-reports"),
                modelCaptor.capture(),
                eq(Locale.US));
        assertThat((Collection<StudentCompositeReport>) modelCaptor.getValue().get("studentCompositeReports"))
                .containsExactly(reportA, reportB, reportC);
        assertThat(studentReports.isEmpty()).isTrue();
    }

    @Test
    public void itShouldOrderTheStudentsBySSID() throws Exception {
        when(reportRequest.getOrder()).thenReturn(STUDENT_SSID);

        final StudentCompositeReport reportA = compositeReport("LastA", "FirstA", "SSID1");
        final StudentCompositeReport reportB = compositeReport("LastA", "FirstB", "SSID4");
        final StudentCompositeReport reportC = compositeReport("LastB", "FirstA", "SSID3");

        studentReports.put(reportC.getStudent().getId(), reportC);
        studentReports.put(reportB.getStudent().getId(), reportB);
        studentReports.put(reportA.getStudent().getId(), reportA);

        tasklet.execute(stepContribution, chunkContext);

        verify(templateProcessor).process(
                eq("batch-reports"),
                modelCaptor.capture(),
                eq(Locale.US));
        assertThat((Collection<StudentCompositeReport>) modelCaptor.getValue().get("studentCompositeReports"))
                .containsExactly(reportA, reportC, reportB);
        assertThat(studentReports.isEmpty()).isTrue();
    }

    @Test
    public void itShouldSubmitGeneratedHTMLToPdfService() throws Exception {
        final StudentCompositeReport compositeReport = compositeReport("LastA", "FirstA", "SSID1");
        studentReports.put(compositeReport.getStudent().getId(), compositeReport);

        tasklet.execute(stepContribution, chunkContext);

        final ArgumentCaptor<byte[]> htmlCaptor = ArgumentCaptor.forClass(byte[].class);
        final PrintOptions options = (PrintOptions) report.getReportRequest().getOptions();
        verify(htmlToPdfProcessor).process(htmlCaptor.capture(), eq(options));

        assertThat(new String(htmlCaptor.getValue())).isEqualTo("HTML Response");
    }

    @Test
    public void itShouldStorePdfContents() throws Exception {
        final StudentCompositeReport report = compositeReport("LastA", "FirstA", "SSID1");
        studentReports.put(report.getStudent().getId(), report);

        try (final InputStream pdfContents = new ByteArrayInputStream("pdf contents".getBytes())) {
            when(htmlToPdfProcessor.process(any(byte[].class), any(PrintOptions.class)))
                    .thenReturn(pdfContents);

            tasklet.execute(stepContribution, chunkContext);

            final ArgumentCaptor<InputStream> contentCaptor = ArgumentCaptor.forClass(InputStream.class);
            verify(reportContentService).writeContent(any(Report.class), contentCaptor.capture());

            assertThat(IOUtils.toString(contentCaptor.getValue())).isEqualTo("pdf contents");
        }
    }

    private StudentCompositeReport compositeReport(final String lastName,
                                                   final String firstName,
                                                   final String ssid) {
        final Student student = Student.builder()
                .id(atomicLong.getAndIncrement())
                .lastName(lastName)
                .firstName(firstName)
                .ssid(ssid)
                .build();

        return StudentCompositeReport.builder()
                .student(student)
                .build();
    }
}