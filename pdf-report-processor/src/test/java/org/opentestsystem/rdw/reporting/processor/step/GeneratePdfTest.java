package org.opentestsystem.rdw.reporting.processor.step;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;
import org.opentestsystem.rdw.reporting.processor.service.PdfMergeService;
import org.opentestsystem.rdw.reporting.processor.service.ReportContentService;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationTemporaryStorage;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Supplier;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GeneratePdfTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    @Mock
    private ReportGenerationJobParameterProvider parameterProvider;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private ReportContentService reportContentService;

    @Mock
    private ReportGenerationTemporaryStorage reportGenerationTemporaryStorage;

    @Mock
    private PdfMergeService pdfMerger;

    @Captor
    private ArgumentCaptor<Map<String, Object>> modelCaptor;

    private List<Supplier<InputStream>> chunkContents;
    private File mergedPdfContents;
    private Report report;
    private AbstractBatchExamReportRequest reportRequest;
    private GeneratePdf tasklet;

    @Before
    public void setup() throws Exception {
        chunkContents = newArrayList();
        when(reportGenerationTemporaryStorage.getChunks()).thenReturn(chunkContents);

        mergedPdfContents = temporaryFolder.newFile();
        try (final FileOutputStream data = new FileOutputStream(mergedPdfContents)) {
            data.write("PDF Content".getBytes());
        }
        when(pdfMerger.mergePdfs(eq(chunkContents))).thenReturn(mergedPdfContents);

        final StepContext stepContext = mock(StepContext.class);
        final Map<String, Object> params = new HashMap<>();
        when(stepContext.getJobParameters()).thenReturn(params);
        when(chunkContext.getStepContext()).thenReturn(stepContext);

        report = mock(Report.class);
        when(parameterProvider.reportFromParameters(params)).thenReturn(report);

        reportRequest = mock(AbstractBatchExamReportRequest.class);
        final PrintOptions printOptions = new PrintOptions(false);
        when(reportRequest.getOptions()).thenReturn(printOptions);
        when(reportRequest.getLanguage()).thenReturn(Locale.US);
        when(report.getReportRequest()).thenReturn(reportRequest);

        tasklet = new GeneratePdf(
                parameterProvider,
                reportContentService,
                reportGenerationTemporaryStorage,
                pdfMerger);
    }

    @Test
    public void itShouldMergeAndStorePdfContents() throws Exception {
        final long mergedPdfLength = mergedPdfContents.length();

        tasklet.execute(stepContribution, chunkContext);

        assertThat(mergedPdfContents.exists()).isFalse();

        verify(reportContentService).writeContent(eq(report), any(FileInputStream.class), eq(mergedPdfLength));
    }
}