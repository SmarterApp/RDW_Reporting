package org.opentestsystem.rdw.reporting.processor.requesthandler;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.report.AbstractBatchExamReportRequest;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.SchoolGradeExamReportRequest;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.opentestsystem.rdw.reporting.processor.repository.StudentIdRepository;

import java.util.Collection;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.security.PermissionScope.STATEWIDE;

@RunWith(MockitoJUnitRunner.class)
public class SchoolGradeStudentIdFetcherTest {

    @Mock
    private StudentIdRepository studentIdRepository;

    @Captor
    private ArgumentCaptor<ExamQueryParams> filterCaptor;

    private SchoolGradeStudentIdFetcher fetcher;

    @Before
    public void setup() {
        fetcher = new SchoolGradeStudentIdFetcher(studentIdRepository);
    }

    @Test
    public void itShouldAcceptSchoolGradeRequests() {
        assertThat(fetcher.accept(mock(AbstractBatchExamReportRequest.class))).isFalse();
        assertThat(fetcher.accept(mock(SchoolGradeExamReportRequest.class))).isTrue();
    }

    @Test
    public void itShouldFindIdsBySchoolAndGrade() {
        final SchoolGradeExamReportRequest reportRequest = SchoolGradeExamReportRequest.builder()
                .schoolId(123L)
                .gradeId(7)
                .build();

        final Collection<Long> studentIds = newArrayList(1L, 2L, 3L);
        when(studentIdRepository.findStudentIdsByExamQueryParams(any(PermissionScope.class), any(ExamQueryParams.class)))
                .thenReturn(studentIds);

        assertThat(fetcher.fetchStudentIds(reportRequest, STATEWIDE)).containsOnlyElementsOf(studentIds);

        verify(studentIdRepository).findStudentIdsByExamQueryParams(eq(STATEWIDE), filterCaptor.capture());
        assertThat(filterCaptor.getValue().getSchoolId()).isEqualTo(123);
        assertThat(filterCaptor.getValue().getGradeId()).isEqualTo(7);
    }
}