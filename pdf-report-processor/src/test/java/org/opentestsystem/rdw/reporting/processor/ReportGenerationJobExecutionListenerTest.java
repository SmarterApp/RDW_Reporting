package org.opentestsystem.rdw.reporting.processor;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.processor.service.ReportGenerationJobParameterProvider;
import org.opentestsystem.rdw.reporting.processor.service.ReportService;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyMapOf;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.COMPLETED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.FAILED;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.NO_RESULTS;
import static org.opentestsystem.rdw.reporting.common.model.ReportStatus.RUNNING;

@RunWith(MockitoJUnitRunner.class)
public class ReportGenerationJobExecutionListenerTest {

    @Mock
    private ReportGenerationJobParameterProvider parameterProvider;

    @Mock
    private ReportService reportService;

    @Mock
    private JobExecution jobExecution;

    @Captor
    private ArgumentCaptor<Report> reportCaptor;

    private ReportGenerationJobExecutionListener listener;

    @Before
    public void setup() throws Exception {
        when(jobExecution.getId()).thenReturn(123L);
        final JobParameters jobParameters = new JobParameters();
        when(jobExecution.getJobParameters()).thenReturn(jobParameters);

        listener = new ReportGenerationJobExecutionListener(parameterProvider, reportService);
    }

    @Test
    public void itShouldMarkAJobAsRunningAndBindAnExecutionIdOnStart() {
        final Report report = MockBuilder.report(2L);
        when(parameterProvider.reportFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(report);

        listener.beforeJob(jobExecution);

        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(RUNNING);
        assertThat(reportCaptor.getValue().getJobExecutionId()).isEqualTo(jobExecution.getId());
    }

    @Test
    public void itShouldNotChangeAJobsStatusIfItWasNotRunnning() {
        final Report report = MockBuilder.report(2L).copy()
                .status(NO_RESULTS)
                .build();
        when(parameterProvider.reportFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(report);

        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.COMPLETED);
        listener.afterJob(jobExecution);

        verify(reportService, never()).update(any(Report.class));
    }

    @Test
    public void itShouldMarkAReportAsCompletedIfJobWasCompleted() {
        final Report report = MockBuilder.report(2L).copy()
                .status(RUNNING)
                .build();
        when(parameterProvider.reportFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(report);

        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.COMPLETED);
        listener.afterJob(jobExecution);

        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(COMPLETED);
    }

    @Test
    public void itShouldMarkAReportAsFailedIfJobWasFailed() {
        final Report report = MockBuilder.report(2L).copy()
                .status(RUNNING)
                .build();
        when(parameterProvider.reportFromParameters(anyMapOf(String.class, Object.class)))
                .thenReturn(report);

        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.FAILED);
        listener.afterJob(jobExecution);

        verify(reportService).update(reportCaptor.capture());
        assertThat(reportCaptor.getValue().getStatus()).isEqualTo(FAILED);
    }

}