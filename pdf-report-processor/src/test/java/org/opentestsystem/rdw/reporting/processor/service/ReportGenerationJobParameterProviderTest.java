package org.opentestsystem.rdw.reporting.processor.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Report;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.batch.core.JobParameters;

import java.util.Optional;
import java.util.Set;

import static com.google.common.collect.ImmutableSortedSet.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ReportGenerationJobParameterProviderTest {

    @Mock
    private ReportService reportService;

    private ReportGenerationJobParameterProvider provider;

    @Before
    public void setup() {
        provider = new ReportGenerationJobParameterProvider(reportService);
    }

    @Test
    public void itShouldPersistStatewidePermissionScopeAsJobParameters() throws Exception {
        final PermissionScope statewide = PermissionScope.STATEWIDE;
        final JobParameters jobParameters = provider.toJobParameters(123L, statewide);

        final PermissionScope persisted = provider.permissionScopeFromParameters(jobParameters.getParameters());
        assertThat(persisted.getDistrictIds()).isEmpty();
        assertThat(persisted.getInstitutionIds()).isEmpty();
        assertThat(persisted.isStatewide()).isTrue();
    }

    @Test
    public void itShouldPersistPermissionScopeAsJobParameters() throws Exception {
        final Set<Long> districtIds = of(1L, 2L);
        final Set<Long> institutionIds = of(3L);
        final PermissionScope original = new PermissionScope(districtIds, institutionIds);
        final JobParameters jobParameters = provider.toJobParameters(123L, original);

        final PermissionScope persisted = provider.permissionScopeFromParameters(jobParameters.getParameters());
        assertThat(persisted.getDistrictIds()).containsOnlyElementsOf(districtIds);
        assertThat(persisted.getInstitutionIds()).containsOnlyElementsOf(institutionIds);
        assertThat(persisted.isStatewide()).isFalse();
    }

    @Test
    public void itShouldProvideAReportFromJobParameters() throws Exception {
        final Report report = mock(Report.class);
        when(reportService.findOneById(123L)).thenReturn(Optional.of(report));

        final JobParameters jobParameters = provider.toJobParameters(123L, PermissionScope.STATEWIDE);
        assertThat(provider.reportFromParameters(jobParameters.getParameters())).isEqualTo(report);
    }
}