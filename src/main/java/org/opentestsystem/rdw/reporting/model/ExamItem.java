package org.opentestsystem.rdw.reporting.model;
import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

public class ExamItem {
    private String number;
    private String claim;
    private String target;
    private int score;
    private int maximumScore;
    private IrisInfo irisInfo;

    public String getTarget() {
        return target;
    }

    public String getClaim() {
        return claim;
    }

    public int getScore() {
        return score;
    }

    public int getMaximumScore() {
        return maximumScore;
    }

    public IrisInfo getIrisInfo() {
        return irisInfo;
    }

    public static Builder builder(){
        return new Builder();
    }

    public String getNumber() {
        return number;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ExamItem examItem = (ExamItem) o;

        if (score != examItem.score) return false;
        if (maximumScore != examItem.maximumScore) return false;
        if (number != null ? !number.equals(examItem.number) : examItem.number != null) return false;
        if (claim != null ? !claim.equals(examItem.claim) : examItem.claim != null) return false;
        if (target != null ? !target.equals(examItem.target) : examItem.target != null) return false;
        return irisInfo != null ? irisInfo.equals(examItem.irisInfo) : examItem.irisInfo == null;
    }

    @Override
    public int hashCode() {
        int result = number != null ? number.hashCode() : 0;
        result = 31 * result + (claim != null ? claim.hashCode() : 0);
        result = 31 * result + (target != null ? target.hashCode() : 0);
        result = 31 * result + score;
        result = 31 * result + maximumScore;
        result = 31 * result + (irisInfo != null ? irisInfo.hashCode() : 0);
        return result;
    }

    public static class Builder {
        private String number;
        private IrisInfo irisInfo;
        private int maximumScore;
        private String claim;
        private int score;
        private String target;

        public ExamItem build() {
            final ExamItem examItem = new ExamItem();

            examItem.number = number;
            examItem.maximumScore = maximumScore;
            examItem.claim = claim;
            examItem.target = target;
            examItem.score = score;

            examItem.irisInfo = new IrisInfo()
                .builder()
                .token(irisInfo.getToken())
                .vendorId(irisInfo.getVendorId())
                .build();

            return examItem;
        }

        public Builder target(String target) {
            this.target = target;
            return this;
        }

        public Builder number(final String number) {
            this.number = number;
            return this;
        }

        public Builder irisInfo(IrisInfo irisInfo) {
            this.irisInfo = irisInfo;
            return this;
        }

        public Builder maximumScore(int maximumScore) {
            this.maximumScore = maximumScore;
            return this;
        }

        public Builder claim(String claim) {
            this.claim = claim;
            return this;
        }

        public Builder score(int score) {
            this.score = score;
            return this;
        }
    }
}
