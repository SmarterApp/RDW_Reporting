package org.opentestsystem.rdw.reporting.model;

import com.google.common.collect.ImmutableSet;

import java.util.Collection;
import java.util.Set;

/**
 * Used to limit database query results
 */
public class PermissionScope {

    /**
     * Statewide permission scope flyweight
     * Since all statewide permission scopes will be identical, we can use the same immutable object instance
     */
    public static final PermissionScope STATEWIDE = new PermissionScope();

    /**
     * Holds district entity IDs to which the permission is granted
     */
    private Set<Long> districtIds = ImmutableSet.of();

    /**
     * Holds institution entity IDs to which the permission is granted
     */
    private Set<Long> institutionIds = ImmutableSet.of();

    private PermissionScope() {
    }

    public PermissionScope(
            final Collection<Long> districtIds,
            final Collection<Long> institutionIds) {
        this.districtIds = districtIds != null ? ImmutableSet.copyOf(districtIds) : ImmutableSet.of();
        this.institutionIds = institutionIds != null ? ImmutableSet.copyOf(institutionIds) : ImmutableSet.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public boolean isStatewide() {
        return districtIds.isEmpty() && institutionIds.isEmpty();
    }

    public Set<Long> getDistrictIds() {
        return districtIds;
    }

    public Set<Long> getInstitutionIds() {
        return institutionIds;
    }

    public static final class Builder {

        private Collection<Long> districtIds;
        private Collection<Long> institutionIds;

        public Builder districtIds(Collection<Long> districtIds) {
            this.districtIds = districtIds;
            return this;
        }

        public Builder institutionIds(Collection<Long> institutionIds) {
            this.institutionIds = institutionIds;
            return this;
        }

        public PermissionScope build() {
            return new PermissionScope(districtIds, institutionIds);
        }
    }

}

