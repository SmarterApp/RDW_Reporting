package org.opentestsystem.rdw.reporting.repository.impl;

import com.amazonaws.AmazonClientException;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import org.opentestsystem.rdw.reporting.repository.ArtifactRepository;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;

public class S3ArtifactRepository implements ArtifactRepository{
    private AmazonS3 s3Client;

    //TODO: Make these configurable.
    private final String AmazonEndpoint = "http://s3-us-west-2.amazonaws.com";
    private final String ItemDirectory = "item-content/local/items/Item-{0}/";
    private final String ItemXml = "item-{0}.xml";
    private final String Bucket = "tds-resources";

    @Autowired
    public S3ArtifactRepository(AmazonS3 s3Client) {
        this.s3Client = s3Client;
        s3Client.setEndpoint(AmazonEndpoint);
    }

    @Override
    public InputStream getItemXml(String id) throws IOException {
        return getArtifactFromItemDirectory(id, MessageFormat.format(ItemXml, id));
    }

    @Override
    public InputStream getArtifactFromItemDirectory(String id, String artifactName) throws IOException {
        return getArtifact(MessageFormat.format(ItemDirectory, id) + artifactName);
    }

    private InputStream getArtifact(String name) throws IOException {
        try{
            GetObjectRequest request = new GetObjectRequest(Bucket, name);
            S3Object object = s3Client.getObject(request);

            return object.getObjectContent();
        }
        catch(AmazonClientException e){
            throw new IOException("Unable to get artifact from Amazon S3: " + name, e);
        }
    }
}
