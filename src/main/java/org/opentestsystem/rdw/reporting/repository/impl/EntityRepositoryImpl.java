package org.opentestsystem.rdw.reporting.repository.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.model.DistrictAndInstitutionIdentities;
import org.opentestsystem.rdw.reporting.repository.EntityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.Maps.newHashMap;

@Repository
public class EntityRepositoryImpl implements EntityRepository {

	private static final int INSTITUTION_TYPE = 0;
	private static final int DISTRICT_TYPE = 1;
	private final NamedParameterJdbcTemplate jdbcTemplate;
	private final String query;

	@Autowired
	public EntityRepositoryImpl(
		final @NotNull NamedParameterJdbcTemplate jdbcTemplate,
		final @NotNull @Value("${sql.districtsAndInstitutions.findAll}") String query) {
		this.jdbcTemplate = jdbcTemplate;
		this.query = query;
	}

	public DistrictAndInstitutionIdentities findAll(
		@NotNull Collection<String> districtNaturalIds,
		@NotNull Collection<String> institutionNaturalIds) {

		if (districtNaturalIds == null || districtNaturalIds.isEmpty()) {
			districtNaturalIds = ImmutableSet.of("-1");
		}
		if (institutionNaturalIds == null || institutionNaturalIds.isEmpty()) {
			institutionNaturalIds = ImmutableSet.of("-1");
		}

		final Map<String, Long> districtIdsByNaturalId = newHashMap();
		final Map<String, Long> institutionIdsByNaturalId = newHashMap();

		jdbcTemplate.query(query, ImmutableMap.of(
			"districtType", DISTRICT_TYPE,
			"schoolType", INSTITUTION_TYPE,
			"districtNaturalIds", districtNaturalIds,
			"schoolNaturalIds", institutionNaturalIds
		), (row, index) -> {
			final int type = row.getInt("type");
			final String naturalId = row.getString("natural_id");
			final Long id = row.getLong("id");
			if (type == INSTITUTION_TYPE) {
				institutionIdsByNaturalId.put(naturalId, id);
			} else {
				districtIdsByNaturalId.put(naturalId, id);
			}
			return (Void) null;
		});

		return new DistrictAndInstitutionIdentities(districtIdsByNaturalId, institutionIdsByNaturalId);
	}

}
