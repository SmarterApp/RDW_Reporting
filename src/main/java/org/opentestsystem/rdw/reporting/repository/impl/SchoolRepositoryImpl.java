package org.opentestsystem.rdw.reporting.repository.impl;

import java.util.List;
import org.opentestsystem.rdw.reporting.repository.SchoolRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.Lists.newArrayList;

@Repository
public class SchoolRepositoryImpl implements SchoolRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.school.findAll}")
    private String findAllSql;

    @Autowired
    SchoolRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = checkNotNull(jdbcTemplate);
    }


    @Override
    public List<Integer> findAllIds(List<Integer> schoolIds, List<Integer> districtIds, boolean statewide) {
        return jdbcTemplate.queryForList(findAllSql,
                addAuthorizationRestrictions(new MapSqlParameterSource(), schoolIds, districtIds, statewide),
                Integer.class);
    }

    private MapSqlParameterSource addAuthorizationRestrictions(MapSqlParameterSource param, List<Integer> schoolIds, List<Integer> districtIds, boolean statewide) {

        final List<Integer> emptyList = newArrayList();
        emptyList.add(-1);

        return param.addValue("schoolIds", schoolIds.isEmpty() ? emptyList : schoolIds)
                .addValue("districtIds", districtIds.isEmpty() ? emptyList : districtIds)
                .addValue("stateWide", statewide ? 1 : 0);
    }

}
