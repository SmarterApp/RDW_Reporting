package org.opentestsystem.rdw.reporting.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.reporting.model.Template;
import org.opentestsystem.rdw.reporting.model.ThymeleafTemplate;
import org.opentestsystem.rdw.reporting.service.TranslationService;
import org.opentestsystem.rdw.security.client.permissionservice.PermissionWebServiceClient;
import org.opentestsystem.rdw.security.service.ComponentPermissionService;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.AbstractMessageSource;
import org.springframework.web.client.RestTemplate;
import org.thymeleaf.TemplateEngine;

import javax.validation.constraints.NotNull;
import java.text.MessageFormat;
import java.util.Locale;
import java.util.Map;

@Configuration
public class ApplicationConfig {

    @Bean
    public PermissionWebServiceClient permissionWebServiceClient(@Value("${permissionservice.endpoint}") String endpoint) {
        return new PermissionWebServiceClient(new RestTemplate(), endpoint);
    }

    @Bean
    public PermissionService defaultPermissionService(PermissionWebServiceClient client, @Value("${permissionservice.component}") String component) {
        return new ComponentPermissionService(client, component);
    }

    @Bean
    public Template examReportTemplate(TemplateEngine engine, ObjectMapper mapper) {
        return new ThymeleafTemplate("exam-report", engine, mapper);
    }

    @Bean
    public MessageSource messageSource(TranslationService translationService) {
        return new TranslationServiceMessageSource(translationService);
    }

    private static final class TranslationServiceMessageSource extends AbstractMessageSource {

        private TranslationService service;

        public TranslationServiceMessageSource(final @NotNull TranslationService service) {
            this.service = service;
        }

        @Override
        protected MessageFormat resolveCode(String code, Locale locale) {
            final Map<String, String> messages = service.getTranslationsForLocale(locale);
            final String message = messages.get(code);
            if (message != null) {
                return new MessageFormat(message, locale);
            }
            return null;
        }
    }

}

