package org.opentestsystem.rdw.reporting.security;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.model.Permission;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;

import static com.google.common.base.Preconditions.checkNotNull;


public class User implements UserDetails {

    private final String id;
    private final String email;
    private final String firstName;
    private final String lastName;
    private final Collection<? extends Permission> permissions;
    private final String username;
    private final String password;
    private final Collection<? extends GrantedAuthority> authorities;
    private final boolean accountNonExpired;
    private final boolean accountNonLocked;
    private final boolean credentialsNonExpired;
    private final boolean enabled;

    User(final Builder builder) {
        this.id = checkNotNull(builder.id, "id must not be null");
        this.email = builder.email;
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.permissions = builder.permissions != null ? ImmutableSet.copyOf(builder.permissions) : ImmutableSet.of();
        this.username = builder.username;
        this.password = builder.password;
        this.authorities = builder.authorities != null ? ImmutableSet.copyOf(builder.authorities) : ImmutableSet.of();
        this.accountNonExpired = builder.accountNonExpired;
        this.accountNonLocked = builder.accountNonLocked;
        this.credentialsNonExpired = builder.credentialsNonExpired;
        this.enabled = builder.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public String getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public Collection<? extends Permission> getPermissions() {
        return permissions;
    }

    public String getPassword() {
        return password;
    }

    public String getUsername() {
        return username;
    }

    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    public boolean isAccountNonExpired() {
        return accountNonExpired;
    }

    public boolean isAccountNonLocked() {
        return accountNonLocked;
    }

    public boolean isCredentialsNonExpired() {
        return credentialsNonExpired;
    }

    public boolean isEnabled() {
        return enabled;
    }


    /**
     * Builder for User
     */
    public static class Builder {

        private String id;
        private String email;
        private String firstName;
        private String lastName;
        private Collection<? extends Permission> permissions;
        private String password;
        private String username;
        private Collection<? extends GrantedAuthority> authorities;
        private boolean accountNonExpired;
        private boolean accountNonLocked;
        private boolean credentialsNonExpired;
        private boolean enabled;

        public User build() {
            return new User(this);
        }

        public Builder id(final String id) {
            this.id = id;
            return this;
        }

        public Builder email(final String email) {
            this.email = email;
            return this;
        }

        public Builder firstName(final String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(final String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder permissions(final Collection<? extends Permission> permissions) {
            this.permissions = permissions;
            return this;
        }

        public Builder password(final String password) {
            this.password = password;
            return this;
        }

        public Builder username(final String username) {
            this.username = username;
            return this;
        }

        public Builder authorities(final Collection<? extends GrantedAuthority> authorities) {
            this.authorities = authorities;
            return this;
        }

        public Builder accountNonExpired(final boolean accountNonExpired) {
            this.accountNonExpired = accountNonExpired;
            return this;
        }

        public Builder accountNonLocked(final boolean accountNonLocked) {
            this.accountNonLocked = accountNonLocked;
            return this;
        }

        public Builder credentialsNonExpired(final boolean credentialsNonExpired) {
            this.credentialsNonExpired = credentialsNonExpired;
            return this;
        }

        public Builder enabled(final boolean enabled) {
            this.enabled = enabled;
            return this;
        }

    }
}
