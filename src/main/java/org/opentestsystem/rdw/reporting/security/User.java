package org.opentestsystem.rdw.reporting.security;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.model.Permission;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.validation.constraints.NotNull;
import java.util.Collection;

import static com.google.common.base.Preconditions.checkNotNull;

public class User implements UserDetails {

	private final String id;
	private final String email;
	private final String firstName;
	private final String lastName;
	private final Collection<? extends Permission> permissions;
	private final String username;
	private final String password;
	private final Collection<? extends GrantedAuthority> authorities;
	private final boolean accountNonExpired;
	private final boolean accountNonLocked;
	private final boolean credentialsNonExpired;
	private final boolean enabled;

	public User(
		final @NotNull String id,
		final String email,
		final String firstName,
		final String lastName,
		final Collection<? extends Permission> permissions,
		final String username,
		final String password,
		final Collection<? extends GrantedAuthority> authorities,
		final boolean accountNonExpired,
		final boolean accountNonLocked,
		final boolean credentialsNonExpired,
		final boolean enabled) {
		this.id = checkNotNull(id, "id must not be null");
		this.email = email;
		this.firstName = firstName;
		this.lastName = lastName;
		this.permissions = permissions != null ? ImmutableSet.copyOf(permissions) : ImmutableSet.of();
		this.username = username;
		this.password = password;
		this.authorities = authorities != null ? ImmutableSet.copyOf(authorities) : ImmutableSet.of();
		this.accountNonExpired = accountNonExpired;
		this.accountNonLocked = accountNonLocked;
		this.credentialsNonExpired = credentialsNonExpired;
		this.enabled = enabled;
	}

	public static Builder builder() {
		return new Builder();
	}

	public String getId() {
		return id;
	}

	public String getEmail() {
		return email;
	}

	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public Collection<? extends Permission> getPermissions() {
		return permissions;
	}

	public String getPassword() {
		return password;
	}

	public String getUsername() {
		return username;
	}

	public Collection<? extends GrantedAuthority> getAuthorities() {
		return authorities;
	}

	public boolean isAccountNonExpired() {
		return accountNonExpired;
	}

	public boolean isAccountNonLocked() {
		return accountNonLocked;
	}

	public boolean isCredentialsNonExpired() {
		return credentialsNonExpired;
	}

	public boolean isEnabled() {
		return enabled;
	}

	public static class Builder {

		private String id;
		private String email;
		private String firstName;
		private String lastName;
		private Collection<? extends Permission> permissions;
		private String password;
		private String username;
		private Collection<? extends GrantedAuthority> authorities;
		private boolean accountNonExpired;
		private boolean accountNonLocked;
		private boolean credentialsNonExpired;
		private boolean enabled;

		public User build() {
			return new User(
				id,
				email,
				firstName,
				lastName,
				permissions,
				password,
				username,
				authorities,
				accountNonExpired,
				accountNonLocked,
				credentialsNonExpired,
				enabled
			);
		}

		public Builder id(final String id) {
			this.id = id;
			return this;
		}

		public Builder email(final String email) {
			this.email = email;
			return this;
		}

		public Builder firstName(final String firstName) {
			this.firstName = firstName;
			return this;
		}

		public Builder lastName(final String lastName) {
			this.lastName = lastName;
			return this;
		}

		public Builder permissions(final Collection<? extends Permission> permissions) {
			this.permissions = permissions;
			return this;
		}

		public Builder password(final String password) {
			this.password = password;
			return this;
		}

		public Builder username(final String username) {
			this.username = username;
			return this;
		}

		public Builder authorities(final Collection<? extends GrantedAuthority> authorities) {
			this.authorities = authorities;
			return this;
		}

		public Builder accountNonExpired(final boolean accountNonExpired) {
			this.accountNonExpired = accountNonExpired;
			return this;
		}

		public Builder accountNonLocked(final boolean accountNonLocked) {
			this.accountNonLocked = accountNonLocked;
			return this;
		}

		public Builder credentialsNonExpired(final boolean credentialsNonExpired) {
			this.credentialsNonExpired = credentialsNonExpired;
			return this;
		}

		public Builder enabled(final boolean enabled) {
			this.enabled = enabled;
			return this;
		}

	}
}
