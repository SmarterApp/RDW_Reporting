package org.opentestsystem.rdw.reporting.security;

import com.google.common.base.Splitter;
import com.google.common.collect.Sets;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;
import org.springframework.stereotype.Service;

@Service
public class SAMLUserDetailsServiceImpl implements SAMLUserDetailsService {

    public Object loadUserBySAML(SAMLCredential credential) throws UsernameNotFoundException {

        final List<Tenancy> tenancyChain = Stream.of(credential.getAttributeAsStringArray("sbacTenancyChain"))
                .map(rawTenancy -> {
                    final List<String> values = Splitter.on("|").trimResults().splitToList(rawTenancy);
                    return Tenancy.builder()
                            .withRoleId(values.get(1))
                            .withName(values.get(2))
                            .withLevel(values.get(3))
                            .withClientId(values.get(4))
                            .withClient(values.get(5))
                            .withGroupOfStatesId(values.get(6))
                            .withGroupOfStates(values.get(7))
                            .withStateId(values.get(8))
                            .withState(values.get(9))
                            .withGroupOfDistrictsId(values.get(10))
                            .withGroupOfDistricts(values.get(11))
                            .withDistrictId(values.get(12))
                            .withDistrict(values.get(13))
                            .withGroupOfInstitutionsId(values.get(14))
                            .withGroupOfInstitutions(values.get(15))
                            .withInstitutionId(values.get(16))
                            .withInstitution(values.get(17))
                            .build();
                })
                .collect(Collectors.toList());

		/*
            TODO: map sbacTenancyChain to authorities (roles and permissions)
		 */

        return User.builder()
                .withId(credential.getAttributeAsString("sbacUUID"))
                .withEmail(credential.getAttributeAsString("mail"))
                .withGivenName(credential.getAttributeAsString("givenName"))
                .withTenancyChain(tenancyChain)
                .withUsername(credential.getNameID().getValue())
                .withPassword("[REDACTED]")
                .withEnabled(true)
                .withCredentialsNonExpired(true)
                .withAccountNonExpired(true)
                .withAccountNonLocked(true)
                .withAuthorities(Sets.newHashSet(new SimpleGrantedAuthority("ROLE_USER")))
                .build();
    }

}