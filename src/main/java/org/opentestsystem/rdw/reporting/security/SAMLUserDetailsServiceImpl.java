package org.opentestsystem.rdw.reporting.security;

import org.opentestsystem.rdw.reporting.model.Permission;
import org.opentestsystem.rdw.reporting.service.AuthorizationService;
import org.opentestsystem.rdw.reporting.service.AuthorizationServiceException;
import org.opentestsystem.rdw.security.Grant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Set;


@Service
public class SAMLUserDetailsServiceImpl implements SAMLUserDetailsService {

	private static final String REDACTED = "[REDACTED]";
	private AuthorizationService authorizationService;

	@Autowired
	public SAMLUserDetailsServiceImpl(@NotNull AuthorizationService authorizationService) {
		this.authorizationService = authorizationService;
	}

	public Object loadUserBySAML(final SAMLCredential credential) throws UsernameNotFoundException {

		final String username = credential.getNameID().getValue();
		final String id = credential.getAttributeAsString("sbacUUID");
		final String firstName = credential.getAttributeAsString("givenName");
		final String lastName = credential.getAttributeAsString("sn");
		final String email = credential.getAttributeAsString("mail");
		final String[] encodedGrants = credential.getAttributeAsStringArray("sbacTenancyChain");

		try {
			final Set<Grant> grants = authorizationService.getGrants(encodedGrants);
			final Set<Permission> permissions = authorizationService.getPermissions(grants);
			final Set<GrantedAuthority> authorities = authorizationService.getAuthorities(grants);
			return User.builder()
				.id(username)
				.firstName(firstName)
				.lastName(lastName)
				.email(email)
				.permissions(permissions)
				.username(username)
				.password(REDACTED)
				.enabled(true)
				.credentialsNonExpired(true)
				.accountNonExpired(true)
				.accountNonLocked(true)
				.authorities(authorities)
				.build();

		} catch (AuthorizationServiceException exception) {
			throw new RuntimeException(exception);
		}

	}

}