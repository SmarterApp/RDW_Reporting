package org.opentestsystem.rdw.reporting.security;

import org.opentestsystem.rdw.reporting.model.GroupMembership;
import org.opentestsystem.rdw.reporting.model.Permission;
import org.opentestsystem.rdw.reporting.service.AuthorizationService;
import org.opentestsystem.rdw.security.Grant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Set;


@Service
public class SAMLUserDetailsServiceImpl implements SAMLUserDetailsService {

    private static final String REDACTED = "[REDACTED]";
    private AuthorizationService authorizationService;

    @Autowired
    public SAMLUserDetailsServiceImpl(@NotNull AuthorizationService authorizationService) {
        this.authorizationService = authorizationService;
    }

    public Object loadUserBySAML(final SAMLCredential credential) throws UsernameNotFoundException {

        final String username = credential.getNameID().getValue();
        final String id = credential.getAttributeAsString("sbacUUID");
        final String firstName = credential.getAttributeAsString("givenName");
        final String lastName = credential.getAttributeAsString("sn");
        final String email = credential.getAttributeAsString("mail");
        final String[] encodedGrants = credential.getAttributeAsStringArray("sbacTenancyChain");

        final Set<Grant> grants = authorizationService.getGrants(encodedGrants);


		/*
            Secures the application by throwing exception if the user
			has no authority to access data for this state
		 */
        if (grants.isEmpty()) {
            throw new RuntimeException(String.format(
                    "Grants do not permit access to tenant for user \"%s\"", username));
        }

        final Set<Permission> permissions = authorizationService.getPermissions(grants);
        final Set<GrantedAuthority> authorities = authorizationService.getAuthorities(grants);
        final Set<GroupMembership> groups = authorizationService.getGroups(username);

        return User.builder()
                .id(id)
                .firstName(firstName)
                .lastName(lastName)
                .email(email)
                .permissions(permissions)
                .groups(groups)
                .username(username)
                .password(REDACTED)
                .enabled(true)
                .credentialsNonExpired(true)
                .accountNonExpired(true)
                .accountNonLocked(true)
                .authorities(authorities)
                .build();
    }

}
