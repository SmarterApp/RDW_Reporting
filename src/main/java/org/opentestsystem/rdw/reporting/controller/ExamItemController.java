package org.opentestsystem.rdw.reporting.controller;

import org.opentestsystem.rdw.reporting.model.ExamItem;
import org.opentestsystem.rdw.reporting.model.IrisInfo;
import org.opentestsystem.rdw.reporting.model.Rubric;
import org.opentestsystem.rdw.reporting.service.ExamItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/examitems")
public class ExamItemController {
    //TODO: Get this from configuration?
    private final String irisVendorId = "2B3C34BF-064C-462A-93EA-41E9E3EB8333";

    @Autowired
    private ExamItemService service;

    @GetMapping(value = "/{itemNumber}/rubrics")
    @ResponseStatus(HttpStatus.OK)
    public List<Rubric> get(@PathVariable final String itemNumber) {
        return service.getByItemNumber(itemNumber);
    }

    @GetMapping(value = "")
    @ResponseStatus(HttpStatus.OK)
    public GetResult get(@RequestParam final int examId, @RequestParam final int studentId) {
        List<ExamItem> result = new ArrayList<ExamItem>();
        result.add(new ExamItem()
            .builder()
            .number("187-2703")
            .claim("Concepts and Procedures")
            .target("Target F")
            .score(0)
            .maximumScore(1)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2703\"}],\"layout\":\"WAI\"}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("200-22581")
            .claim("Problem Solving")
            .target("Target A")
            .score(2)
            .maximumScore(2)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test123</p>\",\"id\":\"I-200-22581\"}]}'")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-2708")
            .claim("Concepts and Procedures")
            .target("Target F")
            .score(1)
            .maximumScore(1)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test123</p>\",\"bankKey\":\"187\", \"itemKey\":\"2708\"}],\"layout\":\"23\"}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-1839")
            .claim("Concepts and Procedures")
            .target("Target E")
            .score(2)
            .maximumScore(2)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-1839\"}],\"layout\":\"WAI\"}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-2700")
            .claim("Concepts and Procedures")
            .target("Target G")
            .score(1)
            .maximumScore(1)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>alla</p>\",\"id\":\"I-187-2700\"}]}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-2704")
            .claim("Concepts and Procedures")
            .target("Target G")
            .score(0)
            .maximumScore(1)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2704\"}],\"layout\":\"WAI\"}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-2705")
            .claim("Concepts and Procedures")
            .target("Target H")
            .score(2)
            .maximumScore(2)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2705\"}],\"layout\":\"WAI\"}")
                .build()
            )
            .build()
        );

        result.add(new ExamItem()
            .builder()
            .number("187-1889")
            .claim("Concepts and Image Encoding")
            .target("Target I")
            .score(2)
            .maximumScore(2)
            .irisInfo(
                new IrisInfo()
                .builder()
                .vendorId(irisVendorId)
                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-1889\"}],\"layout\":\"WAI\"}")
                .build()
            )
            .build()
        );

        GetResult g = new GetResult();
        g.setItems(result);
        return g;
    }

    private static class GetResult {
        public List<ExamItem> getItems() {
            return items;
        }

        public void setItems(List<ExamItem> items) {
            this.items = items;
        }

        private List<ExamItem> items;
    }
}
