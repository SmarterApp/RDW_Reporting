package org.opentestsystem.rdw.reporting.service.impl;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multimap;
import com.google.common.collect.Multimaps;
import org.opentestsystem.rdw.reporting.model.GroupMembership;
import org.opentestsystem.rdw.reporting.model.Permission;
import org.opentestsystem.rdw.reporting.model.PermissionScope;
import org.opentestsystem.rdw.reporting.repository.DistrictRepository;
import org.opentestsystem.rdw.reporting.repository.GroupMembershipRepository;
import org.opentestsystem.rdw.reporting.repository.InstitutionRepository;
import org.opentestsystem.rdw.reporting.security.support.Authorities;
import org.opentestsystem.rdw.reporting.service.AuthorizationService;
import org.opentestsystem.rdw.security.Grant;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.security.service.PermissionServiceException;
import org.opentestsystem.rdw.security.support.Grants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.ImmutableMap.toImmutableMap;
import static com.google.common.collect.Sets.newLinkedHashSet;

@Service
public class AuthorizationServiceImpl implements AuthorizationService {

    private String stateId;
    private PermissionService permissionService;
    private DistrictRepository districtRepository;
    private InstitutionRepository institutionRepository;
    private GroupMembershipRepository groupMembershipRepository;

    @Autowired
    public AuthorizationServiceImpl(
            final @NotNull @Value("${application.state}") String stateId,
            final @NotNull @Qualifier("cachingPermissionService") PermissionService permissionService,
            final @NotNull DistrictRepository districtRepository,
            final @NotNull InstitutionRepository institutionRepository,
            final @NotNull GroupMembershipRepository groupMembershipRepository) {
        this.stateId = stateId;
        this.permissionService = permissionService;
        this.districtRepository = districtRepository;
        this.institutionRepository = institutionRepository;
        this.groupMembershipRepository = groupMembershipRepository;
    }

    public Set<Grant> getGrants(String[] encodedGrants) {
        final Set<Grant> grants = newLinkedHashSet();
        for (String encodedGrant : encodedGrants) {
            final Grant grant = Grants.from(encodedGrant);

            // Do not add do not belong to the application instance's state
            if (stateId.equals(grant.getStateId())) {
                grants.add(grant);
            }
        }
        return ImmutableSet.copyOf(grants);
    }

    public Set<Permission> getPermissions(Collection<Grant> grants) {

        // Groups grants by role to later combine their districts and institutions into a single scope
        // This is to cover the case of multiple non-intersecting grants being given
        // (e.g. roleA,stateA,districtA and roleA,stateA,districtB)
        final Multimap<String, Grant> grantsByRole = Multimaps.index(grants, Grant::getRole);
        final Map<String, Collection<String>> permissionsByRole = getPermissionsByRole();


        final Set<String> districtNaturalIds = newLinkedHashSet();
        final Set<String> institutionNaturalIds = newLinkedHashSet();
        for (Grant grant : grants) {
            if (grant.getEntityLevel() == Grant.EntityLevel.DISTRICT) {
                districtNaturalIds.add(grant.getEntityId());
            } else {
                institutionNaturalIds.add(grant.getEntityId());
            }
        }
        final Map<String, Long> districtIds = districtRepository.findAllIds(districtNaturalIds);
        final Map<String, Long> institutionIds = institutionRepository.findAllIds(institutionNaturalIds);

        final Set<Permission> permissions = newLinkedHashSet();

        // Identify and store the permissions associated with the role
        for (String role : grantsByRole.keySet()) {

            final Collection<String> permissionIds = permissionsByRole.get(role);

            // User may have roles not registered to this application in the permission service.
            if (permissionIds != null) {
                for (String permissionId : permissionIds) {
                    permissions.add(
                            new Permission(
                                    permissionId,
                                    createScope(grantsByRole.get(role), districtIds, institutionIds)
                            )
                    );
                }
            }
        }
        return ImmutableSet.copyOf(permissions);
    }

    public Set<GrantedAuthority> getAuthorities(Collection<Grant> grants) {
        final Map<String, Collection<String>> permissionsByRole = getPermissionsByRole();
        final ImmutableSet.Builder<GrantedAuthority> authorities = ImmutableSet.builder();
        for (Grant grant : grants) {
            if (grant.getEntityLevel() == Grant.EntityLevel.STATE) {
                authorities.add(Authorities.createRole(grant.getRole()));
                final Collection<String> permissionIds = permissionsByRole.get(grant.getRole());
                if (permissionIds != null) {
                    for (String permission : permissionIds) {
                        authorities.add(Authorities.createPermission(permission));
                    }
                }
            }
        }
        return authorities.build();
    }

    public Map<Long, GroupMembership> getGroupsById(String username) {
        return groupMembershipRepository.findAllForUsername(username).stream()
                .collect(toImmutableMap(GroupMembership::getId, group -> group));
    }

    private Map<String, Collection<String>> getPermissionsByRole() {
        try {
            return permissionService.getPermissionsByRole();
        } catch (PermissionServiceException exception) {
            throw new RuntimeException("Failed to get permissions", exception);
        }
    }

    private PermissionScope createScope(Collection<Grant> grantsWithSameRole, Map<String, Long> districtIdByNaturalId, Map<String, Long> institutionIdByNaturalId) {

        if (grantsWithSameRole.size() == 1) {
            return createScope(
                    grantsWithSameRole.iterator().next(),
                    districtIdByNaturalId,
                    institutionIdByNaturalId
            );
        }

        // Below implementation assumes if there was a state-level role,
        // all other scopes for the same role are contained in that role and therefore already filtered out
        // and there should only be one scope left for this role
        final ImmutableSet.Builder<Long> districtIds = ImmutableSet.builder();
        final ImmutableSet.Builder<Long> institutionIds = ImmutableSet.builder();

        for (Grant grant : grantsWithSameRole) {
            if (grant.getEntityLevel() == Grant.EntityLevel.DISTRICT) {
                districtIds.add(districtIdByNaturalId.get(grant.getEntityId()));
            } else {
                institutionIds.add(institutionIdByNaturalId.get(grant.getEntityId()));
            }
        }

        return new PermissionScope(districtIds.build(), institutionIds.build());
    }

    private PermissionScope createScope(Grant grant, Map<String, Long> districtIdByNaturalId, Map<String, Long> institutionIdByNaturalId) {
        if (grant.getEntityLevel() == Grant.EntityLevel.STATE) {
            return PermissionScope.STATEWIDE;
        }
        if (grant.getEntityLevel() == Grant.EntityLevel.DISTRICT) {
            return new PermissionScope(
                    ImmutableSet.of(districtIdByNaturalId.get(grant.getEntityId())),
                    ImmutableSet.of()
            );
        }
        return new PermissionScope(
                ImmutableSet.of(),
                ImmutableSet.of(institutionIdByNaturalId.get(grant.getEntityId()))
        );

    }
}
