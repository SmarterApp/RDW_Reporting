package org.opentestsystem.rdw.reporting.service.impl;

import com.google.common.io.ByteStreams;
import org.opentestsystem.rdw.reporting.model.ExamItem;
import org.opentestsystem.rdw.reporting.model.Rubric;
import org.opentestsystem.rdw.reporting.repository.ArtifactRepository;
import org.opentestsystem.rdw.reporting.service.ExamItemService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import javax.xml.xpath.XPathExpressionException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// TODO: Implement authorization
public class ExamItemServiceImpl implements ExamItemService {
    private ArtifactRepository artifactRepository;
    private static final Logger logger = LoggerFactory.getLogger(ExamItemServiceImpl.class);

    public ExamItemServiceImpl(ArtifactRepository artifactRepository) {
        this.artifactRepository = artifactRepository;
    }

    @Override
    public ExamItem getById(String id) {
        try {
            Document xmlDoc = getXmlDocument(id);

            XPath xPath = XPathFactory
                .newInstance()
                .newXPath();

            ExamItem examItem = new ExamItem()
                .builder()
                .id(id)
                .rubrics(getRubrics(xPath, xmlDoc, id)                )
                .build();

            return examItem;
        } catch (IOException e) {
            logger.warn(e.getMessage(), e);
            throw new RuntimeException("Error reading the item xml for id: " + id);
        } catch (SAXException | ParserConfigurationException e) {
            logger.warn(e.getMessage(), e);
            throw new RuntimeException("Error parsing the item xml for id: " + id);
        }
    }

    private Document getXmlDocument(String id) throws IOException, SAXException, ParserConfigurationException {
        DocumentBuilderFactory builder = DocumentBuilderFactory.newInstance();

        builder.setValidating(false);
        builder.setIgnoringComments(false);
        builder.setIgnoringElementContentWhitespace(true);
        builder.setNamespaceAware(true);

        InputStream fileStream = artifactRepository.getItemXml(id);
        return builder
            .newDocumentBuilder()
            .parse(fileStream);
    }

    private List<Rubric> getRubrics(XPath xPath, Document xmlDoc, String id){
        try {
            Node rubriclistNode = (Node) xPath
                .compile("/itemrelease/item/content/rubriclist")
                .evaluate(xmlDoc, XPathConstants.NODE);

            if(rubriclistNode == null)
                return new ArrayList<Rubric>();

            NodeList nodes = (NodeList) xPath
                .compile("./rubric")
                .evaluate(rubriclistNode, XPathConstants.NODESET);

            return IntStream
                .range(0, nodes.getLength())
                .mapToObj(nodes::item)
                .map(node -> getRubric(xPath, node, id))
                .collect(Collectors.toList());

        } catch (XPathExpressionException e) {
            logger.warn("Item xml contained a rubriclist element but no rubrics for id: " + id);
            return new ArrayList<Rubric>();
        }
    }

    private Rubric getRubric(XPath xPath, Node node, String id){
        try {
            return new Rubric()
                .builder()
                .name(getXmlValue(xPath, "./name", node))
                .template(encodeImages(getXmlValue(xPath, "./val", node), id))
                .build();
        } catch (XPathExpressionException | IOException e) {
            logger.warn("Error while parsing rubric xml.", e);
            throw new RuntimeException("Error parsing rubric xml for id: " + id, e);
        }
    }

    private String getXmlValue(XPath xPath, String expression, Node node) throws XPathExpressionException {
        Node valueNode = (Node)  xPath
            .compile(expression)
            .evaluate(node, XPathConstants.NODE);

        if(valueNode == null)
            return "";

        return valueNode.getNodeType() == Node.ATTRIBUTE_NODE
            ? valueNode.getNodeValue()
            : valueNode.getTextContent();
    }

    private String encodeImages(String html, String id) throws IOException {
        String imgRegex = "<img[^>]+src\\s*=\\s*['\"]([^'\"]+)['\"][^>]*>";
        String result = html;

        Matcher matcher = Pattern.compile(imgRegex).matcher(html);

        while (matcher.find()) {
            String imageFileName = matcher.group(1);
            InputStream imageStream = artifactRepository.getArtifactFromItemDir(id, imageFileName);
            String encoding = Base64
                .getEncoder()
                .encodeToString(ByteStreams.toByteArray(imageStream));

            String mimeType = URLConnection.guessContentTypeFromName(imageFileName);
            result = result.replace(imageFileName, "data:" + mimeType + ";base64," + encoding);
            matcher.end();
        }

        return result;
    }
}
