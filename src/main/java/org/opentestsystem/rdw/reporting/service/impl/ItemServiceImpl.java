package org.opentestsystem.rdw.reporting.service.impl;

import org.apache.xpath.NodeSet;
import org.opentestsystem.rdw.reporting.model.Item;
import org.opentestsystem.rdw.reporting.model.Rubric;
import org.opentestsystem.rdw.reporting.model.external.irp.RubricList;
import org.opentestsystem.rdw.reporting.repository.ArtifactRepository;
import org.opentestsystem.rdw.reporting.service.ItemService;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.bind.*;
import javax.xml.crypto.NodeSetData;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;
import java.io.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ItemServiceImpl implements ItemService {
    private ArtifactRepository artifactRepository;

    public ItemServiceImpl(ArtifactRepository artifactRepository) {
        this.artifactRepository = artifactRepository;
    }

    @Override
    public Item getById(String id) {
        try {
            Document xmlDoc = GetXmlDocument(id);

            XPath xPath = XPathFactory
                .newInstance()
                .newXPath();

            Node rubriclistNode = (Node) xPath
                .compile("/itemrelease/item/content/rubriclist")
                .evaluate(xmlDoc, XPathConstants.NODE);

            NodeList nodes = (NodeList) xPath.evaluate("./rubric", rubriclistNode, XPathConstants.NODESET);

            Item item = new Item()
                .builder()
                .id(id)
                .rubrics(GetRubrics(xPath, nodes)                )
                .build();

            return item;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }

        return null;
    }

    private Document GetXmlDocument(String id) throws IOException, SAXException, ParserConfigurationException {
        DocumentBuilderFactory builder = DocumentBuilderFactory.newInstance();

        builder.setValidating(false);
        builder.setIgnoringComments(false);
        builder.setIgnoringElementContentWhitespace(true);
        builder.setNamespaceAware(true);

        InputStream fileStream = artifactRepository.getItemXml(id);
        return builder
            .newDocumentBuilder()
            .parse(fileStream);
    }

    private List<Rubric> GetRubrics(XPath xPath, NodeList nodes)
    {
        return IntStream
            .range(0, nodes.getLength())
            .mapToObj(nodes::item)
            .map(node -> GetRubric(xPath, node))
            .collect(Collectors.toList());
    }

    private Rubric GetRubric(XPath xPath, Node node){
        try {
            return new Rubric()
                .builder()
                .name(xPath.evaluate("./name", node))
                .template(xPath.evaluate("./val", node))
                .build();
        } catch (XPathExpressionException e) {
            return new Rubric();
        }
    }
}
