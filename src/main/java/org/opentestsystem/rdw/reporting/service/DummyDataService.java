package org.opentestsystem.rdw.reporting.service;

import org.opentestsystem.rdw.reporting.model.ExamItem;
import org.opentestsystem.rdw.reporting.model.IrisInfo;

import java.util.ArrayList;
import java.util.List;

public class DummyDataService {
    //TODO: Get this from configuration?
    private final String irisVendorId = "2B3C34BF-064C-462A-93EA-41E9E3EB8333";

    public List<ExamItem> getExamItems(){
        List<ExamItem> examItems = new ArrayList<ExamItem>();
        examItems.add(new ExamItem()
                .builder()
                .number("187-2703")
                .claim("Concepts and Procedures")
                .target("Target F")
                .score(0)
                .maximumScore(1)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2703\"}],\"layout\":\"WAI\"}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("200-22581")
                .claim("Problem Solving")
                .target("Target A")
                .score(2)
                .maximumScore(2)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test123</p>\",\"id\":\"I-200-22581\"}]}'")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-2708")
                .claim("Concepts and Procedures")
                .target("Target F")
                .score(1)
                .maximumScore(1)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test123</p>\",\"bankKey\":\"187\", \"itemKey\":\"2708\"}],\"layout\":\"23\"}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-1839")
                .claim("Concepts and Procedures")
                .target("Target E")
                .score(2)
                .maximumScore(2)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-1839\"}],\"layout\":\"WAI\"}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-2700")
                .claim("Concepts and Procedures")
                .target("Target G")
                .score(1)
                .maximumScore(1)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>alla</p>\",\"id\":\"I-187-2700\"}]}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-2704")
                .claim("Concepts and Procedures")
                .target("Target G")
                .score(0)
                .maximumScore(1)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2704\"}],\"layout\":\"WAI\"}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-2705")
                .claim("Concepts and Procedures")
                .target("Target H")
                .score(2)
                .maximumScore(2)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-2705\"}],\"layout\":\"WAI\"}")
                                .build()
                )
                .build()
        );

        examItems.add(new ExamItem()
                .builder()
                .number("187-1889")
                .claim("Concepts and Image Encoding")
                .target("Target I")
                .score(2)
                .maximumScore(2)
                .irisInfo(
                        new IrisInfo()
                                .builder()
                                .vendorId(irisVendorId)
                                .token("{\"passage\":{\"autoLoad\":\"false\"},\"items\":[{\"response\":\"<p>test</p>\",\"id\":\"I-187-1889\"}],\"layout\":\"WAI\"}")
                                .build()
                )
                .build()
        );

        return examItems;
    }
}
