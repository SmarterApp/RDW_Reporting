package org.opentestsystem.rdw.reporting.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.repository.GroupRepository;
import org.opentestsystem.rdw.reporting.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@RepositoryIT
@Sql(statements = {
        "INSERT INTO district (name, natural_id) VALUES ('Sample District 1', 'district_1');",
        "INSERT INTO school (district_id, name, natural_id) VALUES ((select id from district where natural_id = 'district_1'), 'Sample School 1', 'school_1');",

        "INSERT INTO roster (created_by, school_id, name, exam_from, exam_to, subject_id) VALUES ('admin-login', (select id from school where natural_id = 'school_1'), 'Test Student Group 1', null, '2017-08-01', null);",
        "INSERT INTO roster (created_by, school_id, name, exam_from, exam_to, subject_id) VALUES ('admin-login', (select id from school where natural_id = 'school_1'), 'Test Student Group 2', null, '2017-08-01', null);",

        "INSERT INTO user_roster (roster_id, user_login) VALUES ((select id from roster where name = 'Test Student Group 1'), 'user-login');\n",
        "INSERT INTO user_roster (roster_id, user_login) VALUES ((select id from roster where name = 'Test Student Group 2'), 'user-login');\n",
})
public class GroupRepositoryIT {

    @Autowired
    private GroupRepository repository;

    @Test
    public void itShouldFindAllGroups() {
        final User user = mock(User.class);
        when(user.getUsername()).thenReturn("user-login");
        assertThat(repository.findAll(user).size()).isEqualTo(2);
        //TODO: add more verifications
    }
}