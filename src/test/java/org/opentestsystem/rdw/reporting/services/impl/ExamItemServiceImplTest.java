package org.opentestsystem.rdw.reporting.services.impl;

import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.reporting.model.Rubric;
import org.opentestsystem.rdw.reporting.repository.ArtifactRepository;
import org.opentestsystem.rdw.reporting.service.impl.ExamItemServiceImpl;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ExamItemServiceImplTest {
    private ExamItemServiceImpl service;
    private final String simpleItemId = "187-2044";
    private final String imageItemId = "187-1889";
    private final String multiItemId = "187-2638";
    private final String noRubricItemId = "187-2661";

    @Before
    public void before() throws IOException {
        final ArtifactRepository repository = mock(ArtifactRepository.class);
        when(repository.getItemXml(anyString())).thenAnswer(new Answer<InputStream>() {
            @Override
            public InputStream answer(final InvocationOnMock invocation) throws Throwable {
                final String id = (String) invocation.getArguments()[0];
                return this.getClass().getResourceAsStream("/" + id + ".xml");
            }
        });
        when(repository.getArtifactFromItemDirectory(anyString(), anyString())).thenReturn(CreateMockImageInputStream());

        service = new ExamItemServiceImpl(repository);
    }

    @Test
    public void getByItemNumberShouldReturnRubricLoadedFromStringConstant() {
        Rubric rubric = service.getByItemNumber(simpleItemId).get(0);

        assertThat(rubric.getName(), equalTo("Rubric"));
        assertThat(rubric.getTemplate().length(), equalTo(1603));
    }

    @Test
    public void getByItemNumberShouldReturnsRubricWhenLoadedFromFileAndEncodeImages() {
        Rubric rubric = service.getByItemNumber(imageItemId).get(0);

        assertThat(rubric.getName(), equalTo(" Rubric"));
        assertThat(rubric.getTemplate().contains("src=\"data:image/png;base64,"), equalTo(true));
    }

    @Test
    public void getByItemNumberWithMultiplesShouldReturnAll() {
        List<Rubric> rubrics = service.getByItemNumber(multiItemId);
        assertThat(rubrics.size(), equalTo(10));

        assertThat(rubrics.get(0).getName(), equalTo(" Rubric4"));
        assertThat(rubrics.get(0).getScorepoint(), equalTo("4"));

        assertThat(rubrics.get(1).getName(), equalTo(" Rubric3"));
        assertThat(rubrics.get(1).getScorepoint(), equalTo("3"));

        assertThat(rubrics.get(2).getName(), equalTo(" Rubric2"));
        assertThat(rubrics.get(2).getScorepoint(), equalTo("2"));

        assertThat(rubrics.get(3).getName(), equalTo(" Rubric1"));
        assertThat(rubrics.get(3).getScorepoint(), equalTo("1"));

        assertThat(rubrics.get(4).getName(), equalTo(" Rubric0"));
        assertThat(rubrics.get(4).getScorepoint(), equalTo("0"));
    }

    @Test
    public void getByItemNumberSWithNoRubricShouldReturnEmptyCollection() {
        List<Rubric> rubrics = service.getByItemNumber(noRubricItemId);
        assertThat(rubrics.size(), equalTo(0));
    }

    @Test(expected = RuntimeException.class)
    public void getByItemNumberUsingS3FileNotFoundShouldThrowException() {
        service.getByItemNumber("11815-1515005");
    }

    private InputStream CreateMockImageInputStream() throws IOException {
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
        Graphics graphics = image.createGraphics();
        graphics.drawRect(2, 2, 50, 50);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        ImageIO.write(image, "png", os);

        return new ByteArrayInputStream(os.toByteArray());
    }
}
