package org.opentestsystem.rdw.reporting.services.impl;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3Client;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.model.ExamItem;
import org.opentestsystem.rdw.reporting.model.Rubric;
import org.opentestsystem.rdw.reporting.repository.impl.S3ArtifactRepository;
import org.opentestsystem.rdw.reporting.service.ExamItemService;
import org.opentestsystem.rdw.reporting.service.impl.ExamItemServiceImpl;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;

public class ExamItemServiceImplIT {
    private ExamItemService serviceUsingLocal;
    private ExamItemService serviceUsingS3;

    private final String AccessKey= ""; // TODO: Set your access key.
    private final String SecretKey= ""; // TODO: Set your secret key.

    @Before
    public void before() {
        // These will be autowired by spring boot.  I'm manually constructing these here
        // for a faster test run.
        serviceUsingLocal = new ExamItemServiceImpl(new ArtifactRepositoryStub());
        serviceUsingS3 = new ExamItemServiceImpl(
                new S3ArtifactRepository(
                        new AmazonS3Client(
                                new BasicAWSCredentials(AccessKey, SecretKey)
                        )
                )
        );
    }

    @Test
    public void getByIdShouldReturnRubricLoadedFromStringConstant() {
        Rubric rubric = serviceUsingLocal.getById("").getRubrics().get(0);

        assertThat(rubric.getName(), equalTo("Rubric"));
        assertThat(rubric.getTemplate().length(), equalTo(1603));
    }

    @Test
    public void getByIdSShouldReturnsRubricWhenLoadedFromFileAndEncodeImages() {
        Rubric rubric = serviceUsingLocal.getById("187-1889").getRubrics().get(0);

        assertThat(rubric.getName(), equalTo("\n        Rubric "));
        assertThat(rubric.getTemplate().contains("src=\"data:image/png;base64,"), equalTo(true));
    }

    @Test
    public void getByIdSWithMultiplesShouldReturnAll() {
        ExamItem item = serviceUsingLocal.getById("187-2638");
        assertThat(item.getRubrics().size(), equalTo(5));

        assertThat(item.getRubrics().get(0).getName(), equalTo("\n        Rubric 4"));
        assertThat(item.getRubrics().get(1).getName(), equalTo("\n        Rubric 3"));
        assertThat(item.getRubrics().get(2).getName(), equalTo("\n        Rubric 2"));
        assertThat(item.getRubrics().get(3).getName(), equalTo("\n        Rubric 1"));
        assertThat(item.getRubrics().get(4).getName(), equalTo("\n        Rubric 0"));
    }

    @Test
    public void getByIdSWithNoRubricShouldReturnEmptyCollection() {
        ExamItem item = serviceUsingLocal.getById("187-2661");
        assertThat(item.getRubrics().size(), equalTo(0));
    }

    // TODO: Inject access keys as part of some external build process.
    @Test
    public void getByIdUsingS3ShouldReturnRubrics() {
        try {
            Rubric rubric = serviceUsingS3.getById("187-1889").getRubrics().get(0);

            assertThat(rubric.getName(), equalTo("\n        Rubric "));
            assertThat(rubric.getTemplate().contains("src=\"data:image/png;base64,"), equalTo(true));
        }
        catch(RuntimeException e){
            if(!AccessKey.isEmpty())
                throw e;
        }
    }

    @Test(expected=RuntimeException.class)
    public void getByIdUsingS3FileNotFoundShouldThrowException() {
        ExamItem item = serviceUsingS3.getById("11815-1515005");
    }
}
