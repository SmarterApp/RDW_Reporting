package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * This class provides base functionality for all aggregate report queries.
 */
@SuppressWarnings("unchecked")
public abstract class AbstractSubgroupedAggregateReportQuery extends AbstractAggregateReportQuery implements AggregateQuery {

    protected Set<String> subjectCodes;

    protected boolean includeState;
    protected boolean includeAllDistricts;
    protected boolean includeAllSchoolsOfDistricts;
    protected boolean includeAllDistrictsOfSchools;

    //pass through values
    protected String valueDisplayType;
    protected String achievementLevelDisplayType;

    //defines custom subgroups
    protected Map<String, StudentFilters> subgroups;

    @Override
    public boolean isFilteredSubgroupQuery() {
        return !getSubgroups().isEmpty();
    }

    public Set<String> getSubjectCodes() {
        return safeImmutableOf(subjectCodes);
    }

    public Map<String, StudentFilters> getSubgroups() {
        return safeImmutableOf(subgroups);
    }

    public Set<DimensionType> getDimensionTypes() {
        return safeImmutableOf(dimensionTypes);
    }

    public StudentFilters getStudentFilters() {
        return studentFilters == null ? new StudentFilters() : studentFilters;
    }

    @Override
    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    @Override
    public Set<Long> getDistrictIds() {
        return safeImmutableOf(districtIds);
    }

    @Override
    public Set<Long> getSchoolIds() {
        return safeImmutableOf(schoolIds);
    }

    public Set<String> getAssessmentGradeCodes() {
        return safeImmutableOf(assessmentGradeCodes);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public boolean isIncludeAllSchoolsOfDistricts() {
        return includeAllSchoolsOfDistricts;
    }

    public boolean isIncludeAllDistrictsOfSchools() {
        return includeAllDistrictsOfSchools;
    }

    public boolean isShowEmpty() {
        return showEmpty;
    }

    public String getValueDisplayType() {
        return valueDisplayType;
    }

    public String getAchievementLevelDisplayType() {
        return achievementLevelDisplayType;
    }

    public List<String> getColumnOrder() {
        return safeImmutableOf(columnOrder);
    }

    public Set<String> getCompletenessCodes() {
        return safeImmutableOf(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return safeImmutableOf(administrativeConditionCodes);
    }

    public static abstract class Builder<A extends AbstractSubgroupedAggregateReportQuery, B extends Builder<A, B>> extends AbstractAggregateReportQuery.Builder<A, B> {

        private Set<String> subjectCodes;
        private boolean includeState;
        private boolean includeAllDistricts;
        private boolean includeAllSchoolsOfDistricts;
        private boolean includeAllDistrictsOfSchools;
        private String valueDisplayType;
        private String achievementLevelDisplayType;
        private Map<String, StudentFilters> subgroups;

        protected A build(A value) {
            super.build(value);
            value.subjectCodes = subjectCodes;
            value.includeState = includeState;
            value.includeAllDistricts = includeAllDistricts;
            value.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            value.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            value.valueDisplayType = valueDisplayType;
            value.achievementLevelDisplayType = achievementLevelDisplayType;
            value.subgroups = subgroups == null ? null : ImmutableMap.copyOf(subgroups);
            return value;
        }

        protected B copy(final A value) {
            return super.copy(value)
                    .subjectCodes(value.subjectCodes)
                    .includeState(value.includeState)
                    .includeAllDistricts(value.includeAllDistricts)
                    .includeAllSchoolsOfDistricts(value.includeAllSchoolsOfDistricts)
                    .includeAllDistrictsOfSchools(value.includeAllDistrictsOfSchools)
                    .valueDisplayType(value.valueDisplayType)
                    .achievementLevelDisplayType(value.achievementLevelDisplayType)
                    .subgroups(newHashMap(value.getSubgroups()));
        }

        public B subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return (B) this;
        }

        public B includeState(final boolean includeState) {
            this.includeState = includeState;
            return (B) this;
        }

        public B includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return (B) this;
        }

        public B includeAllSchoolsOfDistricts(final boolean includeAllSchoolsOfDistricts) {
            this.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            return (B) this;
        }

        public B includeAllDistrictsOfSchools(final boolean includeAllDistrictsOfSchools) {
            this.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            return (B) this;
        }

        public B valueDisplayType(final String valueDisplayType) {
            this.valueDisplayType = valueDisplayType;
            return (B) this;
        }

        public B achievementLevelDisplayType(final String achievementLevelDisplayType) {
            this.achievementLevelDisplayType = achievementLevelDisplayType;
            return (B) this;
        }

        public B subgroups(final Map<String, StudentFilters> subgroups) {
            this.subgroups = subgroups;
            return (B) this;
        }

        public B subgroup(final String label, final StudentFilters filters) {
            if (this.subgroups == null) {
                this.subgroups = newHashMap();
            }
            this.subgroups.put(label, filters);
            return (B) this;
        }

    }
}
