package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.reporting.common.repository.ReportTemplateRepository;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.StringJoiner;
import java.util.stream.Collectors;

import static java.nio.charset.StandardCharsets.UTF_8;

/**
 * A ReportTemplateRepository backed by an archive service.
 */
public class ArchiveBackedReportTemplateRepository implements ReportTemplateRepository {
    final static String BasePath = "TEMPLATES/";

    private final ArchiveService archiveService;
    private final LocationStrategy locationStrategy;

    public ArchiveBackedReportTemplateRepository(final ArchiveService archiveService) {
        this.archiveService = archiveService;
        this.locationStrategy = id -> new StringJoiner("/", BasePath, "").add(id).toString();
    }

    @Override
    public boolean exists(final String templateName) {
        return archiveService.exists(locationStrategy.location(templateName));
    }

    @Override
    public List<String> findAllTemplateNames() {
        // get the archive listing, then strip the BasePath prefix
        return archiveService.listResources(BasePath).stream()
            .map(v -> v.substring(BasePath.length()+1))
            .collect(Collectors.toList());
    }

    @Override
    public Optional<Properties> getProperties(final String templateName) {
        try {
            return Optional.of(archiveService.readProperties(locationStrategy.location(templateName)));
        } catch (final IllegalArgumentException ignored) {
            return Optional.empty();
        }
    }

    @Override
    public Optional<String> getAsString(final String templateName) {
        try {
            final byte[] contents = archiveService.readResource(locationStrategy.location(templateName));
            return Optional.of(new String(contents, UTF_8));
        } catch (final IllegalArgumentException ignored) {
            return Optional.empty();
        }
    }

    @Override
    public void write(final String templateName, final InputStream is) {
        archiveService.writeResource(locationStrategy.location(templateName), is, null);
    }

    @Override
    public void read(final String templateName, final OutputStream os) {
        // let ArchiveService IllegalArgumentException escape
        final byte[] contents = archiveService.readResource(locationStrategy.location(templateName));
        try {
            os.write(contents);
        } catch (final IOException e) {
            throw new IllegalArgumentException("Error reading template contents", e);
        }
    }

    @Override
    public void delete(final String templateName) {
        try {
            archiveService.delete(locationStrategy.location(templateName));
        } catch (final IllegalArgumentException ignored) {
            // quietly no-op if it doesn't exist
        }
    }
}
