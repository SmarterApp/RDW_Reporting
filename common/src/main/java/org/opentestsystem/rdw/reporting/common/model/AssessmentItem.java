package org.opentestsystem.rdw.reporting.common.model;

import java.util.Collections;
import java.util.List;

/**
 * Represents a single assessment item
 */
public class AssessmentItem {

    private long id;
    private int position;
    private String bankItemKey;
    private String claimCode;
    private String targetCode;
    private int targetId;
    private String depthOfKnowledgeCode;
    private String difficultyCode;
    private List<String> commonCoreStandardIds;
    private int maximumPoints;
    private String mathPracticeCode;
    private Boolean allowCalculator;
    private String type;
    private int optionsCount;
    private String answerKey;
    private String performanceTaskWritingType;

    private AssessmentItem() {
    }

    /**
     * @return the assessment item entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the position of an item as it appears on the assessment.
     */
    public int getPosition() {
        return position;
    }

    /**
     * @return the bank and item key, typically in format of ###-####
     */
    public String getBankItemKey() {
        return bankItemKey;
    }

    /**
     * @return the claim code
     */
    public String getClaimCode() {
        return claimCode;
    }

    /**
     * @return the target code
     */
    public String getTargetCode() {
        return targetCode;
    }

    /**
     * @return the target id
     */
    public int getTargetId() {
        return targetId;
    }

    /**
     * @return the depth of knowledge code
     */
    public String getDepthOfKnowledgeCode() {
        return depthOfKnowledgeCode;
    }

    /**
     * @return the math practice code
     */
    public String getMathPracticeCode() {
        return mathPracticeCode;
    }


    /**
     * @return true if a calculator was allowed
     */
    public Boolean getAllowCalculator() {
        return allowCalculator;
    }

    /**
     * @return the difficultyCode of the item
     */
    public String getDifficultyCode() {
        return difficultyCode;
    }

    /**
     * @return The common core standards
     */
    public List<String> getCommonCoreStandardIds() {
        return commonCoreStandardIds;
    }

    /**
     * @return the item's maximum amount of points
     */
    public int getMaximumPoints() {
        return maximumPoints;
    }

    /**
     * @return the item's type
     */
    public String getType() {
        return type;
    }

    /**
     * @return the number of choices
     */
    public int getOptionsCount() {
        return optionsCount;
    }

    /**
     * @return the answer key
     */
    public String getAnswerKey() {
        return answerKey;
    }

    /**
     * @return the performance task writing type or <code>null</code> if this is not a performance task WER item
     */
    public String getPerformanceTaskWritingType() {
        return performanceTaskWritingType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private long id;
        private int position;
        private String bankItemKey;
        private String claimCode;
        private String targetCode;
        private int targetId;
        private String depthOfKnowledgeCode;
        private String mathPracticeCode;
        private Boolean allowCalculator;
        private String difficultyCode;
        private List<String> commonCoreStandardIds;
        private int maximumPoints;
        private String type;
        private int optionsCount;
        private String answerKey;
        private String performanceTaskWritingType;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder position(final int position) {
            this.position = position;
            return this;
        }

        public Builder bankItemKey(final String bankItemKey) {
            this.bankItemKey = bankItemKey;
            return this;
        }

        public Builder claimCode(final String claimCode) {
            this.claimCode = claimCode;
            return this;
        }

        public Builder targetCode(final String targetCode) {
            this.targetCode = targetCode;
            return this;
        }

        public Builder targetId(final int targetId) {
            this.targetId = targetId;
            return this;
        }

        public Builder depthOfKnowledgeCode(final String depthOfKnowledgeCode) {
            this.depthOfKnowledgeCode = depthOfKnowledgeCode;
            return this;
        }

        public Builder mathPracticeCode(final String mathPracticeCode) {
            this.mathPracticeCode = mathPracticeCode;
            return this;
        }

        public Builder allowCalculator(final Boolean allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder difficultyCode(final String difficultyCode) {
            this.difficultyCode = difficultyCode;
            return this;
        }

        public Builder maximumPoints(final int maximumPoints) {
            this.maximumPoints = maximumPoints;
            return this;
        }

        public Builder commonCoreStandardIds(final List<String> commonCoreStandardIds) {
            this.commonCoreStandardIds = commonCoreStandardIds;
            return this;
        }

        public Builder type(final String type) {
            this.type = type;
            return this;
        }

        public Builder optionsCount(final int optionsCount) {
            this.optionsCount = optionsCount;
            return this;
        }

        public Builder answerKey(final String answerKey) {
            this.answerKey = answerKey;
            return this;
        }

        public Builder performanceTaskWritingType(final String performanceTaskWritingType) {
            this.performanceTaskWritingType = performanceTaskWritingType;
            return this;
        }

        public AssessmentItem build() {
            final AssessmentItem item = new AssessmentItem();
            item.id = id;
            item.position = position;
            item.bankItemKey = bankItemKey;
            item.claimCode = claimCode;
            item.targetCode = targetCode;
            item.targetId = targetId;
            item.depthOfKnowledgeCode = depthOfKnowledgeCode;
            item.mathPracticeCode = mathPracticeCode;
            item.allowCalculator = allowCalculator;
            item.difficultyCode = difficultyCode;
            item.maximumPoints = maximumPoints;
            item.commonCoreStandardIds = commonCoreStandardIds != null ? Collections.unmodifiableList(commonCoreStandardIds) : null;
            item.type = type;
            item.optionsCount = optionsCount;
            item.answerKey = answerKey;
            item.performanceTaskWritingType = performanceTaskWritingType;
            return item;
        }

    }

}
