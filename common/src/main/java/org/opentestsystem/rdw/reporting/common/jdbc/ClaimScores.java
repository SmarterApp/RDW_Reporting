package org.opentestsystem.rdw.reporting.common.jdbc;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * Holds utility methods for mapping SQL query to the list of {@link ScaleScore} to be used with
 * {@link Exam#claimScaleScores}
 * <p>
 * This class maps all columns defined by the sql.snippet.examClaimColumns
 */
public final class ClaimScores {

    private static final ClaimScaleScoreColumn[] CLAIM_SCALE_SCORE_COLUMNS = {
            new ClaimScaleScoreColumn("claim1_score_code", "claim1_category", "claim1_scale_score", "claim1_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim2_score_code", "claim2_category", "claim2_scale_score", "claim2_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim3_score_code", "claim3_category", "claim3_scale_score", "claim3_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim4_score_code", "claim4_category", "claim4_scale_score", "claim4_scale_score_std_err")
    };

    private ClaimScores() {
    }

    /**
     * Builds a list of claim scores based on the assessment type
     *
     * @param row the database result set
     * @return null for for assessment type IAB, otherwise a collection of the claim scores
     * @throws SQLException if the column label is not valid
     */
    public static List<ScaleScore> map(final ResultSet row) throws SQLException {
        if (AssessmentType.valueOf(row.getInt("type_id")) == AssessmentType.IAB) return null;

        final List<ScaleScore> claimScaleScores = newArrayList();
        // Collects claim scores for ICA and Summative exams.
        // If a single claim is unscored a null entry will be put in the list to represent the unscored claim

        for (final ClaimScaleScoreColumn column : CLAIM_SCALE_SCORE_COLUMNS) {

            final String claimCode = getNullable(row, row.getString(column.code));
            if (claimCode == null) break;

            final Integer claimScaleScoreLevel = getNullable(row, row.getInt(column.level));
            final ScaleScore claimScaleScore = claimScaleScoreLevel == null ? null : ScaleScore.builder()
                    .level(claimScaleScoreLevel)
                    .value(row.getInt(column.value))
                    .standardError(row.getDouble(column.standardError))
                    .build();

            claimScaleScores.add(claimScaleScore);
        }

        return Collections.unmodifiableList(claimScaleScores);
    }

    private static final class ClaimScaleScoreColumn {
        private final String code;
        private final String level;
        private final String value;
        private final String standardError;

        private ClaimScaleScoreColumn(final String code, final String level, final String value, final String standardError) {
            this.code = code;
            this.level = level;
            this.value = value;
            this.standardError = standardError;
        }
    }
}
