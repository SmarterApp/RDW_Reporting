package org.opentestsystem.rdw.reporting.common.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * Holds utility methods for mapping SQL query results to {@link ScaleScore}
 * <p>
 * This can be used to map the overall score as well as claim and alt scores
 * defined by sql.snippet.claimAndAltScoreColumns.
 * </p>
 */
public final class ScaleScores {

    private ScaleScores() {
    }

    /**
     * Extract a ScaleScore from the overall score columns
     * (scale_score, scale_score_std_err, performance_level).
     * <p>
     * Very little error checking is done: it assumes the columns exist and have values.
     * </p>
     *
     * @param row result set
     * @return ScaleScore constructed from row
     * @throws SQLException if any problem extracting data
     */
    public static ScaleScore mapOverall(final ResultSet row) throws SQLException {
        final Integer scaleScoreLevel = getNullable(row, row.getInt("performance_level"));
        return scaleScoreLevel == null ? null : ScaleScore.builder()
                .level(scaleScoreLevel)
                .value(row.getInt("scale_score"))
                .standardError(row.getDouble("scale_score_std_err"))
                .build();
    }

    /**
     * Extract the claim scores from a row.
     * <p>
     * Extraction stops at the first null code so the list should be as long as the
     * configured number of claim scores for the assessment. If a code is not null but
     * there is neither a score value or level, a null entry will be put in the list
     * as a placeholder.
     * </p>
     * <p>
     * This method looks for a type_id column and short-circuits for IABs.
     * </p>
     *
     * @param row result set
     * @return list of scale scores, may contain nulls
     * @throws SQLException if any problem extracting data
     */
    public static List<ScaleScore> mapClaimScores(final ResultSet row) throws SQLException {
        return mapScores(row, new String[]{"claim1_", "claim2_", "claim3_", "claim4_", "claim5_", "claim6_"}, "category");
    }

    /**
     * Extract the alt scores from a row.
     * <p>
     * Extraction stops at the first null code so the list should be as long as the
     * configured number of alt scores for the assessment. If a code is not null but
     * there is neither a score value or level, a null entry will be put in the list
     * as a placeholder.
     * </p>
     * <p>
     * This method looks for a type_id column and short-circuits for IABs.
     * </p>
     *
     * @param row result set
     * @return list of scale scores, may contain nulls
     * @throws SQLException if any problem extracting data
     */
    public static List<ScaleScore> mapAltScores(final ResultSet row) throws SQLException {
        return mapScores(row, new String[]{"alt1_", "alt2_", "alt3_", "alt4_", "alt5_", "alt6_"}, "performance_level");
    }

    // a helper to eliminate code duplication; yeah, it's a bit goofy
    private static List<ScaleScore> mapScores(final ResultSet row, final String[] prefixes, final String levelSuffix) throws SQLException {
        if (AssessmentType.valueOf(row.getInt("type_id")) == AssessmentType.IAB) return null;

        final List<ScaleScore> scaleScores = newArrayList();

        for (final String prefix : prefixes) {
            final String code = getNullable(row, row.getString(prefix + "score_code"));
            if (code == null || code.isEmpty()) break;

            final Integer level = getNullable(row, row.getInt(prefix + levelSuffix));
            final Integer score = getNullable(row, row.getInt(prefix + "scale_score"));
            if (level == null && score == null) {
                scaleScores.add(null);
            } else {
                // TODO - ScaleScore should allow null level/value - but will that ripple?
                scaleScores.add(ScaleScore.builder()
                        .level(level == null ? 0 : level)
                        .value(score == null ? 0 : score)
                        .standardError(row.getDouble(prefix + "scale_score_std_err"))
                        .build());
            }
        }
        return scaleScores.isEmpty() ? null : scaleScores;
    }
}
