package org.opentestsystem.rdw.reporting.common.repository;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Optional;
import java.util.Properties;

/**
 * Implementations of this interface are responsible for managing report template contents.<br/>
 * <p>
 * This is used by the admin service to maintain the templates, and by the
 * report processor to retrieve the templates when generating reports.
 * </p>
 * <p>
 * NOTE: a template name is expected to be a concatenation of the subject code
 * and the assessment type code, e.g. "Math_sum", but that isn't a requirement
 * for this repository: as long as the naming is consistent, it can be anything.
 * </p>
 */
public interface ReportTemplateRepository {

    /**
     * @param templateName template name, e.g. "Math_sum"
     * @return true if a template with the given name exists
     */
    boolean exists(String templateName);

    /**
     * @return return a listing of all the template names
     */
    List<String> findAllTemplateNames();

    /**
     * Return properties (metadata) of the template file. There are no user
     * data, but this will include at least Content-Type, Content-Length, and
     * Last-Modified.
     *
     * @param templateName template name, e.g. "ELA_iab"
     * @return properties of template file; empty if template doesn't exist
     */
    Optional<Properties> getProperties(String templateName);

    /**
     * Return the body of the template as a string, assuming a UTF8 charset.
     * Instead of throwing an IAE for unknown templates, it returns empty.
     *
     * @param templateName template name, e.g. "Math_sum"
     * @return the template body, loaded as a string; empty if template doesn't exist
     */
    Optional<String> getAsString(String templateName);

    /**
     * Write contents for the given template name.
     *
     * @param templateName template name, e.g. "ELPAC_iab"
     * @param is input stream containing template contents; caller manages lifecycle
     */
    void write(String templateName, InputStream is);

    /**
     * Read contents for the given template name.
     *
     * @param templateName template name, e.g. "ELA_ica"
     * @param os output stream to receive contents; caller manages lifecycle
     * @throws IllegalArgumentException if template does not exist
     */
    void read(String templateName, OutputStream os);

    /**
     * Delete the specified template.
     * This will silently no-op if the template doesn't exist.
     *
     * @param templateName template name, e.g. "ELA_sum"
     */
    void delete(String templateName);
}
