package org.opentestsystem.rdw.reporting.common.model;

import java.util.Arrays;
import java.util.List;

import static java.util.Comparator.comparingInt;
import static java.util.stream.Collectors.toList;

/**
 * Represents available drill down dimensions.
 * Note: The codes are associated with SBAC data terms defined by Organization Exam Export
 * functionality.
 */
public enum DimensionType {
    Custom(-2, false, false, "Custom"),
    Overall(-1, false, true, "Overall"),
    Gender(1, "Sex"),
    Ethnicity(2, "Ethnicity"),
    LEP(3, "LEPStatus"),
    ELAS(3, "EnglishLanguageAcquisitionStatus"),
    Language(4, true, false, "LanguageCode"),
    Section504(5, "Section504Status"),
    IEP(6, "IDEAIndicator"),
    MigrantStatus(7, "MigrantStatus"),
    EconomicDisadvantage(8, "EconomicDisadvantageStatus"),
    StudentEnrolledGrade(9, false, false, "GradeLevelWhenAssessed");

    private int displayOrder;
    private boolean filter;
    private boolean backfilled;
    private String code;

    DimensionType(final int displayOrder, final String code) {
        this(displayOrder, true, true, code);
    }

    DimensionType(final int displayOrder, final boolean filter, final boolean backfilled, final String code) {
        this.displayOrder = displayOrder;
        this.filter = filter;
        this.backfilled = backfilled;
        this.code = code;
    }

    public int displayOrder() {
        return displayOrder;
    }

    public boolean isFilter() {
        return filter;
    }

    public boolean isBackfilled() {
        return backfilled;
    }

    public String code() {
        return code;
    }

    public static DimensionType caseInsensitiveValue(final String name) {
        for (final DimensionType type : DimensionType.values()) {
            if (type.name().equalsIgnoreCase(name)) {
                return type;
            }
        }
        return null;
    }

    public static List<DimensionType> orderedDisplayValues() {
        return Arrays.stream(values())
                .filter(type -> (type.displayOrder > 0))
                .sorted(comparingInt(DimensionType::displayOrder))
                .collect(toList());
    }
}
