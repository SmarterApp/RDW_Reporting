package org.opentestsystem.rdw.reporting.common.configuration;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.common.base.Objects;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReportingSystemPropertiesImpl implements ReportingSystemProperties {

    private String analyticsTrackingId;
    private String interpretiveGuideUrl;
    private String accessDeniedUrl;
    private String landingPageUrl;
    private String irisVendorId;
    private Integer minItemDataYear;
    private Boolean percentileDisplayEnabled;
    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    private List<String> reportLanguages = new ArrayList<>();
    private Integer schoolYear;
    private StateProperties state = new StateProperties();
    private Boolean transferAccessEnabled;
    private String translationLocation;
    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    private List<String> uiLanguages = new ArrayList<>();
    private String userGuideUrl;
    private TargetReportProperties targetReport = new TargetReportProperties();
    private Map<StudentFieldType, SearchFieldPermissionLevel> studentFields = new HashMap<>();

    public ReportingSystemPropertiesImpl() {
    }

    @Override
    public String getAnalyticsTrackingId() {
        return analyticsTrackingId;
    }

    public void setAnalyticsTrackingId(String analyticsTrackingId) {
        this.analyticsTrackingId = analyticsTrackingId;
    }

    @Override
    public String getInterpretiveGuideUrl() {
        return interpretiveGuideUrl;
    }

    public void setInterpretiveGuideUrl(String interpretiveGuideUrl) {
        this.interpretiveGuideUrl = interpretiveGuideUrl;
    }

    @Override
    public String getAccessDeniedUrl() {
        return accessDeniedUrl;
    }

    public void setAccessDeniedUrl(String accessDeniedUrl) {
        this.accessDeniedUrl = accessDeniedUrl;
    }

    @Override
    public String getLandingPageUrl() {
        return landingPageUrl;
    }

    public void setLandingPageUrl(String landingPageUrl) {
        this.landingPageUrl = landingPageUrl;
    }

    @Override
    public String getIrisVendorId() {
        return irisVendorId;
    }

    public void setIrisVendorId(String irisVendorId) {
        this.irisVendorId = irisVendorId;
    }

    @Override
    public Integer getMinItemDataYear() {
        return minItemDataYear;
    }

    public void setMinItemDataYear(Integer minItemDataYear) {
        this.minItemDataYear = minItemDataYear;
    }

    public Boolean isPercentileDisplayEnabled() {
        return percentileDisplayEnabled;
    }

    public void setPercentileDisplayEnabled(Boolean percentileDisplayEnabled) {
        this.percentileDisplayEnabled = percentileDisplayEnabled;
    }

    @Override
    public List<String> getReportLanguages() {
        return reportLanguages;
    }

    public void setReportLanguages(List<String> reportLanguages) {
        this.reportLanguages = reportLanguages;
    }

    @Override
    public Integer getSchoolYear() {
        return schoolYear;
    }

    public void setSchoolYear(Integer schoolYear) {
        this.schoolYear = schoolYear;
    }

    @Override
    public StateProperties getState() {
        return state;
    }

    public void setState(StateProperties state) {
        this.state = state;
    }

    public Boolean isTransferAccessEnabled() {
        return transferAccessEnabled;
    }

    public void setTransferAccessEnabled(Boolean transferAccessEnabled) {
        this.transferAccessEnabled = transferAccessEnabled;
    }

    @Override
    public String getTranslationLocation() {
        return translationLocation;
    }

    public void setTranslationLocation(String translationLocation) {
        this.translationLocation = translationLocation;
    }

    @Override
    public List<String> getUiLanguages() {
        return uiLanguages;
    }

    public void setUiLanguages(List<String> uiLanguages) {
        this.uiLanguages = uiLanguages;
    }

    @Override
    public String getUserGuideUrl() {
        return userGuideUrl;
    }

    public void setUserGuideUrl(String userGuideUrl) {
        this.userGuideUrl = userGuideUrl;
    }

    @Override
    public TargetReportProperties getTargetReport() {
        return targetReport;
    }

    public void setTargetReport(TargetReportProperties targetReport) {
        this.targetReport = targetReport;
    }

    @Override
    public Map<StudentFieldType, SearchFieldPermissionLevel> getStudentFields() {
        return studentFields;
    }

    public void setStudentFields(Map<StudentFieldType, SearchFieldPermissionLevel> studentFields) {
        this.studentFields = studentFields;
    }

    @Override
    public String toString() {
        return "ReportingSystemPropertiesImpl{" +
                "analyticsTrackingId='" + analyticsTrackingId + '\'' +
                ", interpretiveGuideUrl='" + interpretiveGuideUrl + '\'' +
                ", accessDeniedUrl='" + accessDeniedUrl + '\'' +
                ", irisVendorId='" + irisVendorId + '\'' +
                ", minItemDataYear=" + minItemDataYear +
                ", percentileDisplayEnabled=" + percentileDisplayEnabled +
                ", reportLanguages=" + reportLanguages +
                ", schoolYear=" + schoolYear +
                ", state=" + state +
                ", transferAccessEnabled=" + transferAccessEnabled +
                ", translationLocation='" + translationLocation + '\'' +
                ", uiLanguages=" + uiLanguages +
                ", userGuideUrl='" + userGuideUrl + '\'' +
                ", targetReport=" + targetReport +
                ", studentFields=" + studentFields +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReportingSystemPropertiesImpl)) return false;
        ReportingSystemPropertiesImpl that = (ReportingSystemPropertiesImpl) o;
        return Objects.equal(analyticsTrackingId, that.analyticsTrackingId) &&
                Objects.equal(interpretiveGuideUrl, that.interpretiveGuideUrl) &&
                Objects.equal(accessDeniedUrl, that.accessDeniedUrl) &&
                Objects.equal(landingPageUrl, that.landingPageUrl) &&
                Objects.equal(irisVendorId, that.irisVendorId) &&
                Objects.equal(minItemDataYear, that.minItemDataYear) &&
                Objects.equal(percentileDisplayEnabled, that.percentileDisplayEnabled) &&
                Objects.equal(reportLanguages, that.reportLanguages) &&
                Objects.equal(schoolYear, that.schoolYear) &&
                Objects.equal(state, that.state) &&
                Objects.equal(transferAccessEnabled, that.transferAccessEnabled) &&
                Objects.equal(translationLocation, that.translationLocation) &&
                Objects.equal(uiLanguages, that.uiLanguages) &&
                Objects.equal(userGuideUrl, that.userGuideUrl) &&
                Objects.equal(targetReport, that.targetReport) &&
                Objects.equal(studentFields, that.studentFields);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(analyticsTrackingId, interpretiveGuideUrl, accessDeniedUrl, landingPageUrl, irisVendorId, minItemDataYear, percentileDisplayEnabled, reportLanguages, schoolYear, state, transferAccessEnabled, translationLocation, uiLanguages, userGuideUrl, targetReport, studentFields);
    }
}
