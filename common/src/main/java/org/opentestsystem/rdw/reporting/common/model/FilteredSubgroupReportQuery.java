package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableMap;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

/**
 * This class represents an aggregate report query specifying the break-downs
 * for the report as named filter sets.
 */
public class FilteredSubgroupReportQuery extends AbstractAggregateReportQuery {
    private ImmutableMap<String, StudentFilters> subgroups;

    @Override
    public AggregateQueryType getQueryType() {
        return AggregateQueryType.FilteredSubgroup;
    }

    public Map<String, StudentFilters> getSubgroups() {
        return subgroups == null ? ImmutableMap.of() : subgroups;
    }

    public Builder copy() {
        return new Builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AbstractAggregateReportQuery.Builder<Builder, FilteredSubgroupReportQuery> {
        private Map<String, StudentFilters> subgroups;

        @Override
        public FilteredSubgroupReportQuery build() {
            final FilteredSubgroupReportQuery query = super.build();
            query.subgroups = subgroups == null ? null : ImmutableMap.copyOf(subgroups);
            return query;
        }

        @Override
        public Builder copy(final FilteredSubgroupReportQuery query) {
            super.copy(query);
            this.subgroups = newHashMap(query.getSubgroups());
            return this;
        }

        @Override
        protected FilteredSubgroupReportQuery createInstance() {
            return new FilteredSubgroupReportQuery();
        }

        public Builder subgroups(final Map<String, StudentFilters> subgroups) {
            this.subgroups = subgroups;
            return this;
        }

        public Builder subgroup(final String label, final StudentFilters filters) {
            if (this.subgroups == null) {
                this.subgroups = newHashMap();
            }
            this.subgroups.put(label, filters);
            return this;
        }
    }
}
