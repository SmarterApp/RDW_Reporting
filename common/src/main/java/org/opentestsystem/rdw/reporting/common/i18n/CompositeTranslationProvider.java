package org.opentestsystem.rdw.reporting.common.i18n;

import com.google.common.collect.ImmutableMap;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;

/**
 * This translation provider delegates to a collection of translation providers, overriding
 * values in the order that the providers and given.
 * (e.g. the last provider in the list wins for a given translation key)
 */
public class CompositeTranslationProvider implements TranslationProvider {

    private final List<TranslationProvider> defaultProviders;
    private final List<TranslationProvider> overrideProviders;

    public CompositeTranslationProvider(final List<TranslationProvider> defaultProviders,
                                        final List<TranslationProvider> overrideProviders) {
        this.defaultProviders = defaultProviders;
        this.overrideProviders = overrideProviders;
    }

    @Override
    @TenantCacheable(value = "translations")
    public Map<String, String> getTranslationsByCode(final Locale locale) {
        final Map<String, String> translations = new HashMap<>();
        for (final TranslationProvider provider : defaultProviders) {
            translations.putAll(provider.getTranslationsByCode(locale));
        }
        for (final TranslationProvider provider : overrideProviders) {
            translations.putAll(provider.getTranslationsByCode(locale));
        }
        return ImmutableMap.copyOf(translations);
    }

    @TenantCacheable(value = "defaultTranslations")
    public Map<String, String> getTranslationsByCodeDefaultsOnly(final Locale locale) {
        final Map<String, String> translations = new HashMap<>();
        for (final TranslationProvider provider : defaultProviders) {
            translations.putAll(provider.getTranslationsByCode(locale));
        }
        return ImmutableMap.copyOf(translations);
    }
}
