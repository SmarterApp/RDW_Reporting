package org.opentestsystem.rdw.reporting.common.multitenant;

import org.springframework.security.core.context.SecurityContextHolder;

import java.util.Optional;
import java.util.stream.Stream;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.reporting.common.security.Users;

/**
 * Static utility methods to resolve the current tenant id
 */
public class StaticTenantIdUtil {
    
    /**
     * First checks {@code Users.getCurrentUser()} then falls back to
     * {@code SecurityContextHolder.getContext()}
     *
     * @return tenantId Option
     */
    public static Optional<String> tenantId() {
        return Stream.of(tenantIdFromSecurityContext(), tenantIdFromTenantContext())
                .filter(Optional::isPresent)
                .map(Optional::get)
                .findFirst();
    }

    private static Optional<String> tenantIdFromSecurityContext() {
        //if there is no context then it empty
        if (SecurityContextHolder.getContext().getAuthentication() != null) {
            //during login process the stored principle is not a User, and this error is thrown
            //for tenant purposes that is an empty tenantId
            try {
                return Optional.ofNullable(Users.getCurrentUser().getTenantId());
            } catch (ClassCastException ex) {
                return Optional.empty();
            }
        }
        return Optional.empty();
    }

    private static Optional<String> tenantIdFromTenantContext() {
        return Optional.ofNullable(TenantContextHolder.getTenantId());
    }
}
