package org.opentestsystem.rdw.reporting.common.repository;


import org.opentestsystem.rdw.multitenant.DataSourceUrlPartsProperties;
import org.opentestsystem.rdw.multitenant.TenantDataSourceOverrideResolver;
import org.opentestsystem.rdw.multitenant.TenantDatasourceOverride;
import org.opentestsystem.rdw.multitenant.TenantDynamicRoutingDataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.sql.DataSource;

/**
 * Configuration for the common data mart data source.
 */
@Configuration
public class DataSourceConfiguration {

    /**
     * DataSourceProperties
     *
     * @return DataSourceProperties
     */
    @Primary
    @Bean(name = "dataSourceProperties")
    @ConfigurationProperties("spring.datasource")
    public DataSourceProperties dataSourceProperties() {
        return new DataSourceProperties();
    }

    /**
     * DataSourceUrlPartsProperties
     *
     * @return DataSourceUrlPartsProperties
     */
    @Bean(name = "dataSourceUrlPartsProperties")
    @ConfigurationProperties("spring.datasource.url-parts")
    public DataSourceUrlPartsProperties dataSourceUrlPartsProperties() {
        return new DataSourceUrlPartsProperties();
    }

    /**
     * TenantDataSourceOverrideResolver
     *
     * @param dataSourceProperties         DataSourceProperties
     * @param dataSourceUrlPartsProperties DataSourceUrlPartsProperties
     * @return TenantDataSourceOverrideResolver
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "tenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver(
            @Qualifier("dataSourceProperties") DataSourceProperties dataSourceProperties,
            @Qualifier("dataSourceUrlPartsProperties") DataSourceUrlPartsProperties dataSourceUrlPartsProperties) {
        return createTenantDataSourceOverrideResolver(dataSourceProperties, dataSourceUrlPartsProperties);
    }

    /**
     * data mart DataSource
     *
     * @param dataSourceProperties             reporting DataSourceProperties
     * @param tenantDataSourceOverrideResolver reporting TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Primary
    @Bean(name = "dataSource")
    public DataSource dataSource(@Qualifier("dataSourceProperties") DataSourceProperties dataSourceProperties,
                                 @Qualifier("tenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceProperties, tenantDataSourceOverrideResolver);
    }

    /**
     * @param dataSource the data mart data source
     * @return the jdbc template used to read from the data mart
     */
    @Primary
    @Bean
    public NamedParameterJdbcTemplate namedParameterJdbcTemplate(final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    private TenantDataSourceOverrideResolver createTenantDataSourceOverrideResolver(
            DataSourceProperties dataSourceProperties,
            DataSourceUrlPartsProperties dataSourceUrlPartsProperties) {
        return tenantId -> {
            //This a temporary implementation
            //shortly we will use permanent storage or configuration
            //to determine the overrides, for now simply re-use the
            //default configuration regardless of tenant
            final String url = String.format("%s//%s/%s?%s",
                    dataSourceUrlPartsProperties.getProtocol(),
                    dataSourceUrlPartsProperties.getHosts(),
                    dataSourceUrlPartsProperties.getDatabase(),
                    dataSourceUrlPartsProperties.getProperties());
            final String username = dataSourceProperties.getUsername();
            final String password = dataSourceProperties.getPassword();
            return new TenantDatasourceOverride(username, password, url);
        };
    }
}