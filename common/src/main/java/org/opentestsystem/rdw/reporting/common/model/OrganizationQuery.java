package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableSet;

import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * This model represents a query for organizations.
 */
public class OrganizationQuery {

    private int limit = 1000;
    private Set<OrganizationType> types;
    private String name;
    private Set<Long> ids;

    /**
     * @return The maximum number of results to return
     */
    public int getLimit() {
        return limit;
    }

    /**
     * @return The allowed organization types
     */
    public Set<OrganizationType> getTypes() {
        return types;
    }

    /**
     * @return The organization name query
     */
    public String getName() {
        return name;
    }

    /**
     * @return The organization ids (only useful if a single type is selected)
     */
    public Set<Long> getIds() {
        return ids;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private int limit = 1000;
        private final Set<OrganizationType> types = newHashSet();
        private String name;
        private final Set<Long> ids = newHashSet();

        public OrganizationQuery build() {
            final OrganizationQuery query = new OrganizationQuery();
            query.limit = limit;
            query.types = ImmutableSet.copyOf(types);
            query.name = name;
            query.ids = ImmutableSet.copyOf(ids);
            return query;
        }

        public Builder copy(final OrganizationQuery query) {
            limit(query.getLimit());
            types(query.getTypes());
            name(query.getName());
            return this;
        }

        public Builder limit(final int limit) {
            this.limit = limit;
            return this;
        }

        public Builder types(final Set<OrganizationType> types) {
            this.types.clear();
            if (types != null) {
                this.types.addAll(types);
            }
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder ids(final Set<Long> ids) {
            this.ids.clear();
            if (ids != null) {
                this.ids.addAll(ids);
            }
            return this;
        }
    }
}
