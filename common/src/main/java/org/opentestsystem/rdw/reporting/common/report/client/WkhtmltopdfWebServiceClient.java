package org.opentestsystem.rdw.reporting.common.report.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.io.IOUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpResponse;

import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * This class acts as an interface to the openlabs wkhtmltopdf web service
 */
public class WkhtmltopdfWebServiceClient {

    /**
     * Fixed headers sent to the wkhtmltopdf web service REST API
     */
    private static final HttpHeaders HEADERS = new HttpHeaders();

    static {
        HEADERS.setContentType(MediaType.APPLICATION_JSON);
    }

    private final ClientHttpRequestFactory requestFactory;
    private final ObjectMapper objectMapper;

    /**
     * wkhtmltopdf web service REST API URL
     */
    private final String url;

    public WkhtmltopdfWebServiceClient(@NotNull final ClientHttpRequestFactory requestFactory,
                                       @NotNull final String endpoint,
                                       @NotNull final ObjectMapper objectMapper) {
        this.requestFactory = checkNotNull(requestFactory);
        this.url = checkNotNull(endpoint);
        this.objectMapper = checkNotNull(objectMapper);
    }

    /**
     * @return PDF stream from the wkhtmltopdf web service
     */
    public InputStream toPdf(final Request request) throws IOException {
        final ClientHttpRequest req = requestFactory.createRequest(URI.create(url), HttpMethod.POST);
        req.getHeaders().putAll(HEADERS);
        try (final OutputStream reqOutput = req.getBody()) {
            objectMapper.writeValue(reqOutput, request);
        }
        final ClientHttpResponse response = req.execute();
        if (!response.getStatusCode().is2xxSuccessful()) {
            final String responseContent;
            try (final InputStream responseData = response.getBody()) {
                responseContent = IOUtils.toString(responseData);
            }
            throw new RuntimeException("Error generating PDF: " + response.getStatusCode() + ", " + responseContent);
        }
        return response.getBody();
    }

}
