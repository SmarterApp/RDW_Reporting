package org.opentestsystem.rdw.reporting.common.model;

/**
 * Base class for all reports.
 *
 * Only the handling of 'name' is common, the type is provided by concrete classes.
 */
public abstract class AbstractReportQuery implements ReportQuery {
    private String name;

    /**
     * @return query name
     */
    @Override
    public String getName() {
        return name;
    }

    @SuppressWarnings({"unchecked"})
    public static abstract class Builder<A extends AbstractReportQuery, B extends Builder<A, B>> {
        private String name;

        public B name(final String name) {
            this.name = name;
            return (B) this;
        }

        /**
         * Derived classes should override this method and get values they care about.
         * Always call super.copy(value) before getting values.
         *
         * @param reportQuery report query to copy
         * @return this builder
         */
        protected B copy(final AbstractReportQuery reportQuery) {
            return name(reportQuery.name);
        }

        /**
         * Derviced classes should override this method and set values they care about.
         * Always call super.build(value).
         *
         * @param reportQuery report query to populate
         * @return the report query
         */
        protected AbstractReportQuery build(final AbstractReportQuery reportQuery) {
            reportQuery.name = name;
            return reportQuery;
        }

        public abstract A build();
    }
}
