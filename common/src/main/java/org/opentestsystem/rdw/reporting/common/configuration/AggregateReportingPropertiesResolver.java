package org.opentestsystem.rdw.reporting.common.configuration;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;

public class AggregateReportingPropertiesResolver implements AggregateReportingProperties {

    private static final Logger logger = LoggerFactory.getLogger(AggregateReportingPropertiesResolver.class);
    private final TenantKeyResolver tenantKeyResolver;
    private final AggregateReportingPropertiesRoot propertiesRoot;

    public AggregateReportingPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                AggregateReportingPropertiesRoot propertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.propertiesRoot = propertiesRoot;
        logger.debug("AggregateReportingPropertiesRoot: {}", propertiesRoot);
    }

    private Optional<AggregateReportingPropertiesTenant> getAggregateReportingPropertiesTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(propertiesRoot.getTenants().get(k)));
    }

    @Override
    public List<String> getAssessmentTypes() {
        return getAggregateReportingPropertiesTenant()
                .map(AggregateReportingPropertiesTenant::getAssessmentTypes)
                .orElse(propertiesRoot.getAssessmentTypes());
    }

    @Override
    public List<String> getStatewideUserAssessmentTypes() {
        return getAggregateReportingPropertiesTenant()
                .map(AggregateReportingPropertiesTenant::getStatewideUserAssessmentTypes)
                .orElse(propertiesRoot.getStatewideUserAssessmentTypes());
    }

    @Override
    public List<String> getStateAggregateAssessmentTypes() {
        return getAggregateReportingPropertiesTenant()
                .map(AggregateReportingPropertiesTenant::getStateAggregateAssessmentTypes)
                .orElse(propertiesRoot.getStateAggregateAssessmentTypes());
    }
}

