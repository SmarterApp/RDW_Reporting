package org.opentestsystem.rdw.reporting.common.report.iab;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;
import com.google.common.collect.MultimapBuilder;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollments;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.SQLException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import static java.util.Comparator.comparing;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getExamFilterParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcIabReportRepository implements IabReportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findAllIabsByStudentIdAndSchoolYear}")
    private String findAllIabsByStudentIdAndSchoolYear;

    @Value("${sql.exam.findAllIabsByStudentIdsAndFilter}")
    private String findAllIabsByStudentIdsAndFilter;

    @Value("${app.state.code}")
    private String stateCode;

    @Autowired
    JdbcIabReportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public IabReport findOneByStudentIdAndSchoolYear(
            @NotNull final PermissionScope permissionScope,
            final long studentId,
            final int schoolYear,
            final int subjectId) {

        final IabReport.Builder reportBuilder = IabReport.builder();

        final Multimap<Assessment, Exam> assessments = MultimapBuilder
                .treeKeys(comparing(Assessment::getName))
                .arrayListValues()
                .build();

        template.query(
                findAllIabsByStudentIdAndSchoolYear,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .put("school_year", schoolYear)
                        .put("subject_id", subjectId)
                        .build(),
                (row) -> {

                    // This builder depends on the exams being sorted in order of latest to oldest completion date
                    // Only in this sort order will the first row contain the most recent student enrollment information
                    // Only in this sort order will the exams associated with assessments be sorted correctly when inserting into the multimap

                    if (row.isFirst()) {
                        reportBuilder
                                .student(Students.map(row, Student.builder(), "student_").build())
                                .studentEnrollment(StudentEnrollments.map(row, stateCode));
                    }
                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_")
                            .cutPoints(ImmutableList.of(
                                    row.getInt("asmt_min_score"),
                                    row.getInt("asmt_cut_point_1"),
                                    row.getInt("asmt_cut_point_2"),
                                    row.getInt("asmt_cut_point_3"),
                                    row.getInt("asmt_max_score")
                            ))
                            .build();
                    final Exam exam = Exams.map(row, Exam.builder()).build();
                    assessments.put(assessment, exam);
                }
        );

        return assessments.isEmpty()
                ? null
                : reportBuilder.examsByAssessment(assessments.asMap()).build();
    }

    @Override
    public Map<Long, Map<Subject, IabReport>> findAllForStudentsByExamFilter(
            @NotNull final PermissionScope permissionScope,
            final Collection<Long> studentIds,
            final ExamQueryParams examQueryParams) {

        final Map<Long, Map<Subject, IabReport.Builder>> studentReportBuilders = new HashMap<>();
        final Map<Long, Map<Subject, Multimap<Assessment, Exam>>> studentReportAssessments = new HashMap<>();

        template.query(
                findAllIabsByStudentIdsAndFilter,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(permissionScope))
                        .addValues(getExamFilterParameters(examQueryParams))
                        .addValue("student_ids", studentIds),
                (row) -> {
                    // This builder depends on the exams being sorted in order of latest to oldest completion date
                    // Only in this sort order will the first row contain the most recent student enrollment information
                    // Only in this sort order will the exams associated with assessments be sorted correctly when inserting into the multimap

                    final long studentId = row.getLong("student_id");
                    final Subject subject = Subject.valueOf(row.getInt("asmt_subject_id"));

                    studentReportBuilders
                            .computeIfAbsent(studentId, (id) -> new HashMap<>())
                            .computeIfAbsent(subject, (sub) -> {
                                try {
                                    return IabReport.builder()
                                            .student(Students.map(row, Student.builder(), "student_").build())
                                            .studentEnrollment(StudentEnrollments.map(row, stateCode));
                                } catch (final SQLException e) {
                                    throw new RuntimeException(e);
                                }
                            });

                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_").build();
                    final Exam exam = Exams.map(row, Exam.builder()).build();
                    studentReportAssessments
                            .computeIfAbsent(studentId, (id) -> new HashMap<>())
                            .computeIfAbsent(subject, (subj) -> MultimapBuilder
                                    .treeKeys(comparing(Assessment::getName))
                                    .arrayListValues()
                                    .build())
                            .put(assessment, exam);
                }
        );

        // Collate the assessments/exams into reports
        final Map<Long, Map<Subject, IabReport>> reportsByStudent = new HashMap<>();

        studentReportBuilders.entrySet().forEach((studentEntry) -> {
            final long studentId = studentEntry.getKey();

            studentEntry.getValue().entrySet().forEach((subjectEntry) -> {
                final Subject subject = subjectEntry.getKey();
                final IabReport.Builder builder = subjectEntry.getValue();

                final Multimap<Assessment, Exam> assessmentsBySubject = studentReportAssessments
                        .getOrDefault(studentId, new HashMap<>())
                        .getOrDefault(subject, ImmutableMultimap.of());

                if (assessmentsBySubject.isEmpty()) return;

                reportsByStudent
                        .computeIfAbsent(studentId, (id) -> new HashMap<>())
                        .put(subject, builder.examsByAssessment(assessmentsBySubject.asMap()).build());
            });
        });

        return reportsByStudent;
    }

}
