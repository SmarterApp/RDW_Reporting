package org.opentestsystem.rdw.reporting.common.report.iab;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
import com.google.common.collect.MultimapBuilder;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollments;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Set;

import static java.util.Comparator.comparing;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;

@Repository
class JdbcIabReportRepository implements IabReportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findAllIabsByStudentIdAndSchoolYear}")
    private String findAllIabsByStudentIdAndSchoolYearQuery;

    @Value("${app.state.code}")
    private String stateCode;

    @Autowired
    JdbcIabReportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public IabReport findOneByStudentIdAndSchoolYear(
            @NotNull final Map<String, Permission> permissions,
            Set<Long> groupIds,
            final long studentId,
            final int schoolYear,
            final int subjectId) {

        final IabReport.Builder reportBuilder = IabReport.builder();

        final Multimap<Assessment, Exam> assessments = MultimapBuilder
                .treeKeys(comparing(Assessment::getName))
                .arrayListValues()
                .build();

        template.query(
                findAllIabsByStudentIdAndSchoolYearQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissions))
                        .put("group_ids", nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS))
                        .put("student_id", studentId)
                        .put("school_year", schoolYear)
                        .put("subject_id", subjectId)
                        .build(),
                (row) -> {

                    // This builder depends on the exams being sorted in order of latest to oldest completion date
                    // Only in this sort order will the first row contain the most recent student enrollment information
                    // Only in this sort order will the exams associated with assessments be sorted correctly when inserting into the multimap

                    if (row.isFirst()) {
                        reportBuilder
                                .student(Students.map(row, Student.builder(), "student_").build())
                                .studentEnrollment(StudentEnrollments.map(row, stateCode));
                    }
                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_")
                            .cutPoints(ImmutableList.of(
                                    row.getInt("asmt_min_score"),
                                    row.getInt("asmt_cut_point_1"),
                                    row.getInt("asmt_cut_point_2"),
                                    row.getInt("asmt_cut_point_3"),
                                    row.getInt("asmt_max_score")
                            ))
                            .build();
                    final Exam exam = Exams.map(row, Exam.builder()).build();
                    assessments.put(assessment, exam);
                }
        );

        return assessments.isEmpty()
                ? null
                : reportBuilder.examsByAssessment(assessments.asMap()).build();
    }

}
