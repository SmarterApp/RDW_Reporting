package org.opentestsystem.rdw.reporting.common.model.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ImmutableMap;

import java.io.IOException;
import java.util.Map;
import org.opentestsystem.rdw.reporting.common.model.AbstractReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DistrictSchoolExportReportQuery;
import org.opentestsystem.rdw.reporting.common.model.GroupPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.PrintableReportOrder;
import org.opentestsystem.rdw.reporting.common.model.ReportQueryType;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetReportQuery;

/**
 * Adds support for the previous version of the report queries
 */
public class ReportQueryDeserializer extends StdDeserializer<AbstractReportQuery> {

    private static final Map<ReportQueryType, Class> QueryClassByType = ImmutableMap.<ReportQueryType, Class>builder()
            .put(ReportQueryType.Student, StudentPrintableReportQuery.class)
            .put(ReportQueryType.Group, GroupPrintableReportQuery.class)
            .put(ReportQueryType.SchoolGrade, SchoolGradePrintableReportQuery.class)
            .put(ReportQueryType.DistrictSchoolExport, DistrictSchoolExportReportQuery.class)
            .put(ReportQueryType.CustomAggregate, CustomAggregateReportQuery.class)
            .put(ReportQueryType.Longitudinal, LongitudinalReportQuery.class)
            .put(ReportQueryType.Claim, ClaimAggregateReportQuery.class)
            .put(ReportQueryType.Target, TargetReportQuery.class)
            .build();

    ReportQueryDeserializer() {
        super(AbstractReportQuery.class);
    }

    @Override
    public AbstractReportQuery deserialize(final JsonParser parser, final DeserializationContext context) throws IOException {
        final ObjectMapper mapper = (ObjectMapper) parser.getCodec();
        final ObjectNode node = mapper.readTree(parser);

        final ObjectNode normalized = normalize(node);
        final Class<AbstractReportQuery> definition = getClassDefinition(normalized);

        return mapper.readValue(normalized.toString(), definition);
    }

    private ObjectNode normalize(final ObjectNode node) {
        // This is a version 1.3 report "request"
        if (node.has("reportType")) {
            return update(node);
        }
        return node;
    }

    private Class<AbstractReportQuery> getClassDefinition(final ObjectNode node) {
        final ReportQueryType type = ReportQueryType.valueOf(node.get("type").asText());
        return (Class<AbstractReportQuery>) QueryClassByType.get(type);
    }

    private ObjectNode update(final ObjectNode node) {

        final String name = node.get("name").asText();
        final String type = node.remove("reportType").asText();

        // this is an aggregate query
        if (node.has("query")) {
            final ObjectNode queryNode = (ObjectNode) node.remove("query");

            final String aggregateType = queryNode.remove("reportType").asText();

            if (aggregateType.equals(ReportQueryType.Target.name())) {
                // target-specific schoolYear was replaced with single-value schoolYears from base class
                if (queryNode.has("schoolYear")) {
                    final int schoolYear = queryNode.remove("schoolYear").asInt();
                    queryNode.putArray("schoolYears").add(schoolYear);
                }
            }

            queryNode.remove("filteredSubgroupQuery");
            queryNode.put("type", aggregateType);
            queryNode.put("name", name);
            return queryNode;
        }

        // This is a district / school export
        if ("ExamExport".equals(type)) {
            // District/School export reports no longer have these unused properties
            node.remove("accommodationsVisible");
            node.remove("assessmentTypeCode");
            node.remove("language");
            node.remove("subjectCode");
            node.put("type", ReportQueryType.DistrictSchoolExport.name());
            return node;
        }

        // This is a batch printable report
        if (node.has("order")) {
            final String oldOrder = node.remove("order").asText();
            final PrintableReportOrder order = "STUDENT_NAME".equals(oldOrder)
                    ? PrintableReportOrder.StudentName
                    : PrintableReportOrder.StudentSSID;
            node.put("order", order.name());
        }

        // This is for all printable reports
        node.put("type", type);
        return node;

    }

}
