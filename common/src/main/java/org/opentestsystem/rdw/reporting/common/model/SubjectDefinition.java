package org.opentestsystem.rdw.reporting.common.model;

import java.util.List;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.immutableOf;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * This model represents a subject's properties within the scope of an Assessment Type.
 */
public class SubjectDefinition {
    private String asmtTypeCode;
    private String subjectCode;
    private int performanceLevelCount;
    private Integer performanceLevelStandardCutoff;
    private Integer claimScorePerformanceLevelCount;
    private Integer altScorePerformanceLevelCount;
    private boolean targetReport;
    private boolean printedReport;
    private boolean traitReport;
    // TODO enhance with data_order and display_order data - not just codes in display order
    private List<String> scorableClaims;
    private List<String> altScores;
    // TODO would purpose codes be enough? that's all the UI really needs to show tabs, right?
    private List<Trait> traits;

    public String getAsmtTypeCode() {
        return asmtTypeCode;
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public int getPerformanceLevelCount() {
        return performanceLevelCount;
    }

    public Integer getPerformanceLevelStandardCutoff() {
        return performanceLevelStandardCutoff;
    }

    public Integer getClaimScorePerformanceLevelCount() {
        return claimScorePerformanceLevelCount;
    }

    public Integer getAltScorePerformanceLevelCount() {
        return altScorePerformanceLevelCount;
    }

    public boolean isTargetReport() {
        return targetReport;
    }

    public boolean isPrintedReport() {
        return printedReport;
    }

    public boolean isTraitReport() {
        return traitReport;
    }

    public List<String> getScorableClaims() {
        return scorableClaims;
    }

    public List<String> getAltScores() {
        return altScores;
    }

    public List<Trait> getTraits() { return traits; }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String asmtTypeCode;
        private String subjectCode;
        private int performanceLevelCount;
        private Integer performanceLevelStandardCutoff;
        private Integer claimScorePerformanceLevelCount;
        private Integer altScorePerformanceLevelCount;
        private boolean targetReport;
        private boolean printedReport;
        private boolean traitReport;
        private List<String> scorableClaims;
        private List<String> altScores;
        private List<Trait> traits;

        public SubjectDefinition build() {
            final SubjectDefinition definition = new SubjectDefinition();
            definition.asmtTypeCode = asmtTypeCode;
            definition.subjectCode = subjectCode;
            definition.performanceLevelCount = performanceLevelCount;
            definition.performanceLevelStandardCutoff = performanceLevelStandardCutoff;
            definition.claimScorePerformanceLevelCount = claimScorePerformanceLevelCount;
            definition.altScorePerformanceLevelCount = altScorePerformanceLevelCount;
            definition.targetReport = targetReport;
            definition.printedReport = printedReport;
            definition.traitReport = traitReport;
            definition.scorableClaims = safeImmutableOf(scorableClaims); // why safeImmutableOf vs. immutableOf?
            definition.altScores = safeImmutableOf(altScores);           // why safeImmutableOf vs. immutableOf?
            definition.traits = immutableOf(traits);
            return definition;
        }

        public Builder copy(final SubjectDefinition definition) {
            asmtTypeCode = definition.asmtTypeCode;
            subjectCode = definition.subjectCode;
            performanceLevelCount = definition.performanceLevelCount;
            performanceLevelStandardCutoff = definition.performanceLevelStandardCutoff;
            claimScorePerformanceLevelCount = definition.claimScorePerformanceLevelCount;
            altScorePerformanceLevelCount = definition.altScorePerformanceLevelCount;
            targetReport = definition.targetReport;
            printedReport = definition.printedReport;
            traitReport = definition.traitReport;
            scorableClaims = definition.scorableClaims;
            altScores = definition.altScores;
            traits = definition.traits;
            return this;
        }

        public Builder asmtTypeCode(final String asmtTypeCode) {
            this.asmtTypeCode = asmtTypeCode;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder performanceLevelCount(final int performanceLevelCount) {
            this.performanceLevelCount = performanceLevelCount;
            return this;
        }

        public Builder performanceLevelStandardCutoff(final Integer performanceLevelStandardCutoff) {
            this.performanceLevelStandardCutoff = performanceLevelStandardCutoff;
            return this;
        }

        public Builder claimScorePerformanceLevelCount(final Integer claimScorePerformanceLevelCount) {
            this.claimScorePerformanceLevelCount = claimScorePerformanceLevelCount;
            return this;
        }

        public Builder altScorePerformanceLevelCount(final Integer altScorePerformanceLevelCount) {
            this.altScorePerformanceLevelCount = altScorePerformanceLevelCount;
            return this;
        }

        public Builder targetReport(final boolean targetReport) {
            this.targetReport = targetReport;
            return this;
        }

        public Builder printedReport(final boolean printedReport) {
            this.printedReport = printedReport;
            return this;
        }

        public Builder traitReport(final boolean traitReport) {
            this.traitReport = traitReport;
            return this;
        }

        public Builder scorableClaims(final List<String> scorableClaims) {
            this.scorableClaims = scorableClaims;
            return this;
        }

        public Builder altScores(final List<String> altScores) {
            this.altScores = altScores;
            return this;
        }

        public Builder traits(final List<Trait> traits) {
            this.traits = traits;
            return this;
        }
    }
}
