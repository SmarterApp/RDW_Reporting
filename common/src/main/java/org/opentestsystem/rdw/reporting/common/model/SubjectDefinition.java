package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableList;

import java.util.List;

/**
 * This model represents a subject's properties within the scope of an Assessment Type.
 */
public class SubjectDefinition {
    private String asmtTypeCode;
    private String subjectCode;
    private int performanceLevelCount;
    private Integer performanceLevelStandardCutoff;
    private Integer claimScorePerformanceLevelCount;
    private boolean targetReport;
    private List<String> scorableClaims;

    public String getAsmtTypeCode() {
        return asmtTypeCode;
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public int getPerformanceLevelCount() {
        return performanceLevelCount;
    }

    public Integer getPerformanceLevelStandardCutoff() {
        return performanceLevelStandardCutoff;
    }

    public Integer getClaimScorePerformanceLevelCount() {
        return claimScorePerformanceLevelCount;
    }

    public boolean isTargetReport() {
        return targetReport;
    }

    public List<String> getScorableClaims() {
        return scorableClaims == null ? ImmutableList.of() : scorableClaims;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String asmtTypeCode;
        private String subjectCode;
        private int performanceLevelCount;
        private Integer performanceLevelStandardCutoff;
        private Integer claimScorePerformanceLevelCount;
        private boolean targetReport;
        private List<String> scorableClaims;

        public SubjectDefinition build() {
            final SubjectDefinition definition = new SubjectDefinition();
            definition.asmtTypeCode = asmtTypeCode;
            definition.subjectCode = subjectCode;
            definition.performanceLevelCount = performanceLevelCount;
            definition.performanceLevelStandardCutoff = performanceLevelStandardCutoff;
            definition.claimScorePerformanceLevelCount = claimScorePerformanceLevelCount;
            definition.targetReport = targetReport;
            definition.scorableClaims = scorableClaims;
            return definition;
        }

        public Builder copy(final SubjectDefinition definition) {
            asmtTypeCode = definition.asmtTypeCode;
            subjectCode = definition.subjectCode;
            performanceLevelCount = definition.performanceLevelCount;
            performanceLevelStandardCutoff = definition.performanceLevelStandardCutoff;
            claimScorePerformanceLevelCount = definition.claimScorePerformanceLevelCount;
            targetReport = definition.targetReport;
            scorableClaims = definition.scorableClaims;
            return this;
        }

        public Builder asmtTypeCode(final String asmtTypeCode) {
            this.asmtTypeCode = asmtTypeCode;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder performanceLevelCount(final int performanceLevelCount) {
            this.performanceLevelCount = performanceLevelCount;
            return this;
        }

        public Builder performanceLevelStandardCutoff(final Integer performanceLevelStandardCutoff) {
            this.performanceLevelStandardCutoff = performanceLevelStandardCutoff;
            return this;
        }

        public Builder claimScorePerformanceLevelCount(final Integer claimScorePerformanceLevelCount) {
            this.claimScorePerformanceLevelCount = claimScorePerformanceLevelCount;
            return this;
        }

        public Builder targetReport(final boolean targetReport) {
            this.targetReport = targetReport;
            return this;
        }

        public Builder scorableClaims(final List<String> scorableClaims) {
            this.scorableClaims = scorableClaims;
            return this;
        }
    }
}
