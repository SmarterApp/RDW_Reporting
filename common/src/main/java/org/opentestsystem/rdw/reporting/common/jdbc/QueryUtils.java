package org.opentestsystem.rdw.reporting.common.jdbc;

import com.google.common.base.Splitter;
import com.google.common.collect.ImmutableList;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Holds common methods for preparing SQL queries and parsing their results
 */
public class QueryUtils {

    public static final List<Long> UNMATCHABLE_IDS = ImmutableList.of(-1L);

    private QueryUtils() {
    }

    /**
     * Returns the given collection or the given default collection if the collection is null or empty
     *
     * @param collection   the collection to test null and empty for
     * @param defaultValue the collection to return if the given collection is null or empty
     * @param <T>          the collection element type
     * @return the given collection or the given default collection if the collection is null or empty
     */
    public static <T> Collection<T> nullOrEmptyToDefault(final Collection<T> collection, final Collection<T> defaultValue) {
        if (collection == null || collection.isEmpty()) {
            return defaultValue;
        }
        return collection;
    }

    /**
     * Returns the given value or null if the last column lookup resulted in a null value.
     * This is a workaround for two things: typecasting the return value of {@link ResultSet#getObject(String)} for getNullable columns
     * <ol>
     * <li>{@link ResultSet#getLong(String)} and other primitive type lookups will turn null into the default values
     * (e.g. null boolean will be false, null long will be 0)</li>
     * <li>Type casting the result of {@link ResultSet#getLong(String)} can result in type cast exceptions if the
     * database driver returns an Integer and you cast to Long.</li>
     * </ol>
     *
     * @param resultSet the row of data which will be checked for null
     * @param value     the result of the row lookup (e.g. resultSet.getLong("column_name"))
     * @param <T>       the type of the provided value
     * @return the value or null if the column lookup was null
     * @throws SQLException if database error or result set closed
     */
    public static <T> T getNullable(final ResultSet resultSet, final T value) throws SQLException {
        return resultSet.wasNull() ? null : value;
    }

    /**
     * Splits the given delimited values string with the given delimiting character.
     * If the given delimited values string is null or empty it will return null
     *
     * @param delimitedValues string of delimited values
     * @param delimiter       string delimiting the values
     * @return the delimited values split or null if the delimited values are null or empty
     */
    public static List<String> safeSplit(final String delimitedValues, final String delimiter) {
        if (isNullOrEmpty(delimitedValues)) {
            return null;
        }
        return ImmutableList.copyOf(Splitter.on(delimiter).split(delimitedValues));
    }

}
