package org.opentestsystem.rdw.reporting.common.model;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.immutableOf;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents a single assessment examination event
 */
public class Exam {

    private long id;
    private String sessionId;
    private Instant dateTime;
    private Integer schoolYear;
    private String gradeCode;
    private Student student;
    private StudentContext studentContext;
    private String administrativeConditionCode;
    private String completenessCode;
    private ScaleScore scaleScore;
    private List<ScaleScore> claimScaleScores;
    private List<ScaleScore> altScaleScores;
    private List<String> accommodationCodes;
    private School school;
    private boolean transfer;
    private List<TraitScore> traitScores;

    protected Exam() {
    }

    /**
     * @return the exam entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the exam session ID (may be null)
     */
    public String getSessionId() {
        return sessionId;
    }

    /**
     * @return the datetime of exam completion
     */
    public Instant getDateTime() {
        return dateTime;
    }

    /**
     * @return the school year in which the exam was taken
     */
    public Integer getSchoolYear() {
        return schoolYear;
    }

    /**
     * @return the grade code of the student at the time of the exam
     */
    public String getGradeCode() {
        return gradeCode;
    }

    /**
     * @return the student who took the exam
     */
    public Student getStudent() {
        return student;
    }

    /**
     * @return contextual information surrounding the student and the circumstances under which the student took the exam
     */
    public StudentContext getStudentContext() {
        return studentContext;
    }

    /**
     * @return the overall exam score
     */
    public ScaleScore getScaleScore() {
        return scaleScore;
    }

    /**
     * @return the completeness of the exam
     */
    public String getCompletenessCode() {
        return completenessCode;
    }

    /**
     * @return the condition in which the exam was administered
     */
    public String getAdministrativeConditionCode() {
        return administrativeConditionCode;
    }

    /**
     * Only ICA and Summative exams have claims and therefore claim scores.
     * This collection will be null for IABs.
     *
     * @return the scale scores for each claim on the exam
     */
    public List<ScaleScore> getClaimScaleScores() {
        return claimScaleScores;
    }

    /**
     * Only ICA and Summative exams may have alt scores.
     * This collection will be null for ICAs and Summatives that don't have alt scores.
     * This collection will always be null for IABs.
     *
     * @return the scale scores for each alt-score on the exam
     */
    public List<ScaleScore> getAltScaleScores() {
        return altScaleScores;
    }

    /**
     * @return the codes for the accommodations made available for the student during the examination
     */
    public List<String> getAccommodationCodes() {
        return accommodationCodes;
    }

    /**
     * @return The school this exam was taken at
     */
    public School getSchool() {
        return school;
    }

    /**
     * @return True if this exam is only available from transfer access
     */
    public boolean isTransfer() {
        return transfer;
    }

    /**
     * Return the exam trait scores. Not quite that simple ...
     * <p>
     * Only some subject/assessments have trait scores. For legacy SmarterBalanced
     * systems, only ELA tests have (writing) trait scores. However, this feature
     * was added so subjects may introduce additional trait scores.
     * </p>
     * <p>
     * For summative assessments these are provided as exam level attributes
     * (since summatives typically don't have item level detail). For interims
     * (ICA, IAB) the trait scores are provided as item level attributes, and
     * they are rolled up here for convenience for the ISR template.
     * </p>
     *
     * @return trait scores for the exam; null if there are none
     */
    public List<TraitScore> getTraitScores() {
        return traitScores;
    }

    public static Builder builder() {
        return new Builder();
    }

    @SuppressWarnings("unchecked")
    public static class Builder<E extends Exam, B extends Exam.Builder<E, B>> {

        private long id;
        private String sessionId;
        private Instant dateTime;
        private Integer schoolYear;
        private String gradeCode;
        private Student student;
        private StudentContext studentContext;
        private ScaleScore scaleScore;
        private String completenessCode;
        private String administrativeConditionCode;
        private List<ScaleScore> claimScaleScores;
        private List<ScaleScore> altScaleScores;
        private List<String> accommodationCodes;
        private School school;
        private boolean transfer;
        private List<TraitScore> traitScores;

        protected E createElement() {
            return (E) new Exam();
        }

        /**
         * A builder typically doesn't have getters (nor should it!)
         * Providing access to the id is convenient for complex, multi-step usage.
         *
         * @return id value
         */
        public long getId() {
            return this.id;
        }

        public B id(final long id) {
            this.id = id;
            return (B) this;
        }

        public B sessionId(final String sessionId) {
            this.sessionId = sessionId;
            return (B) this;
        }

        public B dateTime(final Instant dateTime) {
            this.dateTime = dateTime;
            return (B) this;
        }

        public B schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return (B) this;
        }

        public B gradeCode(final String gradeCode) {
            this.gradeCode = gradeCode;
            return (B) this;
        }

        public B student(final Student student) {
            this.student = student;
            return (B) this;
        }

        public B studentContext(final StudentContext studentContext) {
            this.studentContext = studentContext;
            return (B) this;
        }

        public B scaleScore(final ScaleScore scaleScore) {
            this.scaleScore = scaleScore;
            return (B) this;
        }

        public B completenessCode(final String completenessCode) {
            this.completenessCode = completenessCode;
            return (B) this;
        }

        public B administrativeConditionCode(final String administrativeConditionCode) {
            this.administrativeConditionCode = administrativeConditionCode;
            return (B) this;
        }

        public B claimScaleScores(final List<ScaleScore> claimScaleScores) {
            this.claimScaleScores = claimScaleScores;
            return (B) this;
        }

        public B altScaleScores(final List<ScaleScore> altScaleScores) {
            this.altScaleScores = altScaleScores;
            return (B) this;
        }

        public B accommodationCodes(final List<String> accommodationCodes) {
            this.accommodationCodes = accommodationCodes;
            return (B) this;
        }

        public B school(final School school) {
            this.school = school;
            return (B) this;
        }

        public B transfer(final boolean transfer) {
            this.transfer = transfer;
            return (B) this;
        }

        public B traitScores(final List<TraitScore> traitScores) {
            this.traitScores = traitScores;
            return (B) this;
        }

        public B traitScore(final TraitScore traitScore) {
            if (this.traitScores == null) {
                this.traitScores = new ArrayList<>();
            }
            this.traitScores.add(traitScore);
            return (B) this;
        }

        public B copy(final Exam exam) {
            id = exam.id;
            sessionId = exam.sessionId;
            dateTime = exam.dateTime;
            schoolYear = exam.schoolYear;
            gradeCode = exam.gradeCode;
            student = exam.student;
            studentContext = exam.studentContext;
            scaleScore = exam.scaleScore;
            completenessCode = exam.completenessCode;
            administrativeConditionCode = exam.administrativeConditionCode;
            claimScaleScores = exam.claimScaleScores;
            altScaleScores = exam.altScaleScores;
            accommodationCodes = exam.accommodationCodes;
            school = exam.school;
            transfer = exam.transfer;
            traitScores = exam.traitScores;
            return (B) this;
        }

        public E build() {
            final Exam exam = createElement();
            exam.id = id;
            exam.sessionId = sessionId;
            exam.dateTime = dateTime;
            exam.schoolYear = schoolYear;
            exam.gradeCode = gradeCode;
            exam.student = student;
            exam.studentContext = studentContext;
            exam.scaleScore = scaleScore;
            exam.completenessCode = completenessCode;
            exam.administrativeConditionCode = administrativeConditionCode;
            exam.claimScaleScores = claimScaleScores == null ? null : Collections.unmodifiableList(claimScaleScores);
            exam.altScaleScores = altScaleScores == null ? null : Collections.unmodifiableList(altScaleScores);
            exam.accommodationCodes = safeImmutableOf(accommodationCodes);
            exam.school = school;
            exam.transfer = transfer;
            exam.traitScores = immutableOf(traitScores);
            return (E) exam;
        }
    }
}
