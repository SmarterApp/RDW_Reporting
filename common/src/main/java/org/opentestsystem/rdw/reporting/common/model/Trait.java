package org.opentestsystem.rdw.reporting.common.model;

/**
 * Defines a trait.
 * <p>
 * A trait is a special item score for a subject assessment. For example WER,
 * writing traits, for ELA assessments. Traits have a purpose and category.
 * For example, an ELA WER item may have the purpose EXPL (Explanatory) with
 * three categories: EVI (Evidence), ORG (Organization), CON (Convention).
 * Trait scores are typically small integer values, e.g. 1-4, and are combined
 * to produce the final item score.
 * </p>
 */
public class Trait {
    private int id;
    private String purpose;
    private String category;
    private int maxScore;

    /**
     * @return trait id, useful for correlation
     */
    public int getId() {
        return id;
    }

    /**
     * @return purpose code, e.g. EXPL
     */
    public String getPurpose() {
        return purpose;
    }

    /**
     * @return category code, e.g. CON
     */
    public String getCategory() {
        return category;
    }

    /**
     * @return max score, e.g. 4
     */
    public int getMaxScore() {
        return maxScore;
    }

    /**
     * @return new builder
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private int id;
        private String purpose;
        private String category;
        private int maxScore;

        public Trait build() {
            final Trait trait = new Trait();
            trait.id = id;
            trait.purpose = purpose;
            trait.category = category;
            trait.maxScore = maxScore;
            return trait;
        }

        public Builder id(final int id) {
            this.id = id;
            return this;
        }

        public Builder purpose(final String purpose) {
            this.purpose = purpose;
            return this;
        }

        public Builder category(final String category) {
            this.category = category;
            return this;
        }

        public Builder maxScore(final int maxScore) {
            this.maxScore = maxScore;
            return this;
        }
    }
}
