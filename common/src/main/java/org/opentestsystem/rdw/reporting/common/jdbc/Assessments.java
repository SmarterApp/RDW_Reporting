package org.opentestsystem.rdw.reporting.common.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Assessment;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * Holds utility methods for mapping SQL query results to {@link Assessment}
 */
public final class Assessments {

    private static final String[] CLAIM_CODE_COLUMN_NAMES = {
            "claim1_score_code",
            "claim2_score_code",
            "claim3_score_code",
            "claim4_score_code",
            "claim5_score_code",
            "claim6_score_code"
    };

    private static final String[] ALT_SCORE_CODE_COLUMN_NAMES = {
            "alt1_score_code",
            "alt2_score_code",
            "alt3_score_code",
            "alt4_score_code",
            "alt5_score_code",
            "alt6_score_code"
    };

    private Assessments() {
    }

    public static <A extends Assessment.Builder> A map(final ResultSet row, final A builder) throws SQLException {
        return map(row, builder, "");
    }

    public static <A extends Assessment.Builder> A map(final ResultSet row, final A builder, final String prefix) throws SQLException {
        final AssessmentType type = AssessmentType.valueOf(row.getInt(prefix + "type_id"));
        builder.id(row.getInt(prefix + "id"))
                .name(row.getString(prefix + "name"))
                .label(row.getString(prefix + "label"))
                .gradeCode(row.getString(prefix + "grade_code"))
                .type(type)
                .subjectCode(row.getString(prefix + "subject_code"))
                .schoolYear(row.getInt(prefix + "school_year"))
                // note that the prefix isn't used when extracting score codes; it isn't necessary in the SQL
                // don't waste time looking for code for IAB assessments
                .altScoreCodes(type == AssessmentType.IAB ? null : extractCodes(row, ALT_SCORE_CODE_COLUMN_NAMES))
                .claimCodes(type == AssessmentType.IAB ? null : extractCodes(row, CLAIM_CODE_COLUMN_NAMES));
        return builder;
    }

    private static List<String> extractCodes(final ResultSet row, final String... columns) throws SQLException {
        final List<String> codes = newArrayList();
        for (final String column : columns) {
            final String code = row.getString(column);
            if (code == null) {
                break;
            }
            codes.add(code);
        }
        return codes.isEmpty() ? null : codes;
    }

    public static <A extends Assessment.Builder> A mapWithCutPoints(final ResultSet row, final A builder, final String prefix) throws SQLException {
        map(row, builder, prefix)
                .cutPoints(Arrays.asList(
                        row.getInt(prefix + "min_score"),
                        getNullable(row, row.getInt(prefix + "cut_point_1")),
                        getNullable(row, row.getInt(prefix + "cut_point_2")),
                        getNullable(row, row.getInt(prefix + "cut_point_3")),
                        getNullable(row, row.getInt(prefix + "cut_point_4")),
                        getNullable(row, row.getInt(prefix + "cut_point_5")),
                        row.getInt(prefix + "max_score")
                ));

        return builder;
    }
}
