package org.opentestsystem.rdw.reporting.common.jdbc;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * Holds utility methods for mapping SQL query results to {@link Assessment}
 */
public final class Assessments {

    private static final String[] CLAIM_CODE_COLUMN_NAMES = {
            "claim1_score_code",
            "claim2_score_code",
            "claim3_score_code",
            "claim4_score_code",
            "claim5_score_code",
            "claim6_score_code"
    };

    private Assessments() {
    }

    public static <A extends Assessment.Builder> A map(final ResultSet row, final A builder) throws SQLException {
        return map(row, builder, "");
    }

    public static <A extends Assessment.Builder> A map(final ResultSet row, final A builder, final String prefix) throws SQLException {

        final AssessmentType type = AssessmentType.valueOf(row.getInt(prefix + "type_id"));

        builder.id(row.getInt(prefix + "id"))
                .name(row.getString(prefix + "name"))
                .label(row.getString(prefix + "label"))
                .gradeCode(row.getString(prefix + "grade_code"))
                .type(type)
                .subjectCode(row.getString(prefix + "subject_code"))
                .schoolYear(row.getInt(prefix + "school_year"));

        // IABs do not have claims
        if (type != AssessmentType.IAB) {
            final ImmutableList.Builder<String> claimCodes = ImmutableList.builder();
            for (final String claimCodeColumnName : CLAIM_CODE_COLUMN_NAMES) {
                final String claimCode = row.getString(prefix + claimCodeColumnName);
                if (claimCode == null) {
                    break;
                }
                claimCodes.add(claimCode);
            }
            builder.claimCodes(claimCodes.build());
        }

        return builder;
    }

    public static <A extends Assessment.Builder> A mapWithCutPoints(final ResultSet row, final A builder, final String prefix) throws SQLException {
        map(row, builder, prefix)
                .cutPoints(Arrays.asList(
                        row.getInt(prefix + "min_score"),
                        getNullable(row, row.getInt(prefix + "cut_point_1")),
                        getNullable(row, row.getInt(prefix + "cut_point_2")),
                        getNullable(row, row.getInt(prefix + "cut_point_3")),
                        getNullable(row, row.getInt(prefix + "cut_point_4")),
                        getNullable(row, row.getInt(prefix + "cut_point_5")),
                        row.getInt(prefix + "max_score")
                ));

        return builder;
    }
}
