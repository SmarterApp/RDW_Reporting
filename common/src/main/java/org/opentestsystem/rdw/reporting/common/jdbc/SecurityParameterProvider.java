package org.opentestsystem.rdw.reporting.common.jdbc;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

/**
 * This bean is responsible for providing SQL security parameters.
 */
public class SecurityParameterProvider {

    private static final Map<String, String> PERMISSION_PREFIXES = ImmutableMap
            .<String, String>builder()
            .put(GroupPiiRead, "group_")
            .put(IndividualPiiRead, "individual_")
            .build();

    private final TenantProperties tenantProperties;

    public SecurityParameterProvider(final TenantProperties tenantProperties) {
        this.tenantProperties = tenantProperties;
    }

    /**
     * Creates map of SQL query parameters for the given permissions based on the defined permission prefixes
     *
     * @param permissionsById the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given permission scope
     */
    public Map<String, Object> getSecurityParameters(final Map<String, Permission> permissionsById) {
        final ImmutableMap.Builder<String, Object> securityParameters = ImmutableMap.builder();

        PERMISSION_PREFIXES
                .forEach((key, value) -> {
                    final Permission permission = permissionsById.get(key);
                    final PermissionScope scope = permission == null
                            ? PermissionScope.EMPTY
                            : permission.getScope();

                    securityParameters.putAll(getSecurityParameters(scope, value));
                });

        return securityParameters.build();
    }

    /**
     * Creates map of SQL query parameters for the given permission scope
     *
     * @param permissionScope the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given permission scope
     */
    public Map<String, Object> getSecurityParameters(final PermissionScope permissionScope) {
        return getSecurityParameters(permissionScope, "");
    }

    /**
     * Creates map of SQL query parameters for the given permission scope
     *
     * @param permissionScope the security information to prepare the SQL query parameters for
     * @param prefix          parameter prefix to apply for this permissionScope
     * @return map of SQL query parameters for the given permission scope
     */
    public Map<String, Object> getSecurityParameters(final PermissionScope permissionScope, final String prefix) {
        return ImmutableMap.<String, Object>builder()
                .put(prefix + "statewide", permissionScope.isStatewide())
                .put(prefix + "district_group_ids", nullOrEmptyToDefault(permissionScope.getDistrictGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "district_ids", nullOrEmptyToDefault(permissionScope.getDistrictIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_group_ids", nullOrEmptyToDefault(permissionScope.getInstitutionGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_ids", nullOrEmptyToDefault(permissionScope.getInstitutionIds(), UNMATCHABLE_IDS))
                .put(prefix + "allow_transfer_access", tenantProperties.isTransferAccessEnabled())
                .build();
    }
}
