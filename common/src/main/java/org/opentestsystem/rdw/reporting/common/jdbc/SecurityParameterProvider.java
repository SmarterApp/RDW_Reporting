package org.opentestsystem.rdw.reporting.common.jdbc;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.stereotype.Service;

import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.security.PermissionScope.getScopeOrEmpty;

/**
 * This bean is responsible for providing SQL security parameters.
 */
@Service
public class SecurityParameterProvider {

    private static final Map<String, String> PERMISSION_PREFIXES = ImmutableMap
            .<String, String>builder()
            .put(GroupPiiRead, "group_")
            .put(IndividualPiiRead, "individual_")
            .build();

    private final ReportingSystemProperties reportingSystemProperties;

    @Autowired
    public SecurityParameterProvider(@Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties) {
        this.reportingSystemProperties = reportingSystemProperties;
    }

    /**
     * Creates map of SQL query parameters to secure access to exams for the user identified by the given {@link PermissionSource}
     *
     * @param permissionSource the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given permission scope
     */
    public Map<String, Object> getSecurityParameters(final PermissionSource permissionSource) {
        return getSecurityParameters(permissionSource, false);
    }

    /**
     * Creates map of SQL query parameters to secure access to exams for the  user identified by the given {@link PermissionSource}
     *
     * @param permissionSource      the security information to prepare the SQL query parameters for
     * @param disableTransferAccess the flag allowing users to override the system setting for the transfer access
     * @return map of SQL query parameters for the given permission scopeo
     */
    public Map<String, Object> getSecurityParameters(final PermissionSource permissionSource, final boolean disableTransferAccess) {
        final Map<String, Permission> permissionMap = permissionSource.getPermissionsById();
        final PermissionScope embargoScope = getScopeOrEmpty(permissionMap, EmbargoRead);
        return getSecurityParametersBuilder(permissionMap, reportingSystemProperties.isTransferAccessEnabled() && !disableTransferAccess)
                .put("user_login", permissionSource.getUsername())
                .put("state_embargo_admin", embargoScope.isStatewide())
                .put("district_embargo_admin_ids", nullOrEmptyToDefault(embargoScope.getDistrictIds(), UNMATCHABLE_IDS))
                .build();
    }

    /**
     * Creates map of SQL query parameters for the given permission scope.
     * This is used for anything that requires a secure access that is not as restrictive as access to exams.
     * For example: access to a list of schools.
     *
     * @param permissionScope the security information to prepare the SQL query parameters for
     * @return map of SQL query parameters for the given permission scope
     */
    public Map<String, Object> getSecurityParameters(final PermissionScope permissionScope) {
        return getSecurityParameters(permissionScope, "")
                .put("allow_transfer_access", reportingSystemProperties.isTransferAccessEnabled())
                .build();
    }

    private ImmutableMap.Builder<String, Object> getSecurityParametersBuilder(final Map<String, Permission> permissionsById, final boolean allowTransferAccess) {
        final ImmutableMap.Builder<String, Object> securityParameters = ImmutableMap.builder();

        PERMISSION_PREFIXES
                .forEach((key, value) -> {
                    final Permission permission = permissionsById.get(key);
                    final PermissionScope scope = permission == null
                            ? PermissionScope.EMPTY
                            : permission.getScope();

                    securityParameters.putAll(getSecurityParameters(scope, value).build());
                });

        return securityParameters.put("allow_transfer_access", allowTransferAccess);
    }

    /**
     * Creates map of SQL query parameters for the given permission scope
     *
     * @param permissionScope the security information to prepare the SQL query parameters for
     * @param prefix          parameter prefix to apply for this permissionScope
     * @return map of SQL query parameters for the given permission scope
     */
    private ImmutableMap.Builder<String, Object> getSecurityParameters(final PermissionScope permissionScope, final String prefix) {
        return ImmutableMap.<String, Object>builder()
                .put(prefix + "statewide", permissionScope.isStatewide())
                .put(prefix + "district_group_ids", nullOrEmptyToDefault(permissionScope.getDistrictGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "district_ids", nullOrEmptyToDefault(permissionScope.getDistrictIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_group_ids", nullOrEmptyToDefault(permissionScope.getInstitutionGroupIds(), UNMATCHABLE_IDS))
                .put(prefix + "school_ids", nullOrEmptyToDefault(permissionScope.getInstitutionIds(), UNMATCHABLE_IDS))
                .put("system_school_year", reportingSystemProperties.getSchoolYear());
    }
}
