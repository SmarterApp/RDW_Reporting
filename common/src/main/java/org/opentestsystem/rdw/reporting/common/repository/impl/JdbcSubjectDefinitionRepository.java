package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.repository.SubjectDefinitionRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collection;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * JDBC implementation of a SubjectDefinitionRepository.
 */
@Repository
public class JdbcSubjectDefinitionRepository implements SubjectDefinitionRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.subjectDefinition.findAll}")
    private String findAllQuery;

    public JdbcSubjectDefinitionRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Collection<SubjectDefinition> findAll() {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource(),
                (row, index) -> SubjectDefinition.builder()
                        .asmtTypeCode(row.getString("asmt_type_code"))
                        .subjectCode(row.getString("subject_code"))
                        .performanceLevelCount(row.getInt("performance_level_count"))
                        .performanceLevelStandardCutoff(getNullable(row, row.getInt("performance_level_standard_cutoff")))
                        .claimScorePerformanceLevelCount(getNullable(row, row.getInt("claim_score_performance_level_count")))
                        .build()
        );
    }
}
