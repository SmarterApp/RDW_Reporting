package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.repository.SubjectDefinitionRepository;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * JDBC implementation of a SubjectDefinitionRepository.
 */
@Repository
public class JdbcSubjectDefinitionRepository implements SubjectDefinitionRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.subjectDefinition.findAll}")
    private String findAll;

    @Value("${sql.subjectDefinition.findAllScorables}")
    private String findAllScorables;

    public JdbcSubjectDefinitionRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Collection<SubjectDefinition> findAll() {
        // collect scorables by subject_code, asmt_type_code, score_type_id
        final Map<Integer, List<String>> scorableCodesByKey = newHashMap();
        template.query(findAllScorables, new MapSqlParameterSource(), rs -> {
            final int key = key(rs.getString("subject_code"), rs.getString("asmt_type_code"),
                                ScoreType.valueOf(rs.getInt("score_type_id")));
            final List<String> codes = scorableCodesByKey.computeIfAbsent(key, k -> new ArrayList<>());
            codes.add(rs.getString("code"));
        });

        return template.query(
                findAll, new MapSqlParameterSource(), (row, index) -> SubjectDefinition.builder()
                        .asmtTypeCode(row.getString("asmt_type_code"))
                        .subjectCode(row.getString("subject_code"))
                        .performanceLevelCount(row.getInt("performance_level_count"))
                        .performanceLevelStandardCutoff(getNullable(row, row.getInt("performance_level_standard_cutoff")))
                        .claimScorePerformanceLevelCount(getNullable(row, row.getInt("claim_score_performance_level_count")))
                        .altScorePerformanceLevelCount(getNullable(row, row.getInt("alt_score_performance_level_count")))
                        .targetReport(row.getBoolean("target_report"))
                        .printedReport(row.getBoolean("printed_report"))
                        .scorableClaims(scorableCodesByKey.get(key(row.getString("subject_code"), row.getString("asmt_type_code"), ScoreType.CLAIM)))
                        .altScores(scorableCodesByKey.get(key(row.getString("subject_code"), row.getString("asmt_type_code"), ScoreType.ALT)))
                        .build()
        );
    }

    private static int key(final String subjectCode, final String asmtTypeCode, final ScoreType scoreType) {
        return Objects.hash(subjectCode, asmtTypeCode, scoreType);
    }
}
