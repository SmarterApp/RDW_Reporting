package org.opentestsystem.rdw.reporting.common.model;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collector;

import static com.google.common.base.Preconditions.checkNotNull;

public class UnmodifiableCollectionDifference<T> implements CollectionDifference<T> {

    private Set<T> entriesOnlyOnLeft;
    private Set<T> entriesOnlyOnRight;

    public UnmodifiableCollectionDifference(final Set<T> collection1, final Set<T> collection2) {
        checkNotNull(collection1, "collection1 must not be null");
        checkNotNull(collection2, "collection2 must not be null");

        this.entriesOnlyOnLeft = collection1.stream()
                .filter(item -> !collection2.contains(item))
                .collect(toUnmodifiableSet());

        this.entriesOnlyOnRight = collection2.stream()
                .filter(item -> !collection1.contains(item))
                .collect(toUnmodifiableSet());
    }

    @Override
    public Set<T> entriesOnlyOnLeft() {
        return entriesOnlyOnLeft;
    }

    @Override
    public Set<T> entriesOnlyOnRight() {
        return entriesOnlyOnRight;
    }

    private static <T> Collector<T, Set<T>, Set<T>> toUnmodifiableSet() {
        return Collector.of(HashSet::new, Set::add, (left, right) -> {
            left.addAll(right);
            return left;
        }, Collections::unmodifiableSet);
    }

}
