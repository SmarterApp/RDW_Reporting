package org.opentestsystem.rdw.reporting.common.report;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;

import static java.util.Comparator.comparing;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcExamReportRepository implements ExamReportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findAllIabsByStudentIdAndSchoolYear}")
    private String findAllIabsByStudentIdAndSchoolYearQuery;

    @Value("${sql.exam.findLatestIcaByStudentIdAndSchoolYear}")
    private String findLatestIcaByStudentIdAndSchoolYearQuery;

    @Value("${application.state}")
    private String stateCode;

    @Autowired
    JdbcExamReportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public IabReport findAllIabsByStudentIdAndSchoolYear(
            @NotNull final PermissionScope permissionScope,
            final long studentId,
            final int schoolYear) {

        final IabReport.Builder reportBuilder = IabReport.builder();

        final Multimap<Assessment, Exam> assessments = TreeMultimap
                .create(comparing(Assessment::getName), comparing(Exam::getDateTime).reversed());

        template.query(
                findAllIabsByStudentIdAndSchoolYearQuery,
                ImmutableMap.<String, Object>builder()
                        .putAll(getSecurityParameters(permissionScope))
                        .put("student_id", studentId)
                        .put("school_year", schoolYear)
                        .build(),
                (row) -> {
                    if (row.isFirst()) {
                        reportBuilder
                                .student(Students.map(row, Student.builder(), "student_").build())
                                .studentEnrollment(mapStudentEnrollment(row));
                    }
                    final Assessment assessment = Assessments.map(row, Assessment.builder(), "asmt_").build();
                    final Exam exam = Exams.map(row, Exam.builder()).build();
                    assessments.put(assessment, exam);
                }
        );

        return assessments.isEmpty()
                ? null
                : reportBuilder.examsByAssessment(assessments.asMap()).build();
    }

    @Override
    public IcaReport findLatestIcaByStudentIdAndSchoolYear(
            @NotNull final PermissionScope permissionScope,
            final long studentId,
            final int schoolYear) {

        try {
            return template.queryForObject(
                    findLatestIcaByStudentIdAndSchoolYearQuery,
                    ImmutableMap.<String, Object>builder()
                            .putAll(getSecurityParameters(permissionScope))
                            .put("student_id", studentId)
                            .put("school_year", schoolYear)
                            .build(),
                    (row, index) -> IcaReport.builder()
                            .assessment(Assessments.map(row, Assessment.builder(), "asmt_").build())
                            .exam(Exams.map(row, Exam.builder()).build())
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(mapStudentEnrollment(row))
                            .build()
            );
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

    private StudentEnrollment mapStudentEnrollment(final ResultSet row) throws SQLException {
        return StudentEnrollment.builder()
                .gradeId(row.getInt("grade_id"))
                .schoolName(row.getString("school_name"))
                .districtName(row.getString("district_name"))
                .stateCode(stateCode)
                .build();
    }

}
