package org.opentestsystem.rdw.reporting.common.configuration;

import org.opentestsystem.rdw.reporting.common.model.SearchFilterPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFilterType;
import org.springframework.boot.context.properties.ConfigurationProperties;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ConfigurationProperties(prefix = "reporting")
public class ReportingSystemSettings {

    private String analyticsTrackingId;
    private String interpretiveGuideUrl;
    private String accessDeniedUrl;
    private String irisVendorId;
    private int minItemDataYear;
    private boolean percentileDisplayEnabled;
    private List<String> reportLanguages = new ArrayList<>();
    private int schoolYear;
    private StateProperties state = new StateProperties();
    private boolean transferAccessEnabled;
    private String translationLocation;
    private List<String> uiLanguages = new ArrayList<>();
    private String userGuideUrl;
    private TargetReportProperties targetReport = new TargetReportProperties();
    private Map<StudentFilterType, SearchFilterPermissionLevel> studentFilters = new HashMap<>();

    /**
     * Note: This is webapp specific
     * @return The analytics tracking id
     */
    public String getAnalyticsTrackingId() {
        return analyticsTrackingId;
    }

    public void setAnalyticsTrackingId(final String analyticsTrackingId) {
        this.analyticsTrackingId = analyticsTrackingId;
    }

    /**
     * Note: This is webapp specific
     * @return The interpretive guide url
     */
    public String getInterpretiveGuideUrl() {
        return interpretiveGuideUrl;
    }

    public void setInterpretiveGuideUrl(final String interpretiveGuideUrl) {
        this.interpretiveGuideUrl = interpretiveGuideUrl;
    }

    /**
     * Note: This is webapp specific
     * @return The access denied url
     */
    public String getAccessDeniedUrl() {
        return accessDeniedUrl;
    }

    public void setAccessDeniedUrl(final String accessDeniedUrl) {
        this.accessDeniedUrl = accessDeniedUrl;
    }

    /**
     * Note: This is webapp specific
     * @return Iris vendor ID
     */
    public String getIrisVendorId() {
        return this.irisVendorId;
    }

    public void setIrisVendorId(final String irisVendorId) {
        this.irisVendorId = irisVendorId;
    }

    /**
     * Note: This is webapp specific
     * @return The minimum year with item level data
     */
    public int getMinItemDataYear() {
        return minItemDataYear;
    }

    public void setMinItemDataYear(final int minItemDataYear) {
        this.minItemDataYear = minItemDataYear;
    }

    /**
     * Note: This is webapp specific
     *
     * This property controls whether or not to display the norms percentile
     * information button within the web UI.
     *
     * @return True if the UI should display norms percentile information
     */
    public boolean isPercentileDisplayEnabled() {
        return percentileDisplayEnabled;
    }

    public void setPercentileDisplayEnabled(final boolean percentileDisplayEnabled) {
        this.percentileDisplayEnabled = percentileDisplayEnabled;
    }

    /**
     * Note: This is webapp specific
     * @return The available report generation languages in addition to English
     */
    public List<String> getReportLanguages() {
        return reportLanguages;
    }

    public void setReportLanguages(final List<String> reportLanguages) {
        this.reportLanguages = reportLanguages;
    }

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     * @return current school year
     */
    public int getSchoolYear() {
        return schoolYear;
    }

    public void setSchoolYear(final int schoolYear) {
        this.schoolYear = schoolYear;
    }

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     * @return The state configuration
     */
    public StateProperties getState() {
        return state;
    }

    public void setState(final StateProperties state) {
        this.state = state;
    }

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     * True if users with access to the students' most recent schools grant access
     * to the entire student exam history.
     * NOTE: this property is respected by both 'rdw-reporting-webapp' and 'rdw-reporting-report-processor'
     *
     * @return True if transfer access is enabled
     */
    public boolean isTransferAccessEnabled() {
        return transferAccessEnabled;
    }

    public void setTransferAccessEnabled(final boolean transferAccessEnabled) {
        this.transferAccessEnabled = transferAccessEnabled;
    }

    /**
     * This is the location/prefix of translation files
     * (es.json to provide Spanish, en.json to override display values, etc)
     * (ex: 'binary-${spring.cloud.config.uri}/*&#47;*&#47;master/')
     *
     * @return The prefix for translation resources.
     */
    public String getTranslationLocation() {
        return translationLocation;
    }

    public void setTranslationLocation(final String translationLocation) {
        this.translationLocation = translationLocation;
    }

    /**
     * Note: This is webapp specific
     * @return The available webapp UI languages in addition to English ("en")
     */
    public List<String> getUiLanguages() {
        return uiLanguages;
    }

    public void setUiLanguages(final List<String> uiLanguages) {
        this.uiLanguages = uiLanguages;
    }

    /**
     * Note: This is webapp specific
     * @return The user guide url
     */
    public String getUserGuideUrl() {
        return userGuideUrl;
    }

    public void setUserGuideUrl(final String userGuideUrl) {
        this.userGuideUrl = userGuideUrl;
    }

    /**
     * Note: This is webapp specific
     * @return The target report configuration
     */
    public TargetReportProperties getTargetReport() {
        return targetReport;
    }

    public void setTargetReport(final TargetReportProperties targetReport) {
        this.targetReport = targetReport;
    }

    /**
     * Note: This is reporting-service and aggregate-service specific
     * @return Map of student filters to permission levels used for suppressing filters in the UI
     */
    public Map<StudentFilterType, SearchFilterPermissionLevel> getStudentFilters() {
        return studentFilters;
    }

    public void setStudentFilters(final Map<StudentFilterType, SearchFilterPermissionLevel> studentFilters) {
        this.studentFilters = studentFilters;
    }

    /**
     * @deprecated use {@link #getStudentFilters()}}
     */
    public boolean isLimitedEnglishProficienciesEnabled() {
        return isStudentFilterEnabled(StudentFilterType.LimitedEnglishProficiencies);
    }

    /**
     * @deprecated use {@link #getStudentFilters()}
     */
    public boolean isEnglishLanguageAcquisitionStatusEnabled() {
        return isStudentFilterEnabled(StudentFilterType.EnglishLanguageAcquisitionStatus);
    }

    /**
     * @param studentFilterType The student filter type ID
     * @return True if the given filter is enabled
     */
    private boolean isStudentFilterEnabled(final StudentFilterType studentFilterType) {
        final SearchFilterPermissionLevel level = getStudentFilters().get(studentFilterType);
        return level != SearchFilterPermissionLevel.Disabled;
    }

    public static class StateProperties {

        private String name;
        private String code;

        /**
         * @return the state code
         */
        public String getName() {
            return name;
        }

        public void setName(final String name) {
            this.name = name;
        }

        /**
         * @return the state name
         */
        public String getCode() {
            return code;
        }

        public void setCode(final String code) {
            this.code = code;
        }

    }

    public static class TargetReportProperties {

        private Double insufficientDataCutoff;
        private int minNumberOfStudents;

        /**
         * @return The standard error cutoff for when target values are considered Insufficient
         */
        public Double getInsufficientDataCutoff() {
            return insufficientDataCutoff;
        }

        public void setInsufficientDataCutoff(final Double insufficientDataCutoff) {
            this.insufficientDataCutoff = insufficientDataCutoff;
        }

        /**
         * @return The minimum number of students needed to display a target aggregate report
         */
        public int getMinNumberOfStudents() {
            return minNumberOfStudents;
        }

        public void setMinNumberOfStudents(final int minNumberOfStudents) {
            this.minNumberOfStudents = minNumberOfStudents;
        }

    }

}
