package org.opentestsystem.rdw.reporting.common.report;

import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.processor.ExamReportPdfProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.stereotype.Component;

import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.nio.charset.Charset;
import java.text.MessageFormat;

/**
 * Responsible for converting single exam reports into PDFs
 */
@Component
public class ExamReportPdfMessageConverter extends AbstractHttpMessageConverter<ExamReportPdfMessage> {

    private final ExamReportPdfProcessor processor;

    @Autowired
    public ExamReportPdfMessageConverter(@NotNull final ExamReportPdfProcessor processor) {
        super(new MediaType(MediaType.APPLICATION_PDF, Charset.forName("UTF-8")));
        this.processor = processor;
    }

    @Override
    protected boolean supports(final Class<?> clazz) {
        return ExamReportPdfMessage.class.equals(clazz);
    }

    @Override
    protected ExamReportPdfMessage readInternal(
            final Class<? extends ExamReportPdfMessage> clazz,
            final HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {

        throw new UnsupportedOperationException("Reading PDFs is not supported");
    }

    @Override
    protected void writeInternal(
            final ExamReportPdfMessage message,
            final HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {

        final AbstractExamReport report = message.getReport();
        final AbstractExamReportRequest<PrintOptions> request = message.getRequest();
        final Student student = report.getStudent();

        final byte[] pdf = processor.process(report, request);

        final String filename = String.format("%s_%s_%s_%s_%s",
                student.getLastName(),
                student.getFirstName(),
                request.getSchoolYear(),
                request.getAssessmentType().name(),
                request.getLanguage().getISO3Language()
        );

        final String contentDisposition = MessageFormat.format("attachment; filename={0}.pdf", filename);

        outputMessage.getHeaders().set(HttpHeaders.CONTENT_DISPOSITION, contentDisposition);
        outputMessage.getBody().write(pdf);
    }

}
