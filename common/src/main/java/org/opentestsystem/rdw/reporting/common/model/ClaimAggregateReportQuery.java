package org.opentestsystem.rdw.reporting.common.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import java.util.Map;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * This class represents a query for the aggregate report with {@link ClaimRow}s
 */
@SuppressWarnings("unchecked")
@JsonIgnoreProperties(value="subjectCodes", allowGetters = true)
public class ClaimAggregateReportQuery extends AbstractAggregateReportQuery {
    private ImmutableSet<Integer> schoolYears;
    private ImmutableMap<String, Set<String>> claimCodesBySubject;

    public ReportQueryType getType() {
        return ReportQueryType.Claim;
    }

    // TODO move schoolYears to base report & enforce validation where single year is required
    @Override
    public Set<Integer> getSchoolYears() {
        return safeImmutableOf(schoolYears);
    }

    public ImmutableMap<String, Set<String>> getClaimCodesBySubject() {
        return claimCodesBySubject == null ? ImmutableMap.of() : claimCodesBySubject;
    }

    // TODO do we need this?
    @Override
    public Set<String> getSubjectCodes() {
        return getClaimCodesBySubject().keySet();
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AbstractAggregateReportQuery.Builder<ClaimAggregateReportQuery, Builder> {
        private Set<Integer> schoolYears;
        private Map<String, Set<String>> claimCodesBySubject;

        @Override
        public ClaimAggregateReportQuery build() {
            final ClaimAggregateReportQuery value = super.build(new ClaimAggregateReportQuery());
            value.schoolYears = safeImmutableOf(schoolYears);
            value.claimCodesBySubject = safeImmutableOf(claimCodesBySubject);
            return value;
        }

        @Override
        public Builder copy(final ClaimAggregateReportQuery value) {
            return super.copy(value)
                    .schoolYears(value.schoolYears)
                    .claimCodesBySubject(value.claimCodesBySubject);
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder claimCodesBySubject(final Map<String, Set<String>> claimCodesBySubject) {
            this.claimCodesBySubject = claimCodesBySubject;
            return this;
        }
    }
}
