package org.opentestsystem.rdw.reporting.common.model;

import org.opentestsystem.rdw.common.model.AssessmentType;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static java.util.stream.Collectors.toSet;

/**
 * Represents a query for the custom aggregate report
 */
public class ReportQuery {
    private AssessmentType assessmentType;
    private Set<Integer> subjectIds;
    private Set<Integer> schoolYears;
    private Set<Integer> asmtGradeIds;
    private boolean includeState;
    private boolean includeAllDistricts;
    private Map<Integer, Boolean> districts; // district ids and a flag to indicate whether to include all schools for the district
    private Set<Integer> schoolIds;
    private Set<DimensionType> dimensionTypes;
    private Set<Integer> completenessIds;
    private Set<Integer> administrativeConditionIds;
    private Set<Integer> gendersId;

    public AssessmentType getAssessmentType() {
        return assessmentType;
    }

    public Set<Integer> getSubjectIds() {
        return subjectIds == null ? newHashSet() : newHashSet(subjectIds);
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears == null ? newHashSet() : newHashSet(schoolYears);
    }

    public Set<Integer> getAsmtGradeIds() {
        return asmtGradeIds == null ? newHashSet() : newHashSet(asmtGradeIds);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public Set<Integer> getSchoolIds() {
        return schoolIds == null ? newHashSet() : newHashSet(schoolIds);
    }

    public Map<Integer, Boolean> getDistricts() {
        return districts == null ? newHashMap() : newHashMap(districts);
    }

    public Set<Integer> getDistrictIds() {
        return districts == null ? newHashSet() : districts.keySet();
    }

    public Set<Integer> getDistrictIdsWithAllSchools() {
        return districts == null ? newHashSet() : districts.entrySet().stream().filter(Entry::getValue).map(Entry::getKey).collect(toSet());
    }

    public Set<DimensionType> getDimensionTypes() {
        return dimensionTypes == null ? newHashSet() : newHashSet(dimensionTypes);
    }

    public Set<Integer> getCompletenessIds() {
        return completenessIds == null ? newHashSet() : newHashSet(completenessIds);
    }

    public Set<Integer> getAdministrativeConditionIds() {
        return administrativeConditionIds == null ? newHashSet() : newHashSet(administrativeConditionIds);
    }

    public Set<Integer> getGendersId() {
        return gendersId == null ? newHashSet() : newHashSet(gendersId);
    }

    public boolean contains(final DimensionType dimension) {
        for (final DimensionType existing : getDimensionTypes()) {
            if (existing.equals(dimension)) return true;
        }
        return false;
    }

    public ReportQuery.Builder copy() {
        return builder().copy(this);
    }

    public static void checkIsValid(@NotNull final ReportQuery query) {
        checkArgument(query.getAssessmentType() != null, "report query is missing assessment type");
        checkArgument(!query.getSubjectIds().isEmpty(), "report query is missing subjects");
        checkArgument(!query.getAsmtGradeIds().isEmpty(), "report query is missing asmt grades");
        checkArgument(!query.getSchoolYears().isEmpty(), "report query is missing school years");
        checkArgument(!query.getDimensionTypes().isEmpty(), "report query is missing dimensionTypes");
        checkArgument(!(!query.isIncludeState() && !query.isIncludeAllDistricts() && query.getDistrictIds().isEmpty() && query.getSchoolIds().isEmpty()), "report query is missing organization");
    }

    public static ReportQuery.Builder builder() {
        return new ReportQuery.Builder();
    }

    public static class Builder {
        private AssessmentType assessmentType;
        private Set<Integer> subjectIds;
        private Set<Integer> schoolYears;
        private Set<Integer> asmtGradeIds;
        private boolean includeState = false;
        private boolean includeAllDistricts = false;
        private Set<Integer> schoolIds;
        private Map<Integer, Boolean> districts;
        private Set<DimensionType> dimensionTypes;
        private Set<Integer> completenessIds;
        private Set<Integer> administrativeConditionIds;
        private Set<Integer> genderIds;

        public ReportQuery build() {
            ReportQuery query = new ReportQuery();
            query.assessmentType = assessmentType;
            query.subjectIds = subjectIds;
            query.schoolYears = schoolYears;
            query.asmtGradeIds = asmtGradeIds;
            query.includeState = includeState;
            query.includeAllDistricts = includeAllDistricts;
            query.schoolIds = schoolIds;
            query.districts = districts;
            query.dimensionTypes = dimensionTypes;
            query.completenessIds = completenessIds;
            query.administrativeConditionIds = administrativeConditionIds;
            query.gendersId = genderIds;
            return query;
        }

        public Builder copy(final ReportQuery query) {
            assessmentType = query.getAssessmentType();
            subjectIds = query.getSubjectIds();
            schoolYears = query.getSchoolYears();
            asmtGradeIds = query.getAsmtGradeIds();
            includeState = query.isIncludeState();
            includeAllDistricts = query.isIncludeAllDistricts();
            schoolIds = query.getSchoolIds();
            districts = query.getDistricts();
            dimensionTypes = query.getDimensionTypes();
            completenessIds = query.getCompletenessIds();
            administrativeConditionIds = query.getAdministrativeConditionIds();
            genderIds = query.getGendersId();
            return this;
        }

        public Builder assessmentType(final AssessmentType assessmentType) {
            this.assessmentType = assessmentType;
            return this;
        }

        public Builder subjectIds(final Set<Integer> subjectIds) {
            this.subjectIds = subjectIds;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder asmtGradeIds(final Set<Integer> asmtGradeIds) {
            this.asmtGradeIds = asmtGradeIds;
            return this;
        }

        public Builder includeState(final boolean includeState) {
            this.includeState = includeState;
            return this;
        }

        public Builder includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return this;
        }

        public Builder schoolIds(final Set<Integer> schoolIds) {
            this.schoolIds = schoolIds;
            return this;
        }

        public Builder districts(final Map<Integer, Boolean> districts) {
            this.districts = districts;
            return this;
        }

        public Builder dimensionTypes(final Set<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return this;
        }

        public Builder dimensionType(final DimensionType dimensionType) {
            if (dimensionTypes == null) dimensionTypes = newHashSet();
            dimensionTypes.add(dimensionType);
            return this;
        }

        public Builder completenessIds(final Set<Integer> completenessIds) {
            this.completenessIds = completenessIds;
            return this;
        }

        public Builder administrativeConditionIds(final Set<Integer> administrativeConditionIds) {
            this.administrativeConditionIds = administrativeConditionIds;
            return this;
        }

        public Builder genderIds(final Set<Integer> genderIds) {
            this.genderIds = genderIds;
            return this;
        }
    }
}