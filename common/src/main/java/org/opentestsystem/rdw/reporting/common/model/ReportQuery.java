package org.opentestsystem.rdw.reporting.common.model;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.common.model.AssessmentType.SUMMATIVE;

/**
 * Represents a query for the custom aggregate report
 */
public class ReportQuery {
    private String assessmentTypeCode;
    private Set<String> subjectCodes;
    private Set<Integer> schoolYears;
    private Set<String> assessmentGradeCodes;
    private boolean includeState;
    private boolean includeAllDistricts;
    private boolean includeAllSchoolsOfDistricts;
    private boolean includeAllDistrictsOfSchools;
    private Set<Long> districtIds;
    private Set<Long> schoolIds;
    private Set<DimensionType> dimensionTypes;
    //pass through values
    private String valueDisplayType;
    private String achievementLevelDisplayType;
    private List<String> columnOrder;
    // optional filters
    private Set<String> completenessCodes;
    private Set<String> administrativeConditionCodes;
    private Set<String> genderCodes;
    private Set<String> ethnicityCodes;
    private Set<String> lepCodes;
    private Set<String> migrantStatusCodes;
    private Set<String> section504Codes;
    private Set<String> iepCodes;
    private Set<String> economicDisadvantageCodes;

    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    public Set<String> getSubjectCodes() {
        return subjectCodes == null ? newHashSet() : newHashSet(subjectCodes);
    }

    public Set<Integer> getSchoolYears() {
        return schoolYears == null ? newHashSet() : newHashSet(schoolYears);
    }

    public Set<String> getAssessmentGradeCodes() {
        return assessmentGradeCodes == null ? newHashSet() : newHashSet(assessmentGradeCodes);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public boolean isIncludeAllSchoolsOfDistricts() {
        return includeAllSchoolsOfDistricts;
    }

    public boolean isIncludeAllDistrictsOfSchools() {
        return includeAllDistrictsOfSchools;
    }

    public Set<Long> getSchoolIds() {
        return schoolIds == null ? newHashSet() : newHashSet(schoolIds);
    }

    public Set<Long> getDistrictIds() {
        return districtIds == null ? newHashSet() : newHashSet(districtIds);
    }

    public String getValueDisplayType() {
        return valueDisplayType;
    }

    public String getAchievementLevelDisplayType() {
        return achievementLevelDisplayType;
    }

    public List<String> getColumnOrder() {
        return columnOrder == null ? newArrayList() : newArrayList(columnOrder);
    }

    public Set<DimensionType> getDimensionTypes() {
        return dimensionTypes == null ? newHashSet() : newHashSet(dimensionTypes);
    }

    public Set<String> getCompletenessCodes() {
        return completenessCodes == null ? newHashSet() : newHashSet(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return administrativeConditionCodes == null ? newHashSet() : newHashSet(administrativeConditionCodes);
    }

    public Set<String> getGenderCodes() {
        return genderCodes == null ? newHashSet() : newHashSet(genderCodes);
    }

    public Set<String> getEthnicityCodes() {
        return ethnicityCodes == null ? newHashSet() : newHashSet(ethnicityCodes);
    }

    public Set<String> getLepCodes() {
        return lepCodes == null ? newHashSet() : newHashSet(lepCodes);
    }

    public Set<String> getMigrantStatusCodes() {
        return migrantStatusCodes == null ? newHashSet() : newHashSet(migrantStatusCodes);
    }

    public Set<String> getSection504Codes() {
        return section504Codes == null ? newHashSet() : newHashSet(section504Codes);
    }

    public Set<String> getIepCodes() {
        return iepCodes == null ? newHashSet() : newHashSet(iepCodes);
    }

    public Set<String> getEconomicDisadvantageCodes() {
        return economicDisadvantageCodes == null ? newHashSet() : newHashSet(economicDisadvantageCodes);
    }

    public boolean contains(final DimensionType dimension) {
        for (final DimensionType existing : getDimensionTypes()) {
            if (existing.equals(dimension)) return true;
        }
        return false;
    }

    public ReportQuery.Builder copy() {
        return builder().copy(this);
    }

    public static void checkIsValid(@NotNull final ReportQuery query) {
        checkArgument(!query.getSubjectCodes().isEmpty(), "report query is missing subjects");
        checkArgument(!query.getAssessmentGradeCodes().isEmpty(), "report query is missing asmt grades");
        checkArgument(!query.getSchoolYears().isEmpty(), "report query is missing school years");
        checkArgument(!query.getDimensionTypes().isEmpty(), "report query is missing dimensionTypes");
        checkArgument(!(!query.isIncludeState() && !query.isIncludeAllDistricts() && query.getDistrictIds().isEmpty() && query.getSchoolIds().isEmpty()), "report query is missing organization");
        checkArgument(!(query.isIncludeState() && !SUMMATIVE.code().equals(query.getAssessmentTypeCode())), "report query cannot include state results for non-summative assessment types");
    }

    public static ReportQuery.Builder builder() {
        return new ReportQuery.Builder();
    }

    public static class Builder {
        private String assessmentTypeCode;
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private boolean includeState = false;
        private boolean includeAllDistricts = false;
        private boolean includeAllSchoolsOfDistricts = false;
        private boolean includeAllDistrictsOfSchools = false;
        private Set<Long> districtIds;
        private Set<Long> schoolIds;
        private Set<DimensionType> dimensionTypes;
        private String valueDisplayType;
        private String achievementLevelDisplayType;
        private List<String> columnOrder;
        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private Set<String> genderCodes;
        private Set<String> ethnicityCodes;
        private Set<String> lepCodes;
        private Set<String> migrantStatusCodes;
        private Set<String> section504Codes;
        private Set<String> iepCodes;
        private Set<String> economicDisadvantageCodes;

        public ReportQuery build() {
            final ReportQuery query = new ReportQuery();
            query.assessmentTypeCode = assessmentTypeCode;
            query.subjectCodes = subjectCodes;
            query.schoolYears = schoolYears;
            query.assessmentGradeCodes = assessmentGradeCodes;
            query.includeState = includeState;
            query.includeAllDistricts = includeAllDistricts;
            query.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            query.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            query.schoolIds = schoolIds;
            query.districtIds = districtIds;
            query.dimensionTypes = dimensionTypes;
            query.valueDisplayType = valueDisplayType;
            query.achievementLevelDisplayType = achievementLevelDisplayType;
            query.columnOrder = columnOrder;
            query.completenessCodes = completenessCodes;
            query.administrativeConditionCodes = administrativeConditionCodes;
            query.genderCodes = genderCodes;
            query.ethnicityCodes = ethnicityCodes;
            query.lepCodes = lepCodes;
            query.migrantStatusCodes = migrantStatusCodes;
            query.section504Codes = section504Codes;
            query.iepCodes = iepCodes;
            query.economicDisadvantageCodes = economicDisadvantageCodes;
            return query;
        }

        public Builder copy(final ReportQuery query) {
            assessmentTypeCode = query.getAssessmentTypeCode();
            subjectCodes = query.getSubjectCodes();
            schoolYears = query.getSchoolYears();
            assessmentGradeCodes = query.getAssessmentGradeCodes();
            includeState = query.isIncludeState();
            includeAllDistricts = query.isIncludeAllDistricts();
            includeAllSchoolsOfDistricts = query.isIncludeAllSchoolsOfDistricts();
            includeAllDistrictsOfSchools = query.isIncludeAllDistrictsOfSchools();
            schoolIds = query.getSchoolIds();
            districtIds = query.getDistrictIds();
            dimensionTypes = query.getDimensionTypes();
            valueDisplayType = query.getValueDisplayType();
            achievementLevelDisplayType = query.getAchievementLevelDisplayType();
            columnOrder = query.getColumnOrder();
            completenessCodes = query.getCompletenessCodes();
            administrativeConditionCodes = query.getAdministrativeConditionCodes();
            genderCodes = query.getGenderCodes();
            ethnicityCodes = query.getEthnicityCodes();
            lepCodes = query.getLepCodes();
            migrantStatusCodes = query.getMigrantStatusCodes();
            section504Codes = query.getSection504Codes();
            iepCodes = query.getIepCodes();
            economicDisadvantageCodes = query.getEconomicDisadvantageCodes();
            return this;
        }

        public Builder assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return this;
        }

        public Builder subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }

        public Builder includeState(final boolean includeState) {
            this.includeState = includeState;
            return this;
        }

        public Builder includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return this;
        }


        public Builder includeAllSchoolsOfDistricts(final boolean includeAllSchoolsOfDistricts) {
            this.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            return this;
        }

        public Builder includeAllDistrictsOfSchools(final boolean includeAllDistrictsOfSchools) {
            this.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            return this;
        }

        public Builder schoolIds(final Set<Long> schoolIds) {
            this.schoolIds = schoolIds;
            return this;
        }

        public Builder districtIds(final Set<Long> districtIds) {
            this.districtIds = districtIds;
            return this;
        }

        public Builder dimensionTypes(final Set<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return this;
        }

        public Builder dimensionType(final DimensionType dimensionType) {
            if (dimensionTypes == null) dimensionTypes = newHashSet();
            dimensionTypes.add(dimensionType);
            return this;
        }

        public Builder completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return this;
        }

        public Builder administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return this;
        }

        public Builder genderCodes(final Set<String> genderCodes) {
            this.genderCodes = genderCodes;
            return this;
        }

        public Builder ethnicityCodes(final Set<String> ethnicityCodes) {
            this.ethnicityCodes = ethnicityCodes;
            return this;
        }

        public Builder lepCodes(final Set<String> lepCodes) {
            this.lepCodes = lepCodes;
            return this;
        }

        public Builder migrantStatusCodes(final Set<String> migrantStatusCodes) {
            this.migrantStatusCodes = migrantStatusCodes;
            return this;
        }

        public Builder section504Codes(final Set<String> section504Codes) {
            this.section504Codes = section504Codes;
            return this;
        }

        public Builder iepCodes(final Set<String> iepCodes) {
            this.iepCodes = iepCodes;
            return this;
        }

        public Builder economicDisadvantageCodes(final Set<String> economicDisadvantageCodes) {
            this.economicDisadvantageCodes = economicDisadvantageCodes;
            return this;
        }
    }
}