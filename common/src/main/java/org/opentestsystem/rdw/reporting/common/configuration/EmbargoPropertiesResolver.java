package org.opentestsystem.rdw.reporting.common.configuration;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

public class EmbargoPropertiesResolver implements EmbargoProperties {

    private static final Logger logger = LoggerFactory.getLogger(EmbargoPropertiesResolver.class);
    private final TenantKeyResolver tenantKeyResolver;
    private final EmbargoPropertiesRoot propertiesRoot;

    public EmbargoPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                     EmbargoPropertiesRoot propertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.propertiesRoot = propertiesRoot;
        logger.debug("EmbargoReportingPropertiesRoot: {}", propertiesRoot);
    }

    private Optional<EmbargoPropertiesTenant> getEmbargoReportingPropertiesTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(propertiesRoot.getTenants().get(k)));
    }

    @Override
    public Integer getPageSize() {
        return getEmbargoReportingPropertiesTenant()
            .map(EmbargoPropertiesTenant::getPageSize)
            .orElse(propertiesRoot.getPageSize());
    }

    @Override
    public Integer getAuditLogDays() {
        return getEmbargoReportingPropertiesTenant()
            .map(EmbargoPropertiesTenant::getAuditLogDays)
            .orElse(propertiesRoot.getAuditLogDays());
    }

    @Override
    public String getAuditLogFileName() {
        return getEmbargoReportingPropertiesTenant()
            .map(EmbargoPropertiesTenant::getAuditLogFileName)
            .orElse(propertiesRoot.getAuditLogFileName());
    }
}

