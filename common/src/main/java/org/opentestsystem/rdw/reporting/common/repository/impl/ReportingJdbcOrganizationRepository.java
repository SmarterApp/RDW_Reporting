package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.DistrictGroup;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolGroup;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * Reporting JDBC-backed implementation of an OrganizationRepository.
 *
 * NOTE: This class does not have a @Repository annotation due to consumers
 * may needing to qualify the NamedParameterJdbcTemplate.  An instance of this
 * class should be registered as a @Bean to enable @Value processing for SQL injection.
 */
public class ReportingJdbcOrganizationRepository implements OrganizationRepository {

    @Value("${sql.organization.reporting.findAll}")
    private String findAllQuery;

    @Value("${sql.organization.reporting.findOne}")
    private String findOneQuery;

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    public ReportingJdbcOrganizationRepository(final NamedParameterJdbcTemplate template,
                                               final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public Collection<Organization> findAll(final PermissionScope permissionScope, final OrganizationQuery query) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                        .addValues(queryParams(query)),
                (row, rowNum) -> mapOrganization(row));
    }

    @Override
    public Organization findOneByTypeAndId(final PermissionScope permissionScope, final OrganizationType type, final int id) {
        try {
            return template.queryForObject(
                    findOneQuery,
                    new MapSqlParameterSource()
                            .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                            .addValue("allow_district_group", OrganizationType.DistrictGroup.equals(type))
                            .addValue("allow_district", OrganizationType.District.equals(type))
                            .addValue("allow_school_group", OrganizationType.SchoolGroup.equals(type))
                            .addValue("allow_school", OrganizationType.School.equals(type))
                            .addValue("id", id),
                    (row, rowNum) -> mapOrganization(row));
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    private static Map<String, Object> queryParams(final OrganizationQuery query) {
        return new MapSqlParameterSource()
                .addValue("allow_district_group", query.getTypes().contains(OrganizationType.DistrictGroup))
                .addValue("allow_district", query.getTypes().contains(OrganizationType.District))
                .addValue("allow_school_group", query.getTypes().contains(OrganizationType.SchoolGroup))
                .addValue("allow_school", query.getTypes().contains(OrganizationType.School))
                .addValue("name_query", query.getName())
                .addValue("limit", query.getLimit())
                .getValues();
    }

    private static Organization mapOrganization(final ResultSet resultSet) throws SQLException {
        final OrganizationType type = OrganizationType.valueOf(resultSet.getString("org_type"));
        switch (type) {
            case DistrictGroup:
                return new DistrictGroup.Builder()
                        .id(resultSet.getLong("id"))
                        .name(resultSet.getString("name"))
                        .naturalId(resultSet.getString("natural_id"))
                        .build();
            case District:
                return new District.Builder()
                        .id(resultSet.getLong("id"))
                        .name(resultSet.getString("name"))
                        .naturalId(resultSet.getString("natural_id"))
                        .districtGroupId(getNullable(resultSet, resultSet.getLong("district_group_id")))
                        .build();
            case SchoolGroup:
                return new SchoolGroup.Builder()
                        .id(resultSet.getLong("id"))
                        .name(resultSet.getString("name"))
                        .naturalId(resultSet.getString("natural_id"))
                        .districtGroupId(getNullable(resultSet, resultSet.getLong("district_group_id")))
                        .districtId(resultSet.getLong("district_id"))
                        .build();
            case School:
                return new School.Builder()
                        .id(resultSet.getLong("id"))
                        .name(resultSet.getString("name"))
                        .naturalId(resultSet.getString("natural_id"))
                        .districtGroupId(getNullable(resultSet, resultSet.getLong("district_group_id")))
                        .districtId(resultSet.getLong("district_id"))
                        .schoolGroupId(getNullable(resultSet, resultSet.getLong("school_group_id")))
                        .build();
            default:
                throw new IllegalStateException("Unknown type: " + type);
        }
    }
}
