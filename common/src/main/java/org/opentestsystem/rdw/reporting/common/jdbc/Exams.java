package org.opentestsystem.rdw.reporting.common.jdbc;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.security.PermissionScope;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.safeSplit;

/**
 * Holds utility methods for mapping SQL query results to {@link Exam}
 */
public final class Exams {

    private static final ClaimScaleScoreColumn[] CLAIM_SCALE_SCORE_COLUMNS = {
            new ClaimScaleScoreColumn("claim1_score_code", "claim1_category", "claim1_scale_score", "claim1_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim2_score_code", "claim2_category", "claim2_scale_score", "claim2_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim3_score_code", "claim3_category", "claim3_scale_score", "claim3_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim4_score_code", "claim4_category", "claim4_scale_score", "claim4_scale_score_std_err")
    };

    private Exams() {
    }

    /**
     * Populate an Exam.Builder from a database result set.
     * NOTE This will populate all exams as "Non-Transfer."
     *
     * @param row     The database result set
     * @param builder The builder to populate
     * @param <A>     The exam builder concrete class
     * @return The populated exam builder
     * @throws SQLException
     */
    public static <A extends Exam.Builder> A map(final ResultSet row, final A builder) throws SQLException {
        return map(row, builder, PermissionScope.STATEWIDE);
    }

    /**
     * Populate an Exam.Builder from a database result set.
     * NOTE this will determine if an Exam is designated as a "Transfer Exam" based upon the given
     * permission scope.  If the user does not natively have access to the exam's school, it is designated
     * as a transfer exam.
     *
     * @param row             The database result set
     * @param builder         The builder to populate
     * @param permissionScope The user's permission scope (either individual or group PII)
     * @param <A>             The exam builder concrete class
     * @return The populated exam builder
     * @throws SQLException
     */
    public static <A extends Exam.Builder> A map(final ResultSet row, final A builder, final PermissionScope permissionScope) throws SQLException {

        final School school = School.builder()
                .id(row.getLong("school_id"))
                .name(row.getString("school_name"))
                .districtId(row.getLong("school_district_id"))
                .districtGroupId(getNullable(row, row.getLong("school_district_group_id")))
                .schoolGroupId(getNullable(row, row.getLong("school_group_id")))
                .build();

        builder.id(row.getLong("id"))
                .sessionId(row.getString("session_id"))
                .dateTime(row.getTimestamp("completed_at").toInstant())
                .gradeCode(row.getString("grade_code"))
                .completenessCode(row.getString("completeness_code"))
                .administrativeConditionCode(row.getString("administration_condition_code"))
                .schoolYear(row.getInt("school_year"))
                .accommodationCodes(safeSplit(row.getString("available_accommodation_codes"), "|"))
                .scaleScore(ScaleScores.map(row))
                .school(school)
                .transfer(!hasSchoolAccess(school, permissionScope));

        // Collects claim scores for ICA and Summative exams.
        // If a single claim is unscored a null entry will be put in the list to represent the unscored claim
        if (AssessmentType.valueOf(row.getInt("type_id")) != AssessmentType.IAB) {
            final List<ScaleScore> claimScaleScores = newArrayList();
            for (final ClaimScaleScoreColumn column : CLAIM_SCALE_SCORE_COLUMNS) {

                final String claimCode = getNullable(row, row.getString(column.code));
                if (claimCode == null) {
                    break;
                }

                final Integer claimScaleScoreLevel = getNullable(row, row.getInt(column.level));
                final ScaleScore claimScaleScore = claimScaleScoreLevel == null ? null : ScaleScore.builder()
                        .level(claimScaleScoreLevel)
                        .value(row.getInt(column.value))
                        .standardError(row.getDouble(column.standardError))
                        .build();

                claimScaleScores.add(claimScaleScore);
            }
            builder.claimScaleScores(Collections.unmodifiableList(claimScaleScores));
        }

        return builder;
    }

    /**
     * Determine if the given permissions allow access to the given school.
     *
     * @param school          A school
     * @param permissionScope A permission scope
     * @return True if the permissions allow access to the given school
     */
    public static boolean hasSchoolAccess(final School school, final PermissionScope permissionScope) {
        return permissionScope.isStatewide() ||
                permissionScope.getDistrictIds().contains(school.getDistrictId()) ||
                permissionScope.getInstitutionIds().contains(school.getId()) ||
                (school.getDistrictGroupId() != null && permissionScope.getDistrictGroupIds().contains(school.getDistrictGroupId())) ||
                (school.getSchoolGroupId() != null && permissionScope.getInstitutionGroupIds().contains(school.getSchoolGroupId()));
    }

    private static final class ClaimScaleScoreColumn {

        private final String code;
        private final String level;
        private final String value;
        private final String standardError;

        private ClaimScaleScoreColumn(
                final String code,
                final String level,
                final String value,
                final String standardError) {
            this.code = code;
            this.level = level;
            this.value = value;
            this.standardError = standardError;
        }

    }

}
