package org.opentestsystem.rdw.reporting.common.jdbc;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.safeSplit;

/**
 * Holds utility methods for mapping SQL query results to {@link Exam}
 */
public final class Exams {

    private static final ClaimScaleScoreColumn[] CLAIM_SCALE_SCORE_COLUMNS = {
            new ClaimScaleScoreColumn("claim1_score_code", "claim1_category", "claim1_scale_score", "claim1_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim2_score_code", "claim2_category", "claim2_scale_score", "claim2_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim3_score_code", "claim3_category", "claim3_scale_score", "claim3_scale_score_std_err"),
            new ClaimScaleScoreColumn("claim4_score_code", "claim4_category", "claim4_scale_score", "claim4_scale_score_std_err")
    };

    private Exams(){
    }

    public static <A extends Exam.Builder> A map(final ResultSet row, final A builder) throws SQLException {

        builder.id(row.getLong("id"))
                .sessionId(row.getString("session_id"))
                .dateTime(row.getTimestamp("completed_at").toInstant())
                .gradeCode(row.getString("grade_code"))
                .completenessCode(row.getString("completeness_code"))
                .administrativeConditionCode(row.getString("administration_condition_code"))
                .schoolYear(row.getInt("school_year"))
                .accommodationCodes(safeSplit(row.getString("available_accommodation_codes"), "|"))
                .scaleScore(ScaleScores.map(row));

        // Collects claim scores for ICA and Summative exams.
        // If a single claim is unscored a null entry will be put in the list to represent the unscored claim
        if (AssessmentType.valueOf(row.getInt("type_id")) != AssessmentType.IAB) {
            final List<ScaleScore> claimScaleScores = newArrayList();
            for (ClaimScaleScoreColumn column : CLAIM_SCALE_SCORE_COLUMNS) {

                final String claimCode = getNullable(row, row.getString(column.code));
                if (claimCode == null) {
                    break;
                }

                final Integer claimScaleScoreLevel = getNullable(row, row.getInt(column.level));
                final ScaleScore claimScaleScore = claimScaleScoreLevel == null ? null : ScaleScore.builder()
                        .level(claimScaleScoreLevel)
                        .value(row.getInt(column.value))
                        .standardError(row.getDouble(column.standardError))
                        .build();

                claimScaleScores.add(claimScaleScore);
            }
            builder.claimScaleScores(Collections.unmodifiableList(claimScaleScores));
        }

        return builder;
    }

    private static final class ClaimScaleScoreColumn {

        private final String code;
        private final String level;
        private final String value;
        private final String standardError;

        private ClaimScaleScoreColumn(
                final String code,
                final String level,
                final String value,
                final String standardError) {
            this.code = code;
            this.level = level;
            this.value = value;
            this.standardError = standardError;
        }

    }

}
