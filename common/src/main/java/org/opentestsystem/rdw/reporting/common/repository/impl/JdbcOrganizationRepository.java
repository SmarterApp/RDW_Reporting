package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.opentestsystem.rdw.reporting.common.jdbc.Organizations;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.model.SchoolsWrapper;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * JDBC-backed implementation of an OrganizationRepository.
 * <p>
 * This is a base class that the reporting/warehouse-specific implementation can extend.
 * Currently, there is no difference between the two schemas so everything is here. If things
 * change, it may be necessary to factor out code.
 */
public abstract class JdbcOrganizationRepository implements OrganizationRepository {

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Value("${sql.organization.reporting.findAll}")
    private String findAllQuery;

    @Value("${sql.organization.reporting.findSchoolCount}")
    private String findSchoolCountQuery;

    @Value("${sql.organization.reporting.findOne}")
    private String findOneQuery;

    JdbcOrganizationRepository(final NamedParameterJdbcTemplate template,
                               final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    private static Map<String, Object> queryParams(final OrganizationQuery query) {
        return new MapSqlParameterSource()
                .addValue("allow_district_group", query.getTypes().contains(OrganizationType.DistrictGroup))
                .addValue("allow_district", query.getTypes().contains(OrganizationType.District))
                .addValue("allow_school_group", query.getTypes().contains(OrganizationType.SchoolGroup))
                .addValue("allow_school", query.getTypes().contains(OrganizationType.School))
                .addValue("name_query", query.getName())
                .addValue("limit", query.getLimit())
                .getValues();
    }

    @Override
    public Collection<Organization> findAll(final PermissionScope permissionScope, final OrganizationQuery query) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                        .addValues(queryParams(query)),
                (row, index) -> Organizations.map(row)
        );
    }

    @Override
    public SchoolsWrapper findSchoolsWithinLimit(final PermissionScope permissionScope, final OrganizationQuery query) {
        final long count = template.queryForObject(
                findSchoolCountQuery,
                new MapSqlParameterSource()
                        .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                        .addValues(queryParams(query)),
                Long.class
        );
        final SchoolsWrapper.Builder builder =  SchoolsWrapper.builder();
        if (count > query.getLimit()) {
            return builder.hasMoreSchools(true).build();
        }
        return builder.schools(findAll(permissionScope, query).stream().map(School.class::cast).collect(Collectors.toSet())).build();

    }

    @Override
    public Organization findOneByTypeAndId(final PermissionScope permissionScope, final OrganizationType type, final int id) {
        try {
            return template.queryForObject(
                    findOneQuery,
                    new MapSqlParameterSource()
                            .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                            .addValue("allow_district_group", OrganizationType.DistrictGroup.equals(type))
                            .addValue("allow_district", OrganizationType.District.equals(type))
                            .addValue("allow_school_group", OrganizationType.SchoolGroup.equals(type))
                            .addValue("allow_school", OrganizationType.School.equals(type))
                            .addValue("id", id),
                    (row, index) -> Organizations.map(row)
            );
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

}
