package org.opentestsystem.rdw.reporting.common.configuration;

import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;
import java.util.Optional;

public class ReportingSystemPropertiesResolver implements ReportingSystemProperties {

    private static final Logger logger = LoggerFactory.getLogger(ReportingSystemPropertiesResolver.class);
    private final TenantIdResolver tenantIdResolver;
    private final ReportingSystemSettings reportingSystemSettings;

    public ReportingSystemPropertiesResolver(TenantIdResolver tenantIdResolver,
                                             ReportingSystemSettings reportingSystemSettings) {
        this.tenantIdResolver = tenantIdResolver;
        this.reportingSystemSettings = reportingSystemSettings;
    }

    private Optional<ReportingSystemProperties> getResolvedReportingSystemProperties() {
        //TODO: need an id -> human readable key indirection, just using id for now
        final Optional<String> tenantId = tenantIdResolver.getTenantId();
        if (!tenantId.isPresent()) {
            logger.warn("No tenantId Found. Will fall back to default dataSource configuration.");
            return Optional.empty();
        }
        final Optional<ReportingSystemProperties> dataSourceElementsTenant = tenantId
                .flatMap(k -> Optional.ofNullable(reportingSystemSettings.getTenants().get(k)));
        if (!dataSourceElementsTenant.isPresent()) {
            logger.warn("No tenant found for tenantId {} will fall back to default dataSource configuration", tenantId.orElse("NONE"));
        }
        return dataSourceElementsTenant;
    }

    @Override
    public String getAnalyticsTrackingId() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getAnalyticsTrackingId)
                .orElse(reportingSystemSettings.getAnalyticsTrackingId());
    }

    @Override
    public String getInterpretiveGuideUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getInterpretiveGuideUrl)
                .orElse(reportingSystemSettings.getInterpretiveGuideUrl());
    }

    @Override
    public String getAccessDeniedUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getAccessDeniedUrl)
                .orElse(reportingSystemSettings.getAccessDeniedUrl());
    }

    @Override
    public String getIrisVendorId() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getIrisVendorId)
                .orElse(reportingSystemSettings.getIrisVendorId());
    }

    @Override
    public Integer getMinItemDataYear() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getMinItemDataYear)
                .orElse(reportingSystemSettings.getMinItemDataYear());
    }

    @Override
    public Boolean isPercentileDisplayEnabled() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::isPercentileDisplayEnabled)
                .orElse(reportingSystemSettings.isPercentileDisplayEnabled());
    }

    @Override
    public List<String> getReportLanguages() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getReportLanguages)
                .orElse(reportingSystemSettings.getReportLanguages());
    }

    @Override
    public Integer getSchoolYear() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getSchoolYear)
                .orElse(reportingSystemSettings.getSchoolYear());
    }

    @Override
    public StateProperties getState() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getState)
                .orElse(reportingSystemSettings.getState());
    }

    @Override
    public Boolean isTransferAccessEnabled() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::isTransferAccessEnabled)
                .orElse(reportingSystemSettings.isTransferAccessEnabled());
    }

    @Override
    public String getTranslationLocation() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getTranslationLocation)
                .orElse(reportingSystemSettings.getTranslationLocation());
    }

    @Override
    public List<String> getUiLanguages() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getUiLanguages)
                .orElse(reportingSystemSettings.getUiLanguages());
    }

    @Override
    public String getUserGuideUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getUserGuideUrl)
                .orElse(reportingSystemSettings.getUserGuideUrl());
    }

    @Override
    public TargetReportProperties getTargetReport() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getTargetReport)
                .orElse(reportingSystemSettings.getTargetReport());
    }

    @Override
    public Map<StudentFieldType, SearchFieldPermissionLevel> getStudentFields() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getStudentFields)
                .orElse(reportingSystemSettings.getStudentFields());
    }

    @Override
    public List<String> getEffectiveReportLanguages() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getEffectiveReportLanguages)
                .orElse(reportingSystemSettings.getEffectiveReportLanguages());
    }

}
