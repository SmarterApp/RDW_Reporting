package org.opentestsystem.rdw.reporting.common.configuration;

import com.fasterxml.jackson.annotation.JsonView;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

public class ReportingSystemPropertiesResolver implements ReportingSystemProperties {

    private static final Logger logger = LoggerFactory.getLogger(ReportingSystemPropertiesResolver.class);

    private final TenantKeyResolver tenantKeyResolver;
    private final ReportingSystemSettings reportingSystemSettings;

    public ReportingSystemPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                             ReportingSystemSettings reportingSystemSettings) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.reportingSystemSettings = reportingSystemSettings;
        logger.debug("ReportingSystemSettings {}", reportingSystemSettings);
    }

    protected Optional<ReportingSystemProperties> getResolvedReportingSystemProperties() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(reportingSystemSettings.getTenants().get(k)));
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getAnalyticsTrackingId() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getAnalyticsTrackingId)
                .orElse(reportingSystemSettings.getAnalyticsTrackingId());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getInterpretiveGuideUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getInterpretiveGuideUrl)
                .orElse(reportingSystemSettings.getInterpretiveGuideUrl());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getAccessDeniedUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getAccessDeniedUrl)
                .orElse(reportingSystemSettings.getAccessDeniedUrl());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getLandingPageUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getLandingPageUrl)
                .orElse(reportingSystemSettings.getLandingPageUrl());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getIrisVendorId() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getIrisVendorId)
                .orElse(reportingSystemSettings.getIrisVendorId());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Integer getMinItemDataYear() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getMinItemDataYear)
                .orElse(reportingSystemSettings.getMinItemDataYear());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Boolean isPercentileDisplayEnabled() {
        final Optional<Boolean> resolved =
                getResolvedReportingSystemProperties().map(ReportingSystemProperties::isPercentileDisplayEnabled);
        final Optional<Boolean> fallback =
                Optional.ofNullable(reportingSystemSettings.isPercentileDisplayEnabled());
        return Stream.of(resolved, fallback)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .findFirst()
                .orElse(false);
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public List<String> getReportLanguages() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getReportLanguages)
                .orElse(reportingSystemSettings.getReportLanguages());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Integer getSchoolYear() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getSchoolYear)
                .orElse(reportingSystemSettings.getSchoolYear());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public StateProperties getState() {
        return getResolvedReportingSystemProperties()
                .map(props -> props.getState().merge(reportingSystemSettings.getState()))
                .orElse(reportingSystemSettings.getState());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Boolean isTransferAccessEnabled() {
        final Optional<Boolean> resolved =
                getResolvedReportingSystemProperties().map(ReportingSystemProperties::isTransferAccessEnabled);
        final Optional<Boolean> fallback =
                Optional.ofNullable(reportingSystemSettings.isTransferAccessEnabled());
        return Stream.of(resolved, fallback)
                .filter(Optional::isPresent)
                .map(Optional::get)
                .findFirst()
                .orElse(false);
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getTranslationLocation() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getTranslationLocation)
                .orElse(reportingSystemSettings.getTranslationLocation());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public List<String> getUiLanguages() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getUiLanguages)
                .orElse(reportingSystemSettings.getUiLanguages());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public String getUserGuideUrl() {
        return getResolvedReportingSystemProperties()
                .map(ReportingSystemProperties::getUserGuideUrl)
                .orElse(reportingSystemSettings.getUserGuideUrl());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public TargetReportProperties getTargetReport() {
        return getResolvedReportingSystemProperties()
                .map(props -> props.getTargetReport().merge(reportingSystemSettings.getTargetReport()))
                .orElse(reportingSystemSettings.getTargetReport());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Map<StudentFieldType, SearchFieldPermissionLevel> getStudentFields() {
        return getResolvedReportingSystemProperties()
                .map(props ->  mergeMap(props.getStudentFields(), reportingSystemSettings.getStudentFields()))
                .orElse(reportingSystemSettings.getStudentFields());
    }

    @Override
    @JsonView(ReportingSystemPropertiesJsonViews.Public.class)
    public Boolean isTenantAdministrationDisabled() {
        // ignore the tenant-level configuration
        return reportingSystemSettings.isTenantAdministrationDisabled();
    }

    // Returned new map with base values, supplemented with defaults for any missing from base.
    private <K, V> Map<K, V> mergeMap(Map<K, V> base, Map<K, V> defaults) {
        if (base == null) {
            return new HashMap<>(defaults);
        } else if (defaults == null) {
            return  new HashMap<>(base);
        }

        Map<K, V> merged = new HashMap<>(base);
        defaults.forEach(
            (key, value) -> merged.merge(key, value, (v1, v2) -> v1));

        return merged;
    }
}
