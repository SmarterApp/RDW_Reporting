package org.opentestsystem.rdw.reporting.common.model;

import java.util.Objects;

/**
 * Represents a superset of measures for aggregate report row,
 * depending on the report some of the values maybe null as not applicable
 */
public class Measures {
    private static final Measures emptyMeasure = Measures.builder().build();

    Integer avgScaleScore;
    Integer avgStdErr;
    Integer level1Count;
    Integer level2Count;
    Integer level3Count;
    Integer level4Count;
    Integer level5Count;
    Integer level6Count;
    Integer studentCount;

    public Integer getAvgScaleScore() {
        return (avgScaleScore != null && avgScaleScore == 0) ? null : avgScaleScore;
    }

    public Integer getAvgStdErr() {
        return (avgStdErr != null && avgStdErr == 0) ? null : avgStdErr;
    }

    public Integer getLevel1Count() {
        return level1Count;
    }

    public Integer getLevel2Count() {
        return level2Count;
    }

    public Integer getLevel3Count() {
        return level3Count;
    }

    public Integer getLevel4Count() {
        return level4Count;
    }
    public Integer getLevel5Count() {
        return level5Count;
    }

    public Integer getLevel6Count() {
        return level6Count;
    }

    public int getStudentCount() {
        return studentCount != null ? studentCount : nullToZero(level1Count) + nullToZero(level2Count) + nullToZero(level3Count) + nullToZero(level4Count);
    }

    public static Measures getEmptyMeasure() {
        return emptyMeasure;
    }

    private static int nullToZero(final Integer integer) {
        return integer == null ? 0 : integer;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final Measures that = (Measures) o;
        return Objects.equals(avgScaleScore, that.avgScaleScore)
                && Objects.equals(avgStdErr, that.avgStdErr)
                && Objects.equals(level1Count, that.level1Count)
                && Objects.equals(level2Count, that.level2Count)
                && Objects.equals(level3Count, that.level3Count)
                && Objects.equals(level4Count, that.level4Count)
                && Objects.equals(level5Count, that.level5Count)
                && Objects.equals(level6Count, that.level6Count)
                && Objects.equals(studentCount, that.studentCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(avgScaleScore, avgStdErr, level1Count, level2Count, level3Count, level4Count, level5Count, level6Count, studentCount);
    }

    public static Measures.Builder builder() {
        return new Measures.Builder();
    }

    public static class Builder {
        Integer avgScaleScore;
        Integer avgStdErr;
        Integer level1Count;
        Integer level2Count;
        Integer level3Count;
        Integer level4Count;
        Integer level5Count;
        Integer level6Count;
        Integer studentCount;

        public Measures build() {
            final Measures measures = new Measures();
            measures.avgScaleScore = avgScaleScore;
            measures.avgStdErr = avgStdErr;
            measures.level1Count = level1Count;
            measures.level2Count = level2Count;
            measures.level3Count = level3Count;
            measures.level4Count = level4Count;
            measures.level5Count = level5Count;
            measures.level6Count = level6Count;
            measures.studentCount = studentCount;
            return measures;
        }

        public Builder avgScaleScore(final Integer avgScaleScore) {
            this.avgScaleScore = avgScaleScore;
            return this;
        }

        public Builder avgStdErr(final Integer avgStdErr) {
            this.avgStdErr = avgStdErr;
            return this;
        }

        public Builder level1Count(final Integer level1Count) {
            this.level1Count = level1Count;
            return this;
        }

        public Builder level2Count(final Integer level2Count) {
            this.level2Count = level2Count;
            return this;
        }

        public Builder level3Count(final Integer level3Count) {
            this.level3Count = level3Count;
            return this;
        }

        public Builder level4Count(final Integer level4Count) {
            this.level4Count = level4Count;
            return this;
        }


        public Builder level5Count(final Integer level5Count) {
            this.level5Count = level5Count;
            return this;
        }

        public Builder level6Count(final Integer level6Count) {
            this.level6Count = level6Count;
            return this;
        }

        public Builder studentCount(final Integer studentCount) {
            this.studentCount = studentCount;
            return this;
        }
    }
}
