package org.opentestsystem.rdw.reporting.common.i18n;

import com.google.common.collect.ImmutableMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collections;
import java.util.Locale;
import java.util.Map;
import org.opentestsystem.rdw.reporting.common.multitenant.StaticTenantIdUtil;

@Repository
class JdbcTranslationProvider implements TranslationRepository {

    private static final Logger logger = LoggerFactory.getLogger(JdbcTranslationProvider.class);

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.translation.findAllForLanguage}")
    private String findAllForLanguageQuery;

    @Autowired
    JdbcTranslationProvider(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Map<String, String> getTranslationsByCode(final Locale locale) {
        if (locale == null) {
            return Collections.emptyMap();
        }

        //can not look up translations if tenant can't be resolved, typically login page only
        if (!StaticTenantIdUtil.tenantId().isPresent()) {
            logger.debug("Unable to look up translations, no logged in user.");
            return Collections.emptyMap();
        }

        final ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
        template.query(
                findAllForLanguageQuery,
                new MapSqlParameterSource().addValue("language_code", locale.getISO3Language()),
                (row) -> {
                    builder.put(
                            row.getString("label_code"),
                            row.getString("label"));
                }
        );
        return builder.build();
    }
}
