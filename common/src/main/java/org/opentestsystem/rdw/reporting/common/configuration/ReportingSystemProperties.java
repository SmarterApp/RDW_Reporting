package org.opentestsystem.rdw.reporting.common.configuration;

import com.google.common.base.Objects;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;

import java.util.List;
import java.util.Map;

/**
 * Reporting configuration.
 */
public interface ReportingSystemProperties {

    /**
     * Note: This is webapp specific
     *
     * @return The analytics tracking id
     */
    String getAnalyticsTrackingId();

    /**
     * Note: This is webapp specific
     *
     * @return The interpretive guide url
     */
    String getInterpretiveGuideUrl();

    /**
     * Note: This is webapp specific
     *
     * @return The access denied url
     */
    String getAccessDeniedUrl();

    /**
     * Note: This is webapp specific
     *
     * @return The landing page url
     */
    String getLandingPageUrl();

    /**
     * Note: This is webapp (reporting-service section) specific
     *
     * @return Iris vendor ID
     */
    String getIrisVendorId();

    /**
     * Note: This is webapp (reporting-service section) specific
     *
     * @return The minimum year with item level data
     */
    Integer getMinItemDataYear();

    /**
     * Note: This is webapp (reporting-service section) specific
     * <p>
     * This property controls whether or not to display the norms percentile
     * information button within the web UI.
     *
     * @return True if the UI should display norms percentile information
     */
    Boolean isPercentileDisplayEnabled();

    /**
     * Note: This is report-processor specific
     *
     * @return The available report generation languages in addition to English
     */
    List<String> getReportLanguages();

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     *
     * @return current school year
     */
    Integer getSchoolYear();

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     *
     * @return The state configuration
     */
    StateProperties getState();

    /**
     * Note: This is shared between all apps and is used on the backend as well as the front end
     * True if users with access to the students' most recent schools grant access
     * to the entire student exam history.
     * NOTE: this property is respected by both 'rdw-reporting-webapp' and 'rdw-reporting-report-processor'
     *
     * @return True if transfer access is enabled
     */
    Boolean isTransferAccessEnabled();

    /**
     * This is the location/prefix of translation files
     * (es.json to provide Spanish, en.json to override display values, etc)
     * (ex: 'binary-${spring.cloud.config.uri}/*&#47;*&#47;master/')
     *
     * @return The prefix for translation resources.
     */
    String getTranslationLocation();

    /**
     * Note: This is webapp specific
     *
     * @return The available webapp UI languages in addition to English ("en")
     */
    List<String> getUiLanguages();

    /**
     * Note: This is webapp specific
     *
     * @return The user guide url
     */
    String getUserGuideUrl();

    /**
     * Note: This is webapp specific
     *
     * @return The target report configuration
     */
    TargetReportProperties getTargetReport();

    /**
     * Note: This is reporting-service and aggregate-service specific
     *
     * @return Map of student fields to permission levels used for suppressing fields in the UI
     */
    Map<StudentFieldType, SearchFieldPermissionLevel> getStudentFields();

    /**
     * Flag to turn on or off the tenant administration portion of the webapp
     *
     * @return True if the tenant admin UI is disabled
     */
    Boolean isTenantAdministrationDisabled();

    class StateProperties {

        private String name;
        private String code;

        /**
         * @return the state code
         */
        public String getName() {
            return name;
        }

        public void setName(final String name) {
            this.name = name;
        }

        /**
         * @return the state name
         */
        public String getCode() {
            return code;
        }

        public void setCode(final String code) {
            this.code = code;
        }

        @Override
        public String toString() {
            return "StateProperties{" +
                    "name='" + name + '\'' +
                    ", code='" + code + '\'' +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof StateProperties)) return false;
            StateProperties that = (StateProperties) o;
            return Objects.equal(name, that.name) &&
                    Objects.equal(code, that.code);
        }

        @Override
        public int hashCode() {
            return Objects.hashCode(name, code);
        }
    }

    class TargetReportProperties {

        private Double insufficientDataCutoff;
        private Integer minNumberOfStudents;

        /**
         * @return The standard error cutoff for when target values are considered Insufficient
         */
        public Double getInsufficientDataCutoff() {
            return insufficientDataCutoff;
        }

        public void setInsufficientDataCutoff(final Double insufficientDataCutoff) {
            this.insufficientDataCutoff = insufficientDataCutoff;
        }

        /**
         * @return The minimum number of students needed to display a target aggregate report
         */
        public Integer getMinNumberOfStudents() {
            return minNumberOfStudents;
        }

        public void setMinNumberOfStudents(final Integer minNumberOfStudents) {
            this.minNumberOfStudents = minNumberOfStudents;
        }

        @Override
        public String toString() {
            return "TargetReportProperties{" +
                    "insufficientDataCutoff=" + insufficientDataCutoff +
                    ", minNumberOfStudents=" + minNumberOfStudents +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof TargetReportProperties)) return false;
            TargetReportProperties that = (TargetReportProperties) o;
            return Objects.equal(insufficientDataCutoff, that.insufficientDataCutoff) &&
                    Objects.equal(minNumberOfStudents, that.minNumberOfStudents);
        }

        @Override
        public int hashCode() {
            return Objects.hashCode(insufficientDataCutoff, minNumberOfStudents);
        }
    }


}
