package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * This class provides base functionality for all aggregate report queries.<br/><br/>
 *
 * <p>
 * Note regarding schoolYears and subjectCodes. Perhaps they shouldn't be in this base class
 * because the behavior is not common across all concrete report classes. But they are. The
 * concrete classes override the behavior as necessary to enforce their specific rules:<ul>
 *     <li>subjectCodes: TargetReport:1, Longitudinal:N, Claim:N(map), AltScore:N(map), Custom:N</li>
 *     <li>schoolYears: TargetReport:1, Longitudinal:1, Claim:N, AltScore:N, Custom:N</li>
 * </ul>
 * </p>
 */
public abstract class AbstractAggregateReportQuery extends AbstractReportQuery implements AggregateQuery {
    private ImmutableSet<Integer> schoolYears;
    private ImmutableSet<String> subjectCodes;
    private String assessmentTypeCode;
    private ImmutableSet<String> assessmentGradeCodes;
    private boolean includeState;
    private boolean includeAllDistricts;
    private boolean includeAllSchoolsOfDistricts;
    private boolean includeAllDistrictsOfSchools;
    private ImmutableSet<Long> districtIds;
    private ImmutableSet<Long> schoolIds;
    private ImmutableSet<String> completenessCodes;
    private ImmutableSet<String> administrativeConditionCodes;

    // display preferences used by the UI to present the report
    private boolean showEmpty = true;
    private String valueDisplayType;
    private String achievementLevelDisplayType;
    private ImmutableList<String> columnOrder;

    // use of these is mutually exclusive with subgroups
    private ImmutableSet<DimensionType> dimensionTypes;
    private StudentFilters studentFilters;

    // defines custom subgroups
    private Map<String, StudentFilters> subgroups;

    @Override
    public boolean isFilteredSubgroupQuery() {
        return !getSubgroups().isEmpty();
    }

    @Override
    public Set<Integer> getSchoolYears() {
        return safeImmutableOf(schoolYears);
    }

    @Override
    public Set<String> getSubjectCodes() {
        return safeImmutableOf(subjectCodes);
    }

    @Override
    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    @Override
    public Set<Long> getDistrictIds() {
        return safeImmutableOf(districtIds);
    }

    @Override
    public Set<Long> getSchoolIds() {
        return safeImmutableOf(schoolIds);
    }

    public Set<String> getAssessmentGradeCodes() {
        return safeImmutableOf(assessmentGradeCodes);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public boolean isIncludeAllSchoolsOfDistricts() {
        return includeAllSchoolsOfDistricts;
    }

    public boolean isIncludeAllDistrictsOfSchools() {
        return includeAllDistrictsOfSchools;
    }

    public Set<String> getCompletenessCodes() {
        return safeImmutableOf(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return safeImmutableOf(administrativeConditionCodes);
    }

    public boolean isShowEmpty() {
        return showEmpty;
    }

    public String getValueDisplayType() {
        return valueDisplayType;
    }

    public String getAchievementLevelDisplayType() {
        return achievementLevelDisplayType;
    }

    public List<String> getColumnOrder() {
        return safeImmutableOf(columnOrder);
    }

    public Set<DimensionType> getDimensionTypes() {
        return safeImmutableOf(dimensionTypes);
    }

    public StudentFilters getStudentFilters() {
        return studentFilters == null ? new StudentFilters() : studentFilters;
    }

    public Map<String, StudentFilters> getSubgroups() {
        return safeImmutableOf(subgroups);
    }

    public abstract <B extends Builder<? extends AbstractAggregateReportQuery, B>> B copy();

    @SuppressWarnings("unchecked")
    public static abstract class Builder<A extends AbstractAggregateReportQuery, B extends Builder<A, B>> extends AbstractReportQuery.Builder<A, B> {
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private String assessmentTypeCode;
        private Set<String> assessmentGradeCodes;
        private boolean includeState;
        private boolean includeAllDistricts;
        private boolean includeAllSchoolsOfDistricts;
        private boolean includeAllDistrictsOfSchools;
        private Set<Long> districtIds;
        private Set<Long> schoolIds;
        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private boolean showEmpty = true;
        private String valueDisplayType;
        private String achievementLevelDisplayType;
        private List<String> columnOrder;
        private Set<DimensionType> dimensionTypes;
        private StudentFilters studentFilters;
        private Map<String, StudentFilters> subgroups;

        protected AbstractAggregateReportQuery build(final AbstractAggregateReportQuery reportQuery) {
            super.build(reportQuery);
            reportQuery.subjectCodes = safeImmutableOf(subjectCodes);
            reportQuery.schoolYears = safeImmutableOf(schoolYears);
            reportQuery.assessmentTypeCode = assessmentTypeCode;
            reportQuery.assessmentGradeCodes = safeImmutableOf(assessmentGradeCodes);
            reportQuery.includeState = includeState;
            reportQuery.includeAllDistricts = includeAllDistricts;
            reportQuery.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            reportQuery.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            reportQuery.schoolIds = safeImmutableOf(schoolIds);
            reportQuery.districtIds = safeImmutableOf(districtIds);
            reportQuery.completenessCodes = safeImmutableOf(completenessCodes);
            reportQuery.administrativeConditionCodes = safeImmutableOf(administrativeConditionCodes);
            reportQuery.showEmpty = showEmpty;
            reportQuery.valueDisplayType = valueDisplayType;
            reportQuery.achievementLevelDisplayType = achievementLevelDisplayType;
            reportQuery.columnOrder = safeImmutableOf(columnOrder);
            reportQuery.dimensionTypes = safeImmutableOf(dimensionTypes);
            reportQuery.studentFilters = studentFilters;
            reportQuery.subgroups = safeImmutableOf(subgroups);
            return reportQuery;
        }

        protected B copy(final AbstractAggregateReportQuery reportQuery) {
            // when copying, we need mutable collections for those that can be modified
            // also keep in mind that marshalled instances may have null collections
            return super.copy(reportQuery)
                    .subjectCodes(reportQuery.subjectCodes)
                    .schoolYears(reportQuery.schoolYears)
                    .assessmentTypeCode(reportQuery.assessmentTypeCode)
                    .assessmentGradeCodes(reportQuery.assessmentGradeCodes)
                    .includeState(reportQuery.includeState)
                    .includeAllDistricts(reportQuery.includeAllDistricts)
                    .includeAllSchoolsOfDistricts(reportQuery.includeAllSchoolsOfDistricts)
                    .includeAllDistrictsOfSchools(reportQuery.includeAllDistrictsOfSchools)
                    .schoolIds(reportQuery.schoolIds)
                    .districtIds(reportQuery.districtIds)
                    .completenessCodes(reportQuery.completenessCodes)
                    .administrativeConditionCodes(reportQuery.administrativeConditionCodes)
                    .showEmpty(reportQuery.showEmpty)
                    .valueDisplayType(reportQuery.valueDisplayType)
                    .achievementLevelDisplayType(reportQuery.achievementLevelDisplayType)
                    .columnOrder(reportQuery.columnOrder)
                    .dimensionTypes(newHashSet(reportQuery.getDimensionTypes()))
                    .studentFilters(reportQuery.studentFilters)
                    .subgroups(newHashMap(reportQuery.getSubgroups()));
        }

        public B subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return (B) this;
        }

        public B schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return (B) this;
        }

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        public B assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return (B) this;
        }

        public B includeState(final boolean includeState) {
            this.includeState = includeState;
            return (B) this;
        }

        public B includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return (B) this;
        }

        public B includeAllSchoolsOfDistricts(final boolean includeAllSchoolsOfDistricts) {
            this.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            return (B) this;
        }

        public B includeAllDistrictsOfSchools(final boolean includeAllDistrictsOfSchools) {
            this.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            return (B) this;
        }

        public B schoolIds(final Set<Long> schoolIds) {
            this.schoolIds = schoolIds;
            return (B) this;
        }

        public B districtIds(final Set<Long> districtIds) {
            this.districtIds = districtIds;
            return (B) this;
        }

        public B completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return (B) this;
        }

        public B administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return (B) this;
        }

        public B showEmpty(final boolean showEmpty) {
            this.showEmpty = showEmpty;
            return (B) this;
        }

        public B valueDisplayType(final String valueDisplayType) {
            this.valueDisplayType = valueDisplayType;
            return (B) this;
        }

        public B achievementLevelDisplayType(final String achievementLevelDisplayType) {
            this.achievementLevelDisplayType = achievementLevelDisplayType;
            return (B) this;
        }

        public B columnOrder(final List<String> columnOrder) {
            this.columnOrder = columnOrder;
            return (B) this;
        }

        public B dimensionTypes(final Set<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return (B) this;
        }

        public B dimensionType(final DimensionType dimensionType) {
            if (dimensionTypes == null) {
                dimensionTypes = newHashSet();
            }
            dimensionTypes.add(dimensionType);
            return (B) this;
        }

        public B studentFilters(final StudentFilters studentFilters) {
            this.studentFilters = studentFilters;
            return (B) this;
        }

        public B subgroups(final Map<String, StudentFilters> subgroups) {
            this.subgroups = subgroups;
            return (B) this;
        }

        public B subgroup(final String label, final StudentFilters filters) {
            if (this.subgroups == null) {
                this.subgroups = newHashMap();
            }
            this.subgroups.put(label, filters);
            return (B) this;
        }
    }
}
