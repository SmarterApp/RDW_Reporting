package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * This class provides base functionality for all aggregate report queries.
 */
@SuppressWarnings("unchecked")
public abstract class AbstractAggregateReportQuery extends AbstractReportQuery implements AggregateQuery {
    protected String assessmentTypeCode;
    protected ImmutableSet<String> assessmentGradeCodes;
    protected ImmutableSet<Long> districtIds;
    protected ImmutableSet<Long> schoolIds;
    protected ImmutableSet<String> completenessCodes;
    protected ImmutableSet<String> administrativeConditionCodes;

    //pass through values
    protected boolean showEmpty = true;
    protected String valueDisplayType;
    protected String achievementLevelDisplayType;
    protected ImmutableList<String> columnOrder;

    //defines custom subgroups
    protected ImmutableMap<String, StudentFilters> subgroups;

    //not supported with the subgroups
    protected ImmutableSet<DimensionType> dimensionTypes;
    protected StudentFilters studentFilters;

    public abstract boolean isFilteredSubgroupQuery();

    public Set<DimensionType> getDimensionTypes() {
        return safeImmutableOf(dimensionTypes);
    }

    public StudentFilters getStudentFilters() {
        return studentFilters == null ? new StudentFilters() : studentFilters;
    }

    @Override
    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    @Override
    public Set<Long> getDistrictIds() {
        return safeImmutableOf(districtIds);
    }

    @Override
    public Set<Long> getSchoolIds() {
        return safeImmutableOf(schoolIds);
    }

    public Set<String> getAssessmentGradeCodes() {
        return safeImmutableOf(assessmentGradeCodes);
    }

    public boolean isShowEmpty() {
        return showEmpty;
    }

    public List<String> getColumnOrder() {
        return safeImmutableOf(columnOrder);
    }

    public Set<String> getCompletenessCodes() {
        return safeImmutableOf(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return safeImmutableOf(administrativeConditionCodes);
    }

    public static abstract class Builder<A extends AbstractAggregateReportQuery, B extends Builder<A, B>> extends AbstractReportQuery.Builder<A, B> {

        private String assessmentTypeCode;
        private Set<String> assessmentGradeCodes;
        private Set<Long> districtIds;
        private Set<Long> schoolIds;
        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private boolean showEmpty = true;
        private List<String> columnOrder;
        private Set<DimensionType> dimensionTypes;
        private StudentFilters studentFilters;

        protected A build(A value) {
            super.build(value);
            value.assessmentTypeCode = assessmentTypeCode;
            value.assessmentGradeCodes = safeImmutableOf(assessmentGradeCodes);
            value.schoolIds = safeImmutableOf(schoolIds);
            value.districtIds = safeImmutableOf(districtIds);
            value.completenessCodes = safeImmutableOf(completenessCodes);
            value.administrativeConditionCodes = safeImmutableOf(administrativeConditionCodes);
            value.showEmpty = showEmpty;
            value.columnOrder = safeImmutableOf(columnOrder);
            value.dimensionTypes = dimensionTypes == null ? null : ImmutableSet.copyOf(dimensionTypes);
            value.studentFilters = studentFilters;
            return value;
        }

        protected B copy(final A value) {
            return super.copy(value)
                    .assessmentTypeCode(value.assessmentTypeCode)
                    .assessmentGradeCodes(value.assessmentGradeCodes)
                    .schoolIds(value.schoolIds)
                    .districtIds(value.districtIds)
                    .completenessCodes(value.completenessCodes)
                    .administrativeConditionCodes(value.administrativeConditionCodes)
                    .showEmpty(value.showEmpty)
                    .columnOrder(value.columnOrder)
                    .dimensionTypes(value.dimensionTypes == null ? null : newHashSet(value.dimensionTypes)) // TODO redundant?
                    .studentFilters(value.studentFilters);
        }

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        public B assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return (B) this;
        }

        public B schoolIds(final Set<Long> schoolIds) {
            this.schoolIds = schoolIds;
            return (B) this;
        }

        public B districtIds(final Set<Long> districtIds) {
            this.districtIds = districtIds;
            return (B) this;
        }

        public B completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return (B) this;
        }

        public B administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return (B) this;
        }

        public B showEmpty(final boolean showEmpty) {
            this.showEmpty = showEmpty;
            return (B) this;
        }

        public B columnOrder(final List<String> columnOrder) {
            this.columnOrder = columnOrder;
            return (B) this;
        }

        public B dimensionTypes(final Set<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return (B) this;
        }

        public B dimensionType(final DimensionType dimensionType) {
            if (dimensionTypes == null) dimensionTypes = newHashSet();
            dimensionTypes.add(dimensionType);
            return (B) this;
        }

        public B studentFilters(final StudentFilters studentFilters) {
            this.studentFilters = studentFilters;
            return (B) this;
        }

    }
}
