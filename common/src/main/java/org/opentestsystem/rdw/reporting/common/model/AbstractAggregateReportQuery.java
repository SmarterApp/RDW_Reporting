package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Set;

/**
 * This class provides base functionality for Aggregate report queries.
 */
public abstract class AbstractAggregateReportQuery implements AggregateQuery {
    private String assessmentTypeCode;
    private ImmutableSet<String> subjectCodes;
    private ImmutableSet<String> assessmentGradeCodes;
    private boolean includeState;
    private boolean includeAllDistricts;
    private boolean includeAllSchoolsOfDistricts;
    private boolean includeAllDistrictsOfSchools;
    private ImmutableSet<Long> districtIds;
    private ImmutableSet<Long> schoolIds;
    private ImmutableSet<String> completenessCodes;
    private ImmutableSet<String> administrativeConditionCodes;
    //pass through values
    private String valueDisplayType;
    private String achievementLevelDisplayType;
    private ImmutableList<String> columnOrder;

    @Override
    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    @Override
    public Set<Long> getDistrictIds() {
        return getNullSafe(districtIds);
    }

    @Override
    public Set<Long> getSchoolIds() {
        return getNullSafe(schoolIds);
    }

    public Set<String> getSubjectCodes() {
        return getNullSafe(subjectCodes);
    }

    public Set<String> getAssessmentGradeCodes() {
        return getNullSafe(assessmentGradeCodes);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public boolean isIncludeAllSchoolsOfDistricts() {
        return includeAllSchoolsOfDistricts;
    }

    public boolean isIncludeAllDistrictsOfSchools() {
        return includeAllDistrictsOfSchools;
    }


    public String getValueDisplayType() {
        return valueDisplayType;
    }

    public String getAchievementLevelDisplayType() {
        return achievementLevelDisplayType;
    }

    public List<String> getColumnOrder() {
        return getNullSafe(columnOrder);
    }

    public Set<String> getCompletenessCodes() {
        return getNullSafe(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return getNullSafe(administrativeConditionCodes);
    }

    protected <T> ImmutableSet<T> getNullSafe(final ImmutableSet<T> values) {
        return values == null ? ImmutableSet.of() : values;
    }

    protected <T> ImmutableList<T> getNullSafe(final ImmutableList<T> values) {
        return values == null ? ImmutableList.of() : values;
    }

    protected static abstract class Builder<B extends Builder, V extends AbstractAggregateReportQuery> {
        private String assessmentTypeCode;
        private Set<String> subjectCodes;
        private Set<String> assessmentGradeCodes;
        private boolean includeState;
        private boolean includeAllDistricts;
        private boolean includeAllSchoolsOfDistricts;
        private boolean includeAllDistrictsOfSchools;
        private Set<Long> districtIds;
        private Set<Long> schoolIds;
        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private String valueDisplayType;
        private String achievementLevelDisplayType;
        private List<String> columnOrder;

        protected abstract V createInstance();

        public V build() {
            final V original = createInstance();
            final AbstractAggregateReportQuery query = original;
            query.assessmentTypeCode = assessmentTypeCode;
            query.subjectCodes = asImmutable(subjectCodes);
            query.assessmentGradeCodes = asImmutable(assessmentGradeCodes);
            query.includeState = includeState;
            query.includeAllDistricts = includeAllDistricts;
            query.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            query.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            query.schoolIds = asImmutable(schoolIds);
            query.districtIds = asImmutable(districtIds);
            query.completenessCodes = asImmutable(completenessCodes);
            query.administrativeConditionCodes = asImmutable(administrativeConditionCodes);
            query.valueDisplayType = valueDisplayType;
            query.achievementLevelDisplayType = achievementLevelDisplayType;
            query.columnOrder = asImmutable(columnOrder);
            return original;
        }

        public B copy(final V value) {
            final AbstractAggregateReportQuery query = value;
            this.assessmentTypeCode = query.assessmentTypeCode;
            this.subjectCodes = query.subjectCodes;
            this.assessmentGradeCodes = query.assessmentGradeCodes;
            this.includeState = query.includeState;
            this.includeAllDistricts = query.includeAllDistricts;
            this.includeAllSchoolsOfDistricts = query.includeAllSchoolsOfDistricts;
            this.includeAllDistrictsOfSchools = query.includeAllDistrictsOfSchools;
            this.schoolIds = query.schoolIds;
            this.districtIds = query.districtIds;
            this.completenessCodes = query.completenessCodes;
            this.administrativeConditionCodes = query.administrativeConditionCodes;
            this.valueDisplayType = query.valueDisplayType;
            this.achievementLevelDisplayType = query.achievementLevelDisplayType;
            this.columnOrder = query.columnOrder;

            return (B) this;
        }

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        public B subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return (B) this;
        }


        public B assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return (B) this;
        }

        public B includeState(final boolean includeState) {
            this.includeState = includeState;
            return (B) this;
        }

        public B includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return (B) this;
        }


        public B includeAllSchoolsOfDistricts(final boolean includeAllSchoolsOfDistricts) {
            this.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            return (B) this;
        }

        public B includeAllDistrictsOfSchools(final boolean includeAllDistrictsOfSchools) {
            this.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            return (B) this;
        }

        public B schoolIds(final Set<Long> schoolIds) {
            this.schoolIds = schoolIds;
            return (B) this;
        }

        public B districtIds(final Set<Long> districtIds) {
            this.districtIds = districtIds;
            return (B) this;
        }

        public B completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return (B) this;
        }

        public B administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return (B) this;
        }

        public B valueDisplayType(final String valueDisplayType) {
            this.valueDisplayType = valueDisplayType;
            return (B) this;
        }

        public B achievementLevelDisplayType(final String achievementLevelDisplayType) {
            this.achievementLevelDisplayType = achievementLevelDisplayType;
            return (B) this;
        }

        public B columnOrder(final List<String> columnOrder) {
            this.columnOrder = columnOrder;
            return (B) this;
        }

        protected <T> ImmutableSet<T> asImmutable(final Set<T> value) {
            return value == null ? null : ImmutableSet.copyOf(value);
        }

        protected <T> ImmutableList<T> asImmutable(final List<T> value) {
            return value == null ? null : ImmutableList.copyOf(value);
        }
    }
}
