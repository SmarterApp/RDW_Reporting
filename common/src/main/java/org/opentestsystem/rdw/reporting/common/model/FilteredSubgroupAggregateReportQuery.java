package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableMap;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

/**
 * This class represents common attributes for aggregate report query specifying the break-downs
 * for the report as named filter sets.
 */
public abstract class FilteredSubgroupAggregateReportQuery extends AbstractAggregateReportQuery {
    private ImmutableMap<String, StudentFilters> subgroups;

    public Map<String, StudentFilters> getSubgroups() {
        return subgroups == null ? ImmutableMap.of() : subgroups;
    }

    @SuppressWarnings("unchecked")
    public abstract static class Builder<B extends Builder, Q extends FilteredSubgroupAggregateReportQuery> extends AbstractAggregateReportQuery.Builder<B, Q> {
        private Map<String, StudentFilters> subgroups;

        @Override
        public Q build() {
            final FilteredSubgroupAggregateReportQuery query = super.build();
            query.subgroups = subgroups == null ? null : ImmutableMap.copyOf(subgroups);
            return (Q) query;
        }

        @Override
        public B copy(final Q query) {
            super.copy(query);
            this.subgroups = newHashMap(query.getSubgroups());
            return (B) this;
        }

        public B subgroups(final Map<String, StudentFilters> subgroups) {
            this.subgroups = subgroups;
            return (B) this;
        }

        public B subgroup(final String label, final StudentFilters filters) {
            if (this.subgroups == null) {
                this.subgroups = newHashMap();
            }
            this.subgroups.put(label, filters);
            return (B) this;
        }
    }
}
