package org.opentestsystem.rdw.reporting.common.model;


import java.util.Locale;

public abstract class AbstractPrintableReportQuery extends AbstractReportQuery {

    // TODO improvement would be to use arrays for these
    protected String assessmentTypeCode;
    protected String subjectCode;

    protected int schoolYear;
    protected Locale language;
    protected boolean accommodationsVisible;
    protected boolean disableTransferAccess;

    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public Locale getLanguage() {
        return language;
    }

    public boolean isAccommodationsVisible() {
        return accommodationsVisible;
    }

    public boolean isDisableTransferAccess() {
        return disableTransferAccess;
    }

    @SuppressWarnings({"unchecked"})
    public static abstract class Builder<A extends AbstractPrintableReportQuery, B extends Builder<A, B>> extends AbstractReportQuery.Builder<A, B> {

        private String assessmentTypeCode;
        private String subjectCode;
        private int schoolYear;
        private Locale language;
        private boolean accommodationsVisible;
        private boolean disableTransferAccess;

        public B assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return (B) this;
        }

        public B subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return (B) this;
        }

        public B schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return (B) this;
        }

        public B language(final Locale language) {
            this.language = language;
            return (B) this;
        }

        public B accommodationsVisible(final boolean accommodationsVisible) {
            this.accommodationsVisible = accommodationsVisible;
            return (B) this;
        }

        public B disableTransferAccess(final boolean disableTransferAccess) {
            this.disableTransferAccess = disableTransferAccess;
            return (B) this;
        }

        protected B copy(final B builder, final A value) {
            return super.copy(value)
                    .assessmentTypeCode(value.assessmentTypeCode)
                    .subjectCode(value.subjectCode)
                    .schoolYear(value.schoolYear)
                    .language(value.language)
                    .accommodationsVisible(value.accommodationsVisible)
                    .disableTransferAccess(value.disableTransferAccess);
        }

        protected A build(final A value) {
            super.build(value);
            value.assessmentTypeCode = assessmentTypeCode;
            value.subjectCode = subjectCode;
            value.schoolYear = schoolYear;
            value.language = language;
            value.accommodationsVisible = accommodationsVisible;
            value.disableTransferAccess = disableTransferAccess;
            return value;
        }

    }
}
