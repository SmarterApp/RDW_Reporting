package org.opentestsystem.rdw.reporting.common.report.ica;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollments;
import org.opentestsystem.rdw.reporting.common.report.UserPermissions;
import org.opentestsystem.rdw.reporting.common.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getExamFilterParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.nullOrEmptyToDefault;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.safeSplit;

@Repository
class JdbcIcaReportRepository implements IcaReportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findLatestIcaByStudentIdAndSchoolYearAndSubject}")
    private String findLatestIcaByStudentIdAndSchoolYearAndSubject;

    @Value("${sql.exam.findAllIcasByStudentIdsAndQueryParamsUnknownPermissions}")
    private String findAllIcasByStudentIdsAndQueryParamsUnknownPermissions;

    @Value("${sql.exam.findAllIcasByStudentIdsAndQueryParamsIndividualPermissions}")
    private String findAllIcasByStudentIdsAndQueryParamsIndividualPermissions;

    @Value("${sql.exam.findAllIcasByStudentIdsAndQueryParamsGroupPermissions}")
    private String findAllIcasByStudentIdsAndQueryParamsGroupPermissions;

    @Value("${app.state.code}")
    private String stateCode;

    @Autowired
    JdbcIcaReportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public IcaReport findOneByStudentIdAndSchoolYear(
            @NotNull final Map<String, Permission> permissions,
            final Set<Long> groupIds,
            final long studentId,
            final int schoolYear,
            final int subjectId) {

        try {
            return template.queryForObject(
                    findLatestIcaByStudentIdAndSchoolYearAndSubject,
                    ImmutableMap.<String, Object>builder()
                            .putAll(getSecurityParameters(permissions))
                            .put("group_ids", nullOrEmptyToDefault(groupIds, UNMATCHABLE_IDS))
                            .put("student_id", studentId)
                            .put("subject_id", subjectId)
                            .put("school_year", schoolYear)
                            .build(),
                    (row, index) -> IcaReport.builder()
                            .assessment(Assessments.mapWithCutPoints(row, Assessment.builder(), "asmt_").build())
                            .exam(Exams.map(row, Exam.builder())
                                    .accommodationCodes(safeSplit(row.getString("available_accommodation_codes"), "|"))
                                    .build()
                            )
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(StudentEnrollments.map(row, stateCode))
                            .build()
            );
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

    @Override
    public Map<Long, Map<Subject, IcaReport>> findAllForStudentsByExamFilter(
            @NotNull final UserPermissions userPermissions,
            final Collection<Long> studentIds,
            final ExamQueryParams examQueryParams) {

        final Map<Long, Map<Subject, IcaReport>> reportsByStudent = new HashMap<>();
        final String query = getExamFilterQuery(examQueryParams.getQueryPermissionType());

        template.query(
                query,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(userPermissions, examQueryParams.getQueryPermissionType()))
                        .addValues(getExamFilterParameters(examQueryParams))
                        .addValue("student_ids", studentIds),
                (row) -> {
                    final IcaReport report = IcaReport.builder()
                            .assessment(Assessments.mapWithCutPoints(row, Assessment.builder(), "asmt_").build())
                            .exam(Exams.map(row, Exam.builder())
                                    .accommodationCodes(safeSplit(row.getString("available_accommodation_codes"), "|"))
                                    .build())
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(StudentEnrollments.map(row, stateCode))
                            .build();

                    final long studentId = report.getStudent().getId();
                    final Subject subject = report.getAssessment().getSubject();
                    reportsByStudent
                            .computeIfAbsent(studentId, (id) -> new HashMap<>())
                            .put(subject, report);
                }
        );

        return reportsByStudent;
    }

    private String getExamFilterQuery(final ExamQueryParams.ExamQueryPermissionType queryPermissionType) {
        switch (queryPermissionType) {
            case Unknown:
                return findAllIcasByStudentIdsAndQueryParamsUnknownPermissions;
            case Individual:
                return findAllIcasByStudentIdsAndQueryParamsIndividualPermissions;
            case Group:
                return findAllIcasByStudentIdsAndQueryParamsGroupPermissions;
            default:
                throw new IllegalArgumentException("Unknown query permission type: " + queryPermissionType);
        }
    }

}
