package org.opentestsystem.rdw.reporting.common.report.ica;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.reporting.common.jdbc.Assessments;
import org.opentestsystem.rdw.reporting.common.jdbc.Exams;
import org.opentestsystem.rdw.reporting.common.jdbc.Students;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollments;
import org.opentestsystem.rdw.reporting.common.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
class JdbcIcaReportRepository implements IcaReportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.exam.findLatestIcaByStudentIdAndSchoolYear}")
    private String findLatestIcaByStudentIdAndSchoolYearQuery;

    @Value("${app.state.code}")
    private String stateCode;

    @Autowired
    JdbcIcaReportRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public IcaReport findOneByStudentIdAndSchoolYear(
            @NotNull final PermissionScope permissionScope,
            final long studentId,
            final int schoolYear,
            final int subjectId) {

        try {
            return template.queryForObject(
                    findLatestIcaByStudentIdAndSchoolYearQuery,
                    ImmutableMap.<String, Object>builder()
                            .putAll(getSecurityParameters(permissionScope))
                            .put("student_id", studentId)
                            .put("subject_id", subjectId)
                            .put("school_year", schoolYear)
                            .build(),
                    (row, index) -> IcaReport.builder()
                            .assessment(Assessments.map(row, Assessment.builder(), "asmt_")
                                    .cutPoints(ImmutableList.of(
                                            row.getInt("asmt_min_score"),
                                            row.getInt("asmt_cut_point_1"),
                                            row.getInt("asmt_cut_point_2"),
                                            row.getInt("asmt_cut_point_3"),
                                            row.getInt("asmt_max_score")
                                    ))
                                    .build()
                            )
                            .exam(Exams.map(row, Exam.builder())
                                    .accommodationCodes(getAccommodationCodes(row))
                                    .build()
                            )
                            .student(Students.map(row, Student.builder(), "student_").build())
                            .studentEnrollment(StudentEnrollments.map(row, stateCode))
                            .build()
            );
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

    private List<String> getAccommodationCodes(final ResultSet row) throws SQLException {
        final String pipeDelimitedCodes = row.getString("available_accommodation_codes");
        if (pipeDelimitedCodes == null) {
            return null;
        }
        return ImmutableList.copyOf(pipeDelimitedCodes.split("|"));
    }

}
