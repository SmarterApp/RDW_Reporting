package org.opentestsystem.rdw.reporting.common.report.processor;

import com.google.common.base.Joiner;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

import static com.google.common.collect.Lists.newArrayList;

/**
 * HtmlToPdfProcessor that uses wkhtmltopdf external library to generate PDFs
 *
 * @deprecated use {@link WkhtmltopdfWebServiceHtmlToPdfProcessor}
 */
@Deprecated
public class WkhtmltopdfCommandLineHtmlToPdfProcessor implements HtmlToPdfProcessor {

    private static final String COMMAND = "wkhtmltopdf";
    private static final String OPTION_GRAYSCALE = "--grayscale";
    private static final String OPTION_OUTPUT_TO_STDOUT = "-";

    @Override
    public InputStream process(final byte[] html, final PrintOptions options) {
        try {
            final File temporaryFile = createTemporaryFile();
            FileUtils.writeByteArrayToFile(temporaryFile, html);
            return createPDFFromFile(createCommand(temporaryFile, options));
        } catch (IOException | InterruptedException exception) {
            throw new RuntimeException("Error creating PDF", exception);
        }
    }

    private String createCommand(final File file, final PrintOptions options) {
        final List<String> command = newArrayList();
        command.add(COMMAND);
        if (options.isGrayscale()) {
            command.add(OPTION_GRAYSCALE);
        }
        command.add(file.getPath());
        command.add(OPTION_OUTPUT_TO_STDOUT);
        return Joiner.on(" ").join(command);
    }

    private File createTemporaryFile() throws IOException {
        final String temporaryFilename = "wkhtmltopdf-" + UUID.randomUUID().toString();
        return File.createTempFile(temporaryFilename, ".html");
    }

    private InputStream createPDFFromFile(final String command) throws IOException, InterruptedException {

        final Process process = Runtime.getRuntime().exec(command);
        final byte[] errorBytes = IOUtils.toByteArray(process.getErrorStream());

        // TODO add timeout
        process.waitFor();

        if (process.exitValue() != 0) {
            throw new RuntimeException(String.format(
                    "Process ( %s ) exited with status code %s: \n%s",
                    command, process.exitValue(), new String(errorBytes)));
        }

        return process.getInputStream();
    }

}
