package org.opentestsystem.rdw.reporting.common.model;

import org.opentestsystem.rdw.common.model.AssessmentType;

import java.util.List;
import java.util.Objects;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents an assessment taken by an individual or group
 */
public class Assessment {

    private int id;
    private String label;
    private String name;
    private String gradeCode;
    private AssessmentType type;
    private String subjectCode;
    private int schoolYear;
    private List<Integer> cutPoints;
    private List<String> claimCodes;
    private List<String> altScoreCodes;
    private Boolean werItem;
    private boolean targetReportEnabled;
    private boolean printedReportEnabled;
    private boolean traitReportEnabled;
    // TODO - do we need/want List<Trait> here? Provided if traitReportEnabled set.
    // TODO   we'd only need it if we don't have access to the SubjectDefinition where this is used.

    private Assessment() {
    }

    public static Builder builder() {
        return new Builder();
    }

    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return the assessment entity ID
     */
    public int getId() {
        return id;
    }

    /**
     * @return the assessment display label
     */
    public String getLabel() {
        return label;
    }

    /**
     * @return the assessment name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the grade code for the grade the assessment was designed for
     */
    public String getGradeCode() {
        return gradeCode;
    }

    /**
     * @return the type of assessment
     * @deprecated use {@link Assessment#getTypeCode()}
     */
    @Deprecated
    public AssessmentType getType() {
        return type;
    }

    /**
     * @return the assessment type code
     */
    public String getTypeCode() {
        return type.code();
    }

    /**
     * @return the assessment subject code
     */
    public String getSubjectCode() {
        return subjectCode;
    }

    /**
     * @return the school year the assessment was designed for
     */
    public int getSchoolYear() {
        return schoolYear;
    }

    /**
     * @return {@code true} if the assessment's subject has a target report enabled
     */
    public boolean isTargetReportEnabled() {
        return targetReportEnabled;
    }

    /**
     * @return {@code true} if the assessment's subject has printed reports (ISR) enabled
     */
    public boolean isPrintedReportEnabled() {
        return printedReportEnabled;
    }

    /**
     * @return {@code true} if the assessment's subject has exam-level trait report enabled
     */
    public boolean isTraitReportEnabled() {
        return traitReportEnabled;
    }

    /**
     * Gets the assessment cut points.
     * Cut points are the point values which separate the performance levels of assessments.
     * These points are sorted in ascending order beginning with the minimum score and ending with the maximum.
     * In the case of IABs the cut points 1 and 3 are exam-specific and should be calculated using the following formula:
     * cut_point_1 = cut_point_2 - (1.5 * exam_scale_score_standard_error)
     * cut_point_2 = cut_point_3 + (1.5 * exam_scale_score_standard_error)
     *
     * @return the assessment cut points
     */
    public List<Integer> getCutPoints() {
        return cutPoints;
    }

    /**
     * ICA and Summative assessments typically have claims, however they may not.
     * IAB assessments never have claims.
     *
     * @return the claim codes for the claims, <code>null</code> if the assessment does not have claims
     */
    public List<String> getClaimCodes() {
        return claimCodes;
    }

    /**
     * ICA and Summative assessment may have alt scores.
     * IAB assessments never have alt scores.
     *
     * @return the alt score codes, <code>null</code> if assessment does not have alt scores
     */
    public List<String> getAltScoreCodes() {
        return altScoreCodes;
    }

    /**
     * This flag is set true if there are one or more WER items associated with
     * this assessment. Note that the flag can be set true, false, or null.
     * Null indicates that the WER item check was not performed, presumably by
     * a service that knows the client doesn't care about it.
     *
     * @return true if the assessment WER items; may be null if the check wasn't done
     */
    public Boolean isWerItem() {
        return werItem;
    }

    /**
     * This allows IAB and ICA/Summative exam's to not collide in {@link java.util.Set}s
     *
     * @param o the object to compare
     * @return <code>true</code> if the given object is an Assessment and has the same entity ID and type ID
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final Assessment that = (Assessment) o;
        return id == that.id && type == that.type;
    }

    /**
     * @return hash code based on the Assessment's entity ID and type ID
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, type);
    }

    public static class Builder {

        private int id;
        private String label;
        private String name;
        private String gradeCode;
        private AssessmentType type;
        private String subjectCode;
        private int schoolYear;
        private List<Integer> cutPoints;
        private List<String> claimCodes;
        private List<String> altScoreCodes;
        private Boolean werItem;
        private boolean targetReportEnabled;
        private boolean printedReportEnabled;
        private boolean traitReportEnabled;

        public Builder id(final int id) {
            this.id = id;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder gradeCode(final String gradeCode) {
            this.gradeCode = gradeCode;
            return this;
        }

        public Builder type(final AssessmentType type) {
            this.type = type;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder cutPoints(final List<Integer> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Builder claimCodes(final List<String> claimCodes) {
            this.claimCodes = claimCodes;
            return this;
        }

        public Builder altScoreCodes(final List<String> altScoreCodes) {
            this.altScoreCodes = altScoreCodes;
            return this;
        }

        public Builder targetReportEnabled(final boolean targetReportEnabled) {
            this.targetReportEnabled = targetReportEnabled;
            return this;
        }

        public Builder printedReportEnabled(final boolean printedReportEnabled) {
            this.printedReportEnabled = printedReportEnabled;
            return this;
        }

        public Builder traitReportEnabled(final boolean traitReportEnabled) {
            this.traitReportEnabled = traitReportEnabled;
            return this;
        }

        public Builder werItem(final Boolean werItem) {
            this.werItem = werItem;
            return this;
        }

        public Builder copy(final Assessment assessment) {
            id = assessment.id;
            label = assessment.label;
            name = assessment.name;
            gradeCode = assessment.gradeCode;
            type = assessment.type;
            subjectCode = assessment.subjectCode;
            schoolYear = assessment.schoolYear;
            cutPoints = assessment.cutPoints;
            claimCodes = assessment.claimCodes;
            altScoreCodes = assessment.altScoreCodes;
            werItem = assessment.werItem;
            targetReportEnabled = assessment.targetReportEnabled;
            printedReportEnabled = assessment.printedReportEnabled;
            traitReportEnabled = assessment.traitReportEnabled;
            return this;
        }

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.label = label;
            assessment.name = name;
            assessment.gradeCode = gradeCode;
            assessment.type = type;
            assessment.subjectCode = subjectCode;
            assessment.schoolYear = schoolYear;
            assessment.cutPoints = cutPoints;
            assessment.claimCodes = safeImmutableOf(claimCodes);
            assessment.altScoreCodes = safeImmutableOf(altScoreCodes);
            assessment.werItem = werItem;
            assessment.targetReportEnabled = targetReportEnabled;
            assessment.printedReportEnabled = printedReportEnabled;
            assessment.traitReportEnabled = traitReportEnabled;
            return assessment;
        }
    }
}
