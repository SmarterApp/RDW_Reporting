package org.opentestsystem.rdw.reporting.common.model;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;

import java.util.List;
import java.util.Objects;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents an assessment taken by an individual or group
 */
public class Assessment {

    private long id;
    private String label;
    private String name;
    private String gradeCode;
    private AssessmentType type;
    private Subject subject;
    private int schoolYear;
    private List<Integer> cutPoints;
    private List<String> claimCodes;
    private Boolean werItem;

    private Assessment() {
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * @return the assessment entity ID
     */
    public long getId() {
        return id;
    }

    /**
     * @return the assessment display label
     */
    public String getLabel() {
        return label;
    }

    /**
     * @return the assessment name
     */
    public String getName() {
        return name;
    }

    /**
     * @return the grade code for the grade the assessment was designed for
     */
    public String getGradeCode() {
        return gradeCode;
    }

    /**
     * @return the type of assessment
     * @deprecated use {@link Assessment#getTypeCode()}
     */
    @Deprecated
    public AssessmentType getType() {
        return type;
    }

    /**
     * @return the assessment type code
     */
    public String getTypeCode() {
        return type.code();
    }

    /**
     * @return the subject of the assessment
     * @deprecated use {@link Assessment#getSubjectCode()}
     */
    @Deprecated
    public Subject getSubject() {
        return subject;
    }

    /**
     * @return the assessment subject code
     */
    public String getSubjectCode() {
        return subject.code();
    }

    /**
     * @return the school year the assessment was designed for
     */
    public int getSchoolYear() {
        return schoolYear;
    }

    /**
     * Gets the assessment cut points.
     * Cut points are the point values which separate the performance levels of assessments.
     * These points are sorted in ascending order beginning with the minimum score and ending with the maximum.
     * In the case of IABs the cut points 1 and 3 are exam-specific and should be calculated using the following formula:
     * cut_point_1 = cut_point_2 - (1.5 * exam_scale_score_standard_error)
     * cut_point_2 = cut_point_3 + (1.5 * exam_scale_score_standard_error)
     *
     * @return the assessment cut points
     */
    public List<Integer> getCutPoints() {
        return cutPoints;
    }

    /**
     * @return the claim codes for the claims of ICA or Summative exams. <code>null</code> if the assessment is an IAB
     */
    public List<String> getClaimCodes() {
        return claimCodes;
    }

    /**
     * @return <code>true</code> if the assessment has one or more WER items. <code>null</code> if there wasn't a check done
     */
    public Boolean isWerItem() {
        return werItem;
    }

    /**
     * This allows IAB and ICA/Summative exam's to not collide in {@link java.util.Set}s
     *
     * @param o the object to compare
     * @return <code>true</code> if the given object is an Assessment and has the same entity ID and type ID
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final Assessment that = (Assessment) o;
        return id == that.id && type == that.type;
    }

    /**
     * @return hash code based on the Assessment's entity ID and type ID
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, type);
    }

    public static class Builder {

        private long id;
        private String label;
        private String name;
        private String gradeCode;
        private AssessmentType type;
        private Subject subject;
        private int schoolYear;
        private List<Integer> cutPoints;
        private List<String> claimCodes;
        private Boolean werItem;

        public Builder id(final long id) {
            this.id = id;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder gradeCode(final String gradeCode) {
            this.gradeCode = gradeCode;
            return this;
        }

        public Builder type(final AssessmentType type) {
            this.type = type;
            return this;
        }

        public Builder subject(final Subject subject) {
            this.subject = subject;
            return this;
        }

        public Builder schoolYear(final int schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder cutPoints(final List<Integer> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Builder claimCodes(final List<String> claimCodes) {
            this.claimCodes = claimCodes;
            return this;
        }

        public Builder werItem(final Boolean werItem) {
            this.werItem = werItem;
            return this;
        }

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.label = label;
            assessment.name = name;
            assessment.gradeCode = gradeCode;
            assessment.type = type;
            assessment.subject = subject;
            assessment.schoolYear = schoolYear;
            assessment.cutPoints = safeImmutableOf(cutPoints);
            assessment.claimCodes = safeImmutableOf(claimCodes);
            assessment.werItem = werItem;
            return assessment;
        }

    }

}
