package org.opentestsystem.rdw.reporting.common.model;

/**
 * Represents a trait score.
 * <p>
 * Trait scores may exist at the item or exam level. Typically, interims have
 * item-level trait scores while summatives have exam-level trait scores.
 * </p>
 * <p>
 * Trait scores are defined at the subject level. At this time, only ELA has
 * (writing) trait scores, but this feature was added so other subjects can
 * utilize it. This object holds both the exam-specific score and conditionCode,
 * and the subject-specific purpose, category, and maxScore. This is for the
 * convenience of the client.
 * </p>
 */
public class TraitScore {
    private int score;
    private String conditionCode;
    private String purpose;
    private String category;
    private int maxScore;

    /**
     * @return trait purpose code, e.g. ARGU
     */
    public String getPurpose() {
        return purpose;
    }

    /**
     * @return trait category code, e.g. EVI
     */
    public String getCategory() {
        return category;
    }

    /**
     * @return trait score, e.g. 3
     */
    public int getScore() {
        return score;
    }

    /**
     * @return condition code, typically a single uppercase letter when score is 0
     */
    public String getConditionCode() {
        return conditionCode;
    }

    /**
     * @return max score, e.g. 4
     */
    public int getMaxScore() {
        return maxScore;
    }

    /**
     * @return a builder initialized with the values from this TraitScore
     */
    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return a new builder
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private int score;
        private String conditionCode;
        private String purpose;
        private String category;
        private int maxScore;

        public TraitScore build() {
            final TraitScore traitScore = new TraitScore();
            traitScore.purpose = purpose;
            traitScore.category = category;
            traitScore.score = score;
            traitScore.conditionCode = conditionCode;
            traitScore.maxScore = maxScore;
            return traitScore;
        }

        public Builder copy(final TraitScore traitScore) {
            this.purpose = traitScore.purpose;
            this.category = traitScore.category;
            this.score = traitScore.score;
            this.conditionCode = traitScore.conditionCode;
            this.maxScore = traitScore.maxScore;
            return this;
        }

        public Builder purpose(final String purpose) {
            this.purpose = purpose;
            return this;
        }

        public Builder category(final String category) {
            this.category = category;
            return this;
        }

        public Builder score(final int score) {
            this.score = score;
            return this;
        }

        public Builder conditionCode(final String conditionCode) {
            this.conditionCode = conditionCode;
            return this;
        }

        public Builder maxScore(final int maxScore) {
            this.maxScore = maxScore;
            return this;
        }
    }
}
