package org.opentestsystem.rdw.reporting.common.util;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;

public final class CollectionUtils {

    /**
     * If the given value is null, return null. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable set derived from the given value
     */
    public static <T> ImmutableSet<T> immutableOf(final Set<T> value) {
        return value == null ? null : ImmutableSet.copyOf(value);
    }

    /**
     * If the given value is null, return null. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable map derived from the given value
     */
    public static <T, R> ImmutableMap<T, R> immutableOf(final Map<T, R> value) {
        return value == null ? null : ImmutableMap.copyOf(value);
    }

    /**
     * If the given value is null, return null. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable list derived from the given value
     */
    public static <T> ImmutableList<T> immutableOf(final List<T> value) {
        return value == null ? null : ImmutableList.copyOf(value);
    }

    /**
     * If the given value is null, return an empty immutable set. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable set derived from the given value
     */
    public static <T> ImmutableSet<T> safeImmutableOf(final Set<T> value) {
        return value == null ? ImmutableSet.of() : ImmutableSet.copyOf(value);
    }

    /**
     * If the given value is null, return an empty immutable map. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable map derived from the given value
     */
    public static <T, R> ImmutableMap<T, R> safeImmutableOf(final Map<T, R> value) {
        return value == null ? ImmutableMap.of() : ImmutableMap.copyOf(value);
    }

    /**
     * If the given value is null, return an empty immutable list. Otherwise return an immutable copy of the given value.
     *
     * @param value the value
     * @return an immutable list derived from the given value
     */
    public static <T> ImmutableList<T> safeImmutableOf(final List<T> value) {
        return value == null ? ImmutableList.of() : ImmutableList.copyOf(value);
    }

    /**
     * If the given collection is empty null is returned.
     *
     * @param value the collection to check
     * @return the provided collection or null if the provided collection is empty
     */
    public static <T> Set<T> emptyToNull(final Set<T> value) {
        return value.isEmpty() ? null : value;
    }

    /**
     * If the given collection is empty null is returned.
     *
     * @param value the collection to check
     * @return the provided collection or null if the provided collection is empty
     */
    public static <T, R> Map<T, R> emptyToNull(final Map<T, R> value) {
        return value.isEmpty() ? null : value;
    }

    /**
     * If the given collection is empty null is returned.
     *
     * @param value the collection to check
     * @return the provided collection or null if the provided collection is empty
     */
    public static <T> List<T> emptyToNull(final List<T> value) {
        return value.isEmpty() ? null : value;
    }

    /**
     * If the given collection is empty null is returned.
     *
     * @param value the collection to check
     * @return the provided collection or null if the provided collection is empty
     */
    public static <T> Collection<T> emptyToNull(final Collection<T> value) {
        return value.isEmpty() ? null : value;
    }

    private CollectionUtils() {
    }

}
