package org.opentestsystem.rdw.reporting.common.service.impl;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.opentestsystem.rdw.reporting.common.security.ReportingPermission;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.service.UserStudentFieldService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;

@Service
public class DefaultUserStudentFieldService implements UserStudentFieldService {

    private final ReportingSystemSettings settings;

    @Autowired
    DefaultUserStudentFieldService(@NotNull final ReportingSystemSettings settings) {
        this.settings = settings;
    }

    @Override
    public List<StudentFieldType> get(final User user) {
        final List<StudentFieldType> fields = new ArrayList<>();
        for (final StudentFieldType field : StudentFieldType.values()) {
            final SearchFieldPermissionLevel permissionLevel = settings.getStudentFields().get(field);

            // Add the filter if
            // 1. There is no entry in the settings map (the default permission level is "everyone")
            // 2. The permission level is explicitly set to enabled
            // 3. The permission level is set to admin and the user has individual PII read permission
            if (permissionLevel == null
            || permissionLevel == SearchFieldPermissionLevel.Enabled
            || (
                permissionLevel == SearchFieldPermissionLevel.Admin
                && user.getPermissionsById().containsKey(ReportingPermission.IndividualPiiRead)
            )) {
                fields.add(field);
            }
        }
        return fields;
    }

}
