package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableSet;

import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * This class represents a basic aggregate report query specifying the break-down
 * dimensions for the report and student filters applied to all results.
 */
public class BasicAggregateReportQuery extends AbstractAggregateReportQuery {
    private ImmutableSet<DimensionType> dimensionTypes;
    private StudentFilters studentFilters;

    @Override
    public AggregateQueryType getQueryType() {
        return AggregateQueryType.Basic;
    }

    public Set<DimensionType> getDimensionTypes() {
        return dimensionTypes == null ? ImmutableSet.of() : dimensionTypes;
    }

    public StudentFilters getStudentFilters() {
        return studentFilters == null ? new StudentFilters() : studentFilters;
    }

    public Builder copy() {
        return new Builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends AbstractAggregateReportQuery.Builder<Builder, BasicAggregateReportQuery> {
        private Set<DimensionType> dimensionTypes;
        private StudentFilters studentFilters;

        @Override
        public BasicAggregateReportQuery build() {
            final BasicAggregateReportQuery query = super.build();
            query.dimensionTypes = dimensionTypes == null ? null : ImmutableSet.copyOf(dimensionTypes);
            query.studentFilters = studentFilters;
            return query;
        }

        @Override
        public Builder copy(final BasicAggregateReportQuery query) {
            super.copy(query);
            this.dimensionTypes = query.dimensionTypes == null ? null : newHashSet(query.dimensionTypes);
            this.studentFilters = query.studentFilters;
            return this;
        }

        @Override
        protected BasicAggregateReportQuery createInstance() {
            return new BasicAggregateReportQuery();
        }

        public Builder dimensionTypes(final Set<DimensionType> dimensionTypes) {
            this.dimensionTypes = dimensionTypes;
            return this;
        }

        public Builder dimensionType(final DimensionType dimensionType) {
            if (dimensionTypes == null) dimensionTypes = newHashSet();
            dimensionTypes.add(dimensionType);
            return this;
        }

        public Builder studentFilters(final StudentFilters studentFilters) {
            this.studentFilters = studentFilters;
            return this;
        }
    }
}
