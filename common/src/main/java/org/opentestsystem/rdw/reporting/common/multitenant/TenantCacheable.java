package org.opentestsystem.rdw.reporting.common.multitenant;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.core.annotation.AliasFor;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * A convenience annotation for enabling tenant-aware caching.
 * To use, there must be a @Bean with the name "tenantKeyGenerator" in the context.
 * <p>
 * If this isn't doing what you need, you can revert to the Cacheable annotation, passing a SpEL: <pre>
 *   {@literal}@Cacheable(value = "cache", key = "T(org.opentestsystem.rdw.reporting.common.multitenant.StaticTenantIdUtil).tenantIdKey() + '_' + #root.methodName")
 * </pre>
 * </p>
 *
 * @see TenantCacheableConfiguration
 * @see TenantKeyGenerator
 */
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
@Cacheable
public @interface TenantCacheable {

    @AliasFor(annotation = Cacheable.class)
    String[] value() default {};

    @AliasFor(annotation = Cacheable.class)
    String keyGenerator() default "tenantKeyGenerator";
}
