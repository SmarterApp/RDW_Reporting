package org.opentestsystem.rdw.reporting.common.i18n;

import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.ResourceLoader;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This configuration registers:<ol>
 * <li>a {@link TranslationProvider} for providing translation key-value pairs for a given Locale</li>
 * <li>a {@link MessageSource} backed by the translation provider</li>
 *</ol>
 * NOTE: an app that includes this configuration must define the spring cache for the jdbc
 * translation provider, something like:<pre>
 * spring:
 *   cache:
 *     cache-names: jdbcTranslationProvider</pre>
 */
@Configuration
@Import({
        JdbcTranslationProvider.class
})
public class TranslationConfiguration {

    @Bean
    @RefreshScope
    @TenantCacheable(value = "translation_properties")
    JsonResourceTranslationProvider tenantOverrideTranslations(final ResourceLoader resourceLoader,
                                                               final @Qualifier("reportingSystemPropertiesResolver") ReportingSystemProperties settings) {
        return new JsonResourceTranslationProvider(new TranslationPropertiesResolver(settings), resourceLoader);
    }

    @Bean
    @Primary
    public TranslationProvider translationProvider(final ResourceLoader resourceLoader,
                                                   final TranslationRepository translationRepository,
                                                   final @Qualifier("tenantOverrideTranslations") JsonResourceTranslationProvider tenantOverrideTranslations
    ) {
        final List<TranslationProvider> defaultProviders = newArrayList();
        final List<TranslationProvider> overrideProviders = newArrayList();
        //Add embedded translations (currently in webapp's en.json file)
        defaultProviders.add(new JsonResourceTranslationProvider(new StaticTranslationProperties("classpath:/i18n/"), resourceLoader));
        //Add repository translations (currently in db)
        defaultProviders.add(translationRepository);

        //Add external translations (currently in external config server)
        overrideProviders.add(tenantOverrideTranslations);

        return new CompositeTranslationProvider(defaultProviders, overrideProviders);
    }

    @Bean
    public MessageSource messageSource(final TranslationProvider translationProvider) {
        final TranslationProviderMessageSource messageSource = new TranslationProviderMessageSource(translationProvider);
        messageSource.setUseCodeAsDefaultMessage(true);
        return messageSource;
    }

    /**
     * A TranslationProperties implementation the returns the same static value.
     */
    public static class StaticTranslationProperties implements TranslationProperties {
        private final String location;

        StaticTranslationProperties(final String location) {
            this.location = location;
        }

        @Override
        public String getTranslationLocation() {
            return location;
        }
    }

    /**
     * Cheating a bit here: since ReportingSystemProperties is already multi-tenant aware
     * use it to get the resolved translation-location value.
     */
    public static class TranslationPropertiesResolver implements TranslationProperties {
        private final ReportingSystemProperties settings;

        TranslationPropertiesResolver(final ReportingSystemProperties settings) {
            this.settings = settings;
        }

        @Override
        public String getTranslationLocation() {
            return settings.getTranslationLocation();
        }
    }
}
