package org.opentestsystem.rdw.reporting.common.i18n;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.javaprop.JavaPropsGenerator;
import com.fasterxml.jackson.dataformat.javaprop.JavaPropsMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;

/**
 * This translation provider accepts a location accessible via {@link ResourceLoader}
 * and loads <pre>{translationLocation}xx.json</pre> for the requested locale language.
 * Translation key and value pairs are parsed from JSON and returned as a flat
 * key and value map. (e.g. {"my":{"json":{"path":"my_value"}}} becomes "my.json.path=my_value")
 */
public class JsonResourceTranslationProvider implements TranslationProvider {
    private static final Logger logger = LoggerFactory.getLogger(JsonResourceTranslationProvider.class);

    private final String translationLocation;
    private final ResourceLoader resourceLoader;
    private final JavaPropsMapper propertiesMapper;

    public JsonResourceTranslationProvider(final String translationLocation,
                                           final ResourceLoader resourceLoader) {
        this.translationLocation = translationLocation;
        this.resourceLoader = resourceLoader;
        this.propertiesMapper = new JavaPropsMapper();
    }

    @Override
    public Map<String, String> getTranslationsByCode(final Locale locale) {
        if (locale == null) {
            return Collections.emptyMap();
        }

        final ObjectNode objectNode = loadJson(locale);
        final Properties properties = new Properties();
        try {
            final JavaPropsGenerator generator = propertiesMapper.getFactory().createGenerator(properties);
            generator.writeTree(objectNode);

            return properties.entrySet().stream()
                    .collect(Collectors.toMap(
                            entry -> entry.getKey().toString(),
                            entry -> entry.getValue().toString()
                    ));
        } catch (final IOException e) {
            logger.warn("Unable to write translation json", e);
            return Collections.emptyMap();
        }
    }

    private ObjectNode loadJson(final Locale locale) {
        final ObjectMapper objectMapper = new ObjectMapper();
        final Resource externalMessages = resourceLoader.getResource(getExternalLocation(locale));
        if (!externalMessages.exists()) {
            logger.debug("Unable to find translation json at: {}", getExternalLocation(locale));
            return objectMapper.createObjectNode();
        }

        try (final InputStream in = externalMessages.getInputStream()) {
            return (ObjectNode) objectMapper.readTree(in);
        } catch (final IOException e) {
            logger.warn("Unable to open translation resource: {}", externalMessages);
            return objectMapper.createObjectNode();
        }
    }

    private String getExternalLocation(final Locale locale) {
        return translationLocation + locale.getLanguage() + ".json";
    }
}
