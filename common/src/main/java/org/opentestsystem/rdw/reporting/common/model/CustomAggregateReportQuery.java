package org.opentestsystem.rdw.reporting.common.model;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.google.common.collect.Maps.newHashMap;

/**
 * This class represents a superset of possible parameters for aggregate reports
 */
public class CustomAggregateReportQuery implements AggregateQuery {
    // defines what output is requested
    private AggregateQueryType queryType;
    // for the 'basic' reports, a subgroup key is a DimensionType's name and value is null
    private Map<String, StudentFilters> subgroups;
    // This represents a query-wide filters applied to all subgroups. Not supported for the 'user defined subgroups' for now.
    private StudentFilters studentFilters;
    // For the longitudinal reports, there must be only one school year, the 'to year' value.
    private ImmutableSet<Integer> schoolYears;
    private String assessmentTypeCode;
    private ImmutableSet<String> subjectCodes;
    private ImmutableSet<String> assessmentGradeCodes;
    private boolean includeState;
    private boolean includeAllDistricts;
    private boolean includeAllSchoolsOfDistricts;
    private boolean includeAllDistrictsOfSchools;

    private ImmutableSet<Long> districtIds;
    private ImmutableSet<Long> schoolIds;
    private ImmutableSet<String> completenessCodes;
    private ImmutableSet<String> administrativeConditionCodes;

    //pass through values
    private String valueDisplayType;
    private String achievementLevelDisplayType;
    private ImmutableList<String> columnOrder;

    public String getAssessmentTypeCode() {
        return assessmentTypeCode;
    }

    public Set<String> getSubjectCodes() {
        return getNullSafe(subjectCodes);
    }

    public Set<Integer> getSchoolYears() {
        return getNullSafe(schoolYears);
    }

    public Set<String> getAssessmentGradeCodes() {
        return getNullSafe(assessmentGradeCodes);
    }

    public boolean isIncludeState() {
        return includeState;
    }

    public boolean isIncludeAllDistricts() {
        return includeAllDistricts;
    }

    public boolean isIncludeAllSchoolsOfDistricts() {
        return includeAllSchoolsOfDistricts;
    }

    public boolean isIncludeAllDistrictsOfSchools() {
        return includeAllDistrictsOfSchools;
    }

    public Set<Long> getDistrictIds() {
        return getNullSafe(districtIds);
    }

    public Set<Long> getSchoolIds() {
        return getNullSafe(schoolIds);
    }

    public String getValueDisplayType() {
        return valueDisplayType;
    }

    public String getAchievementLevelDisplayType() {
        return achievementLevelDisplayType;
    }

    public List<String> getColumnOrder() {
        return getNullSafe(columnOrder);
    }

    public Set<String> getCompletenessCodes() {
        return getNullSafe(completenessCodes);
    }

    public Set<String> getAdministrativeConditionCodes() {
        return getNullSafe(administrativeConditionCodes);
    }

    private <T> ImmutableSet<T> getNullSafe(final ImmutableSet<T> values) {
        return values == null ? ImmutableSet.of() : values;
    }

    private <T> ImmutableList<T> getNullSafe(final ImmutableList<T> values) {
        return values == null ? ImmutableList.of() : values;
    }

    public Map<String, StudentFilters> getSubgroups() {
        return subgroups == null ? newHashMap() : subgroups;
    }

    public StudentFilters getStudentFilters() {
        return studentFilters == null ? new StudentFilters() : studentFilters;
    }

    @Override
    public AggregateQueryType getQueryType() {
        return queryType;
    }

    public void validate() {
        //TODO
    }

    public Builder copy() {
        return new Builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }


    public static class Builder {
        private String assessmentTypeCode;
        private Set<String> subjectCodes;
        private Set<Integer> schoolYears;
        private Set<String> assessmentGradeCodes;
        private boolean includeState;
        private boolean includeAllDistricts;
        private boolean includeAllSchoolsOfDistricts;
        private boolean includeAllDistrictsOfSchools;
        private Set<Long> districtIds;
        private Set<Long> schoolIds;
        private Set<String> completenessCodes;
        private Set<String> administrativeConditionCodes;
        private String valueDisplayType;
        private String achievementLevelDisplayType;
        private List<String> columnOrder;
        private Map<String, StudentFilters> subgroups;
        private StudentFilters studentFilters;
        private AggregateQueryType queryType;

        public CustomAggregateReportQuery build() {
            final CustomAggregateReportQuery query = new CustomAggregateReportQuery();
            query.assessmentTypeCode = assessmentTypeCode;
            query.subjectCodes = asImmutable(subjectCodes);
            query.schoolYears = asImmutable(schoolYears);
            query.assessmentGradeCodes = asImmutable(assessmentGradeCodes);
            query.includeState = includeState;
            query.includeAllDistricts = includeAllDistricts;
            query.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            query.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            query.schoolIds = asImmutable(schoolIds);
            query.districtIds = asImmutable(districtIds);
            query.completenessCodes = asImmutable(completenessCodes);
            query.administrativeConditionCodes = asImmutable(administrativeConditionCodes);
            query.valueDisplayType = valueDisplayType;
            query.achievementLevelDisplayType = achievementLevelDisplayType;
            query.columnOrder = asImmutable(columnOrder);
            query.studentFilters = studentFilters;
            query.subgroups = subgroups == null ? null : newHashMap(subgroups);
            query.queryType = queryType;
            return query;
        }

        public Builder copy(final CustomAggregateReportQuery query) {
            this.assessmentTypeCode = query.assessmentTypeCode;
            this.subjectCodes = query.subjectCodes;
            this.schoolYears = query.schoolYears;
            this.assessmentGradeCodes = query.assessmentGradeCodes;
            this.includeState = query.includeState;
            this.includeAllDistricts = query.includeAllDistricts;
            this.includeAllSchoolsOfDistricts = query.includeAllSchoolsOfDistricts;
            this.includeAllDistrictsOfSchools = query.includeAllDistrictsOfSchools;
            this.schoolIds = query.schoolIds;
            this.districtIds = query.districtIds;
            this.completenessCodes = query.completenessCodes;
            this.administrativeConditionCodes = query.administrativeConditionCodes;
            this.valueDisplayType = query.valueDisplayType;
            this.achievementLevelDisplayType = query.achievementLevelDisplayType;
            this.columnOrder = query.columnOrder;
            this.studentFilters = query.studentFilters;
            this.subgroups = newHashMap(query.getSubgroups());
            this.queryType = query.getQueryType();
            return this;
        }

        protected CustomAggregateReportQuery createInstance() {
            return new CustomAggregateReportQuery();
        }

        public Builder queryType(final AggregateQueryType queryType) {
            this.queryType = queryType;
            return this;
        }

        public Builder studentFilters(final StudentFilters studentFilters) {
            this.studentFilters = studentFilters;
            return this;
        }

        public Builder subgroups(final Map<String, StudentFilters> subgroups) {
            this.subgroups = subgroups;
            return this;
        }

        public Builder subgroup(final String label, final StudentFilters filters) {
            if (this.subgroups == null) {
                this.subgroups = newHashMap();
            }
            this.subgroups.put(label, filters);
            return this;
        }

        public Builder subgroup(final DimensionType dimensionType) {
            subgroup(dimensionType.name(), null);
            return this;
        }

        public Builder subgroups(final Set<DimensionType> dimensionTypes) {
            for (final DimensionType dimensionType : dimensionTypes) subgroup(dimensionType);
            return this;
        }


        public Builder assessmentTypeCode(final String assessmentTypeCode) {
            this.assessmentTypeCode = assessmentTypeCode;
            return this;
        }

        public Builder subjectCodes(final Set<String> subjectCodes) {
            this.subjectCodes = subjectCodes;
            return this;
        }

        public Builder schoolYears(final Set<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder assessmentGradeCodes(final Set<String> assessmentGradeCodes) {
            this.assessmentGradeCodes = assessmentGradeCodes;
            return this;
        }

        public Builder includeState(final boolean includeState) {
            this.includeState = includeState;
            return this;
        }

        public Builder includeAllDistricts(final boolean includeAllDistricts) {
            this.includeAllDistricts = includeAllDistricts;
            return this;
        }


        public Builder includeAllSchoolsOfDistricts(final boolean includeAllSchoolsOfDistricts) {
            this.includeAllSchoolsOfDistricts = includeAllSchoolsOfDistricts;
            return this;
        }

        public Builder includeAllDistrictsOfSchools(final boolean includeAllDistrictsOfSchools) {
            this.includeAllDistrictsOfSchools = includeAllDistrictsOfSchools;
            return this;
        }

        public Builder schoolIds(final Set<Long> schoolIds) {
            this.schoolIds = schoolIds;
            return this;
        }

        public Builder districtIds(final Set<Long> districtIds) {
            this.districtIds = districtIds;
            return this;
        }

        public Builder completenessCodes(final Set<String> completenessCodes) {
            this.completenessCodes = completenessCodes;
            return this;
        }

        public Builder administrativeConditionCodes(final Set<String> administrativeConditionCodes) {
            this.administrativeConditionCodes = administrativeConditionCodes;
            return this;
        }

        public Builder valueDisplayType(final String valueDisplayType) {
            this.valueDisplayType = valueDisplayType;
            return this;
        }

        public Builder achievementLevelDisplayType(final String achievementLevelDisplayType) {
            this.achievementLevelDisplayType = achievementLevelDisplayType;
            return this;
        }

        public Builder columnOrder(final List<String> columnOrder) {
            this.columnOrder = columnOrder;
            return this;
        }

        private <T> ImmutableSet<T> asImmutable(final Set<T> value) {
            return value == null ? null : ImmutableSet.copyOf(value);
        }

        private <T> ImmutableList<T> asImmutable(final List<T> value) {
            return value == null ? null : ImmutableList.copyOf(value);
        }
    }
}
