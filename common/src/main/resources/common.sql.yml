sql:
  claim:
    findAll: >-
      SELECT scs.id, scs.code, s.code as subject_code, at.code as asmt_type_code
      FROM subject_claim_score scs
        JOIN subject s ON scs.subject_id = s.id
        JOIN asmt_type at ON at.id = scs.asmt_type_id
      ORDER BY scs.display_order

  translation:
    findAllForLanguage: >-
        SELECT
          label_code,
          label
        FROM accommodation_translation
        WHERE language_code=:language_code
        UNION ALL
        SELECT
          label_code,
          label
        FROM subject_translation
        WHERE 'eng' = :language_code

  organization:
    reporting:
      findAll: >-
        SELECT
          district_group.id,
          district_group.name,
          district_group.natural_id,
          'DistrictGroup' as org_type,
          null as district_group_id,
          null as district_id,
          null as school_group_id
        FROM district_group
          JOIN school sch
            ON sch.district_group_id = district_group.id
        WHERE 1=:allow_district_group
          AND (:name_query IS NULL OR district_group.name LIKE concat('%', :name_query, '%'))
          AND (1=:statewide OR sch.district_group_id IN (:district_group_ids))
        UNION
        SELECT
          district.id,
          district.name,
          district.natural_id,
          'District' as org_type,
          sch.district_group_id,
          null as district_id,
          null as school_group_id
        FROM district
          JOIN school sch
            ON sch.district_id = district.id
        WHERE 1=:allow_district
          AND (:name_query IS NULL OR district.name LIKE concat('%', :name_query, '%'))
          AND (1=:statewide OR sch.district_group_id IN (:district_group_ids) OR sch.district_id IN (:district_ids))
        UNION
        SELECT
          school_group.id,
          school_group.name,
          school_group.natural_id,
          'SchoolGroup' as org_type,
          sch.district_group_id,
          sch.district_id,
          null as school_group_id
        FROM school_group
          JOIN school sch
            ON sch.school_group_id = school_group.id
        WHERE 1=:allow_school_group
          AND (:name_query IS NULL OR school_group.name LIKE concat('%', :name_query, '%'))
          AND (1=:statewide OR sch.district_group_id IN (:district_group_ids) OR sch.district_id IN (:district_ids) OR sch.school_group_id IN (:school_group_ids))
        UNION
        SELECT
          school.id,
          school.name,
          school.natural_id,
          'School' as org_type,
          school.district_group_id,
          school.district_id,
          school.school_group_id
        FROM school
        WHERE 1=:allow_school
          AND (:name_query IS NULL OR school.name LIKE concat('%', :name_query, '%'))
          AND (1=:statewide OR school.district_group_id IN (:district_group_ids) OR school.district_id IN (:district_ids) OR school.school_group_id IN (:school_group_ids) OR school.id IN (:school_ids))
        ORDER BY LENGTH(name)
        LIMIT :limit

      findOne: >-
        SELECT
          coalesce(dg.id, d.id, sg.id, s.id) as id,
          coalesce(dg.name, d.name, sg.name, s.name) as name,
          coalesce(dg.natural_id, d.natural_id, sg.natural_id, s.natural_id) as natural_id,
          coalesce(dg.type, d.type, sg.type, 'School') as org_type,
          sch.district_group_id as district_group_id,
          sch.district_id as district_id,
          sch.school_group_id
        FROM school sch
          LEFT JOIN
          (
            SELECT id, name, natural_id, 'DistrictGroup' as type
            FROM district_group
            WHERE 1=:allow_district_group
              AND id=:id
          ) as dg
            ON dg.id = sch.district_group_id
          LEFT JOIN
          (
            SELECT id, name, natural_id, 'District' as type
            FROM district
            WHERE 1=:allow_district
              AND id=:id
          ) as d
            ON d.id = sch.district_id
          LEFT JOIN
          (
            SELECT id, name, natural_id, 'SchoolGroup' as type
            FROM school_group
            WHERE 1=:allow_school_group
              AND id=:id
          ) as sg
            ON sg.id = sch.school_group_id
          LEFT JOIN school s
            ON 1=:allow_school
            AND s.id=:id
            AND s.id = sch.id
        WHERE
          (dg.id IS NOT NULL AND (1=:statewide OR sch.district_group_id IN (:district_group_ids)))
          OR
          (d.id IS NOT NULL AND (1=:statewide OR sch.district_group_id IN (:district_group_ids) OR sch.district_id IN (:district_ids)))
          OR
          (sg.id IS NOT NULL AND (1=:statewide OR sch.district_group_id IN (:district_group_ids) OR sch.district_id IN (:district_ids) OR sch.school_group_id IN (:school_group_ids)))
          OR
          (s.id IS NOT NULL AND (1=:statewide OR sch.district_group_id IN (:district_group_ids) OR sch.district_id IN (:district_ids) OR sch.school_group_id IN (:school_group_ids) OR sch.id IN (:school_ids)))
        LIMIT 1

  subjectDefinition:
    findAll: >-
      SELECT
        at.code as asmt_type_code,
        s.code as subject_code,
        sat.performance_level_count,
        sat.performance_level_standard_cutoff,
        sat.claim_score_performance_level_count
      FROM subject_asmt_type sat
        JOIN asmt_type at ON at.id = sat.asmt_type_id
        JOIN subject s ON s.id = sat.subject_id

  snippet:
    basicPermission: >-
        (1=:statewide or sc.district_group_id in (:district_group_ids) or sc.district_id in (:district_ids) or sc.school_group_id in (:school_group_ids) or sc.id in (:school_ids))

    studentExamPermissionWithoutEmbargo: >-
        (
           # Individual permissions
          (
            (1 = :individual_statewide OR s.district_group_id IN (:individual_district_group_ids) OR s.district_id IN (:individual_district_ids) OR s.school_group_id IN (:individual_school_group_ids) OR s.id IN (:individual_school_ids))
            OR
            (
             # this flag represents a combination of the system setting and a user choice to turn it off when available
              1 = :allow_transfer_access AND (isch.district_group_id IN (:individual_district_group_ids) OR isch.district_id IN (:individual_district_ids) OR isch.school_group_id IN (:individual_school_group_ids) OR isch.id IN (:individual_school_ids))
            )
          )
          OR
          # Group permissions
          (
            EXISTS(
               SELECT 1 FROM student_group_membership gm
                     JOIN student_group sg ON sg.id = gm.student_group_id
                     JOIN user_student_group usg ON usg.student_group_id = gm.student_group_id
                        WHERE gm.student_id = e.student_id AND usg.user_login = :user_login AND (sg.subject_id is null OR sg.subject_id = a.subject_id)
            )
            AND
            (
              (1 = :group_statewide OR s.district_group_id IN (:group_district_group_ids) OR s.district_id IN (:group_district_ids) OR s.school_group_id IN (:group_school_group_ids) OR e.school_id IN (:group_school_ids))
              OR
              (
                # this flag represents a combination of the system setting and a user choice to turn it off when available
                1 = :allow_transfer_access AND (isch.district_group_id IN (:group_district_group_ids) OR isch.district_id IN (:group_district_ids) OR isch.school_group_id IN (:group_school_group_ids) OR isch.id IN (:group_school_ids))
              )
            )
          )
        )

    examClaimColumns: >-
        e.claim1_category,
        e.claim1_scale_score,
        e.claim1_scale_score_std_err,
        e.claim2_category,
        e.claim2_scale_score,
        e.claim2_scale_score_std_err,
        e.claim3_category,
        e.claim3_scale_score,
        e.claim3_scale_score_std_err,
        e.claim4_category,
        e.claim4_scale_score,
        e.claim4_scale_score_std_err

    asmtClaimColumns: >-
        a.claim1_score_code,
        a.claim2_score_code,
        a.claim3_score_code,
        a.claim4_score_code,
        a.claim5_score_code,
        a.claim6_score_code,
        a.claim1_score_code as asmt_claim1_score_code,
        a.claim2_score_code as asmt_claim2_score_code,
        a.claim3_score_code as asmt_claim3_score_code,
        a.claim4_score_code as asmt_claim4_score_code,
        a.claim5_score_code as asmt_claim5_score_code,
        a.claim6_score_code as asmt_claim6_score_code

    claimColumns: >-
       ${sql.snippet.examClaimColumns},
       ${sql.snippet.asmtClaimColumns}

    examColumns: >-
        e.id,
        e.type_id,
        e.student_id,
        e.session_id,
        e.completed_at,
        e.school_id,
        e.school_year,
        e.grade_code,
        e.available_accommodation_codes,
        e.iep,
        e.lep,
        e.elas_code,
        e.section504,
        e.migrant_status,
        e.completeness_code,
        e.administration_condition_code,
        e.scale_score,
        e.scale_score_std_err,
        e.performance_level,
        s.name as school_name,
        s.district_id as school_district_id,
        s.district_group_id as school_district_group_id,
        s.school_group_id

    exam: >-
        ${sql.snippet.examColumns},
        st.ssid as student_ssid,
        st.gender_code as student_gender_code,
        st.last_or_surname as student_last_name,
        st.first_name as student_first_name,
        a.id as asmt_id,
        a.name as asmt_name,
        a.label as asmt_label,
        a.grade_code as asmt_grade_code,
        a.type_id as asmt_type_id,
        a.subject_id as asmt_subject_id,
        su.code as asmt_subject_code,
        a.school_year as asmt_school_year,
        a.min_score as asmt_min_score,
        a.max_score as asmt_max_score,
        a.cut_point_1 as asmt_cut_point_1,
        a.cut_point_2 as asmt_cut_point_2,
        a.cut_point_3 as asmt_cut_point_3
        from exam e
          join student st on st.id = e.student_id
          join asmt a on e.asmt_id = a.id
          join subject su on a.subject_id=su.id
          join school s on e.school_id = s.id
          join school isch on st.inferred_school_id = isch.id

    writingTraits: >-
      ei.id as ei_id,
      ei.exam_id as ei_exam_id,
      ei.item_id as ei_item_id,
      ei.score as ei_score,
      ei.position as ei_position,
      ei.response as ei_response,
      ei.trait_evidence_elaboration_score as ei_trait_evidence_elaboration_score,
      ei.trait_organization_purpose_score as ei_trait_organization_purpose_score,
      ei.trait_conventions_score as ei_trait_conventions_score,
      i.performance_task_writing_type

    # There are multiple group related queries that need to join to either admin created groups or teacher groups.
    # To avoid duplicate queries we use 'placeholder' that at run time get replaced by these snippets.
    #
    # Placeholders: $[groupJoinPlaceholder] and $[groupFilterPlaceholder]
    #
    # dependencies: exam e, asmt a
    adminUserGroups:
      join: >-
        JOIN student_group_membership gm ON gm.student_id = e.student_id
        JOIN student_group sg ON sg.id = gm.student_group_id
        JOIN user_student_group usg ON usg.student_group_id = gm.student_group_id

      filter: >-
        sg.id = :group_id
        AND usg.user_login = :user_login
        AND (sg.subject_id IS NULL OR sg.subject_id = a.subject_id)

    teacherGroups:
      join: >-
        JOIN teacher_student_group_membership tsgm ON tsgm.student_id = e.student_id
        JOIN teacher_student_group tsg ON tsg.id = tsgm.teacher_student_group_id

      filter: >-
        tsg.id = :group_id
        AND tsg.user_login = :user_login
        AND (tsg.subject_id IS NULL OR tsg.subject_id = a.subject_id)