package org.opentestsystem.rdw.reporting.common.test;

import org.opentestsystem.rdw.reporting.common.test.CachingTest;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.support.AbstractTestExecutionListener;

/**
 * This will clear caches (from the context CacheManager) before any test in a test suite that has {@link EnableCaching}.
 * To use, annotate the test suite with:<pre>
 * {@literal @}TestExecutionListeners(mergeMode=TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS,
 *                          listeners={CachingTestExecutionListener.class})
 * </pre>
 *
 * @see CachingTest
 */
public class CachingTestExecutionListener extends AbstractTestExecutionListener {

    private static final String EnabledAttribute = "CachingTestExecutionListener.mode";

    @Override
    public void beforeTestClass(final TestContext testContext) throws Exception {
        final boolean enabled = null != AnnotatedElementUtils.findMergedAnnotation(testContext.getTestClass(), EnableCaching.class);
        testContext.setAttribute(EnabledAttribute, enabled);
    }

    @Override
    public void beforeTestMethod(final TestContext testContext) throws Exception {
        if (!(Boolean)testContext.getAttribute(EnabledAttribute)) return;

        final CacheManager cacheManager = testContext.getApplicationContext().getAutowireCapableBeanFactory().getBean(CacheManager.class);
        for (final String name : cacheManager.getCacheNames()) {
            cacheManager.getCache(name).clear();
        }
    }
}
