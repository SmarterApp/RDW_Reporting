package org.opentestsystem.rdw.reporting.common.configuration;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static java.util.stream.Collectors.toMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *  Test for substructures of the reporting system properties. Only modified tenant properties are saved, so
 *  retrieving the tenant properties for these substructures only populates the modified elements. The
 *  properties resolver must explicitly merge the tenant properties with the system defaults in this case.
 */
public class ReportingSystemPropertiesResolverTest {
    // Class under test.
    private ReportingSystemPropertiesResolver reportingSystemPropertiesResolver;

    private ReportingSystemSettings defaultProperties;
    private ReportingSystemProperties tenantProperties;

    @Before
    public void setUp() throws Exception {
        TenantKeyResolver keyResolver = mock(TenantKeyResolver.class);
        defaultProperties = mock(ReportingSystemSettings.class);
        tenantProperties = mock(ReportingSystemProperties.class);

        reportingSystemPropertiesResolver = new ReportingSystemPropertiesResolver(keyResolver, defaultProperties) {
            @Override
            protected Optional<ReportingSystemProperties> getResolvedReportingSystemProperties() {
                return Optional.of(tenantProperties);
            }
        };
    }

    @Test
    public void getState() {
        ReportingSystemProperties.StateProperties results;

        ReportingSystemProperties.StateProperties defaultTenant = new ReportingSystemProperties.StateProperties();
        defaultTenant.setCode("CA");
        defaultTenant.setName("California");

        ReportingSystemProperties.StateProperties otherTenant = new ReportingSystemProperties.StateProperties();
        otherTenant.setCode("NV");
        otherTenant.setName("Nevada");

        ReportingSystemProperties.StateProperties otherTenant2 = new ReportingSystemProperties.StateProperties();
        otherTenant2.setCode("CA2");

        when(defaultProperties.getState()).thenReturn(defaultTenant);

        // When no tenant properties, expect defaults.
        when(tenantProperties.getState()).thenReturn(new ReportingSystemProperties.StateProperties());
        results = reportingSystemPropertiesResolver.getState();
        assertThat(results.getCode()).isEqualTo(defaultTenant.getCode());
        assertThat(results.getName()).isEqualTo(defaultTenant.getName());

        // When complete set tenant properties, expect them.
        when(tenantProperties.getState()).thenReturn(otherTenant);
        results = reportingSystemPropertiesResolver.getState();
        assertThat(results.getCode()).isEqualTo(otherTenant.getCode());
        assertThat(results.getName()).isEqualTo(otherTenant.getName());

        // When partial set of tenant properties, expect a blend.
        when(tenantProperties.getState()).thenReturn(otherTenant2);
        results = reportingSystemPropertiesResolver.getState();
        assertThat(results.getCode()).isEqualTo(otherTenant2.getCode());
        assertThat(results.getName()).isEqualTo(defaultTenant.getName());
    }

    @Test
    public void getTargetReport() {
        ReportingSystemProperties.TargetReportProperties results;

        ReportingSystemProperties.TargetReportProperties defaultTenant =
            new ReportingSystemProperties.TargetReportProperties();
        defaultTenant.setInsufficientDataCutoff(0.2);
        defaultTenant.setMinNumberOfStudents(20);

        ReportingSystemProperties.TargetReportProperties otherTenant =
            new ReportingSystemProperties.TargetReportProperties();
        otherTenant.setInsufficientDataCutoff(0.1);
        otherTenant.setMinNumberOfStudents(10);

        ReportingSystemProperties.TargetReportProperties otherTenant2 =
            new ReportingSystemProperties.TargetReportProperties();
        otherTenant2.setMinNumberOfStudents(50);

        when(defaultProperties.getTargetReport()).thenReturn(defaultTenant);

        // When no tenant properties, expect defaults.
        when(tenantProperties.getTargetReport()).thenReturn(new ReportingSystemProperties.TargetReportProperties());
        results = reportingSystemPropertiesResolver.getTargetReport();
        assertThat(results.getInsufficientDataCutoff()).isEqualTo(defaultTenant.getInsufficientDataCutoff());
        assertThat(results.getMinNumberOfStudents()).isEqualTo(defaultTenant.getMinNumberOfStudents());

        // When complete set tenant properties, expect them.
        when(tenantProperties.getTargetReport()).thenReturn(otherTenant);
        results = reportingSystemPropertiesResolver.getTargetReport();
        assertThat(results.getInsufficientDataCutoff()).isEqualTo(otherTenant.getInsufficientDataCutoff());
        assertThat(results.getMinNumberOfStudents()).isEqualTo(otherTenant.getMinNumberOfStudents());

        // When partial set of tenant properties, expect a blend.
        when(tenantProperties.getTargetReport()).thenReturn(otherTenant2);
        results = reportingSystemPropertiesResolver.getTargetReport();
        assertThat(results.getInsufficientDataCutoff()).isEqualTo(defaultTenant.getInsufficientDataCutoff());
        assertThat(results.getMinNumberOfStudents()).isEqualTo(otherTenant2.getMinNumberOfStudents());
    }

    @Test
    public void getStudentFields() {
        Map<StudentFieldType, SearchFieldPermissionLevel> results;

        Map<StudentFieldType, SearchFieldPermissionLevel> defaultTenant =
            Arrays.stream(StudentFieldType.values())
                .collect(toMap(type -> type, type -> SearchFieldPermissionLevel.Disabled));

        List<StudentFieldType> enabledList = Arrays
            .asList(StudentFieldType.EnglishLanguageAcquisitionStatus, StudentFieldType.Gender);

        Map<StudentFieldType, SearchFieldPermissionLevel> otherTenant =
            enabledList.stream()
                .collect(toMap(type -> type, type -> SearchFieldPermissionLevel.Enabled));

        when(defaultProperties.getStudentFields()).thenReturn(defaultTenant);

        // When no tenant properties, expect defaults.
        when(tenantProperties.getStudentFields()).thenReturn(Collections.emptyMap());
        results = reportingSystemPropertiesResolver.getStudentFields();
        for (StudentFieldType type : StudentFieldType.values()) {
           assertThat(results.get(type)).isEqualTo(SearchFieldPermissionLevel.Disabled);
        }

        // When partial set of tenant properties, expect a blend.
        when(tenantProperties.getStudentFields()).thenReturn(otherTenant);
        results = reportingSystemPropertiesResolver.getStudentFields();
        for (StudentFieldType type : StudentFieldType.values()) {
            SearchFieldPermissionLevel expectedLevel = enabledList.contains(type) ?
                SearchFieldPermissionLevel.Enabled : SearchFieldPermissionLevel.Disabled;
            assertThat(results.get(type)).isEqualTo(expectedLevel);
        }
    }
}
