package org.opentestsystem.rdw.reporting.common.report.iab;

import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollment;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIabReportRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIabReportRepositoryIT {

    @Autowired
    private JdbcIabReportRepository repository;


    @Test
    public void findOneShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), 0, 2017)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), -1, 0)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(districts(0L), -1, 0)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(schools(0L), -1, 0)).isNull();
    }

    @Test
    public void findOneShouldReportForCorrectStudentAndYear() throws Exception {

        final Assessment iab1 = Assessment.builder()
                .id(-2)
                .name("iab1")
                .schoolYear(2017)
                .gradeId(-2)
                .gradeCode("g2")
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .cutPoints(newArrayList())
                .build();

        final Assessment iab2 = Assessment.builder()
                .id(-3)
                .name("iab2")
                .schoolYear(2016)
                .gradeId(-1)
                .gradeCode("g1")
                .subject(Subject.ELA)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .cutPoints(newArrayList())
                .build();

        final Exam iab1_exam1 = Exam.builder()
                .id(-4)
                .sessionId("session4")
                .dateTime(Instants.from("2017-01-02"))
                .gradeId(-2)
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab1_exam2 = Exam.builder()
                .id(-3)
                .sessionId("session3")
                .dateTime(Instants.from("2017-01-01"))
                .gradeId(-2)
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam1 = Exam.builder()
                .id(-6)
                .sessionId("session6")
                .dateTime(Instants.from("2017-01-04"))
                .gradeId(-2)
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam2 = Exam.builder()
                .id(-5)
                .sessionId("session5")
                .dateTime(Instants.from("2017-01-03"))
                .gradeId(-2)
                .gradeCode("g2")
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Multimap<Assessment, Exam> assessments = TreeMultimap
                .create(comparing(Assessment::getName), comparing(Exam::getDateTime).reversed());
        assessments.put(iab1, iab1_exam1);
        assessments.put(iab1, iab1_exam2);
        assessments.put(iab2, iab2_exam1);
        assessments.put(iab2, iab2_exam2);

        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), -1, 2017))
                .isEqualToComparingFieldByFieldRecursively(
                        IabReport.builder()
                                .student(Student.builder()
                                        .id(-1)
                                        .ssid("student1_ssid")
                                        .firstName("student1_firstName")
                                        .lastName("student1_lastName")
                                        .genderCode("g1")
                                        .build()
                                )
                                .studentEnrollment(StudentEnrollment.builder()
                                        .stateCode("CA")
                                        .districtName("district1")
                                        .schoolName("school1")
                                        .gradeCode("g2")
                                        .build()
                                )
                                .examsByAssessment(assessments.asMap())
                                .build()
                );
    }

}
