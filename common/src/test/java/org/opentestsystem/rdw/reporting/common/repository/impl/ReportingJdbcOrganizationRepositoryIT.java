package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.District;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.TenantConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.EnumSet;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.DistrictGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.School;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.SchoolGroup;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@Import({
        ReportingJdbcOrganizationRepositoryIT.ReportingJdbcOrganizationRepositoryITConfiguration.class,
        ITDataSourceConfiguration.class,
        TenantConfiguration.class
})
@RepositoryIT
@Sql(scripts = "classpath:organization-test-data.sql")
@ActiveProfiles("test")
public class ReportingJdbcOrganizationRepositoryIT {

    @Autowired
    private NamedParameterJdbcTemplate template;

    @Autowired
    private ReportingJdbcOrganizationRepository repository;

    private OrganizationQuery allOrgsQuery;

    @Before
    public void setup() {
        allOrgsQuery = OrganizationQuery.builder()
                .types(EnumSet.allOf(OrganizationType.class))
                .build();
    }

    @Test
    public void itShouldFindAllOrganizations() {
        final Collection<Organization> allOrgs = repository.findAll(statewide(), allOrgsQuery);
        assertThat(allOrgs.stream().map(Organization::getName))
                .containsOnly(
                        "districtgroup1",
                        "districtgroup2",
                        "district1",
                        "district2",
                        "district3",
                        "schoolgroup1",
                        "school1",
                        "school2",
                        "school3",
                        "school4");
    }

    @Test
    public void itShouldFilterDistrictGroupsByPermissions() {
        final Collection<Organization> allOrgs = repository.findAll(districtGroups(-10L), allOrgsQuery);
        assertThat(allOrgs.stream().map(Organization::getName))
                .containsOnly(
                        "districtgroup1",
                        "district1",
                        "schoolgroup1",
                        "school1",
                        "school2");
    }

    @Test
    public void itShouldFilterDistrictsByPermissions() {
        final Collection<Organization> allOrgs = repository.findAll(districts(-10L), allOrgsQuery);
        assertThat(allOrgs.stream().map(Organization::getName))
                .containsOnly(
                        "district1",
                        "schoolgroup1",
                        "school1",
                        "school2");
    }

    @Test
    public void itShouldFilterSchoolGroupsByPermissions() {
        final Collection<Organization> allOrgs = repository.findAll(schoolGroups(-10L), allOrgsQuery);
        assertThat(allOrgs.stream().map(Organization::getName))
                .containsExactly(
                        "school1",
                        "schoolgroup1"
                );
    }

    @Test
    public void itShouldFilterSchoolsByPermissions() {
        final Collection<Organization> allOrgs = repository.findAll(schools(-301L), allOrgsQuery);
        assertThat(allOrgs.stream().map(Organization::getName))
                .containsOnly("school4");
    }

    @Test
    public void itShouldFilterToDistrictGroupsByQuery() {
        final OrganizationQuery allDistrictGroupsQuery = OrganizationQuery.builder()
                .types(EnumSet.of(DistrictGroup))
                .build();
        final Collection<Organization> allDistrictGroups = repository.findAll(statewide(), allDistrictGroupsQuery);
        assertThat(allDistrictGroups.stream().map(Organization::getName))
                .containsOnly(
                        "districtgroup1",
                        "districtgroup2");

        final OrganizationQuery group2Query = OrganizationQuery.builder()
                .types(EnumSet.of(DistrictGroup))
                .name("2")
                .build();
        final Collection<Organization> matching = repository.findAll(statewide(), group2Query);
        assertThat(matching.stream().map(Organization::getName))
                .containsOnly("districtgroup2");
    }

    @Test
    public void itShouldFilterToDistrictsByQuery() {
        final OrganizationQuery allDistrictsQuery = OrganizationQuery.builder()
                .types(EnumSet.of(District))
                .build();
        final Collection<Organization> allDistricts = repository.findAll(statewide(), allDistrictsQuery);
        assertThat(allDistricts.stream().map(Organization::getName))
                .containsOnly(
                        "district1",
                        "district2",
                        "district3");

        final OrganizationQuery district2Query = OrganizationQuery.builder()
                .types(EnumSet.of(District))
                .name("2")
                .build();
        final Collection<Organization> matching = repository.findAll(statewide(), district2Query);
        assertThat(matching.stream().map(Organization::getName))
                .containsOnly("district2");
    }

    @Test
    public void itShouldFilterToSchoolGroupsByQuery() {
        final OrganizationQuery allSchoolGroupsQuery = OrganizationQuery.builder()
                .types(EnumSet.of(SchoolGroup))
                .build();
        final Collection<Organization> allSchoolGroups = repository.findAll(statewide(), allSchoolGroupsQuery);
        assertThat(allSchoolGroups.stream().map(Organization::getName))
                .containsOnly("schoolgroup1");

        final OrganizationQuery schoolGroup1Query = OrganizationQuery.builder()
                .types(EnumSet.of(SchoolGroup))
                .name("1")
                .build();
        final Collection<Organization> matching = repository.findAll(statewide(), schoolGroup1Query);
        assertThat(matching.stream().map(Organization::getName))
                .containsOnly("schoolgroup1");
    }

    @Test
    public void itShouldFilterToSchoolsByQuery() {
        final OrganizationQuery allSchoolsQuery = OrganizationQuery.builder()
                .types(EnumSet.of(School))
                .build();
        final Collection<Organization> allSchools = repository.findAll(statewide(), allSchoolsQuery);
        assertThat(allSchools.stream().map(Organization::getName))
                .containsOnly(
                        "school1",
                        "school2",
                        "school3",
                        "school4");

        final OrganizationQuery school2Query = OrganizationQuery.builder()
                .types(EnumSet.of(School))
                .name("2")
                .build();
        final Collection<Organization> matching = repository.findAll(statewide(), school2Query);
        assertThat(matching.stream().map(Organization::getName))
                .containsOnly("school2");
    }

    @Test
    public void itShouldLimitResultsByQuery() {
        final OrganizationQuery limitedQuery = OrganizationQuery.builder()
                .types(EnumSet.allOf(OrganizationType.class))
                .limit(5)
                .build();
        final Collection<Organization> limitedOrgs = repository.findAll(statewide(), limitedQuery);
        assertThat(limitedOrgs).hasSize(5);
    }

    @Test
    public void itShouldFilterAllResultsByName() {
        final OrganizationQuery namedQuery = OrganizationQuery.builder()
                .types(EnumSet.allOf(OrganizationType.class))
                .name("1")
                .build();
        final Collection<Organization> matching = repository.findAll(statewide(), namedQuery);
        assertThat(matching.stream().map(Organization::getName))
                .containsExactly(
                        "school1",
                        "district1",
                        "schoolgroup1",
                        "districtgroup1");
    }

    @Test
    public void itShouldFindADistrictGroupById() {
        assertThat(repository.findOneByTypeAndId(statewide(), DistrictGroup, -10).getName())
                .isEqualTo("districtgroup1");
        assertThat(repository.findOneByTypeAndId(districtGroups(-20L), DistrictGroup, -10))
                .isNull();
    }

    @Test
    public void itShouldFindADistrictById() {
        assertThat(repository.findOneByTypeAndId(statewide(), District, -10).getName())
                .isEqualTo("district1");
        assertThat(repository.findOneByTypeAndId(districts(-20L), DistrictGroup, -10))
                .isNull();
    }

    @Test
    public void itShouldFindASchoolGroupById() {
        assertThat(repository.findOneByTypeAndId(statewide(), SchoolGroup, -10).getName())
                .isEqualTo("schoolgroup1");
        assertThat(repository.findOneByTypeAndId(schoolGroups(-20L), SchoolGroup, -10))
                .isNull();
    }

    @Test
    public void itShouldFindASchoolById() {
        assertThat(repository.findOneByTypeAndId(statewide(), School, -101).getName())
                .isEqualTo("school1");
        assertThat(repository.findOneByTypeAndId(schools(-102L), School, -101))
                .isNull();
    }

    @Test
    public void itShouldPreserveNullIds() {
        final District district = (District) repository.findOneByTypeAndId(statewide(), District, -30);
        assertThat(district.getDistrictGroupId()).isNull();

        final School school = (School) repository.findOneByTypeAndId(statewide(), School, -301);
        assertThat(school.getDistrictGroupId()).isNull();
        assertThat(school.getSchoolGroupId()).isNull();
    }

    @Configuration
    public static class ReportingJdbcOrganizationRepositoryITConfiguration {

        @Bean
        public ReportingJdbcOrganizationRepository repository(final NamedParameterJdbcTemplate template,
                                                              final SecurityParameterProvider securityParameterProvider) {
            return new ReportingJdbcOrganizationRepository(template, securityParameterProvider);
        }
    }
}