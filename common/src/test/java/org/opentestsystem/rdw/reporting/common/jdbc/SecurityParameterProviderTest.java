package org.opentestsystem.rdw.reporting.common.jdbc;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.configuration.TenantProperties;
import org.opentestsystem.rdw.reporting.common.security.PermissionSource;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Map;

import static com.google.common.collect.ImmutableSet.of;
import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.data.MapEntry.entry;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.UNMATCHABLE_IDS;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;

public class SecurityParameterProviderTest {

    private PermissionSource permissionSource;
    private TenantProperties tenantProperties;

    private SecurityParameterProvider securityParameterProvider;

    @Before
    public void setUp() {
        permissionSource = mock(PermissionSource.class);
        tenantProperties = mock(TenantProperties.class);

        when(tenantProperties.isTransferAccessEnabled()).thenReturn(false);
        when(permissionSource.getPermissionsById()).thenReturn(newHashMap());
        when(permissionSource.getUsername()).thenReturn("someone@somewhere.com");
        securityParameterProvider = new SecurityParameterProvider(tenantProperties);
    }

    @Test
    public void itShouldGetSecurityParametersForPermissionSourceWithEmptyScope() {
        final Map<String, Object> params = securityParameterProvider.getSecurityParameters(permissionSource);

        assertThat(params).containsOnly(entry("user_login", "someone@somewhere.com"),
                entry("allow_transfer_access", false),
                entry("group_statewide", false),
                entry("group_district_group_ids", UNMATCHABLE_IDS),
                entry("group_district_ids", UNMATCHABLE_IDS),
                entry("group_school_group_ids", UNMATCHABLE_IDS),
                entry("group_school_ids", UNMATCHABLE_IDS),
                entry("individual_statewide", false),
                entry("individual_district_group_ids", UNMATCHABLE_IDS),
                entry("individual_district_ids", UNMATCHABLE_IDS),
                entry("individual_school_group_ids", UNMATCHABLE_IDS),
                entry("individual_school_ids", UNMATCHABLE_IDS),
                entry("state_embargo_admin", false),
                entry("district_embargo_admin_ids", UNMATCHABLE_IDS)
        );
    }

    @Test
    public void itShouldGetSecurityParametersForPermissionSource() {

        final Map<String, Permission> securityParameters = newHashMap();
        securityParameters.put(IndividualPiiRead,
                individualOf(PermissionScope.builder()
                        .statewide(true)
                        .addDistrictIds(of(1L, 2L))
                        .addDistrictGroupIds(of(3L, 4L))
                        .addSchoolIds(of(5L, 6L))
                        .addSchoolGroupIds(of(7L, 8L)).build()));

        securityParameters.put(GroupPiiRead,
                groupOf(PermissionScope.builder()
                        .statewide(true)
                        .addDistrictIds(of(10L, 20L))
                        .addDistrictGroupIds(of(30L, 40L))
                        .addSchoolIds(of(50L, 60L))
                        .addSchoolGroupIds(of(70L, 80L)).build()));

        securityParameters.put(EmbargoRead,
                new Permission(EmbargoRead, PermissionScope.builder()
                        .statewide(true)
                        .addDistrictIds(of(100L, 200L)).build()));


        when(permissionSource.getPermissionsById()).thenReturn(securityParameters);
        when(tenantProperties.isTransferAccessEnabled()).thenReturn(true);

        final Map<String, Object> params = securityParameterProvider.getSecurityParameters(permissionSource);

        assertThat(params.size()).isEqualTo(14);

        assertThat(params.get("user_login")).isEqualTo("someone@somewhere.com");
        assertThat(params.get("allow_transfer_access")).isEqualTo(true);

        assertThat(params.get("group_statewide")).isEqualTo(true);
        assertThat(params.get("group_district_group_ids")).isEqualTo(of(30L, 40L));
        assertThat(params.get("group_district_ids")).isEqualTo(of(10L, 20L));
        assertThat(params.get("group_school_ids")).isEqualTo(of(50L, 60L));
        assertThat(params.get("group_school_group_ids")).isEqualTo(of(70L, 80L));

        assertThat(params.get("individual_statewide")).isEqualTo(true);
        assertThat(params.get("individual_district_group_ids")).isEqualTo(of(3L, 4L));
        assertThat(params.get("individual_district_ids")).isEqualTo(of(1L, 2L));
        assertThat(params.get("individual_school_ids")).isEqualTo(of(5L, 6L));
        assertThat(params.get("individual_school_group_ids")).isEqualTo(of(7L, 8L));

        assertThat(params.get("state_embargo_admin")).isEqualTo(true);
        assertThat(params.get("district_embargo_admin_ids")).isEqualTo(of(100L, 200L));
    }

    @Test
    public void itShouldGetSecurityParametersForPermissionScope() {
        final PermissionScope permissionScope = PermissionScope.builder()
                .statewide(true)
                .addDistrictIds(of(1L, 2L))
                .addDistrictGroupIds(of(3L, 4L))
                .addSchoolIds(of(5L, 6L))
                .addSchoolGroupIds(of(7L, 8L))
                .build();

        final Map<String, Object> params = securityParameterProvider.getSecurityParameters(permissionScope);
        assertThat(params.size()).isEqualTo(6);

        assertThat(params.get("statewide")).isEqualTo(true);
        assertThat(params.get("district_group_ids")).isEqualTo(of(3L, 4L));
        assertThat(params.get("district_ids")).isEqualTo(of(1L, 2L));
        assertThat(params.get("school_ids")).isEqualTo(of(5L, 6L));
        assertThat(params.get("school_group_ids")).isEqualTo(of(7L, 8L));
    }

    @Test
    public void itShouldDisableTransferAccess() {
        when(tenantProperties.isTransferAccessEnabled()).thenReturn(true);

        assertThat(securityParameterProvider.getSecurityParameters(permissionSource).get("allow_transfer_access")).isEqualTo(true);
        assertThat(securityParameterProvider.getSecurityParameters(permissionSource, false).get("allow_transfer_access")).isEqualTo(true);
        assertThat(securityParameterProvider.getSecurityParameters(permissionSource, true).get("allow_transfer_access")).isEqualTo(false);

        when(tenantProperties.isTransferAccessEnabled()).thenReturn(false);

        assertThat(securityParameterProvider.getSecurityParameters(permissionSource).get("allow_transfer_access")).isEqualTo(false);
        assertThat(securityParameterProvider.getSecurityParameters(permissionSource, false).get("allow_transfer_access")).isEqualTo(false);
        assertThat(securityParameterProvider.getSecurityParameters(permissionSource, true).get("allow_transfer_access")).isEqualTo(false);
    }
}