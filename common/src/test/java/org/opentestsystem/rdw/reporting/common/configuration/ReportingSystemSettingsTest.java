package org.opentestsystem.rdw.reporting.common.configuration;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Admin;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Disabled;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Enabled;

/**
 * Test loading of reporting settings from a yaml file
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = {ReportingSystemSettingsTest.TestConfiguration.class})
@ActiveProfiles("test-reporting-settings")
public class ReportingSystemSettingsTest {

    @EnableConfigurationProperties(ReportingSystemSettings.class)
    public static class TestConfiguration {
    }

    @Autowired
    private ReportingSystemSettings settings;

    @Test
    public void itShouldHaveState() {
        assertThat(settings.getState().getCode()).isEqualTo("CA");
    }

    @Test
    public void itShouldHaveStudentFields() {
        final Map<StudentFieldType, SearchFieldPermissionLevel> studentFilters = settings.getStudentFields();
        assertThat(studentFilters.get(StudentFieldType.EconomicDisadvantage)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.EnglishLanguageAcquisitionStatus)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.Ethnicity)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.IndividualEducationPlan)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.LimitedEnglishProficiencies)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.MigrantStatus)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.MilitaryStudentIdentifier)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.PrimaryLanguage)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.Section504)).isEqualTo(Admin);
        assertThat(studentFilters.containsKey(StudentFieldType.Gender)).isFalse();
        assertThat(studentFilters).hasSize(9);
    }

    @Test
    public void itShouldHaveReportLanguages() {
        assertThat(settings.getReportLanguages())
                .containsExactlyElementsOf(ImmutableList.of(
                        "es"
                ));
    }

    @Test
    public void getEffectiveLanguagesShouldInsertEnglishIfAbsent() {
        assertThat(settings.getEffectiveReportLanguages())
                .containsExactlyElementsOf(ImmutableList.of(
                        "en",
                        "es"
                ));
    }

    @Test
    public void getEffectiveLanguagesShouldAlwaysListEnglishFirst() {
        final ReportingSystemSettings settings = new ReportingSystemSettings();
        settings.setReportLanguages(ImmutableList.of(
                "es",
                "en"
        ));

        assertThat(settings.getEffectiveReportLanguages())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(ImmutableList.of(
                        "en",
                        "es"
                ));
    }

    @Test
    public void getEffectiveLanguagesShouldMaintainSettingOrderButWithoutDuplicates() {
        final ReportingSystemSettings settings = new ReportingSystemSettings();
        settings.setReportLanguages(ImmutableList.of(
                "en",
                "en",
                "fr",
                "es",
                "es"
        ));

        assertThat(settings.getEffectiveReportLanguages())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(ImmutableList.of(
                        "en",
                        "fr",
                        "es"
                ));
    }


}
