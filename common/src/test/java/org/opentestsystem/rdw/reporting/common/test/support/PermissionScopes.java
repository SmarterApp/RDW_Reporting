package org.opentestsystem.rdw.reporting.common.test.support;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static com.google.common.collect.ImmutableSet.of;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.EmbargoRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.GroupPiiRead;
import static org.opentestsystem.rdw.reporting.common.security.ReportingPermission.IndividualPiiRead;

/**
 * Testing utilities for dealing with permission scopes
 */
public final class PermissionScopes {

    private PermissionScopes() {
    }

    public static Map<String, Permission> permissions(Permission... permissionScopes) {
        return ImmutableMap
                .<String, Permission>builder()
                .putAll(Stream
                        .of(permissionScopes)
                        .collect(Collectors.toMap(Permission::getId, permission -> permission)))
                .build();
    }

    public static Permission groupOf(PermissionScope scope) {
        return new Permission(GroupPiiRead, scope);
    }

    public static Permission individualOf(PermissionScope scope) {
        return new Permission(IndividualPiiRead, scope);
    }

    public static PermissionScope statewide() {
        return PermissionScope.STATEWIDE;
    }

    public static PermissionScope districtGroups(final Long... ids) {
        return PermissionScope.builder().addDistrictGroupIds(Arrays.asList(ids)).build();
    }

    public static PermissionScope districts(final Long... ids) {
        return PermissionScope.builder().addDistrictIds(Arrays.asList(ids)).build();
    }

    public static PermissionScope schools(final Long... ids) {
        return PermissionScope.builder().addSchoolIds(Arrays.asList(ids)).build();
    }

    public static PermissionScope schoolGroups(final Long... ids) {
        return PermissionScope.builder().addSchoolGroupIds(Arrays.asList(ids)).build();
    }

    // EmbargoRead is an add-on permission to PII, both are required to view exams
    public static Map<String, Permission> getEmbargoPermissions(final boolean stateWide, final Long districtId) {
        return ImmutableMap.<String, Permission>builder()
                .put(EmbargoRead,
                        new Permission(EmbargoRead, PermissionScope.builder()
                                .statewide(stateWide)
                                .addDistrictIds(districtId != null ? of(districtId) : of()).build()))
                .putAll(permissions(individualOf(statewide())))
                .build();

    }
}
