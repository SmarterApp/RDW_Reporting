package org.opentestsystem.rdw.reporting.common.report;

import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneOffset;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Comparator.comparing;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcExamReportRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcExamReportRepositoryIT {

    private static final Student student1 = Student.builder()
            .id(-1)
            .ssid("student1_ssid")
            .firstName("student1_firstName")
            .lastName("student1_lastName")
            .genderCode("g1")
            .build();

    private static final StudentEnrollment studentEnrollment1 = StudentEnrollment.builder()
            .stateCode("CA")
            .districtName("district1")
            .schoolName("school1")
            .gradeId(-2)
            .build();

    @Autowired
    private JdbcExamReportRepository repository;

    private static Instant instant(final String value) {
        return LocalDate.parse(value).atStartOfDay().toInstant(ZoneOffset.ofHours(0));
    }

    @Test
    public void findIcaReportShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findLatestIcaByStudentIdAndSchoolYear(statewide(), 0, 2017)).isNull();
    }

    @Test
    public void findIabReportShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findAllIabsByStudentIdAndSchoolYear(statewide(), 0, 2017)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findLatestIcaByStudentIdAndSchoolYear(statewide(), -1, 0)).isNull();
    }

    @Test
    public void findIabReportShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findAllIabsByStudentIdAndSchoolYear(statewide(), -1, 0)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findLatestIcaByStudentIdAndSchoolYear(districts(0L), -1, 0)).isNull();
    }

    @Test
    public void findIabReportShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findAllIabsByStudentIdAndSchoolYear(districts(0L), -1, 0)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findLatestIcaByStudentIdAndSchoolYear(schools(0L), -1, 0)).isNull();
    }

    @Test
    public void findIabReportShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findAllIabsByStudentIdAndSchoolYear(schools(0L), -1, 0)).isNull();
    }

    @Test
    public void findIvsReportShouldReportForCorrectStudentAndYear() throws Exception {
        assertThat(repository.findLatestIcaByStudentIdAndSchoolYear(statewide(), -1, 2017))
                .isEqualToComparingFieldByFieldRecursively(
                        IcaReport.builder()
                                .student(student1)
                                .studentEnrollment(studentEnrollment1)
                                .assessment(Assessment.builder()
                                        .id(-1)
                                        .name("ica1")
                                        .schoolYear(2017)
                                        .gradeId(-1)
                                        .subject(Subject.MATH)
                                        .type(AssessmentType.ICA)
                                        .claimCodes(newArrayList("ica_claim1", "ica_claim2", "ica_claim3", "ica_claim4"))
                                        .cutPoints(newArrayList(100, 200, 300, 400, 500))
                                        .build()
                                )
                                .exam(Exam.builder()
                                        .id(-1)
                                        .sessionId("session1")
                                        .dateTime(instant("2017-01-01"))
                                        .gradeId(-2)
                                        .administrativeConditionCode("Valid")
                                        .completenessCode("Complete")
                                        .scaleScore(ScaleScore.builder().level(1).value(2000).standardError(20).build())
                                        .claimScaleScores(newArrayList(
                                                ScaleScore.builder().level(1).value(100).standardError(10).build(),
                                                ScaleScore.builder().level(2).value(200).standardError(20).build(),
                                                ScaleScore.builder().level(3).value(300).standardError(30).build(),
                                                ScaleScore.builder().level(4).value(400).standardError(40).build()
                                        ))
                                        .build()
                                )
                                .build()
                );
    }

    @Test
    public void findIabReportShouldReportForCorrectStudentAndYear() throws Exception {

        final Multimap<Assessment, Exam> assessments = TreeMultimap
                .create(comparing(Assessment::getName), comparing(Exam::getDateTime).reversed());

        final Assessment iab1 = Assessment.builder()
                .id(-2)
                .name("iab1")
                .schoolYear(2017)
                .gradeId(-2)
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .cutPoints(newArrayList())
                .build();

        final Assessment iab2 = Assessment.builder()
                .id(-3)
                .name("iab2")
                .schoolYear(2016)
                .gradeId(-1)
                .subject(Subject.ELA)
                .type(AssessmentType.IAB)
                .claimCodes(null)
                .cutPoints(newArrayList())
                .build();

        final Exam iab1_exam1 = Exam.builder()
                .id(-4)
                .sessionId("session4")
                .dateTime(instant("2017-01-02"))
                .gradeId(-2)
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab1_exam2 = Exam.builder()
                .id(-3)
                .sessionId("session3")
                .dateTime(instant("2017-01-01"))
                .gradeId(-2)
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam1 = Exam.builder()
                .id(-6)
                .sessionId("session6")
                .dateTime(instant("2017-01-04"))
                .gradeId(-2)
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        final Exam iab2_exam2 = Exam.builder()
                .id(-5)
                .sessionId("session5")
                .dateTime(instant("2017-01-03"))
                .gradeId(-2)
                .administrativeConditionCode("Valid")
                .completenessCode("Complete")
                .scaleScore(ScaleScore.builder().level(2).value(2100).standardError(21.0).build())
                .claimScaleScores(null)
                .build();

        assessments.put(iab1, iab1_exam1);
        assessments.put(iab1, iab1_exam2);
        assessments.put(iab2, iab2_exam1);
        assessments.put(iab2, iab2_exam2);

        assertThat(repository.findAllIabsByStudentIdAndSchoolYear(statewide(), -1, 2017))
                .isEqualToComparingFieldByFieldRecursively(
                        IabReport.builder()
                                .student(student1)
                                .studentEnrollment(studentEnrollment1)
                                .examsByAssessment(assessments.asMap())
                                .build()
                );
    }

}
