package org.opentestsystem.rdw.reporting.common.model.jackson;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.model.AggregateQueryType;
import org.opentestsystem.rdw.reporting.common.model.AggregateRequestMessage;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;

import java.net.URI;

import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.DimensionType.Gender;

public class AggregateReportModuleTest {

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new ObjectMapper();
        objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.registerModules(new GuavaModule(), new AggregateReportModule());
    }

    @Test
    public void itShouldRoundTripAnAggregateRequestMessage() throws Exception {
        final StudentFilters filters = StudentFilters.builder()
                .section504Codes(ImmutableSet.of("yes"))
                .build();
        final CustomAggregateReportQuery query = CustomAggregateReportQuery.builder()
                .assessmentTypeCode("sum")
                .studentFilters(filters)
                .subgroup(Gender)
                .queryType(AggregateQueryType.BasicCustomAggregate)
                .districtIds(ImmutableSet.of(123L, 456L))
                .build();
        final AggregateRequestMessage message = AggregateRequestMessage.builder()
                .id(3L)
                .aggregateQuery(query)
                .responseLocation(URI.create("/here"))
                .build();

        final String serializedMessage = objectMapper.writeValueAsString(message);
        final AggregateRequestMessage deserialized = objectMapper.readValue(serializedMessage, AggregateRequestMessage.class);

        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(message);
    }
}