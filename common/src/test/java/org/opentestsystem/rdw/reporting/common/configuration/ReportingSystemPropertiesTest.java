package org.opentestsystem.rdw.reporting.common.configuration;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Admin;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Disabled;
import static org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel.Enabled;

/**
 * Test loading of reporting reportingSystemProperties from a yaml file
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = {ReportingSystemPropertiesTest.TestConfiguration.class})
@ActiveProfiles(profiles = {"test-reporting-settings", "test-reporting-settings_nv"})
@EnableConfigurationProperties
public class ReportingSystemPropertiesTest {

    public static class TestConfiguration {
        @Bean
        @ConfigurationProperties(prefix = "reporting")
        public ReportingSystemSettings reportingSystemSettings() {
            return new ReportingSystemSettings();
        }

        @Bean("tenantIdResolver")
        public ReportingTenantIdResolver reportingTenantIdResolver() {
            return new ReportingTenantIdResolver();
        }

        @Bean("reportingSystemPropertiesResolver")
        ReportingSystemPropertiesResolver reportingSystemPropertiesResolver(ReportingTenantIdResolver reportingTenantIdResolver,
                                                                            ReportingSystemSettings reportingSystemSettings) {
            return new ReportingSystemPropertiesResolver(reportingTenantIdResolver, reportingSystemSettings);
        }
    }

    @Autowired
    @Qualifier("reportingSystemPropertiesResolver")
    private ReportingSystemProperties reportingSystemProperties;

    @Test
    public void itShouldHaveStateDefault() {
        assertThat(reportingSystemProperties.getState().getCode()).isEqualTo("CA");
    }

    @Test
    public void itShouldHaveStateNv() {
        TenantContextHolder.setTenantId("nv");
        assertThat(reportingSystemProperties.getState().getCode()).isEqualTo("NV");
        TenantContextHolder.clear();
    }

    @Test
    public void itShouldHaveStudentFieldsDefault() {
        final Map<StudentFieldType, SearchFieldPermissionLevel> studentFilters = reportingSystemProperties.getStudentFields();
        assertThat(studentFilters.get(StudentFieldType.EconomicDisadvantage)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.EnglishLanguageAcquisitionStatus)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.Ethnicity)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.IndividualEducationPlan)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.LimitedEnglishProficiency)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.MigrantStatus)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.MilitaryStudentIdentifier)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.PrimaryLanguage)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.Section504)).isEqualTo(Admin);
        assertThat(studentFilters.containsKey(StudentFieldType.Gender)).isFalse();
        assertThat(studentFilters).hasSize(9);
    }

    @Test
    public void itShouldHaveStudentFieldsNv() {
        TenantContextHolder.setTenantId("nv");
        final Map<StudentFieldType, SearchFieldPermissionLevel> studentFilters = reportingSystemProperties.getStudentFields();
        assertThat(studentFilters.get(StudentFieldType.EconomicDisadvantage)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.EnglishLanguageAcquisitionStatus)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.Ethnicity)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.IndividualEducationPlan)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.LimitedEnglishProficiency)).isEqualTo(Admin);
        assertThat(studentFilters.get(StudentFieldType.MigrantStatus)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.MilitaryStudentIdentifier)).isEqualTo(Enabled);
        assertThat(studentFilters.get(StudentFieldType.PrimaryLanguage)).isEqualTo(Disabled);
        assertThat(studentFilters.get(StudentFieldType.Section504)).isEqualTo(Enabled);
        assertThat(studentFilters.containsKey(StudentFieldType.Gender)).isFalse();
        assertThat(studentFilters).hasSize(9);
        TenantContextHolder.clear();
    }

    @Test
    public void itShouldHaveReportLanguagesDefault() {
        assertThat(reportingSystemProperties.getReportLanguages())
                .containsExactly(
                        "es"
                );
    }

    @Test
    public void itShouldHaveReportLanguagesNv() {
        TenantContextHolder.setTenantId("nv");
        assertThat(reportingSystemProperties.getReportLanguages())
                .containsExactly(
                        "it"
                );
        TenantContextHolder.clear();
    }

    @Test
    public void getEffectiveLanguagesShouldInsertEnglishIfAbsentDefault() {
        assertThat(reportingSystemProperties.getEffectiveReportLanguages())
                .containsExactly(
                        "en",
                        "es"
                );
    }

    @Test
    public void getEffectiveLanguagesShouldInsertEnglishIfAbsentNv() {
        TenantContextHolder.setTenantId("nv");
        assertThat(reportingSystemProperties.getEffectiveReportLanguages())
                .containsExactly(
                        "en",
                        "it"
                );
        TenantContextHolder.clear();
    }

    @Test
    public void getEffectiveLanguagesShouldAlwaysListEnglishFirst() {
        final ReportingSystemSettings settings = new ReportingSystemSettings();
        settings.setReportLanguages(ImmutableList.of(
                "es",
                "en"
        ));

        assertThat(settings.getEffectiveReportLanguages())
                .containsExactly(
                        "en",
                        "es"
                );
    }

    @Test
    public void getEffectiveLanguagesShouldMaintainSettingOrderButWithoutDuplicates() {
        final ReportingSystemSettings settings = new ReportingSystemSettings();
        settings.setReportLanguages(ImmutableList.of(
                "en",
                "en",
                "fr",
                "es",
                "es"
        ));

        assertThat(settings.getEffectiveReportLanguages())
                .containsExactly(
                        "en",
                        "fr",
                        "es"
                );
    }

    @Test
    public void transferAccessEnabledDefault(){
        assertThat(reportingSystemProperties.isTransferAccessEnabled()).isTrue();
    }

    @Test
    public void transferAccessEnabledNv(){
        TenantContextHolder.setTenantId("nv");
        assertThat(reportingSystemProperties.isTransferAccessEnabled()).isFalse();
        TenantContextHolder.clear();
    }

}
