package org.opentestsystem.rdw.reporting.common.report.client;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;

public class WkhtmltopdfWebServiceClientTest {

    private final String url = "http://0.0.0.0:8082";

    private RestTemplate restTemplate() {
        final RestTemplate template = new RestTemplate();

        final ByteArrayHttpMessageConverter byteArrayHttpMessageConverter = new ByteArrayHttpMessageConverter();
        byteArrayHttpMessageConverter.setSupportedMediaTypes(newArrayList(
                MediaType.APPLICATION_PDF,
                MediaType.APPLICATION_OCTET_STREAM
        ));

        final List<HttpMessageConverter<?>> converters = template.getMessageConverters();
        converters.add(byteArrayHttpMessageConverter);

        template.setMessageConverters(converters);
        return template;
    }

    @Test
    public void toPdf() throws Exception {

        final WkhtmltopdfWebServiceClient client = new WkhtmltopdfWebServiceClient(restTemplate(), url);

        final byte[] contents = IOUtils.toByteArray(getClass().getResourceAsStream("/templates/in.html"));

        final Request request = new Request(contents, Options.builder()
                .dpi(276)
                .pageSize("Letter")
        .build());

        final byte[] pdf = client.toPdf(request);

        FileUtils.writeByteArrayToFile(new File("a.pdf"), pdf);
    }

    @Test
    public void bones() throws Exception {

        final RestTemplate template = restTemplate();

        final byte[] contents = IOUtils.toByteArray(getClass().getResourceAsStream("/templates/in.html"));

        final byte[] base64contents = Base64.getEncoder().encode(contents);
        final String contentsAsString = new String(base64contents); // correct

        final Map<String, Object> options = newHashMap();

        final Map<String, Object> request = newHashMap();
        request.put("contents", contentsAsString);
        request.put("options", options);

        final HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        final ResponseEntity<byte[]> pdf = template.exchange(url, HttpMethod.POST, new HttpEntity<>(request, headers), byte[].class);
        FileUtils.writeByteArrayToFile(new File("b.pdf"), pdf.getBody());
    }

    public static class RequestLoggingInterceptor implements ClientHttpRequestInterceptor {

        private final static Logger log = LoggerFactory.getLogger(RequestLoggingInterceptor.class);

        @Override
        public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
            ClientHttpResponse response = execution.execute(request, body);

            log.debug("request method: {}, request URI: {}, request headers: {}, request body: {}, response status code: {}, response headers: {}",
                    request.getMethod(),
                    request.getURI(),
                    request.getHeaders(),
                    new String(body, Charset.forName("UTF-8")),
                    response.getStatusCode(),
                    response.getHeaders());

            return response;
        }
    }
}


