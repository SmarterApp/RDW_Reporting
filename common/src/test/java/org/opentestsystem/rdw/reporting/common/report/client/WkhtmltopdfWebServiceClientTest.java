package org.opentestsystem.rdw.reporting.common.report.client;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class WkhtmltopdfWebServiceClientTest {

    private WkhtmltopdfWebServiceClient client;
    private RestTemplate template;
    private String endpoint = "http://wkhtmltopdf";

    @Before
    public void createClient() {
        template = mock(RestTemplate.class);

        client = new WkhtmltopdfWebServiceClient(template, endpoint);
    }

    @Test
    public void itShouldPostRequest() {
        final byte[] pdf = "pdf".getBytes();
        final ResponseEntity<byte[]> response = new ResponseEntity<>(pdf, HttpStatus.OK);
        when(template.exchange(eq(endpoint), eq(HttpMethod.POST), any(HttpEntity.class), eq(byte[].class)))
                .thenReturn(response);

        assertThat(client.toPdf(mock(Request.class))).isEqualTo(pdf);
    }

    @Test(expected = RuntimeException.class)
    public void itShouldDealWithBadResponse() {
        final ResponseEntity<byte[]> response = new ResponseEntity<>("OK".getBytes(), HttpStatus.NOT_ACCEPTABLE);
        when(template.exchange(eq(endpoint), eq(HttpMethod.POST), any(HttpEntity.class), eq(byte[].class)))
                .thenReturn(response);

        client.toPdf(mock(Request.class));
    }
}