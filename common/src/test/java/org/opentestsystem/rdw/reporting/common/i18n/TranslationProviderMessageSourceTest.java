package org.opentestsystem.rdw.reporting.common.i18n;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.context.NoSuchMessageException;

import java.util.Locale;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.i18n.TranslationProviderMessageSource.DefaultLocale;

@RunWith(MockitoJUnitRunner.class)
public class TranslationProviderMessageSourceTest {

    @Mock
    private TranslationProvider provider;

    private TranslationProviderMessageSource source;

    @Before
    public void setup() {
        final Map<String, String> translations = newHashMap();
        translations.put("key_A", "value_A");
        translations.put("key_B", "value_B");
        when(provider.getTranslationsByCode(eq(DefaultLocale))).thenReturn(translations);

        source = new TranslationProviderMessageSource(provider);
    }

    @Test
    public void itShouldProvideTranslations() {
        assertThat(source.getMessage("key_A", new Object[]{}, DefaultLocale))
                .isEqualTo("value_A");
        assertThat(source.getMessage("key_B", new Object[]{}, DefaultLocale))
                .isEqualTo("value_B");
    }

    @Test
    public void itShouldProvideFallbackTranslations() {
        final Map<String, String> japanese = newHashMap();
        japanese.put("key_B", "value_B_jp");
        when(provider.getTranslationsByCode(eq(Locale.JAPAN))).thenReturn(japanese);

        assertThat(source.getMessage("key_B", new Object[]{}, Locale.JAPAN))
                .isEqualTo("value_B_jp");
        assertThat(source.getMessage("key_A", new Object[]{}, Locale.JAPAN))
                .isEqualTo("value_A");
    }

    @Test(expected = NoSuchMessageException.class)
    public void itShouldThrowForAMissingTranslation() {
        assertThat(source.getMessage("key_C", new Object[]{}, DefaultLocale));
    }

}