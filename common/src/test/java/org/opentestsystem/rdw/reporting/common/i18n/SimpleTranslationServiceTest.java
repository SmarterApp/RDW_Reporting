package org.opentestsystem.rdw.reporting.common.i18n;

import java.util.List;
import java.util.Locale;
import org.junit.Before;
import org.junit.Test;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static java.util.stream.Collectors.toMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class SimpleTranslationServiceTest {

    private static final String ns1 = "ns1";
    private static final String ns2 = "ns2";
    private static final List<Translation> ns1_englishTranslations = newArrayList(
            new Translation("a", "A"),
            new Translation("b", "B")
    );
    private static final List<Translation> ns1_japaneseTranslations = newArrayList(
            new Translation("c", "C")
    );
    private static final List<Translation> ns2_englishTranslations = newArrayList(
            new Translation("x", "X"),
            new Translation("y", "Y")
    );
    private static final List<Translation> ns2_japaneseTranslations = newArrayList(
            new Translation("z", "Z")
    );

    private TranslationRepository repository;
    private SimpleTranslationService service;

    @Before
    public void before() {
        repository = mock(TranslationRepository.class);
        service = new SimpleTranslationService(repository, TranslationNamespace.INTERNAL);
        when(repository.findAllForLocaleAndNamespace(Locale.ENGLISH, TranslationNamespace.INTERNAL)).thenReturn(ns1_englishTranslations);
        when(repository.findAllForLocaleAndNamespace(Locale.JAPANESE, TranslationNamespace.INTERNAL)).thenReturn(ns1_japaneseTranslations);
        when(repository.findAllForLocaleAndNamespace(Locale.ENGLISH, TranslationNamespace.FRONTEND)).thenReturn(ns2_englishTranslations);
        when(repository.findAllForLocaleAndNamespace(Locale.JAPANESE, TranslationNamespace.FRONTEND)).thenReturn(ns2_japaneseTranslations);
    }

    @Test
    public void getTranslationsForLocaleEnglishReturnsJustEnglish() throws Exception {
        assertThat(service.getTranslationsByCode(Locale.ENGLISH)).
                isEqualTo(ns1_englishTranslations.stream().collect(toMap(Translation::getCode, Translation::getValue)));
    }

    @Test
    public void getTranslationsForLocaleJapaneseReturnsJustJapanese() throws Exception {
        assertThat(service.getTranslationsByCode(Locale.JAPANESE)).
                isEqualTo(ns1_japaneseTranslations.stream().collect(toMap(Translation::getCode, Translation::getValue)));
    }

}