package org.opentestsystem.rdw.reporting.common.report.processor;

import org.apache.commons.io.IOUtils;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.report.PrintOptions;

import java.io.InputStream;

import static org.assertj.core.api.Assertions.assertThat;


public class WkhtmltopdfCommandLineHtmlToPdfProcessorIT {

    private WkhtmltopdfCommandLineHtmlToPdfProcessor processor = new WkhtmltopdfCommandLineHtmlToPdfProcessor();
    private PrintOptions defaultPrintOptions = new PrintOptions(false);
    private String emptyHtmlDocument = "";
    private String invalidHtmlDocument = "</div>";
    private String validHtmlDocument = "<!DOCTYPE html><html><head><title>TITLE</title></head><body>CONTENT</body></html>";

    @Test
    public void itShouldProcessEmptyHTML() throws Exception {
        try (final InputStream data = processor.process(emptyHtmlDocument.getBytes("UTF-8"), defaultPrintOptions)) {
            final byte[] pdf = IOUtils.toByteArray(data);
            assertThat(pdf).isNotEmpty();
        }
    }

    @Test
    public void itShouldProcessInvalidHTML() throws Exception {
        try (final InputStream data = processor.process(invalidHtmlDocument.getBytes("UTF-8"), defaultPrintOptions)) {
            final byte[] pdf = IOUtils.toByteArray(data);
            assertThat(pdf).isNotEmpty();
        }
    }

    @Test
    public void itShouldProcessValidHTML() throws Exception {
        try (final InputStream data = processor.process(validHtmlDocument.getBytes("UTF-8"), defaultPrintOptions)) {
            final byte[] pdf = IOUtils.toByteArray(data);
            assertThat(pdf).isNotEmpty();
        }
    }

}