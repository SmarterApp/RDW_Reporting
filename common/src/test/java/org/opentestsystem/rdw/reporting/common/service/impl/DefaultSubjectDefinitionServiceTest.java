package org.opentestsystem.rdw.reporting.common.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.reporting.common.model.Claim;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.repository.ClaimRepository;
import org.opentestsystem.rdw.reporting.common.repository.SubjectDefinitionRepository;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectDefinitionServiceTest {

    @Mock
    private SubjectDefinitionRepository definitionRepository;

    @Mock
    private ClaimRepository claimRepository;

    private DefaultSubjectDefinitionService service;

    @Before
    public void setup() {
        service = new DefaultSubjectDefinitionService(definitionRepository, claimRepository);
    }

    @Test
    public void itShouldUseRepositoriesToFindAll() {
        final Collection<SubjectDefinition> srcDefinitions = of(
                definition("subject_a", "type_a"),
                definition("subject_a", "type_b"),
                definition("subject_b", "type_a")
        );
        when(definitionRepository.findAll()).thenReturn(srcDefinitions);

        final List<Claim> claims = of(
                claim("subject_a", "type_a", "claim_a"),
                claim("subject_b", "type_a", "claim_a"),
                claim("subject_a", "type_b", "claim_a"),

                claim("subject_a", "type_a", "claim_b"),
                claim("subject_b", "type_a", "claim_b"),
                claim("subject_a", "type_b", "claim_b"),

                claim("subject_a", "type_a", "claim_c"),
                claim("subject_b", "type_a", "claim_c"),
                claim("subject_a", "type_b", "claim_c")
        );
        when(claimRepository.findAll()).thenReturn(claims);

        final Collection<SubjectDefinition> definitions = service.findAll();
        assertThat(definitions.size()).isEqualTo(3);

        final SubjectDefinition definition_a_a = definitions.stream().filter(definition ->
                definition.getSubjectCode().equals("subject_a") &&
                definition.getAsmtTypeCode().equals("type_a"))
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Cannot find expected definition"));
        assertThat(definition_a_a.getScorableClaims())
                .containsExactly("claim_a", "claim_b", "claim_c");
    }

    private SubjectDefinition definition(final String subject, final String asmtType) {
        return SubjectDefinition.builder()
                .subjectCode(subject)
                .asmtTypeCode(asmtType)
                .build();
    }

    private Claim claim(final String subject, final String asmtType, final String code) {
        return Claim.builder()
                .subjectCode(subject)
                .assessmentTypeCode(asmtType)
                .code(code)
                .build();
    }
}