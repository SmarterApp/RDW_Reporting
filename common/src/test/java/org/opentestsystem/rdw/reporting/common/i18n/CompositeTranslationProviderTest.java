package org.opentestsystem.rdw.reporting.common.i18n;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;

import java.util.Collections;
import java.util.Locale;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class CompositeTranslationProviderTest {

    @Test
    public void itShouldMergeTranslationProviders() {
        final TranslationProvider providerA = mock(TranslationProvider.class);
        when(providerA.getTranslationsByCode(any()))
                .thenAnswer(invocation -> ImmutableMap.builder()
                    .put("key_A", "value a_a")
                    .put("key_B", "value a_b")
                    .build());

        final TranslationProvider providerB = mock(TranslationProvider.class);
        when(providerB.getTranslationsByCode(any()))
                .thenAnswer(invocation -> ImmutableMap.builder()
                        .put("key_B", "value b_b")
                        .put("key_C", "value b_c")
                        .build());

        final CompositeTranslationProvider delegatingA_B = new CompositeTranslationProvider(ImmutableList.of(providerA, providerB));
        assertThat(delegatingA_B.getTranslationsByCode(Locale.US))
                .hasSize(3)
                .containsEntry("key_A", "value a_a")
                .containsEntry("key_B", "value b_b")
                .containsEntry("key_C", "value b_c");

        final CompositeTranslationProvider delegatingB_A = new CompositeTranslationProvider(ImmutableList.of(providerB, providerA));
        assertThat(delegatingB_A.getTranslationsByCode(Locale.US))
                .hasSize(3)
                .containsEntry("key_A", "value a_a")
                .containsEntry("key_B", "value a_b")
                .containsEntry("key_C", "value b_c");
    }

    @Test
    public void itShouldReturnAnEmptyMapForALocaleWithoutTranslations() {
        final TranslationProvider providerA = mock(TranslationProvider.class);
        when(providerA.getTranslationsByCode(any()))
                .thenReturn(Collections.emptyMap());
        when(providerA.getTranslationsByCode(eq(Locale.US)))
                .thenAnswer(invocation -> ImmutableMap.builder()
                        .put("key_A", "value a_a")
                        .build());
        final CompositeTranslationProvider compositeProvider = new CompositeTranslationProvider(ImmutableList.of(providerA));

        assertThat(compositeProvider.getTranslationsByCode(Locale.JAPAN)).isEmpty();
    }
}