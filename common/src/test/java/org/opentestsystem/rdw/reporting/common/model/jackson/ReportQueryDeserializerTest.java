package org.opentestsystem.rdw.reporting.common.model.jackson;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.AbstractReportQuery;
import org.opentestsystem.rdw.reporting.common.model.ClaimAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.CustomAggregateReportQuery;
import org.opentestsystem.rdw.reporting.common.model.DimensionType;
import org.opentestsystem.rdw.reporting.common.model.DistrictSchoolExportReportQuery;
import org.opentestsystem.rdw.reporting.common.model.GroupPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.LongitudinalReportQuery;
import org.opentestsystem.rdw.reporting.common.model.PrintableReportOrder;
import org.opentestsystem.rdw.reporting.common.model.SchoolGradePrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.StudentFilters;
import org.opentestsystem.rdw.reporting.common.model.StudentPrintableReportQuery;
import org.opentestsystem.rdw.reporting.common.model.TargetReportQuery;
import org.opentestsystem.rdw.reporting.common.model.UserGroupId;

import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;
import java.util.Set;

import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;


public class ReportQueryDeserializerTest {

    // If updating point this to a folder holding JSON from the last version of the report formats
    private static final String resourceRoot = "/query/1.3/";
    private static final ObjectMapper mapper = createObjectMapper();

    private static ObjectMapper createObjectMapper() {
        final ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        objectMapper.registerModules(new GuavaModule(), new ReportModule());
        return objectMapper;
    }

    private <T> T deserialize(final String resource) {
        try (final InputStream inputStream = this.getClass().getResourceAsStream(resourceRoot + resource)) {
            return (T) mapper.readValue(inputStream, AbstractReportQuery.class);
        } catch (final IOException exception) {
            fail("failed to deserialize " + resource, exception);
            return null;
        }
    }

    @Test
    public void itShouldDeserializeLegacyStudentPrintableReportQuery() {
        final StudentPrintableReportQuery deserialized = deserialize("student.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                StudentPrintableReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                        .subjectCode("Math")
                        .schoolYear(2018)
                        .language(Locale.ENGLISH)
                        .name("Banks, Paul")
                        .accommodationsVisible(true)
                        .disableTransferAccess(false)
                        .studentId(3850)
                        .build()
        );
    }

    @Test
    public void itShouldDeserializeLegacyGroupPrintableReportQuery() {
        final GroupPrintableReportQuery deserialized = deserialize("group.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                GroupPrintableReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                        .subjectCode("Math")
                        .schoolYear(2018)
                        .language(Locale.ENGLISH)
                        .name("Grade 8 Students - UAT")
                        .accommodationsVisible(true)
                        .disableTransferAccess(false)
                        .order(PrintableReportOrder.StudentName)
                        .groupId(new UserGroupId(1423L, null))
                        .build()
        );
    }

    @Test
    public void itShouldDeserializeLegacySchoolGradePrintableReportQuery() {
        final SchoolGradePrintableReportQuery deserialized = deserialize("school-grade.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                SchoolGradePrintableReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.ICA.code())
                        .subjectCode("ELA")
                        .schoolYear(2018)
                        .language(Locale.ENGLISH)
                        .name("Rabbit Tanager High Sch HS")
                        .accommodationsVisible(false)
                        .disableTransferAccess(false)
                        .order(PrintableReportOrder.StudentName)
                        .schoolId(11)
                        .gradeId(11)
                        .build()
        );
    }

    @Test
    public void itShouldDeserializeLegacyDistrictSchoolExportReportQuery() {
        final DistrictSchoolExportReportQuery deserialized = deserialize("district-school-export.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                DistrictSchoolExportReportQuery.builder()
                        .schoolYear(2018)
                        .name("Rabbit Tanager ELA")
                        .disableTransferAccess(false)
                        .schoolIds(ImmutableSet.of(11L))
                        .schoolGroupIds(ImmutableSet.of())
                        .districtIds(ImmutableSet.of())
                        .build()
        );
    }

    @Test
    public void itShouldDeserializeLegacyCustomAggregateReportQuery() {
        final CustomAggregateReportQuery deserialized = deserialize("custom-aggregate.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                CustomAggregateReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.ICA.code())
                        .assessmentGradeCodes(ImmutableSet.of("08"))
                        .includeState(false)
                        .includeAllDistricts(false)
                        .includeAllSchoolsOfDistricts(false)
                        .includeAllDistrictsOfSchools(true)
                        .districtIds(ImmutableSet.of(1L))
                        .completenessCodes(ImmutableSet.of("Complete"))
                        .administrativeConditionCodes(ImmutableSet.of("SD"))
                        .valueDisplayType("Percent")
                        .achievementLevelDisplayType("Separate")
                        .columnOrder(ImmutableList.of(
                                "organization",
                                "assessmentGrade",
                                "schoolYear",
                                "dimension"
                        ))
                        .dimensionTypes(ImmutableSet.of(DimensionType.Language))
                        .studentFilters(StudentFilters.builder()
                                .languageCodes(ImmutableSet.of(
                                        "rus",
                                        "kor"
                                ))
                                .build()
                        )
                        .schoolYears(ImmutableSet.of(2018))
                        .subjectCodes(ImmutableSet.of("Math"))
                        .name("Custom Aggregate Report")
                        .build()
        );
    }

    // TODO
    @Test
    public void itShouldDeserializeLegacyLongitudinalReportQuery() {
//        final LongitudinalReportQuery deserialized = deserialize("longitudinal.json");
//        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
//                LongitudinalReportQuery.builder()
//                        .assessmentTypeCode(AssessmentType.ICA.code())
//                        .assessmentGradeCodes(ImmutableSet.of("08"))
//                        .includeState(false)
//                        .includeAllDistricts(false)
//                        .includeAllSchoolsOfDistricts(false)
//                        .includeAllDistrictsOfSchools(true)
//                        .districtIds(ImmutableSet.of(1L))
//                        .completenessCodes(ImmutableSet.of("Complete"))
//                        .administrativeConditionCodes(ImmutableSet.of("SD"))
//                        .valueDisplayType("Percent")
//                        .achievementLevelDisplayType("Separate")
//                        .columnOrder(ImmutableList.of(
//                                "organization",
//                                "assessmentGrade",
//                                "schoolYear",
//                                "dimension"
//                        ))
//                        .dimensionTypes(ImmutableSet.of(DimensionType.Language))
//                        .studentFilters(StudentFilters.builder()
//                                .languageCodes(ImmutableSet.of(
//                                        "rus",
//                                        "kor"
//                                ))
//                                .build()
//                        )
//                        .schoolYears(ImmutableSet.of(2018))
//                        .subjectCodes(ImmutableSet.of("Math"))
//                        .name("Custom Aggregate Report")
//                        .build()
//        );
    }

    @Test
    public void itShouldDeserializeLegacyClaimReportQuery() {
        final ClaimAggregateReportQuery deserialized = deserialize("claim.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                ClaimAggregateReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                        .assessmentGradeCodes(ImmutableSet.of(
                                "06",
                                "07",
                                "08",
                                "11"
                        ))
                        .includeState(true)
                        .includeAllDistricts(false)
                        .includeAllSchoolsOfDistricts(false)
                        .includeAllDistrictsOfSchools(true)
                        .districtIds(ImmutableSet.of(1L))
                        .valueDisplayType("Percent")
                        .achievementLevelDisplayType("Separate")
                        .columnOrder(ImmutableList.of(
                                "organization",
                                "assessmentGrade",
                                "schoolYear",
                                "claim",
                                "dimension"
                        ))
                        .dimensionTypes(ImmutableSet.of(
                                DimensionType.Ethnicity,
                                DimensionType.Language
                        ))
                        .studentFilters(StudentFilters.builder()
                                .build()
                        )
                        .schoolYears(ImmutableSet.of(
                                2015,
                                2016,
                                2017,
                                2018
                        ))
                        .subjectCodes(ImmutableSet.of(
                                "Math",
                                "ELA",
                                "newsubject",
                                "minisub"
                        ))
                        .claimCodesBySubject(ImmutableMap.<String, Set<String>>builder()
                                .put("Math", ImmutableSet.of())
                                .put("ELA", ImmutableSet.of())
                                .put("newsubject", ImmutableSet.of())
                                .put("minisub", ImmutableSet.of())
                                .build()
                        )
                        .name("PG Claim report over 3k rows")
                        .build()
        );
    }

    @Test
    public void itShouldDeserializeLegacyTargetReportQuery() {
        final TargetReportQuery deserialized = deserialize("target.json");
        assertThat(deserialized).isEqualToComparingFieldByFieldRecursively(
                TargetReportQuery.builder()
                        .assessmentTypeCode(AssessmentType.SUMMATIVE.code())
                        .assessmentGradeCodes(ImmutableSet.of(
                                "06"
                        ))
                        .completenessCodes(ImmutableSet.of("Complete"))
                        .administrativeConditionCodes(ImmutableSet.of("Valid"))
                        .districtIds(ImmutableSet.of(1L))
                        .columnOrder(ImmutableList.of(
                                "claim",
                                "target",
                                "dimension"
                        ))
                        .schoolYear(2018)
                        .subjectCode("Math")
                        .studentFilters(StudentFilters.builder()
                                .build()
                        )
                        .name("Keith's Report")
                        .build()
        );
    }


}
