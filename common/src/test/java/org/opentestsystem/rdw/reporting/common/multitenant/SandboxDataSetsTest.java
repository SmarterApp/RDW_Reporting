package org.opentestsystem.rdw.reporting.common.multitenant;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

// TODO RP-394 Move some integration test (IT) to End to End tests (ETE) and configure to run in CI
//this test only runs against a local docker instance
// set this property to run this test (or temporarily comment out this annotation)
// java -Dtenant-client.docker-it-enable=true
@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles({"sandbox_datasets"})
@EnableConfigurationProperties
public class SandboxDataSetsTest {

    @Autowired
    SandboxDataSets sandboxDataSets;

    @Ignore
    @Test
    public void itShouldLoadSandboxDataSets() {
        assertThat(sandboxDataSets).isNotNull();
        assertThat(sandboxDataSets.getSandboxDatasets()).isNotEmpty();
        assertThat(sandboxDataSets.getSandboxDatasets().size()).isEqualTo(2);
    }

    @Ignore
    @Configuration
    static class Config {

        @Bean
        @ConfigurationProperties("sandbox-properties")
        public SandboxDataSets sandboxDatasets() {
            return new SandboxDataSets();
        }
    }
}