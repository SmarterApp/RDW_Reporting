package org.opentestsystem.rdw.reporting.common.sqlbuilder;


import com.google.common.collect.ImmutableList;
import com.healthmarketscience.sqlbuilder.BinaryCondition;
import com.healthmarketscience.sqlbuilder.ComboCondition;
import com.healthmarketscience.sqlbuilder.CustomCondition;
import com.healthmarketscience.sqlbuilder.CustomSql;
import com.healthmarketscience.sqlbuilder.custom.NamedParamObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {QueryProvider.class, SqlBuilderConfig.class, SqlTemplate.class, YamlPropertiesConfigurator.class})
@Import(ConfigurationPropertiesAutoConfiguration.class)
@ActiveProfiles("test")
public class QueryProviderTestIT {
    @Autowired
    private QueryProvider provider;

    @Test
    public void testQueryAsString() {

        String query = provider.newQueryAsString("achievementLevels", newArrayList());
        assertThat(query).isEqualTo("SELECT  count(*) AS count, " +
                "avg(scale_score) AS score, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
                "fe.asmt_grade_id, " +
                "fe.school_year, " +
                "a.subject_id " +
                "FROM fact_student_ica_exam fe JOIN ica_asmt a ON a.id = fe.asmt_id " +
                "WHERE ( fe.school_year IN (:school_years) AND fe.asmt_grade_id IN (:asmt_grade_ids) AND a.grade_id IN (:asmt_grade_ids)) " +
                "GROUP BY  fe.school_year, fe.asmt_grade_id, a.subject_id");

        query = provider.newQueryAsString("achievementLevels", ImmutableList.of("state"));
        assertThat(query).isEqualTo("SELECT  count(*) AS count, " +
                "avg(scale_score) AS score, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
                "fe.asmt_grade_id, " +
                "fe.school_year, " +
                "a.subject_id, " +
                "'state' AS type " +
                "FROM fact_student_ica_exam fe JOIN ica_asmt a ON a.id = fe.asmt_id " +
                "WHERE ( fe.school_year IN (:school_years) AND fe.asmt_grade_id IN (:asmt_grade_ids) AND a.grade_id IN (:asmt_grade_ids)) " +
                "GROUP BY  fe.school_year, fe.asmt_grade_id, a.subject_id");

        query = provider.newQueryAsString("achievementLevels", ImmutableList.of("allDistricts"));
        assertThat(query).isEqualTo("SELECT  count(*) AS count, " +
                "avg(scale_score) AS score, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
                "fe.asmt_grade_id, " +
                "fe.school_year, " +
                "a.subject_id, " +
                "sch.district_id, " +
                "'district' AS type " +
                "FROM fact_student_ica_exam fe JOIN ica_asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id " +
                "WHERE ( fe.school_year IN (:school_years) AND fe.asmt_grade_id IN (:asmt_grade_ids) AND a.grade_id IN (:asmt_grade_ids)) " +
                "GROUP BY  fe.school_year, fe.asmt_grade_id, a.subject_id, sch.district_id");

        query = provider.newQueryAsString("achievementLevels", ImmutableList.of("allDistricts", "districts"));
        assertThat(query).isEqualTo("SELECT  count(*) AS count, " +
                "avg(scale_score) AS score, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
                "fe.asmt_grade_id, " +
                "fe.school_year, " +
                "a.subject_id, " +
                "sch.district_id, " +
                "'district' AS type, " +
                "district_column " +
                "FROM fact_student_ica_exam fe JOIN ica_asmt a ON a.id = fe.asmt_id JOIN school sch ON sch.id = fe.school_id " +
                "JOIN another_join " +
                "WHERE (( fe.school_year IN (:school_years) AND fe.asmt_grade_id IN (:asmt_grade_ids) AND a.grade_id IN (:asmt_grade_ids)) AND ( district_id in (:district_ids))) " +
                "GROUP BY  fe.school_year, fe.asmt_grade_id, a.subject_id, sch.district_id");
    }

    @Test
    public void testQuery() {
        final String query = provider
                .newQuery("achievementLevels", newArrayList())
                .addCustomColumns(new CustomSql("fooCol"), new CustomSql("BazzCol"))
                .addCondition(ComboCondition.and(
                        new BinaryCondition(BinaryCondition.Op.LESS_THAN,
                                new CustomSql("fooCol"),
                                new NamedParamObject("fooCol")),
                        new CustomCondition("bazzCol IS FUNKY")))
                .toString();

        assertThat(query).isEqualTo("SELECT  count(*) AS count, " +
                "avg(scale_score) AS score, " +
                "sum(CASE WHEN performance_level = 1 THEN 1 ELSE 0 END) AS level1, " +
                "sum(CASE WHEN performance_level = 2 THEN 1 ELSE 0 END) AS level2, " +
                "sum(CASE WHEN performance_level = 3 THEN 1 ELSE 0 END) AS level3, " +
                "sum(CASE WHEN performance_level = 4 THEN 1 ELSE 0 END) AS level4, " +
                "fe.asmt_grade_id, " +
                "fe.school_year, " +
                "a.subject_id," +
                "fooCol,BazzCol " +
                "FROM fact_student_ica_exam fe JOIN ica_asmt a ON a.id = fe.asmt_id " +
                "WHERE (( fe.school_year IN (:school_years) AND fe.asmt_grade_id IN (:asmt_grade_ids) AND a.grade_id IN (:asmt_grade_ids)) AND ((fooCol < :fooCol) AND (bazzCol IS FUNKY))) " +
                "GROUP BY  fe.school_year, fe.asmt_grade_id, a.subject_id");
    }
}