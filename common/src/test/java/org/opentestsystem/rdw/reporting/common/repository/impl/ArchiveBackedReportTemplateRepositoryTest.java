package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.archive.LocalArchiveService;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Properties;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ArchiveBackedReportTemplateRepositoryTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    private ArchiveBackedReportTemplateRepository repository;

    @Before
    public void createRepository() {
        final ArchiveProperties archiveProperties = mock(ArchiveProperties.class);
        when(archiveProperties.isConfiguredFile()).thenReturn(true);
        when(archiveProperties.getUriRoot()).thenReturn("file://" + temporaryFolder.getRoot().getAbsolutePath());

        final ArchiveService archiveService = new LocalArchiveService(archiveProperties);

        repository = new ArchiveBackedReportTemplateRepository(archiveService);
    }

    @Test
    public void itShouldReturnEmptyListing() {
        assertThat(repository.findAllTemplateNames()).isEmpty();
    }

    @Test
    public void itShouldHandleUnknownTemplate() {
        assertThat(repository.exists("Science_sum.html")).isFalse();
        assertThat(repository.getAsString("Science_sum.html")).isEmpty();
        assertThat(repository.getProperties("Science_sum.html")).isEmpty();
        repository.delete("Science_sum.html"); // should quietly no-op
    }

    @Test(expected = IllegalArgumentException.class)
    public void cannotReadUnknownTemplate() {
        repository.read("Science_sum.html", new ByteArrayOutputStream());
    }

    @Test
    public void itshouldHandleExistingTemplate() {
        final String templateName = "Science_sum.html";
        final byte[] contents = "Science summative template".getBytes(UTF_8);
        repository.write(templateName, new ByteArrayInputStream(contents));

        assertThat(repository.findAllTemplateNames()).containsExactly(templateName);
        assertThat(repository.exists(templateName)).isTrue();
        assertThat(repository.getAsString(templateName).orElse(null)).isEqualTo(new String(contents, UTF_8));

        final Properties properties = repository.getProperties(templateName).orElse(null);
        assertThat(properties).isNotNull();
        assertThat(properties).hasSizeGreaterThan(2);
        assertThat(properties.keySet()).contains("Content-Length", "Content-Type", "Last-Modified");

        final ByteArrayOutputStream read = new ByteArrayOutputStream();
        repository.read(templateName, read);
        assertThat(read.toByteArray()).isEqualTo(contents);

        // and make sure delete works
        repository.delete(templateName);
        assertThat(repository.findAllTemplateNames()).isEmpty();
        assertThat(repository.exists(templateName)).isFalse();
        assertThat(repository.getAsString(templateName)).isEmpty();
        assertThat(repository.getProperties(templateName)).isEmpty();
    }

    @Test
    public void itShouldOverwriteExistingContents() {
        final String templateName = "Science_sum.html";
        final byte[] originalContents = "Original science summative template".getBytes(UTF_8);
        final byte[] updatedContents = "Updated science summative template".getBytes(UTF_8);

        repository.write(templateName, new ByteArrayInputStream(originalContents));
        assertThat(repository.getAsString(templateName).orElse(null)).isEqualTo(new String(originalContents, UTF_8));

        repository.write(templateName, new ByteArrayInputStream(updatedContents));
        assertThat(repository.getAsString(templateName).orElse(null)).isEqualTo(new String(updatedContents, UTF_8));
    }


}
