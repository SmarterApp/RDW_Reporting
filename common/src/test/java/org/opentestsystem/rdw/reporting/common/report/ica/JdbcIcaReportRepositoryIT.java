package org.opentestsystem.rdw.reporting.common.report.ica;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollment;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIcaReportRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIcaReportRepositoryIT {

    @Autowired
    private JdbcIcaReportRepository repository;

    @Test
    public void findIcaReportShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), 0, 2017)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), -1, 0)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(districts(0L), -1, 0)).isNull();
    }

    @Test
    public void findIcaReportShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(schools(0L), -1, 0)).isNull();
    }

    @Test
    public void findIvsReportShouldReportForCorrectStudentAndYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(statewide(), -1, 2017))
                .isEqualToComparingFieldByFieldRecursively(
                        IcaReport.builder()
                                .student(Student.builder()
                                        .id(-1)
                                        .ssid("student1_ssid")
                                        .firstName("student1_firstName")
                                        .lastName("student1_lastName")
                                        .genderCode("g1")
                                        .build()
                                )
                                .studentEnrollment(StudentEnrollment.builder()
                                        .stateCode("CA")
                                        .districtName("district1")
                                        .schoolName("school1")
                                        .gradeId(-2)
                                        .build()
                                )
                                .assessment(Assessment.builder()
                                        .id(-1)
                                        .name("ica1")
                                        .schoolYear(2017)
                                        .gradeId(-1)
                                        .subject(Subject.MATH)
                                        .type(AssessmentType.ICA)
                                        .claimCodes(newArrayList("ica_claim1", "ica_claim2", "ica_claim3", "ica_claim4"))
                                        .cutPoints(newArrayList(100, 200, 300, 400, 500))
                                        .build()
                                )
                                .exam(Exam.builder()
                                        .id(-1)
                                        .sessionId("session1")
                                        .dateTime(Instants.from("2017-01-01"))
                                        .gradeId(-2)
                                        .administrativeConditionCode("Valid")
                                        .completenessCode("Complete")
                                        .scaleScore(ScaleScore.builder().level(1).value(2000).standardError(20).build())
                                        .claimScaleScores(newArrayList(
                                                ScaleScore.builder().level(1).value(100).standardError(10).build(),
                                                ScaleScore.builder().level(2).value(200).standardError(20).build(),
                                                ScaleScore.builder().level(3).value(300).standardError(30).build(),
                                                ScaleScore.builder().level(4).value(400).standardError(40).build()
                                        ))
                                        .build()
                                )
                                .build()
                );
    }

}
