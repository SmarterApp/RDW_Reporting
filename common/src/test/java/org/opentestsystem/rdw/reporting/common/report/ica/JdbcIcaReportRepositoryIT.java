package org.opentestsystem.rdw.reporting.common.report.ica;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.model.Exam;
import org.opentestsystem.rdw.reporting.common.model.ScaleScore;
import org.opentestsystem.rdw.reporting.common.model.Student;
import org.opentestsystem.rdw.reporting.common.report.ExamQueryParams;
import org.opentestsystem.rdw.reporting.common.report.StudentEnrollment;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.opentestsystem.rdw.reporting.common.test.support.Instants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Map;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.Subject.ELA;
import static org.opentestsystem.rdw.common.model.Subject.MATH;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.groupOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.individualOf;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcIcaReportRepository.class})
@Sql(scripts = {"classpath:common-integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcIcaReportRepositoryIT {

    @Autowired
    private JdbcIcaReportRepository repository;

    @Test
    public void findOneShouldReturnNullForMissingStudent() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), 0, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForMissingYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(districts(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(schools(0L))), ImmutableSet.of(), -1, 0, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNullForBadSubject() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 0, -1)).isNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadStatewide() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadStatewideStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadDistrict() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districts(-10L))), ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadDistrictStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(districts(-10L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadSchool() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schools(-10L))), ImmutableSet.of(-10L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldFindByGroupPIIReadSchoolStudentNotInGroup() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(schools(-10L))), ImmutableSet.of(-10L), -2, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReturnNotNullFindByGroupForAllSubjects() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-20L), -1, 1997, 1)).isNotNull();
    }

    @Test
    public void findOneShouldReturnNullForBadGroupId() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(groupOf(statewide())), ImmutableSet.of(-30L), -1, 1997, 1)).isNull();
    }

    @Test
    public void findOneShouldReportForCorrectStudentAndYear() throws Exception {
        assertThat(repository.findOneByStudentIdAndSchoolYear(permissions(individualOf(statewide())), ImmutableSet.of(), -1, 1997, 1))
                .isEqualToComparingFieldByFieldRecursively(
                        IcaReport.builder()
                                .student(Student.builder()
                                        .id(-1)
                                        .ssid("student1_ssid")
                                        .firstName("student1_firstName")
                                        .lastName("student1_lastName")
                                        .genderCode("g1")
                                        .build()
                                )
                                .studentEnrollment(StudentEnrollment.builder()
                                        .stateCode("CA")
                                        .districtName("district1")
                                        .schoolName("school1")
                                        .gradeCode("g2")
                                        .build()
                                )
                                .assessment(Assessment.builder()
                                        .id(-1)
                                        .name("ica1")
                                        .schoolYear(1997)
                                        .gradeCode("g1")
                                        .subject(MATH)
                                        .type(AssessmentType.ICA)
                                        .resourceUrl(null)
                                        .claimCodes(newArrayList("ica_claim1", "ica_claim2", "ica_claim3", "ica_claim4"))
                                        .cutPoints(newArrayList(100, 200, 300, 400, 500))
                                        .build()
                                )
                                .exam(Exam.builder()
                                        .id(-1)
                                        .schoolYear(1997)
                                        .sessionId("session1")
                                        .dateTime(Instants.from("1997-01-01"))
                                        .gradeCode("g2")
                                        .administrativeConditionCode("Valid")
                                        .completenessCode("Complete")
                                        .scaleScore(ScaleScore.builder().level(1).value(2000).standardError(20).build())
                                        .claimScaleScores(newArrayList(
                                                ScaleScore.builder().level(1).value(100).standardError(10).build(),
                                                ScaleScore.builder().level(2).value(200).standardError(20).build(),
                                                ScaleScore.builder().level(3).value(300).standardError(30).build(),
                                                ScaleScore.builder().level(4).value(400).standardError(40).build()
                                        ))
                                        .build()
                                )
                                .build()
                );
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsBySchoolAndYear() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .schoolId(-10L)
                .schoolYear(1997)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IcaReport>> reports = repository.findAllForStudentsByExamFilter(
                statewide(),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(2);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getAssessment().getSubject()).isEqualTo(MATH);
        assertThat(reports.get(-1L).get(ELA).getAssessment().getSubject()).isEqualTo(ELA);

        assertThat(reports.get(-2L)).hasSize(2);
        assertThat(reports.get(-2L).get(ELA).getAssessment().getSubject()).isEqualTo(ELA);
    }

    @Test
    public void itShouldFindAllIcaReportsForStudentsByGroup() {
        final ExamQueryParams examQueryParams = ExamQueryParams.builder()
                .groupId(-20L)
                .schoolYear(1997)
                .gradeId(-1)
                .build();
        final Map<Long, Map<Subject, IcaReport>> reports = repository.findAllForStudentsByExamFilter(
                statewide(),
                of(-1L, -2L),
                examQueryParams);

        assertThat(reports).hasSize(1);
        assertThat(reports.get(-1L)).hasSize(2);
        assertThat(reports.get(-1L).get(MATH).getAssessment().getSubject()).isEqualTo(MATH);
        assertThat(reports.get(-1L).get(ELA).getAssessment().getSubject()).isEqualTo(ELA);
    }

}
