package org.opentestsystem.rdw.reporting.common.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;
import org.opentestsystem.rdw.reporting.common.security.ReportingPermission;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.reporting.common.model.StudentFieldType.*;

@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class DefaultUserStudentFieldServiceTest {

    private List<StudentFieldType> studentFieldTypes;

    @MockBean
    private ReportingSystemSettings settings;

    private DefaultUserStudentFieldService service;

    private User user(final String permission) {
        return User.builderExt()
                .id("id")
                .username("username")
                .password("password")
                .permissionsById(
                        ImmutableMap.<String, Permission>builder()
                                .put(permission, new Permission(permission, PermissionScope.STATEWIDE))
                                .build()
                )
                .build();
    }

    private User embargoAdmin() {
        return user(ReportingPermission.EmbargoRead);
    }

    private User schoolAdmin() {
        return user(ReportingPermission.IndividualPiiRead);
    }

    private User teacher() {
        return user(ReportingPermission.GroupPiiRead);
    }

    @Before
    public void before() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of());

        this.studentFieldTypes = ImmutableList.of(
                EconomicDisadvantage,
                EnglishLanguageAcquisitionStatus,
                Ethnicity,
                Gender,
                IndividualEducationPlan,
                LimitedEnglishProficiency,
                MigrantStatus,
                MilitaryStudentIdentifier,
                PrimaryLanguage,
                Section504
        );

        this.service = new DefaultUserStudentFieldService(settings);
    }

    @Test
    public void itShouldReturnValuesFromServices() {
        assertThat(service.get(schoolAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);
    }

    @Test
    public void itShouldNotFilterOutAdminFieldsWhenNoPermissionLevelIsSet() {
        assertThat(service.get(teacher()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);

        assertThat(service.get(schoolAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);

        assertThat(service.get(embargoAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);
    }

    @Test
    public void itShouldNotFilterOutAdminFieldsWhenSetToEnabled() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Enabled
        ));

        assertThat(service.get(teacher()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);

        assertThat(service.get(schoolAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);

        assertThat(service.get(embargoAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);
    }

    @Test
    public void itShouldFilterOutAdminFieldsForTeachers() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Admin
        ));

        final List<StudentFieldType> expected = studentFieldTypes.stream()
                .filter(field -> field != Gender)
                .collect(toList());

        assertThat(service.get(teacher()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(schoolAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(studentFieldTypes);

        assertThat(service.get(embargoAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);
    }

    @Test
    public void itShouldFilterOutDisabledFieldsForEveryone() {
        when(settings.getStudentFields()).thenReturn(ImmutableMap.of(
                Gender, SearchFieldPermissionLevel.Disabled
        ));

        final List<StudentFieldType> expected = studentFieldTypes.stream()
                .filter(field -> field != Gender)
                .collect(toList());

        assertThat(service.get(teacher()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(schoolAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);

        assertThat(service.get(embargoAdmin()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactlyElementsOf(expected);
    }

}
