package org.opentestsystem.rdw.reporting.common.subject.model.jackson;

import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.subject.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.subject.model.DepthOfKnowledge;
import org.opentestsystem.rdw.reporting.common.subject.model.ItemClaim;
import org.opentestsystem.rdw.reporting.common.subject.model.ItemDifficulty;
import org.opentestsystem.rdw.reporting.common.subject.model.PerformanceLevel;
import org.opentestsystem.rdw.reporting.common.subject.model.PerformanceLevels;
import org.opentestsystem.rdw.reporting.common.subject.model.ReportAssessmentType;
import org.opentestsystem.rdw.reporting.common.subject.model.ReportGrade;
import org.opentestsystem.rdw.reporting.common.subject.model.ReportPerformanceLevel;
import org.opentestsystem.rdw.reporting.common.subject.model.Standard;
import org.opentestsystem.rdw.reporting.common.subject.model.SubScoring;
import org.opentestsystem.rdw.reporting.common.subject.model.Subject;
import org.opentestsystem.rdw.reporting.common.subject.model.SubjectMessage;
import org.opentestsystem.rdw.reporting.common.subject.model.Target;

import java.util.concurrent.atomic.AtomicInteger;

import static org.assertj.core.api.Assertions.assertThat;

public class SubjectModuleTest {

    private AtomicInteger claimIdx;
    private XmlMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new XmlMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        objectMapper.registerModules(new SubjectModule(), new GuavaModule());
        claimIdx = new AtomicInteger(1);
    }

    @Test
    public void itShouldSerializeAndDeserializeSubjectAsXML() throws Exception {
        final Subject subject = Subject.builder()
                .code("tst")
                .name("Test")
                .subjectMessages(ImmutableList.of(
                        SubjectMessage.builder()
                                .key("subjectDescription")
                                .value("This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pd\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>.")
                                .build()))
                .assessmentTypes(ImmutableList.of(assessmentType("iab"), assessmentType("ica"), assessmentType("sum")))
                .depthsOfKnowledge(ImmutableList.of(depthOfKnowledge(1), depthOfKnowledge(2), depthOfKnowledge(3)))
                .itemDifficulties(ImmutableList.of(itemDifficulty(1), itemDifficulty(2)))
                .reportGrades(ImmutableList.of(reportGrade("03"), reportGrade("04")))
                .claims(ImmutableList.of(
                        claim("scorable", true, false),
                        claim("organizational", false, true),
                        claim("both", true, true)))
                .standards(ImmutableList.of(standard("std.0.1"), standard("std.0.2")))
                .build();

        final String xmlValue = objectMapper.writeValueAsString(subject);
        assertThat(xmlValue).isNotEmpty();

        final Subject deserialized = objectMapper.readValue(xmlValue, Subject.class);
        assertThat(subject).isEqualToComparingFieldByFieldRecursively(deserialized);
    }

    private ReportGrade reportGrade(final String gradeCode) {
        return ReportGrade.builder()
                .code(gradeCode)
                .reportAssessmentTypes(ImmutableList.of(
                        ReportAssessmentType.builder()
                                .overallAchievementMessage("Overall Grade Message " + gradeCode)
                                .reportPerformanceLevels(ImmutableList.of(
                                        reportPerformanceLevel(1),
                                        reportPerformanceLevel(2),
                                        reportPerformanceLevel(3),
                                        reportPerformanceLevel(4)))
                                .build()
                ))
                .build();
    }

    private ReportPerformanceLevel reportPerformanceLevel(final int performanceLevel) {
        return ReportPerformanceLevel.builder()
                .description("ReportPerformanceLevel Description " + performanceLevel)
                .level(performanceLevel)
                .build();
    }

    private ItemClaim claim(final String code, final boolean scorable, final boolean organizational) {
        return ItemClaim.builder()
                .code(code)
                .name("Claim " + code)
                .scorable(scorable)
                .organizational(organizational)
                .displayOrder(scorable ? claimIdx.getAndIncrement() : null)
                .icon(scorable ? "icon_" + code : null)
                .description("Description " + code)
                .targets(organizational
                        ? ImmutableList.of(target(code, "OA|1"), target(code, "OA|2"))
                        : null)
                .build();
    }

    private Target target(final String claimCode, final String targetCode) {
        return Target.builder()
                .code(claimCode + "|" + targetCode)
                .name("Target name " + targetCode)
                .description("Target description " + targetCode)
                .build();
    }

    private AssessmentType assessmentType(final String typeCode) {
        return AssessmentType.builder()
                .code(typeCode)
                .performanceLevels(PerformanceLevels.builder()
                        .standardCutoff(2)
                        .performanceLevels(ImmutableList.of(performanceLevel(1), performanceLevel(2),  performanceLevel(3), performanceLevel(4)))
                        .build())
                .subScoring(typeCode.equals("iab")
                        ? null
                        : SubScoring.builder()
                                .subScorePerformanceLevels(ImmutableList.of(performanceLevel(1), performanceLevel(2), performanceLevel(3)))
                                .build())
                .build();
    }

    private DepthOfKnowledge depthOfKnowledge(final int depth) {
        return DepthOfKnowledge.builder()
                .name("Depth " + depth)
                .level(depth)
                .reference("http://depth.of.knowledge.com/" + depth + ".pdf")
                .build();
    }

    private ItemDifficulty itemDifficulty(final int idx) {
        return ItemDifficulty.builder()
                .gradeCode("03")
                .moderateLowEnd(idx - 0.1)
                .difficultLowEnd(idx + 0.1)
                .build();
    }

    private PerformanceLevel performanceLevel(final int level) {
        return PerformanceLevel.builder()
                .level(level)
                .name("Level " + level)
                .color("Color_" + level)
                .build();
    }

    private Standard standard(final String code) {
        return Standard.builder()
                .code(code)
                .description("Description " + code)
                .build();
    }
}