package org.opentestsystem.rdw.reporting.common.subject.model.jackson;

import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.subject.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.subject.model.ItemClaim;
import org.opentestsystem.rdw.reporting.common.subject.model.PerformanceLevel;
import org.opentestsystem.rdw.reporting.common.subject.model.ReportGrade;
import org.opentestsystem.rdw.reporting.common.subject.model.ReportPerformanceLevel;
import org.opentestsystem.rdw.reporting.common.subject.model.SubScore;
import org.opentestsystem.rdw.reporting.common.subject.model.SubScoring;
import org.opentestsystem.rdw.reporting.common.subject.model.Subject;
import org.opentestsystem.rdw.reporting.common.subject.model.Target;
import org.opentestsystem.rdw.reporting.common.subject.model.TertiaryScore;

import static org.assertj.core.api.Assertions.assertThat;

public class SubjectModuleTest {

    private XmlMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = new XmlMapper();
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        objectMapper.registerModules(new SubjectModule(), new GuavaModule());
    }

    @Test
    public void itShouldSerializeSubjectAsXML() throws Exception {
        final Subject subject = Subject.builder()
                .code("tst")
                .name("Test")
                .assessmentTypes(ImmutableList.of(assessmentType("iab"), assessmentType("ica"), assessmentType("sum")))
                .commonCoreStandardDescription("This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pd\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>.")
                .reportGrades(ImmutableList.of(reportGrade("03"), reportGrade("04")))
                .itemClaims(ImmutableList.of(itemClaim("1"), itemClaim("2"), itemClaim("3")))
                .build();

        final String xmlValue = objectMapper.writeValueAsString(subject);
        assertThat(xmlValue).isNotEmpty();
    }

    private ReportGrade reportGrade(final String gradeCode) {
        return ReportGrade.builder()
                .code(gradeCode)
                .overallAchievementMessage("Overall Grade Message " + gradeCode)
                .reportPerformanceLevels(ImmutableList.of(
                        reportPerformanceLevel(1),
                        reportPerformanceLevel(2),
                        reportPerformanceLevel(3),
                        reportPerformanceLevel(4)))
                .build();
    }

    private ReportPerformanceLevel reportPerformanceLevel(final int performanceLevel) {
        return ReportPerformanceLevel.builder()
                .description("ReportPerformanceLevel Description " + performanceLevel)
                .level(performanceLevel)
                .build();
    }

    private SubScore subScore(final String code) {
        return SubScore.builder()
                .code(code)
                .name("SubScore Description " + code)
                .icon("fa_" + code)
                .tertiaryScores(ImmutableList.of(tertiaryScore(code, "A"), tertiaryScore(code, "B")))
                .build();
    }

    private ItemClaim itemClaim(final String code) {
        return ItemClaim.builder()
                .code(code)
                .name("ItemClaim description " + code)
                .targets(ImmutableList.of(target(code, "A"), target(code, "B"), target(code, "C")))
                .build();
    }

    private Target target(final String claimCode, final String targetCode) {
        return Target.builder()
                .code(claimCode + "|" + targetCode)
                .name("Target name " + targetCode)
                .description("Target description " + targetCode)
                .build();
    }

    private TertiaryScore tertiaryScore(final String subScoreCode, final String tertiaryScoreCode) {
        return TertiaryScore.builder()
                .code(subScoreCode + "|" + tertiaryScoreCode)
                .name("Tertiary Score name")
                .build();
    }

    private AssessmentType assessmentType(final String typeCode) {
        return AssessmentType.builder()
                .code(typeCode)
                .performanceLevels(ImmutableList.of(performanceLevel(1), performanceLevel(2)))
                .subScoring(subScoring())
                .build();
    }

    private PerformanceLevel performanceLevel(final int level) {
        return PerformanceLevel.builder()
                .level(level)
                .name("Level " + level)
                .rollup(level == 2)
                .build();
    }

    private SubScoring subScoring() {
        return SubScoring.builder()
                .subScorePerformanceLevels(ImmutableList.of(performanceLevel(1), performanceLevel(2)))
                .subScores(ImmutableList.of(subScore("1"), subScore("SOCK_2"), subScore("3")))
                .build();
    }
}