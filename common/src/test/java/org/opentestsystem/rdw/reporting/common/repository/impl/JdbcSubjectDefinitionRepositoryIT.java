package org.opentestsystem.rdw.reporting.common.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.SubjectDefinition;
import org.opentestsystem.rdw.reporting.common.repository.SubjectDefinitionRepository;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@Import({
        JdbcSubjectDefinitionRepository.class,
        ITDataSourceConfiguration.class
})
@RepositoryIT
public class JdbcSubjectDefinitionRepositoryIT {

    @Autowired
    public SubjectDefinitionRepository repository;

    @Test
    public void itShouldFindAllSubjectDefinitions() {
        final Collection<SubjectDefinition> definitions = repository.findAll();

        final SubjectDefinition elaIcaDefinition = SubjectDefinition.builder()
                .asmtTypeCode("ica")
                .subjectCode("ELA")
                .performanceLevelCount(4)
                .performanceLevelStandardCutoff(3)
                .claimScorePerformanceLevelCount(3)
                .targetReport(false)
                .printedReport(true)
                .traitReport(false)
                .scorableClaims(newArrayList("SOCK_R", "SOCK_LS", "2-W", "4-CR"))
                .build();
        final SubjectDefinition mathSumDefinition = SubjectDefinition.builder()
                .asmtTypeCode("sum")
                .subjectCode("Math")
                .performanceLevelCount(4)
                .performanceLevelStandardCutoff(3)
                .claimScorePerformanceLevelCount(3)
                .targetReport(true)
                .printedReport(true)
                .traitReport(false)
                .scorableClaims(newArrayList("1", "SOCK_2", "3"))
                .build();

        assertThat(definitions)
                .usingRecursiveFieldByFieldElementComparator()
                .contains(elaIcaDefinition)
                .contains(mathSumDefinition);

        // verify it is loading traits for summative ELA
        final SubjectDefinition traitful = definitions.stream().filter(SubjectDefinition::isTraitReport).findFirst().get();
        assertThat(traitful.getAsmtTypeCode()).isEqualTo(AssessmentType.SUMMATIVE.code());
        assertThat(traitful.getSubjectCode()).isEqualTo("ELA");
        assertThat(traitful.getTraits()).hasSize(15);
    }

    @Sql(statements = {
         "INSERT INTO subject (id, code, update_import_id, migrate_id) VALUES (-9, 'ALT', -1, -1)",
         "INSERT INTO subject_asmt_type (subject_id, asmt_type_id, performance_level_count, claim_score_performance_level_count, alt_score_performance_level_count, target_report, printed_report, trait_report) VALUES (-9, 3, 4, 3, 4, 0, 0, 1)",
         "INSERT INTO subject_score (id, subject_id, asmt_type_id, score_type_id, code, data_order, display_order) VALUES (-90, -9, 3, 2, '1', 1, 1), (-91, -9, 3, 2, '2', 2, 2), (-92, -9, 3, 3, '1-L', 1, 1), (-93, -9, 3, 3, '2-R', 2, 2)"
    })
    @Test
    public void itShouldFindSomeWithAltScores() {
        final SubjectDefinition alt = SubjectDefinition.builder()
                .asmtTypeCode("sum")
                .subjectCode("ALT")
                .performanceLevelCount(4)
                .claimScorePerformanceLevelCount(3)
                .altScorePerformanceLevelCount(4)
                .targetReport(false)
                .printedReport(false)
                .traitReport(true)
                .scorableClaims(newArrayList("1-L", "2-R"))
                .altScores(newArrayList("1", "2"))
                .build();

        assertThat(repository.findAll())
                .usingRecursiveFieldByFieldElementComparator()
                .contains(alt);
    }
}
