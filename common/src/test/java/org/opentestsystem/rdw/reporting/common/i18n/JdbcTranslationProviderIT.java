package org.opentestsystem.rdw.reporting.common.i18n;

import org.junit.Test;
import org.junit.runner.RunWith;

import org.opentestsystem.rdw.reporting.common.security.CommonTestUserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Locale;
import org.opentestsystem.rdw.reporting.common.test.ITDataSourceConfiguration;
import org.opentestsystem.rdw.reporting.common.test.RepositoryIT;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {ITDataSourceConfiguration.class, JdbcTranslationProvider.class})
@ActiveProfiles("test")
@WithUserDetails
@Import({CommonTestUserDetailsService.class})
public class JdbcTranslationProviderIT {

    @Autowired
    private JdbcTranslationProvider repository;

    @Sql(statements = {
        "INSERT INTO accommodation_translation (language_code, label_code, label) VALUES " +
        "  ('eng', 'msg1', 'English Message 1'), ('eng', 'msg2', 'English Message 2'), ('jpn', 'msg1', 'Japanese Message 1'), ('jpn', 'msg2', 'Japanese Message 2'), ('eng', 'msg3', 'English Message 3')"
    })
    @Test
    public void itShouldGetAccommodationTranslationsByLocale() {
        assertThat(repository.getTranslationsByCode(Locale.US))
                .containsEntry("msg1", "English Message 1")
                .containsEntry("msg2", "English Message 2")
                .containsEntry("msg3", "English Message 3");

        assertThat(repository.getTranslationsByCode(Locale.JAPAN))
                .containsEntry("msg1", "Japanese Message 1")
                .containsEntry("msg2", "Japanese Message 2");
    }

    @Sql(statements = {
            "INSERT INTO subject_translation (subject_id, label_code, label) VALUES (1, 'subject.Math.keyA', 'Value A'), (1, 'subject.Math.keyB', 'Value B')"
    })
    @Test
    public void itShouldIncludeEnglishSubjectTranslations() {
        assertThat(repository.getTranslationsByCode(Locale.US))
                .containsEntry("subject.Math.keyA", "Value A")
                .containsEntry("subject.Math.keyB", "Value B");

        assertThat(repository.getTranslationsByCode(Locale.JAPAN))
                .doesNotContainKeys("subject.Math.keyA", "subject.Math.keyB");
    }

    @Sql(statements = {
            "INSERT INTO language (id, code, name) VALUES (-21, 'abc', 'lang-abc'), (-22, 'cba', 'lang-cba')"
    })
    @Test
    public void itShouldIncludeEnglishLanguageTranslations() {
        assertThat(repository.getTranslationsByCode(Locale.US))
                .containsEntry("common.languages.abc", "lang-abc")
                .containsEntry("common.languages.cba", "lang-cba");

        assertThat(repository.getTranslationsByCode(Locale.JAPAN))
                .doesNotContainKeys("common.languages.abc", "common.languages.cba");
    }
}
