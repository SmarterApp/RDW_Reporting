buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

plugins {
    id "com.moowork.node" version "1.1.1"
    id 'org.springframework.boot' version '1.5.1.RELEASE'
    id "net.ltgt.apt" version "0.9"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "net.ltgt.apt"

group = 'org.opentestsystem.rdw.reporting'
version = '0.0.1-SNAPSHOT'

description = """Reporting Service"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
        
     maven { url "http://repo.maven.apache.org/maven2" }
     maven { url "https://repository.apache.org/content/repositories/snapshots/" }
}
dependencies {
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE')
    compile('org.projectlombok:lombok:1.16.12')
    compile('com.google.guava:guava:20.0')
    compile('org.postgresql:postgresql:9.4.1212')
    compile('mysql:mysql-connector-java:+')
    compile("org.immutables:value:2.4.3")
    compile("com.itextpdf:itextpdf:5.5.10")
    compile("com.itextpdf:itext-pdfa:5.5.10")
    compile("com.itextpdf:itext-xtra:5.5.10")
    compile("com.itextpdf.tool:xmlworker:5.5.10")
    compile ("org.immutables:value:2.4.0")
    compile ('org.yaml:snakeyaml:+')
    runtime ('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile "junit:junit:4.11"
}

node {
    version = '7.5.0'
    npmVersion = '4.0.5'
    download = true
    workDir = file("${project.projectDir}/src/main/webapp")
    nodeModulesDir = file("${project.projectDir}/src/main/webapp")
}

//Hopefully this allows us to hot add resources
bootRun {
    addResources = true
}


//This is the build task for the Front End (Fe) and only compiles when the inputs change
task buildFe(type: NpmTask) {
    inputs.files(fileTree('src/main/webapp/node_modules'))
    inputs.files(fileTree('src/main/webapp/src'))
    inputs.files(fileTree('src/main/webapp/e2e'))
    inputs.file('src/main/webapp/package.json')
    inputs.file('src/main/webapp/karma.conf.js')
    inputs.file('src/main/webapp/angular-cli.json')
    inputs.file('src/main/webapp/tslint.json')
    inputs.file('src/main/webapp/protractor.conf.js')

    outputs.dir('build/resources/static')

    dependsOn npm_install
    args = ['run', 'build']
}

//The jar task build the jar file, and that file needs to contain the front end resources, so we need to
//run the buildFe task before we make the jar
jar.dependsOn buildFe
