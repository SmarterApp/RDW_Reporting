import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'idea'

    // these plugins will be selectively applied
    id 'com.bmuschko.docker-remote-api' version '3.6.2' apply false
    id 'org.springframework.boot' version '1.5.21.RELEASE' apply false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

project.ext.apps = subprojects.findAll { !'lib'.equalsIgnoreCase(it.findProperty('moduleType') as String) }

// Set version dependencies. This allows the cli to force version, e.g. `-Pcommon=1.1.0-SNAPSHOT`
String rdwCommonVersion = project.hasProperty("common") ? project.property("common") : "2.4.0-13"
String rdwSchemaVersion = project.hasProperty("schema") ? project.property("schema") : "2.4.0-8"
String dockerPrefix = "smarterbalanced"

allprojects {
    group = 'org.opentestsystem.rdw.reporting'

    if (project.hasProperty("buildNumber")) {
        project.setVersion(project.version.toString().replaceAll("SNAPSHOT", "${buildNumber}"))
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release' }
        maven { url 'https://artifactory.smarterbalanced.org/artifactory/libs-releases' }
    }

    dependencies {
        // For any library brought in by spring-boot-dependencies, if we want a
        // different version, this is how to set it. You can see the options in
        // https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/1.5.21.RELEASE/spring-boot-dependencies-1.5.21.RELEASE.pom
        // Also useful for non-spring-related dependency versions.
        rootProject.ext['assertj.version'] = '3.14.0'
        rootProject.ext['groovy.version'] = '2.5.6'
        rootProject.ext['jackson.version'] = '2.9.9'
        rootProject.ext['mockito.version'] = '2.28.2'
        rootProject.ext['mysql.version'] = '5.1.46'  // 5.1.47 causes problems
        rootProject.ext['thymeleaf.version'] = '3.0.6.RELEASE'
        rootProject.ext['thymeleaf-layout-dialect.version'] = '2.1.1'

        constraints {
            implementation "org.opentestsystem.rdw.common:rdw-common-archive:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-group:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-messaging:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-model:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-multi-tenant:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-script:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-security:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-status:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.common:rdw-common-utils:${rdwCommonVersion}"
            implementation "org.opentestsystem.rdw.schema:rdw-schema:${rdwSchemaVersion}"

            // commonly used libraries
            implementation "mysql:mysql-connector-java:${rootProject.ext['mysql.version']}"
            implementation 'com.google.guava:guava:27.0.1-jre'
            implementation 'commons-io:commons-io:2.6'
            implementation 'io.jsonwebtoken:jjwt:0.9.0'
            implementation 'org.apache.commons:commons-csv:1.6'
            implementation 'org.apache.commons:commons-lang3:3.8.1'
            implementation 'org.apache.commons:commons-text:1.6'
            implementation 'org.apache.pdfbox:pdfbox:2.0.7'
            implementation 'org.slf4j:slf4j-api:1.7.26'
            implementation 'org.thymeleaf:thymeleaf:3.0.6.RELEASE'
            implementation "org.flywaydb:flyway-core:5.2.4"

            // jackson
            implementation "com.fasterxml.jackson.core:jackson-annotations:${rootProject.ext['jackson.version']}"
            implementation "com.fasterxml.jackson.core:jackson-core:${rootProject.ext['jackson.version']}"
            implementation "com.fasterxml.jackson.core:jackson-databind:${rootProject.ext['jackson.version']}.1"
            implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:${rootProject.ext['jackson.version']}"
            implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${rootProject.ext['jackson.version']}"
            implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${rootProject.ext['jackson.version']}"
            implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:${rootProject.ext['jackson.version']}"

            // spring extensions aren't included in the the bom
            implementation 'org.springframework.security.extensions:spring-security-saml2-core:1.0.3.RELEASE'

            // security for messaging
            implementation 'org.springframework.security:spring-security-core:4.2.10.RELEASE'
            implementation 'org.springframework.integration:spring-integration-security:4.3.18.RELEASE'

            // security for art client
            implementation 'org.springframework.security.oauth:spring-security-oauth2:2.0.16.RELEASE'

            // used for pipeline user test running
            implementation 'org.xmlunit:xmlunit-core:2.6.2'

            //for multitenant admin
            implementation 'org.eclipse.jgit:org.eclipse.jgit:5.3.1.201904271842-r'

            // commonly used test libraries
            testImplementation 'junit:junit:4.12'
            testImplementation "org.assertj:assertj-core:${rootProject.ext['assertj.version']}"
            testImplementation "org.mockito:mockito-core:${rootProject.ext['mockito.version']}"
        }

        implementation platform('org.springframework.boot:spring-boot-dependencies:1.5.21.RELEASE')
        implementation platform('org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE')

        implementation 'com.google.guava:guava'
        implementation 'org.slf4j:slf4j-api'

        // handy for creating metadata with @ConfigurationProperties
        implementation 'org.springframework.boot:spring-boot-configuration-processor'

        runtimeOnly 'org.springframework.boot:spring-boot-devtools'

        testImplementation 'junit:junit'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'org.mockito:mockito-core'
    }

    // this is for creating metadata
    compileJava.dependsOn(processResources)

    test {
        // Skip running integration and system tests automatically, because they take a long time
        exclude '**/*IT.*', '**/*RST.*'

        // log non-passing test results to the console
        testLogging {
            events 'skipped', 'failed'
        }
    }

    //This task for for manually running the integration tests against schemas being developed simultaneously with this
    // project, versus the schemas that are "fixed" under the RDW_Schema submodule in this project
    task manualIT(type: Test) {
        include '**/*IT.*'
        outputs.upToDateWhen { false }
        doFirst {
            println "Running Manual Integration Tests..."
        }
    }

    // Specific integration test task that will automatically clean and migrate
    // the test database schemas before running.
    // If a module has no ITs, to avoid running the cleanAndMigrateTestSchema
    // task needlessly, it should completely disable this by doing:
    //    IT {
    //        enabled = false
    //        dependsOn = []
    //    }
    task IT(type: Test, dependsOn: ':cleanAndMigrateTestSchema') {
        include '**/*IT.*'
        group = 'Verification'
        description = 'Runs the integration tests.'
        outputs.upToDateWhen { false }
        doLast {
            println "Running Integration Tests..."
        }
    }

    task coverage(type: Task, dependsOn: [test, IT]) {
        doFirst {
            jacocoTestReport.executionData(test)
            if (IT.enabled) {
                jacocoTestReport.executionData(IT)
            }
            jacocoTestReport.reports.html.destination = file("${reporting.baseDir}/${name}")
        }
        finalizedBy(jacocoTestReport)
    }
}

configure(project.ext.apps) {
    apply plugin: 'org.springframework.boot'

    springBoot {
        buildInfo {
            additionalProperties = [
                    by: System.properties['user.name'],
                    targetCompatibility: project.targetCompatibility,
                    sourceCompatibility: project.sourceCompatibility
            ]
        }
    }

    // The spring boot 1.5.x gradle plugin defaults to using the 'runtime' configuration
    // to get the libraries to stuff into the fat jar. That worked fine for gradle 4.x.
    // However, gradle 5 changed all that and those libraries now land in 'runtimeClasspath'.
    bootRepackage.customConfiguration = 'runtimeClasspath'

    /***********************************************************
     * Docker setup for all apps that need it
     ***********************************************************/
    if (!it.hasProperty('skipDocker')) {
        apply plugin: 'com.bmuschko.docker-remote-api'

        docker {
            registryCredentials {
                username = dockerHubUser
                password = dockerHubPassword
                email = dockerHubEmail
            }
        }

        // Task to create Dockerfile based on (http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/Dockerfile.html)
        // Add tini to help with things (https://github.com/krallin/tini).
        // Use environment variables so the orchestration environment can adjust max heap and other java opts.
        // Sub-projects can adjust their default max heap size by setting the environment variable, e.g.
        // createDockerfile {
        //   environmentVariable("MAX_HEAP_SIZE", "-Xmx512m")
        // }
        task createDockerfile(type: Dockerfile) {
            destFile = project.file('build/docker/Dockerfile')
            from('openjdk:8-jre-alpine')
            volume('/tmp')
            label([maintainer: 'Fairway Technologies'])
            copyFile("${jar.archivePath.name}", "${jar.archivePath.name}")
            exposePort(8008, 8080)
            runCommand("apk add --no-cache tini curl jq")
            entryPoint("/sbin/tini", "--")
            environmentVariable("MAX_HEAP_SIZE", "-Xmx384m")
            instruction('CMD exec java $MAX_HEAP_SIZE $JAVA_OPTS -jar ' + "${jar.archivePath.name}")
        }

        task dockerBuildImage(type:DockerBuildImage, dependsOn:[build, createDockerfile]) {
            dockerFile = createDockerfile.destFile
            inputDir = project.file('build/docker/')
            tag = "${dockerPrefix}/${project.name}" + (project.hasProperty("release") ? ":${project.version}" : "")
            doFirst {
                copy {
                    from jar
                    into inputDir
                }
            }
        }

        // to use this, you must use valid docker credentials
        // which can be set in the gradle.properties file or environment variables
        task dockerPushImage(type: DockerPushImage, dependsOn: dockerBuildImage) {
            imageName = "${dockerPrefix}/${project.name}" + (project.hasProperty("release") ? ":${project.version}" : "")
        }
    }
}

/********************************************
 RDW_Schema artifact dependency setup

 The RDW_Schema project is extracted into place (from the published zip) and
 the clean and migrate tasks are wrapped. A custom configuration is used to
 set the repositories and conditionally do all the work.

 NOTE: previously there were multiple tasks wrapping each RDW_Schema task
 individually. With Gradle 6 this stopped working so it has been reduced to a
 single task that does just what we need.
 *******************************************/

project.ext.schemaBaseDir =  "$buildDir/schema/"

configurations {
    testSchema
    repositories {
        mavenLocal()
        maven { url 'https://artifactory.smarterbalanced.org/artifactory/libs-releases' }
    }
}

dependencies {
    testSchema "org.opentestsystem.rdw.schema:rdw-schema:${rdwSchemaVersion}@zip"
}

def schemaDir() {
    def schemaZipName = configurations.testSchema.singleFile.name
    schemaBaseDir + schemaZipName.take(schemaZipName.lastIndexOf('.'))
}

task extractSchema(type: Sync, dependsOn: configurations.testSchema) {
    // use of closure defers evaluation until execution time
    from { zipTree(configurations.testSchema.singleFile) }
    into schemaBaseDir

    // older versions of RDW_Schema didn't have a settings.gradle file in the archive
    // but GradleBuild tasks insist on it being there so create an empty one ...
    doLast {
        def settingsFile = file(schemaDir() + '/settings.gradle')
        if (!settingsFile.exists()) {
            settingsFile.setText('')
        }
    }
}

task cleanAndMigrateTestSchema(type: GradleBuild, dependsOn: extractSchema) {
    group = "Schema"
    description = "Cleans and migrates the schemas that integration tests depend on"
    buildFile = schemaDir() + '/build.gradle'
    // copy any command-line properties for sub-build
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['cleanAll_test', 'migrateAll_test']
}

// TODO - delete "${schemaBaseDir}" during clean
// (not quite the slam dunk you might think it is, ruminate for a while)
