import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("com.bmuschko:gradle-docker-plugin:3.0.5")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath('org.springframework.build.gradle:propdeps-plugin:0.0.7')
    }
}

apply plugin: 'io.spring.dependency-management'

allprojects {
    group = 'org.opentestsystem.rdw.reporting'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency 'org.opentestsystem.rdw.common:rdw-common-messaging:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-model:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-utils:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-security:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-archive:0.0.1-SNAPSHOT'

            dependency 'com.google.guava:guava:21.0'
        }
        imports {
            // spring cloud Camden.SR5 includes spring cloud stream Brooklyn.SR2
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:1.7+"

        testCompile 'org.assertj:assertj-core:3.6+'
        testCompile 'junit:junit:4+'
    }

    // generate coverage report automatically (./build/reports/jacoco/test/html/index.html)
    test.finalizedBy(jacocoTestReport)

    // task to generate build-info.properties with build.version, build.timestamp
    // using this approach instead of resource filtering to avoid modifying source
    task createBuildInfoFile(dependsOn: processResources) {
        doLast {
            def buildInfoFile = new File("${buildDir}/resources/main/build-info.properties")
            buildInfoFile.parentFile.mkdirs()
            Properties props = new Properties()
            props.setProperty('build.version', project.version.toString())
            props.store(buildInfoFile.newWriter(), null)
        }
    }

    // task to create Dockerfile
    // (http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/Dockerfile.html)
    task createDockerfile(type: Dockerfile) {
        destFile = project.file('build/docker/Dockerfile')
        from('java:8-jre-alpine')
        volume('/tmp')
        label([maintainer: 'Fairway Technologies'])
        copyFile("${jar.archivePath.name}", "${jar.archivePath.name}")
        exposePort(8080)
        entryPoint("java", "-jar", "${jar.archivePath.name}")
    }

    test.exclude '**/*IT.*'

    //This task for for manually running the integration tests against schemas being developed simultaneously with this
    // project, versus the schemas that are "fixed" under the RDW_Schema submodule in this project
    task manualIT(type: Test) {
        include '**/*IT.*'
        outputs.upToDateWhen { false }
        doLast {
            println "Running Manual Integration Tests..."
        }
    }

    //The omission of the ':' in manualIT is on purpose - we need the relative path to manualIT
    task IT(type: Test, dependsOn:[":cleanReportingTest", ":migrateReportingTest", "manualIT"]) {
        doLast {
            println "Running Integration Tests..."
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }
}

task migrateReportingTest(type: GradleBuild) {
    group = "Schema"
    description = "Cleans the schemas that integration tests depend on"
    dir = "RDW_Schema"
    tasks = ["migrateReporting-test"]
}

task cleanReportingTest(type: GradleBuild) {
    group = "Schema"
    description = "Migrates the schemas that integration tests depend on"
    dir = "RDW_Schema"
    tasks = ["cleanReporting-test"]
}