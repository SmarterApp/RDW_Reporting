# actuator end-points should be served from a different port than the API/web content
management:
  port: 8008
  security:
    enabled: false
  # disable health check for tenant-specific features
  health:
    db:
      enabled: false

# configure actuator endpoints to unmask "key" properties so tenant keys won't be masked. However, we still
# mask secret keys (i.e. props ending with secretKey, secret-key, or secret_key in lower, upper, or mixed case)
endpoints:
  env:
    keys-to-sanitize: password,secret,token,.*credentials.*,vcap_services,secret[-_]?key
  configprops:
    keys-to-sanitize: password,secret,token,.*credentials.*,vcap_services,secret[-_]?key

#needed to disable auto-configurations for flyway
flyway:
  enabled: false

embargo:
  # Number of rows to display per page
  page-size: 20
  # Number of days to include in audit log of embargo changes
  audit-log-days: 365
  # File name for audit log
  audit-log-file-name: testResultsAudit.csv

server:
  # tomcat settings for reasonable performance: adjust for tiny/huge configurations
  tomcat:
    max-connections: 0
    max-threads: 4
    accept-count: 10
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,text/csv

datasources:
  reporting_ro:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${datasources.reporting_ro.url-server:localhost:3306}"
      database: "${datasources.reporting_ro.url-schema:reporting}"
      properties: "useSSL=${datasources.reporting_ro.use-ssl:false}\
                   &useLegacyDatetimeCode=${datasources.reporting_ro.use-legacy-datetime-code:false}\
                   &characterEncoding=${datasources.reporting_ro.character-encoding:utf8}\
                   &rewriteBatchedStatements=${datasources.reporting_ro.rewrite-batched-statements:true}\
                   &connectTimeout=${datasources.reporting_ro.connect-timeout:10000}\
                   &socketTimeout=${datasources.reporting_ro.socket-timeout:40000}\
                   "
    url: "${datasources.reporting_ro.url-parts.protocol}//${datasources.reporting_ro.url-parts.hosts}/${datasources.reporting_ro.url-parts.database}?${datasources.reporting_ro.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${datasources.reporting_ro.initialSize}
    maxIdle: ${datasources.reporting_ro.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

  warehouse_rw:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${datasources.warehouse_rw.url-server:localhost:3306}"
      database: "${datasources.warehouse_rw.url-schema:warehouse}"
      properties: "useSSL=${datasources.warehouse_rw.use-ssl:false}\
                   &useLegacyDatetimeCode=${datasources.warehouse_rw.use-legacy-datetime-code:false}\
                   &characterEncoding=${datasources.warehouse_rw.character-encoding:utf8}\
                   &connectTimeout=${datasources.warehouse_rw.connect-timeout:10000}\
                   &socketTimeout=${datasources.warehouse_rw.socket-timeout:70000}\
                   "
    url: "${datasources.warehouse_rw.url-parts.protocol}//${datasources.warehouse_rw.url-parts.hosts}/${datasources.warehouse_rw.url-parts.database}?${datasources.warehouse_rw.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${datasources.warehouse_rw.initialSize}
    maxIdle: ${datasources.warehouse_rw.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

  olap_ro:
    url-parts:
      protocol: "jdbc:redshift:"
      hosts: "${datasources.olap_ro.url-server:localhost:5432}"
      database: "${datasources.olap_ro.url-db:dev}"
      properties: "ApplicationName=rdw-reporting-aggregate-service\
                   &loginTimeout=${datasources.olap_ro.connect-timeout:10}\
                   &socketTimeout=${datasources.olap_ro.socket-timeout:0}\
                   "
    url: "${datasources.olap_ro.url-parts.protocol}//${datasources.olap_ro.url-parts.hosts}/${datasources.olap_ro.url-parts.database}?${datasources.olap_ro.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.amazon.redshift.jdbc42.Driver

spring:
  http:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB

  jackson:
    default-property-inclusion: non_null
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

  # Force the (rabbit) queues to be created when posting messages so, even if
  # there are no consumers running, the messages will not get lost. Routing is
  # dynamic based on content but there is no way to do that here so we must
  # explicitly declare all possible output channels here (EXAM, PACKAGE, etc.).
  # The group names must be coordinated with the consumer application configs.
  cloud:
    stream:
      bindings:
        output:
          destination: GROUPS
          group: default

        ConfigpropsUpdateInput:
          destination: ConfigpropsUpdateExchange
          group: ConfigpropsUpdateQueue
          producer:
            requiredGroups: ConfigpropsUpdateQueue
        ConfigpropsUpdateOutput:
          destination: ConfigpropsUpdateExchange

        TenantAdministrationInput:
          content-type: application/json
          destination: TenantAdministrationExchange
          group: TenantAdministrationQueue
          producer:
            requiredGroups: TenantAdministrationQueue
        TenantAdministrationOutput:
          content-type: application/json
          destination: TenantAdministrationExchange

  admin_warehouse_datasource:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${spring.admin_warehouse_datasource.url-server:localhost:3306}"
      properties: "useSSL=${spring.admin_warehouse_datasource.use-ssl:false}\
                   &useLegacyDatetimeCode=${spring.admin_warehouse_datasource.use-legacy-datetime-code:false}\
                   &characterEncoding=${spring.admin_warehouse_datasource.character-encoding:utf8}\
                   &connectTimeout=${spring.admin_warehouse_datasource.connect-timeout:10000}\
                   &socketTimeout=${spring.admin_warehouse_datasource.socket-timeout:100000}\
                   "
    #not connecting to a specific schema for admin requires scoping for each query
    url: "${spring.admin_warehouse_datasource.url-parts.protocol}//${spring.admin_warehouse_datasource.url-parts.hosts}?${spring.admin_warehouse_datasource.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 0
    maxActive: 2
    minIdle: ${spring.admin_warehouse_datasource.initialSize}
    maxIdle: ${spring.admin_warehouse_datasource.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

  admin_reporting_datasource:
    url-parts:
      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
      protocol: "jdbc:mysql:"
      hosts: "${spring.admin_reporting_datasource.url-server:localhost:3306}"
      properties: "useSSL=${spring.admin_reporting_datasource.use-ssl:false}\
                   &useLegacyDatetimeCode=${spring.admin_reporting_datasource.use-legacy-datetime-code:false}\
                   &characterEncoding=${spring.admin_reporting_datasource.character-encoding:utf8}\
                   &connectTimeout=${spring.admin_reporting_datasource.connect-timeout:10000}\
                   &socketTimeout=${spring.admin_reporting_datasource.socket-timeout:100000}\
                   "
    #not connecting to a specific schema for admin requires scoping for each query
    url: "${spring.admin_reporting_datasource.url-parts.protocol}//${spring.admin_reporting_datasource.url-parts.hosts}?${spring.admin_reporting_datasource.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 0
    maxActive: 2
    minIdle: ${spring.admin_reporting_datasource.initialSize}
    maxIdle: ${spring.admin_reporting_datasource.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

  admin_olap_datasource:
    url-parts:
      protocol: "jdbc:redshift:"
      hosts: "${spring.admin_olap_datasource.url-server:localhost:5432}"
      database: "${spring.admin_olap_datasource.url-db:dev}"
      properties: "ApplicationName=rdw-reporting-aggregate-service\
                   &loginTimeout=${spring.admin_olap_datasource.connect-timeout:10}\
                   &socketTimeout=${spring.admin_olap_datasource.socket-timeout:0}\
                   "
    url: "${spring.admin_olap_datasource.url-parts.protocol}//${spring.admin_olap_datasource.url-parts.hosts}/${spring.admin_olap_datasource.url-parts.database}?${spring.admin_olap_datasource.url-parts.properties}"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationInterval: 35000
    driverClassName: com.amazon.redshift.jdbc42.Driver
    initialize: false
    initialSize: 0
    maxActive: 2
    minIdle: ${spring.admin_olap_datasource.initialSize}
    maxIdle: ${spring.admin_olap_datasource.maxActive}
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false

archive:
  uri-root: "file:///tmp/"
  #path-prefix:
  #s3-access-key:
  #s3-secret-key:
  s3-region-static: us-west-2
  #s3-sse:

art-client:
  url: https://art-qa.sbtds.org/rest/
  oauth2:
    access-token-uri: https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac
    client-id: sbacdw
    client-secret: ${rdw.reporting.art-client.oauth2.client-secret:}
    username: prime.user@example.com
    password: ${rdw.reporting.art-client.oauth2.password:}

jwt:
  secret: ${rdw.reporting.jwt.secret:secret}

app:
  multitenant:
    statusSync:
      createDelayMinutes: 5
      updateDelayMinutes: 1

sandbox-properties:
  sandboxDatasets:
    - label: Demo Dataset
      id: demo-dataset
    - label: SBAC Dataset
      id: sbac-dataset

tenant-configuration-persistence:
  local-repository-uri: file:///tmp/rdw_config_local
  remote-repository-uri: file:///tmp/rdw_config_remote
  git-username: test
  git-password: test
  author: "Zaphod Beeblebrox"
  author-email: "zaphodb@example.com"
