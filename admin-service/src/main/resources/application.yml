# actuator end-points should be served from a different port than the API/web content
management:
  port: 8008
  security:
    enabled: false

server:
  # tomcat settings for reasonable performance: adjust for tiny/huge configurations
  tomcat:
    max-connections: 0
    max-threads: 4
    accept-count: 10
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,text/csv

spring:
  reporting_datasource:
    url: "\
      jdbc:mysql://${spring.reporting_datasource.url-server:localhost:3306}/${spring.reporting_datasource.url-schema:reporting}\
      ?useSSL=${spring.reporting_datasource.use-ssl:false}\
      &useLegacyDatetimeCode=${spring.reporting_datasource.use-legacy-datetime-code:false}\
      &characterEncoding=${spring.reporting_datasource.character-encoding:utf8}\
      &rewriteBatchedStatements=${spring.reporting_datasource.rewrite-batched-statements:true}\
      &connectTimeout=${spring.reporting_datasource.connect-timeout:10000}\
      &socketTimeout=${spring.reporting_datasource.socket-timeout:40000}\
      "
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${spring.reporting_datasource.query-timeout:30})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${spring.reporting_datasource.initialSize}
    maxIdle: ${spring.reporting_datasource.maxActive}

  warehouse_datasource:
    url: "\
      jdbc:mysql://${spring.warehouse_datasource.url-server:localhost:3306}/${spring.warehouse_datasource.url-schema:warehouse}\
      ?useSSL=${spring.warehouse_datasource.use-ssl:false}\
      &useLegacyDatetimeCode=${spring.warehouse_datasource.use-legacy-datetime-code:false}\
      &characterEncoding=${spring.warehouse_datasource.character-encoding:utf8}\
      &connectTimeout=${spring.warehouse_datasource.connect-timeout:10000}\
      &socketTimeout=${spring.warehouse_datasource.socket-timeout:70000}\
      "
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${spring.warehouse_datasource.query-timeout:60})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 10
    minIdle: ${spring.warehouse_datasource.initialSize}
    maxIdle: ${spring.warehouse_datasource.maxActive}

  http:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB

  jackson:
    default-property-inclusion: non_null
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

  # Force the (rabbit) queues to be created when posting messages so, even if
  # there are no consumers running, the messages will not get lost. Routing is
  # dynamic based on content but there is no way to do that here so we must
  # explicitly declare all possible output channels here (EXAM, PACKAGE, etc.).
  # The group names must be coordinated with the consumer application configs.
  cloud:
    stream:
      bindings:
        output:
          destination: GROUPS
          group: default

# spring auto-configured aws defense
cloud:
  aws:
    # there must be a default region when running locally
    region:
      auto: false
      static: us-west-2
    # disable CloudFormation stuff
    stack:
      auto: false
    credentials:
      instance-profile: false

# Needed for access to S3

# Location of import archive.
archive:
  root: file:///tmp/

jwt:
  secret: ${rdw.reporting.jwt.secret:secret}

reporting:
  school-year: 2018
  state:
    code: CA
    name: California
