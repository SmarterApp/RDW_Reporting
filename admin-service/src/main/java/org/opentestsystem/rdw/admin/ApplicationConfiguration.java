package org.opentestsystem.rdw.admin;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.reporting.common.repository.impl.ArchiveBackedReportTemplateRepository;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.boot.actuate.info.InfoContributor;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.integration.config.GlobalChannelInterceptor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;

import org.opentestsystem.rdw.admin.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationProcessor;
import org.opentestsystem.rdw.admin.multitenant.configuration.TenantAdministrationConfiguration;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceProperties;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.configprops.ConfigpropsProcessor;
import org.opentestsystem.rdw.multitenant.configprops.ConfigpropsUpdatePublisher;
import org.opentestsystem.rdw.multitenant.configprops.ConfigurationChangeCacheClearer;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.messaging.TenantChannelInterceptor;
import org.opentestsystem.rdw.multitenant.messaging.TenantMessageRequestResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantMessageRequestResolver;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.repository.impl.ReportingJdbcOrganizationRepository;
import org.opentestsystem.rdw.reporting.common.repository.impl.WarehouseJdbcOrganizationRepository;
import org.opentestsystem.rdw.reporting.common.stream.DefaultMessageSecurityService;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.DefaultJsonContentConfiguration;
import org.opentestsystem.rdw.reporting.common.web.WebExceptionHandlerConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtWebSecurityConfiguration;
import org.opentestsystem.rdw.script.ScriptPipelineConfiguration;
import org.opentestsystem.rdw.utils.ResourceLoaderConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

@Configuration
@Import({
        ResourceLoaderConfiguration.class,
        EndpointAutoConfiguration.class,
        JwtWebSecurityConfiguration.class,
        StatusConfiguration.class,
        YamlPropertiesConfigurator.class,
        DataSourceConfiguration.class,
        DefaultJsonContentConfiguration.class,
        WebExceptionHandlerConfiguration.class,
        SecurityParameterProvider.class,
        ScriptPipelineConfiguration.class,
        TenantAdministrationConfiguration.class
})
@EnableCaching
@EnableScheduling
@EnableGlobalMethodSecurity(prePostEnabled = true)
@EnableConfigurationProperties
@EnableBinding({TenantAdministrationProcessor.class, ConfigpropsProcessor.class})
public class ApplicationConfiguration {

    @Bean
    public ReportingTenantIdResolver tenantIdResolver() {
        return new ReportingTenantIdResolver();
    }

    @Bean
    @ConfigurationProperties("reporting")
    @RefreshScope
    public ReportingSystemSettings reportingSystemSettings() {
        return new ReportingSystemSettings();
    }

    @Bean
    @RefreshScope
    ReportingSystemPropertiesResolver reportingSystemPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                        ReportingSystemSettings reportingSystemSettings) {
        return new ReportingSystemPropertiesResolver(tenantKeyResolver, reportingSystemSettings);
    }

    @Bean
    @ConfigurationProperties("tenantProperties")
    @RefreshScope
    public TenantProperties tenantProperties() {
        return new TenantProperties();
    }

    @Bean
    public TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                               TenantIdResolver tenantIdResolver) {
        return new TenantKeyResolver(tenantProperties, tenantIdResolver);
    }

    @Bean(name = "reportingOrganizationRepository")
    public OrganizationRepository reportingOrganizationRepository(@Qualifier("reportingJdbcTemplate") final NamedParameterJdbcTemplate template,
                                                                  final SecurityParameterProvider securityParameterProvider) {
        return new ReportingJdbcOrganizationRepository(template, securityParameterProvider);
    }

    @Bean(name = "warehouseOrganizationRepository")
    public OrganizationRepository warehouseOrganizationRepository(@Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate template,
                                                                  final SecurityParameterProvider securityParameterProvider) {
        return new WarehouseJdbcOrganizationRepository(template, securityParameterProvider);
    }

    @Bean
    @ConfigurationProperties("tenant-configuration-persistence")
    public TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties() {
        return new TenantConfigurationPersistenceProperties();
    }

    @Bean
    public InfoContributor tenantConfigurationStatusInfoContributor(TenantProperties tenantProperties,
                                                                    ReportingSystemSettings reportingSystemSettings,
                                                                    DataSourceElementsProperties dataSourceElementsProperties,
                                                                    DataSourceElementsProperties warehouseDataSourceElementsProperties) {
        return builder -> {
            //TODO: using the underlying @ConfigurationProperties name for the key, it might be better rename the
            // beans to be closer to the configuration
            builder.withDetail("tenant-properties", tenantProperties.getStatus());
            builder.withDetail("reporting", reportingSystemSettings.getStatus());
            builder.withDetail("datasources.reporting_ro", dataSourceElementsProperties.getStatus());
            builder.withDetail("datasources.warehouse_rw", warehouseDataSourceElementsProperties.getStatus());
        };
    }

    @Bean
    public MessageSecurityService messageSecurityService(final JwtService jwtService) {
        return new DefaultMessageSecurityService(jwtService);
    }

    @Bean
    public TenantMessageRequestResolver tenantMessageRequestResolver(MessageSecurityService messageSecurityService) {
        return new ReportingTenantMessageRequestResolver(messageSecurityService);
    }

    @Bean
    @GlobalChannelInterceptor(patterns = {"Report*", "Aggregate*", "UserReport*", "tenant-*"})
    public TenantChannelInterceptor getTenantChannelInterceptor(TenantMessageRequestResolver getTenantMessageRequestResolver) {
        return new TenantChannelInterceptor(getTenantMessageRequestResolver);
    }

    @Bean
    @ConfigurationProperties("sandbox-properties")
    public SandboxDataSets sandboxDatasets() {
        return new SandboxDataSets();
    }

    @Bean
    public ConfigpropsUpdatePublisher configpropsUpdatePublisher(final @Value("${spring.application.name}") String serviceName,
                                                                 final ConfigpropsProcessor configpropsProcessor,
                                                                 final ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint,
                                                                 final ObjectMapper objectMapper) {
        return new ConfigpropsUpdatePublisher(serviceName,
                configpropsProcessor,
                configurationPropertiesReportEndpoint,
                objectMapper);
    }

    @Bean
    public ConfigurationChangeCacheClearer configurationChangeListener(final CacheManager cacheManager) {
        return new ConfigurationChangeCacheClearer(cacheManager);
    }

    @Bean
    public ArchiveBackedReportTemplateRepository reportTemplateRepository(final ArchiveService archiveService) {
        return new ArchiveBackedReportTemplateRepository(archiveService);
    }
}

