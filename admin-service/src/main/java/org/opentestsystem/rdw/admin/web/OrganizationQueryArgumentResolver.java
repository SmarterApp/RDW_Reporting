package org.opentestsystem.rdw.admin.web;

import com.google.common.primitives.Ints;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Objects;
import java.util.stream.Stream;

import static java.util.Collections.emptySet;
import static java.util.stream.Collectors.toSet;
import static org.apache.commons.lang.StringUtils.trimToEmpty;

/**
 * Argument resolver for {@link OrganizationQuery} instances.
 */
public class OrganizationQueryArgumentResolver implements HandlerMethodArgumentResolver {
    static final int DefaultLimit = 20;

    @Override
    public boolean supportsParameter(final MethodParameter parameter) {
        return parameter.getParameterType().equals(OrganizationQuery.class);
    }

    @Override
    public Object resolveArgument(final MethodParameter parameter,
                                  final ModelAndViewContainer mavContainer,
                                  final NativeWebRequest webRequest,
                                  final WebDataBinderFactory binderFactory) throws Exception {
        final Integer limit = Ints.tryParse(trimToEmpty(webRequest.getParameter("limit")));
        final String[] types = webRequest.getParameterValues("types");
        return OrganizationQuery.builder()
                .limit(limit == null ? DefaultLimit : limit)
                .name(webRequest.getParameter("name"))
                .types(types == null ? emptySet() : Stream.of(types)
                        .map(type -> {
                            try {
                                return OrganizationType.caseInsensitiveValue(type);
                            } catch (final IllegalArgumentException exception) {
                                return null;
                            }
                        })
                        .filter(Objects::nonNull)
                        .collect(toSet()))
                .build();
    }
}
