package org.opentestsystem.rdw.admin.multitenant.web;

import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.NoSuchElementException;
import java.util.Set;

@RestController
@RequestMapping("/tenants")
class TenantController {

    private final TenantService service;

    TenantController(final TenantService service) {
        this.service = service;
    }

    @RequestMapping(value = "/{key}", method = RequestMethod.HEAD)
    ResponseEntity head(@PathVariable final String key) {
        return service.exists(key)
                ? ResponseEntity.ok().build()
                : ResponseEntity.notFound().build();
    }

    @RequestMapping(value = "/id/{id}", method = RequestMethod.HEAD)
    ResponseEntity headId(@PathVariable final String id) {
        return service.existsId(id)
                ? ResponseEntity.ok().build()
                : ResponseEntity.notFound().build();
    }

    @GetMapping
    Set<TenantConfiguration> get(@RequestParam final TenantType type) {
        return service.getAll(type);
    }

    @GetMapping("/{key}")
    TenantConfiguration get(@PathVariable final String key) {
        return service.findActiveTenantConfigurationByKey(key)
                .orElseThrow(NoSuchElementException::new);
    }

    @PostMapping
    @ResponseStatus(value = HttpStatus.CREATED)
    void post(@RequestBody final TenantConfiguration configuration) {
        service.createTenant(configuration);
    }

    @PutMapping
    @ResponseStatus(value = HttpStatus.OK)
    void put(@RequestBody final TenantConfiguration configuration) {
        service.updateTenant(configuration);
    }

    @DeleteMapping("/{key}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    void delete(@PathVariable final String key) {
        service.deleteTenant(key);
    }
    
}
