package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.CompilationError;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.springframework.security.access.prepost.PreAuthorize;

import java.util.Collection;
import java.util.List;

/**
 * Service responsible for managing ingest pipelines
 * and providing pipeline editor functionality
 */
@PreAuthorize("hasAuthority('PERM_PIPELINE_READ')")
public interface PipelineService {

    /**
     * @return All ingest pipelines
     */
    List<Pipeline> getPipelines();

    /**
     * @param id The pipeline entity ID
     * @return The pipeline for the given ID
     */
    Pipeline getPipeline(int id);

    /**
     * @param pipelineId The pipeline entity ID
     * @return All published scripts for the given pipeline
     */
    List<PipelineScript> getPublishedScripts(int pipelineId);

    /**
     * @param pipelineId The pipeline entity ID
     * @param id The pipeline script identifier
     * @return All published scripts for the given pipeline
     */
    PipelineScript getPublishedScript(int pipelineId, int id);

    /**
     * @param pipelineId The pipeline entity ID
     * @return All scripts for the given pipeline
     */
    List<PipelineScript> getScripts(int pipelineId);

    /**
     * @param pipelineId The pipeline entity ID
     * @return All tests for the given pipeline
     */
    List<PipelineTest> getTests(int pipelineId);

    /**
     * Compiles a pipeline script
     *
     * @param scriptBody The script to compile
     * @return List of compilation errors if any
     */
    List<CompilationError> compile(String scriptBody);

    /**
     * Runs all tests of a given pipeline on the given pipeline
     *
     * @param pipelineId The pipeline entity ID
     * @return All test and test result pairs
     */
    List<PipelineTestRun> test(int pipelineId);

    /**
     * Runs all tests of a given pipeline on the given pipeline
     * This method filters the tests by the provided testIds
     *
     * @param pipelineId The pipeline entity ID
     * @param testIds Collection of test IDs used to filter the tests. If null, all tests will be run
     * @return All test and test result pairs
     */
    List<PipelineTestRun> test(int pipelineId, Collection<Integer> testIds);

    /**
     * Publishes a pipeline to be used by the effective pipeline of the system
     *
     * @param scriptId The pipeline to publish
     * @return the published artifact version tag
     */
    @PreAuthorize("hasAuthority('PERM_PIPELINE_WRITE')")
    String publish(int scriptId);

    /**
     * Activates a pipeline script for a given pipeline
     *
     * @param pipelineId The pipeline identifier
     * @param version The published script identifier
     */
    @PreAuthorize("hasAuthority('PERM_PIPELINE_WRITE')")
    void activate(int pipelineId, String version);

}
