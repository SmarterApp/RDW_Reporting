package org.opentestsystem.rdw.admin.multitenant.database.impl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Objects;
import com.google.common.collect.ImmutableSet;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.database.MultitenantDatabaseAdmin;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseCreationService;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.schema.SchemaMigration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class DefaultTenantDatabaseCreationService implements TenantDatabaseCreationService {

    private final MultitenantDatabaseAdmin multitenantDatabaseAdmin;
    private final DataSource adminReportingDataSource;
    private final DataSource adminWarehouseDataSource;
    private final DataSource adminOlapDataSource;

    @Autowired
    public DefaultTenantDatabaseCreationService(final MultitenantDatabaseAdmin multitenantDatabaseAdmin,
                                                @Qualifier("adminReportingDataSource") final DataSource adminReportingDataSource,
                                                @Qualifier("adminWarehouseDataSource") final DataSource adminWarehouseDataSource,
                                                @Qualifier("adminOlapDataSource") final DataSource adminOlapDataSource) {
        this.multitenantDatabaseAdmin = multitenantDatabaseAdmin;
        this.adminReportingDataSource = adminReportingDataSource;
        this.adminWarehouseDataSource = adminWarehouseDataSource;
        this.adminOlapDataSource = adminOlapDataSource;
    }

    @Override
    public void createTenantDatabases(TenantConfiguration tenantConfiguration) {
        createDatabasesCore(gatherDatabaseInformation(tenantConfiguration));
    }

    @Override
    public void createSandboxDatabases(TenantConfiguration tenantConfiguration) {
        Set<DatabaseInformation> databaseInformationSet = gatherDatabaseInformation(tenantConfiguration);
        createDatabasesCore(databaseInformationSet);
//        runDatasetLoad(databaseInformationSet, tenantConfiguration.getTenant().getSandboxDataset());
    }

    private void createDatabasesCore(Set<DatabaseInformation> databaseInformationSet) {
        preCheck(databaseInformationSet);
        createDatabaseAndUsers(databaseInformationSet);
        createOlapSchema(databaseInformationSet);
        runFlywayMigrations(databaseInformationSet);
        //by nature of postgres/redshift configuration this has to happen after table creation in migrations
        createOlapUsersAndGrants(databaseInformationSet);
    }

    private void runFlywayMigrations(Set<DatabaseInformation> databaseInformationSet) {
        databaseInformationSet.stream()
                .map(info -> new ImmutablePair<>(info.databaseOrSchemaName, info.getRdwDatabaseType()))
                .distinct()
                .forEach(databaseOrSchemaDatabaseTypePair -> {
                    switch (databaseOrSchemaDatabaseTypePair.right) {
                        case REPORTING:
                            SchemaMigration reportingMigration = new SchemaMigration(adminReportingDataSource,
                                    databaseOrSchemaDatabaseTypePair.getLeft(),
                                    SchemaMigration.Migration.Reporting);
                            reportingMigration.migrate();
                            break;
                        case MIGRATE_OLAP:
                            SchemaMigration migrateOlapMigration = new SchemaMigration(adminReportingDataSource,
                                    databaseOrSchemaDatabaseTypePair.getLeft(),
                                    SchemaMigration.Migration.MigrateOlap);
                            migrateOlapMigration.migrate();
                            break;
                        case WAREHOUSE:
                            SchemaMigration warehouseMigration = new SchemaMigration(adminWarehouseDataSource,
                                    databaseOrSchemaDatabaseTypePair.getLeft(),
                                    SchemaMigration.Migration.Warehouse);
                            warehouseMigration.migrate();
                            break;
                        case REPORTING_OLAP:
                            SchemaMigration reportingOlapMigration = new SchemaMigration(adminOlapDataSource,
                                    databaseOrSchemaDatabaseTypePair.getLeft(),
                                    SchemaMigration.Migration.ReportingOlap);
                            reportingOlapMigration.migrate();
                            break;
                    }
                });
    }

    private void runDatasetLoad(Set<DatabaseInformation> databaseInformationSet, String sandboxDatasetName) {
        //only warehouse is loaded this way
        Set<ImmutablePair<String, RdwDatabaseType>> warehouseSet = databaseInformationSet.stream()
                .filter(di -> di.getRdwDatabaseType().equals(RdwDatabaseType.WAREHOUSE))
                .map(di -> ImmutablePair.of(di.getDatabaseOrSchemaName(), di.getRdwDatabaseType()))
                .collect(Collectors.toSet());
        if ((warehouseSet.size() != 1)) {
            throw new AssertionError("There should be exactly one RdwDatabaseType.WAREHOUSE " + warehouseSet.toString());
        }
        warehouseSet.forEach(di -> multitenantDatabaseAdmin
                .loadDataset(di.getLeft(), sandboxDatasetName, "warehouse", di.getRight()));
    }

    @VisibleForTesting
    void createDatabaseAndUsers(Set<DatabaseInformation> databaseInformationSet) {
        Set<DatabaseInformation> databaseInfoSet = databaseInformationSet.stream()
                .filter(info -> !info.isOlap).collect(Collectors.toSet());

        //create databases
        databaseInfoSet.stream()
                .map(di -> ImmutablePair.of(di.getDatabaseOrSchemaName(), di.rdwDatabaseType))
                .distinct()
                .forEach(p -> multitenantDatabaseAdmin.createDatabase(p.getLeft(), p.getRight()));

        //create users apply global grants
        databaseInfoSet.stream()
                .map(info -> ImmutableTriple.of(info.getUsername(), info.getPassword(), info.getRdwDatabaseType()))
                .distinct()
                .forEach(triple -> {
                    //guard against duplicate user with same db type but pointing at same underlying host
                    if (!multitenantDatabaseAdmin.isDatabaseUserExists(triple.getLeft(), triple.getRight())) {
                        multitenantDatabaseAdmin.createDatabaseUser(triple.getLeft(), triple.getMiddle(), triple.getRight());
                    }
                    multitenantDatabaseAdmin.grantUserLoadFromS3(triple.getLeft(), triple.getRight());
                    multitenantDatabaseAdmin.grantUserSelectIntoS3(triple.getLeft(), triple.getRight());
                    multitenantDatabaseAdmin.grantUserOnSelectProc(triple.getLeft(), triple.getRight());
                });

        //apply user to database grants
        databaseInfoSet.stream()
                .map(info -> ImmutableTriple.of(info.getUsername(), info.getDatabaseOrSchemaName(), info.getRdwDatabaseType()))
                .distinct()
                .forEach(triple ->
                        multitenantDatabaseAdmin.grantUserToDatabase(triple.getLeft(), triple.getMiddle(), triple.getRight())
                );

    }

    @VisibleForTesting
    void createOlapSchema(Set<DatabaseInformation> databaseInformationSet) {
        Set<DatabaseInformation> olapDatabaseInfoSet = databaseInformationSet.stream()
                .filter(info -> info.isOlap).collect(Collectors.toSet());
        //create schemas
        olapDatabaseInfoSet.stream()
                .map(DatabaseInformation::getDatabaseOrSchemaName)
                .distinct()
                .forEach(multitenantDatabaseAdmin::createOlapSchema);
    }

    @VisibleForTesting
    void createOlapUsersAndGrants(Set<DatabaseInformation> databaseInformationSet) {
        Set<DatabaseInformation> olapDatabaseInfoSet = databaseInformationSet.stream()
                .filter(info -> info.isOlap).collect(Collectors.toSet());

        //create users apply global grants
        olapDatabaseInfoSet.stream()
                .map(info -> new ImmutablePair<>(info.getUsername(), info.getPassword()))
                .distinct()
                .forEach(userNamePwdPair ->
                        multitenantDatabaseAdmin.createOlapDatabaseUser(userNamePwdPair.getLeft(), userNamePwdPair.getRight()));

        //per schema user grants and search path
        olapDatabaseInfoSet.stream()
                .map(info -> new ImmutablePair<>(info.getDatabaseOrSchemaName(), info.getUsername()))
                .distinct()
                .forEach(userSchemaPair -> {
                    multitenantDatabaseAdmin.grantAllOlapUserToSchema(userSchemaPair.getLeft(), userSchemaPair.getRight());
                    multitenantDatabaseAdmin.grantAllOlapUserToSchemaTables(userSchemaPair.getLeft(), userSchemaPair.getRight());
                    multitenantDatabaseAdmin.searchPathOlapUserToSchema(userSchemaPair.getLeft(), userSchemaPair.getRight());
                });
    }

    @VisibleForTesting
    void preCheck(Set<DatabaseInformation> databaseInformationSet) {

        //should be exactly 4 database types
        Set<RdwDatabaseType> types = databaseInformationSet.stream()
                .map(DatabaseInformation::getRdwDatabaseType)
                .collect(Collectors.toSet());

        if (types.size() != 4) {
            throw new RuntimeException("There be exactly 4 database types the number found was: " + types.size());
        }

        //olap schema should not exits
        databaseInformationSet.stream()
                .filter(x -> x.isOlap)
                .map(DatabaseInformation::getDatabaseOrSchemaName)
                .distinct()
                .forEach(schemaName -> {
                    if (multitenantDatabaseAdmin.isOlapSchemaExists(schemaName)) {
                        throw new RuntimeException("Database schema " + schemaName + " already exists");
                    }
                });

        //olap users should not already exist
        databaseInformationSet.stream()
                .filter(x -> x.isOlap)
                .map(DatabaseInformation::getUsername)
                .distinct()
                .forEach(username -> {
                    if (multitenantDatabaseAdmin.isOlapDatabaseUserExists(username)) {
                        throw new RuntimeException("Database user " + username + " already exists");
                    }
                });

        //database should not already exist
        databaseInformationSet.stream()
                .filter(x -> !x.isOlap)
                .map(info -> ImmutablePair.of(info.getDatabaseOrSchemaName(), info.getRdwDatabaseType()))
                .distinct()
                .forEach(pair -> {
                    if (multitenantDatabaseAdmin.isDatabaseExists(pair.getLeft(), pair.getRight())) {
                        throw new RuntimeException("Database " + pair.getLeft() + " already exists");
                    }
                });

        //database users should not already exist
        databaseInformationSet.stream()
                .filter(x -> !x.isOlap)
                .map(info -> ImmutablePair.of(info.getUsername(), info.getRdwDatabaseType()))
                .distinct()
                .forEach(pair -> {
                    if (multitenantDatabaseAdmin.isDatabaseUserExists(pair.getLeft(), pair.getRight())) {
                        throw new RuntimeException("Database user" + pair.getLeft() + " already exists");
                    }
                });
    }


    @VisibleForTesting
    RdwDatabaseType dataSourceNameToRdwDatabaseType(String dataSourceName) {
        if (dataSourceName.contains(RdwDatabaseType.MIGRATE_OLAP.datasourceNameHint)) {
            return RdwDatabaseType.MIGRATE_OLAP;
        } else if (dataSourceName.contains(RdwDatabaseType.REPORTING.datasourceNameHint)) {
            return RdwDatabaseType.REPORTING;
        } else if (dataSourceName.contains(RdwDatabaseType.REPORTING_OLAP.datasourceNameHint)) {
            return RdwDatabaseType.REPORTING_OLAP;
        } else if (dataSourceName.contains(RdwDatabaseType.WAREHOUSE.datasourceNameHint)) {
            return RdwDatabaseType.WAREHOUSE;
        } else {
            throw new RuntimeException("Unknown matching RDW Database Type for DataSourceName " + dataSourceName);
        }
    }

    @VisibleForTesting
    Set<DatabaseInformation> gatherDatabaseInformation(TenantConfiguration tenantConfiguration) {
        Map<String, DataSourceElementsTenant> dataSources =
                tenantConfiguration.getApplicationTenantConfiguration().getDataSources();

        HashSet<DatabaseInformation> databaseInformation = new HashSet<>();
        dataSources.forEach((key, value) -> {
            RdwDatabaseType dbType = dataSourceNameToRdwDatabaseType(key);
            String name;
            if (dbType.isOlap) {
                name = "prefix"; // TODO FIX value.getSchemaSearchPath();
            } else {
                name = value.getUrlParts().getDatabase();
            }
            String username = value.getUsername();
            String password = value.getPassword();
            boolean isRw = key.toLowerCase().contains("rw");
            databaseInformation.add(new DatabaseInformation(name, username, password, dbType.isOlap, isRw, dbType));
        });
        return ImmutableSet.copyOf(databaseInformation);
    }

    @VisibleForTesting
    static class DatabaseInformation {
        private final String databaseOrSchemaName;
        private final String username;
        private final String password;
        private final boolean isOlap;
        private final boolean isRw;
        private final RdwDatabaseType rdwDatabaseType;

        DatabaseInformation(String databaseOrSchemaName,
                            String username,
                            String password,
                            boolean isOlap,
                            boolean isRw,
                            RdwDatabaseType rdwDatabaseType) {
            this.databaseOrSchemaName = databaseOrSchemaName;
            this.username = username;
            this.password = password;
            this.isOlap = isOlap;
            this.isRw = isRw;
            this.rdwDatabaseType = rdwDatabaseType;
        }

        String getDatabaseOrSchemaName() {
            return databaseOrSchemaName;
        }

        String getUsername() {
            return username;
        }

        String getPassword() {
            return password;
        }

        boolean isOlap() {
            return isOlap;
        }

        boolean isRw() {
            return isRw;
        }

        RdwDatabaseType getRdwDatabaseType() {
            return rdwDatabaseType;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof DatabaseInformation)) return false;
            DatabaseInformation that = (DatabaseInformation) o;
            return isOlap() == that.isOlap() &&
                    isRw() == that.isRw() &&
                    Objects.equal(getDatabaseOrSchemaName(), that.getDatabaseOrSchemaName()) &&
                    Objects.equal(getUsername(), that.getUsername()) &&
                    Objects.equal(getPassword(), that.getPassword()) &&
                    getRdwDatabaseType() == that.getRdwDatabaseType();
        }

        @Override
        public int hashCode() {
            return Objects.hashCode(getDatabaseOrSchemaName(), getUsername(), getPassword(), isOlap(), isRw(), getRdwDatabaseType());
        }

        @Override
        public String toString() {
            return "DatabaseInformation{" +
                    "databaseOrSchemaName='" + databaseOrSchemaName + '\'' +
                    ", username='" + username + '\'' +
                    ", password='" + password + '\'' +
                    ", isOlap=" + isOlap +
                    ", isRw=" + isRw +
                    ", rdwDatabaseType=" + rdwDatabaseType +
                    '}';
        }
    }

}
