package org.opentestsystem.rdw.admin.model;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;

import java.util.Map;

/**
 * Write specific model directly corresponds to config server tenant-*\/application.yml file.
 */
public class ApplicationTenantConfigurationPersistence {

    //TODO: we will need to expand to accommodate other roots, this is the current set in ApplicationTenantConfiguration
    private Map<String, Map<String, Tenant>> tenantProperties;
    private Map<String, Map<String, ReportingSystemProperties>> reporting;
    private Map<String, Map<String, Map<String, DataSourceElements>>> datasources;
    private Map<String, Map<String, ArchiveProperties>> archive;

    public ApplicationTenantConfigurationPersistence() {
    }

    public ApplicationTenantConfigurationPersistence(Tenant tenant,
                                                     ApplicationTenantConfiguration applicationTenantConfiguration) {
        reporting = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(), applicationTenantConfiguration.getReporting()));

        final ImmutableMap.Builder<String, Map<String, Map<String, DataSourceElements>>> datasourcesBuilder =
                ImmutableMap.builder();
        applicationTenantConfiguration.getDataSources().forEach((datasourceName, dataSourceElements) ->
                datasourcesBuilder.put(datasourceName,
                        ImmutableMap.of("tenants", ImmutableMap.of(tenant.getKey(), dataSourceElements))));
        datasources = datasourcesBuilder.build();

        archive = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(), applicationTenantConfiguration.getArchiveProperties()));

        tenantProperties = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(), tenant));
    }

    public Map<String, Map<String, ReportingSystemProperties>> getReporting() {
        return reporting;
    }

    public void setReporting(Map<String, Map<String, ReportingSystemProperties>> reporting) {
        this.reporting = reporting;
    }

    public Map<String, Map<String, Map<String, DataSourceElements>>> getDatasources() {
        return datasources;
    }

    public void setDatasources(Map<String, Map<String, Map<String, DataSourceElements>>> datasources) {
        this.datasources = datasources;
    }

    public Map<String, Map<String, ArchiveProperties>> getArchive() {
        return archive;
    }

    public void setArchive(Map<String, Map<String, ArchiveProperties>> archive) {
        this.archive = archive;
    }

    public Map<String, Map<String, Tenant>> getTenantProperties() {
        return tenantProperties;
    }

    public void setTenantProperties(Map<String, Map<String, Tenant>> tenantProperties) {
        this.tenantProperties = tenantProperties;
    }
}
