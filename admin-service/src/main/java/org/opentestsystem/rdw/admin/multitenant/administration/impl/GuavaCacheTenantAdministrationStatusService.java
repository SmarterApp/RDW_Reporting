package org.opentestsystem.rdw.admin.multitenant.administration.impl;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;

import java.util.Optional;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class GuavaCacheTenantAdministrationStatusService implements TenantAdministrationStatusService {

    private final Cache<String, Pair<TenantAdministrationStatusContext, TenantConfiguration>> statusCache;

    public GuavaCacheTenantAdministrationStatusService(int maximumSize, int expireAfterDays) {
        statusCache =
                CacheBuilder.newBuilder()
                        .maximumSize(maximumSize)
                        .expireAfterAccess(expireAfterDays, TimeUnit.DAYS)
                        .build();
    }

    @Override
    public ImmutableMap<String, Pair<TenantAdministrationStatusContext, TenantConfiguration>> allTenantStatusAsMap() {
        return ImmutableMap.copyOf(statusCache.asMap());
    }

    @Override
    public void putStatus(String tenantKey, TenantAdministrationStatus status, TenantConfiguration tenantConfiguration) {
        putStatus(tenantKey, status, tenantConfiguration, null);
    }

    public void putStatus(String tenantKey, TenantAdministrationStatus status, TenantConfiguration tenantConfiguration, String message) {
        statusCache.put(tenantKey, ImmutablePair.of(
                TenantAdministrationStatusContext.builder()
                        .tenantAdministrationStatus(status)
                        .message(message)
                        .build(),
                tenantConfiguration));
    }

    @Override
    public void updateStatus(String tenantKey, TenantAdministrationStatus status) {
        updateStatus(tenantKey, status, null);
    }

    @Override
    public void updateStatus(String tenantKey, TenantAdministrationStatus status, String message) {
        TenantAdministrationStatusContext context = TenantAdministrationStatusContext
                .builder()
                .tenantAdministrationStatus(status)
                .message(message)
                .build();
        Optional.ofNullable(statusCache.getIfPresent(tenantKey)).ifPresent(pair ->
                statusCache.put(tenantKey, ImmutablePair.of(context, pair.getRight()))
        );
    }


    @Override
    public Optional<Pair<TenantAdministrationStatusContext, TenantConfiguration>> findStatus(String tenantKey) {
        return Optional.ofNullable(statusCache.getIfPresent(tenantKey));
    }

    @Override
    public void remove(String tenantKey) {
        statusCache.invalidate(tenantKey);
    }

    public Set<String> allTenantKeys() {
        return statusCache.asMap().keySet();
    }

}
