package org.opentestsystem.rdw.admin.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.reporting.common.model.CodedEntity;
import org.opentestsystem.rdw.reporting.common.model.Organization;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * This class encapsulates the current test results availability state for a single
 * district, school year, subject, and report type.
 */
public class TestResultAvailabilityOptions {

    private List<TestResultsStatus> statuses;     // All the statuses available to the user, sorted by enum order.
    private boolean viewAudit;                    // True if user has permission to view audits.
    private boolean districtAdmin;                // True for district administrator
    private Collection<Organization> districts;   // Collection of districts (complete for district admin, possibly size limited for state users.
    private int districtCount;                    // Total count of districts, in case it is too many to retrieve all at once.
    private Collection<CodedEntity> subjects;     // Collection of districts
    private Collection<Integer> schoolYears;      // Collection of active school years in the system.
    private Collection<TestResultsReportType> reportTypes;

    public List<TestResultsStatus> getStatuses() {
        return statuses;
    }

    public boolean isViewAudit() {
        return viewAudit;
    }

    public boolean isDistrictAdmin() {
        return districtAdmin;
    }

    public Collection<Organization> getDistricts() {
        return districts;
    }

    public int getDistrictCount() {
        return districtCount;
    }

    public Collection<CodedEntity> getSubjects() {
        return subjects;
    }

    public Collection<Integer> getSchoolYears() {
        return schoolYears;
    }

    public Collection<TestResultsReportType> getReportTypes() {
        return reportTypes;
    }

    /**
     * @return new builder with this instance's values
     */
    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return new builder
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private List<TestResultsStatus> statuses;
        private boolean viewAudit;
        private boolean districtAdmin;
        private Collection<Organization> districts;
        private int districtCount;
        private Collection<CodedEntity> subjects;
        private Collection<Integer> schoolYears;
        private Collection<TestResultsReportType> reportTypes;

        public TestResultAvailabilityOptions build() {
            final TestResultAvailabilityOptions options = new TestResultAvailabilityOptions();

            Collections.sort(statuses);

            options.statuses = ImmutableList.copyOf(statuses);
            options.viewAudit = viewAudit;
            options.districtAdmin = districtAdmin;
            options.districtCount = districtCount;
            options.districts = ImmutableList.copyOf(districts);
            options.subjects = ImmutableList.copyOf(subjects);
            options.schoolYears = ImmutableList.copyOf(schoolYears);
            options.reportTypes = ImmutableList.copyOf(reportTypes);

            return options;
        }

        public Builder copy(final TestResultAvailabilityOptions options) {
            statuses = options.statuses;
            viewAudit = options.viewAudit;
            districtAdmin = options.districtAdmin;
            districts = options.districts;
            districtCount = options.districtCount;
            subjects = options.subjects;
            schoolYears = options.schoolYears;
            reportTypes = options.reportTypes;

            return this;
        }

        public Builder statuses(final Collection<TestResultsStatus> statuses) {
            this.statuses = new ArrayList<>(statuses);
            return this;
        }

        public Builder viewAudit(boolean viewAudit) {
            this.viewAudit = viewAudit;
            return this;
        }

        public Builder districtAdmin(boolean districtAdmin) {
            this.districtAdmin = districtAdmin;
            return this;
        }

        public Builder districts(final Collection<Organization> districts) {
            this.districts = districts;
            return this;
        }

        public Builder districtCount(int districtCount) {
            this.districtCount = districtCount;
            return this;
        }

        public Builder subjects(List<CodedEntity> subjects) {
            this.subjects = subjects;
            return this;
        }

        public Builder schoolYears(List<Integer> schoolYears) {
            this.schoolYears = schoolYears;
            return this;
        }

        public Builder reportTypes(TestResultsReportType[] reportTypes) {
            this.reportTypes = Arrays.asList(reportTypes);
            return this;
        }
    }
}
