package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Ordering;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.repository.InstructionalResourceRepository;
import org.opentestsystem.rdw.admin.service.InstructionalResourceService;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.PermissionScope;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Collection;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkArgument;
import static org.apache.commons.lang.StringUtils.isNotBlank;
import static org.opentestsystem.rdw.admin.security.AdminPermission.InstructionalResourceWrite;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.DistrictGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.SchoolGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;

/**
 * Default repository-backed implementation of an InstructionalResourceService.
 */
@Service
class DefaultInstructionalResourceService implements InstructionalResourceService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultInstructionalResourceService.class);
    private static final Ordering<InstructionalResource> ResourceOrdering = Ordering.natural()
            .onResultOf(InstructionalResource::getAssessmentName)
            .compound(Ordering.natural()
                    .onResultOf(InstructionalResource::getOrganizationType))
            .compound(Ordering.natural()
                    .nullsFirst()
                    .onResultOf(InstructionalResource::getOrganizationName))
            .compound(Ordering.natural()
                    .onResultOf(InstructionalResource::getPerformanceLevel));
    private static final Set<OrganizationType> ValidOrganizationTypes = ImmutableSet.of(
            State,
            DistrictGroup,
            District,
            SchoolGroup);


    private final InstructionalResourceRepository repository;
    private final OrganizationRepository organizationRepository;
    private final ReportingSystemProperties reportingSystemProperties;

    @Autowired
    public DefaultInstructionalResourceService(final InstructionalResourceRepository repository,
                                               @Qualifier("reportingOrganizationRepository") final OrganizationRepository organizationRepository,
                                               @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties) {
        this.repository = repository;
        this.organizationRepository = organizationRepository;
        this.reportingSystemProperties = reportingSystemProperties;
    }

    @Override
    public List<InstructionalResource> findAll(final User user) {
        return ResourceOrdering.sortedCopy(setStateName(repository.findAll(toScope(user))));
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public InstructionalResource create(final User user, final InstructionalResource resource) {
        final PermissionScope scope = toScope(user);
        validate(resource);
        checkAccess(scope, resource);

        repository.create(resource);
        return setStateName(repository.findOne(scope, resource));
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public InstructionalResource update(final User user, final InstructionalResource resource) {
        final PermissionScope scope = toScope(user);
        validate(resource);

        final InstructionalResource existing = repository.findOne(scope, resource);
        if (existing == null) {
            throw new NoSuchElementException("Instructional Resource for Organization: " + resource.getOrganizationType().name() +
                    " id: " + resource.getOrganizationId() +
                    " performance level: " + resource.getPerformanceLevel() +
                    " not found");
        }
        final InstructionalResource updated = InstructionalResource.builder()
                .copy(existing)
                .resource(resource.getResource())
                .build();

        repository.update(updated);
        logger.info("UPDATED Instructional Resource {}, {}, {}, {}, {} to {} by {}",
                resource.getAssessmentName(),
                resource.getOrganizationType(),
                resource.getOrganizationName(),
                resource.getPerformanceLevel(),
                existing.getResource(),
                updated.getResource(),
                user.getId());
        return setStateName(updated);
    }

    @Override
    @Transactional(transactionManager = "reportingTxManager")
    public void delete(final User user, final InstructionalResource resource) {
        final PermissionScope scope = toScope(user);

        final InstructionalResource existing = repository.findOne(scope, resource);
        if (existing == null) {
            return;
        }

        repository.delete(existing);
        logger.info("DELETED Instructional Resource {}, {}, {}, {}, {} by {}",
                resource.getAssessmentName(),
                resource.getOrganizationType(),
                resource.getOrganizationName(),
                resource.getPerformanceLevel(),
                resource.getResource(),
                user.getId());
    }

    private PermissionScope toScope(final User user) {
        return user.getPermissionScopeByPermissionId(InstructionalResourceWrite);
    }

    private boolean invalidOrganization(final PermissionScope permissionScope, final InstructionalResource resource) {
        if (resource.getOrganizationType() == State) {
            return !permissionScope.isStatewide();
        }
        final Organization organization = organizationRepository.findOneByTypeAndId(permissionScope, resource.getOrganizationType(), resource.getOrganizationId());
        return organization == null;
    }

    private void checkAccess(final PermissionScope permissionScope, final InstructionalResource resource) {
        if (invalidOrganization(permissionScope, resource)) {
            throw new NoSuchElementException("Organization: " + resource.getOrganizationType().name() +
                    " id: " + resource.getOrganizationId() + " not found");
        }
    }

    Collection<InstructionalResource> setStateName(final Collection<InstructionalResource> resources) {
        return resources.stream()
                .map(this::setStateName)
                .collect(Collectors.toList());
    }

    private InstructionalResource setStateName(final InstructionalResource resource) {
        return State.equals(resource.getOrganizationType())
                ? InstructionalResource.builder().copy(resource).organizationName(reportingSystemProperties.getState().getName()).build()
                : resource;
    }

    private void validate(final InstructionalResource resource) {
        checkArgument(resource != null, "Resource must not be null");
        checkArgument(isNotBlank(resource.getAssessmentName()), "Assessment name must not be blank");
        checkArgument(resource.getOrganizationType() != null, "Organization type must not be null");
        checkArgument(ValidOrganizationTypes.contains(resource.getOrganizationType()), "Invalid organization type: {}", resource.getOrganizationType());
        checkArgument(resource.getResource() != null, "Resource URL must not be null");
        checkArgument(resource.getPerformanceLevel() >= 0, "Performance level must be greater than or equal to zero");
        try {
            final URL validURL = URI.create(resource.getResource().toString()).toURL();
        } catch (final MalformedURLException e) {
            throw new IllegalArgumentException("Invalid Resource URL", e);
        }
    }
}
