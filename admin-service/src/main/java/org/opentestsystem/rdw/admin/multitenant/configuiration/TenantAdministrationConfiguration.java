package org.opentestsystem.rdw.admin.multitenant.configuiration;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.client.ConfigServerClient;
import org.opentestsystem.rdw.admin.client.DefaultConfigServerClient;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupProperties;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationProcessor;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.administration.impl.DefaultTenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.administration.impl.GuavaCacheTenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsClient;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsConsolidationService;
import org.opentestsystem.rdw.admin.multitenant.configprops.DefaultConfigpropsClient;
import org.opentestsystem.rdw.admin.multitenant.configprops.DefaultConfigpropsConversionService;
import org.opentestsystem.rdw.admin.multitenant.database.MultitenantDatabaseAdmin;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseCreationService;
import org.opentestsystem.rdw.admin.multitenant.database.impl.DefaultTenantDatabaseCreationService;
import org.opentestsystem.rdw.admin.multitenant.git.GitTenantConfigurationPersistenceService;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceProperties;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceService;
import org.opentestsystem.rdw.admin.service.impl.DefaultActuatorClientRdwService;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

import javax.sql.DataSource;

@Configuration
public class TenantAdministrationConfiguration {

    @Value("${tenant.tenantAdministration.statusService.maximumSize:100}")
    private Integer statusServiceMaximumSize;

    @Value("${tenant.tenantAdministration.statusService.expireAfterDays:4}")
    private Integer statusServiceExpireAfterDays;

    @Value("${spring.cloud.config.uri}")
    private String configServerUri;

    @Bean
    public DefaultTenantDatabaseCreationService tenantDatabaseCreationService(final MultitenantDatabaseAdmin multitenantDatabaseAdmin,
                                                                              @Qualifier("adminReportingDataSource") final DataSource adminReportingDataSource,
                                                                              @Qualifier("adminWarehouseDataSource") final DataSource adminWarehouseDataSource,
                                                                              @Qualifier("adminOlapDataSource") final DataSource adminOlapDataSource) {
        return new DefaultTenantDatabaseCreationService(multitenantDatabaseAdmin,
                adminReportingDataSource,
                adminWarehouseDataSource,
                adminOlapDataSource);
    }

    @Bean
    public GitTenantConfigurationPersistenceService tenantConfigurationPersistenceService(TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties) {
        return new GitTenantConfigurationPersistenceService(tenantConfigurationPersistenceProperties);
    }

    @Bean
    public DefaultTenantAdministrationRequestHandler tenantAdministrationRequestHandler(MessageSecurityService messageSecurityService,
                                                                                        TenantAdministrationProcessor tenantAdministrationProcessor,
                                                                                        TenantDatabaseCreationService tenantDatabaseCreationService,
                                                                                        TenantConfigurationPersistenceService tenantConfigurationPersistenceService,
                                                                                        ConfigServerClient configServerClient,
                                                                                        TenantAdministrationStatusService tenantAdministrationStatusService) {
        return new DefaultTenantAdministrationRequestHandler(messageSecurityService,
                tenantAdministrationProcessor,
                tenantDatabaseCreationService,
                tenantConfigurationPersistenceService,
                configServerClient,
                tenantAdministrationStatusService);
    }

    @Bean
    public TenantAdministrationStatusService tenantAdministrationStatusService() {
        return new GuavaCacheTenantAdministrationStatusService(statusServiceMaximumSize, statusServiceExpireAfterDays);
    }

    @Bean
    public RestTemplateBuilder restTemplateBuilder() {
        return new RestTemplateBuilder();
    }

    @Bean
    public RestTemplate configpropsRestTemplate(RestTemplateBuilder restTemplateBuilder) {
        return restTemplateBuilder
                .setConnectTimeout(1000)
                .setReadTimeout(3000)
                .build();
    }

    @Bean
    @ConfigurationProperties("tenant-configuration-lookup")
    @RefreshScope
    public TenantConfigurationLookupProperties tenantConfigurationLookupProperties() {
        return new TenantConfigurationLookupProperties();
    }

    @Bean
    public DefaultConfigpropsClient configpropsClient(
            TenantConfigurationLookupProperties tenantConfigurationLookupProperties,
            RestTemplate configpropsRestTemplate) {
        return new DefaultConfigpropsClient(tenantConfigurationLookupProperties, configpropsRestTemplate);
    }

    @Bean
    public DefaultActuatorClientRdwService defaultActuatorClientRdwService(DefaultConfigpropsClient defaultConfigpropsClient) {
        return new DefaultActuatorClientRdwService(defaultConfigpropsClient);
    }

    @Bean
    public DefaultConfigServerClient defaultConfigServerClient() {
        return new DefaultConfigServerClient(configServerUri);
    }

    @Bean
    public DefaultConfigpropsConversionService configpropsConversionService(ConfigpropsClient configpropsClient,
                                                                            ConfigpropsConsolidationService configpropsConsolidationService,
                                                                            ObjectMapper mapper) {
        return new DefaultConfigpropsConversionService(configpropsClient, configpropsConsolidationService, mapper);
    }

}
