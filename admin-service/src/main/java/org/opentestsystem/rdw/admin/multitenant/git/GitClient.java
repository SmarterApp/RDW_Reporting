package org.opentestsystem.rdw.admin.multitenant.git;

import com.google.common.annotations.VisibleForTesting;
import org.apache.commons.io.FileUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.introspector.Property;
import org.yaml.snakeyaml.nodes.CollectionNode;
import org.yaml.snakeyaml.nodes.MappingNode;
import org.yaml.snakeyaml.nodes.Node;
import org.yaml.snakeyaml.nodes.NodeTuple;
import org.yaml.snakeyaml.nodes.SequenceNode;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.representer.Representer;

import java.io.File;
import java.io.IOException;

public class GitClient {

    private static final Logger logger = LoggerFactory.getLogger(GitClient.class);
    private final GitClientProperties gitClientProperties;
    private final UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider;

    public GitClient(GitClientProperties gitClientProperties) {
        this.gitClientProperties = gitClientProperties;
        this.usernamePasswordCredentialsProvider =
                new UsernamePasswordCredentialsProvider(gitClientProperties.getGitUsername(),
                        gitClientProperties.getGitPassword());
    }

    @VisibleForTesting
    void getLocalRepositoryToCleanState() throws IOException, GitAPIException {
        //TODO: right now, just wiping and cloning each time this is called, there may be a better approach: https://stackoverflow.com/questions/13586502/how-to-check-if-a-git-clone-has-been-done-already-with-jgit
        FileUtils.deleteDirectory(new File(gitClientProperties.getLocalRepositoryPath()));
        //do clone
        Git.cloneRepository()
                .setURI(gitClientProperties.getRemoteRepositoryURI())
                .setBare(false)
                .setBranch("master")
                .setDirectory(getWorkingDirectory())
                .setCredentialsProvider(usernamePasswordCredentialsProvider)
                .call();
    }

    @VisibleForTesting
    File getWorkingDirectory() {
        File directory = new File(gitClientProperties.getLocalRepositoryPath());
        try {
            FileUtils.forceMkdir(directory);
        } catch (IOException e) {
            throw new GitClientException("Unable to create working directory.", e);
        }
        return directory;
    }

    public void saveTenantConfiguration(String tenantKey, ApplicationTenantConfiguration applicationTenantConfiguration) throws IOException, GitAPIException {
        getLocalRepositoryToCleanState();

        DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.AUTO);
        options.setIndent(2);
        options.setCanonical(false);


        SkipEmptyRepresenter representer = new SkipEmptyRepresenter();
        representer.addClassTag(ApplicationTenantConfiguration.class,Tag.MAP);

        Yaml yaml = new Yaml(representer, options);

        String output = yaml.dump(applicationTenantConfiguration);
        logger.debug("output yml {}", output);

        File tenantDirectory = new File(gitClientProperties.getLocalRepositoryPath() + File.separator + "tenant-" + tenantKey);
        logger.debug("tenantDirectory {}", tenantDirectory.getPath());
        FileUtils.forceMkdir(tenantDirectory);

        File tenantFile = new File(tenantDirectory.getPath() + File.separator + "application.yml");
        logger.debug("tenantFile {}", tenantFile.getPath());
        FileUtils.write(tenantFile, output, "UTF-8");

        logger.debug("read file", FileUtils.readFileToString(tenantFile));

        Git git = Git.open(new File(gitClientProperties.getLocalRepositoryPath()));
        git.add().addFilepattern(".").call();

        //TODO: add author to config
        git.commit()
                .setAuthor("demo", "demo@example.com")
                .setMessage("saving " + tenantKey + " configuration.")
                .call();

        git.push()
                .setCredentialsProvider(this.usernamePasswordCredentialsProvider)
                .call();
    }

    /**
     * Remove all the notes that are null or objects / collections that are empty to match the spring configuration style.
     */
    private class SkipEmptyRepresenter extends Representer {
        //from https://bitbucket.org/asomov/snakeyaml/src/tip/src/test/java/org/yaml/snakeyaml/issues/issue60/SkipBeanTest.java

        @Override
        protected NodeTuple representJavaBeanProperty(Object javaBean, Property property,
                                                      Object propertyValue, Tag customTag) {
            NodeTuple tuple = super.representJavaBeanProperty(javaBean, property, propertyValue,
                    customTag);
            Node valueNode = tuple.getValueNode();
            if (Tag.NULL.equals(valueNode.getTag())) {
                return null;// skip 'null' values
            }
            if (valueNode instanceof CollectionNode) {
                if (Tag.SEQ.equals(valueNode.getTag())) {
                    SequenceNode seq = (SequenceNode) valueNode;
                    if (seq.getValue().isEmpty()) {
                        return null;// skip empty lists
                    }
                }
                if (Tag.MAP.equals(valueNode.getTag())) {
                    MappingNode seq = (MappingNode) valueNode;
                    if (seq.getValue().isEmpty()) {
                        return null;// skip empty maps
                    }
                }
            }
            return tuple;
        }
    }
}
