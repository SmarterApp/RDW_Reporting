package org.opentestsystem.rdw.admin.multitenant.database;

import org.opentestsystem.rdw.admin.multitenant.database.impl.RdwDatabaseType;

public interface MultitenantDatabaseAdmin {

    /**
     * Create Aurora/Mysql Database
     *
     * @param targetDatabase database name to create
     */
    void createDatabase(String targetDatabase, RdwDatabaseType databaseType);

    /**
     * Create the Aurora/Mysql database user
     *
     * @param username username
     * @param password password
     */
    void createDatabaseUser(String username, String password, RdwDatabaseType databaseType);

    /**
     * Verify Aurora/Mysql Database exists
     *
     * @param targetDatabase database to check
     * @return true if database exists
     */
    boolean isDatabaseExists(String targetDatabase, RdwDatabaseType databaseType);

    /**
     * Verify Aurora/Mysql Database user exists
     *
     * @param username username to check
     * @return true if user exists
     */
    boolean isDatabaseUserExists(String username, RdwDatabaseType databaseType);

    /**
     * Aurora/Mysql GRANT ALL on Aurora/Mysql database to user
     *
     * @param username       the user to grant
     * @param targetDatabase database to grant to user
     */
    void grantUserToDatabase(String username, String targetDatabase, RdwDatabaseType databaseType);


    /**
     * Aurora/Mysql GRANT SELECT ON mysql.proc
     *
     * @param username user to grant
     */
    void grantUserOnSelectProc(String username, RdwDatabaseType databaseType);

    /**
     * Aurora/Mysql GRANT LOAD FROM S3
     *
     * @param username user to grant
     */
    void grantUserLoadFromS3(String username, RdwDatabaseType databaseType);

    /**
     * Aurora/Mysql GRANT SELECT INTO S3
     *
     * @param username user to grant
     */
    void grantUserSelectIntoS3(String username, RdwDatabaseType databaseType);

    /**
     * Create Redshift/PostgreSQL Schema
     *
     * @param schema schema name to create
     */
    void createOlapSchema(String schema);

    /**
     * Create user for Redshift/PostgreSQL
     *
     * @param username user to create
     * @param password user password
     */
    void createOlapDatabaseUser(String username, String password);

    /**
     * Verify Redshift/PostgreSQL schema exists.
     *
     * @param schema schema name
     * @return true if it exists
     */
    boolean isOlapSchemaExists(String schema);

    /**
     * Verify Redshift/PostgreSQL user exits
     *
     * @param username user to verify
     * @return true if user exits
     */
    boolean isOlapDatabaseUserExists(String username);

    /**
     * Grant User to Schema for Redshift/PostgreSQL
     *
     * @param schema   schema to grant
     * @param username user to grant
     */
    void grantAllOlapUserToSchema(String schema, String username);

    /**
     * Grant Tables for Redshift/PostgreSQL to user
     *
     * @param schema   schema name of tables
     * @param username user to grant
     */
    void grantAllOlapUserToSchemaTables(String schema, String username);

    /**
     * Set schema search path for Redshift/PostgreSQL users
     *
     * @param schema   schema to add to search path
     * @param username user apply search path to
     */
    void searchPathOlapUserToSchema(String schema, String username);

    /**
     * Load a dataset into prepared database.  Assumes flyway migrations have completed, and
     * target tables have not been populated yet.
     *
     * @param targetDatabase database to load data into
     * @param datasetName    the dataset name to load
     * @param importDatabase the source database type
     */
    void loadDataset(String targetDatabase, String datasetName, String importDatabase, RdwDatabaseType databaseType);

}
