package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.exception.DuplicateTenantException;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.repository.TenantConfigurationRepository;
import org.opentestsystem.rdw.admin.service.TenantConfigPropsService;
import org.opentestsystem.rdw.admin.service.TenantValidationService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.NoSuchElementException;

@Service
public class DefaultTenantValidationService implements TenantValidationService {

    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantValidationService.class);

    private final TenantConfigurationRepository tenantConfigurationRepository;
    private final TenantConfigPropsService tenantConfigPropsService;
    private final TenantProperties tenantProperties;

    @Autowired
    public DefaultTenantValidationService(TenantConfigurationRepository tenantConfigurationRepository,
                                          TenantConfigPropsService tenantConfigPropsService,
                                          TenantProperties tenantProperties) {
        this.tenantConfigurationRepository = tenantConfigurationRepository;
        this.tenantConfigPropsService = tenantConfigPropsService;
        this.tenantProperties = tenantProperties;
    }

    /**
     * Validates the tenant does not exist, thr
     * the archive prefix does not exist
     * the database for each dataSource does not exist
     *
     * @param tenantConfiguration the tenant to validate does not exist
     */
    public void validateNewTenant(final TenantConfiguration tenantConfiguration) {
        verifyNewTenantExists(tenantConfiguration.getTenant());
        verifyTenantArchive(tenantConfiguration);
        verifyTenantDataSources(tenantConfiguration);
    }

    /**
     * @param tenant to check if it exists
     */
    private void verifyNewTenantExists(final Tenant tenant) {
        // see if tenant key is in app settings or in memory map
        if (isTenantFound(tenant.getKey()) ||
                tenantConfigurationRepository.tenantExists(tenant.getKey())) {
            String errorMsg = String.format("Tenant: %s, key: %s exists already. Please update existing tenant, or add another tenant key.",
                    tenant.getName(), tenant.getKey());
            logger.error(errorMsg);
            throw new DuplicateTenantException(errorMsg);
        }
    }

    /**
     * Verifies that the tenant's Archive S3 are unique
     *
     * @param tenantConfiguration the new tenantConfiguration to validate its archive properties
     */
    private void verifyTenantArchive(final TenantConfiguration tenantConfiguration) {
        if (tenantConfigPropsService.archivePrefixExists(
                tenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getPathPrefix())) {
            String errorMsg = String.format("Tenant: %s, key: %s, the archive property :prefix exists already. " +
                            "Please use another Archive prefix for the new Tenant.",
                    tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey());
            logger.error(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    /**
     * Verifies if the given Tenant's DataSources already exist in a configured Tenant
     * Throws an exception with the specific datasource name where the database was found
     *
     * @param tenantConfiguration the new tenantConfiguration to validate its databases
     */
    private void verifyTenantDataSources(final TenantConfiguration tenantConfiguration) {
        // check each datasource
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantConfiguration.getApplicationTenantConfiguration().getDataSources().entrySet()) {
            if (dataSource.getValue().getUrlParts() == null) {
                // default tenant information is not configured properly
                String errorMsg = String.format("Cannot create Tenant: %s, key: %s, the Database property %s is not configure correctly." +
                                " Please contact your admin.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getKey());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
            if (tenantConfigPropsService.dataSourceExists(dataSource.getKey(), dataSource.getValue().getUrlParts().getDatabase())) {
                String errorMsg = String.format("Cannot create Tenant: %s, key: %s, the Database property %s exists already for DataSource %s." +
                                " Please use another database for the new Tenant.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getValue().getUrlParts().getDatabase(), dataSource.getKey());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
            if (dataSource.getKey().equals(RDWDataSourceNames.OLAP_RO.getName()) &&
                    tenantConfigPropsService.dataSourceOlapExists(
                            dataSource.getValue().getUrlParts().getDatabase(), dataSource.getValue().getUsername())) {
                String errorMsg = String.format("Cannot create Tenant: %s key: %s, the Olap DataSource's userName %s already exists " +
                                "or the database %s does not match the default database. Please use a unique username and the same database for the new Tenant.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getValue().getUsername(), dataSource.getValue().getUrlParts().getDatabase());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
        }
    }

    /**
     * Validates the tenant is in the current memory map and in the tenantProperties
     * must exist in both - tbd what to do if not
     *
     * @param tenantConfiguration tenant to valid exists
     */
    public void validateTenantExists(TenantConfiguration tenantConfiguration) {
        // make sure tenant key is in app settings and in tenant storage
        if (!isTenantFound(tenantConfiguration.getTenant().getKey()) ||
                !tenantConfigurationRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
            String errorMsg = String.format("Tenant: %s, key: %s not found.",
                    tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey());
            logger.error(errorMsg);
            throw new NoSuchElementException(errorMsg);
        }
    }

    /**
     * return if the tenant is located in the tenantProperty tenant list.
     *
     * @param key the key of the tenant to find
     * @return true if the key exists
     */
    private boolean isTenantFound(final String key) {
        if (tenantProperties != null) {
            return tenantProperties.getTenants().containsKey(key);
        }
        return false;
    }

}
