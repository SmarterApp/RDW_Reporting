package org.opentestsystem.rdw.admin.service.impl;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Function;

/**
 * Iterates through slices to create a lazy-loaded list of records.
 */
public class SliceIterator<T> implements Iterator<T> {
    final Function<Pageable, Slice<T>> sliceFunction;

    Slice<T> currentSlice;
    Iterator<T> currentIterator;

    /**
     * Creates a SliceIterator that turns a series of slices of data into a single iterator.
     * Slices are loaded lazily as needed.
     *
     * @param sliceFunction function to get the next slice of data, typically from a database.
     * @param sliceSize the number of records that will be in each slice.
     */
    public SliceIterator(Function<Pageable, Slice<T>> sliceFunction, int sliceSize) {
        this.sliceFunction = sliceFunction;
        this.currentSlice = sliceFunction.apply(new PageRequest(0, sliceSize));
        this.currentIterator = getIterator();
    }

    @Override
    public boolean hasNext() {
        if (currentIterator == null) {
            return false;
        }
        if (currentIterator.hasNext()) {
            return true;
        }
        if (currentSlice.hasNext()) {
            currentSlice = sliceFunction.apply(currentSlice.nextPageable());
            currentIterator = getIterator();

            // Just in case slice has 0 elements
            return hasNext();
        }
        return false;
    }

    @Override
    public T next() {
        if (!hasNext()) {
            throw new NoSuchElementException("SliceIterator out of data");
        }
        return currentIterator.next();
    }

    private Iterator<T> getIterator() {
        if (currentSlice == null || currentSlice.getContent() == null) {
            return null;
        }
        return currentSlice.getContent().iterator();
    }
}
