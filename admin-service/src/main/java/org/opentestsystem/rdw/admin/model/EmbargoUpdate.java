package org.opentestsystem.rdw.admin.model;

import com.google.common.collect.ImmutableSet;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents update parameters for the {@link org.opentestsystem.rdw.admin.repository.EmbargoRepository}
 */
public class EmbargoUpdate {
    // Optional filters
    private Integer schoolYear;
    private Integer subjectId;
    private TestResultsReportType reportType;
    private Set<Long> districtIds;

    // Current and new statuses
    private TestResultsStatus status;
    private TestResultsStatus newStatus;

    public Integer getSchoolYear() {
        return schoolYear;
    }

    public Integer getSubjectId() {
        return subjectId;
    }

    public TestResultsReportType getReportType() {
        return reportType;
    }

    public String getReportTypeValue() {
        return reportType == null ? null : reportType.name();
    }

    public Set<Long> getDistrictIds() {
        return districtIds;
    }

    public TestResultsStatus getStatus() {
        return status;
    }

    public TestResultsStatus getNewStatus() {
        return newStatus;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return new builder
     */
    public static EmbargoUpdate.Builder builder() {
        return new EmbargoUpdate.Builder();
    }

    public static class Builder {
        private Integer schoolYear;
        private Integer subjectId;
        private TestResultsReportType reportType;
        private Set<Long> districtIds;
        private TestResultsStatus status;
        private TestResultsStatus newStatus;

        public EmbargoUpdate build() {
            final EmbargoUpdate update = new EmbargoUpdate();

            update.schoolYear = schoolYear;
            update.subjectId = subjectId;
            update.reportType = reportType;
            update.districtIds = districtIds == null ? null : ImmutableSet.copyOf(districtIds);
            update.status = status;
            update.newStatus = newStatus;

            return update;
        }

        public Builder copy(final EmbargoUpdate update) {
            schoolYear = update.schoolYear;
            subjectId = update.subjectId;
            reportType = update.reportType;
            districtIds = update.districtIds == null ? null : ImmutableSet.copyOf(update.districtIds);
            status = update.status;
            newStatus = update.newStatus;

            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder subjectId(final Integer subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder reportType(final TestResultsReportType reportType) {
            this.reportType = reportType;
            return this;
        }

        public Builder districtIds(final Collection<Long> districtIds) {
            this.districtIds = asSet(districtIds);
            return this;
        }

        public Builder status(final TestResultsStatus status) {
            this.status = status;
            return this;
        }

        public Builder newStatus(final TestResultsStatus status) {
            this.newStatus = status;
            return this;
        }

        private <T> Set<T> asSet(final Collection<T> values) {
           if (values == null) {
              return null;
           }

           if (values instanceof Set) {
               return (Set<T>) values;
           }

           return new HashSet<>(values);
        }
    }
}
