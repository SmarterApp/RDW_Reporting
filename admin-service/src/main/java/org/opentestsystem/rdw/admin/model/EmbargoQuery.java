package org.opentestsystem.rdw.admin.model;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Represents query parameters for the {@link org.opentestsystem.rdw.admin.repository.EmbargoRepository}
 */
public class EmbargoQuery {
    // Optional filters
    private Integer schoolYear;
    private Integer subjectId;
    private TestResultsReportType reportType;
    private Set<Long> districtIds;
    private Set<EmbargoStatus> statuses;

    // Optional sort field and flag for descending
    private String sortField;
    private boolean descending = false;

    // Page size and offset for paging.
    private Integer pageSize;
    private Integer rowOffset;

    public Integer getSchoolYear() {
        return schoolYear;
    }

    public Integer getSubjectId() {
        return subjectId;
    }

    public TestResultsReportType getReportType() {
        return reportType;
    }

    public String getReportTypeValue() {
        return reportType == null ? null : reportType.name();
    }

    public Set<Long> getDistrictIds() {
        return districtIds;
    }

    public Set<EmbargoStatus> getStatuses() {
        return statuses;
    }

    public String getSortField() {
        return sortField;
    }

    public boolean isDescending() {
        return descending;
    }

    public Integer getPageSize() {
        return pageSize;
    }

    public Integer getRowOffset() {
        return rowOffset;
    }

    public Set<Integer> getStatusValues() {
        if (statuses == null) {
            return null;
        }

        return statuses.stream().map(EmbargoStatus::getStatusCode).collect(Collectors.toSet());
    }

    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return new builder
     */
    public static EmbargoQuery.Builder builder() {
        return new EmbargoQuery.Builder();
    }

    public static class Builder {
        private Integer schoolYear;
        private Integer subjectId;
        private TestResultsReportType reportType;
        private Set<Long> districtIds;
        private Set<EmbargoStatus> statuses;
        private String sortField;
        private boolean descending;
        private Integer pageSize;
        private Integer rowOffset;

        public EmbargoQuery build() {
            final EmbargoQuery query = new EmbargoQuery();

            query.schoolYear = schoolYear;
            query.subjectId = subjectId;
            query.reportType = reportType;
            query.districtIds = districtIds == null ? null : ImmutableSet.copyOf(districtIds);
            query.statuses = statuses == null ? null : ImmutableSet.copyOf(statuses);
            query.sortField = sortField;
            query.descending = descending;
            query.pageSize = pageSize;
            query.rowOffset = rowOffset;

            return query;
        }

        public Builder copy(final EmbargoQuery query) {
            schoolYear = query.schoolYear;
            subjectId = query.subjectId;
            reportType = query.reportType;
            districtIds = query.districtIds == null ? null : ImmutableSet.copyOf(query.districtIds);
            statuses = query.statuses == null ? null : ImmutableSet.copyOf(query.statuses);
            sortField = query.sortField;
            descending = query.descending;
            pageSize = query.pageSize;
            rowOffset = query.rowOffset;

            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder subjectId(final Integer subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder reportType(final TestResultsReportType reportType) {
            this.reportType = reportType;
            return this;
        }

        public Builder districtIds(final Collection<Long> districtIds) {
            this.districtIds = asSet(districtIds);
            return this;
        }

        public Builder statuses(final Collection<EmbargoStatus> statuses) {
            this.statuses = asSet(statuses);
            return this;
        }

        private <T> Set<T> asSet(final Collection<T> values) {
           if (values == null) {
              return null;
           }

           if (values instanceof Set) {
               return (Set<T>) values;
           }

           return new HashSet<>(values);
        }

        public Builder sortField(final String sortField) {
            this.sortField = sortField;
            return this;
        }

        public Builder descending(final boolean descending) {
            this.descending = descending;
            return this;
        }

        public Builder pageSize(final Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder rowOffset(final Integer rowOffset) {
            this.rowOffset = rowOffset;
            return this;
        }
    }
}
