package org.opentestsystem.rdw.admin.multitenant.administration;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.multitenant.Tenant;

import java.time.Instant;

/**
 * Provides the status of a {@link TenantConfiguration} and optionally a message providing
 * additional information about the reason for that status.
 */
public class TenantAdministrationStatusContext {

    @JsonIgnore
    private Tenant tenant;

    private TenantAdministrationStatus tenantAdministrationStatus;

    private String message;

    @JsonIgnore
    private Instant updated;

    public Tenant getTenant() {
        return tenant;
    }

    public TenantAdministrationStatus getTenantAdministrationStatus() {
        return tenantAdministrationStatus;
    }

    public String getMessage() {
        return message;
    }

    private Instant getUpdated() {
        return updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {

        private Builder() {
        }

        private TenantAdministrationStatus tenantAdministrationStatus = null;
        private String message = null;
        private Tenant tenant = null;
        private Instant updated = null;

        public Builder tenantAdministrationStatus(final TenantAdministrationStatus tenantAdministrationStatus) {
            this.tenantAdministrationStatus = tenantAdministrationStatus;
            return this;
        }

        public Builder tenant(final Tenant tenant) {
            this.tenant = tenant;
            return this;
        }

        public Builder message(final String message) {
            this.message = message;
            return this;
        }

        public Builder message(final Instant updated) {
            this.updated = updated;
            return this;
        }

        public TenantAdministrationStatusContext build() {
            if (this.tenantAdministrationStatus == null) {
                throw new IllegalArgumentException("tenantAdministrationStatus required");
            }
            TenantAdministrationStatusContext context = new TenantAdministrationStatusContext();
            context.message = this.message;
            context.tenantAdministrationStatus = this.tenantAdministrationStatus;
            context.tenant = this.tenant;
            context.updated = this.updated;
            return context;
        }
    }
}
