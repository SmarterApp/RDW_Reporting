package org.opentestsystem.rdw.admin.multitenant.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantValidationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;

/**
 * Service to manage tenant configurations.
 * //todo update application properties yml files
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    private TenantConfigurationViewService tenantConfigurationViewService;
    private SandboxDataSets sandboxDatasets;
    private TenantValidationService tenantValidationService;

    @Autowired
    DefaultTenantService(TenantConfigurationViewService tenantConfigurationViewService,
                         SandboxDataSets sandboxDatasets,
                         TenantValidationService tenantValidationService) {
        this.tenantConfigurationViewService = tenantConfigurationViewService;
        this.sandboxDatasets = sandboxDatasets;
        this.tenantValidationService = tenantValidationService;
    }

    @Override
    public Set<TenantConfiguration> getAll(TenantType tenantType) {
        return ImmutableSet.copyOf(tenantConfigurationViewService
                .allTenantConfigurations(tenantType).values());
    }

    @Override
    public TenantConfiguration createTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Creating a new tenant with key {}", tenantConfiguration.getTenant().getKey());
        tenantValidationService.tenantCreationValidation(tenantConfiguration);
        // TODO call service to start the tenantCreations
        // do not return tenantCfg to UI
        //return tenantConfigurationRepository.add(tenantConfiguration);
        //TODO: Implement
        logger.error("Not yet implemented");
        return null;
    }

    @Override
    public void deleteTenant(final String tenantKey) {
        logger.debug("Removing tenant {}", tenantKey);
        //TODO: validate only for sandboxes
        //TODO: Implement
        logger.error("not yet implemented");
    }

    @Override
    public TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Updating tenant {}", tenantConfiguration.getTenant().getKey());
        tenantValidationService.sandboxUpdateValidation(tenantConfiguration);
        logger.error("not yet implemented");
        //TODO: Implement
        return null;
    }

    @Override
    public List<DataSet> getSandboxDataSets() {
        return sandboxDatasets == null ? ImmutableList.of() : ImmutableList.copyOf(sandboxDatasets.getSandboxDatasets());
    }

    @Override
    public TenantConfiguration getTenantDefaults() {
        return tenantConfigurationViewService.defaultTenantConfiguration();
    }

    @Override
    public TenantConfiguration getParentTenantDefaults(String key) {
        //TODO: Implement
        return null;
    }

}
