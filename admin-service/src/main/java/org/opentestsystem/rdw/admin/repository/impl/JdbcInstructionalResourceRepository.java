package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.repository.InstructionalResourceRepository;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.jdbc.SecurityParameterProvider;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Objects;

import static org.opentestsystem.rdw.reporting.common.jdbc.QueryUtils.getNullable;

/**
 * JDBC-backed implementation of an InstructionalResourceRepository.
 */
@Repository
class JdbcInstructionalResourceRepository implements InstructionalResourceRepository {

    @Value("${sql.instructionalResource.findAll}")
    private String findAllQuery;

    @Value("${sql.instructionalResource.findOne}")
    private String findOneQuery;

    @Value("${sql.instructionalResource.create}")
    private String createQuery;

    @Value("${sql.instructionalResource.update}")
    private String updateQuery;

    @Value("${sql.instructionalResource.delete}")
    private String deleteQuery;

    private final NamedParameterJdbcTemplate template;
    private final SecurityParameterProvider securityParameterProvider;

    @Autowired
    JdbcInstructionalResourceRepository(@Qualifier("reportingJdbcTemplate") final NamedParameterJdbcTemplate template,
                                        final SecurityParameterProvider securityParameterProvider) {
        this.template = template;
        this.securityParameterProvider = securityParameterProvider;
    }

    @Override
    public Collection<InstructionalResource> findAll(final PermissionScope permissionScope) {
        return template.query(
                findAllQuery,
                securityParameterProvider.getSecurityParameters(permissionScope),
                (row, rowNum) -> parseInstructionalResource(row));
    }

    @Override
    public InstructionalResource findOne(final PermissionScope permissionScope,
                                         final InstructionalResource instructionalResource) {
        try {
            return template.queryForObject(
                    findOneQuery,
                    new MapSqlParameterSource()
                            .addValues(securityParameterProvider.getSecurityParameters(permissionScope))
                            .addValues(asSource(instructionalResource).getValues()),
                    (row, rowNum) -> parseInstructionalResource(row));
        } catch (final EmptyResultDataAccessException exception) {
            return null;
        }
    }

    @Override
    public void create(final InstructionalResource instructionalResource) {
        final int createCount = template.update(
                createQuery,
                asSource(instructionalResource));
        if (createCount != 1) {
            throw new IllegalArgumentException("Unable to create instructional resource");
        }
    }

    @Override
    public void update(final InstructionalResource instructionalResource) {
        final int updateCount = template.update(
                updateQuery,
                asSource(instructionalResource));
        if (updateCount != 1) {
            throw new NoSuchElementException("Resource not found: amst_name: " + instructionalResource.getAssessmentName() +
                    " performance_level: " + instructionalResource.getPerformanceLevel() +
                    " org_level: " + instructionalResource.getOrganizationType().name() +
                    " org_id: " + instructionalResource.getOrganizationId());
        }
    }

    @Override
    public void delete(final InstructionalResource instructionalResource) {
        final int deleteCount = template.update(
                deleteQuery,
                asSource(instructionalResource));
        if (deleteCount > 1) {
            throw new IllegalArgumentException("Attempting to delete more than one resource: amst_name: " + instructionalResource.getAssessmentName() +
                    " performance_level: " + instructionalResource.getPerformanceLevel() +
                    " org_type: " + instructionalResource.getOrganizationType().name() +
                    " org_id: " + instructionalResource.getOrganizationId());
        }
    }

    private static InstructionalResource parseInstructionalResource(final ResultSet row) throws SQLException {
        try {
            final URL resource = URI.create(row.getString("resource")).toURL();
            return InstructionalResource.builder()
                    .performanceLevel(row.getInt("performance_level"))
                    .organizationType(OrganizationType.valueOf(row.getString("org_level")))
                    .organizationId(getNullable(row, row.getInt("org_id")))
                    .resource(resource)
                    .assessmentName(row.getString("asmt_name"))
                    .assessmentLabel(row.getString("asmt_label"))
                    .organizationName(row.getString("org_name"))
                    .assessmentType(AssessmentType.valueOf(row.getInt("asmt_type_id")))
                    .assessmentSubjectCode(row.getString("asmt_subject_code"))
                    .build();
        } catch (final MalformedURLException e) {
            throw new IllegalStateException("Unable to parse URL: " + row.getString("resource"), e);
        }
    }

    private MapSqlParameterSource asSource(final InstructionalResource instructionalResource) {
        return new MapSqlParameterSource()
                .addValue("asmt_name", instructionalResource.getAssessmentName())
                .addValue("org_level", instructionalResource.getOrganizationType().name())
                .addValue("performance_level", instructionalResource.getPerformanceLevel())
                .addValue("org_id", instructionalResource.getOrganizationId())
                .addValue("resource", Objects.toString(instructionalResource.getResource(), null));
    }
}
