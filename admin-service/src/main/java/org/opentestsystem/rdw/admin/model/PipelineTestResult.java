package org.opentestsystem.rdw.admin.model;

import org.opentestsystem.rdw.script.ScriptError;

import java.util.List;

import static org.opentestsystem.rdw.reporting.common.util.CollectionUtils.safeImmutableOf;

/**
 * Represents a pipeline test result
 */
public class PipelineTestResult {

    private boolean passed;
    private List<ScriptError> scriptErrors;
    private String output;
    private List<SchemaError> schemaErrors;

    public boolean isPassed() {
        return passed;
    }

    public List<ScriptError> getScriptErrors() {
        return scriptErrors;
    }

    public String getOutput() {
        return output;
    }

    public List<SchemaError> getSchemaErrors() {
        return schemaErrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static PipelineTestResult passed() {
        return builder()
                .passed(true)
                .build();
    }

    public static PipelineTestResult failedWithScriptErrors(final List<ScriptError> errors) {
        return builder()
                .scriptErrors(errors)
                .build();
    }

    public static PipelineTestResult failedWithOutput(final String output) {
        return builder()
                .output(output)
                .build();
    }

    public static PipelineTestResult failedWithSchemaErrors(final List<SchemaError> errors) {
        return builder()
                .schemaErrors(errors)
                .build();
    }

    public static class Builder {
        private boolean passed;
        private List<ScriptError> scriptErrors;
        private String output;
        private List<SchemaError> schemaErrors;

        public Builder passed(final boolean passed) {
            this.passed = passed;
            return this;
        }

        public Builder scriptErrors(final List<ScriptError> scriptErrors) {
            this.scriptErrors = safeImmutableOf(scriptErrors);
            return this;
        }

        public Builder output(final String output) {
            this.output = output;
            return this;
        }

        public Builder schemaErrors(final List<SchemaError> schemaErrors) {
            this.schemaErrors = safeImmutableOf(schemaErrors);
            return this;
        }

        public PipelineTestResult build() {
            final PipelineTestResult result = new PipelineTestResult();
            result.passed = passed;
            result.scriptErrors = scriptErrors;
            result.output = output;
            result.schemaErrors = schemaErrors;
            return result;
        }

    }

}
