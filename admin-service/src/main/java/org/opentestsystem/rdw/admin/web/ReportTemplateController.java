package org.opentestsystem.rdw.admin.web;

import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.admin.model.ReportTemplateInfo;
import org.opentestsystem.rdw.admin.multitenant.exception.DuplicateTenantException;
import org.opentestsystem.rdw.admin.multitenant.web.TenantHttpMessageExceptionHandler;
import org.opentestsystem.rdw.admin.service.ReportTemplateService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

/**
 * Controller responsible for servicing CRUD operations on report templates
 */
@RestController
@RequestMapping("/templates")
public class ReportTemplateController {
    private final ReportTemplateService service;

    @Autowired
    public ReportTemplateController(final ReportTemplateService service) {
        this.service = service;
    }

    /**
     * @return list of template info for all combinations
     */
    @GetMapping
    public List<ReportTemplateInfo> get() {
        return service.getTemplateInfo();
    }

    /**
     * Download the reference template as a file.
     * <p>
     * NOTE: this end-point is not authorized (it is authenticated). To change
     * that, probably easiest to run it through the service; wasn't sure of
     * the requirements.
     * </p>
     *
     * @param response HTTP response to write file contents to
     */
    @GetMapping(path = "reference", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public void getReferenceTemplate(final HttpServletResponse response) {
        // use application/octet to force file download behavior (adjust as needed for front-end)
        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
        response.addHeader("Content-Disposition", "attachment; filename=reference.html");
        // use Spring magic to more easily get the embedded resource
        final ClassPathResource resource = new ClassPathResource("templates/reference.html");
        try (final InputStream is = resource.getInputStream()) {
            IOUtils.copy(is, response.getOutputStream());
            response.getOutputStream().flush();
        }
        catch (final IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Download a specific template as a file.
     *
     * @param response HTTP response to write file contents to
     * @param subjectCode subject code, e.g. "Math"
     * @param assessmentType assessment type, e.g. "sum"
     */
    @GetMapping(path = "{subjectCode}/{assessmentType}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public void getTemplate(final HttpServletResponse response,
                            @PathVariable final String subjectCode,
                            @PathVariable final String assessmentType) {
        try {
            // use application/octet to force file download behavior (adjust as needed for front-end)
            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
            response.addHeader("Content-Disposition",
                "attachment; filename=" + ReportTemplateService.templateName(subjectCode, assessmentType));
            service.download(subjectCode, assessmentType, response.getOutputStream());
            response.flushBuffer();
        } catch (final IOException e) {
            // i don't think this will ever happen but it would probably be a 5xx if it did
            throw new RuntimeException(
                String.format("Error reading TEMPLATE file for %s/%s: %s", subjectCode, assessmentType, e.getMessage()));
        }
    }

    @PostMapping(path = "{subjectCode}/{assessmentType}")
    @ResponseStatus(value = HttpStatus.ACCEPTED)
    public void postTemplate(@PathVariable final String subjectCode,
                            @PathVariable final String assessmentType,
                            @RequestParam("file") final MultipartFile file) {
        try {
            service.upload(subjectCode, assessmentType, file.getInputStream());
        } catch (final IOException e) {
            throw new IllegalArgumentException(
                String.format("Error reading uploaded TEMPLATE file %s: %s", file.getName(), e.getMessage()));
        }
    }

    /**
     * Delete the template for the given combination
     *
     * @param subjectCode subject code, e.g. "Math"
     * @param assessmentType assessment type, e.g. "iab"
     */
    @DeleteMapping(path = "{subjectCode}/{assessmentType}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(@PathVariable final String subjectCode,
                       @PathVariable final String assessmentType) {
        service.delete(subjectCode, assessmentType);
    }
}
