package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.repository.SandboxConfigurationRepository;
import org.springframework.stereotype.Repository;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * Placeholder for the in-memory version of the sandbox repository
 */
@Repository
public class InMemorySandboxConfigurationRepository implements SandboxConfigurationRepository {

    private Map<String, SandboxConfiguration> sandboxConfigurationMap = new HashMap<>();

    public InMemorySandboxConfigurationRepository () {}

    @Override
    public Set<SandboxConfiguration> getAll() {
        return ImmutableSet.copyOf(sandboxConfigurationMap.values());
    }

    @Override
    public SandboxConfiguration create(SandboxConfiguration sandboxConfiguration) {
        SandboxConfiguration sandbox = sandboxConfigurationMap.putIfAbsent(sandboxConfiguration.getSandbox().getTenantKey(), sandboxConfiguration);
        if (sandbox == null) {
            sandbox = sandboxConfigurationMap.get(sandboxConfiguration.getSandbox().getTenantKey());
        }
        return sandbox;
    }

    @Override
    public SandboxConfiguration update(SandboxConfiguration sandboxConfiguration) {
        SandboxConfiguration sandbox = sandboxConfigurationMap.replace(sandboxConfiguration.getSandbox().getTenantKey(), sandboxConfiguration);
        if (sandbox == null) {
            sandbox = sandboxConfigurationMap.get(sandboxConfiguration.getSandbox().getTenantKey());
        }
        return sandbox;
    }

    @Override
    public void delete(final String key) {
        sandboxConfigurationMap.remove(key);
    }


    @Override
    public void reset(final String key) {
        // TODO make it actually resetData : currently No op
    }

    @Override
    public boolean exists(String key) {
        return sandboxConfigurationMap.containsKey(key);
    }
}
