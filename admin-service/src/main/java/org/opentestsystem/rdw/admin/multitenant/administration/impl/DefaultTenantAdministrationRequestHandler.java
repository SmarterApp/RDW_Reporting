package org.opentestsystem.rdw.admin.multitenant.administration.impl;

import com.google.common.annotations.VisibleForTesting;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationMessage;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationProcessor;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationRequestType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.configserver.ConfigServerClient;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseAdminOrchestrationService;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceService;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.Users;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.util.HashMap;

import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.CREATING_DATABASES;
import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.FAILED;
import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.NOTIFYING_CONFIG_SERVER;
import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.PERSISTING_CONFIGURATION;
import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.STARTED;

public class DefaultTenantAdministrationRequestHandler implements TenantAdministrationRequestHandler {

    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantAdministrationRequestHandler.class);

    private final MessageSecurityService messageSecurityService;
    private final TenantAdministrationProcessor tenantAdministrationProcessor;
    private final TenantDatabaseAdminOrchestrationService tenantDatabaseAdminOrchestrationService;
    private final TenantConfigurationPersistenceService tenantConfigurationPersistenceService;
    private final ConfigServerClient configServerClient;
    private final TenantAdministrationStatusService tenantAdministrationStatusService;

    public DefaultTenantAdministrationRequestHandler(MessageSecurityService messageSecurityService,
                                                     TenantAdministrationProcessor tenantAdministrationProcessor,
                                                     TenantDatabaseAdminOrchestrationService tenantDatabaseAdminOrchestrationService,
                                                     TenantConfigurationPersistenceService tenantConfigurationPersistenceService,
                                                     ConfigServerClient configServerClient,
                                                     TenantAdministrationStatusService tenantAdministrationStatusService) {
        this.messageSecurityService = messageSecurityService;
        this.tenantAdministrationProcessor = tenantAdministrationProcessor;
        this.tenantDatabaseAdminOrchestrationService = tenantDatabaseAdminOrchestrationService;
        this.tenantConfigurationPersistenceService = tenantConfigurationPersistenceService;
        this.configServerClient = configServerClient;
        this.tenantAdministrationStatusService = tenantAdministrationStatusService;
    }

    @Override
    public void createTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending CREATE_TENANT {}", tenantConfiguration);
        sendAdministrationMessage(tenantConfiguration, TenantAdministrationRequestType.CREATE_TENANT);
    }

    @Override
    public void createSandbox(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending CREATE_SANDBOX {}", tenantConfiguration);
        sendAdministrationMessage(tenantConfiguration, TenantAdministrationRequestType.CREATE_SANDBOX);
    }

    @Override
    public void updateTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending UPDATE_TENANT {}", tenantConfiguration);
        sendAdministrationMessage(tenantConfiguration, TenantAdministrationRequestType.UPDATE_TENANT);
    }

    @Override
    public void updateSandbox(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending UPDATE_SANDBOX {}", tenantConfiguration);
        sendAdministrationMessage(tenantConfiguration, TenantAdministrationRequestType.UPDATE_SANDBOX);
    }

    @Override
    public void deleteSandbox(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending DELETE_SANDBOX {}", tenantConfiguration);
        sendAdministrationMessage(tenantConfiguration, TenantAdministrationRequestType.DELETE_SANDBOX);
    }

    private void sendAdministrationMessage(TenantConfiguration tenantConfiguration,
                                           TenantAdministrationRequestType tenantAdministrationRequestType) {
        User user = getCurrentUser();
        TenantAdministrationMessage payload = TenantAdministrationMessage.builder()
                .tenantAdministrationRequestType(tenantAdministrationRequestType)
                .tenantConfiguration(tenantConfiguration)
                .build();

        final Message<TenantAdministrationMessage> message = messageSecurityService.withUser(
                MessageBuilder.createMessage(payload, new MessageHeaders(new HashMap<>())),
                user);
        tenantAdministrationProcessor.tenantAdministrationOutput().send(message);
    }

    @StreamListener(TenantAdministrationProcessor.TenantAdministrationInput)
    public void tenantAdministrationDispatcher(final Message<TenantAdministrationMessage> message) {
        try {
            TenantAdministrationMessage payload = message.getPayload();
            final TenantConfiguration tenantConfiguration = payload.getTenantConfiguration();
            switch (payload.getTenantAdministrationRequestType()) {
                case CREATE_TENANT:
                    createTenantAsync(tenantConfiguration);
                    break;
                case CREATE_SANDBOX:
                    createSandboxAsync(tenantConfiguration);
                    break;
                case DELETE_SANDBOX:
                    deleteSandboxAsync(tenantConfiguration);
                    break;
                case UPDATE_TENANT:
                    updateTenantAsync(tenantConfiguration);
                    break;
                case UPDATE_SANDBOX:
                    updateSandboxAsync(tenantConfiguration);
                    break;
            }
        } catch (Exception e) {
            //no end user logging only
            logger.warn("Error processing tenant administration request {}", message, e);
        }
    }

    private void createTenantAsync(final TenantConfiguration tenantConfiguration) {
        final String tenantKey = tenantConfiguration.getTenant().getKey();
        try {
            tenantAdministrationStatusService.putStatus(tenantKey, STARTED, tenantConfiguration);
            logger.debug("Processing TenantCreationInput {} {}", tenantKey, tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, CREATING_DATABASES);
            logger.debug("Processing TenantCreationInput createTenantDatabases {}", tenantKey);
            tenantDatabaseAdminOrchestrationService.createTenantDatabases(tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, PERSISTING_CONFIGURATION);
            logger.debug("Processing TenantCreationInput saveTenantConfiguration {}", tenantKey);
            tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, NOTIFYING_CONFIG_SERVER);
            logger.debug("Processing TenantCreationInput postMonitor {}", tenantKey);
            configServerClient.postMonitor();
        } catch (Exception e) {
            //catch all / rethrow to update status
            String stackTrace = ExceptionUtils.getStackTrace(e);
            tenantAdministrationStatusService.updateStatus(tenantKey, FAILED, stackTrace);
            throw e;
        }
    }


    @VisibleForTesting
    void createSandboxAsync(TenantConfiguration tenantConfiguration) {
        final String tenantKey = tenantConfiguration.getTenant().getKey();
        try {
            tenantAdministrationStatusService.putStatus(tenantKey, STARTED, tenantConfiguration);
            logger.debug("create sandbox starting {} {}", tenantKey, tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, CREATING_DATABASES);
            logger.debug("create sandbox create database {}", tenantKey);
            tenantDatabaseAdminOrchestrationService.createSandboxDatabases(tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, PERSISTING_CONFIGURATION);
            logger.debug("create sandbox save git {}", tenantKey);
            tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);

            tenantAdministrationStatusService.updateStatus(tenantKey, NOTIFYING_CONFIG_SERVER);
            logger.debug("create sandbox postMonitor {}", tenantKey);
            configServerClient.postMonitor();
        } catch (Exception e) {
            //catch all / rethrow to update status
            tenantAdministrationStatusService.updateStatus(tenantKey, FAILED);
            String stackTrace = ExceptionUtils.getStackTrace(e);
            tenantAdministrationStatusService.updateStatus(tenantKey, FAILED, stackTrace);
            throw e;
        }
    }

    private void updateTenantAsync(TenantConfiguration tenantConfiguration) {
        final String tenantKey = tenantConfiguration.getTenant().getKey();
        logger.debug("update sandbox save git {}", tenantKey);
        tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);
    }

    private void updateSandboxAsync(TenantConfiguration tenantConfiguration) {
        final String tenantKey = tenantConfiguration.getTenant().getKey();
        logger.debug("update sandbox save git {}", tenantKey);
        tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);
    }

    private void deleteSandboxAsync(final TenantConfiguration tenantConfiguration) {
        final String tenantKey = tenantConfiguration.getTenant().getKey();
        try {
            logger.debug("database delete sandbox  {}", tenantKey);
            tenantDatabaseAdminOrchestrationService.deleteSandboxDatabases(tenantConfiguration);

            logger.debug("git delete sandbox {}", tenantKey);
            tenantConfigurationPersistenceService.deleteSandbox(tenantKey);

            logger.debug("status service delete sandbox {}", tenantKey);
            tenantAdministrationStatusService.remove(tenantConfiguration.getTenant().getKey());

            logger.debug("Processing SandboxDeleteInput postMonitor {}", tenantKey);
            configServerClient.postMonitor();
        } catch (Exception e) {
            logger.warn("Error deleting sandbox tenantConfiguration {} ", tenantConfiguration, e);
        }
    }

    @VisibleForTesting
    User getCurrentUser() {
        return Users.getCurrentUser();
    }

}
