package org.opentestsystem.rdw.admin.multitenant.database.impl;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.admin.multitenant.database.DatasetImport;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.util.PropertyPlaceholderHelper;

import javax.annotation.Nullable;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

/**
 * Repository for loading datasets for new Tenants.  This particular implementation
 * will only work with AWS Aurora and AWS S3.
 */
@Repository
public class JdbcDatasetImport implements DatasetImport {

    private static final Logger logger = LoggerFactory.getLogger(JdbcDatasetImport.class);

    private final String delimiter = "/";
    private final NamedParameterJdbcTemplate adminJdbcTemplate;
    private final ArchivePropertiesRoot archivePropertiesRoot;
    private final Supplier<AmazonS3> amazonS3Supplier; //lazy
    private final PropertyPlaceholderHelper placeholderHelper;

    @Value("${sql.datasetImport.auroraS3LoadData}")
    private String auroraS3LoadData;

    @Value("${sql.datasetImport.useDatabase}")
    private String useDatabase;

    @Value("${sql.datasetImport.disableForeignKeyChecks}")
    private String disableForeignKeyChecks;

    @Value("${sql.datasetImport.enableForeignKeyChecks}")
    private String enableForeignKeyChecks;

    @Value("${sql.datasetImport.tableEmptyProbe}")
    private String tableEmptyProbe;

    @Autowired
    public JdbcDatasetImport(@Qualifier("adminJdbcTemplate") final NamedParameterJdbcTemplate adminJdbcTemplate,
                             final ArchivePropertiesRoot archivePropertiesRoot) {
        this.adminJdbcTemplate = adminJdbcTemplate;
        this.archivePropertiesRoot = archivePropertiesRoot;
        this.placeholderHelper = new PropertyPlaceholderHelper("$[", "]");
        amazonS3Supplier = Suppliers.memoize(() -> AmazonS3ClientBuilder.standard()
                .withRegion(archivePropertiesRoot.getS3RegionStatic())
                .withCredentials(
                        new AWSStaticCredentialsProvider(
                                new BasicAWSCredentials(
                                        archivePropertiesRoot.getS3AccessKey(),
                                        archivePropertiesRoot.getS3SecretKey()
                                )
                        )
                )
                .build());
    }

    @Override
    public void loadDataset(String targetDatabase, String datasetName, String importDatabase) {
        if (!isDatabaseEmpty(targetDatabase, importDatabase)) {
            throw new RuntimeException("Unable to load dataset, target database " + targetDatabase + " not empty.");
        }
        final JdbcOperations operations = adminJdbcTemplate.getJdbcOperations();

        operations.execute(amendSqlWithPlaceholder(targetDatabase, null, useDatabase));
        operations.execute(disableForeignKeyChecks);

        manifest(datasetName, importDatabase).forEach(tableFileName -> {
            logger.debug("tableFileName: {}", tableFileName);
            final String s3Uri = archivePropertiesRoot.getUriRoot() +
                    delimiter + datasetPath(datasetName, importDatabase) + delimiter + tableFileName;
            final String tableName = FilenameUtils.removeExtension(tableFileName);
            final String s3LoadDataSql = amendSqlWithPlaceholder(targetDatabase, tableName, auroraS3LoadData);

            adminJdbcTemplate.update(s3LoadDataSql,
                    new MapSqlParameterSource()
                            .addValue("s3_uri", s3Uri));
        });
        operations.execute(enableForeignKeyChecks);
    }

    /**
     * Probe for target database, ensure that it is empty.
     *
     * @param targetDatabase database to be populated
     * @param importDatabase source database
     * @return true if empty
     */
    @VisibleForTesting
    boolean isDatabaseEmpty(String targetDatabase, String importDatabase) {
        if (importDatabase.contains("warehouse")) {
            final String sql = amendSqlWithPlaceholder(targetDatabase, "exam", tableEmptyProbe);
            int count = adminJdbcTemplate.getJdbcOperations()
                    .queryForObject(sql, Integer.class);
            return count == 0;
        }
        //currently only support warehouse
        throw new RuntimeException("Unsupported import database " + importDatabase);
    }

    /**
     * Fetch the manifest file from S3.
     *
     * @param datasetName    The name of the dataset
     * @param importDatabase The name of the database being imported from.
     * @return List of each item in the manifest (table_name.txt)
     */
    @VisibleForTesting
    List<String> manifest(String datasetName, String importDatabase) {
        try {
            final AmazonS3 amazonS3 = amazonS3Supplier.get();
            final String bucketName = archivePropertiesRoot.getUriRoot().substring("s3://".length());
            logger.debug("bucketName: {}", bucketName);
            final String key = datasetPath(datasetName, importDatabase) + delimiter + "manifest.txt";
            logger.debug("key: {}", key);
            final S3Object s3Object = amazonS3.getObject(bucketName, key);
            final String manifestFile = IOUtils.toString(s3Object.getObjectContent(), "UTF-8");
            logger.debug("manifestFile: {}", manifestFile);
            return Arrays.asList(manifestFile.split("\n"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String datasetPath(String datasetName, String importDatabase) {
        return "sandbox-datasets/" +
                datasetName + "/" +
                importDatabase;
    }

    private String amendSqlWithPlaceholder(String databaseName, @Nullable String tableName, String sql) {
        final Properties properties = new Properties();
        properties.put("databaseName", databaseName);
        if (tableName != null) {
            properties.put("tableName", tableName);
        }
        return placeholderHelper.replacePlaceholders(sql, properties);
    }

}
