package org.opentestsystem.rdw.admin.model;

import com.fasterxml.jackson.annotation.JsonRawValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.web.RawJsonDeserializer;
import org.opentestsystem.rdw.multitenant.Tenant;

/**
 * This contains tenant specific configuration, tenant, properties and localization for a tenant.
 * These generally override the default
 */
public class TenantConfiguration {

    //Audit Note: confirmed superset of org.opentestsystem.rdw.admin.model.ApplicationSandboxConfiguration

    /***
     * The configured tenant
     */
    private Tenant tenant;

    /***
     * The parent tenant key (only used during creation)
     */
    private String parentTenantKey;

    /***
     * Tenant configurable elements
     */
    private ApplicationTenantConfiguration applicationTenantConfiguration;

    /**
     * Localization json literal
     */
    @JsonDeserialize(using = RawJsonDeserializer.class)
    @JsonRawValue
    private String localization;

    /**
     * All available sandbox datasets.
     */
    //TODO: see if we can remove this, replace with single org.opentestsystem.rdw.admin.multitenant.DataSet, provide API alternative
    private SandboxDataSets sandboxDatasets;

    public TenantConfiguration() { }

    public Tenant getTenant() {
        return tenant;
    }

    public void setTenant(Tenant  tenant) {
        this.tenant = tenant;
    }

    public String getParentTenantKey() {
        return parentTenantKey;
    }

    public void setParentTenantKey(String parentTenantKey) {
        this.parentTenantKey = parentTenantKey;
    }

    public ApplicationTenantConfiguration getApplicationTenantConfiguration() {
        return applicationTenantConfiguration;
    }

    public void setApplicationTenantConfiguration(ApplicationTenantConfiguration applicationTenantConfiguration) {
        this.applicationTenantConfiguration = applicationTenantConfiguration;
    }

    public String getLocalization() {
        return localization;
    }

    public void setLocalization(String localization) {
        this.localization = localization;
    }

    public SandboxDataSets getSandboxDatasets() {
        return sandboxDatasets;
    }

    public void setSandboxDatasets(final SandboxDataSets sandboxDatasets) {
        this.sandboxDatasets = sandboxDatasets;
    }
}
