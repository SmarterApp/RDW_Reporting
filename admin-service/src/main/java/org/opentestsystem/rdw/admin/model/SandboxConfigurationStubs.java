package org.opentestsystem.rdw.admin.model;

import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;

import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

/**
 * ApplicationSandboxConfiguration and Sandbox configurations used for testing
 * And to serve up mock data
 * TODO This will be moved to test once full sandbox configurations are managed
 */
public class SandboxConfigurationStubs {
    // Default Tenant will be California
    public static ApplicationSandboxConfiguration getApplicationSandboxConfigurationDefault() {
        ApplicationSandboxConfiguration applicationSandboxConfiguration = new ApplicationSandboxConfiguration();
        applicationSandboxConfiguration.setTenant(TenantConfigurationStubs.getTenantCA());
        applicationSandboxConfiguration.setDataSets(getDataSets());
        applicationSandboxConfiguration.setReporting(TenantConfigurationStubs.getReporting());
        applicationSandboxConfiguration.setAggregateReportingPropertiesTenant(getAggregrateReportingProperties());
        return applicationSandboxConfiguration;
    }

    public static Set<DataSet> getDataSets() {
        Set<DataSet> dataSets = new HashSet<>();
        DataSet dataSetCa = new DataSet();
        dataSetCa.setLabel("California Interim Data Set");
        dataSetCa.setKey("ca_interim");
        dataSets.add(dataSetCa);

        DataSet dataSetMi = new DataSet();
        dataSetMi.setLabel("Michigan Summative Data Set");
        dataSetMi.setKey("mi_summative");
        dataSets.add(dataSetMi);

        DataSet dataSetSbac = new DataSet();
        dataSetSbac.setLabel("SBAC Interim Data Set");
        dataSetSbac.setKey("sbac_interim");
        dataSets.add(dataSetMi);

        return dataSets;
    }
    public static SandboxConfiguration getCaInterimSandboxConfiguration() {
        SandboxConfiguration sandboxConfiguration = new SandboxConfiguration();
        sandboxConfiguration.setSandbox(getSandboxCAInfo());
        sandboxConfiguration.setReporting(TenantConfigurationStubs.getReporting());
        sandboxConfiguration.setLocalization(getCaLocalization());
        sandboxConfiguration.setAggregateReportingPropertiesTenant(getAggregrateReportingProperties());
        return sandboxConfiguration;
    }

    public static SandboxConfiguration getMiInterimSandboxConfiguration() {
        SandboxConfiguration sandboxConfiguration = new SandboxConfiguration();
        sandboxConfiguration.setSandbox(getSandboxMIInfo());
        sandboxConfiguration.setReporting(TenantConfigurationStubs.getReporting());
        sandboxConfiguration.setLocalization(getCaLocalization());
        sandboxConfiguration.setAggregateReportingPropertiesTenant(getAggregrateReportingProperties());
        return sandboxConfiguration;
    }

    private static Sandbox getSandboxCAInfo() {
        Sandbox sandbox = new Sandbox();
        sandbox.setDataSetKey("sbac_interim");
        sandbox.setTenantKey("CA");
        sandbox.setDescription("A sandbox for CA using sbac_interim dataset");
        sandbox.setId("CA");
        sandbox.setKey("CA");
        sandbox.setName("California");
        return sandbox;
    }

    private static Sandbox getSandboxMIInfo() {
        Sandbox sandbox = new Sandbox();
        sandbox.setDataSetKey("sbac_interim");
        sandbox.setTenantKey("MI");
        sandbox.setDescription("A sandbox for MI using sbac_interim dataset");
        sandbox.setId("MI");
        sandbox.setKey("MI");
        sandbox.setName("Michigan");
        return sandbox;
    }

    public static Map<String, String> getCaLocalization() {
        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.HispanicOrLatinoEthnicity", "Hispanic or Latino");
        localization.put("common.ethnicity.Asian", "Asian");
        return localization;
    }


    public static AggregateReportingPropertiesTenant getAggregrateReportingProperties() {
        AggregateReportingPropertiesTenant aggregateReportingProperties = new AggregateReportingPropertiesTenant();
        Set<String> assessmentTypes = new HashSet<>();
        assessmentTypes.add("ica");
        assessmentTypes.add("sum");
        assessmentTypes.add("iab");
        aggregateReportingProperties.setAssessmentTypes(assessmentTypes);
        Set<String> assessments = new HashSet<>();
        assessmentTypes.add("sum");
        aggregateReportingProperties.setStateAggregateAssessmentTypes(assessments);
        Set<String> stateAssessments = new HashSet<>();
        stateAssessments.add("sum");
        stateAssessments.add("iab");
        aggregateReportingProperties.setStatewideUserAssessmentTypes(stateAssessments);
        return aggregateReportingProperties;
    }

}
