package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
class JdbcPipelineRepository implements PipelineRepository {

    private static Pipeline toPipeline(final ResultSet row) throws SQLException {
        return Pipeline.builder()
                .id(row.getInt("id"))
                .code(row.getString("code"))
                .inputType(row.getString("input_type"))
                .build();
    }

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.pipeline.findAll}")
    private String findAll;

    @Value("${sql.pipeline.findById}")
    private String findById;


    JdbcPipelineRepository(@Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Pipeline> findAll() {
        return template.query(
                findAll,
                (row, index) -> toPipeline(row)
        );
    }

    @Override
    public Pipeline findById(int id) {
        try {
            return template.queryForObject(
                    findById,
                    new MapSqlParameterSource("id", id),
                    (row, index) -> toPipeline(row)
            );
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

}
