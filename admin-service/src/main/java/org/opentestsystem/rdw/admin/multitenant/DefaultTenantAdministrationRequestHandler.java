package org.opentestsystem.rdw.admin.multitenant;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.rdw.admin.client.ConfigServerClient;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseCreationService;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceService;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.Users;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.util.HashMap;

import static org.opentestsystem.rdw.admin.multitenant.TenantAdministrationProcessor.SandboxCreationRequest;
import static org.opentestsystem.rdw.admin.multitenant.TenantAdministrationProcessor.TenantCreationRequest;

public class DefaultTenantAdministrationRequestHandler implements TenantAdministrationRequestHandler {

    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantAdministrationRequestHandler.class);

    private final MessageSecurityService messageSecurityService;
    private final TenantAdministrationProcessor tenantAdministrationProcessor;
    private final TenantDatabaseCreationService tenantDatabaseCreationService;
    private final TenantConfigurationPersistenceService tenantConfigurationPersistenceService;
    private final ConfigServerClient configServerClient;

    public DefaultTenantAdministrationRequestHandler(MessageSecurityService messageSecurityService,
                                                     TenantAdministrationProcessor tenantAdministrationProcessor,
                                                     TenantDatabaseCreationService tenantDatabaseCreationService,
                                                     TenantConfigurationPersistenceService tenantConfigurationPersistenceService,
                                                     ConfigServerClient configServerClient) {
        this.messageSecurityService = messageSecurityService;
        this.tenantAdministrationProcessor = tenantAdministrationProcessor;
        this.tenantDatabaseCreationService = tenantDatabaseCreationService;
        this.tenantConfigurationPersistenceService = tenantConfigurationPersistenceService;
        this.configServerClient = configServerClient;
    }

    @Override
    public void createTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Sending TenantCreationRequest");
        User user = getCurrentUser();
        final Message<TenantConfiguration> createTenantMessage = messageSecurityService.withUser(
                MessageBuilder.createMessage(tenantConfiguration, new MessageHeaders(new HashMap<>())),
                user);
        tenantAdministrationProcessor.tenantCreationRequest().send(createTenantMessage);
    }

    @StreamListener(TenantCreationRequest)
    @VisibleForTesting
    void createTenantAsync(final Message<TenantConfiguration> createTenantMessage) {
        TenantConfiguration tenantConfiguration = createTenantMessage.getPayload();
        logger.debug("Processing TenantCreationRequest");
        tenantDatabaseCreationService.createTenantDatabases(tenantConfiguration);
        tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);
        configServerClient.postMonitor();
    }

    @Override
    public void createSandbox(TenantConfiguration tenantConfiguration) {
        User user = getCurrentUser();
        final Message<TenantConfiguration> createTenantMessage = messageSecurityService.withUser(
                MessageBuilder.createMessage(tenantConfiguration, new MessageHeaders(new HashMap<>())),
                user);
        tenantAdministrationProcessor.sandboxCreationRequest().send(createTenantMessage);
    }

    @StreamListener(SandboxCreationRequest)
    @VisibleForTesting
    void createSandboxAsync(final Message<TenantConfiguration> createSandboxMessage) {
        TenantConfiguration tenantConfiguration = createSandboxMessage.getPayload();
        logger.debug("Processing SandboxCreationRequest");
        tenantDatabaseCreationService.createSandboxDatabases(tenantConfiguration);
        tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfiguration);
        configServerClient.postMonitor();
    }

    @VisibleForTesting
    User getCurrentUser() {
        return Users.getCurrentUser();
    }
}
