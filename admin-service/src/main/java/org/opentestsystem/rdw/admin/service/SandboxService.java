package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfigurations;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.multitenant.DataSet;

import java.util.List;

/**
 * Implementation of this service is responsible for management actions of a Sandbox
 *
 * @deprecated Please use {@link TenantService} instead
 */
@Deprecated
public interface SandboxService {
    /**
     * Retrieve the default application information and a list of sandboxes and their configurations.
     * If there are no sandboxes configured, only the default information is returned.
     *
     * @return The Default information and a list of all existing sandboxes  for this Instance
     */
    ApplicationSandboxConfigurations getAll();

    /**
     * @param sandboxConfiguration The updated sandbox Configuration to save
     * @return the newly created SandboxConfiguration
     */
    SandboxConfiguration create(SandboxConfiguration sandboxConfiguration);

    /**
     * @param sandboxConfiguration The updated sandbox Configuration to save
     * @return the updated SandboxConfiguration
     */
    SandboxConfiguration update(SandboxConfiguration sandboxConfiguration);

    /**
     * removes a sandbox - including all shutdown procedures
     * - todo tbd what this actually means
     *
     * @param key the sandboxKey  to remove
     */
    void delete(String key);

    /**
     * @param key of sandbox to reset the dataSet back to the default data
     */
    void resetDataSet(String key);

    /**
     * @return a list of available dataSets for a Sandbox creation
     */
    List<DataSet> getSandboxDataSets();
}
