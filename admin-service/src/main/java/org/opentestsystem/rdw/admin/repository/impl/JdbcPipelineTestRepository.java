package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.repository.PipelineTestRepository;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.NoSuchElementException;

@Repository
class JdbcPipelineTestRepository implements PipelineTestRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.pipeline-test.findAllByPipeline}")
    private String findAllByPipeline;

    @Value("${sql.pipeline-test.findById}")
    private String findById;

    @Value("${sql.pipeline-test.create}")
    private String create;

    @Value("${sql.pipeline-test.update}")
    private String update;

    @Value("${sql.pipeline-test.deleteById}")
    private String deleteById;

    JdbcPipelineTestRepository(@Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<PipelineTest> findAllByPipeline(final int pipelineId) {
        return template.query(
                findAllByPipeline,
                new MapSqlParameterSource("pipeline_id", pipelineId),
                (row, index) -> PipelineTest.builder()
                        .id(row.getInt("id"))
                        .pipelineId(row.getInt("pipeline_id"))
                        .name(row.getString("name"))
                        .created(row.getTimestamp("created").toInstant())
                        .updated(row.getTimestamp("updated").toInstant())
                        .updatedBy(row.getString("updated_by"))
                        .build()
        );
    }

    @Override
    public PipelineTest findById(final int id) {
        try {
            return template.queryForObject(
                    findById,
                    new MapSqlParameterSource()
                            .addValue("id", id),
                    (row, index) -> PipelineTest.builder()
                            .id(row.getInt("id"))
                            .pipelineId(row.getInt("pipeline_id"))
                            .name(row.getString("name"))
                            .input(row.getString("example_input"))
                            .output(row.getString("expected_output"))
                            .created(row.getTimestamp("created").toInstant())
                            .updated(row.getTimestamp("updated").toInstant())
                            .updatedBy(row.getString("updated_by"))
                            .build()
            );
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public PipelineTest create(final PipelineTest test) {
        final GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
        final int insertCount = template.update(
                create,
                new MapSqlParameterSource()
                        .addValue("pipeline_id", test.getPipelineId())
                        .addValue("name", test.getName())
                        .addValue("example_input", test.getInput())
                        .addValue("expected_output", test.getOutput())
                        .addValue("updated_by", test.getUpdatedBy()),
                keyHolder
        );
        if (insertCount != 1) {
            throw new IllegalStateException("Unable to create pipeline test");
        }
        return findById(keyHolder.getKey().intValue());
    }

    @Override
    @Transactional(transactionManager = "warehouseTxManager")
    public PipelineTest update(final PipelineTest test) {
        final int updateCount = template.update(
                update,
                new MapSqlParameterSource()
                        .addValue("id", test.getId())
                        .addValue("name", test.getName())
                        .addValue("example_input", test.getInput())
                        .addValue("expected_output", test.getOutput())
                        .addValue("updated_by", test.getUpdatedBy())
                );

        if (updateCount != 1) {
            throw new NoSuchElementException(String.format(
                    "Unable to update pipeline test with id \"%s\" for user \"%s\"",
                    test.getId(), test.getUpdatedBy()
            ));
        }
        return findById(test.getId());
    }

    @Override
    public void delete(final PipelineTest test) {
        final int updateCount = template.update(
                deleteById,
                new MapSqlParameterSource("id", test.getId())
        );
        if (updateCount != 1) {
            throw new NoSuchElementException(String.format(
                    "Unable to delete report with id \"%s\" for user \"%s\"",
                    test.getId(), test.getUpdatedBy()
            ));
        }
    }

}
