package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.annotations.VisibleForTesting;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.opentestsystem.rdw.admin.client.DefaultConfigServerClient;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsClient;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsService;
import org.opentestsystem.rdw.admin.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Classes to return tenant and sandbox properties from the RDW Actuator endpoint calls
 * This is the service the tenant & sandbox service use to retrieve default and tenant specific properties & settings
 */
@Service
//TODO: refresh scope this for TenantProperties?  don't think so but verify
public class DefaultTenantConfigurationViewService implements TenantConfigurationViewService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantConfigurationViewService.class);
    private static final int USERNAME_MAX_SIZE = 17;
    private static final String CIPHER = "{cipher}";

    private final DefaultConfigServerClient defaultConfigServerClient;

    @Deprecated  //TODO: remove direct access
    private final ConfigpropsClient configpropsClient;

    private final ObjectMapper mapper;
    private final TenantProperties tenantProperties;

    //TODO: is this a cache?
    private DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor;

    private final ConfigpropsService configpropsService;

    @Autowired
    public DefaultTenantConfigurationViewService(ConfigpropsClient configpropsClient,
                                                 DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor,
                                                 DefaultConfigServerClient defaultConfigServerClient,
                                                 ObjectMapper objectMapper,
                                                 TenantProperties tenantProperties,
                                                 ConfigpropsService configpropsService) {
        this.configpropsClient = configpropsClient;
        this.rdwServiceConfigPropsAccessor = rdwServiceConfigPropsAccessor;
        this.defaultConfigServerClient = defaultConfigServerClient;
        this.mapper = objectMapper.copy();
        this.tenantProperties = tenantProperties;
        this.configpropsService = configpropsService;
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void servicesPropertiesRefresh() {
        // getting /configProps
        List<String> configProps = configpropsClient.getRawConfigurations();
        // getting props with actual unmasked passwords
        final String reportingROProps = defaultConfigServerClient.getActualReportingROPasswordProps();
        configProps.add(reportingROProps);
        final String reportingRWProps = defaultConfigServerClient.getActualReportingRWPasswordProps();
        configProps.add(reportingRWProps);
        final String olapProps = defaultConfigServerClient.getActualOlapROPasswordProps();
        configProps.add(olapProps);
        final String warehouseProps = defaultConfigServerClient.getActualWarehouseRWPasswordProps();
        configProps.add(warehouseProps);
        RdwServiceConfigProps rdwServiceConfigProps = new RdwServiceConfigProps();
        rdwServiceConfigProps.setConfigProps(configProps);

        rdwServiceConfigPropsAccessor = DefaultRdwServiceConfigPropsAccessor.wrap(rdwServiceConfigProps, mapper);
    }


    @Override
    public boolean archivePrefixExists(String prefix) {
        final Map<String, ArchivePropertiesTenant> tenantsArchiveProperties = rdwServiceConfigPropsAccessor.getTenantsArchiveProperties();
        for (Map.Entry<String, ArchivePropertiesTenant> archive : tenantsArchiveProperties.entrySet()) {
            if (archive.getValue().getPathPrefix().equals(prefix)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean dataSourceExists(String dataSource, String dataSourceDatabase) {
        // TODO Add the DBADmin checks to the Aurua db
        if (dataSource.equals(RDWDataSourceNames.REPORTING_RO.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements());
        }
        if (dataSource.equals(RDWDataSourceNames.REPORTING_RW.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements());
        }
        if (dataSource.equals(RDWDataSourceNames.WAREHOUSE_RW.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements());
        }
        return false;
    }

    @Override
    public boolean dataSourceOlapExists(String dataSourceDatabase, String userName) {
        // check that the database exist
        // the database is the same as the default
        // and the username is unique
        // todo add redshift check
        boolean dbExists = databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements());
        boolean userNameExists = databaseUserNameExists(userName, rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements());
        // false means it's Ok to create, abd verify the userName length
        return userNameExists || !dbExists || userName.length() > USERNAME_MAX_SIZE ? false : true;
    }

    /**
     * TODO Add search on configured S3 settings
     *
     * @param userName                          the userName to search for
     * @param tenantsReadOnlyDataSourceElements Map of tenant specific dataSources to search
     * @return true if the userName of the database is found in the list of current tenants
     */
    private boolean databaseUserNameExists(final String userName, final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceElements) {
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantsReadOnlyDataSourceElements.entrySet()) {
            if (dataSource.getValue().getUsername().equals(userName)) {
                return true;
            }
        }
        return false;
    }

    /**
     * TODO Search databases
     *
     * @param dataSourceDatabase                the database to search for
     * @param tenantsReadOnlyDataSourceElements Map of dataSources to search
     * @return true if the dataSource database is found in the list of current tenants
     */
    private boolean databaseExists(final String dataSourceDatabase, final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceElements) {
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantsReadOnlyDataSourceElements.entrySet()) {
            if (dataSource.getValue().getUrlParts().getDatabase().equals(dataSourceDatabase)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Add getDefaultApplicationTenantConfiguration for this instance
     */
    @Override
    public TenantConfiguration getDefaultTenantConfiguration() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();

        configpropsService.defaultAggregateReportingProperties()
                .ifPresent(tenantConfiguration::setAggregateReportingProperties);

        configpropsService.defaultArchiveProperties()
                .ifPresent(archiveProperties -> {
                    //TODO: better solution, should have is-a relationship
                    tenantConfiguration
                            .setArchiveProperties(mapper.convertValue(archiveProperties,
                                    ArchivePropertiesTenant.class));
                });

        configpropsService.defaultReportingSystemProperties()
                .ifPresent(reportingSystemSettings -> {
                    //TODO: better solution, should have is-a relationship
                    tenantConfiguration
                            .setReporting(mapper.convertValue(reportingSystemSettings,
                                    ReportingSystemPropertiesImpl.class));
                });

        tenantConfiguration.setDataSources(
                //TODO: better solution, should have is-a relationship
                configpropsService.defaultDataSourceElements()
                        .entrySet()
                        .stream()
                        .map(entry -> ImmutablePair.of(entry.getKey(), mapper.convertValue(entry.getValue(), DataSourceElementsTenant.class)))
                        .collect(Collectors.toMap(ImmutablePair::getLeft, ImmutablePair::getRight))
        );

        return tenantConfiguration;
    }

    private String getEncryptedPassword(final String password) {
        if (password != null) {
            String encrypted = defaultConfigServerClient.encryptPassword(password);
            return CIPHER + encrypted;
        }
        return null;
    }

    /**
     * @param dataSourceElementsTenant to apply default settings
     * @return DataSourceElementsTenant with the default settings
     */
    private DataSourceElementsTenant applyDefaults(DataSourceElementsTenant dataSourceElementsTenant) {
        dataSourceElementsTenant.setSchemaSearchPath(null);
        dataSourceElementsTenant.setPassword(null);
        dataSourceElementsTenant.setUsername(null);
        dataSourceElementsTenant.getUrlParts().setDatabase(null);
        return dataSourceElementsTenant;
    }

    @Override
    //TODO this depends on parent tenant id
    public TenantConfiguration getDefaultSandboxTenantConfiguration(String parentKey) {
        TenantConfiguration applicationSandboxConfiguration = new TenantConfiguration();

        // Get the default reporting system settings
        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings();
        if (defaultReportingSystemSettings.isPresent()) {
            logger.info("Add Default defaultReportingSystemSettings");
            applicationSandboxConfiguration.setReporting(defaultReportingSystemSettings.get());
        }

        // Get the default AggregateReporting properties
        Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties();
        if (aggregatePropertiesTenant.isPresent()) {
            logger.info("Add Default AggregateReportingProperties");
            applicationSandboxConfiguration.setAggregateReportingProperties(aggregatePropertiesTenant.get());
        }
        return applicationSandboxConfiguration;
    }

    @Override
    public TenantConfiguration getTenantConfiguration(final String key) {
        boolean configpropsHasTenant =
                configpropsService.tenantProperties()
                        .map(tenantProperties ->
                                tenantProperties.getTenants()
                                        .containsKey(key))
                        .orElse(false);

        //TODO: or status service
        if (!configpropsHasTenant) {
            throw new IllegalArgumentException("No tenant with key " + key + "found");
        }

        //TODO: just use optional
        Tenant tenant =
                configpropsService.tenantProperties()
                        .map(tenantProperties ->
                                tenantProperties.getTenants()
                                        .get(key))
                        .get();

        final boolean isSandbox = tenant.isSandbox();

        TenantConfiguration tenantConfiguration = new TenantConfiguration();

        //common
        tenantConfiguration.setTenant(tenant);
        tenantConfiguration.setAdministrationStatus(TenantAdministrationStatus.ACTIVE);
        //TODO: Add localization fetch API
        //tenantConfiguration.setLocalization();
        configpropsService.reportingSystemProperties(key)
                .ifPresent(tenantConfiguration::setReporting);
        configpropsService.aggregateReportingProperties(key)
                .ifPresent(tenantConfiguration::setAggregateReportingProperties);
        if (isSandbox) {
            tenantConfiguration.setParentTenantKey(parentTenantKey(key));
        } else {
            configpropsService.archiveProperties(key).ifPresent(tenantConfiguration::setArchiveProperties);
            tenantConfiguration.setDataSources(configpropsService.dataSourceElements(key));
        }
        return tenantConfiguration;
    }

    /**
     * @return the DataSource for the tenant specified by the key
     */
    public Map<String, DataSourceElementsTenant> getTenantDataSources(String key) {
        Map<String, DataSourceElementsTenant> defaultDataSources = new HashMap<>();

        // Get the ReadOnly Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements();
        if (tenantsReadOnlyDataSourceMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting ReadOnly DataSource", key);
            Optional<String> roPassword = rdwServiceConfigPropsAccessor.getActualReportingROPassword(key);
            tenantsReadOnlyDataSourceMap.get(key).setPassword(getEncryptedPassword(roPassword.orElse(null)));
            defaultDataSources.put("reporting_ro", tenantsReadOnlyDataSourceMap.get(key));
        }

        // Get the Writable Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsWritableDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements();
        if (tenantsWritableDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Writable DataSource");
            Optional<String> roPassword = rdwServiceConfigPropsAccessor.getActualReportingRWPassword(key);
            tenantsWritableDataSourceMap.get(key).setPassword(getEncryptedPassword(roPassword.orElse(null)));
            defaultDataSources.put("reporting_rw", tenantsWritableDataSourceMap.get(key));
        }

        // Get the Olap DataSources
        final Map<String, DataSourceElementsTenant> tenantsOlapDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements();
        if (tenantsOlapDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting OLAP DataSource");
            Optional<String> olapPassword = rdwServiceConfigPropsAccessor.getActualOlapROPassword(key);
            tenantsOlapDataSourceMap.get(key).setPassword(getEncryptedPassword(olapPassword.orElse(null)));
            defaultDataSources.put("olap_ro", tenantsOlapDataSourceMap.get(key));
        }

        // get Default warehouseDataSetProperties DataSources
        final Map<String, DataSourceElementsTenant> tenantsWarehouseDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements();
        if (tenantsWarehouseDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Warehouse DataSource");
            Optional<String> whPassword = rdwServiceConfigPropsAccessor.getActualWarehouseRWPassword(key);
            tenantsWarehouseDataSourceMap.get(key).setPassword(getEncryptedPassword(whPassword.orElse(null)));
            defaultDataSources.put("warehouse_rw", tenantsWarehouseDataSourceMap.get(key));
        }
        return defaultDataSources;
    }

    @VisibleForTesting
    String parentTenantKey(final String tenantKey) {
        final String sandboxPattern = "_S";
        if (tenantKey.contains(sandboxPattern)) {
            return tenantKey.substring(0, tenantKey.indexOf(sandboxPattern));
        } else {
            return null;
        }
    }

}
