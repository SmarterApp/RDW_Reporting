package org.opentestsystem.rdw.admin.multitenant.git;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.annotations.VisibleForTesting;
import org.apache.commons.io.FileUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.opentestsystem.rdw.admin.multitenant.model.ApplicationTenantConfigurationPersistence;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.introspector.Property;
import org.yaml.snakeyaml.nodes.CollectionNode;
import org.yaml.snakeyaml.nodes.MappingNode;
import org.yaml.snakeyaml.nodes.Node;
import org.yaml.snakeyaml.nodes.NodeTuple;
import org.yaml.snakeyaml.nodes.SequenceNode;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.representer.Representer;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

public class GitTenantConfigurationPersistenceService implements TenantConfigurationPersistenceService {

    private static final Logger logger = LoggerFactory.getLogger(GitTenantConfigurationPersistenceService.class);
    private static final String ConfigFileName = "application.yml";
    private static final String LocalizationName = "en.json";

    private final TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties;
    //private final UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider;

    public GitTenantConfigurationPersistenceService(TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties) {
        this.tenantConfigurationPersistenceProperties = tenantConfigurationPersistenceProperties;
    }

    @VisibleForTesting
    void forceLocalRepositoryToCleanState() {
        //TODO: right now, just wiping and cloning each time this is called
        // there may be a better approach:
        // https://stackoverflow.com/questions/13586502/how-to-check-if-a-git-clone-has-been-done-already-with-jgit
        //RepositoryCache.FileKey.isGitRepository(new File(tenantConfigurationPersistenceProperties.getLocalRepositoryUri() + "application.yml"), FS_DETECTED));
        final UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider =
                new UsernamePasswordCredentialsProvider(tenantConfigurationPersistenceProperties.getGitUsername(),
                        tenantConfigurationPersistenceProperties.getGitPassword());
        try {
            FileUtils.deleteDirectory(localRepository());
        } catch (IOException e) {
            throw new TenantConfigurationPersistenceException("Unable to delete directory", e);
        }
        //do clone
        try {
            Git.cloneRepository()
                    .setURI(tenantConfigurationPersistenceProperties.getRemoteRepositoryUri())
                    .setBare(false)
                    .setBranch("master")
                    .setDirectory(getWorkingDirectory())
                    .setCredentialsProvider(usernamePasswordCredentialsProvider)
                    .call();
        } catch (GitAPIException e) {
            throw new TenantConfigurationPersistenceException("Unable to clone repository", e);
        }
    }



    @VisibleForTesting
    File getWorkingDirectory() {
        try {
            FileUtils.forceMkdir(localRepository());
        } catch (IOException e) {
            throw new TenantConfigurationPersistenceException("Unable to create working directory.", e);
        }
        return localRepository();
    }

    @Override
    public synchronized void saveTenantConfiguration(TenantConfiguration tenantConfiguration) {
        //TODO: synchronized is the fastest way to ensure this is only called one-at-a-time
        // non-blocking channel based approach possibly preferable
        forceLocalRepositoryToCleanState();

        final Tenant tenant = tenantConfiguration.getTenant();
        final String tenantKey = tenantConfiguration.getTenant().getKey();

        final UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider =
                new UsernamePasswordCredentialsProvider(tenantConfigurationPersistenceProperties.getGitUsername(),
                        tenantConfigurationPersistenceProperties.getGitPassword());

        makeTenantDirectory(tenant);
        writeApplicationTenantConfiguration(tenantConfiguration);

        writeLocalization(tenantConfiguration.getLocalization(), tenant);

        try {
            Git git = Git.open(localRepository());

            String tenantApplicationFilepattern = "tenant-" + tenantKey + File.separator + ConfigFileName;
            logger.debug("git add {}", tenantApplicationFilepattern);
            git.add()
                    .addFilepattern(tenantApplicationFilepattern)
                    .call();

            String tenantLocalizationFilepattern = "tenant-" + tenantKey + File.separator + LocalizationName;
            logger.debug("git add {}", tenantLocalizationFilepattern);
            git.add()
                    .addFilepattern(tenantLocalizationFilepattern)
                    .call();

            git.commit()
                    .setAuthor(tenantConfigurationPersistenceProperties.getAuthor(),
                            tenantConfigurationPersistenceProperties.getAuthorEmail())
                    .setMessage("saving " + tenantKey + " configuration.")
                    .call();

            git.push()
                    .setCredentialsProvider(usernamePasswordCredentialsProvider)
                    .call();
        } catch (IOException | GitAPIException e) {
            throw new TenantConfigurationPersistenceException("Unable to save changes to the remote git repository", e);
        }
    }

    @VisibleForTesting
    void writeApplicationTenantConfiguration(TenantConfiguration tenantConfiguration) {

        Tenant tenant = tenantConfiguration.getTenant();
        ApplicationTenantConfigurationPersistence applicationTenantConfigurationPersistence =
                new ApplicationTenantConfigurationPersistence(tenantConfiguration);

        final Yaml yaml = getYaml();

        final String output = yaml.dump(applicationTenantConfigurationPersistence);
        logger.debug("output yml \n{}", output);

        final File tenantFile = new File(tenantDirectory(tenant).getPath() + File.separator + ConfigFileName);
        logger.debug("tenantFile {}", tenantFile.getPath());
        try {
            FileUtils.write(tenantFile, output, "UTF-8");
        } catch (IOException e) {
            throw new TenantConfigurationPersistenceException("Unable write application tenant configuration file", e);
        }
    }

    @VisibleForTesting
    void writeLocalization(String localization, Tenant tenant) {
        final File tenantDirectory = tenantDirectory(tenant);
        final File localizationFile = new File(tenantDirectory.getPath() + File.separator + LocalizationName);

        try {
            ObjectMapper mapper = new ObjectMapper();
            if (localization != null) {
                Object json = mapper.readValue(localization, Object.class);
                String output = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json);
                FileUtils.write(localizationFile, output, "UTF-8");
            }
        } catch (IOException e) {
            throw new TenantConfigurationPersistenceException("Unable write tenant localization file", e);
        }
    }

    private void makeTenantDirectory(Tenant tenant) {
        final File tenantDirectory = tenantDirectory(tenant);
        logger.debug("tenantDirectory {}", tenantDirectory.getPath());
        try {
            FileUtils.forceMkdir(tenantDirectory);
        } catch (IOException e) {
            throw new TenantConfigurationPersistenceException("Unable to create tenant directory", e);
        }
    }

    private File localRepository() {
        try {
            URL localRepositoryUrl = new URL(tenantConfigurationPersistenceProperties.getLocalRepositoryUri());
            return FileUtils.toFile(localRepositoryUrl);
        } catch (MalformedURLException e) {
            throw new TenantConfigurationPersistenceException("Configuration error for local directory", e);
        }
    }

    private File tenantDirectory(Tenant tenant) {
        return new File(localRepository().getPath() +
                File.separator +
                "tenant-" +
                tenant.getKey());
    }

    private Yaml getYaml() {
        DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        options.setIndent(2);
        options.setCanonical(false);

        SkipEmptyRepresenter representer = new SkipEmptyRepresenter();
        representer.addClassTag(ApplicationTenantConfigurationPersistence.class, Tag.MAP);
        representer.addClassTag(ReportingSystemPropertiesImpl.class, Tag.MAP);
        representer.addClassTag(DataSourceElementsTenant.class, Tag.MAP);
        representer.addClassTag(DataSourceUrlParts.class, Tag.MAP);
        representer.addClassTag(ArchivePropertiesTenant.class, Tag.MAP);
        representer.addClassTag(TenantProperties.class, Tag.MAP);
        representer.addClassTag(Tenant.class, Tag.MAP);
        return new Yaml(representer, options);
    }

    /**
     * Remove all the nodes that are null or objects / collections that are empty to match the spring configuration style.
     */
    private class SkipEmptyRepresenter extends Representer {
        //from https://bitbucket.org/asomov/snakeyaml/src/tip/src/test/java/org/yaml/snakeyaml/issues/issue60/SkipBeanTest.java

        @Override
        protected NodeTuple representJavaBeanProperty(Object javaBean, Property property,
                                                      Object propertyValue, Tag customTag) {
            NodeTuple tuple = super.representJavaBeanProperty(javaBean, property, propertyValue,
                    customTag);
            Node valueNode = tuple.getValueNode();
            if (Tag.NULL.equals(valueNode.getTag())) {
                return null;// skip 'null' values
            }
            if (valueNode instanceof CollectionNode) {
                if (Tag.SEQ.equals(valueNode.getTag())) {
                    SequenceNode seq = (SequenceNode) valueNode;
                    if (seq.getValue().isEmpty()) {
                        return null;// skip empty lists
                    }
                }
                if (Tag.MAP.equals(valueNode.getTag())) {
                    MappingNode seq = (MappingNode) valueNode;
                    if (seq.getValue().isEmpty()) {
                        return null;// skip empty maps
                    }
                }
            }
            return tuple;
        }
    }
}
