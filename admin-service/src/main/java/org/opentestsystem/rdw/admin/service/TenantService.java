package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.TenantType;

import java.util.List;
import java.util.Set;

/**
 * Implementation of this service is responsible for management actions of a Tenant
 * TODO Add Auth checks
 */
public interface TenantService {

    /**
     * Retrieve the default application information and a list of tenants and their configurations.
     * If there are no tenants configured, only the default information is returned.
     *
     * @return The Default information and a list of all existing tenants for this Instance
     */
    Set<TenantConfiguration> getAll(TenantType tenantType);

    /**
     * Create a new tenant on this instance
     *
     * @param TenantConfiguration the new tenant to create
     * @return the newly created tenant configuration
     */
    TenantConfiguration createTenant(TenantConfiguration TenantConfiguration);

    /**
     * remove a tenant - including all shutdown procedures
     * - todo tbd what this actually means
     *
     * @param tenantId the tenantId to remove
     */
    void deleteTenant(String tenantId);

    /**
     * Updates the existing tenant's configuration
     *
     * @param tenantConfiguration The updated tenant Configuration to save
     * @return the updated TenantConfiguration
     */
    TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration);

    /**
     * @return a list of available dataSets for a Sandbox creation, an empty list is valid
     */
    List<DataSet> getSandboxDataSets();

    /**
     * @return a TenantConfiguration containing the default properties of the current tenant
     */
    TenantConfiguration getTenantDefaults();

    /**
     * @return a TenantConfiguration containing the default properties of the current tenant
     */
    TenantConfiguration getParentTenantDefaults(String key);
}
