package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfigurations;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemorySandboxConfigurationRepository;
import org.opentestsystem.rdw.admin.service.SandboxService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;

/**
 * Default service to manage Sandbox Configurations
 */
@Service
public class DefaultSandboxService implements SandboxService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSandboxService.class);

    private InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository;

    @Autowired
    DefaultSandboxService(InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository) {
        this.inMemorySandboxConfigurationRepository = inMemorySandboxConfigurationRepository;
        // todo: remove mock - Populate with mock sandboxConfigurations at service start
        addMockData();
    }

    private void addMockData() {
        inMemorySandboxConfigurationRepository.create(SandboxConfigurationStubs.getCaInterimSandboxConfiguration());
        inMemorySandboxConfigurationRepository.create(SandboxConfigurationStubs.getMiInterimSandboxConfiguration());
    }
    @Override
    public ApplicationSandboxConfigurations getAll() {
        ApplicationSandboxConfigurations applicationSandboxConfigurations = new ApplicationSandboxConfigurations();
        applicationSandboxConfigurations.setSandboxes(inMemorySandboxConfigurationRepository.getAll());
        applicationSandboxConfigurations.setApplicationSandboxConfiguration(SandboxConfigurationStubs.getApplicationSandboxConfigurationDefault());
        logger.debug("Returning the current sandbox configurations with {} sandboxes configured.", applicationSandboxConfigurations.getSandboxes().size());

        return applicationSandboxConfigurations;
    }

    @Override
    public SandboxConfiguration create(final SandboxConfiguration sandboxConfiguration) {
        logger.debug("Creating sandbox with key {}", sandboxConfiguration.getSandbox().getKey());
        validateNewSandbox(sandboxConfiguration);
        return inMemorySandboxConfigurationRepository.create(sandboxConfiguration);
    }

    @Override
    public SandboxConfiguration update(final SandboxConfiguration sandboxConfiguration) {
        logger.debug("Updating with sandbox with key = {}", sandboxConfiguration.getSandbox().getKey());
        validateExistingSandbox(sandboxConfiguration);
        return inMemorySandboxConfigurationRepository.update(sandboxConfiguration);
    }

    @Override
    public void delete(final String key) {
        logger.debug("removing the sandbox key {}",key);
        inMemorySandboxConfigurationRepository.delete(key);
    }

    @Override
    public void resetDataSet(String key) {
        logger.debug("Resetting the DataSet for the Sandbox key {}",key);
        // todo actually reset the data - just calling a inMemory func for now
        inMemorySandboxConfigurationRepository.reset(key);
    }

    private void validateNewSandbox(final SandboxConfiguration sandboxConfiguration) {
        // TODO update with full if exists checks
        if (inMemorySandboxConfigurationRepository.exists(sandboxConfiguration.getSandbox().getKey())) {
            String errorMsg = "Sandbox: " + sandboxConfiguration.getSandbox().getName() +
                    " key: " + sandboxConfiguration.getSandbox().getKey() + " exists already. Please update existing sandbox, or create another sandbox key.";
            logger.error(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    private void validateExistingSandbox(final SandboxConfiguration sandboxConfiguration) {
        // TODO update with full if exists checks
        if (!inMemorySandboxConfigurationRepository.exists(sandboxConfiguration.getSandbox().getKey())) {
            String errorMsg = "Sandbox: " + sandboxConfiguration.getSandbox().getName() +
                    " key: " + sandboxConfiguration.getSandbox().getKey() + " not found.";
            logger.error(errorMsg);
            throw new NoSuchElementException(errorMsg);
        }
    }
}
