package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang.RandomStringUtils;
import org.opentestsystem.rdw.admin.client.ConfigServerClient;
import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfigurations;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationPackage;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.repository.impl.InMemorySandboxConfigurationRepository;
import org.opentestsystem.rdw.admin.service.SandboxService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;

/**
 * Default service to manage Sandbox Configurations
 */
@Service
public class DefaultSandboxService implements SandboxService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSandboxService.class);

    private final InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository;
    private final ReportingTenantIdResolver reportingTenantIdResolver;
    private final DefaultTenantConfigPropsService defaultTenantConfigPropsService;
    private final TenantProperties tenantProperties;
    private final SandboxDataSets sandboxDatasets;
    private final TenantAdministrationRequestHandler tenantAdministrationRequestHandler;
    private final TenantAdministrationStatusService tenantAdministrationStatusService;
    private final ConfigServerClient configServerClient;

    @Autowired
    DefaultSandboxService(InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository,
                          ReportingTenantIdResolver reportingTenantIdResolver,
                          DefaultTenantConfigPropsService defaultTenantConfigPropsService,
                          TenantProperties tenantProperties,
                          SandboxDataSets sandboxDatasets,
                          TenantAdministrationRequestHandler tenantAdministrationRequestHandler,
                          TenantAdministrationStatusService tenantAdministrationStatusService, ConfigServerClient configServerClient) {
        this.inMemorySandboxConfigurationRepository = inMemorySandboxConfigurationRepository;
        this.reportingTenantIdResolver = reportingTenantIdResolver;
        this.defaultTenantConfigPropsService = defaultTenantConfigPropsService;
        this.tenantProperties = tenantProperties;
        this.sandboxDatasets = sandboxDatasets;
        this.tenantAdministrationRequestHandler = tenantAdministrationRequestHandler;
        this.tenantAdministrationStatusService = tenantAdministrationStatusService;
        this.configServerClient = configServerClient;
    }

    @Override
    public ApplicationSandboxConfigurations getAll() {
        ApplicationSandboxConfigurations applicationSandboxConfigurations = new ApplicationSandboxConfigurations();
        applicationSandboxConfigurations.setSandboxes(inMemorySandboxConfigurationRepository.getAll());
        final SandboxConfigurationPackage sandboxConfigurationPackage = getCurrentDefaultSandboxPackage();
        applicationSandboxConfigurations.setSandboxConfigurationPackage(sandboxConfigurationPackage);
        logger.debug("Returning default tenantKey {} and the current sandbox configurations with {} sandboxes configured.",
                getCurrentTenantKey(), applicationSandboxConfigurations.getSandboxes().size());
        return applicationSandboxConfigurations;
    }

    @Override
    public SandboxConfiguration create(final SandboxConfiguration sandboxConfiguration) {
        String sandboxKey = generateKey(sandboxConfiguration.getSandbox().getTenantKey());
        sandboxConfiguration.getSandbox().setKey(sandboxKey);
        sandboxConfiguration.getSandbox().setId(sandboxKey);
        logger.debug("Creating sandbox with new key and id {}", sandboxKey);

        //TODO: remove in memory, use live data, check for unique
        validateNewSandbox(sandboxConfiguration);


        //TODO: need to set up a "base" sandbox datasource elements config that has lowered resources compared to tenants
        //TODO: these will need to be encrypted prior to saving to git, but decrypted during creation?
        String sandboxDbPassword = createRandomPassword();
        Map<String, DataSourceElementsTenant> generateDataSourceElementsMap =
                generateDataSourceElementsMap(sandboxKey,sandboxDbPassword);

        //Set S3 prefix

        /*
        Map<String, DataSourceElementsTenant> dataSources =
                new ImmutableMap.Builder<String, DataSourceElementsTenant>()
                        .put("olap_ro", olapRoDse)
                        .put("olap_rw", olapRwDse)
                        .put("reporting_ro", reportingRoSbx)
                        .put("reporting_rw", reportingRwSbx)
                        .put("warehouse_ro", warehouseRoSbx)
                        .put("warehouse_rw", warehouseRwSbx)
                        .put("migrate_rw", migrateRwSbx)
                        .build();

        sbxApplicationTenantConfiguration.setDataSources(dataSources);

        return sbxTenantConfiguration;
    }
         */


        // TODO actually all the sandbox creation
        return inMemorySandboxConfigurationRepository.create(sandboxConfiguration);
    }

    @Override
    public SandboxConfiguration update(final SandboxConfiguration sandboxConfiguration) {
        logger.debug("Updating with sandbox with key = {}", sandboxConfiguration.getSandbox().getKey());
        validateExistingSandbox(sandboxConfiguration);
        // TODO actually all the sandbox update
        return inMemorySandboxConfigurationRepository.update(sandboxConfiguration);
    }

    @Override
    public void delete(final String key) {
        logger.debug("removing the sandbox key {}", key);
        // TODO actually all the sandbox delete
        inMemorySandboxConfigurationRepository.delete(key);
    }

    @Override
    public void resetDataSet(String key) {
        logger.info("Resetting the DataSet for the Sandbox key {}", key);
        // todo actually reset the data - just calling a inMemory func for now
        inMemorySandboxConfigurationRepository.reset(key);
    }

    /**
     * @return SandboxConfigurationPackage containing the default sandbox properties, the datasets and the list of current sandboxes
     */
    private SandboxConfigurationPackage getCurrentDefaultSandboxPackage() {
        defaultTenantConfigPropsService.servicesPropertiesRefresh();
        final SandboxConfigurationPackage sandboxConfigurationPackage = new SandboxConfigurationPackage();
        ApplicationSandboxConfiguration applicationSandboxConfiguration = defaultTenantConfigPropsService.getDefaultApplicationSandboxConfiguration();

        // Add the preconfigured DatSets to default package
        sandboxConfigurationPackage.setDataSets(new HashSet<>(sandboxDatasets.getSandboxDatasets()));

        sandboxConfigurationPackage.setApplicationSandboxConfiguration(applicationSandboxConfiguration);
        final Optional<Tenant> tenant = tenantProperties.findTenantById(getCurrentTenantKey());
        if (tenant.isPresent()) {
            sandboxConfigurationPackage.setTenant(tenant.get());
        } else {
            logger.error("Cannot retrieve the current Tenant Info, only setting key & Id, and the rest with mock CA data");
            sandboxConfigurationPackage.setTenant(TenantConfigurationStubs.getTenantCA());
            sandboxConfigurationPackage.getTenant().setKey(getCurrentTenantKey());
            sandboxConfigurationPackage.getTenant().setId(getCurrentTenantKey());
        }

        return sandboxConfigurationPackage;
    }

    /**
     * @param sandboxConfiguration to validate if it's ok to create a new sandbox
     */
    private void validateNewSandbox(final SandboxConfiguration sandboxConfiguration) {
        // TODO update with full if exists checks
        if (inMemorySandboxConfigurationRepository.exists(sandboxConfiguration.getSandbox().getKey())) {
            String errorMsg = "Sandbox: " + sandboxConfiguration.getSandbox().getName() +
                    " key: " + sandboxConfiguration.getSandbox().getKey() + " exists already. Please update existing sandbox, or create another sandbox.";
            logger.error(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    /**
     * @return the current TenantKey
     */
    private String getCurrentTenantKey() {
        //TODO: not sure this will always work need to discuss with team
        if (reportingTenantIdResolver.getTenantId().isPresent()) {
            return reportingTenantIdResolver.getTenantId().get();
        }
        String errorMsg = "A Tenant must be configured to create a Sandbox.";
        logger.error(errorMsg);
        throw new IllegalArgumentException(errorMsg);
    }

    /**
     * @param sandboxConfiguration to validate if it's ok to update the sandbox
     */
    private void validateExistingSandbox(final SandboxConfiguration sandboxConfiguration) {
        // TODO update with full if exists checks
        if (!inMemorySandboxConfigurationRepository.exists(sandboxConfiguration.getSandbox().getKey())) {
            String errorMsg = "Sandbox: " + sandboxConfiguration.getSandbox().getName() +
                    " key: " + sandboxConfiguration.getSandbox().getKey() + " not found.";
            logger.error(errorMsg);
            throw new NoSuchElementException(errorMsg);
        }
    }

    /**
     * @return a tenant based key
     */
    @VisibleForTesting
    String generateKey(String parentTenantKey) {
        final int maxConfigured = tenantProperties.getTenants().values().stream()
                .filter(Tenant::isSandbox)
                .filter(tenant -> tenant.getKey().startsWith(parentTenantKey))
                .map(Tenant::getKey)
                .filter(key -> key.length() > 2)
                .map(key -> key.substring(key.length() - 3))
                .map(Integer::parseInt)
                .max(Integer::compare)
                .orElse(0);

        final int maxStatus = tenantAdministrationStatusService.allTenantKeys().stream()
                .filter(key -> key.contains(parentTenantKey + "_S"))
                .filter(key -> key.length() > 2)
                .map(key -> key.substring(key.length() - 3))
                .map(Integer::parseInt)
                .max(Integer::compare)
                .orElse(0);

        final int max = Integer.max(maxConfigured, maxStatus);

        return parentTenantKey + "_" + "S" + String.format("%03d", max + 1);
    }

    @VisibleForTesting
    Map<String, DataSourceElementsTenant> generateDataSourceElementsMap(String sandboxKey, String databasePassword) {
        String dbUsername = sandboxKey.replaceAll("_", "").toLowerCase();
        String dbPostfix = "_" + sandboxKey.toLowerCase();

        Map<String, DataSourceElementsTenant> dataSourcesElementsMap =
                new ImmutableMap.Builder<String, DataSourceElementsTenant>()
                        .put("olap_ro", createDataSourceElements(dbUsername, databasePassword, "reporting" + dbPostfix, null))
                        .put("olap_rw", createDataSourceElements(dbUsername, databasePassword, "reporting" + dbPostfix, null))
                        .put("reporting_ro", createDataSourceElements(dbUsername, databasePassword, null, "reporting" + dbPostfix))
                        .put("reporting_rw", createDataSourceElements(dbUsername, databasePassword, null, "reporting" + dbPostfix))
                        .put("warehouse_ro", createDataSourceElements(dbUsername, databasePassword, null, "warehouse" + dbPostfix))
                        .put("warehouse_rw", createDataSourceElements(dbUsername, databasePassword, null, "warehouse" + dbPostfix))
                        .put("migrate_rw", createDataSourceElements(dbUsername, databasePassword, null, "migrate_olap" + dbPostfix))
                        .build();

        return dataSourcesElementsMap;
    }

    private DataSourceElementsTenant createDataSourceElements(String username,
                                                              String password,
                                                              String schemaSearchPath,
                                                              String databaseName) {
        DataSourceElementsTenant dataSourceElementsTenant = new DataSourceElementsTenant();
        dataSourceElementsTenant.setUsername(username);
        dataSourceElementsTenant.setPassword(password);
        dataSourceElementsTenant.setSchemaSearchPath(schemaSearchPath);
        DataSourceUrlParts dataSourceUrlParts = new DataSourceUrlParts();
        dataSourceUrlParts.setDatabase(databaseName);
        dataSourceElementsTenant.setUrlParts(dataSourceUrlParts);
        return dataSourceElementsTenant;
    }

    private String createRandomPassword() {
        //Match the Redshift requirements
        final String letters = RandomStringUtils.random(1, true, false).toUpperCase() +
                RandomStringUtils.random(5, true, false).toLowerCase();
        final String numbers = RandomStringUtils.random(2, false, true);
        return letters + numbers;
    }

}
