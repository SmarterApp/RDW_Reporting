package org.opentestsystem.rdw.admin.multitenant.model;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.Map;
import java.util.Optional;

/**
 * Write specific model directly corresponds to config server tenant-*\/application.yml file.
 * Sample:
 *
 * <pre>
 * archive:
 *   tenants:
 *     CAX:
 *       pathPrefix: /CA
 *       uriRoot: s3://ca-archive
 * datasources:
 *   reporting_ro:
 *     tenants:
 *       CAX:
 *         urlParts:
 *           database: catestdb
 *           hosts: catesthost
 * reporting:
 *   tenants:
 *     CAX:
 *       reportLanguages:
 *       - en
 *       schoolYear: 2019
 * tenantProperties:
 *   tenants:
 *     CAX:
 *       id: CAX
 *       key: CAX
 *       name: California Test
 * </pre>
 */
public class ApplicationTenantConfigurationPersistence {

    //TODO: we will need to expand to accommodate other roots, this is the current set in ApplicationTenantConfiguration
    private Map<String, Map<String, Tenant>> tenantProperties;
    private Map<String, Map<String, ReportingSystemPropertiesImpl>> reporting;
    private Map<String, Map<String, Map<String, DataSourceElementsTenant>>> datasources;
    private Map<String, Map<String, ArchivePropertiesTenant>> archive;

    public ApplicationTenantConfigurationPersistence() {
    }

    public ApplicationTenantConfigurationPersistence(TenantConfiguration tenantConfiguration) {
        Tenant tenant = tenantConfiguration.getTenant();

        reporting = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(),
                        Optional.ofNullable(tenantConfiguration.getReporting())
                                .orElse(new ReportingSystemPropertiesImpl())));

        final ImmutableMap.Builder<String, Map<String, Map<String, DataSourceElementsTenant>>> datasourcesBuilder =
                ImmutableMap.builder();
        tenantConfiguration.getDataSources().forEach((datasourceName, dataSourceElements) ->
                datasourcesBuilder.put(datasourceName,
                        ImmutableMap.of("tenants", ImmutableMap.of(tenant.getKey(), dataSourceElements))));
        datasources = datasourcesBuilder.build();

        archive = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(), tenantConfiguration.getArchiveProperties()));

        tenantProperties = ImmutableMap.of("tenants",
                ImmutableMap.of(tenant.getKey(), tenant));
    }

    /**
     * To match this .yml format
     * <pre>
     *  reporting:
     *   tenants:
     *     CAX:
     *       reportLanguages:
     *       - en
     *       schoolYear: 2019
     * </pre>
     *
     * @return reporting
     */
    public Map<String, Map<String, ReportingSystemPropertiesImpl>> getReporting() {
        return reporting;
    }

    public void setReporting(Map<String, Map<String, ReportingSystemPropertiesImpl>> reporting) {
        this.reporting = reporting;
    }

    /**
     * To match this .yml format
     * <pre>
     * datasources:
     *   reporting_ro:
     *     tenants:
     *       CAX:
     *         urlParts:
     *           database: catestdb
     *           hosts: catesthost
     * </pre>
     *
     * @return datasources
     */
    public Map<String, Map<String, Map<String, DataSourceElementsTenant>>> getDatasources() {
        return datasources;
    }

    public void setDatasources(Map<String, Map<String, Map<String, DataSourceElementsTenant>>> datasources) {
        this.datasources = datasources;
    }

    /**
     * To match this .yml format
     * <pre>
     * archive:
     *   tenants:
     *     CAX:
     *       pathPrefix: /CA
     *       uriRoot: s3://ca-archive
     * </pre>
     *
     * @return archive
     */
    public Map<String, Map<String, ArchivePropertiesTenant>> getArchive() {
        return archive;
    }

    public void setArchive(Map<String, Map<String, ArchivePropertiesTenant>> archive) {
        this.archive = archive;
    }

    /**
     * To match this .yml format
     * <pre>
     * tenantProperties:
     *   tenants:
     *     CAX:
     *       id: CAX
     *       key: CAX
     *       name: California Test
     * </pre>
     *
     * @return tenantProperties
     */
    public Map<String, Map<String, Tenant>> getTenantProperties() {
        return tenantProperties;
    }

    public void setTenantProperties(Map<String, Map<String, Tenant>> tenantProperties) {
        this.tenantProperties = tenantProperties;
    }

    /**
     * Reverse operation of constructor converts instance to a TenantConfiguration
     *
     * @return
     */
    public TenantConfiguration toTenantConfiguration() {
        TenantConfiguration.Builder builder = TenantConfiguration.builder();

        if (tenantProperties != null && tenantProperties.containsKey("tenants")) {
            tenantProperties.get("tenants").values()
                    .forEach(builder::tenant);
        }

        if (reporting != null && reporting.containsKey("tenants")) {
            reporting.get("tenants").values()
                    .forEach(builder::reporting);
        }

        if (archive != null && archive.containsKey("tenants")) {
            archive.get("tenants").values()
                    .forEach(builder::archiveProperties);
        }

        final ImmutableMap.Builder<String, DataSourceElementsTenant> datasourcesBuilder = ImmutableMap.builder();
        if (datasources != null && !datasources.isEmpty()) {
            datasources.keySet().forEach(dataSourceName -> datasources.get(dataSourceName)
                    .get("tenants")
                    .values()
                    .forEach(dataSourceElementsTenant -> datasourcesBuilder
                            .put(dataSourceName, dataSourceElementsTenant)));
        }
        builder.dataSources(datasourcesBuilder.build());

        return builder.build();
    }

}
