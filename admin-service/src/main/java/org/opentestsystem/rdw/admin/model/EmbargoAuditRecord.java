package org.opentestsystem.rdw.admin.model;

import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;

import java.util.Date;
import java.util.Objects;

import static org.opentestsystem.rdw.admin.model.EmbargoReportType.Aggregate;
import static org.opentestsystem.rdw.admin.model.EmbargoReportType.Individual;

/**
 * This class encapsulates an embargo audit record by school year, district, and subject.
 */
public class EmbargoAuditRecord {
    private int schoolYear;
    private String district;
    private String subject;
    private EmbargoStatus individualStatus;
    private EmbargoStatus previousIndividualStatus;
    private EmbargoStatus aggregateStatus;
    private EmbargoStatus previousAggregateStatus;
    private String user;
    private Date updated;
    private EmbargoReportType reportType;

    public int getSchoolYear() {
        return schoolYear;
    }

    public String getDistrict() {
        return district;
    }

    public String getSubject() {
        return subject;
    }

    public EmbargoStatus getIndividualStatus() {
        return individualStatus;
    }

    public EmbargoStatus getPreviousIndividualStatus() {
        return previousIndividualStatus;
    }

    public EmbargoStatus getAggregateStatus() {
        return aggregateStatus;
    }

    public EmbargoStatus getPreviousAggregateStatus() {
        return previousAggregateStatus;
    }

    public String getUser() {
        return user;
    }

    public Date getUpdated() {
        return updated;
    }

    public EmbargoReportType getReportType() {
        return reportType;
    }

    public EmbargoStatus getStatus() {
        if (getReportType() == Individual) {
           return getIndividualStatus();
        }
        if (getReportType() == Aggregate) {
            return getAggregateStatus();
        }

        return null;
    }

    public EmbargoStatus getPreviousStatus() {
        if (getReportType() == Individual) {
            return getPreviousIndividualStatus();
        }
        if (getReportType() == Aggregate) {
            return getPreviousAggregateStatus();
        }

        return null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbargoAuditRecord that = (EmbargoAuditRecord) o;
        return schoolYear == that.schoolYear && Objects.equals(district, that.district) && Objects
            .equals(subject, that.subject) && Objects.equals(reportType, that.reportType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(schoolYear, district, subject, reportType);
    }

    /**
     * @return new builder with this instance's values
     */
    public Builder copy() {
        return builder().copy(this);
    }

    /**
     * @return new builder
     */
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private int schoolYear;
        private String district;
        private String subject;
        private EmbargoStatus individualStatus;
        private EmbargoStatus previousIndividualStatus;
        private EmbargoStatus aggregateStatus;
        private EmbargoStatus previousAggregateStatus;
        private String user;
        private Date updated;
        private EmbargoReportType reportType;

        public EmbargoAuditRecord build() {
            final EmbargoAuditRecord auditRecord = new EmbargoAuditRecord();

            auditRecord.schoolYear = schoolYear;
            auditRecord.district = district;
            auditRecord.subject = subject;
            auditRecord.individualStatus = individualStatus;
            auditRecord.previousIndividualStatus = previousIndividualStatus;
            auditRecord.aggregateStatus = aggregateStatus;
            auditRecord.previousAggregateStatus = previousAggregateStatus;
            auditRecord.user = user;
            auditRecord.updated = updated;
            auditRecord.reportType = reportType;

            return auditRecord;
        }

        public Builder copy(final EmbargoAuditRecord auditRecord) {
            schoolYear = auditRecord.schoolYear;
            district = auditRecord.district;
            subject = auditRecord.subject;
            individualStatus = auditRecord.individualStatus;
            previousIndividualStatus = auditRecord.previousIndividualStatus;
            aggregateStatus = auditRecord.aggregateStatus;
            previousAggregateStatus = auditRecord.previousAggregateStatus;
            user = auditRecord.user;
            updated = auditRecord.updated;
            reportType = auditRecord.reportType;

            return this;
        }

        public Builder district(final String district) {
            this.district = district;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder subject(final String subject) {
            this.subject = subject;
            return this;
        }

        public Builder individualStatus(final EmbargoStatus status) {
            this.individualStatus = status;
            return this;
        }

        public Builder previousIndividualStatus(final EmbargoStatus status) {
            this.previousIndividualStatus = status;
            return this;
        }

        public Builder aggregateStatus(final EmbargoStatus status) {
            this.aggregateStatus = status;
            return this;
        }

        public Builder previousAggregateStatus(final EmbargoStatus status) {
            this.previousAggregateStatus = status;
            return this;
        }

        public Builder user(final String user) {
            this.user = user;
            return this;
        }

        public Builder updated(final Date updated) {
            this.updated = updated;
            return this;
        }

        public Builder reportType(final EmbargoReportType reportType) {
            this.reportType = reportType;
            return this;
        }
    }
}
