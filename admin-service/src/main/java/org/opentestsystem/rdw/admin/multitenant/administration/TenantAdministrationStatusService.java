package org.opentestsystem.rdw.admin.multitenant.administration;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.multitenant.Tenant;

import java.util.Optional;

public interface TenantAdministrationStatusService {

    /**
     * Full copy current status.
     *
     * @return map of tenantKey to TenantAdministrationStatusContext
     */
    ImmutableMap<String, TenantAdministrationStatusContext> allTenantStatusAsMap();

    /**
     * Creates a new tenant status entry.
     *
     * @param tenantKey the tenant key
     * @param status    current status
     * @param tenant    the tenant being created
     */
    void putStatus(String tenantKey, TenantAdministrationStatus status, Tenant tenant);

    /**
     * Creates a new tenant status entry.
     *
     * @param tenantKey the tenant key
     * @param status    current status
     * @param tenant    the tenant being created
     */
    void putStatus(String tenantKey, TenantAdministrationStatus status, Tenant tenant, String message);

    /**
     * Update the status when starting a new major step in the creation process
     *
     * @param tenantKey the tenant key
     * @param status    the new status
     */
    void updateStatus(String tenantKey, TenantAdministrationStatus status);

    /**
     * Update the status when starting a new major step in the creation process
     *
     * @param tenantKey the tenant key
     * @param status    the new status
     * @param tenant    the tenant being updated
     * @param message   reason for the status
     */
    void updateStatus(String tenantKey, TenantAdministrationStatus status, Tenant tenant, String message, String stackTrace);

    /**
     * Update the status when starting a new major step in the creation process
     *
     * @param tenantKey the tenant key
     * @param status    the new status
     * @param message   reason for the status
     */
    void updateStatus(String tenantKey, TenantAdministrationStatus status, String message, String stackTrace);

    /**
     * Retrieve the current status (if any)
     *
     * @param tenantKey the tenant key
     * @return a pair with the current status and the {@link Tenant} being created
     */
    Optional<TenantAdministrationStatusContext> findStatus(String tenantKey);

    /**
     * Checks if an tenant with the given ID already exists.
     *
     * @param tenantId the tenant ID
     * @return the current status if any
     */
    Optional<TenantAdministrationStatusContext> findStatusById(String tenantId);

    /**
     * Remove the status.
     *
     * @param tenantKey the tenant key
     */
    void remove(String tenantKey);

}
