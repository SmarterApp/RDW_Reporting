package org.opentestsystem.rdw.admin.multitenant.administration;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang3.tuple.Pair;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;

import java.util.Optional;
import java.util.Set;

public interface TenantAdministrationStatusService {

    /**
     * @return copy of map of active tenants and their status
     */
    ImmutableMap<String, Pair<TenantAdministrationStatusContext, TenantConfiguration>> allTenantStatusAsMap();

    /**
     * Creates a new tenant status entry.
     *
     * @param tenantKey           the tenant key
     * @param status              current status
     * @param tenantConfiguration the tenant configuration being created
     */
    void putStatus(String tenantKey, TenantAdministrationStatus status, TenantConfiguration tenantConfiguration);

    /**
     * Creates a new tenant status entry.
     *
     * @param tenantKey           the tenant key
     * @param status              current status
     * @param tenantConfiguration the tenant configuration being created
     */
    void putStatus(String tenantKey, TenantAdministrationStatus status, TenantConfiguration tenantConfiguration, String message);

    /**
     * Update the status when starting a new major step in the creation process
     *
     * @param tenantKey the tenant key
     * @param status    the new status
     */
    void updateStatus(String tenantKey, TenantAdministrationStatus status);

    /**
     * Update the status when starting a new major step in the creation process
     *
     * @param tenantKey the tenant key
     * @param status    the new status
     */
    void updateStatus(String tenantKey, TenantAdministrationStatus status, String message);


    /**
     * Retrieve the current status (if any)
     *
     * @param tenantKey the tenant key
     * @return a pair with the current status and the {@link TenantConfiguration} being created
     */
    Optional<Pair<TenantAdministrationStatusContext, TenantConfiguration>> findStatus(String tenantKey);

    /**
     * Remove the status.
     *
     * @param tenantKey the tenant key
     */
    void remove(String tenantKey);

    /**
     * Get set of all tenant keys.
     *
     * @return all tenant keys with status
     */
    Set<String> allTenantKeys();

}
