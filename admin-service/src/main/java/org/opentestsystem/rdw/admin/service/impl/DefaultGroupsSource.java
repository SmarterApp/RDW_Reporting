package org.opentestsystem.rdw.admin.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

import org.opentestsystem.rdw.admin.service.GroupsSource;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.reporting.common.security.User;

import static org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor.wrap;

/**
 * Default implementation of GroupsSource.
 * <p>
 * It wraps the content with a common message header. It also adds the tenant
 * id to the message header (which the group processor requires).
 * </p>
 */
@Service
@EnableBinding(Source.class)
class DefaultGroupsSource implements GroupsSource {
    private static final Logger logger = LoggerFactory.getLogger(DefaultGroupsSource.class);

    private final Source source;

    @Autowired
    public DefaultGroupsSource(final Source source) {
        this.source = source;
    }

    @Override
    public void send(final byte[] body, final String contentType, final Long importId, final User user) {
        logger.info("sending GROUPS data for {}", importId);

        final RdwMessageHeaderAccessor accessor = wrap(null)
                .setReceivedNow()
                .setContent("GROUPS")
                .setContentType(contentType)
                .setImportId(importId)
                .setTenantId(user.getTenant().getId());

        source.output().send(MessageBuilder.createMessage(body, accessor.getMessageHeaders()));
    }
}
