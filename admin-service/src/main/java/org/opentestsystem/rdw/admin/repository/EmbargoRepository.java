package org.opentestsystem.rdw.admin.repository;

import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.EmbargoAuditRecord;
import org.opentestsystem.rdw.admin.model.EmbargoQuery;
import org.opentestsystem.rdw.admin.model.TestResultAvailability;

import java.util.Collection;
import java.util.Date;
import java.util.List;

/**
 * Repository for {@link Embargo}
 */
public interface EmbargoRepository {

    /**
     * Return embargo settings for the state and specified districts.
     * The returned values will have all fields set including exam counts.
     * Embargo objects will be returned for all organizations, even if embargo settings do not
     * exist for them. The embargo flags will be null for any missing settings.
     *
     * @param schoolYear  school year
     * @param districtIds district ids
     * @return all embargoes for the school year for the state and the given districts
     */
    Collection<Embargo> findAllBySchoolYear(int schoolYear, Collection<Long> districtIds);

    /**
     * @param schoolYear school year
     * @return single embargo with state embargo settings, but NO exam counts;
     * null if no state embargo settings found
     */
    Embargo findOneBySchoolYearAndState(int schoolYear);

    /**
     * @param schoolYear school year
     * @param districtId district id
     * @return single embargo with district embargo settings, but NO exam counts;
     * null if district not found or district embargo settings not found
     */
    Embargo findOneBySchoolYearAndDistrictId(int schoolYear, long districtId);

    /**
     * Find a page of test result availability records with the given filters, sort order
     * and page definitions.
     *
     * @param query query object with filters, sort order, page size and offset.
     * @return sorted list of one page of TestResultAvailability records.
     */
    List<TestResultAvailability> findTestResultsAvailability(EmbargoQuery query);

    /**
     * Find the total row count for the TestResultsAvailability
     * @param query query object with filters
     *
     * @return count of total rows available to the query
     */
    int countByQuery(EmbargoQuery query);

    /**
     * Create new embargo settings.<br/>
     *
     * @param embargo  embargo settings to store
     * @param username username to attribute the changes to
     */
    void create(final Embargo embargo, final String username);

    /**
     * Update embargo settings
     *
     * @param embargo  embargo settings to store
     * @param username username to attribute the changes to
     */
    void update(final Embargo embargo, final String username);
}
