package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestClientException;

import java.util.List;

/**
 * ART client providing access to organization data.<br/>
 */
@Component
public class ArtClient {

    private final ArtClientProperties properties;
    private final OAuth2RestOperations template;
    private final ObjectMapper mapper;

    @Autowired
    public ArtClient(final ArtClientProperties properties, final ObjectMapper mapper) {
        this.properties = properties;
        this.template = new OAuth2RestTemplate(properties.getOauth2());

        final ObjectMapper copy = mapper.copy();
        copy.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        this.mapper = copy;
    }

    public List<ArtState> getStates() {
        try {
            // Note: default page size is 10, and there is no value that means "get all of them".
            // The 250 limit covers the current needs as well as reasonable future-proofing.
            return mapper.readValue(
                    getPayload(toEndpoint("states?pageSize=250")),
                    new TypeReference<List<ArtState>>() {}
            );
        } catch (final Exception exception) {
            throw new RuntimeException("Failed to read states from ART", exception);
        }
    }

    private String toEndpoint(final String path) {
        final String basePath = properties.getUrl().endsWith("/")
                ? properties.getUrl()
                : properties.getUrl() + "/";
        return basePath + path;
    }

    /**
     * Helper to get payload from URL as byte[], throwing exceptions if return code
     * or content type is not valid.
     *
     * @param url URL of payload end-point
     * @return payload
     * @throws RestClientException if unexpected response
     */
    private byte[] getPayload(final String url) {
        final ResponseEntity<byte[]> result = template.getForEntity(url, byte[].class);
        if (!result.getStatusCode().is2xxSuccessful()) {
            throw new RestClientException("Unexpected response status from ART:" + result.getStatusCode());
        }
        if (!result.getHeaders().getContentType().isCompatibleWith(MediaType.APPLICATION_JSON)) {
            throw new RestClientException("Unexpected response type from ART:" + result.getHeaders().getContentType());
        }
        return result.getBody();
    }

}
