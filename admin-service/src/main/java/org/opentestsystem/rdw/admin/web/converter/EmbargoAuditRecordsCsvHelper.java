package org.opentestsystem.rdw.admin.web.converter;

import com.google.common.base.Charsets;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.lang3.ObjectUtils;
import org.opentestsystem.rdw.admin.model.EmbargoAuditRecord;
import org.opentestsystem.rdw.admin.multitenant.configprops.DefaultConfigpropsService;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.reporting.common.util.Headers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
import static org.opentestsystem.rdw.admin.model.EmbargoReportType.Aggregate;
import static org.opentestsystem.rdw.admin.model.EmbargoReportType.Individual;
import static org.opentestsystem.rdw.reporting.common.model.EmbargoStatus.Loading;
import static org.opentestsystem.rdw.reporting.common.util.MediaTypes.TEXT_CSV_UTF8;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;


/**
 * Helper class to create a CSV download file from list of {@link EmbargoAuditRecord}.
 */
public class EmbargoAuditRecordsCsvHelper {
    private static final Logger logger = LoggerFactory.getLogger(DefaultConfigpropsService.class);
    private static final String UtcDateTimeFormat = "yyyy-MM-dd HH:mm:ss 'UTC'";

    /**
     * Formats data as a CSV file and writes it to the servlet response.
     *
     * @param auditLogFileName the name for the audit log file
     * @param auditRecords iterator of retrieved audit records
     * @param response the HttpServletResponse from the controller.
     */
    public static void writeContent(
        final String auditLogFileName,
        final Iterator<EmbargoAuditRecord> auditRecords,
        final HttpServletResponse response)  {

        try {
            setHeadersResponse(auditLogFileName, response);
            final String [] headers = {
                "School Year", "District Name", "Subject", "Report Type", "User Name",
                "Date of Status Change", "New Status", "Previous Status"
            };
            final OutputStream outputStream = response.getOutputStream();
            final CSVFormat csvFormat = CSVFormat.DEFAULT.withHeader(headers);
            final CSVPrinter printer = csvFormat.print(new OutputStreamWriter(outputStream, Charsets.UTF_8));

            while (auditRecords.hasNext()) {
                final EmbargoAuditRecord baseRecord = auditRecords.next();

                // Write out Individual and Aggregate separately.
                final EmbargoAuditRecord individual = baseRecord.copy().reportType(Individual).build();
                if (statusChanged(individual)) {
                    printer.printRecord(toRowValues(individual));
                }
                final EmbargoAuditRecord aggregate = baseRecord.copy().reportType(Aggregate).build();
                if (statusChanged(aggregate)) {
                    printer.printRecord(toRowValues(aggregate));
                }
            }
            outputStream.flush();
        } catch (IOException e) {
            logger.warn("Problem exporting report CSV", e);
            throw new RuntimeException(e);
        }
    }

    // Lack of embargo status is equivalent to Loading.
    private static boolean statusChanged(final EmbargoAuditRecord record) {
        return defaultIfNull(record.getStatus(), Loading)  != defaultIfNull(record.getPreviousStatus(), Loading);
    }

    private static void setHeadersResponse(final String filename, final HttpServletResponse response) {
        final String contentDisposition = Headers.formatContentDispositionAttachment(filename, StandardCharsets.UTF_8);
        response.setContentType(TEXT_CSV_UTF8.toString());
        response.setHeader(CONTENT_DISPOSITION, contentDisposition);
    }

    private static List<String> toRowValues(final EmbargoAuditRecord auditRecord) {
        return Arrays.asList(
            toString(auditRecord.getSchoolYear()),
            auditRecord.getDistrict(),
            auditRecord.getSubject(),
            auditRecord.getReportType().name(),
            auditRecord.getUser(),
            toString(auditRecord.getUpdated()),
            toString(auditRecord.getStatus()),
            toString(auditRecord.getPreviousStatus())
        );
    }

    private static String toString(final EmbargoStatus status) {
        if (status == null) {
            return null;
        }

        return status.name();
    }

    private static String toString(final Integer number) {
        if (number == null) {
            return null;
        }

        return Integer.toString(number);
    }

    private static String toString(final Date date) {
        if (date == null) {
            return null;
        }

        return new SimpleDateFormat(UtcDateTimeFormat).format(date);
    }
}
