package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.annotation.JsonView;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineScriptJsonView;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestJsonView;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.script.PipelineDefinition;
import org.opentestsystem.rdw.script.ScriptError;

/**
 * Controller responsible for servicing crud operations on pipelines
 * and providing pipeline editor functionality
 */
@RestController
@RequestMapping("/pipelines")
class PipelineController {

    private final PipelineService service;

    PipelineController(final PipelineService service) {
        this.service = service;
    }

    @GetMapping
    public List<Pipeline> get() {
        return service.getPipelines();
    }

    @GetMapping("/{pipelineId}")
    public Pipeline get(@PathVariable final int pipelineId) {
        return service.getPipeline(pipelineId);
    }

    @PutMapping
    public Pipeline put(@RequestBody final Pipeline pipeline) {
        return service.updatePipeline(pipeline);
    }

    @GetMapping("/{id}/scripts")
    @JsonView(PipelineScriptJsonView.Minimal.class)
    public List<PipelineScript> getScripts(@PathVariable final int id) {
        return service.getScripts(id);
    }

    @GetMapping("/{id}/tests")
    @JsonView(PipelineTestJsonView.Minimal.class)
    public List<PipelineTest> getTests(@PathVariable final int id) {
        return service.getTests(id);
    }

    @PostMapping("/{id}/compile")
    public List<ScriptError> compile(@PathVariable final int id, @RequestBody final String scriptBody) {
        return service.compile(id, scriptBody);
    }

    @PostMapping("/{id}/test")
    public List<PipelineTestRun> test(
            @PathVariable final int id,
            @RequestParam(value = "testId", required = false) final List<Integer> testIds) {
        return service.test(id, testIds);
    }

    @PostMapping("/{id}/publish")
    public PipelineDefinition publish(@AuthenticationPrincipal final User user, @PathVariable final int id) {
        return service.publish(id, user.getUsername());
    }

}
