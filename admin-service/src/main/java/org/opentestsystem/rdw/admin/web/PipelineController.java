package org.opentestsystem.rdw.admin.web;

import org.opentestsystem.rdw.admin.model.CompilationError;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * Controller responsible for servicing crud operations on pipelines
 * and providing pipeline editor functionality
 */
@RestController
@RequestMapping("/pipelines")
class PipelineController {

    private final PipelineService service;

    PipelineController(final PipelineService service) {
        this.service = service;
    }

    @GetMapping
    public List<Pipeline> get() {
        return service.getPipelines();
    }

    @GetMapping("/{pipelineId}")
    public Pipeline get(@PathVariable final int pipelineId) {
        return service.getPipeline(pipelineId);
    }

    @GetMapping("/{pipelineId}/publishedScripts")
    public List<PipelineScript> getPublishedScripts(@PathVariable final int pipelineId) {
        return service.getPublishedScripts(pipelineId);
    }

    @GetMapping("/{pipelineId}/publishedScripts/{id}")
    public PipelineScript getPublishedScripts(
            @PathVariable final int pipelineId,
            @PathVariable final int id) {
        return service.getPublishedScript(pipelineId, id);
    }

    @GetMapping("/{id}/scripts")
    public List<PipelineScript> getScripts(@PathVariable final int id) {
        return service.getScripts(id);
    }

    @GetMapping("/{id}/tests")
    public List<PipelineTest> getTests(@PathVariable final int id) {
        return service.getTests(id);
    }

    @PostMapping("/compile")
    public List<CompilationError> compile(@RequestBody final String scriptBody) {
        return service.compile(scriptBody);
    }

    @PostMapping("/{id}/test")
    public List<PipelineTestRun> test(
            @PathVariable final int id,
            @RequestParam(value = "testId", required = false) final List<Integer> testIds) {
        return service.test(id, testIds);
    }

    @PostMapping("/{id}/publish")
    public String publishedScript(
            @PathVariable final int id,
            @RequestBody final int scriptId) {
        return service.publish(scriptId);
    }

    @PostMapping("/{id}/activate")
    public void activatedScript(
            @PathVariable final int id,
            @RequestBody final String version) {
        service.activate(id, version);
    }

}
