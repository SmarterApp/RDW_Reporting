package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.Map;
import java.util.Optional;

public interface RdwServiceConfigPropsAccessor {

    /**
     * @return the Default settings ReportingSystemSettings
     */
    Optional<ReportingSystemPropertiesImpl> getDefaultReportingSystemSettings();

    ////TODO: the way this api is used, can probably switch to org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties
    /**
     * @return a map with each tenant and its ReportingSystemSettings
     */
    Map<String, ReportingSystemPropertiesImpl> getTenantReportingSystemSettings();

    /**
     * @return the Default ReadOnly DataSourceElementsTenant
     */
    Optional<DataSourceElementsTenant> getDefaultReadOnlyDataSourceElements();

    /**
     * @return a map of each tenant and its ReadOnly DataSourceElementsTenant properties
     */
    Map<String, DataSourceElementsTenant> getTenantsReadOnlyDataSourceElements();

    /**
     * @return the Default settings for the Writable DataSourceElements
     */
    Optional<DataSourceElementsTenant> getDefaultWritableDataSourceElements();

    /**
     * @return a map of each tenant and its Writable DataSourceElementsTenant properties
     */
    Map<String, DataSourceElementsTenant> getTenantsWritableDataSourceElements();

    /**
     * @return the Default settings for the Warehouse DataSourceElements
     */
    Optional<DataSourceElementsTenant> getDefaultWarehouseDataSourceElements();

    /**
     * @return a map of each tenant and its Warehouse DataSourceElementsTenant properties
     */
    Map<String, DataSourceElementsTenant> getTenantsWarehouseDataSourceElements();

    /**
     * @return the Default settings for the Olap DataSourceElements
     */
    Optional<DataSourceElementsTenant> getDefaultOlapDataSourceElements();

    /**
     * @return a map of each tenant and its Olap DataSourceElementsTenant properties
     */
    Map<String, DataSourceElementsTenant> getTenantsOlapDataSourceElements();


    /**
     * @return the Default settings for the ArchiveProperties
     */
    Optional<ArchivePropertiesTenant> getDefaultArchivePropertiesTenant();

    /**
     * @return a map of each tenant and its Archive properties
     */
    Map<String, ArchivePropertiesTenant> getTenantsArchiveProperties();

    /**
     * @return the Default settings for the AggregateReportingProperties
     */
    Optional<AggregateReportingPropertiesTenant> getDefaultAggregateReportingProperties();

    /**
     * @return a map of each tenant and its AggregateReportingProperties
     */
    Map<String, AggregateReportingPropertiesTenant> getTenantsAggregateReportingProperties();

    /**
     * @param key of the tenant to lookup for the reporting_ro datasource
     * @return the unmasked, unencrypted password for the report_ro DataSource
     */
    Optional<String> getActualReportingROPassword(final String key);

    /**
     * @param key of the tenant to lookup for the reporting_rw datasource
     * @return the unmasked, unencrypted password for the report_rw DataSource
     */
    Optional<String> getActualReportingRWPassword(final String key);

    /**
     * @param key of the tenant to lookup for the warehouse_rw datasource
     * @return the unmasked, unencrypted password for the warehouse_rw DataSource
     */
    Optional<String> getActualWarehouseRWPassword(final String key);

    /**
     * @param key of the tenant to lookup for the olap_ro datasource
     * @return the unmasked, unencrypted password for the olap_ro DataSource
     */
    Optional<String> getActualOlapROPassword(final String key);

}
