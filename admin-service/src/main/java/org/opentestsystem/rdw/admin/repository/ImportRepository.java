package org.opentestsystem.rdw.admin.repository;

import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;

import java.util.List;

/**
 * This repository is responsible for working with imports.
 * It is geared to supporting GROUPS imports.
 */
public interface ImportRepository {

    /**
     * Create an Import record to associate with new data;
     * the record is created with status ACCEPTED
     *
     * @param content     import content
     * @param contentType import content type (max 250-character string);
     *                    although originally intended for media types this may be any text
     * @param digest      import digest (max 32-character string)
     * @param batch       import batch (max 250-character string)
     * @return The created import id
     */
    long create(ImportContent content, String contentType, String digest, String batch);

    /**
     * Update the given Import record to the PROCESSED status.
     *
     * @param importId The import id
     */
    void setProcessed(long importId);

    /**
     * Update the given Import record to the specified status with optional message
     *
     * @param importId import id
     * @param status   import status
     * @param message  optional message
     */
    void setStatus(long importId, ImportStatus status, String message);


    /**
     * Create an import record for student group batch.
     * It is created with content=GROUPS and status=ACCEPTED.
     *
     * @param contentType conten type, e.g. "text/csv"
     * @param digest digest
     * @param filename filename
     * @param creator creator (i.e. username)
     * @return id of the newly created import
     */
    long createGroupImport(String contentType, String digest, String filename, String creator);

    /**
     * Create an import record when deleting a group.
     * It is created with content=GROUPS, status=ACCEPTED, contentType="group delete"
     *
     * @param creator create (i.e. username)
     * @return id of the newly created import
     */
    long createGroupDelete(String creator);

    /**
     * @param id import id
     * @return GROUPS import record info as a StudentGroupBatch
     */
    StudentGroupBatch findGroupById(long id);

    /**
     * @param digest import digest
     * @return GROUPS import record info as a StudentGroupBatch
     */
    StudentGroupBatch findGroupByDigest(String digest);

    /**
     * @param creator import creator
     * @return GROUPS import records info as StudentGroupBatch's
     */
    List<StudentGroupBatch> findGroupByCreator(String creator);
}
