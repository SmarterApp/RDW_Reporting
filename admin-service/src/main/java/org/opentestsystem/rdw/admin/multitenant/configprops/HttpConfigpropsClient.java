package org.opentestsystem.rdw.admin.multitenant.configprops;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Lookup client for the tenant configuration to call rdw services' actuator endpoints
 * Return list of json strings, for Default properties and tenant specific properties
 */
public class HttpConfigpropsClient implements ConfigpropsClient {
    private static final Logger logger = LoggerFactory.getLogger(HttpConfigpropsClient.class);

    private final TenantConfigurationLookupProperties tenantConfigurationLookupProperties;
    private final RestTemplate configpropsRestTemplate;

    @Autowired
    public HttpConfigpropsClient(TenantConfigurationLookupProperties tenantConfigurationLookupProperties,
                                 @Qualifier("configpropsRestTemplate") RestTemplate configpropsRestTemplate) {
        this.tenantConfigurationLookupProperties = tenantConfigurationLookupProperties;
        this.configpropsRestTemplate = configpropsRestTemplate;
    }

    /**
     * @return a List of response strings for each tenant aware service's actuator /configProps endpoint
     */
    @Override
    @Deprecated
    public List<String> getRawConfigurations() {
        RestTemplate restTemplate = new RestTemplate();

        List<String> serviceUrls = tenantConfigurationLookupProperties
                .getServices()
                .values()
                .stream()
                .map(String::toString)
                .collect(Collectors.toList());

        List<String> responses = new ArrayList<>();

        serviceUrls.forEach(url -> {
            try {
                ResponseEntity<String> responseEntity = restTemplate.getForEntity(url + "/configprops", String.class);
                responses.add(responseEntity.getBody());
            } catch (Exception e) {
                logger.error("Cannot contact {} for configProps at this time.", url, e);
            }
        });
        return responses;
    }

    //TODO: mark cacheable
    @Override
    public Map<String, String> getRawServiceConfigurations() {
        return tenantConfigurationLookupProperties.getServices().entrySet().stream()
                .map(entry -> ImmutablePair.of(entry.getKey(), callConfigprops(entry.getValue())))
                .filter(entry -> entry.right.isPresent())
                .map(entry -> ImmutablePair.of(entry.left, entry.right.get()))
                .collect(Collectors.toMap(ImmutablePair::getLeft, ImmutablePair::getRight));
    }

    /**
     * @return a Map of services, and their ResponseEntities for each tenant Aware service
     */
    @Override
    @Deprecated
    public Map<String, ResponseEntity<String>> getRawConfigurationsByService() {
        RestTemplate restTemplate = new RestTemplate();

        Map<String, ResponseEntity<String>> responseEntityMap = new HashMap<>();
        tenantConfigurationLookupProperties.getServices()
                .forEach((k, v) -> {
                    ResponseEntity<String> responseEntity = restTemplate.getForEntity(v + "/configprops", String.class);
                    if (responseEntity.getStatusCode().is2xxSuccessful()) {
                        responseEntityMap.put(k, responseEntity);
                    }
                });
        return responseEntityMap;
    }

    private Optional<String> callConfigprops(String url) {
        try {
            ResponseEntity<String> responseEntity = configpropsRestTemplate.getForEntity(url + "/configprops", String.class);
            return Optional.ofNullable(responseEntity.getBody());
        } catch (Exception e) {
            logger.warn("Unable to fetch configprops for url: " + url, e);
            return Optional.empty();
        }
    }

}

