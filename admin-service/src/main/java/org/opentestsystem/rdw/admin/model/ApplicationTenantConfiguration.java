package org.opentestsystem.rdw.admin.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.LinkedHashMap;
import java.util.Map;


/**
 * used to manage a configuration properties for the tenant service API
 *
 * @deprecated use {@link TenantConfiguration} instead
 */
@JsonInclude(JsonInclude.Include.ALWAYS)
@Deprecated
public class ApplicationTenantConfiguration {

    //Audit Note: confirmed superset of org.opentestsystem.rdw.admin.model.ApplicationSandboxConfiguration
    // and org.opentestsystem.rdw.admin.model.SandboxConfigurationPackage
    // not including  private Set<DataSet> dataSets;

    /**
     * Parent tenant of a sandbox (Nullable) used during creation
     */
    //note moved from org.opentestsystem.rdw.admin.model.SandboxConfigurationPackage.tenant
    private Tenant parentTenant;

    /**
     * Reporting configuration.
     */
    private ReportingSystemPropertiesImpl reporting;

    /**
     * DataSource configuration.  Never directly configured for Sandboxes.
     */
    @JsonProperty("datasources")
    private Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();

    /**
     * Archive configuration.  Never directly configured for Sandboxes.
     */
    @JsonProperty("archive")
    private ArchivePropertiesTenant archiveProperties;

    /**
     * Archive configuration.
     */
    @JsonProperty("aggregate")
    private AggregateReportingPropertiesTenant aggregateReportingPropertiesTenant;

    public ApplicationTenantConfiguration() {
    }

    public ReportingSystemPropertiesImpl getReporting() {
        return reporting;
    }

    public void setReporting(final ReportingSystemPropertiesImpl reporting) {
        this.reporting = reporting;
    }

    public Map<String, DataSourceElementsTenant> getDataSources() {
        return dataSources;
    }

    public void setDataSources(final Map<String, DataSourceElementsTenant> dataSources) {
        this.dataSources = dataSources;
    }

    public ArchivePropertiesTenant getArchiveProperties() {
        return archiveProperties;
    }

    public void setArchiveProperties(final ArchivePropertiesTenant archiveProperties) {
        this.archiveProperties = archiveProperties;
    }

    public AggregateReportingPropertiesTenant getAggregateReportingPropertiesTenant() {
        return aggregateReportingPropertiesTenant;
    }

    public void setAggregateReportingPropertiesTenant(final AggregateReportingPropertiesTenant aggregateReportingPropertiesTenant) {
        this.aggregateReportingPropertiesTenant = aggregateReportingPropertiesTenant;
    }
}
