package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.model.CompilationError;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestResult;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.opentestsystem.rdw.admin.repository.PipelineScriptRepository;
import org.opentestsystem.rdw.admin.repository.PipelineTestRepository;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

/**
 * Default implementation of the pipeline service.
 */
@Service
class DefaultPipelineService implements PipelineService {

    private final PipelineRepository repository;
    private final PipelineScriptRepository scriptRepository;
    private final PipelineTestRepository testRepository;

    DefaultPipelineService(
            final PipelineRepository repository,
            final PipelineScriptRepository scriptRepository,
            final PipelineTestRepository testRepository) {
        this.repository = repository;
        this.scriptRepository = scriptRepository;
        this.testRepository = testRepository;
    }

    @Override
    public List<Pipeline> getPipelines() {
        return repository.findAll();
    }

    @Override
    public List<PipelineScript> getPublishedScripts(final int pipelineId) {
        // TODO
        return newArrayList();
    }

    @Override
    public List<PipelineScript> getScripts(final int pipelineId) {
        return scriptRepository.findAllByPipeline(pipelineId);
    }

    @Override
    public List<PipelineTest> getTests(final int pipelineId) {
        return testRepository.findAllByPipeline(pipelineId);
    }

    @Override
    public List<CompilationError> compile(final String scriptBody) {
        // TODO
        return scriptBody.contains("error")
                ? of(
                CompilationError.builder()
                        .row(1)
                        .column(1)
                        .message("Failed to compile this line")
                        .build()
        )
                : of();
    }

    @Override
    public List<PipelineTestRun> test(final int pipelineId) {
        return test(pipelineId, null);
    }

    @Override
    public List<PipelineTestRun> test(final int pipelineId, final Collection<Integer> testIds) {
        // TODO
        return testRepository.findAllByPipeline(pipelineId).stream()
                .filter(test ->
                        testIds == null || testIds.contains(test.getId())
                )
                .map(test ->
                        toTestRun(test, false)
                )
                .collect(toList());
    }

    @Override
    public String publish(final int scriptId) {
        // TODO
        return "todo";
    }

    @Override
    public void activate(final int pipelineId, String version) {
        // TODO
    }

    // TODO delete - this is for stubbing
    private PipelineTestRun toTestRun(final PipelineTest test, final boolean passed) {
        return PipelineTestRun.builder()
                .test(test)
                .scriptException(null)
                .result(
                        PipelineTestResult.builder()
                                .passed(passed)
                                .output(passed ? test.getOutput() : test.getOutput().substring(1000))
                                .build()
                )
                .schemaExceptions(newArrayList())
                .build();
    }

}
