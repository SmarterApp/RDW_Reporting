package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.EmbargoAuditRecord;
import org.opentestsystem.rdw.admin.model.EmbargoQuery;
import org.opentestsystem.rdw.admin.model.EmbargoUpdate;
import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.EmbargoOptions;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import java.util.List;

/**
 * Service to manipulate embargo settings.
 */
@PreAuthorize("hasAuthority('PERM_TEST_DATA_LOADING_WRITE') " +
    "|| hasAuthority('PERM_TEST_DATA_REVIEWING_WRITE') ")
public interface EmbargoService {
    /**
     * Returns Test Results that a user has permission to administer. The test results are categorized
     * by school year, district, subject, and report type, and show current embargo status (Loading,
     * Reviewing, or Released) and count of current exams fitting the category.
     *
     * @param query query parameters for the search
     * @param user the user
     * @return list of {@link Embargo} sorted according to the query request
     */
    List<Embargo> findEmbargoes(EmbargoQuery query, User user);

    /**
     * Saves changes to the embargo status for the given criteria.
     * @param user the user
     * @param update update parameters that can limit the scope of the change
     */
    void saveStatusChanges(User user, EmbargoUpdate update);

    /**
     * Returns a count of the total Test Results based on the filters in the query.
     * @param query query parameters for the count. Any offset, page size, and sort will be ignored.
     * @param user the user
     * @return count of the total test results based on permissions and filters.
     */
    int countEmbargoes(EmbargoQuery query, User user);

    List<Organization> getDistrictFiltersByName(User user, String name);

    /**
     * Returns date and time order list of updates to the embargo statuses.
     *
     * @param user the user
     * @return list of {@link EmbargoAuditRecord} sorted by updated field
     */
    List<EmbargoAuditRecord> findAuditRecords(User user);

    /**
     * @return the file name to user for the audit log file download.
     */
    String getAuditFileName();

    /**
     * Gets options based on user permissions.
     *
     * @param user the user
     * @return TestResultsAvailabilityOptions structure
     */
    EmbargoOptions getFilterOptions(User user);
}
