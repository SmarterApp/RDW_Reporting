package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.TestResultAvailability;
import org.opentestsystem.rdw.admin.model.TestResultAvailabilityOptions;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.security.access.prepost.PreAuthorize;

import java.util.Collection;

/**
 * Service to manipulate embargo settings.
 */
@PreAuthorize("hasAuthority('PERM_EMBARGO_WRITE') " +
    "|| hasAuthority('PERM_TEST_DATA_LOADING_WRITE') " +
    "|| hasAuthority('PERM_TEST_DATA_REVIEWING_WRITE') ")
public interface EmbargoService {

    /**
     * Return embargos that a user has permission to administrate (plus State embargo settings).
     * If a user has any embargo admin permissions the collection will contain the embargo settings
     * for the state, with a flag indicating whether the user may edit the state settings.
     *
     * @param user the user
     * @return collection of {@link Embargo}s
     */
    Collection<Embargo> findAll(User user);

    /**
     * Save an {@link Embargo}.<br/>
     * This will save changes to the embargo flags for an organization for the school year.
     * The organization type and id, school year must be specified. One or both of the embargo
     * flags should be specified. If an embargo flag is NULL, it will not be updated. No other
     * values from the {@link Embargo} are used.
     *
     * @param user the user
     * @param embargo embargo to save
     */
    void save(User user, Embargo embargo);

    /**
     * Returns Test Results that a user has permission to administer. The test results are categorized
     * by school year, district, subject, and report type, and show current embargo status (Loading,
     * Reviewing, or Released) and count of current exams fitting the category.
     *
     * @param user the user
     * @return collection of {@link TestResultAvailability}
     */
    Collection<TestResultAvailability> findTestResults(User user);

    /**
     * Gets options based on user permissions.
     *
     * @param user the user
     * @return TestResultsAvailabilityOptions structure
     */
    TestResultAvailabilityOptions getFilterOptions(User user);
}
