package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.repository.PipelineTestRepository;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.opentestsystem.rdw.admin.service.PipelineTestService;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;
import java.util.Optional;

@Service
class DefaultPipelineTestService implements PipelineTestService {

    private final PipelineTestRepository repository;
    private final PipelineService pipelineService;

    DefaultPipelineTestService(final PipelineTestRepository repository,
                               final PipelineService pipelineService) {
        this.repository = repository;
        this.pipelineService = pipelineService;
    }

    @Override
    public PipelineTest get(final int id) {
        return Optional.ofNullable(repository.findById(id))
                .orElseThrow(() -> new NoSuchElementException(String.format(
                        "Pipeline test with ID \"%s\" does not exist",
                        id
                )));
    }

    @Override
    public PipelineTest create(final String username, final PipelineTest test) {
        final String normalizedOutput = pipelineService.getNormalizedOutput(test.getOutput(), test.getPipelineId());
        return repository.create(
                test.copy()
                        .output(normalizedOutput)
                        .updatedBy(username)
                        .build()
        );
    }

    @Override
    public PipelineTest update(final String username, final PipelineTest test) {
        final String normalizedOutput = pipelineService.getNormalizedOutput(test.getOutput(), test.getPipelineId());
        return repository.update(
                test.copy()
                        .output(normalizedOutput)
                        .updatedBy(username)
                        .build()
        );
    }

    @Override
    public void delete(final int id) {
        repository.deleteById(id);
    }

}
