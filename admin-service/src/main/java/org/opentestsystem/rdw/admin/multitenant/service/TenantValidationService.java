package org.opentestsystem.rdw.admin.multitenant.service;

import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;

public interface TenantValidationService {

    /**
     * Validation checks prior to creating a new tenant
     *
     * @param tenantConfiguration tenant configuration to create
     */
    void tenantCreationValidation(TenantConfiguration tenantConfiguration);

    /**
     * Validation checks prior to creating a new sandbox
     *
     * @param tenantConfiguration sandbox configuration to create
     */
    void sandboxCreationValidation(TenantConfiguration tenantConfiguration);

    /**
     * Validation checks prior to update an existing tenant
     *
     * @param tenantConfiguration tenant configuration to update
     */
    void tenantUpdateValidation(TenantConfiguration tenantConfiguration);

    /**
     * Validation checks prior to update an existing sandbox
     *
     * @param tenantConfiguration tenant configuration to update
     */
    void sandboxUpdateValidation(TenantConfiguration tenantConfiguration);

    //TODO: this should probably not be public
//
//    // Move this validation related logic below here to the validation service
//
//    /**
//     * @param prefix to search for
//     * @return true if the given prefix is found the existing tenants
//     */
//    //TODO: move this to out of here, it is too  high level
//    boolean archivePrefixExists(String prefix);
//
//    /**
//     * @param dataSource         the dataSource to search through, i.e. "reporting_ro"
//     * @param dataSourceDatabase the database to search for in existing DBs and Auruoa
//     * @return true if the database was found in the existing tenants dataSource
//     */
//    //TODO: move this to out of here, it is too  high level
//    boolean dataSourceExists(String dataSource, String dataSourceDatabase);
//
//    /**
//     * @param dataSourceDatabase same database name as default
//     * @param userName           different username than the default (or any other olap dataSource or in Redshift)
//     * @return true if the olap DataSource cannot be created with these settings, false means ok to create
//     */
//    //TODO: move this to out of here, it is too  high level
//    boolean dataSourceOlapExists(String dataSourceDatabase, String userName);
//
//    /**
//     * TODO: get rid of this, it looks like it is some sort of cache?
//     */
//    @Deprecated
//    void servicesPropertiesRefresh();
}
