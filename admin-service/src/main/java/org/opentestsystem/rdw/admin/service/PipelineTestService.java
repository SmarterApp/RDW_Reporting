package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.opentestsystem.rdw.admin.model.PipelineTestValidation;

import java.util.List;

/**
 * Service responsible for managing pipeline script tests
 */
public interface PipelineTestService {

    /**
     * @param pipelineId The pipeline entity ID
     * @return All tests for the given pipeline
     */
    List<PipelineTest> get(int pipelineId);

    /**
     * @param pipelineId The pipeline entity ID
     * @param id The test entity ID
     * @return The identified test for the pipeline
     * @throws java.util.NoSuchElementException when there is no test for the given parameters
     */
    PipelineTest get(int pipelineId, int id);

    /**
     * Creates a pipeline test
     *
     * @param test The test to create
     * @return The created test
     */
    PipelineTest create(PipelineTest test);

    /**
     * Updates a pipeline test
     *
     * @param test The test to update
     * @return The updated test
     * @throws java.util.NoSuchElementException when there is no test for the given parameters
     */
    PipelineTest update(PipelineTest test);

    /**
     * Deletes a pipeline test
     *
     * @param id The test ID
     * @throws java.util.NoSuchElementException when there is no test for the given parameters
     */
    void delete(int id);

    /**
     * Runs all tests of a given pipeline on the given pipeline
     *
     * @param pipelineId The pipeline entity ID
     * @return All test and test result pairs
     */
    List<PipelineTestRun> test(int pipelineId);

    /**
     * Runs the test for the given id on the given pipeline
     *
     * @param pipelineId The pipeline entity ID
     * @param id The test entity ID
     * @return All test and test result pairs
     * @throws java.util.NoSuchElementException when there is no test for the given parameters
     */
    PipelineTestRun test(int pipelineId, int id);

    /**
     * Runs validation on all tests for the given pipeline
     *
     * @param pipelineId The pipeline entity ID
     * @return All test and test result pairs
     */
    List<PipelineTestValidation> validate(int pipelineId);

    /**
     * Runs validation for the given test on the given pipeline
     *
     * @param pipelineId The pipeline entity ID
     * @param id The test entity ID
     * @return All test and test result pairs
     * @throws java.util.NoSuchElementException when there is no test for the given parameters
     */
    PipelineTestValidation validate(int pipelineId, int id);

}
