package org.opentestsystem.rdw.admin.multitenant.configserver;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.Optional;

/**
 * Client to retrieve the config server's uri to call the encrypt,decrypt, monitor (refresh) endpoints and to retrieve i18n localization files
 * And call a service to retrieve the datasource's unmasked password
 */
public class DefaultConfigServerClient implements ConfigServerClient {
    private static final Logger logger = LoggerFactory.getLogger(DefaultConfigServerClient.class);

    private final String configServerUri;
    private final RestTemplate restTemplate = new RestTemplate();

    @Autowired
    public DefaultConfigServerClient(@Value("${spring.cloud.config.uri}") final String configServerUri) {
        this.configServerUri = configServerUri;
    }

    @Override
    public void postMonitor() {
        final String configServerUriEndpoint = getConfigServerUriEndpoint("/monitor");
        try {
            final HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            final HttpEntity<String> request = new HttpEntity<>("path=*", headers);
            final ResponseEntity<String> responseEntity = restTemplate.postForEntity(configServerUriEndpoint, request, String.class);
            logger.debug("Successfully called {} returned {}.", configServerUriEndpoint, responseEntity.getStatusCode());
        } catch (final Exception e) {
            final String errorMsg = String.format("Cannot contact %s at this time, failed to refresh properties.", configServerUriEndpoint);
            throw new IllegalArgumentException(errorMsg, e);
        }
    }

    @Override
    public String getActualServicePassword(final String service) {
        final String configServerUriEndpoint = getServiceEndpoint(service);
        try {
            final ResponseEntity<String> responseEntity = restTemplate.getForEntity(configServerUriEndpoint, String.class);
            logger.debug("Successfully called {} returned {}.", configServerUriEndpoint, responseEntity.getStatusCode());
            return responseEntity.getBody();
        } catch (final Exception e) {
            final String errorMsg = String.format("Cannot contact %s at this time.", configServerUriEndpoint);
            throw new IllegalArgumentException(errorMsg, e);
        }
    }

    @Override
    public String getActualReportingROPasswordProps() {
        return getActualServicePassword(RDWServices.RDW_REPORTING_REPORT_PROCESSOR.getName());
    }

    @Override
    public String getActualOlapROPasswordProps() {
        return getActualServicePassword(RDWServices.RDW_REPORTING_REPORT_AGGREGATE.getName());
    }

    @Override
    public String getActualWarehouseRWPasswordProps() {
        return getActualServicePassword(RDWServices.RDW_REPORTING_SERVICE.getName());
    }

    @Override
    public String getActualReportingRWPasswordProps() {
        return getActualServicePassword(RDWServices.RDW_REPORTING_SERVICE.getName());
    }

    @Override
    public String encryptPassword(final String password) {
        return configPassword(getConfigServerUriEndpoint("/encrypt"), password);
    }

    @Override
    public String decryptPassword(final String password) {
        return configPassword(getConfigServerUriEndpoint("/decrypt"), password);
    }

    /**
     * @return httpHeaders for Text plain contentType
     */
    private HttpHeaders getHeaders() {
        final HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.TEXT_PLAIN);
        return headers;
    }

    /**
     * @param configServerUriEndpoint the encrypt or decrypt endpoint to call
     * @param password                the password to encrypt or decrypt
     * @return the encrypted or decrypted password
     */
    private String configPassword(final String configServerUriEndpoint, final String password) {
        try {
            final HttpHeaders headers = getHeaders();
            final HttpEntity<String> request = new HttpEntity<>(password, headers);
            final ResponseEntity<String> responseEntity = restTemplate.postForEntity(configServerUriEndpoint, request, String.class);
            logger.debug("Successfully called {} returned {}.", configServerUriEndpoint, responseEntity.getStatusCode());
            return responseEntity.getBody();
        } catch (final Exception e) {
            final String errorMsg = String.format("Cannot contact %s at this time.", configServerUriEndpoint);
            throw new IllegalArgumentException(errorMsg, e);
        }
    }

    @Override
    public Optional<String> getLocalization(final String path, final String languageCode) {
        // expect tenant location endpoint will look like the following:binary-{configServerUri}/*/*/master/i18n/tenant-CA/en.json
        // remove unneeded prefix - can use path as is
        final String updatedPath = StringUtils.removeStart(path, "binary-");

        if (path != null && !path.isEmpty() && languageCode != null && !languageCode.isEmpty()) {
            try {
                final String templateForObject = restTemplate.getForObject(getLocalizationFileEndpoint(updatedPath, languageCode), String.class);
                logger.debug("Successfully called {} returned {}.", getLocalizationFileEndpoint(updatedPath, languageCode), templateForObject);
                return Optional.of(templateForObject);
            } catch (final Exception e) {
                logger.error("Cannot contact {} at this time, failed to retrieve localization information.", getLocalizationFileEndpoint(updatedPath, languageCode), e);
                return Optional.empty();
            }
        }
        logger.debug("No path exists for the tenant specific i18n file ({}.json), using defaults.", languageCode);
        return Optional.empty();
    }

    /**
     * @param endpoint to query
     * @return the configServer's uri with the endpoint
     */
    private String getConfigServerUriEndpoint(final String endpoint) {
        return String.format("%s/%s", configServerUri, endpoint);
    }

    /**
     * @param serviceName to query
     * @return endpoint for service name
     */
    private String getServiceEndpoint(final String serviceName) {
        return getConfigServerUriEndpoint(String.format("%s/*", serviceName));
    }

    /**
     * @param path         of the i18n file, tenant and sandbox paths are expected to be set
     * @param languageCode is expected to be the name of the i18n file {languageCode}.json (with a json extension)
     * @return the endpoint to query to retrieve the location data
     */
    private String getLocalizationFileEndpoint(final String path, final String languageCode) {
        return String.format("%s%s.json", path, languageCode);
    }
}
