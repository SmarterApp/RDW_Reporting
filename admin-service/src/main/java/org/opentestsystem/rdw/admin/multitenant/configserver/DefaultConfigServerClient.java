package org.opentestsystem.rdw.admin.multitenant.configserver;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 * Client to retrieve the config server's uri to call the encrypt,decrypt, monitor (refresh) endpoints
 * And call a service to retrieve the datasource's unmasked password
 */
public class DefaultConfigServerClient implements ConfigServerClient {
    private static final Logger logger = LoggerFactory.getLogger(DefaultConfigServerClient.class);

    private String configServerUri;
    private RestTemplate restTemplate = new RestTemplate();

    @Autowired
    public DefaultConfigServerClient(@Value("${spring.cloud.config.uri}") final String configServerUri) {
        this.configServerUri = configServerUri;
    }

    @Override
    public void postMonitor() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            HttpEntity<String> request = new HttpEntity<>("path=*", headers);
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(configServerUri + "/monitor", request, String.class);
            logger.debug("Successfully called {}/monitor returned {}.", configServerUri, responseEntity.getStatusCode());
        } catch (Exception e) {
            String errorMsg = String.format("Cannot contact %s/monitor at this time.", configServerUri);
            logger.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    @Override
    public String getActualServicePassword(final String service) {
        try {
            ResponseEntity<String> responseEntity = restTemplate.getForEntity(configServerUri + "/" + service + "/*", String.class);
            logger.debug("Successfully called {}/{}/* returned {}.", configServerUri, service, responseEntity.getStatusCode());
            return responseEntity.getBody();
        } catch (Exception e) {
            String errorMsg = String.format("Cannot contact %s/%s/* at this time.", configServerUri, service);
            logger.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    @Override
    public String getActualReportingROPasswordProps() throws IllegalArgumentException {
        return getActualServicePassword(RDWServices.RDW_REPORTING_REPORT_PROCESSOR.getName());
    }

    @Override
    public String getActualOlapROPasswordProps() throws IllegalArgumentException {
        return getActualServicePassword(RDWServices.RDW_REPORTING_REPORT_AGGREGATE.getName());
    }

    @Override
    public String getActualWarehouseRWPasswordProps() throws IllegalArgumentException {
        return getActualServicePassword(RDWServices.RDW_REPORTING_SERVICE.getName());
    }

    @Override
    public String getActualReportingRWPasswordProps() throws IllegalArgumentException {
        return getActualServicePassword(RDWServices.RDW_REPORTING_SERVICE.getName());
    }

    @Override
    public String encryptPassword(final String password) {
        try {
            HttpHeaders headers = getHeaders();
            HttpEntity<String> request = new HttpEntity<>(password, headers);
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(configServerUri + "/encrypt", request, String.class);
            logger.debug("Successfully called {}/encrypt returned {}.", configServerUri, responseEntity.getStatusCode());
            return responseEntity.getBody();
        } catch (Exception e) {
            String errorMsg = String.format("Cannot contact %s/encrypt at this time.", configServerUri);
            logger.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    /**
     * @return httpHeaders for Text plain contentType
     */
    private HttpHeaders getHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.TEXT_PLAIN);
        return headers;
    }

    @Override
    public String decryptPassword(final String password) throws IllegalArgumentException {
        try {
            HttpHeaders headers = getHeaders();
            HttpEntity<String> request = new HttpEntity<>(password, headers);
            ResponseEntity<String> responseEntity = restTemplate.postForEntity(configServerUri + "/decrypt", request, String.class);
            logger.debug("Successfully called {}/decrypt returned {}.", configServerUri, responseEntity.getStatusCode());
            return responseEntity.getBody();
        } catch (Exception e) {
            String errorMsg = String.format("Cannot contact %s/decrypt at this time.", configServerUri);
            logger.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }
    }
}
