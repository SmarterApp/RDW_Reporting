package org.opentestsystem.rdw.admin.multitenant.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonRawValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import com.google.common.base.Objects;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.web.RawJsonDeserializer;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This contains tenant specific configuration, tenant, properties and localization for a tenant.
 * These generally override the default
 */
public class TenantConfiguration {

    //Audit Note: confirmed superset of org.opentestsystem.rdw.admin.model.SandboxConfiguration

    /***
     * The configured tenant
     */
    private Tenant tenant;

    /***
     * The parent tenant key for sandboxes
     */
    private String parentTenantKey;

    /**
     * Localization json literal
     */
    @JsonDeserialize(using = RawJsonDeserializer.class)
    @JsonRawValue
    private String localization;

    /**
     * Status of the tenant creation
     */
    private TenantAdministrationStatusContext administrationStatus;

    /**
     * Reporting configuration.
     */
    private ReportingSystemPropertiesImpl reporting;

    /**
     * DataSource configuration.  Never directly configured for Sandboxes.
     */
    @JsonProperty("datasources")
    private Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();

    /**
     * Archive configuration.  Never directly configured for Sandboxes.
     */
    @JsonProperty("archive")
    private ArchivePropertiesTenant archiveProperties;

    /**
     * Archive configuration.
     */
    @JsonProperty("aggregate")
    private AggregateReportingPropertiesTenant aggregateReportingProperties;

    public TenantConfiguration() { }

    public Tenant getTenant() {
        return tenant;
    }

    public void setTenant(Tenant  tenant) {
        this.tenant = tenant;
    }

    public String getParentTenantKey() {
        return parentTenantKey;
    }

    public void setParentTenantKey(String parentTenantKey) {
        this.parentTenantKey = parentTenantKey;
    }

    public String getLocalization() {
        return localization;
    }

    public void setLocalization(String localization) {
        this.localization = localization;
    }

    public TenantAdministrationStatusContext getAdministrationStatus() {
        return administrationStatus;
    }

    public void setAdministrationStatus(TenantAdministrationStatusContext administrationStatus) {
        this.administrationStatus = administrationStatus;
    }

    public ReportingSystemPropertiesImpl getReporting() {
        return reporting;
    }

    public void setReporting(ReportingSystemPropertiesImpl reporting) {
        this.reporting = reporting;
    }

    public Map<String, DataSourceElementsTenant> getDataSources() {
        return dataSources;
    }

    public void setDataSources(Map<String, DataSourceElementsTenant> dataSources) {
        this.dataSources = dataSources;
    }

    public ArchivePropertiesTenant getArchiveProperties() {
        return archiveProperties;
    }

    public void setArchiveProperties(ArchivePropertiesTenant archiveProperties) {
        this.archiveProperties = archiveProperties;
    }

    public AggregateReportingPropertiesTenant getAggregateReportingProperties() {
        return aggregateReportingProperties;
    }

    public void setAggregateReportingProperties(AggregateReportingPropertiesTenant aggregateReportingProperties) {
        this.aggregateReportingProperties = aggregateReportingProperties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TenantConfiguration)) return false;
        TenantConfiguration that = (TenantConfiguration) o;
        return Objects.equal(tenant, that.tenant) &&
                Objects.equal(parentTenantKey, that.parentTenantKey) &&
                Objects.equal(localization, that.localization) &&
                administrationStatus == that.administrationStatus &&
                Objects.equal(reporting, that.reporting) &&
                Objects.equal(dataSources, that.dataSources) &&
                Objects.equal(archiveProperties, that.archiveProperties) &&
                Objects.equal(aggregateReportingProperties, that.aggregateReportingProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(tenant, parentTenantKey, localization, administrationStatus, reporting, dataSources, archiveProperties, aggregateReportingProperties);
    }
    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Tenant tenant;
        private String parentTenantKey;
        private String localization;
        private TenantAdministrationStatusContext administrationStatus;
        private ReportingSystemPropertiesImpl reporting;
        private Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();
        private ArchivePropertiesTenant archiveProperties;
        private AggregateReportingPropertiesTenant aggregateReportingProperties;

        public Builder tenant(final Tenant tenant){
            this.tenant = tenant;
            return this;
        }

        public Builder parentTenantKey(final String parentTenantKey) {
            this.parentTenantKey = parentTenantKey;
            return this;
        }

        public Builder localizaton(final String localization){
            this.localization = localization;
            return this;
        }

        public Builder administrationStatus(final TenantAdministrationStatusContext administrationStatus) {
            this.administrationStatus = administrationStatus;
            return this;
        }

        public Builder reporting(final ReportingSystemPropertiesImpl reporting) {
            this.reporting = reporting;
            return this;
        }

        public Builder dataSources(final Map<String, DataSourceElementsTenant> dataSources) {
            this.dataSources = dataSources;
            return this;
        }

        public Builder archiveProperties(final ArchivePropertiesTenant archiveProperties) {
            this.archiveProperties = archiveProperties ;
            return this;
        }

        public Builder aggregateReportingProperties(final AggregateReportingPropertiesTenant aggregateReportingProperties) {
            this.aggregateReportingProperties = aggregateReportingProperties;
            return this;
        }

        public TenantConfiguration build() {
            TenantConfiguration tenantConfiguration = new TenantConfiguration();
            tenantConfiguration.setReporting(reporting);
            tenantConfiguration.setTenant(tenant);
            tenantConfiguration.setParentTenantKey(parentTenantKey);
            tenantConfiguration.setLocalization(localization);
            tenantConfiguration.setAdministrationStatus(administrationStatus);
            tenantConfiguration.setDataSources(dataSources);
            tenantConfiguration.setArchiveProperties(archiveProperties);
            tenantConfiguration.setAggregateReportingProperties(aggregateReportingProperties);
            return tenantConfiguration;
        }
    }
}
