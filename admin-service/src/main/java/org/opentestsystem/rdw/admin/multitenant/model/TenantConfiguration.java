package org.opentestsystem.rdw.admin.multitenant.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonRawValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.common.base.Objects;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.web.RawJsonDeserializer;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Unified model of all tenant configurable elements
 */
@JsonInclude(JsonInclude.Include.ALWAYS)
public class TenantConfiguration {

    private Tenant tenant;

    private String parentTenantKey;

    @JsonDeserialize(using = RawJsonDeserializer.class)
    @JsonRawValue
    private String localization;

    private TenantAdministrationStatusContext administrationStatus;

    private ReportingSystemPropertiesImpl reporting;

    @JsonProperty("datasources")
    private Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();

    @JsonProperty("archive")
    private ArchivePropertiesTenant archiveProperties;

    @JsonProperty("aggregate")
    private AggregateReportingPropertiesTenant aggregateReportingProperties;

    public TenantConfiguration() {
    }

    /***
     * The configured tenant
     */
    public Tenant getTenant() {
        return tenant;
    }

    /***
     * The parent tenant key for sandboxes expected to be null for non-sandbox tenants
     */
    public String getParentTenantKey() {
        return parentTenantKey;
    }

    /**
     * Localization json literal
     */
    public String getLocalization() {
        return localization;
    }

    /**
     * Status of the tenant in the configuration process
     */
    public TenantAdministrationStatusContext getAdministrationStatus() {
        return administrationStatus;
    }

    /**
     * Reporting configuration.
     */
    public ReportingSystemPropertiesImpl getReporting() {
        return reporting;
    }

    /**
     * DataSource configuration.  Never directly configured for Sandboxes.
     */
    public Map<String, DataSourceElementsTenant> getDataSources() {
        return dataSources;
    }

    /**
     * Archive configuration.  Never directly configured for Sandboxes.
     */
    public ArchivePropertiesTenant getArchiveProperties() {
        return archiveProperties;
    }

    /**
     * Aggregate report configuration.
     */
    public AggregateReportingPropertiesTenant getAggregateReportingProperties() {
        return aggregateReportingProperties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TenantConfiguration)) return false;
        TenantConfiguration that = (TenantConfiguration) o;
        return Objects.equal(tenant, that.tenant) &&
                Objects.equal(parentTenantKey, that.parentTenantKey) &&
                Objects.equal(localization, that.localization) &&
                administrationStatus == that.administrationStatus &&
                Objects.equal(reporting, that.reporting) &&
                Objects.equal(dataSources, that.dataSources) &&
                Objects.equal(archiveProperties, that.archiveProperties) &&
                Objects.equal(aggregateReportingProperties, that.aggregateReportingProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(tenant, parentTenantKey, localization, administrationStatus, reporting, dataSources, archiveProperties, aggregateReportingProperties);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private Tenant tenant;
        private String parentTenantKey;
        private String localization;
        private TenantAdministrationStatusContext administrationStatus;
        private ReportingSystemPropertiesImpl reporting;
        private Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();
        private ArchivePropertiesTenant archiveProperties;
        private AggregateReportingPropertiesTenant aggregateReportingProperties;

        public Builder tenant(final Tenant tenant) {
            this.tenant = tenant;
            return this;
        }

        public Builder parentTenantKey(final String parentTenantKey) {
            this.parentTenantKey = parentTenantKey;
            return this;
        }

        public Builder localizaton(final String localization) {
            this.localization = localization;
            return this;
        }

        public Builder administrationStatus(final TenantAdministrationStatusContext administrationStatus) {
            this.administrationStatus = administrationStatus;
            return this;
        }

        public Builder reporting(final ReportingSystemPropertiesImpl reporting) {
            this.reporting = reporting;
            return this;
        }

        public Builder dataSources(final Map<String, DataSourceElementsTenant> dataSources) {
            this.dataSources = dataSources;
            return this;
        }

        public Builder archiveProperties(final ArchivePropertiesTenant archiveProperties) {
            this.archiveProperties = archiveProperties;
            return this;
        }

        public Builder aggregateReportingProperties(final AggregateReportingPropertiesTenant aggregateReportingProperties) {
            this.aggregateReportingProperties = aggregateReportingProperties;
            return this;
        }

        public Builder copy(TenantConfiguration tenantConfiguration) {
            this.reporting = tenantConfiguration.reporting;
            this.tenant = tenantConfiguration.tenant;
            this.parentTenantKey = tenantConfiguration.parentTenantKey;
            this.localization = tenantConfiguration.localization;
            this.administrationStatus = tenantConfiguration.administrationStatus;
            this.dataSources = tenantConfiguration.dataSources;
            this.archiveProperties = tenantConfiguration.archiveProperties;
            this.aggregateReportingProperties = tenantConfiguration.aggregateReportingProperties;
            return this;
        }

        public TenantConfiguration build() {
            TenantConfiguration tenantConfiguration = new TenantConfiguration();
            tenantConfiguration.reporting = this.reporting;
            tenantConfiguration.tenant = this.tenant;
            tenantConfiguration.parentTenantKey = this.parentTenantKey;
            tenantConfiguration.localization = localization;
            tenantConfiguration.administrationStatus = this.administrationStatus;
            tenantConfiguration.dataSources = this.dataSources;
            tenantConfiguration.archiveProperties = this.archiveProperties;
            tenantConfiguration.aggregateReportingProperties = this.aggregateReportingProperties;
            return tenantConfiguration;
        }
    }
}
