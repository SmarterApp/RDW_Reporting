package org.opentestsystem.rdw.admin.web;

import org.opentestsystem.rdw.admin.exception.EmbargoException;
import org.opentestsystem.rdw.admin.model.EmbargoAuditRecord;
import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.EmbargoOptions;
import org.opentestsystem.rdw.admin.model.EmbargoQuery;
import org.opentestsystem.rdw.admin.model.EmbargoUpdate;
import org.opentestsystem.rdw.admin.service.EmbargoService;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;

import javax.servlet.http.HttpServletResponse;
import java.util.Collection;
import java.util.List;

import static org.opentestsystem.rdw.admin.web.converter.EmbargoAuditRecordsCsvHelper.writeContent;

/**
 * End-points for administering {@link Embargo} and {@link EmbargoAuditRecord}.
 */
@RestController
@RequestMapping("/embargoes")
public class EmbargoController {
    private final EmbargoService service;

    @Autowired
    EmbargoController(final EmbargoService service) {
        this.service = service;
    }

    /**
     * @param user user
     * @param query the query parameters -- filters, sort, and page definitions
     * @return collection of embargo settings for which the user has permission
     */
    @PostMapping
    public Collection<Embargo> findByQuery(
        @AuthenticationPrincipal final User user,
        @RequestBody final EmbargoQuery query) {
        return service.findEmbargoes(query, user);
    }

    /**
     * Get all filter options and some configuration parameters for the current user.
     *
     * @param user the user
     * @return structure filter options and configuration
     */
    @GetMapping("/filters")
    public EmbargoOptions getFilters(@AuthenticationPrincipal final User user) {
        return service.getFilterOptions(user);
    }

    @GetMapping(path = "/districts/{name}")
    public List<Organization> getDistrictFiltersByName(@AuthenticationPrincipal final User user, @PathVariable final String name) {
        return service.getDistrictFiltersByName(user, name);
    }

    /**
     * Get total count of test results availability records for the given filters.
     *
     * @param user the user
     * @param query the query including the filters
     * @return an Integer count of records
     */
    @PostMapping("/count")
    public Integer countByQuery(
        @AuthenticationPrincipal final User user,
        @RequestBody final EmbargoQuery query) {
        return service.countEmbargoes(query, user);
    }

    @PutMapping
    public void saveStatusChange(
        @AuthenticationPrincipal final User user,
        @RequestBody EmbargoUpdate update) {

        service.saveStatusChanges(user, update);
    }

    /**
     * Downloads the embargo audit log as CSV.
     *
     * @param user the user
     * @param response the response to attach the file to
     */
    @GetMapping(path = "/audit")
    public void getAudit(
        @AuthenticationPrincipal final User user,
        final HttpServletResponse response)
    {
        final String fileName = service.getAuditFileName();
        final List<EmbargoAuditRecord> auditRecords = service.findAuditRecords(user);
        final String fullFileName = user.getTenant().getName() + '-' + fileName;
        writeContent(fullFileName, auditRecords, response);
    }

    @ExceptionHandler(EmbargoException.class)
    public @ResponseBody
    ResponseEntity<String> handleException(final EmbargoException ex, final WebRequest request) {
        return ResponseEntity.badRequest().body(ex.getMessage());
    }
}


