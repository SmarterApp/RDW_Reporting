package org.opentestsystem.rdw.admin.web;

import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.EmbargoAuditRecord;
import org.opentestsystem.rdw.admin.model.EmbargoScope;
import org.opentestsystem.rdw.admin.service.EmbargoService;
import org.opentestsystem.rdw.admin.web.converter.EmbargoAuditRecordsCsvHelper;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.time.Instant;
import java.util.Collection;
import java.util.Date;
import java.util.EnumSet;
import java.util.List;

import static java.time.temporal.ChronoUnit.DAYS;
import static org.opentestsystem.rdw.admin.web.converter.EmbargoAuditRecordsCsvHelper.writeContent;

/**
 * End-points for administering {@link Embargo}s.
 */
@RestController
@RequestMapping("/embargoes")
public class EmbargoController {

    private final EmbargoService service;

    @Autowired
    EmbargoController(final EmbargoService service) {
        this.service = service;
    }

    /**
     * @param user user
     * @return collection of embargo settings for which the user has permission
     */
    @GetMapping
    public Collection<Embargo> get(@AuthenticationPrincipal final User user) {
        return service.findAll(user);
    }

    /**
     * Downloads the embargo audit log as CSV.
     *
     * @param user the user
     * @param response the response to attach the file to
     * @param auditLogDays number of days to include in the log file
     * @param fileName the name for the downloaded file
     */
    @GetMapping(path = "/audit")
    public void getAudit(
        @AuthenticationPrincipal final User user,
        final HttpServletResponse response,
        @Value("${embargo.audit-log-days:7}") int auditLogDays,
        @Value("${embargo.audit-log-file-name:}") String fileName)
    {
        final Date startDate = Date.from(Instant.now().plus(-auditLogDays, DAYS));
        final List<EmbargoAuditRecord> auditRecords = service.findAuditRecords(user, startDate);
        writeContent(fileName.isEmpty() ? "embargo-audit-log.csv" : fileName, auditRecords, response);
    }

    /**
     * End-point to set a single embargo flag.
     * <pre>
     * PUT -d "false" http://localhost/embargos/State/0/Aggregate
     * PUT -d "true" http://localhost/embargos/District/507/Individual
     * </pre>
     *
     * @param user user with EMBARGO_WRITE permission for given organization
     * @param organizationType organization type, "State" or "District"
     * @param organizationId organization id; use 0 for "State"
     * @param scope organization scope, "Individual" or "Aggregate"
     * @param payload setting, "true" or "false"
     */
    @PutMapping(value = "/{organizationType}/{organizationId}/{scope}")
    public void put(@AuthenticationPrincipal final User user,
                    @PathVariable final String organizationType,
                    @PathVariable final Long organizationId,
                    @PathVariable final String scope,
                    @RequestBody final String payload) {

        final boolean enabled = Boolean.valueOf(payload);

        // although the service will reject invalid organization type, let's fast fail here
        final OrganizationType type = OrganizationType.caseInsensitiveValue(organizationType);
        if (!EnumSet.of(OrganizationType.State, OrganizationType.District).contains(type)) {
            throw new IllegalArgumentException("Invalid embargo organization type");
        }

        final Embargo.Builder builder = Embargo.builder()
                .organizationType(type)
                .organizationId(organizationId <= 0 ? null : organizationId);
        switch (EmbargoScope.caseInsensitiveValue(scope)) {
            case Individual:
                builder.individualEnabled(enabled);
                break;
            case Aggregate:
                builder.aggregateEnabled(enabled);
                break;
        }

        service.save(user, builder.build());
    }
}
