package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.Ordering;
import org.opentestsystem.rdw.admin.service.OrganizationService;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.OrganizationQuery;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.model.State;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.google.common.collect.ImmutableList.of;
import static com.google.common.collect.Lists.newArrayList;

/**
 * Default implementation of an OrganizationService.
 */
@Service
class DefaultOrganizationService implements OrganizationService {
    private static final int MaxLimit = 1000;
    private static final Ordering<Organization> organizationOrdering = Ordering.natural()
            .onResultOf(Organization::getOrganizationType)
            .compound(Ordering.natural()
                    .onResultOf(Organization::getName));

    private final OrganizationRepository repository;
    private final ReportingSystemSettings systemSettings;

    @Autowired
    public DefaultOrganizationService(@Qualifier("reportingOrganizationRepository") final OrganizationRepository repository,
                                      final ReportingSystemSettings systemSettings) {
        this.repository = repository;
        this.systemSettings = systemSettings;
    }

    @Override
    public List<Organization> findByQuery(final PermissionScope permissionScope, final OrganizationQuery query) {
        if (permissionScope.equals(PermissionScope.EMPTY)) {
            return of();
        }

        final OrganizationQuery limitedQuery = OrganizationQuery.builder()
                .copy(query)
                .limit(Math.max(0, Math.min(MaxLimit, query.getLimit())))
                .build();
        final List<Organization> organizations = newArrayList(repository.findAll(permissionScope, limitedQuery));
        if (query.getTypes().contains(OrganizationType.State) &&
                (query.getName() == null || systemSettings.getState().getName().toUpperCase().contains(query.getName().toUpperCase()))) {
            organizations.add(State.builder()
                    .naturalId(systemSettings.getState().getCode())
                    .name(systemSettings.getState().getName())
                    .build());
        }

        return organizationOrdering.sortedCopy(organizations);
    }
}
