package org.opentestsystem.rdw.admin.model;

import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Used to serve up a mock data for default ApplicationTenantConfiguration
 * and a couple of TenantConfiguration
 *
 *   TODO remove once api calls are functional
 */
public class TenantConfigurationStubs {


    // Basic Default tenant application information
    static public ApplicationTenantConfiguration getMockDefaultApplicationTenantConfiguration() {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        applicationTenantConfiguration.setReporting(getReporting());
        applicationTenantConfiguration.setDataSources(getDatasources());
        applicationTenantConfiguration.setArchiveProperties(getArchivePropertiesTenant());
        return applicationTenantConfiguration;
    }

    // Default properties for Archive
    static private ArchivePropertiesTenant getArchivePropertiesTenant() {
        ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("s3://default-archive");
        archivePropertiesTenant.setS3AccessKey("default-accessKey");
        archivePropertiesTenant.setPathPrefix(""); // empty path default
        archivePropertiesTenant.setS3RegionStatic("us-west-2");
        archivePropertiesTenant.setS3Sse("def-sse");
        return archivePropertiesTenant;
    }

    // Defaults DataSource elements - for all dataSources
    static private Map<String, DataSourceElementsTenant> getDatasources () {
        Map<String, DataSourceElementsTenant> datasources = new LinkedHashMap<>();
        DataSourceElementsTenant dataSource = new DataSourceElementsTenant();
        dataSource.setInitialSize(1);
        dataSource.setMaxActive(2);
        dataSource.setUrl("rdw-aurora-");
        dataSource.setUsername("sbac");
        dataSource.setPassword("****");
        dataSource.setDriverClassName("driver class Name");
        dataSource.setJdbcInterceptors("jdbc Interceptors");
        dataSource.setLogAbandoned(false);
        dataSource.setMaxIdle(1000);
        dataSource.setMinIdle(10);
        dataSource.setRemoveAbandoned(true);
        dataSource.setTestWhileIdle(true);
        dataSource.setRemoveAbandonedTimeout(100);
        datasources.put("reporting_ro", dataSource);
        datasources.put("warehouse_rw", dataSource);
        datasources.put("olap_ro", dataSource);
        datasources.put("reporting_rw", dataSource);
        return datasources;
    }

    //  Defaults for Reporting
    static public  ReportingSystemPropertiesImpl getReporting() {
        ReportingSystemPropertiesImpl  reporting = new  ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2018);
        reporting.setTransferAccessEnabled(true);
        reporting.setAccessDeniedUrl("forward:/assets/public/access-denied.html");
        reporting.setAnalyticsTrackingId("UA-102446884-4");
        reporting.setUserGuideUrl("https://portal.smarterbalanced.org/library/en/reporting-system-user-guide.pdf");
        reporting.setInterpretiveGuideUrl("https://portal.smarterbalanced.org/library/en/reporting-system-interpretive-guide.pdf");
        reporting.setPercentileDisplayEnabled(true);
        reporting.setLandingPageUrl("forward:/landing.html");
        List<String> languages = new ArrayList<>();
        languages.add("en");
        reporting.setReportLanguages(languages);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        reporting.setState(state);
        Map<StudentFieldType, SearchFieldPermissionLevel> studentFields = new HashMap<>();
        studentFields.put(StudentFieldType.EconomicDisadvantage, SearchFieldPermissionLevel.Disabled);
        studentFields.put(StudentFieldType.LimitedEnglishProficiency, SearchFieldPermissionLevel.Disabled);
        studentFields.put(StudentFieldType.MigrantStatus, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.EnglishLanguageAcquisitionStatus, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.PrimaryLanguage, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.Ethnicity, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.Gender, SearchFieldPermissionLevel.Admin);
        studentFields.put(StudentFieldType.IndividualEducationPlan, SearchFieldPermissionLevel.Admin);
        studentFields.put(StudentFieldType.Section504, SearchFieldPermissionLevel.Admin);
        return reporting;
    }

    // TenantConfiguration  Mocks
    static public TenantConfiguration createMockTenantCA() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();

        ArchivePropertiesTenant archivePropertiesTenant = getArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("ca");
        archivePropertiesTenant.setUriRoot("s3://ca-archive");

        Map<String, DataSourceElementsTenant> datasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant dataSourceRep = new DataSourceElementsTenant();
        dataSourceRep.setInitialSize(10);
        dataSourceRep.setMaxActive(10);
        datasourcesMap.put("reporting_ro", dataSourceRep);

        DataSourceElementsTenant dataSourceWh  = new DataSourceElementsTenant();
        dataSourceWh.setInitialSize(3);
        dataSourceWh.setMaxActive(4);
        datasourcesMap.put("warehouse_rw", dataSourceWh);

        DataSourceElementsTenant dataSourceOl = new DataSourceElementsTenant();
        dataSourceOl.setInitialSize(4);
        dataSourceOl.setMaxActive(4);
        datasourcesMap.put("olap_ro", dataSourceOl);

        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2019);
        reporting.setPercentileDisplayEnabled(false);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        state.setCode("CA");
        state.setName("California");
        reporting.setState(state);

        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.NativeHawaiianOrOtherPacificIslander", "Native Hawaiian or Other Pacific Islander");
        localization.put("common.ethnicity.DemographicRaceTwoOrMoreRaces", "Two or More Races");

        return getTenantConfiguration(tenantConfiguration, getTenantCA(), reporting, datasourcesMap, archivePropertiesTenant, localization);
    }

    static public TenantProperties.Tenant getTenantCA() {
        TenantProperties.Tenant tenant = new TenantProperties.Tenant();
        tenant.setId("CA");
        tenant.setKey("CA");
        tenant.setName("California");
        tenant.setDescription("This is a CA description");
        return tenant;
    }

    static public TenantProperties.Tenant getTenantNV() {
        TenantProperties.Tenant tenant = new TenantProperties.Tenant();
        tenant.setId("NV");
        tenant.setKey("NV");
        tenant.setName("Nevada");
        tenant.setDescription("This is a Nevada description");
        return tenant;
    }

    static public  TenantConfiguration createMockTenantNV() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();

        ArchivePropertiesTenant archivePropertiesTenant = getArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("nv");
        archivePropertiesTenant.setUriRoot("s3://nv-archive");

        Map<String, DataSourceElementsTenant> datasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant dataSourceRep = new DataSourceElementsTenant();
        dataSourceRep.setInitialSize(3);
        dataSourceRep.setMaxActive(3);
        datasourcesMap.put("reporting_ro", dataSourceRep);

        DataSourceElementsTenant dataSourceWh  = new DataSourceElementsTenant();
        dataSourceWh.setInitialSize(4);
        dataSourceWh.setMaxActive(8);
        datasourcesMap.put("warehouse_rw", dataSourceWh);

        DataSourceElementsTenant dataSourceOl = new DataSourceElementsTenant();
        dataSourceOl.setInitialSize(5);
        dataSourceOl.setMaxActive(5);
        datasourcesMap.put("olap_ro", dataSourceOl);

        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2019);
        reporting.setTransferAccessEnabled(false);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        state.setCode("NV");
        state.setName("Nevada");
        reporting.setState(state);

        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.HispanicOrLatinoEthnicity", "Hispanic or Latino");
        localization.put("common.ethnicity.Asian", "Asian");

        return getTenantConfiguration(tenantConfiguration, getTenantNV(), reporting, datasourcesMap, archivePropertiesTenant, localization);
    }

    // create a tenantConfiguration that can be used to create and update a tenant
    private static TenantConfiguration getTenantConfiguration(TenantConfiguration tenantConfiguration,
                                                              TenantProperties.Tenant tenant,
                                                              ReportingSystemPropertiesImpl reporting,
                                                              Map<String, DataSourceElementsTenant> datasourcesMap,
                                                              ArchivePropertiesTenant archivePropertiesTenant,
                                                              Map<String, String> localization) {
        tenantConfiguration.setTenant(tenant);
        tenantConfiguration.setLocalization(localization);

        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        applicationTenantConfiguration.setReporting(reporting);
        applicationTenantConfiguration.setDataSources(datasourcesMap);
        applicationTenantConfiguration.setArchiveProperties(archivePropertiesTenant);
        tenantConfiguration.setApplicationTenantConfiguration(applicationTenantConfiguration);

        return tenantConfiguration;
    }

    static public Map<String, String> getLocalization() {
        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.HispanicOrLatinoEthnicity", "Hispanic or Latino");
        localization.put("common.ethnicity.Asian", "Asian");
        localization.put("common.ethnicity.BlackOrAfricanAmerican", "Black or African American");
        localization.put("common.ethnicity.AmericanIndianOrAlaskaNative", "American Indian or Alaska Native");
        localization.put("common.ethnicity.White", "White");
        localization.put("common.ethnicity.NativeHawaiianOrOtherPacificIslander", "Native Hawaiian or Other Pacific Islander");
        localization.put("common.ethnicity.DemographicRaceTwoOrMoreRaces", "Two or More Races");
        localization.put("gender.Male", "Male");
        localization.put("gender.Female", "Female");
        localization.put("gender.Nonbinary", "Neutral");
        return localization;
    }
}
