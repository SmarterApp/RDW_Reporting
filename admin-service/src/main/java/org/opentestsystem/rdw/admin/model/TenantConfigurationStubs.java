package org.opentestsystem.rdw.admin.model;

import org.opentestsystem.rdw.admin.service.impl.RDWDataSourceNames;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.model.SearchFieldPermissionLevel;
import org.opentestsystem.rdw.reporting.common.model.StudentFieldType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;


/**
 * Used to serve up a mock data for default ApplicationTenantConfiguration
 * and a couple of TenantConfiguration
 * <p>
 * TODO move to Test once write calls are functional
 */
public class TenantConfigurationStubs {


    // Basic Default tenant application information
    public static ApplicationTenantConfiguration getMockDefaultApplicationTenantConfiguration() {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        applicationTenantConfiguration.setReporting(getReporting());
        applicationTenantConfiguration.setDataSources(getDefaultDatasources());
        applicationTenantConfiguration.setArchiveProperties(getArchivePropertiesTenant());
        applicationTenantConfiguration.setAggregateReportingPropertiesTenant(getAggregrateReportingProperties());
        return applicationTenantConfiguration;
    }

    // Default properties for Archive
    public static ArchivePropertiesTenant getArchivePropertiesTenant() {
        ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("s3://default-archive");
        archivePropertiesTenant.setS3AccessKey("default-accessKey");
        archivePropertiesTenant.setPathPrefix(""); // empty path default
        archivePropertiesTenant.setS3RegionStatic("us-west-2");
        archivePropertiesTenant.setS3Sse("def-sse");
        return archivePropertiesTenant;
    }

    // Defaults DataSource elements - for all dataSources
    private static Map<String, DataSourceElementsTenant> getDefaultDatasources() {
        Map<String, DataSourceElementsTenant> datasources = new LinkedHashMap<>();
        datasources.put(RDWDataSourceNames.REPORTING_RO.getName(), getDefaultReadOnlyDataSource());
        datasources.put(RDWDataSourceNames.REPORTING_RW.getName(), getDefaultWritableDataSource());
        datasources.put(RDWDataSourceNames.WAREHOUSE_RW.getName(), getDefaultWarehouseDataSource());
        datasources.put(RDWDataSourceNames.OLAP_RO.getName(), getDefaultOlap());
        return datasources;
    }

    private static DataSourceElementsTenant getDefaultReadOnlyDataSource() {
        DataSourceElementsTenant dataSource = new DataSourceElementsTenant();
        final DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("reporting");
        dataSource.setUrlParts(urlParts);
        dataSource.setInitialSize(1);
        dataSource.setMaxActive(2);
        dataSource.setUrl("rdw-aurora-mock");
        dataSource.setUsername("sbac-mock");
        dataSource.setPassword("****");
        dataSource.setDriverClassName("driver class Name");
        dataSource.setJdbcInterceptors("jdbc Interceptors");
        dataSource.setLogAbandoned(false);
        dataSource.setMaxIdle(1000);
        dataSource.setMinIdle(10);
        dataSource.setRemoveAbandoned(true);
        dataSource.setTestWhileIdle(true);
        dataSource.setRemoveAbandonedTimeout(100);
        return dataSource;
    }

    private static DataSourceElementsTenant getDefaultWritableDataSource() {
        DataSourceElementsTenant writableDataSource = new DataSourceElementsTenant();
        final DataSourceUrlParts rwUrlParts = new DataSourceUrlParts();

        rwUrlParts.setDatabase("reporting-rw ");
        writableDataSource.setUrlParts(rwUrlParts);
        writableDataSource.setInitialSize(1);
        writableDataSource.setMaxActive(2);
        writableDataSource.setUrl("rdw-aurora-mock-rw");
        writableDataSource.setUsername("sbac-mock");
        writableDataSource.setPassword("****");
        writableDataSource.setDriverClassName("writeable Driver class Name");
        writableDataSource.setJdbcInterceptors("jdbc Interceptors -rw");
        writableDataSource.setLogAbandoned(true);
        writableDataSource.setMaxIdle(1001);
        writableDataSource.setMinIdle(10);
        writableDataSource.setRemoveAbandoned(true);
        writableDataSource.setTestWhileIdle(true);
        writableDataSource.setRemoveAbandonedTimeout(100);
        return writableDataSource;
    }

    private static DataSourceElementsTenant getDefaultWarehouseDataSource() {
        DataSourceElementsTenant elementsTenant = new DataSourceElementsTenant();
        final DataSourceUrlParts whUrlParts = new DataSourceUrlParts();
        whUrlParts.setDatabase("warehouse-rw");
        elementsTenant.setUrlParts(whUrlParts);
        elementsTenant.setInitialSize(2);
        elementsTenant.setMaxActive(2);
        elementsTenant.setUrl("rdw-aurora-mock-wh");
        elementsTenant.setUsername("sbac-mock");
        elementsTenant.setPassword("*****");
        elementsTenant.setDriverClassName("warehouse Driver class Name");
        elementsTenant.setJdbcInterceptors("jdbc Interceptors -wh");
        elementsTenant.setLogAbandoned(false);
        elementsTenant.setMaxIdle(1010);
        elementsTenant.setMinIdle(10);
        elementsTenant.setRemoveAbandoned(true);
        elementsTenant.setTestWhileIdle(true);
        elementsTenant.setRemoveAbandonedTimeout(100);
        return elementsTenant;
    }

    private static DataSourceElementsTenant getDefaultOlap() {
        DataSourceElementsTenant olapDataSource = new DataSourceElementsTenant();
        final DataSourceUrlParts olapUrlParts = new DataSourceUrlParts();
        olapUrlParts.setDatabase("dev-mock");
        olapUrlParts.setProtocol("jdbc:redshift:");
        olapDataSource.setUrlParts(olapUrlParts);
        olapDataSource.setUrl("jdbc:redshift: - ");
        olapDataSource.setUsername("root-mock");
        olapDataSource.setPassword("******");
        olapDataSource.setRemoveAbandonedTimeout(1);
        olapDataSource.setRemoveAbandoned(true);
        olapDataSource.setMinIdle(1);
        olapDataSource.setMaxActive(2);
        return olapDataSource;
    }

    //  Defaults for Reporting
    public static ReportingSystemPropertiesImpl getReporting() {
        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2019);
        reporting.setTransferAccessEnabled(true);
        reporting.setAccessDeniedUrl("forward:/assets/public/access-denied.html");
        reporting.setAnalyticsTrackingId("UA-102446884-4");
        reporting.setUserGuideUrl("https://portal.smarterbalanced.org/library/en/reporting-system-user-guide.pdf");
        reporting.setInterpretiveGuideUrl("https://portal.smarterbalanced.org/library/en/reporting-system-interpretive-guide.pdf");
        reporting.setPercentileDisplayEnabled(true);
        reporting.setLandingPageUrl("forward:/landing.html");
        List<String> languages = new ArrayList<>();
        languages.add("en");
        reporting.setReportLanguages(languages);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        reporting.setState(state);
        Map<StudentFieldType, SearchFieldPermissionLevel> studentFields = new HashMap<>();
        studentFields.put(StudentFieldType.EconomicDisadvantage, SearchFieldPermissionLevel.Disabled);
        studentFields.put(StudentFieldType.LimitedEnglishProficiency, SearchFieldPermissionLevel.Disabled);
        studentFields.put(StudentFieldType.MigrantStatus, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.EnglishLanguageAcquisitionStatus, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.PrimaryLanguage, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.Ethnicity, SearchFieldPermissionLevel.Enabled);
        studentFields.put(StudentFieldType.Gender, SearchFieldPermissionLevel.Admin);
        studentFields.put(StudentFieldType.IndividualEducationPlan, SearchFieldPermissionLevel.Admin);
        studentFields.put(StudentFieldType.Section504, SearchFieldPermissionLevel.Admin);
        reporting.setStudentFields(studentFields);
        return reporting;
    }

    // TenantConfiguration  Mocks
    public static Tenant getTenantCA() {
        Tenant tenant = new Tenant();
        tenant.setId("CA");
        tenant.setKey("CA");
        tenant.setName("California");
        tenant.setDescription("This is a CA description");
        tenant.setSandbox(false);
        return tenant;
    }

    public static Tenant getTenantNV() {
        Tenant tenant = new Tenant();
        tenant.setId("NV");
        tenant.setKey("NV");
        tenant.setName("Nevada");
        tenant.setDescription("This is a Nevada description");
        tenant.setSandbox(false);
        return tenant;
    }

    public static Map<String, DataSourceElementsTenant> getTenantsReadOnlyDataSources() {
        Map<String, DataSourceElementsTenant> readOnlydatasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant roDataSourceCA = new DataSourceElementsTenant();
        final DataSourceUrlParts caUrlParts = new DataSourceUrlParts();
        caUrlParts.setDatabase("reportingRo");
        roDataSourceCA.setUrlParts(caUrlParts);
        roDataSourceCA.setInitialSize(10);
        roDataSourceCA.setMaxActive(10);
        readOnlydatasourcesMap.put("CA", roDataSourceCA);

        DataSourceElementsTenant roDataSourceNV = new DataSourceElementsTenant();
        final DataSourceUrlParts nvUrlParts = new DataSourceUrlParts();
        nvUrlParts.setDatabase("reportingRoNv");
        roDataSourceNV.setUrlParts(nvUrlParts);
        roDataSourceNV.setInitialSize(5);
        roDataSourceNV.setMaxActive(5);
        readOnlydatasourcesMap.put("NV", roDataSourceNV);
        return readOnlydatasourcesMap;
    }

    public static Map<String, DataSourceElementsTenant> getTenantsWritableDataSources() {
        Map<String, DataSourceElementsTenant> writableDatasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant writableDataSourceCA = new DataSourceElementsTenant();
        final DataSourceUrlParts caUrlParts = new DataSourceUrlParts();
        caUrlParts.setDatabase("reportingRw");
        writableDataSourceCA.setUrlParts(caUrlParts);
        writableDataSourceCA.setInitialSize(4);
        writableDataSourceCA.setMaxActive(14);
        writableDatasourcesMap.put("CA", writableDataSourceCA);

        DataSourceElementsTenant writableDataSourceNV = new DataSourceElementsTenant();
        final DataSourceUrlParts nvUrlParts = new DataSourceUrlParts();
        nvUrlParts.setDatabase("reportingRwNv");
        writableDataSourceNV.setUrlParts(nvUrlParts);
        writableDataSourceNV.setInitialSize(6);
        writableDataSourceNV.setMaxActive(6);
        writableDatasourcesMap.put("NV", writableDataSourceNV);
        return writableDatasourcesMap;
    }

    public static Map<String, DataSourceElementsTenant> getTenantsOlapDataSources() {
        Map<String, DataSourceElementsTenant> olapDatasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant olapDataSource = new DataSourceElementsTenant();
        final DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("dev-mock");
        olapDataSource.setUrlParts(urlParts);
        olapDataSource.setUsername("root-ca");
        olapDataSource.setInitialSize(7);
        olapDataSource.setMaxActive(15);
        olapDatasourcesMap.put("CA", olapDataSource);

        DataSourceElementsTenant olapDataSourceNV = new DataSourceElementsTenant();
        final DataSourceUrlParts nvUrlParts = new DataSourceUrlParts();
        nvUrlParts.setDatabase("dev-mock");
        olapDataSourceNV.setUrlParts(nvUrlParts);
        olapDataSourceNV.setUsername("root-nv");
        olapDataSourceNV.setInitialSize(5);
        olapDataSourceNV.setMaxActive(5);
        olapDatasourcesMap.put("NV", olapDataSourceNV);
        return olapDatasourcesMap;
    }

    public static Map<String, ReportingSystemPropertiesImpl> getReportingSystemSettings() {
        Map<String, ReportingSystemPropertiesImpl> reportingMap = new HashMap<>();
        ReportingSystemPropertiesImpl caReportingSystemPropertiesImpl = getReporting();
        reportingMap.put("CA", caReportingSystemPropertiesImpl);
        return reportingMap;
    }

    public static Map<String, ArchivePropertiesTenant> getTenantsArchiveProperties() {
        Map<String, ArchivePropertiesTenant> archivePropertiesTenantMap = new HashMap<>();
        ArchivePropertiesTenant archivePropertiesTenant = getArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("ca");
        archivePropertiesTenant.setUriRoot("s3://ca-archive");
        archivePropertiesTenantMap.put("CA", archivePropertiesTenant);

        ArchivePropertiesTenant archivePropertiesTenantNv = getArchivePropertiesTenant();
        archivePropertiesTenantNv.setPathPrefix("nv");
        archivePropertiesTenantNv.setUriRoot("s3://nv-archive");
        archivePropertiesTenantMap.put("NV", archivePropertiesTenantNv);
        return archivePropertiesTenantMap;
    }


    // TenantConfiguration  Mocks
    public static TenantConfiguration createMockTenantCA() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();

        ArchivePropertiesTenant archivePropertiesTenant = getArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("ca");
        archivePropertiesTenant.setUriRoot("s3://ca-archive");

        Map<String, DataSourceElementsTenant> datasourcesMap = new LinkedHashMap<>();
        DataSourceElementsTenant dataSourceRep = new DataSourceElementsTenant();
        dataSourceRep.setInitialSize(10);
        dataSourceRep.setMaxActive(10);
        final DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("reporting");
        dataSourceRep.setUrlParts(urlParts);
        datasourcesMap.put(RDWDataSourceNames.REPORTING_RO.getName(), dataSourceRep);

        DataSourceElementsTenant dataSourceWh = new DataSourceElementsTenant();
        dataSourceWh.setInitialSize(3);
        dataSourceWh.setMaxActive(4);
        final DataSourceUrlParts urlPartsWh = new DataSourceUrlParts();
        urlPartsWh.setDatabase("reportingWH");
        dataSourceRep.setUrlParts(urlPartsWh);
        datasourcesMap.put(RDWDataSourceNames.REPORTING_RW.getName(), dataSourceWh);

        DataSourceElementsTenant dataSourceOl = new DataSourceElementsTenant();
        dataSourceOl.setInitialSize(4);
        dataSourceOl.setMaxActive(4);
        final DataSourceUrlParts urlPartsOl = new DataSourceUrlParts();
        urlPartsOl.setDatabase("dev-mock");
        dataSourceOl.setUrlParts(urlPartsOl);
        dataSourceOl.setUsername("root-ca");
        datasourcesMap.put(RDWDataSourceNames.OLAP_RO.getName(), dataSourceOl);

        DataSourceElementsTenant dataSourcerw = new DataSourceElementsTenant();
        dataSourcerw.setInitialSize(4);
        dataSourcerw.setMaxActive(4);
        final DataSourceUrlParts urlPartsRw = new DataSourceUrlParts();
        urlPartsRw.setDatabase("reportingRw");
        dataSourceRep.setUrlParts(urlPartsRw);
        datasourcesMap.put(RDWDataSourceNames.WAREHOUSE_RW.getName(), dataSourcerw);

        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2019);
        reporting.setPercentileDisplayEnabled(false);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        state.setCode("CA");
        state.setName("California");
        reporting.setState(state);

        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.NativeHawaiianOrOtherPacificIslander", "Native Hawaiian or Other Pacific Islander");
        localization.put("common.ethnicity.DemographicRaceTwoOrMoreRaces", "Two or More Races");

        return getTenantConfiguration(tenantConfiguration, getTenantCA(), reporting, datasourcesMap, archivePropertiesTenant,
                getCAAggregateReportingProperties(), localization);
    }

    public static TenantConfiguration createMockTenantNV() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        Tenant tenant = getTenantNV();

        ArchivePropertiesTenant archivePropertiesTenant = getArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("nv");
        archivePropertiesTenant.setUriRoot("s3://nv-archive");

        Map<String, DataSourceElementsTenant> datasourcesMap = new LinkedHashMap<>();
        final DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("reportingNv");
        DataSourceElementsTenant dataSourceRep = new DataSourceElementsTenant();
        dataSourceRep.setInitialSize(3);
        dataSourceRep.setMaxActive(3);
        dataSourceRep.setUrlParts(urlParts);
        datasourcesMap.put(RDWDataSourceNames.REPORTING_RO.getName(), dataSourceRep);

        DataSourceElementsTenant dataSourceWh = new DataSourceElementsTenant();
        dataSourceWh.setInitialSize(4);
        dataSourceWh.setMaxActive(8);
        final DataSourceUrlParts urlPartswh = new DataSourceUrlParts();
        urlPartswh.setDatabase("warehouseNv");
        dataSourceWh.setUrlParts(urlPartswh);
        datasourcesMap.put(RDWDataSourceNames.WAREHOUSE_RW.getName(), dataSourceWh);

        DataSourceElementsTenant dataSourceOl = new DataSourceElementsTenant();
        dataSourceOl.setInitialSize(5);
        dataSourceOl.setMaxActive(5);
        final DataSourceUrlParts urlPartsOl = new DataSourceUrlParts();
        urlPartsOl.setDatabase(null);
        dataSourceOl.setUrlParts(urlPartsOl);
        dataSourceOl.setUsername("root-nv");
        dataSourceOl.setSchemaSearchPath("nvOlapSchemaPath");
        datasourcesMap.put(RDWDataSourceNames.OLAP_RO.getName(), dataSourceOl);

        DataSourceElementsTenant dataSourceRw = new DataSourceElementsTenant();
        dataSourceRw.setInitialSize(2);
        dataSourceRw.setMaxActive(2);
        final DataSourceUrlParts urlPartsRw = new DataSourceUrlParts();
        urlPartsRw.setDatabase("reportingRwNv");
        dataSourceRw.setUrlParts(urlPartsRw);
        datasourcesMap.put(RDWDataSourceNames.REPORTING_RW.getName(), dataSourceRw);

        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setSchoolYear(2019);
        reporting.setTransferAccessEnabled(false);
        ReportingSystemProperties.StateProperties state = new ReportingSystemProperties.StateProperties();
        state.setCode("NV");
        state.setName("Nevada");
        reporting.setState(state);

        Map<String, String> localization = new LinkedHashMap<>();
        localization.put("common.ethnicity.HispanicOrLatinoEthnicity", "Hispanic or Latino");
        localization.put("common.ethnicity.Asian", "Asian");

        return getTenantConfiguration(tenantConfiguration, getTenantNV(), reporting, datasourcesMap, archivePropertiesTenant,
                getNVAggregateReportingProperties(), localization);
    }

    // create a tenantConfiguration that can be used to create and update a tenant
    private static TenantConfiguration getTenantConfiguration(TenantConfiguration tenantConfiguration,
                                                              Tenant tenant,
                                                              ReportingSystemPropertiesImpl reporting,
                                                              Map<String, DataSourceElementsTenant> datasourcesMap,
                                                              ArchivePropertiesTenant archivePropertiesTenant,
                                                              AggregateReportingPropertiesTenant aggregateReportingProperties,
                                                              Map<String, String> localization) {
        tenantConfiguration.setTenant(tenant);
        tenantConfiguration.setLocalization(getLocalization());

        tenantConfiguration.setReporting(reporting);
        tenantConfiguration.setDataSources(datasourcesMap);
        tenantConfiguration.setArchiveProperties(archivePropertiesTenant);
        tenantConfiguration.setAggregateReportingPropertiesTenant(aggregateReportingProperties);
        return tenantConfiguration;
    }

    public static AggregateReportingPropertiesTenant getAggregrateReportingProperties() {
        AggregateReportingPropertiesTenant aggregateReportingProperties = new AggregateReportingPropertiesTenant();
        Set<String> assessmentTypes = new HashSet<>();
        assessmentTypes.add("ica");
        assessmentTypes.add("sum");
        assessmentTypes.add("iab");
        aggregateReportingProperties.setAssessmentTypes(assessmentTypes);
        Set<String> assessments = new HashSet<>();
        assessmentTypes.add("sum");
        aggregateReportingProperties.setStateAggregateAssessmentTypes(assessments);
        aggregateReportingProperties.setStatewideUserAssessmentTypes(assessments);
        return aggregateReportingProperties;
    }

    public static AggregateReportingPropertiesTenant getCAAggregateReportingProperties() {
        AggregateReportingPropertiesTenant aggregationProperties = new AggregateReportingPropertiesTenant();
        Set<String> assessments = new HashSet<>();
        assessments.add("ica");
        assessments.add("sum");
        aggregationProperties.setAssessmentTypes(assessments);
        return aggregationProperties;
    }

    private static AggregateReportingPropertiesTenant getNVAggregateReportingProperties() {
        AggregateReportingPropertiesTenant aggregationProperties = new AggregateReportingPropertiesTenant();
        Set<String> assessments = new HashSet<>();
        assessments.add("sum");
        aggregationProperties.setAssessmentTypes(assessments);
        Set<String> stateTypes = new HashSet<>();
        stateTypes.add("sum");
        aggregationProperties.setStatewideUserAssessmentTypes(stateTypes);
        Set<String> userTypes = new HashSet<>();
        userTypes.add("ica");
        aggregationProperties.setStatewideUserAssessmentTypes(userTypes);
        return aggregationProperties;
    }

    public static Optional<AggregateReportingPropertiesRoot> getAggregateReportingPropertiesRoot() {
        AggregateReportingPropertiesRoot aggregateReportingPropertiesRoot = new AggregateReportingPropertiesRoot();
        AggregateReportingPropertiesTenant aggregationProperties = getAggregrateReportingProperties();
        aggregateReportingPropertiesRoot.setAssessmentTypes(aggregationProperties.getAssessmentTypes());
        aggregateReportingPropertiesRoot.setStateAggregateAssessmentTypes(aggregationProperties.getStateAggregateAssessmentTypes());
        aggregateReportingPropertiesRoot.setStatewideUserAssessmentTypes(aggregationProperties.getStatewideUserAssessmentTypes());
        HashMap<String, AggregateReportingPropertiesTenant> aggregatePropertiesMap = new HashMap<>();
        aggregatePropertiesMap.put("CA", getCAAggregateReportingProperties());
        aggregateReportingPropertiesRoot.setTenants(aggregatePropertiesMap);
        return Optional.of(aggregateReportingPropertiesRoot);
    }

    private static String getLocalization() {
        // TODO change tp a resource file when this stub / mock data file is move to test
//        try {
//            return IOUtils.toString(TenantConfigurationStubs.class.getClassLoader().getResourceAsStream("/"), UTF_8);
//        } catch (final IOException exception) {
//            throw new RuntimeException(exception);
//        }
        return "{" +
                "  \"common\" : {" +
                "    \"ethnicity\": {" +
                "      \"AmericanIndianOrAlaskaNative\": \"American Indian or Alaska Native\"," +
                "      \"Asian\": \"Asian\"," +
                "      \"BlackOrAfricanAmerican\": \"Black or African American\"," +
                "      \"DemographicRaceTwoOrMoreRaces\": \"Demographic Race of Two or More\"," +
                "      \"Filipino\": \"Filipino\"," +
                "      \"HispanicOrLatinoEthnicity\": \"Hispanic/Latino\"," +
                "      \"NativeHawaiianOrOtherPacificIslander\": \"Native Hawaiian or Pacific Islander\"," +
                "      \"White\": \"White\"" +
                "    }," +
                "    \"gender\": {" +
                "\t    \"Female\": \"Female\"," +
                "\t    \"Male\": \"Male\"," +
                "\t    \"Nonbinary\": \"Nonbinary\"," +
                "\t    \"undefined\": \"Not Stated\"" +
                "\t  }" +
                "\t}" +
                "}";
    }

    public static String getNvLocalization() {
        return "{" +
                "  \"common\" : {" +
                "    \"military-connected-code\": {" +
                "      \"ActiveDuty\": \"Active Duty\"," +
                "      \"NotMilitaryConnected\": \"Not Military Connected\"," +
                "      \"NationalGuardOrReserve\": \"National Guard Or Reserve\"," +
                "      \"Yes\": \"Yes\"," +
                "      \"No\": \"No\"" +
                "    }" +
                "  }" +
                "}";
    }
}
