package org.opentestsystem.rdw.admin.service.impl;

import org.apache.commons.io.IOUtils;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.opentestsystem.rdw.admin.repository.PipelineScriptRepository;
import org.opentestsystem.rdw.admin.service.PipelineScriptService;
import org.opentestsystem.rdw.script.PipelineDefinition;
import org.opentestsystem.rdw.script.PipelineScriptDefinition;
import org.opentestsystem.rdw.script.PipelineScriptType;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;

@Service
class DefaultPipelineScriptService implements PipelineScriptService {

    private final PipelineScriptRepository repository;
    private final PipelineRepository pipelineRepository;
    private final PublishedPipelineRepository publishedPipelineRepository;

    DefaultPipelineScriptService(final PipelineScriptRepository repository,
                                 final PipelineRepository pipelineRepository,
                                 final PublishedPipelineRepository publishedPipelineRepository) {
        this.repository = repository;
        this.pipelineRepository = pipelineRepository;
        this.publishedPipelineRepository = publishedPipelineRepository;
    }

    @Override
    public PipelineScript get(final int pipelineId, final int id) {

        // if there is a saved script return it
        final PipelineScript savedScript = repository.findById(id);
        if (savedScript != null && savedScript.getPipelineId() == pipelineId) {
            return savedScript;
        }

        // if there is a provisioned script return it
        final Pipeline pipeline = pipelineRepository.findById(pipelineId);
        if (pipeline.getActiveVersion() != null) {
            final PipelineDefinition publishedPipeline = publishedPipelineRepository
                    .findByCodeAndVersion(pipeline.getCode(), pipeline.getActiveVersion());
            if (publishedPipeline != null) {

                final PipelineScriptDefinition publishedScript = publishedPipeline.getScripts().stream()
                        .filter(script -> script.getType() == PipelineScriptType.User)
                        .findFirst()
                        .get();

                return PipelineScript.builder()
                        .pipelineId(pipelineId)
                        .body(publishedScript.getBody())
                        .created(publishedPipeline.getPublished())
                        .updated(publishedPipeline.getPublished())
                        .updatedBy(publishedPipeline.getPublishedBy())
                        .build();
            }
        }

        // if there is no saved or provisioned script return a sample script
        return createSamplePipelineScript(
                pipelineId,
                pipeline.getInputType()
        );
    }

    @Override
    public PipelineScript create(final String username, final PipelineScript script) {
        return repository.create(
                script.copy()
                        .updatedBy(username)
                        .build()
        );
    }

    @Override
    public PipelineScript update(final String username, final PipelineScript script) {
        return repository.update(
                script.copy()
                        .updatedBy(username)
                        .build()
        );
    }

    private PipelineScript createSamplePipelineScript(final int pipelineId, final String inputType) {
        final InputStream sample = getClass()
                .getClassLoader()
                .getResourceAsStream("pipeline-script-samples/" + inputType + ".groovy");
        try {
            return PipelineScript.builder()
                    .pipelineId(pipelineId)
                    .body(sample != null ? IOUtils.toString(sample, "UTF-8") : "")
                    .updatedBy("System")
                    .build();
        } catch (final IOException exception) {
            throw new RuntimeException(exception);
        }
    }

}
