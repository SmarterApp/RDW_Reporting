package org.opentestsystem.rdw.admin.multitenant.administration.impl;


import com.google.common.annotations.VisibleForTesting;

import java.util.concurrent.ConcurrentHashMap;
import org.opentestsystem.rdw.admin.multitenant.administration.SandboxArchiveRemovalService;
import org.opentestsystem.rdw.archive.ArchivePropertiesResolver;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.archive.ArchiveServiceDecorator;

public class DefaultSandboxArchiveRemovalService implements SandboxArchiveRemovalService {
    private final ConcurrentHashMap<String, ArchiveService> tenantArchiveServices = new ConcurrentHashMap<>();
    private final ArchivePropertiesResolver archivePropertiesResolver;

    public DefaultSandboxArchiveRemovalService(final ArchivePropertiesResolver archivePropertiesResolver) {
        this.archivePropertiesResolver = archivePropertiesResolver;
    }

    private ArchiveService getArchiveService(final String tenantKey) {
        return tenantArchiveServices.computeIfAbsent(tenantKey, this::archiveServiceFactory);
    }

    /**
     * Create ArchiveService for a tenant
     *
     * @param key unused present only to conform to computeIfAbsent MappingFunction
     * @return Archive Service for a particular tenant.
     */
    @VisibleForTesting
    protected ArchiveService archiveServiceFactory(String key) {
        return new ArchiveServiceDecorator(archivePropertiesResolver);
    }

    @Override
    public void remove(final String tenantKey) {
        // Deletes the root level folder with the name of the tenant key and all its contents
        getArchiveService(tenantKey).delete(tenantKey);
    }
}
