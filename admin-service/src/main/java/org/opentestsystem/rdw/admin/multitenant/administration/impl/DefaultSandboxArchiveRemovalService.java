package org.opentestsystem.rdw.admin.multitenant.administration.impl;


import org.opentestsystem.rdw.admin.multitenant.administration.SandboxArchiveRemovalService;
import org.opentestsystem.rdw.archive.ArchivePropertiesResolver;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DefaultSandboxArchiveRemovalService implements SandboxArchiveRemovalService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSandboxArchiveRemovalService.class);

    private final ArchivePropertiesResolver archivePropertiesResolver;
    private final TenantProperties tenantProperties;
    private final ArchiveService archiveService;

    public DefaultSandboxArchiveRemovalService(ArchivePropertiesResolver archivePropertiesResolver,
                                               TenantProperties tenantProperties,
                                               ArchiveService archiveService) {
        this.archivePropertiesResolver = archivePropertiesResolver;
        this.tenantProperties = tenantProperties;
        this.archiveService = archiveService;
    }

    @Override
    public void remove(final String tenantKey) {
        try {
            final Tenant tenant = tenantProperties.getTenants().get(tenantKey);
            TenantContextHolder.setTenantId(tenant.getId());

            // For safety, verify resolved archived properties contain a valid sandbox prefix
            final String prefix = archivePropertiesResolver.getPathPrefix();
            if (StringUtils.isBlank(prefix) || !prefix.toLowerCase().contains("_s")) {
                throw new IllegalStateException("Invalid path prefix: " + prefix);
            }

            // Delete all objects contained in the sandbox specific archive.
            archiveService.delete("");
        } catch (final Exception e) {
            logger.info("Failed to remove archives for sandbox with tenant key {}: {}", tenantKey, e.getMessage());
        } finally {
            TenantContextHolder.clear();
        }
    }
}
