package org.opentestsystem.rdw.admin.multitenant.administration.impl;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;

import org.opentestsystem.rdw.admin.multitenant.administration.SandboxArchiveRemovalService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.admin.service.impl.DefaultConfigServerClientService;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.archive.ArchiveServiceDecorator;

public class DefaultSandboxArchiveRemovalService implements SandboxArchiveRemovalService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSandboxArchiveRemovalService.class);

    private final TenantConfigurationViewService tenantConfigurationViewService;
    private final DefaultConfigServerClientService configServerClientService;


    public DefaultSandboxArchiveRemovalService(final TenantConfigurationViewService tenantConfigurationViewService,
                                               final DefaultConfigServerClientService configServerClientService) {
        this.tenantConfigurationViewService = tenantConfigurationViewService;
        this.configServerClientService = configServerClientService;
    }

    @Override
    public void remove(final String tenantKey) {
        try {
            final ArchiveProperties rootArchiveProperties =
                    tenantConfigurationViewService.defaultTenantConfiguration().getArchiveProperties();

            final String folderName = tenantKey.toLowerCase();

            // TODO: remove temporary log statement once deletion issues are resolved
            logger.info("s3 delete for folder {}: key {}, pw {}, region {}, sse {}, uri {}",
                    folderName,
                    rootArchiveProperties.getS3AccessKey(),
                    rootArchiveProperties.getS3SecretKey(), // this is the ciphered value
                    rootArchiveProperties.getS3RegionStatic(),
                    rootArchiveProperties.getS3Sse(),
                    rootArchiveProperties.getUriRoot());

            // Make a copy of the root properties and decrypt the key
            final ArchivePropertiesRoot copiedArchiveProperties = new ArchivePropertiesRoot();
            BeanUtils.copyProperties(rootArchiveProperties, copiedArchiveProperties);
            if (rootArchiveProperties.getS3SecretKey() != null) {
                copiedArchiveProperties.setS3SecretKey(
                        configServerClientService.decrypt(rootArchiveProperties.getS3SecretKey()));
            }

            final ArchiveService rootArchiveService = new ArchiveServiceDecorator(copiedArchiveProperties);

            rootArchiveService.delete(folderName);
        } catch (final Exception e) {
            logger.info("Cannot remove archives for sandbox id {}: {}", tenantKey, e.getMessage());
        }
    }
}
