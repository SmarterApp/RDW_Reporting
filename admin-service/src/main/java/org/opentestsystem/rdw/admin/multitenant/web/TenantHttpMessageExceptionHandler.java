package org.opentestsystem.rdw.admin.multitenant.web;

import org.opentestsystem.rdw.admin.multitenant.exception.DuplicateTenantException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@ControllerAdvice(assignableTypes = {TenantController.class})
public class TenantHttpMessageExceptionHandler extends ResponseEntityExceptionHandler {
    /**
     * This matches all words wrapped in quotes
     */
    private static final Pattern QUOTES_REGEX = Pattern.compile("([\"'])(?:(?=(\\\\?))\\2.)*?\\1");

    @Override
    public ResponseEntity<Object> handleHttpMessageNotReadable(final HttpMessageNotReadableException ex,
                                                               final HttpHeaders headers,
                                                               final HttpStatus status,
                                                               final WebRequest request) {
        final Matcher matcher = QUOTES_REGEX.matcher(ex.getMessage());
        String varWithError = null;
        while (matcher.find()) {
            // Find the last match
            varWithError = matcher.group();
        }
        return ResponseEntity.badRequest().body(
                new ApiError("An error occurred while processing the request. Invalid input: " + varWithError)
        );
    }

    @ExceptionHandler(DuplicateTenantException.class)
    public ResponseEntity<Object> handleDuplicateTenantException(final DuplicateTenantException ex,
                                                                 final WebRequest request) {
        return ResponseEntity.badRequest().body(new ApiError(ex.getMessage()));
    }

    private class ApiError {
        private String message;

        public ApiError(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }
    }
}

