package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.ImportRepository;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.google.common.collect.ImmutableMap.of;
import static com.google.common.collect.Lists.newArrayList;

/**
 * JDBC-backed implementation of ImportRepository.
 */
@Repository
public class JdbcImportRepository implements ImportRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.import.createQuery}")
    private String createQuery;

    @Value("${sql.import.triggerQuery}")
    private String triggerQuery;

    @Value("${sql.import.statusQuery}")
    private String statusQuery;

    @Value("${sql.import.createGroup}")
    private String createGroupQuery;

    @Value("${sql.import.findGroupById}")
    private String findGroupByIdQuery;

    @Value("${sql.import.findGroupByDigest}")
    private String findGroupByDigestQuery;

    @Value("${sql.import.findGroupByCreator}")
    private String findGroupByCreatorQuery;

    @Autowired
    public JdbcImportRepository(@Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public long create(final ImportContent content, final String contentType, final String digest, final String batch) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("content", content.getValue())
                .addValue("contentType", contentType)
                .addValue("digest", digest)
                .addValue("batch", batch);

        template.update(createQuery, parameterSource, keyHolder);

        return keyHolder.getKey().longValue();
    }

    @Override
    public void setProcessed(final long importId) {
        template.update(
                triggerQuery,
                new MapSqlParameterSource()
                        .addValue("id", importId));
    }

    @Override
    public void setStatus(final long importId, final ImportStatus status, final String message) {
        template.update(
                statusQuery,
                new MapSqlParameterSource()
                        .addValue("status", status.getValue())
                        .addValue("message", message)
                        .addValue("id", importId));
    }

    @Override
    public long createGroupImport(final String contentType,
                                  final String digest,
                                  final String filename,
                                  final String creator) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("contentType", contentType)
                .addValue("digest", digest)
                .addValue("batch", filename)
                .addValue("creator", creator);

        template.update(createGroupQuery, parameterSource, keyHolder);

        return keyHolder.getKey().longValue();
    }

    @Override
    public StudentGroupBatch findGroupById(final long id) {
        try {
            return template.queryForObject(findGroupByIdQuery, of("id", id), StudentGroupBatchRowMapper);
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public StudentGroupBatch findGroupByDigest(final String digest) {
        try {
            return template.queryForObject(findGroupByDigestQuery, of("digest", digest), StudentGroupBatchRowMapper);
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public List<StudentGroupBatch> findGroupByCreator(final String creator) {
        try {
            return template.query(findGroupByCreatorQuery, of("creator", creator), StudentGroupBatchRowMapper);
        } catch (final EmptyResultDataAccessException ignored) {
            return newArrayList();
        }
    }

    private static final RowMapper<StudentGroupBatch> StudentGroupBatchRowMapper = (rs, rowNum) -> StudentGroupBatch.builder()
            .id(rs.getLong("id"))
            .digest(rs.getString("digest"))
            .status(ImportStatus.fromValue(rs.getInt("status")))
            .filename(rs.getString("batch"))
            .creator(rs.getString("creator"))
            .created(rs.getTimestamp("created").toInstant())
            .updated(rs.getTimestamp("updated").toInstant())
            .message(rs.getString("message"))
            .build();
}
