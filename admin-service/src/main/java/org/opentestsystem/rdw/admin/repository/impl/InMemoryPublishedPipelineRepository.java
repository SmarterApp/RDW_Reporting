package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.springframework.stereotype.Repository;

import java.time.Instant;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.ConcurrentHashMap;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

/**
 * Placeholder in-memory version of the published pipeline repository
 */
//@Repository
class InMemoryPublishedPipelineRepository implements PublishedPipelineRepository {

    private static final Map<String, List<PublishedPipeline>> publishedPipelinesByCode = new ConcurrentHashMap<>();

    public List<PublishedPipeline> findAllByCode(final String code) {
        return publishedPipelinesByCode
                .computeIfAbsent(code, key -> newArrayList())
                .stream()
                .sorted(Comparator.comparing(PublishedPipeline::getPublished).reversed())
                .collect(toList());
    }

    @Override
    public PublishedPipeline findByCodeAndVersion(final String code, final String version) {
        return publishedPipelinesByCode
                .computeIfAbsent(code, key -> newArrayList())
                .stream()
                .filter(pipeline -> version == null || pipeline.getVersion().equals(version))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("no such pipeline"));
    }

    @Override
    public PublishedPipeline create(final PublishedPipeline pipeline) {
        final String nextVersion = Integer.toString(
                findAllByCode(pipeline.getPipelineCode())
                        .stream()
                        .mapToInt(x -> Integer.parseInt(x.getVersion()))
                        .max()
                        .orElse(0)
                        + 1
        );

        final PublishedPipeline published = pipeline.copy()
                .version(nextVersion)
                .published(Instant.now())
                .build();

        publishedPipelinesByCode
                .computeIfAbsent(pipeline.getPipelineCode(), code -> newArrayList())
                .add(published);

        return published;
    }

}
