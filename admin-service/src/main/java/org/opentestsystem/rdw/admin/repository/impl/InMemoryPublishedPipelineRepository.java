package org.opentestsystem.rdw.admin.repository.impl;

import org.opentestsystem.rdw.admin.model.PublishedPipeline;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.opentestsystem.rdw.admin.repository.PublishedPipelineRepository;
import org.springframework.stereotype.Repository;

import java.time.Instant;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;

/**
 * Placeholder in-memory version of the published pipeline repository
 */
@Repository
class InMemoryPublishedPipelineRepository implements PublishedPipelineRepository {

    private static final Map<String, List<PublishedPipeline>> publishedPipelinesByCode = new ConcurrentHashMap<>();
    private final PipelineRepository pipelineRepository;

    InMemoryPublishedPipelineRepository(final PipelineRepository pipelineRepository) {
        this.pipelineRepository = pipelineRepository;
    }

    public List<PublishedPipeline> findAllByCode(final String code) {
        return findAllByCodeAndVersion(code, null);
    }

    @Override
    public List<PublishedPipeline> findAllByCodeAndVersion(final String code, final Integer version) {
        return publishedPipelinesByCode
                .computeIfAbsent(code, key -> newArrayList())
                .stream()
                .filter(pipeline -> version == null || pipeline.getVersion().equals(version))
                .sorted(Comparator.comparing(PublishedPipeline::getPublished).reversed())
                .collect(toList());
    }

    @Override
    public PublishedPipeline create(final PublishedPipeline pipeline) {
        final String pipelineCode = pipelineRepository
                .findById(pipeline.getPipelineId()).getCode();

        final int nextVersion =  findAllByCode(pipelineCode)
                .stream()
                .mapToInt(PublishedPipeline::getVersion)
                .max().orElse(0) + 1;

        final PublishedPipeline published = pipeline.copy()
                .version(nextVersion)
                .published(Instant.now())
                .build();

        publishedPipelinesByCode
                .computeIfAbsent(pipelineCode, code -> newArrayList())
                .add(published);

        return published;
    }

}
