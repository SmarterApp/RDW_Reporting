package org.opentestsystem.rdw.admin.status;

import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    @Value("${sql.status.readTest}")
    private String sqlReadTest;

    private final JdbcOperations jdbcOperations;

    @Autowired
    DatabaseStatusIndicator(final NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
        this.jdbcOperations = namedParameterJdbcTemplate.getJdbcOperations();
    }

    @Override
    public String name() {
        return "database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final Status.Builder opBuilder = Status.builder().detail("schema", "warehouse").detail("type", "READ");
        final List<String> codes = responseTime(opBuilder, 50, () -> jdbcOperations.queryForList(sqlReadTest, String.class));
        if (codes.size() != ImportStatus.values().length) {
            opBuilder.rating(Rating.Warning);
            opBuilder.detail("warning", "import_status table not loaded properly");
        }

        final List<Status> ops = newArrayList(opBuilder.build());

        builder.detail("databaseOperations", ops);
        builder.worstRating(ops);
    }
}
