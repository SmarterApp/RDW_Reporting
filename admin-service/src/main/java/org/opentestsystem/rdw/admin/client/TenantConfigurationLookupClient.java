package org.opentestsystem.rdw.admin.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


/**
 * Lookup client for the tenant configuration to call rdw services' actuator endpoints
 * for Default properties
 */
public class TenantConfigurationLookupClient {
    private static final Logger logger = LoggerFactory.getLogger(TenantConfigurationLookupClient.class);

    private final TenantConfigurationLookupProperties tenantConfigurationLookupProperties;

    @Autowired
    public TenantConfigurationLookupClient(TenantConfigurationLookupProperties tenantConfigurationLookupProperties) {
        this.tenantConfigurationLookupProperties = tenantConfigurationLookupProperties;
    }

    /**
     * @return a List of Response Entities for each tenant aware service
     */
    public List<ResponseEntity<String>> getRawConfigurations() {
        RestTemplate restTemplate = new RestTemplate();

        List<String> serviceUrls = tenantConfigurationLookupProperties
                .getServices()
                .values()
                .stream()
                .map(String::toString)
                .collect(Collectors.toList());

        List<ResponseEntity<String>> responses = new ArrayList<>();
        serviceUrls.forEach(url -> {
            try {
                ResponseEntity<String> responseEntity = restTemplate.getForEntity(url + "/configprops", String.class);
                responses.add(responseEntity);
            } catch(Exception e) {
                logger.error("Cannot contact {} for configProps at this time.",url);
            }
        });
        return responses;
    }

    /**
     * @return a Map of services, and their ResponseEntities for each tenant Aware service
     */
    public Map<String, ResponseEntity<String>> getRawConfigurationsByService() {
        RestTemplate restTemplate = new RestTemplate();

        Map<String, ResponseEntity<String>> responseEntityMap = new HashMap<>();
        tenantConfigurationLookupProperties.getServices()
                .forEach( (k,v) -> {
                    ResponseEntity<String> responseEntity = restTemplate.getForEntity(v + "/configprops", String.class);
                    if(responseEntity.getStatusCode().is2xxSuccessful()) {
                        responseEntityMap.put(k, responseEntity);
                    }
                });
        return responseEntityMap;
    }
}

