package org.opentestsystem.rdw.admin.multitenant.configprops;

import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;

import java.util.Map;
import java.util.Optional;

public interface ConfigpropsService {

    /**
     * Default configuration for {@link ReportingSystemSettings}
     *
     * @return default configuration if one is found
     */
    Optional<ReportingSystemSettings> defaultReportingSystemProperties();

    /**
     * Tenant specific configuration for {@link ReportingSystemPropertiesImpl}
     *
     * @param tenantKey tenant identifier
     * @return tenant specific configuration if one is found
     */
    Optional<ReportingSystemPropertiesImpl> reportingSystemProperties(String tenantKey);

    /**
     * Default configuration for {@link ArchivePropertiesRoot}
     *
     * @return default configuration if one is found
     */
    Optional<ArchivePropertiesRoot> defaultArchiveProperties();

    /**
     * Tenant specific configuration for {@link ArchivePropertiesTenant}
     *
     * @param tenantKey tenant identifier
     * @return tenant specific configuration if one is found
     */
    Optional<ArchivePropertiesTenant> archiveProperties(String tenantKey);

    /**
     * Default configuration for {@link AggregateReportingPropertiesRoot}
     *
     * @return default configuration if one is found
     */
    Optional<AggregateReportingPropertiesRoot> defaultAggregateReportingProperties();

    /**
     * Tenant specific configuration for {@link AggregateReportingPropertiesTenant}
     *
     * @param tenantKey tenant identifier
     * @return tenant specific configuration if one is found
     */
    Optional<AggregateReportingPropertiesTenant> aggregateReportingProperties(String tenantKey);


    /**
     * Configured {@link TenantProperties}
     *
     * @return tenant properties
     */
    Optional<TenantProperties> tenantProperties();

    /**
     * Default configurations for {@link DataSourceElementsProperties}
     *
     * @return default configurations if one is found
     */
    Map<String, DataSourceElementsProperties> defaultDataSourceElements();


    /**
     * Tenant specific configurations for {@link DataSourceElements}
     *
     * @param tenantKey tenant identifier
     * @return tenant specific configurations if one is found
     */
    Map<String, DataSourceElementsTenant> dataSourceElements(String tenantKey);

}
