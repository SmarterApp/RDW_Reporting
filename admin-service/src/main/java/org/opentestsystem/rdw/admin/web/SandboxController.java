package org.opentestsystem.rdw.admin.web;

import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/sandboxes")
public class SandboxController {

    private TenantService service;

    public SandboxController(TenantService service) {
        this.service = service;
    }

    @GetMapping
    //TODO convert from  AllApplicationTenantConfiguration to List<ApplicationTenantConfiguration>, add new controler for Tenants and get
    public Set<TenantConfiguration> getSandboxes() {
        return service.getAll(TenantService.TenantType.SANDBOX);
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public void create(@RequestBody final TenantConfiguration tenantConfiguration) {
        service.createTenant(tenantConfiguration);
    }

    @PutMapping
    @ResponseStatus(value = HttpStatus.OK)
    public void put(@RequestBody final TenantConfiguration tenantConfiguration) {
        service.updateTenant(tenantConfiguration);
    }

    @DeleteMapping("/{key}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(@PathVariable("key") final String key) {
        service.deleteTenant(key);
    }

    @GetMapping("/datasets")
    public List<DataSet> getDataSets() {
        return service.getSandboxDataSets();
    }
}
