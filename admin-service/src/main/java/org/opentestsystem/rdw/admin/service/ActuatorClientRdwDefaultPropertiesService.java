package org.opentestsystem.rdw.admin.service;

import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Optional;

/**
 * The service retrieve the configuration properties from the rdw services, for default and current tenants
 */
public interface ActuatorClientRdwDefaultPropertiesService {

    /*
     * @return the ResponseEntities from all of the rdw services
     */
    List<ResponseEntity<String>> getAllResponseEntities() ;


    /**
     * @return the Default settings ReportingSystemSettings
     */
    Optional<ReportingSystemPropertiesImpl> getReportingSystemSettingsDefault() ;

    /**
     * @param responseEntities from the services configProps
     * @return ReportingSystemSettings from the ResponseEntities with default and tenant information
     */
    Optional<ReportingSystemSettings> getReportingSystemSettings(List<ResponseEntity<String>> responseEntities);
    /**
     *
     * @param reportingSystemSettings the settings returned from the service
     * @return ReportingSystemPropertiesImpl of the default reporting system settings
     */
    Optional<ReportingSystemPropertiesImpl> getReportingSystemSettingsDefault(Optional<ReportingSystemSettings> reportingSystemSettings);


    /**
     * @return the Default settings for the ReadOnly DataSourceElements
     */
    Optional<DataSourceElementsTenant> getDataSourceElementsTenantDefault();
    /**
     * @param dataSourceElementsTenantProperties from the services configProps
     * @return the Default settings for the ReadOnly DataSourceElements
     */
    Optional<DataSourceElementsTenant> getDataSourceElementsTenantDefault(Optional<DataSourceElementsProperties> dataSourceElementsTenantProperties);
    /**
     * @param responseEntities from the service calls
     * @return ReadOnly DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    Optional<DataSourceElementsProperties> getDataSourceElementsProperties(List<ResponseEntity<String>> responseEntities);


    /**
     * @return the Default settings Read/Write DataSourceElements
     */
    Optional<DataSourceElementsTenant> getWritableDataSourceElementsTenantDefault() ;
    /**
     * @param writableDataSource from the service calls
     * @return Writable DataSourceElementsTenant from the DataSourceElementsProperties
     */
    Optional<DataSourceElementsTenant> getWritableDataSourceElementsTenantDefault(Optional<DataSourceElementsProperties> writableDataSource);
    /**
     * @param responseEntities from the service calls
     * @return Writable DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    Optional<DataSourceElementsProperties> getWritableDataSource(List<ResponseEntity<String>> responseEntities);


    /**
     * @return the Default settings Olap DataSourceElements
     */
    Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenantDefault() ;
    /**
     * @param olapDataSource from the service calls
     * @return the Olap DataSourceElementsTenant from the DataSourceElementsProperties
     */
    public Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenantDefault(Optional<DataSourceElementsProperties> olapDataSource);
    /**
     * @param responseEntities from the service calls
     * @return Olap DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getOlapDataSource(List<ResponseEntity<String>> responseEntities);


    /**
     * @return the Default settings Warehouse DataSourceElements
     */
    Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenantDefault() ;
    /**
     * @param warehouseDataSource from the service calls
     * @return Warehouse DataSourceElementsTenant from the DataSourceElementsProperties
     */
    Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenantDefault( Optional<DataSourceElementsProperties> warehouseDataSource);
    /**
     * @param responseEntities from the service calls
     * @return Warehouse DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getWarehouseDataSource(List<ResponseEntity<String>> responseEntities);


    /**
     * @return the Default settings for ArchiveProperties
     */
    Optional<ArchivePropertiesTenant> getArchivePropertiesTenantDefault();

    /**
     * @param archivePropertiesRoot from the service calls
     * @return the Default settings for ArchiveProperties
     */
    Optional<ArchivePropertiesTenant> getArchivePropertiesTenantDefault(Optional<ArchivePropertiesRoot> archivePropertiesRoot);
    /**
     * @param responseEntities from the service calls
     * @return ArchivePropertiesRoot from the responseEntities - contains tenant info
     */
    Optional<ArchivePropertiesRoot> getArchivePropertiesRoot(List<ResponseEntity<String>> responseEntities);


    /**
     * @return the Default settings for AggregateProperties
     */
    Optional<AggregateReportingPropertiesTenant> getAggregatePropertiesDefault();
    /**
     *
     * @param aggregatePropertiesRoot from the service calls
     * @return the Default settings for AggregateProperties
     */
    Optional<AggregateReportingPropertiesTenant> getAggregatePropertiesDefault(Optional<AggregateReportingPropertiesRoot> aggregatePropertiesRoot);
    /**
     * @param responseEntities from the service calls
     * @return AggregateReportingPropertiesRoot from the responseEntities - contains tenant info
     */
    public Optional<AggregateReportingPropertiesRoot> getAggregateReportingPropertiesRoot(List<ResponseEntity<String>> responseEntities);
}
