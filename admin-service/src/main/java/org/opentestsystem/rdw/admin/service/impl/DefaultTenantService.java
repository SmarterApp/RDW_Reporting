package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.configuration.multitenant.*;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * Service to manage tenant configurations.
 * //todo use tenantIdResolver and ReportingSystemSettings
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    private TenantProperties tenantProperties;
    // used to store the default information. But atm will be the initial Mock Tenant with
    // no tenantOverride information.
    private TenantConfiguration defaultTenantConfiguration;
    // Todo replace this initial in memory storage
    private HashMap<String, TenantConfiguration> tenantConfigurationMap = new HashMap<>();

    // todo use TenantProperties tenantProperties & reportingSettings
    @Autowired
    DefaultTenantService(TenantProperties tenantProperties) {
        tenantProperties = new TenantProperties(); // temp
        this.tenantProperties = tenantProperties;
        // And for the moment pre populate tenantConfigurationMap with the latest data
        defaultTenantConfiguration = createTenantWithDefaults();
    }

    @Override
    public List<TenantConfiguration> getAll() {
        return new ArrayList<>(tenantConfigurationMap.values());
    }

    @Override
    public TenantConfiguration createTenant(TenantOverride tenantOverride) {
        // check new tenant exists
        // get the default tenant information
        //    - use the TenantProperties to get the first tenant id
        //      then look up in Map
        // todo need to update the tenantProperties with latest information
        TenantConfiguration newTenantConfiguration = createTenantWithDefaults(tenantOverride);
        return tenantConfigurationMap.putIfAbsent(tenantOverride.getTenant().getId(), newTenantConfiguration);
    }

    @Override
    public void deleteTenant(String tenantId) {
        // todo - use a soft or (inactive) remove for tenant
        TenantConfiguration removedTenant = tenantConfigurationMap.remove(tenantId);
    }

    @Override
    public TenantConfiguration updateTenant(TenantOverride tenantOverride) {
        //should only overwrite the tenantOverride properties in each service in the tenantConfiguration
        // todo handle if not found properly
        validateTenantExists(tenantOverride);
        TenantConfiguration tenantConfiguration = tenantConfigurationMap.get(tenantOverride.getTenant().getId());
        tenantConfiguration.setTenantOverride(tenantOverride);
        // Todo Update appropriate yml files

        return tenantConfigurationMap.replace(tenantOverride.getTenant().getId(), tenantConfiguration);
    }

    /**
     * used for testing to add to the in memory cache
     * todo add the write to yml file
     * @param tenantConfiguration to add to the memory map
     */
    public void addTenantConfiguration(TenantConfiguration tenantConfiguration) {
        tenantConfigurationMap.put(tenantConfiguration.getTenant().getId(), tenantConfiguration);
    }

    /**
     * Create the top level TenantConfiguration with the default settings
     *  and no tenantOverride data.
     * @return a new tenantConfiguration with the default settings
     */
    private TenantConfiguration createTenantWithDefaults() {
        TenantOverride tenantOverride = TenantConfigurationStubs.getTenantOverrideCA();
        return createTenantWithDefaults(tenantOverride);
    }

    private void validateTenantExists(TenantOverride tenantOverride){
       if (!tenantConfigurationMap.containsKey(tenantOverride.getTenant().getId())) {
           throw new NoSuchElementException("Tenant: " + tenantOverride.getTenant().getName() +
                   " id: " + tenantOverride.getTenant().getId() + " not found");
       }
    }

    /**
     * Create a TenantConfiguration with the data gathered the Instance's services
     * which is the default tenant information
     * If the TenantOverride is sent
     * TODO call other services to retrieve current instance settings for tenant defaults
     */
    private TenantConfiguration createTenantWithDefaults(TenantOverride tenantOverride) {
        TenantConfiguration tenantConfiguration;

        // allow for empty tenantOverride - for initial requests.
        // allow to create
        if( tenantOverride.getTenant() == null ||
              tenantOverride.getTenant().getId().equalsIgnoreCase("CA")) {
            tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaults();
        } else {
            tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        }
//        TODO look up tenant and property information
//        List <TenantProperties.Tenant> tenantList = tenantProperties.getTenants();
//        String tenantId = tenantList.get(0).getId();
//        Optional<TenantProperties.Tenant> tenant = tenantProperties.findTenantById(tenantId);
//        if(!tenant.isPresent()) {
//            logger.error("Cannot locate ANY tenants - Error out ");
//        }
//         tenantConfiguration.setTenant(tenant.get());

        // only need to update if there is tenant information
        if( tenantOverride.getTenant() != null ) {
            tenantConfiguration.setTenantOverride(tenantOverride);
        }
        return tenantConfiguration;
    }


}
