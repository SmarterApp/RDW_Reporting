package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;


/**
 * Service to manage tenant configurations.
 * //todo Update to actually read and update application properties yml files
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    private TenantProperties tenantProperties;
    private InMemoryTenantRepository inMemoryTenantRepository;
    private ReportingTenantIdResolver reportingTenantIdResolver;
    private DefaultActuatorClientRdwService defaultActuatorClientRdwService;

    @Autowired
    DefaultTenantService(TenantProperties tenantProperties, InMemoryTenantRepository inMemoryTenantRepository,
                         ReportingTenantIdResolver reportingTenantIdResolver, DefaultActuatorClientRdwService defaultActuatorClientRdwService) {
        this.tenantProperties = tenantProperties;
        this.inMemoryTenantRepository = inMemoryTenantRepository;
        this.reportingTenantIdResolver = reportingTenantIdResolver;
        this.defaultActuatorClientRdwService = defaultActuatorClientRdwService;
    }

    /**
     * Add mock data for testing
     * Remove once real data is available
     */
    private void addMockData() {
        inMemoryTenantRepository.add(TenantConfigurationStubs.createMockTenantCA());
        inMemoryTenantRepository.add(TenantConfigurationStubs.createMockTenantNV());
    }

    @Override
    public AllApplicationTenantConfiguration getAll() {
        Map<String, TenantConfiguration> tenantConfigurationMap = getTenantConfigurationFromTenantProperties();
        logger.info("TenantCfg GetAll, CurrentTenant key is {} and current TenantCfgMap has a count of {}",
                getCurrentTenantKey(), tenantConfigurationMap.size());

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = getAllApplicationTenantConfiguration(tenantConfigurationMap);
        updateInMemoryTenantConfigurations(tenantConfigurationMap);

        // todo retrieve the default information from application api/yml settings
        if(allApplicationTenantConfiguration.getApplicationTenantConfiguration() == null) {
            allApplicationTenantConfiguration.setApplicationTenantConfiguration(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration());
        }
        allApplicationTenantConfiguration.setTenants(inMemoryTenantRepository.getAll());
        return allApplicationTenantConfiguration;
    }

    /**
     * todo look at refactoring and caching and WHERE to pick up the localization for each tenantConfiguration
     * @param tenantConfigurationMap currently configured tenants
     * @return currently configured  default properties and the tenantConfiguration data from actuator endpoints
     */
    private AllApplicationTenantConfiguration getAllApplicationTenantConfiguration(final Map<String, TenantConfiguration> tenantConfigurationMap) {
        AllApplicationTenantConfiguration allApplicationTenantConfiguration = new AllApplicationTenantConfiguration();
        List<ResponseEntity<String>> responseList = defaultActuatorClientRdwService.getAllResponseEntities();
        ApplicationTenantConfiguration defaultApplicationTenantConfiguration = new ApplicationTenantConfiguration();

        logger.info("Successfully called the rdw services for properties {}.", responseList);

        //
        // get reporting data
        Optional<ReportingSystemSettings> reportingSystemSettings = defaultActuatorClientRdwService.getReportingSystemSettings(responseList);
        if (reportingSystemSettings.isPresent()) {
            // get Default ReportingSystemSettings Data
            Optional<ReportingSystemPropertiesImpl> reportingSystemProperties = defaultActuatorClientRdwService.getReportingSystemSettingsDefault(reportingSystemSettings);
            if (reportingSystemProperties.isPresent()) {
                logger.info("Add Default ReportingSystemSettings");
                defaultApplicationTenantConfiguration.setReporting(reportingSystemProperties.get());
            }
            // Add each tenantConfiguration's reportingSystemSettings overrides
            Map<String, ReportingSystemPropertiesImpl> reportingTenants = reportingSystemSettings.get().getTenants();
            reportingTenants.forEach((k,r) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s ReportingSystemSettings overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().setReporting(r);
                } // todo tbd on handling if service's reporting tenants is not in the overall tenant list
            });
        }

        //
        // Get dataSources for default and tenant Configurations
        Map<String,DataSourceElementsTenant> defaultDataSources = new HashMap<>();

        // Get ReadOnly Reporting DataSources
        Optional<DataSourceElementsProperties> dataSourceReadOnlyElementsProperties = defaultActuatorClientRdwService.getDataSourceElementsProperties(responseList);
        if (dataSourceReadOnlyElementsProperties.isPresent()) {
            // get Default dataSourceReadOnly DataSources
            Optional<DataSourceElementsTenant> dataSourceReadOnly = defaultActuatorClientRdwService.getDataSourceElementsTenantDefault(dataSourceReadOnlyElementsProperties);
            if (dataSourceReadOnly.isPresent()) {
                logger.info("Add Default Reporting ReadOnly DataSource");
                defaultDataSources.put("reporting_ro", dataSourceReadOnly.get());
            }
            // Add each tenantConfiguration's read only dataSet overrides
            Map<String, DataSourceElementsTenant> readOnlyTenants = dataSourceReadOnlyElementsProperties.get().getTenants();
            readOnlyTenants.forEach((k,d) -> {
                if(tenantConfigurationMap.containsKey(k) ) {
                    logger.info("Add tenant {}'s Reporting ReadOnly DataSource overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().getDataSources().put("reporting_ro", d);
                }
                // todo tbd on handling if service's readonly dataSet tenants is not in the overall tenant list
            });
        }

        // Get the Writable Reporting DataSources
        Optional<DataSourceElementsProperties> writableDataSetProperties = defaultActuatorClientRdwService.getWritableDataSource(responseList);
        if (writableDataSetProperties.isPresent()) {
            // get Default writableDataSetProperties DataSources
            Optional<DataSourceElementsTenant> dataSourceWritable = defaultActuatorClientRdwService.getWritableDataSourceElementsTenantDefault(writableDataSetProperties);
            if (dataSourceWritable.isPresent()) {
                logger.info("Add Default Reporting Writable DataSource");
                defaultDataSources.put("reporting_rw", dataSourceWritable.get());
            }
            // Add each tenantConfiguration's dataSourceWritable overrides
            Map<String, DataSourceElementsTenant> writableTenants = writableDataSetProperties.get().getTenants();
            writableTenants.forEach((k,d) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s Reporting ReadOnly DataSource overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().getDataSources().put("reporting_rw", d);
                } // todo tbd on handling if service's writable dataSets is not in the overall tenant list
            });
        }

        // Get the Warehouse DataSources
        Optional<DataSourceElementsProperties> warehouseDataSetProperties = defaultActuatorClientRdwService.getWarehouseDataSource(responseList);
        if (writableDataSetProperties.isPresent()) {
            // get Default warehouseDataSetProperties DataSources
            Optional<DataSourceElementsTenant> dataSourceWarehouse = defaultActuatorClientRdwService.getWarehouseDataSourceElementsTenantDefault(warehouseDataSetProperties);
            if (dataSourceWarehouse.isPresent()) {
                logger.info("Add Default Reporting Warehouse DataSource");
                defaultDataSources.put("warehouse_rw", dataSourceWarehouse.get());
            }
            // Add each tenantConfiguration's dataSourceWarehouse overrides
            Map<String, DataSourceElementsTenant> warehouseTenants = warehouseDataSetProperties.get().getTenants();
            warehouseTenants.forEach((k,d) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s Reporting Warehouse DataSource overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().getDataSources().put("warehouse_rw", d);
                } // todo tbd on handling if service's warehouse dataSets is not in the overall tenant list
            });
        }

        // Get the Olap DataSources
        Optional<DataSourceElementsProperties> olapDataSetProperties = defaultActuatorClientRdwService.getOlapDataSource(responseList);
        if (writableDataSetProperties.isPresent()) {
            // get Default warehouseDataSetProperties DataSources
            Optional<DataSourceElementsTenant> dataSourceOlap = defaultActuatorClientRdwService.getOlapDataSourceElementsTenantDefault(olapDataSetProperties);
            if (dataSourceOlap.isPresent()) {
                logger.info("Add Default Reporting OLAP DataSource");
                defaultDataSources.put("olap_ro", dataSourceOlap.get());
            }
            // Add each tenantConfiguration's dataSourceWarehouse overrides
            Map<String, DataSourceElementsTenant> olapTenants = olapDataSetProperties.get().getTenants();
            olapTenants.forEach((k,d) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s Reporting OLAP DataSource overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().getDataSources().put("olap_ro", d);
                } // todo tbd on handling if service's olap dataSets is not in the overall tenant list
            });
        }

        // Get the Archive Properties
        Optional<ArchivePropertiesRoot> archiveProperties = defaultActuatorClientRdwService.getArchivePropertiesRoot(responseList);
        if (archiveProperties.isPresent()) {
            // get Default archiveProperties
            Optional<ArchivePropertiesTenant> archivePropertiesTenant = defaultActuatorClientRdwService.getArchivePropertiesTenantDefault(archiveProperties);
            if (archivePropertiesTenant.isPresent()) {
                logger.info("Add Default Reporting Archive Properties");
                defaultApplicationTenantConfiguration.setArchiveProperties(archivePropertiesTenant.get());
            }
            // Add each archiveProperties overrides
            Map<String, ArchivePropertiesTenant> archiveTenants = archiveProperties.get().getTenants();
            archiveTenants.forEach((k,a) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s Reporting ArchiveProperties overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().setArchiveProperties(a);
                } // todo tbd on handling if service's archiveProperties is not in the overall tenant list
            });
        }

        // Get the AggregateReporting properties
        Optional<AggregateReportingPropertiesRoot> aggregateProperties = defaultActuatorClientRdwService.getAggregateReportingPropertiesRoot(responseList);
        if (aggregateProperties.isPresent()) {
            // get Default aggregateProperties
            Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = defaultActuatorClientRdwService.getAggregatePropertiesDefault(aggregateProperties);
            if (aggregatePropertiesTenant.isPresent()) {
                logger.info("Add Default AggregateReportingProperties");
                defaultApplicationTenantConfiguration.setAggregateReportingPropertiesTenant(aggregatePropertiesTenant.get());
            }
            // Add each AggregateReportingPropertiesTenant overrides
            Map<String, AggregateReportingPropertiesTenant> aggregateTenants = aggregateProperties.get().getTenants();
            aggregateTenants.forEach((k,a) -> {
                if(tenantConfigurationMap.containsKey(k)) {
                    logger.info("Add tenant {}'s Reporting AggregateReportingProperties overrides", k);
                    tenantConfigurationMap.get(k).getApplicationTenantConfiguration().setAggregateReportingPropertiesTenant(a);
                } // todo tbd on handling if service's setAggregateReportingPropertiesTenant is not in the overall tenant list
            });
        }

        // update the returned configuration of default and tenant data
        defaultApplicationTenantConfiguration.setDataSources(defaultDataSources);

        allApplicationTenantConfiguration.setApplicationTenantConfiguration(defaultApplicationTenantConfiguration);
        allApplicationTenantConfiguration.setTenants(ImmutableSet.copyOf(tenantConfigurationMap.values()));
        return allApplicationTenantConfiguration;
    }

    /**
     * Used to populate the inMemoryMap
     * - if null and there are no tenants configured - ATM return mock data (TODO remove)
     * @param tenantConfigurationMap
     */
    private void updateInMemoryTenantConfigurations(final Map<String, TenantConfiguration> tenantConfigurationMap) {
        // add tenantConfiguration to memory if nothing is there - keep until git Write is done
        if(inMemoryTenantRepository.getAll().isEmpty()) {
            if(tenantConfigurationMap.isEmpty()) {
                //  add Mock data CA & NV - remove once real data is retrieved
                addMockData();
            } else {
                tenantConfigurationMap.forEach((key, t) -> inMemoryTenantRepository.add(t));
            }
        } // if not empty expecting existing ImMemory is in sync with any user changes and yml file updates.
    }

    @Override
    public TenantConfiguration createTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Creating a new tenant with key {}", tenantConfiguration.getTenant().getKey());

        validateNewTenant(tenantConfiguration);
        return inMemoryTenantRepository.add(tenantConfiguration);
    }

    @Override
    public void deleteTenant(final String tenantKey) {
        // todo - TBD use a soft or (inactive) remove for tenant, for now removing from inmemoryMap
        logger.debug("Removing tenant {}", tenantKey);
        inMemoryTenantRepository.delete(tenantKey);
    }

    @Override
    public TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Updating tenant {}", tenantConfiguration.getTenant().getKey());

        validateTenantExists(tenantConfiguration);
        // Todo Update appropriate yml files
        return inMemoryTenantRepository.update(tenantConfiguration);
    }

    /**
     * @return the current Tenant Key - and if null the mock tenant for now.
     */
    private String getCurrentTenantKey() {
        // todo replace 'else' with something else
        return reportingTenantIdResolver.getTenantId().orElse(TenantConfigurationStubs.getTenantCA().getKey());
    }

    /**
     * Validates the tenant does not exist
     * @param tenantConfiguration the tenant to validate does not exist
     */
    private void validateNewTenant(final TenantConfiguration tenantConfiguration) {

        // see if tenant key is in app settings or in memory map
        // TODO uncomment out once the tenant properties are beging actively updated
        //if(isTenantFound(tenantConfiguration.getTenant().getKey()) ||
        if( inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
            String errorMsg = "Tenant: " + tenantConfiguration.getTenant().getName() +
                    " key: " + tenantConfiguration.getTenant().getKey() + " exists already. Please update existing tenant, or add another tenant key.";
            logger.error(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    /**
     * Validates the tenant is in the current memory map and in the tenantProperties
     * must exist in both - tbd what to do if not
     * @param tenantConfiguration tenant to valid exists
     */
    private void validateTenantExists(TenantConfiguration tenantConfiguration){

        // make sure tenant key is in app settings and in tenant storage
        // TODO uncomment out once the tenant properties are beging actively updated
        //if(!isTenantFound(tenantConfiguration.getTenant().getKey()) ||
        if( !inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
            String errorMsg = "Tenant: " + tenantConfiguration.getTenant().getName() +
                    " key: " + tenantConfiguration.getTenant().getKey() + " not found.";
            logger.error(errorMsg);
            throw new NoSuchElementException(errorMsg);
        }
    }

    /**
     * return if the tenant is located in the tenantProperty tenant list.
     * @param key the key of the tenant to find
     * @return true if the key exists
     */
    private boolean isTenantFound(final String key) {
        if (tenantProperties != null) {
            //  TODO undo once tenantProperties in place
            return tenantProperties.getTenants().containsKey(key);
        }
        return false;
    }

    /**
     * @return a map of TenantConfigurations created from the tenantProperties
     */
    private Map<String, TenantConfiguration> getTenantConfigurationFromTenantProperties() {
        Map<String, TenantConfiguration> tenantConfigurationMap = new HashMap<>();

        // need a tenantConfiguration for each tenant
        Map<String, Tenant> tenants = tenantProperties.getTenants();
        tenants.forEach((key, t) -> {
            TenantConfiguration tenantConfiguration = new TenantConfiguration();
            Tenant tenant = new Tenant();
            tenant.setKey(t.getKey());
            tenant.setId(t.getId());
            tenant.setDescription(t.getDescription());
            tenant.setName(t.getName());
            tenantConfiguration.setTenant(tenant);

            ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
            Map<String, DataSourceElementsTenant> tenantDataSources = new HashMap<>();
            applicationTenantConfiguration.setDataSources(tenantDataSources);
            //todo remove
            if(t.getKey().equals("CA")) {
                TenantConfiguration tenantCfgCA = TenantConfigurationStubs.createMockTenantCA();
                applicationTenantConfiguration.setArchiveProperties(tenantCfgCA.getApplicationTenantConfiguration().getArchiveProperties());
                applicationTenantConfiguration.setReporting(tenantCfgCA.getApplicationTenantConfiguration().getReporting());
                applicationTenantConfiguration.setDataSources(tenantCfgCA.getApplicationTenantConfiguration().getDataSources());
            } else {
                applicationTenantConfiguration.setArchiveProperties(TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getArchiveProperties());
                applicationTenantConfiguration.setReporting(TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getReporting());
                applicationTenantConfiguration.setDataSources(TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getDataSources());
            }

            tenantConfiguration.setApplicationTenantConfiguration(applicationTenantConfiguration);
            tenantConfigurationMap.put(key,tenantConfiguration);
        });
        return tenantConfigurationMap;
    }

}
