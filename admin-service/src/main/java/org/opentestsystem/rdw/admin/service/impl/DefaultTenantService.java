package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.configuration.multitenant.ServiceProperties;
import org.opentestsystem.rdw.admin.configuration.multitenant.Tenant;
import org.opentestsystem.rdw.admin.configuration.multitenant.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Service to manage tenant configurations.
 * //todo use tenantIdResolver and ReportingSystemSettings
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    // Todo replace this initial in memory storage
    private HashMap<String, TenantConfiguration> tenantConfigurationMap = new HashMap<>();

    // todo use TenantProperties tenantProperties & reportingSettings
    @Autowired
    DefaultTenantService() {
    }

    @Override
    public List<TenantConfiguration> getAll() {
        return new ArrayList<>(tenantConfigurationMap.values());
    }

    @Override
    public TenantConfiguration createTenant(TenantConfiguration tenantConfiguration) {
        return tenantConfigurationMap.putIfAbsent(tenantConfiguration.getTenantIdFromServiceProperties(), tenantConfiguration);
    }

    @Override
    public void deleteTenant(String tenantId) {
        // todo - use a soft or (inactive) remove for tenant
        TenantConfiguration removedTenant = tenantConfigurationMap.remove(tenantId);
    }

    @Override
    public TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration) {
        // Todo - the data in tenantConfiguration will contain only the changes/overrides
        //should only override the tenantOverride properties in each service in the tenantConfiguration
        //
        return tenantConfigurationMap.replace(tenantConfiguration.getTenantIdFromServiceProperties(), tenantConfiguration);
    }

    /**
     * used for testing to add to the in memory cache
     * todo add the write to yml file
     * @param tenantConfiguration to add to the memory map
     */
    public void addTenantConfiguration(TenantConfiguration tenantConfiguration) {
        tenantConfigurationMap.put(tenantConfiguration.getTenantIdFromServiceProperties(), tenantConfiguration);
    }


}
