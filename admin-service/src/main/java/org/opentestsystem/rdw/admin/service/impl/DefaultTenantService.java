package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;

import org.opentestsystem.rdw.admin.exception.DuplicateTenantException;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;

import org.apache.commons.lang3.tuple.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;


/**
 * Service to manage tenant configurations.
 * //todo update application properties yml files
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    private TenantProperties tenantProperties;
    // todo Remove inMemoryTenantRepository
    private InMemoryTenantRepository inMemoryTenantRepository;
    private ReportingTenantIdResolver reportingTenantIdResolver;
    private DefaultTenantConfigPropsService defaultActuatorServicesProperties;
    private TenantAdministrationStatusService tenantAdministrationStatusService;

    @Autowired
    DefaultTenantService(TenantProperties tenantProperties, InMemoryTenantRepository inMemoryTenantRepository,
                         ReportingTenantIdResolver reportingTenantIdResolver, DefaultTenantConfigPropsService defaultActuatorServicesProperties,
                         TenantAdministrationStatusService tenantAdministrationStatusService) {
        this.tenantProperties = tenantProperties;
        this.inMemoryTenantRepository = inMemoryTenantRepository;
        this.reportingTenantIdResolver = reportingTenantIdResolver;
        this.defaultActuatorServicesProperties = defaultActuatorServicesProperties;
        this.tenantAdministrationStatusService = tenantAdministrationStatusService;
    }

    @Override
    public AllApplicationTenantConfiguration getAll() {
        Map<String, TenantConfiguration> tenantConfigurationMap = getTenantConfigurationFromTenantProperties();
        logger.info("TenantCfg GetAll, CurrentTenant key is {} and current TenantCfgMap has a count of {}",
                getCurrentTenantKey(), tenantConfigurationMap.size());

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = getAllApplicationTenantConfiguration(tenantConfigurationMap);
        updateInMemoryTenantConfigurations(tenantConfigurationMap);

        allApplicationTenantConfiguration.setTenants(inMemoryTenantRepository.getAll());
        return allApplicationTenantConfiguration;
    }

    /**
     * @param tenantConfigurationMap currently configured tenants
     * @return currently configured  default properties and the tenantConfiguration data from actuator endpoints
     */
    private AllApplicationTenantConfiguration getAllApplicationTenantConfiguration(Map<String, TenantConfiguration> tenantConfigurationMap) {
        AllApplicationTenantConfiguration allApplicationTenantConfiguration = new AllApplicationTenantConfiguration();
        defaultActuatorServicesProperties.servicesPropertiesRefresh();
        ApplicationTenantConfiguration defaultApplicationTenantConfiguration = defaultActuatorServicesProperties.getDefaultApplicationTenantConfiguration();

        tenantConfigurationMap.forEach((k, t) -> {
            logger.info("Add TenantConfiguration {}'s overrides", k);
            t.setApplicationTenantConfiguration(defaultActuatorServicesProperties.getTenantAppConfiguration(k));
            // where localization goes
        });

        allApplicationTenantConfiguration.setApplicationTenantConfiguration(defaultApplicationTenantConfiguration);
        allApplicationTenantConfiguration.setTenants(ImmutableSet.copyOf(tenantConfigurationMap.values()));
        return allApplicationTenantConfiguration;
    }

    /**
     * Used to populate the inMemoryMap
     *
     * @param tenantConfigurationMap the tenantMap to add
     */
    private void updateInMemoryTenantConfigurations(final Map<String, TenantConfiguration> tenantConfigurationMap) {
        // add tenantConfiguration to memory if nothing is there - keep until git Write is done
        if (inMemoryTenantRepository.getAll().isEmpty()) {
            tenantConfigurationMap.forEach((key, t) -> inMemoryTenantRepository.add(t));
        } // if not empty expecting existing ImMemory is in sync with any user changes and yml file updates.
    }

    @Override
    public TenantConfiguration createTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Creating a new tenant with key {}", tenantConfiguration.getTenant().getKey());
        validateNewTenant(tenantConfiguration);
        // TODO call service to start the tenantCreations
        // do not return tenantCfg to UI
        return inMemoryTenantRepository.add(tenantConfiguration);
    }

    @Override
    public void deleteTenant(final String tenantKey) {
        // todo - TBD use a soft or (inactive) remove for tenant, for now removing from inmemoryMap
        logger.debug("Removing tenant {}", tenantKey);
        inMemoryTenantRepository.delete(tenantKey);
    }

    @Override
    public TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration) {
        logger.debug("Updating tenant {}", tenantConfiguration.getTenant().getKey());
        validateTenantExists(tenantConfiguration);
        // Todo Update appropriate yml files
        return inMemoryTenantRepository.update(tenantConfiguration);
    }

    /**
     * @return the current Tenant Key - and if null the mock tenant for now.
     */
    private String getCurrentTenantKey() {
        // todo replace 'else' with something else
        return reportingTenantIdResolver.getTenantId().orElse(TenantConfigurationStubs.getTenantCA().getKey());
    }

    /**
     * Validates the tenant does not exist, thr
     * the archive prefix does not exist
     * the database for each dataSource does not exist
     *
     * @param tenantConfiguration the tenant to validate does not exist
     */
    private void validateNewTenant(final TenantConfiguration tenantConfiguration) {
        verifyNewTenantExists(tenantConfiguration.getTenant());
        verifyTenantArchive(tenantConfiguration);
        verifyTenantDataSources(tenantConfiguration);
    }

    /**
     * @param tenant to check if it exists
     */
    private void verifyNewTenantExists(final Tenant tenant) {
        // see if tenant key is in app settings or in memory map
        if (isTenantFound(tenant.getKey()) ||
                inMemoryTenantRepository.tenantExists(tenant.getKey())) {
            String errorMsg = String.format("Tenant: %s, key: %s exists already. Please update existing tenant, or add another tenant key.",
                    tenant.getName(), tenant.getKey());
            logger.error(errorMsg);
            throw new DuplicateTenantException(errorMsg);
        }
    }

    /**
     * Verifies that the tenant's Archive S3 are unique
     *
     * @param tenantConfiguration the new tenantConfiguration to validate its archive properties
     */
    private void verifyTenantArchive(final TenantConfiguration tenantConfiguration) {
        if (defaultActuatorServicesProperties.archivePrefixExists(
                tenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getPathPrefix())) {
            String errorMsg = String.format("Tenant: %s, key: %s, the archive property :prefix exists already. " +
                            "Please use another Archive prefix for the new Tenant.",
                    tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey());
            logger.error(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }
    }

    /**
     * Verifies if the given Tenant's DataSources already exist in a configured Tenant
     * Throws an exception with the specific datasource name where the database was found
     *
     * @param tenantConfiguration the new tenantConfiguration to validate its databases
     */
    private void verifyTenantDataSources(final TenantConfiguration tenantConfiguration) {
        // check each datasource
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantConfiguration.getApplicationTenantConfiguration().getDataSources().entrySet()) {
            if (dataSource.getValue().getUrlParts() == null) {
                // default tenant information is not configured properly
                String errorMsg = String.format("Cannot create Tenant: %s, key: %s, the Database property %s is not configure correctly." +
                                " Please contact your admin.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getKey());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
            if (defaultActuatorServicesProperties.dataSourceExists(dataSource.getKey(), dataSource.getValue().getUrlParts().getDatabase())) {
                String errorMsg = String.format("Cannot create Tenant: %s, key: %s, the Database property %s exists already for DataSource %s." +
                                " Please use another database for the new Tenant.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getValue().getUrlParts().getDatabase(), dataSource.getKey());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
            if (dataSource.getKey().equals(RDWDataSourceNames.OLAP_RO.getName()) &&
                    defaultActuatorServicesProperties.dataSourceOlapExists(
                            dataSource.getValue().getUrlParts().getDatabase(), dataSource.getValue().getUsername())) {
                String errorMsg = String.format("Cannot create Tenant: %s key: %s, the Olap DataSource's userName %s already exists " +
                                "or the database %s does not match the default database. Please use a unique username and the same database for the new Tenant.",
                        tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey(),
                        dataSource.getValue().getUsername(), dataSource.getValue().getUrlParts().getDatabase());
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
            }
        }
    }

    /**
     * Validates the tenant is in the current memory map and in the tenantProperties
     * must exist in both - tbd what to do if not
     *
     * @param tenantConfiguration tenant to valid exists
     */
    private void validateTenantExists(TenantConfiguration tenantConfiguration) {
        // make sure tenant key is in app settings and in tenant storage
        if (!isTenantFound(tenantConfiguration.getTenant().getKey()) ||
                !inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
            String errorMsg = String.format("Tenant: %s, key: %s not found.",
                    tenantConfiguration.getTenant().getName(), tenantConfiguration.getTenant().getKey());
            logger.error(errorMsg);
            throw new NoSuchElementException(errorMsg);
        }
    }

    /**
     * return if the tenant is located in the tenantProperty tenant list.
     *
     * @param key the key of the tenant to find
     * @return true if the key exists
     */
    private boolean isTenantFound(final String key) {
        if (tenantProperties != null) {
            return tenantProperties.getTenants().containsKey(key);
        }
        return false;
    }

    /**
     * If active tenantKey is found in the tenantAdministrationStatusService then this needs to remove that endtry
     *
     * @return a map of TenantConfigurations created from the tenantProperties & tenantAdministrationStatusService
     */
    private Map<String, TenantConfiguration> getTenantConfigurationFromTenantProperties() {
        Map<String, TenantConfiguration> tenantConfigurationMap = new HashMap<>();
        // need the list of tenants being created
        Map<String, TenantAdministrationStatus> createTenantMap = tenantAdministrationStatusService.getTenants();

        // need a tenantConfiguration for each tenant
        Map<String, Tenant> tenants = tenantProperties.getTenants();
        tenants.forEach((key, t) -> {

            // only want tenants
            if (!t.isSandbox()) {
                TenantConfiguration tenantConfiguration = new TenantConfiguration();

                Tenant tenant = new Tenant();
                tenant.setKey(t.getKey());
                tenant.setId(t.getId());
                tenant.setDescription(t.getDescription());
                tenant.setName(t.getName());
                tenant.setCreated(t.getCreated());
                tenantConfiguration.setTenant(tenant);

                // see the any of the currents exist in the createTenantMap
                if (createTenantMap.containsKey(tenant.getKey())) {
                    // if it exists need to remove that tenant from the statusService
                    tenantAdministrationStatusService.remove(tenant.getKey());
                    createTenantMap.remove(tenant.getKey());
                }

                // each tenant has it's own applicationTenantConfiguration
                ApplicationTenantConfiguration applicationTenantConfiguration = getNewApplicationTenantConfiguration();
                tenantConfiguration.setApplicationTenantConfiguration(applicationTenantConfiguration);
                // add to return list
                tenantConfigurationMap.put(key, tenantConfiguration);
            }
        });

        // now we can add any tenants found in the statusMap into the returned tenantConfigurationMap
        createTenantMap.forEach((k, v) -> {
            Optional<Pair<TenantAdministrationStatus, TenantConfiguration>> tenantStatusMap = tenantAdministrationStatusService.findStatus(k);
            if (tenantStatusMap.isPresent()) {
                TenantConfiguration wipTenant = tenantStatusMap.get().getRight();
                if (!wipTenant.getTenant().isSandbox()) {
                    logger.debug("Tenant's create from the status service is {} and if its a sandbox = {}",
                            wipTenant.getTenant().getCreated(), wipTenant.getTenant().isSandbox());
                    tenantConfigurationMap.put(k, wipTenant);
                } // skip sandboxes in create status
            }
        });
        return tenantConfigurationMap;
    }

    /**
     * @return a new ApplicationTenantConfiguration containing an empty map for DataSources
     */
    private ApplicationTenantConfiguration getNewApplicationTenantConfiguration() {
        // each tenant has it's own applicationTenantConfiguration create the initial empty map of dataSources
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        Map<String, DataSourceElementsTenant> tenantDataSources = new HashMap<>();
        applicationTenantConfiguration.setDataSources(tenantDataSources);
        return applicationTenantConfiguration;
    }

}
