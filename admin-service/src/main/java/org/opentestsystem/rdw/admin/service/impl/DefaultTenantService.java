package org.opentestsystem.rdw.admin.service.impl;

import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;
import java.util.Optional;


/**
 * Service to manage tenant configurations.
 * //todo Update to actually read and update application properties yml files
 */
@Service
public class DefaultTenantService implements TenantService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantService.class);

    private TenantProperties tenantProperties;
    private InMemoryTenantRepository inMemoryTenantRepository;
    private DefaultTenantPropertiesService defaultTenantPropertiesService;

    @Autowired
    DefaultTenantService(TenantProperties tenantProperties, InMemoryTenantRepository inMemoryTenantRepository,
                         DefaultTenantPropertiesService defaultTenantPropertiesService) {
        this.tenantProperties = tenantProperties;
        this.inMemoryTenantRepository = inMemoryTenantRepository;
        //  add Mock data CA & NV - remove once real data is retrieved
        addMockData();
    }

    /**
     * Add mock data for testing
     * Remove once real data is available
     */
    private void addMockData() {
        inMemoryTenantRepository.add(TenantConfigurationStubs.createMockTenantCA());
        inMemoryTenantRepository.add(TenantConfigurationStubs.createMockTenantNV());
    }

    @Override
    public AllApplicationTenantConfiguration getAll() {
        AllApplicationTenantConfiguration allApplicationTenantConfiguration = new AllApplicationTenantConfiguration();
        // todo retrieve the default information from application api/yml settings
        allApplicationTenantConfiguration.setApplicationTenantConfiguration(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration());
        allApplicationTenantConfiguration.setTenants(inMemoryTenantRepository.getAll());
        return allApplicationTenantConfiguration;
    }

    @Override
    public TenantConfiguration createTenant(TenantConfiguration tenantConfiguration) {
        validateNewTenant(tenantConfiguration);
        return inMemoryTenantRepository.add(tenantConfiguration);
    }

    @Override
    public void deleteTenant(final String tenantKey) {
        // todo - TBD use a soft or (inactive) remove for tenant
        logger.debug("Removing tenant {}", tenantKey);
        inMemoryTenantRepository.delete(tenantKey);
    }

    @Override
    public TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration) {
        //should only overwrite the tenantOverride properties in each service in the tenantConfiguration
        // todo handle if not found properly
        validateTenantExists(tenantConfiguration);
        // Todo Update appropriate yml files
        return inMemoryTenantRepository.update(tenantConfiguration);
    }

    /**
     * used for testing to add tenants to the in memory cache
     * @param tenantConfiguration to add to the memory map
     */
    public void addTenantConfiguration(TenantConfiguration tenantConfiguration) {
        inMemoryTenantRepository.add(tenantConfiguration);
    }

    /**
     * Validates the tenant does not exist
     * @param tenantConfiguration the tenant to validate does not exist
     */
    private void validateNewTenant(final TenantConfiguration tenantConfiguration) {

        // see if tenant key is in app settings or in memory map
        if(isTenantFound(tenantConfiguration.getTenant().getKey()) ||
            inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
            // todo tbd proper handling
            throw new NoSuchElementException("Tenant: " + tenantConfiguration.getTenant().getName() +
                    " key: " + tenantConfiguration.getTenant().getKey() + " exists already. Please update existing tenant, or add another tenant key.");
        }
    }

    /**
     * Validates the tenant is in the current memory map and in the tenantProperties
     * must exist in both - tbd what to do if not
     * @param tenantConfiguration tenant to valid exists
     */
    private void validateTenantExists(TenantConfiguration tenantConfiguration){

        // make sure tenant key is in app settings and in tenant storage
        if(!isTenantFound(tenantConfiguration.getTenant().getKey()) ||
           !inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())) {
           throw new NoSuchElementException("Tenant: " + tenantConfiguration.getTenant().getName() +
                   " key: " + tenantConfiguration.getTenant().getKey() + " not found.");
       }
    }

    /**
     * return if the tenant is located in the tenantProperty tenant list.
     * @param key the key of the tenant to find
     * @return true if the key exists
     */
    private boolean isTenantFound(final String key) {
        Optional<TenantProperties.Tenant> foundTenant = Optional.empty();
        if (tenantProperties != null && tenantProperties.getTenants().size() != 0) {
            //  TODO undo once tenantProperties in place
            foundTenant = tenantProperties.getTenants().stream()
                    .filter(tenant ->
                            tenant.getKey().equals(key)
                    ).findFirst();
        }
        return foundTenant.isPresent();
    }

}
