package org.opentestsystem.rdw.admin.multitenant.configserver;

import org.opentestsystem.rdw.admin.multitenant.model.ApplicationTenantConfigurationPersistence;

import java.util.Optional;

/**
 * Client to the system's config Server
 */
public interface ConfigServerClient {
    /**
     * Initiate a refresh of system properties by posting to the /monitor endpoint
     * atm refresh all reporting applications
     *
     * @throws IllegalArgumentException not able to call /monitor endpoint
     */
    void postMonitor() throws IllegalArgumentException;

    /**
     * @param password to encrypt
     * @return the encrypted password
     * @throws IllegalArgumentException not able to call /encrypt endpoint
     */
    String encryptPassword(String password);

    /**
     * @param password password to decrypt
     * @return the decrypted password
     * @throws IllegalArgumentException not able to call /decrypt endpoint
     */
    String decryptPassword(String password);

    /**
     * expectation location path with file name will look like the following: /
     *//*//master//i18n//tenant-CA//en.json
     * @param path to the location file indicated by the language code
     * @param languageCode is used to create the i18n file name to read
     * @return if the file existed a string of the localization properties
     */
    Optional<String> getLocalization(String path, String languageCode);

    /**
     * Find the persisted tenant application.yml deserialized to {@link ApplicationTenantConfigurationPersistence}
     *
     * @param tenantKey the tenant to find
     * @return persisted configuration
     */
    Optional<ApplicationTenantConfigurationPersistence> findApplicationTenantConfigurationPersistence(String tenantKey);
}
