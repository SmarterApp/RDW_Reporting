package org.opentestsystem.rdw.admin.configuration;

import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsResolver;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

/**
 * This configuration is responsible for providing datasources for both reporting and warehouse.
 */
@Configuration
@EnableTransactionManagement
public class DataSourceConfiguration {

    /**
     * DataSourceElements for reporting
     *
     * @return reporting DataSourceElements
     */
    @Primary
    @Bean(name = "reportingDataSourceElementsProperties")
    @ConfigurationProperties("spring.reporting_datasource")
    @RefreshScope
    public DataSourceElementsProperties reportingDataSourceElementsProperties() {
        return new DataSourceElementsProperties();
    }

    /**
     * DataSourceElementsResolver for reporting
     *
     * @param tenantIdResolver             id resolver
     * @param dataSourceElementsProperties config properties
     * @return DataSourceElementsResolver
     */
    @Bean(name = "reportingDataSourceElementsResolver")
    @RefreshScope
    public DataSourceElementsResolver reportingDataSourceElementsResolver(TenantIdResolver tenantIdResolver,
                                                                          @Qualifier("reportingDataSourceElementsProperties") DataSourceElementsProperties dataSourceElementsProperties) {
        return new DataSourceElementsResolver(tenantIdResolver, dataSourceElementsProperties);
    }

    /**
     * Data source for the reporting data mart.
     *
     * @param dataSourceElementsResolver reporting DataSourceElementsResolver
     * @param reportingTenantIdResolver  reporting ReportingTenantIdResolver
     * @return DataSource
     */
    @Primary
    @Bean(name = "reportingDatasource")
    @RefreshScope
    public DataSource reportingDatasource(@Qualifier("reportingDataSourceElementsResolver") DataSourceElements dataSourceElementsResolver,
                                          ReportingTenantIdResolver reportingTenantIdResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElementsResolver, reportingTenantIdResolver);
    }

    /**
     * The jdbc template used for reading and writing to the reporting data mart.
     *
     * @return DataSource
     */
    @Primary
    @Bean(name = "reportingJdbcTemplate")
    public NamedParameterJdbcTemplate reportingJdbcTemplate(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The reporting transaction manager
     */
    @Bean(name = "reportingTxManager")
    public PlatformTransactionManager reportingTxManager(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    /**
     * DataSourceElements for warehouse
     *
     * @return warehouse DataSourceElements
     */
    @Bean(name = "warehouseDataSourceElementsProperties")
    @ConfigurationProperties("spring.warehouse_datasource")
    @RefreshScope
    public DataSourceElementsProperties warehouseDataSourceElementsProperties() {
        return new DataSourceElementsProperties();
    }

    /**
     * warehouse DataSourceElementsResolver
     *
     * @param tenantIdResolver             id resolver
     * @param dataSourceElementsProperties config properties
     * @return DataSourceElementsResolver
     */
    @Bean(name = "warehouseDataSourceElementsResolver")
    @RefreshScope
    public DataSourceElementsResolver warehouseDataSourceElementsResolver(TenantIdResolver tenantIdResolver,
                                                                          @Qualifier("warehouseDataSourceElementsProperties") DataSourceElementsProperties dataSourceElementsProperties) {
        return new DataSourceElementsResolver(tenantIdResolver, dataSourceElementsProperties);
    }

    /**
     * Data source for the data warehouse.
     *
     * @param dataSourceElementsResolver warehouse DataSourceElementsResolver
     * @param reportingTenantIdResolver  warehouse ReportingTenantIdResolver
     * @return DataSource
     */
    @Bean(name = "warehouseDatasource")
    @RefreshScope
    public DataSource warehouseDataSource(@Qualifier("warehouseDataSourceElementsResolver") DataSourceElements dataSourceElementsResolver,
                                          ReportingTenantIdResolver reportingTenantIdResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElementsResolver, reportingTenantIdResolver);
    }

    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean(name = "warehouseJdbcTemplate")
    public NamedParameterJdbcTemplate warehouseJdbcTemplate(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The warehouse transaction manager
     */
    @Bean(name = "warehouseTxManager")
    public PlatformTransactionManager warehouseTxManager(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }
}
