package org.opentestsystem.rdw.admin.configuration;

import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.multitenant.datasource.TenantDataSourceOverrideResolver;
import org.opentestsystem.rdw.multitenant.datasource.TenantDatasourceOverride;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

/**
 * This configuration is responsible for providing datasources for both reporting and warehouse.
 */
@Configuration
@EnableTransactionManagement
public class DataSourceConfiguration {

    /**
     * DataSourceElements for reporting
     *
     * @return reporting DataSourceElements
     */
    @Primary
    @Bean(name = "reportingDataSourceElements")
    @ConfigurationProperties("spring.reporting_datasource")
    public DataSourceElements reportingDataSourceProperties() {
        return new DataSourceElements();
    }

    /**
     * TenantDataSourceOverrideResolver for reporting
     *
     * @param dataSourceElements reporting DataSourceElements
     * @return TenantDataSourceOverrideResolver for reporting
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "reportingTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver reportingTenantDataSourceOverrideResolver(@Qualifier("reportingDataSourceElements") DataSourceElements dataSourceElements) {
        return createTenantDataSourceOverrideResolver(dataSourceElements);
    }

    @Bean
    public ReportingTenantIdResolver reportingTenantIdResolver() {
        return new ReportingTenantIdResolver();
    }

    /**
     * Data source for the reporting data mart.
     *
     * @param dataSourceElements               reporting DataSourceElements
     * @param tenantDataSourceOverrideResolver reporting TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Primary
    @Bean(name = "reportingDatasource")
    public DataSource reportingDatasource(@Qualifier("reportingDataSourceElements") DataSourceElements dataSourceElements,
                                          @Qualifier("reportingTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver,
                                          ReportingTenantIdResolver reportingTenantIdResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElements, tenantDataSourceOverrideResolver, reportingTenantIdResolver);
    }

    /**
     * The jdbc template used for reading and writing to the reporting data mart.
     *
     * @return DataSource
     */
    @Bean(name = "reportingJdbcTemplate")
    public NamedParameterJdbcTemplate reportingJdbcTemplate(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The reporting transaction manager
     */
    @Bean(name = "reportingTxManager")
    public PlatformTransactionManager reportingTxManager(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    /**
     * DataSourceElements for warehouse
     *
     * @return warehouse DataSourceElements
     */
    @Bean(name = "warehouseDataSourceProperties")
    @ConfigurationProperties("spring.warehouse_datasource")
    public DataSourceElements warehouseDataSourceElements() {
        return new DataSourceElements();
    }


    /**
     * TenantDataSourceOverrideResolver for warehouse
     *
     * @param dataSourceElements warehouse DataSourceElements
     * @return warehouse TenantDataSourceOverrideResolver
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "warehouseTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver warehouseTenantDataSourceOverrideResolver(
            @Qualifier("warehouseDataSourceProperties") DataSourceElements dataSourceElements) {
        return createTenantDataSourceOverrideResolver(dataSourceElements);
    }

    /**
     * Data source for the data warehouse.
     *
     * @param dataSourceElements               warehouse DataSourceElements
     * @param tenantDataSourceOverrideResolver warehouse TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Bean(name = "warehouseDatasource")
    public DataSource warehouseDataSource(@Qualifier("warehouseDataSourceProperties") DataSourceElements dataSourceElements,
                                          @Qualifier("warehouseTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver,
                                          ReportingTenantIdResolver reportingTenantIdResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceElements, tenantDataSourceOverrideResolver, reportingTenantIdResolver);
    }

    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean(name = "warehouseJdbcTemplate")
    public NamedParameterJdbcTemplate warehouseJdbcTemplate(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The warehouse transaction manager
     */
    @Bean(name = "warehouseTxManager")
    public PlatformTransactionManager warehouseTxManager(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    private TenantDataSourceOverrideResolver createTenantDataSourceOverrideResolver(
            DataSourceElements dataSourceElements) {
        return tenantId -> {
            DataSourceUrlParts dataSourceUrlParts = dataSourceElements.getUrlParts();
            //This a temporary implementation
            //shortly we will use permanent storage or configuration
            //to determine the overrides, for now simply re-use the
            //default configuration regardless of tenant
            final String url = String.format("%s//%s/%s?%s",
                    dataSourceUrlParts.getProtocol(),
                    dataSourceUrlParts.getHosts(),
                    dataSourceUrlParts.getDatabase(),
                    dataSourceUrlParts.getProperties());
            final String username = dataSourceElements.getUsername();
            final String password = dataSourceElements.getPassword();
            return new TenantDatasourceOverride(username, password, url);
        };
    }
}
