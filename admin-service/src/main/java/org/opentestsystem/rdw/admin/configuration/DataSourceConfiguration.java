package org.opentestsystem.rdw.admin.configuration;

import org.opentestsystem.rdw.multitenant.DataSourceUrlParts;
import org.opentestsystem.rdw.multitenant.TenantDataSourceOverrideResolver;
import org.opentestsystem.rdw.multitenant.TenantDatasourceOverride;
import org.opentestsystem.rdw.multitenant.TenantDynamicRoutingDataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

/**
 * This configuration is responsible for providing datasources for both reporting and warehouse.
 */
@Configuration
@EnableTransactionManagement
public class DataSourceConfiguration {

    /**
     * DataSourceProperties for reporting
     *
     * @return reporting DataSourceProperties
     */
    @Primary
    @Bean(name = "reportingDatasourceProperties")
    @ConfigurationProperties("spring.reporting_datasource")
    public DataSourceProperties reportingDatasourceProperties() {
        return new DataSourceProperties();
    }

    /**
     * DataSourceUrlParts for reporting
     *
     * @return reporting DataSourceUrlParts
     */
    @Bean(name = "reportingDataSourceUrlParts")
    @ConfigurationProperties("spring.reporting_datasource.url-parts")
    public DataSourceUrlParts reportingDataSourceUrlParts() {
        return new DataSourceUrlParts();
    }

    /**
     * TenantDataSourceOverrideResolver for reporting
     *
     * @param dataSourceProperties         reporting DataSourceProperties
     * @param dataSourceUrlParts reporting DataSourceUrlParts
     * @return TenantDataSourceOverrideResolver for reporting
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "reportingTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver reportingTenantDataSourceOverrideResolver(
            @Qualifier("reportingDatasourceProperties") DataSourceProperties dataSourceProperties,
            @Qualifier("reportingDataSourceUrlParts") DataSourceUrlParts dataSourceUrlParts) {
        return createTenantDataSourceOverrideResolver(dataSourceProperties, dataSourceUrlParts);
    }

    /**
     * Data source for the reporting data mart.
     *
     * @param dataSourceProperties reporting DataSourceProperties
     * @param tenantDataSourceOverrideResolver reporting TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Primary
    @Bean(name = "reportingDatasource")
    public DataSource reportingDatasource(@Qualifier("reportingDatasourceProperties") DataSourceProperties dataSourceProperties,
                                          @Qualifier("reportingTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceProperties, tenantDataSourceOverrideResolver);
    }

    /**
     * The jdbc template used for reading and writing to the reporting data mart.
     *
     * @return DataSource
     */
    @Bean(name = "reportingJdbcTemplate")
    public NamedParameterJdbcTemplate reportingJdbcTemplate(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The reporting transaction manager
     */
    @Bean(name = "reportingTxManager")
    public PlatformTransactionManager reportingTxManager(@Qualifier("reportingDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    /**
     * DataSourceProperties for warehouse
     *
     * @return warehouse DataSourceProperties
     */
    @Bean(name = "warehouseDatasourceProperties")
    @ConfigurationProperties("spring.warehouse_datasource")
    public DataSourceProperties warehouseDataSourceProperties() {
        return new DataSourceProperties();
    }

    /**
     * DataSourceUrlParts for warehouse
     *
     * @return warehouse DataSourceUrlParts
     */
    @Bean(name = "warehouseDatasourceUrlParts")
    @ConfigurationProperties("spring.warehouse_datasource.url-parts")
    public DataSourceUrlParts warehouseDatasourceUrlParts() {
        return new DataSourceUrlParts();
    }

    /**
     * TenantDataSourceOverrideResolver for warehouse
     *
     * @param dataSourceProperties         warehouse DataSourceProperties
     * @param dataSourceUrlParts warehouse DataSourceUrlParts
     * @return warehouse TenantDataSourceOverrideResolver
     */
    //TODO: this is an interim implementation, replace once override storage has been implemented
    @Bean(name = "warehouseTenantDataSourceOverrideResolver")
    public TenantDataSourceOverrideResolver warehouseTenantDataSourceOverrideResolver(
            @Qualifier("warehouseDatasourceProperties") DataSourceProperties dataSourceProperties,
            @Qualifier("warehouseDatasourceUrlParts") DataSourceUrlParts dataSourceUrlParts) {
        return createTenantDataSourceOverrideResolver(dataSourceProperties, dataSourceUrlParts);
    }

    /**
     * Data source for the data warehouse.
     *
     * @param dataSourceProperties             warehouse DataSourceProperties
     * @param tenantDataSourceOverrideResolver warehouse TenantDataSourceOverrideResolver
     * @return DataSource
     */
    @Bean(name = "warehouseDatasource")
    public DataSource warehouseDataSource(@Qualifier("warehouseDatasourceProperties") DataSourceProperties dataSourceProperties,
                                          @Qualifier("warehouseTenantDataSourceOverrideResolver") TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        return new TenantDynamicRoutingDataSource(dataSourceProperties, tenantDataSourceOverrideResolver);
    }

    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean(name = "warehouseJdbcTemplate")
    public NamedParameterJdbcTemplate warehouseJdbcTemplate(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return The warehouse transaction manager
     */
    @Bean(name = "warehouseTxManager")
    public PlatformTransactionManager warehouseTxManager(@Qualifier("warehouseDatasource") final DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

    private TenantDataSourceOverrideResolver createTenantDataSourceOverrideResolver(
            DataSourceProperties dataSourceProperties,
            DataSourceUrlParts dataSourceUrlParts) {
        return tenantId -> {
            //This a temporary implementation
            //shortly we will use permanent storage or configuration
            //to determine the overrides, for now simply re-use the
            //default configuration regardless of tenant
            final String url = String.format("%s//%s/%s?%s",
                    dataSourceUrlParts.getProtocol(),
                    dataSourceUrlParts.getHosts(),
                    dataSourceUrlParts.getDatabase(),
                    dataSourceUrlParts.getProperties());
            final String username = dataSourceProperties.getUsername();
            final String password = dataSourceProperties.getPassword();
            return new TenantDatasourceOverride(username, password, url);
        };
    }
}
