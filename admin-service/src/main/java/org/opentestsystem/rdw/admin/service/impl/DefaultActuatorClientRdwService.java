package org.opentestsystem.rdw.admin.service.impl;


import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.ActuatorClientRdwDefaultPropertiesService;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingProperties;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Service to retrieve Default properties from rdw services using the actuator endpoints
 */
@Service
public class DefaultActuatorClientRdwService implements ActuatorClientRdwDefaultPropertiesService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultActuatorClientRdwService.class);

    private TenantConfigurationLookupClient tenantConfigurationLookupClient;

    private ObjectMapper mapper;

    @Autowired
    DefaultActuatorClientRdwService(TenantConfigurationLookupClient tenantConfigurationLookupClient,
                                    ObjectMapper objectMapper) {
        this.tenantConfigurationLookupClient = tenantConfigurationLookupClient;
        this.mapper = objectMapper.copy();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    @Override
   public List<ResponseEntity<String>> getAllResponseEntities() {
        // Go hit all of the endpoints gathering a list of responses
        return tenantConfigurationLookupClient.getRawConfigurations();
    }

    /*
     * ReportingSystemProperties
     */
    @Override
    public Optional<ReportingSystemPropertiesImpl> getReportingSystemSettingsImpl() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<ReportingSystemSettings> reportingSystemSettings = tenantConfigurationLookupClient.getReportingSystemSetting(responseEntities);
        return getReportingSystemSettingsImpl(reportingSystemSettings);
    }
    public Optional<ReportingSystemPropertiesImpl> getReportingSystemSettingsImpl(Optional<ReportingSystemSettings> reportingSystemSettings) {
        if(reportingSystemSettings.isPresent()) {
            logger.debug("Response to get for ReportingSystemProperties = {}", reportingSystemSettings.get());
            try {
                ReportingSystemPropertiesImpl reporting = mapper.readValue(mapper.writeValueAsString(reportingSystemSettings.get()), ReportingSystemPropertiesImpl.class);
                return Optional.of(reporting);
            } catch (Exception e) {
                logger.error("Error parsing ReportingSystemSettings from json: {}", reportingSystemSettings);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return ReportingSystemSetting from the ResponseEntities - contains tenant info
     */
    public Optional<ReportingSystemSettings> getReportingSystemSettings(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getReportingSystemSetting(responseEntities);
    }

    /*
     * ReadOnly DataSourceElementsTenant
     */
    @Override
    public Optional<DataSourceElementsTenant> getDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> dataSourceElementsTenantProperties = tenantConfigurationLookupClient.getDataSources(responseEntities);
        return getDataSourceElementsTenant(dataSourceElementsTenantProperties);
    }
    /**
     * @param dataSourceElementsTenantProperties from the service calls
     * @return ReadOnly DataSourceElementsTenant from the DataSourceElementsProperties
     */
    public Optional<DataSourceElementsTenant> getDataSourceElementsTenant(Optional<DataSourceElementsProperties> dataSourceElementsTenantProperties) {
        if(dataSourceElementsTenantProperties.isPresent()) {
            logger.debug("Response to get for ReportingSystemProperties = {}", dataSourceElementsTenantProperties.get());
            try {
                DataSourceElementsTenant dataSource = mapper.readValue(mapper.writeValueAsString(dataSourceElementsTenantProperties.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSource);
            } catch (Exception e) {
                logger.error("Error parsing ReadOnly dataSourceElementsTenantProperties from json: {}", dataSourceElementsTenantProperties);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return ReadOnly DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getDataSourceElementsProperties(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getDataSources(responseEntities);
    }

    /*
     * Writable DataSourceElementsTenant
     */
    @Override
    public Optional<DataSourceElementsTenant> getWritableDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> writableDataSource = tenantConfigurationLookupClient.getWritableDataSources(responseEntities);
        return getWritableDataSourceElementsTenant(writableDataSource);
    }
    /**
     * @param writableDataSource from the service calls
     * @return Writable DataSourceElementsTenant from the DataSourceElementsProperties
     */
    public Optional<DataSourceElementsTenant> getWritableDataSourceElementsTenant(Optional<DataSourceElementsProperties> writableDataSource) {
        if(writableDataSource.isPresent()) {
            logger.debug("testing response to get for writableDataSource = {}", writableDataSource.get());
            try {
                DataSourceElementsTenant writableDataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(writableDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(writableDataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing writableDataSource from json: {}", writableDataSource);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return Writable DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getWritableDataSource(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getWritableDataSources(responseEntities);
    }

    /*
     * Warehouse DataSourceElementsTenant
     */
    @Override
    public Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> warehouseDataSource = tenantConfigurationLookupClient.getWarehouseDataSources(responseEntities);
        return getWarehouseDataSourceElementsTenant(warehouseDataSource);
    }
    /**
     * @param warehouseDataSource from the service calls
     * @return Warehouse DataSourceElementsTenant from the DataSourceElementsProperties
     */
    public Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenant( Optional<DataSourceElementsProperties> warehouseDataSource)  {
        if(warehouseDataSource.isPresent()) {
            logger.debug("Response to get for WarehouseDataSource = {}", warehouseDataSource.get());
            try {
                DataSourceElementsTenant dataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(warehouseDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing warehouseDataSource from json: {}", warehouseDataSource);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return Warehouse DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getWarehouseDataSource(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getWarehouseDataSources(responseEntities);
    }

    /*
     * Olap DataSourceElementsTenant
     */
    @Override
    public Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> olapDataSource = tenantConfigurationLookupClient.getOlapDataSources(responseEntities);
        return getOlapDataSourceElementsTenant(olapDataSource);
    }
    /**
     * Returns the ApplicationTenantConfiguration Default Olap DataSourceElementsTenant
     * @param olapDataSource from the service calls
     * @return Olap DataSourceElementsTenant from the DataSourceElementsProperties
     */
    public Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenant(Optional<DataSourceElementsProperties> olapDataSource ) {
        if(olapDataSource.isPresent()) {
            logger.debug("Response to get for Olap DataSource = {}", olapDataSource.get());
            try {
                DataSourceElementsTenant dataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(olapDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing olapDataSource from json: {}", olapDataSource);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return Olap DataSourceElementsTenant from the responseEntities - contains tenant info
     */
    public Optional<DataSourceElementsProperties> getOlapDataSource(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getOlapDataSources(responseEntities);
    }

    /*
     * Archive Properties
     */
    @Override
    public Optional<ArchivePropertiesTenant> getArchivePropertiesTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<ArchivePropertiesRoot> archivePropertiesRoot = tenantConfigurationLookupClient.getArchiveProperties(responseEntities);
        return getArchivePropertiesTenant(archivePropertiesRoot);
    }
    public Optional<ArchivePropertiesTenant> getArchivePropertiesTenant(Optional<ArchivePropertiesRoot> archivePropertiesRoot) {
        if(archivePropertiesRoot.isPresent()) {
            logger.debug("Response to get for archivePropertiesRoot = {}", archivePropertiesRoot.get());
            try {
                ArchivePropertiesTenant archivePropertiesTenant = mapper.readValue(mapper.writeValueAsString(archivePropertiesRoot.get()), ArchivePropertiesTenant.class);
                return Optional.of(archivePropertiesTenant);
            } catch (Exception e) {
                logger.error("Error parsing archivePropertiesRoot from json: {}", archivePropertiesRoot);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return ArchivePropertiesRoot from the responseEntities - contains tenant info
     */
    public Optional<ArchivePropertiesRoot> getArchivePropertiesRoot(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getArchiveProperties(responseEntities);
    }

    /*
     * AggregateReportingProperties
     */
    @Override
    public Optional<AggregateReportingPropertiesTenant> getAggregateProperties() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<AggregateReportingPropertiesRoot> aggregatePropertiesRoot = tenantConfigurationLookupClient.getAggregatorProperties(responseEntities);
        return getAggregateProperties(aggregatePropertiesRoot);
    }
    public Optional<AggregateReportingPropertiesTenant> getAggregateProperties(Optional<AggregateReportingPropertiesRoot> aggregatePropertiesRoot) {
        if(aggregatePropertiesRoot.isPresent()) {
            logger.debug("Response to get for AggregateReportingPropertiesTenant = {}", aggregatePropertiesRoot.get());
            try {
                AggregateReportingPropertiesTenant aggregateReporting = mapper.readValue(mapper.writeValueAsString(aggregatePropertiesRoot.get()), AggregateReportingPropertiesTenant.class);
                return Optional.of(aggregateReporting);
            } catch (Exception e) {
                logger.error("Error parsing AggregateReportingPropertiesTenant from json: {}", aggregatePropertiesRoot);
            }
        }
        return Optional.empty();
    }
    /**
     * @param responseEntities from the service calls
     * @return AggregateReportingPropertiesRoot from the responseEntities - contains tenant info
     */
    public Optional<AggregateReportingPropertiesRoot> getAggregateReportingPropertiesRoot(List<ResponseEntity<String>> responseEntities) {
        return tenantConfigurationLookupClient.getAggregatorProperties(responseEntities);
    }
}
