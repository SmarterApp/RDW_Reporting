package org.opentestsystem.rdw.admin.service.impl;


import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.ActuatorClientRdwDefaultPropertiesService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Service to retrieve Default properties from rdw services using the actuator endpoints
 */
@Service
public class DefaultActuatorClientRdwService implements ActuatorClientRdwDefaultPropertiesService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultActuatorClientRdwService.class);

    private TenantConfigurationLookupClient tenantConfigurationLookupClient;

    private ObjectMapper mapper;

    @Autowired
    DefaultActuatorClientRdwService(TenantConfigurationLookupClient tenantConfigurationLookupClient,
                                    ObjectMapper objectMapper) {
        this.tenantConfigurationLookupClient = tenantConfigurationLookupClient;
        this.mapper = objectMapper.copy();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    @Override
    public Optional<ApplicationTenantConfiguration> getDefaultApplicationTenantConfiguration() {
        // create applicaticationTenantConfiguration for Default data
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();

        // Go hit all of the endpoints with a list of responses
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();

        // getReportingSystemSettings
        ///getDefaultAndTenantResportSystemSettings(applicationTenantConfiguration, tenantConfigurations);
        Optional<ReportingSystemPropertiesImpl> reportingSystemSettings = getReportingSystemSettings(responseEntities);
        if(reportingSystemSettings.isPresent()) {
            logger.debug("Retrieved ReportingSystemSettings schoolYear = {}", reportingSystemSettings.get().getSchoolYear());
            applicationTenantConfiguration.setReporting(reportingSystemSettings.get());
        }

        // getDataSources - call each one add if found, need Map to store all of the found DataSources
        Map<String, DataSourceElementsTenant> dataSources = new LinkedHashMap<>();

        // Adding Default "reporting_ro" Read Only Reporting DataSource
        Optional<DataSourceElementsTenant> dataSourceReadOnly = getDataSourceElementsTenant(responseEntities);
        if(dataSourceReadOnly.isPresent()) {
            logger.debug("Retrieved 'reporting_ro' dataSourceElements getUrl = {}", dataSourceReadOnly.get().getUrl());
            dataSources.put("reporting_ro", dataSourceReadOnly.get());
        }

        // Adding Default "reporting_rw" Read Only Reporting DataSource
        Optional<DataSourceElementsTenant> dataSourceWritable = getWritingDataSourceElementsTenant(responseEntities);
        if(dataSourceWritable.isPresent()) {
            logger.debug("Retrieved 'reporting_rw' dataSourceElements getUrl = {}", dataSourceWritable.get().getUrl());
            dataSources.put("reporting_rw", dataSourceWritable.get());
        }

        // Adding Default "warehouse_rw" Read Only Reporting DataSource
        Optional<DataSourceElementsTenant> dataSourceWarehouse = getWarehouseDataSourceElementsTenant(responseEntities);
        if(dataSourceWarehouse.isPresent()) {
            logger.debug("Retrieved 'warehouse_rw' dataSourceElements getUrl = {}", dataSourceWarehouse.get().getUrl());
            dataSources.put("warehouse_rw", dataSourceWarehouse.get());
        }

        // Adding Default "olap_ro" Read Only Reporting DataSource
        Optional<DataSourceElementsTenant> dataSourceOlap = getOlapDataSourceElementsTenant(responseEntities);
        if(dataSourceOlap.isPresent()) {
            logger.debug("Retrieved 'olap' dataSourceElements getUrl = {}", dataSourceOlap.get().getUrl());
            dataSources.put("olap_ro", dataSourceOlap.get());
        }
        applicationTenantConfiguration.setDataSources(dataSources);

        // TODO Add Archive & Aggregator properties

        Optional<ArchivePropertiesTenant> archiveProperties = getArchivePropertiesTenant(responseEntities);
        if(archiveProperties.isPresent()) {
            logger.debug("Retrieved ArchiveProperties getUrl = {}", archiveProperties.get().getUriRoot());
            applicationTenantConfiguration.setArchiveProperties(archiveProperties.get());
        }

        Optional<AggregateReportingPropertiesTenant> aggregateProperties = getAggregateProperties(responseEntities);
        if(aggregateProperties.isPresent()) {
            logger.debug("Retrieved aggregateProperties getUrl AssessmentTypes size = {}", aggregateProperties.get().getAssessmentTypes().size());
            applicationTenantConfiguration.setAggregateReportingPropertiesTenant(aggregateProperties.get());
        }

        return Optional.of(applicationTenantConfiguration);
    }

    @Override
   public List<ResponseEntity<String>> getAllResponseEntities() {
        // Go hit all
        // of the endpoints with a list of responses
        return tenantConfigurationLookupClient.getRawConfigurations();
    }


    @Override
    public Optional<ReportingSystemPropertiesImpl> getReportingSystemSettings() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        return getReportingSystemSettings(responseEntities);
    }

    /**
     * Returns the ApplicationTenantConfiguration ReportingSystemSettings
     * @param responseEntities from the service calls
     * @return ReportingSystemPropertiesImpl
     */
    public Optional<ReportingSystemPropertiesImpl> getReportingSystemSettings(List<ResponseEntity<String>> responseEntities) {

        Optional<ReportingSystemSettings> reportingSystemSettings = tenantConfigurationLookupClient.getReportingSystemSetting(responseEntities);
        if(reportingSystemSettings.isPresent()) {
            logger.debug("testing response to get for ReportingSystemProperties = {}", reportingSystemSettings.get());
            try {
                ReportingSystemPropertiesImpl reporting = mapper.readValue(mapper.writeValueAsString(reportingSystemSettings.get()), ReportingSystemPropertiesImpl.class);
                return Optional.of(reporting);
            } catch (Exception e) {
                logger.error("Error parsing ReportingSystemSettings from json: {}", reportingSystemSettings);
            }
        }
        return Optional.empty();
    }

    @Override
    public Optional<DataSourceElementsTenant> getDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        return getDataSourceElementsTenant(responseEntities);
    }

    /**
     * Returns the ApplicationTenantConfiguration default reading DataSourceElementsTenant
     * @param responseEntities from the service calls
     * @return DataSourceElementsTenant
     */
    public Optional<DataSourceElementsTenant> getDataSourceElementsTenant(List<ResponseEntity<String>> responseEntities) {

        Optional<DataSourceElementsProperties> dataSourceElementsTenantProperties = tenantConfigurationLookupClient.getDataSources(responseEntities);
        if(dataSourceElementsTenantProperties.isPresent()) {
            logger.debug("testing response to get for ReportingSystemProperties = {}", dataSourceElementsTenantProperties.get());
            try {
                DataSourceElementsTenant dataSource = mapper.readValue(mapper.writeValueAsString(dataSourceElementsTenantProperties.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSource);
            } catch (Exception e) {
                logger.error("Error parsing dataSourceElementsTenantProperties from json: {}", dataSourceElementsTenantProperties);
            }
        }
        return Optional.empty();
    }


    @Override
    public Optional<DataSourceElementsTenant> getWritingDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        return getWritingDataSourceElementsTenant(responseEntities);

    }
    /**
     * Returns the ApplicationTenantConfiguration Default WritingDataSourceElementsTenant
     * @param responseEntities from the service calls
     * @return DataSourceElementsTenant
     */
    public Optional<DataSourceElementsTenant> getWritingDataSourceElementsTenant(List<ResponseEntity<String>> responseEntities) {

        Optional<DataSourceElementsProperties> writableDataSource = tenantConfigurationLookupClient.getWritableDataSources(responseEntities);
        if(writableDataSource.isPresent()) {
            logger.debug("testing response to get for writableDataSource = {}", writableDataSource.get());
            try {
                DataSourceElementsTenant writableDataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(writableDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(writableDataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing writableDataSource from json: {}", writableDataSource);
            }
        }
        return Optional.empty();
    }

    @Override
    public Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        return getWarehouseDataSourceElementsTenant(responseEntities);
    }
    /**
     * Returns the ApplicationTenantConfiguration Default Warehouse DataSourceElementsTenant
     * @param responseEntities from the service calls
     * @return DataSourceElementsTenant
     */
    public Optional<DataSourceElementsTenant> getWarehouseDataSourceElementsTenant(List<ResponseEntity<String>> responseEntities)  {

        Optional<DataSourceElementsProperties> warehouseDataSource = tenantConfigurationLookupClient.getWarehouseDataSources(responseEntities);
        if(warehouseDataSource.isPresent()) {
            logger.debug("testing response to get for WarehouseDataSource = {}", warehouseDataSource.get());
            try {
                DataSourceElementsTenant dataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(warehouseDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing warehouseDataSource from json: {}", warehouseDataSource);
            }
        }
        return Optional.empty();
    }


    @Override
    public Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenant() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        return getOlapDataSourceElementsTenant(responseEntities);
    }
    /**
     * Returns the ApplicationTenantConfiguration Default Olap DataSourceElementsTenant
     * @param responseEntities from the service calls
     * @return DataSourceElementsTenant
     */
    public Optional<DataSourceElementsTenant> getOlapDataSourceElementsTenant(List<ResponseEntity<String>> responseEntities) {

        Optional<DataSourceElementsProperties> olapDataSource = tenantConfigurationLookupClient.getOlapDataSources(responseEntities);
        if(olapDataSource.isPresent()) {
            logger.debug("testing response to get for Olap DataSource = {}", olapDataSource.get());
            try {
                DataSourceElementsTenant dataSourceElementsTenant = mapper.readValue(mapper.writeValueAsString(olapDataSource.get()), DataSourceElementsTenant.class);
                return Optional.of(dataSourceElementsTenant);
            } catch (Exception e) {
                logger.error("Error parsing olapDataSource from json: {}", olapDataSource);
            }
        }
        return Optional.empty();
    }

    // TODO get the archive & Aggregate Propeteries calls
    @Override
    public Optional<ArchivePropertiesTenant> getArchivePropertiesTenant() {
        return Optional.empty();
    }
    public Optional<ArchivePropertiesTenant> getArchivePropertiesTenant(List<ResponseEntity<String>> responseEntities) {
        return Optional.empty();
    }

    @Override
    public Optional<AggregateReportingPropertiesTenant> getAggregateProperties() {
        return Optional.empty();
    }
    public Optional<AggregateReportingPropertiesTenant> getAggregateProperties(List<ResponseEntity<String>> responseEntities) {
        return Optional.empty();
    }
}
