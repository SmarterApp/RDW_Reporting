package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;
import org.opentestsystem.rdw.admin.service.TenantConfigPropsService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Classes to return tenant and sandbox properties from the RDW Actuator endpoint calls
 * This is the service the tenant & sandbox service use to retrieve default and tenant specific properties & settings
 */
@Service
public class DefaultTenantConfigPropsService implements TenantConfigPropsService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantConfigPropsService.class);

    private TenantConfigurationLookupClient tenantConfigurationLookupClient;

    private DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor;
    private ObjectMapper mapper;

    @Autowired
    public DefaultTenantConfigPropsService(TenantConfigurationLookupClient tenantConfigurationLookupClient,
                                           DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor,
                                           ObjectMapper objectMapper) {
        this.tenantConfigurationLookupClient = tenantConfigurationLookupClient;
        this.rdwServiceConfigPropsAccessor = rdwServiceConfigPropsAccessor;
        this.mapper = objectMapper.copy();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void servicesPropertiesRefresh() {
        List<String> configProps = tenantConfigurationLookupClient.getRawConfigurations();
        RdwServiceConfigProps rdwServiceConfigProps = new RdwServiceConfigProps();
        rdwServiceConfigProps.setConfigProps(configProps);
        rdwServiceConfigPropsAccessor = DefaultRdwServiceConfigPropsAccessor.wrap(rdwServiceConfigProps,  mapper);
    }

    /**
     * Add getDefaultApplicationTenantConfiguration for this instance
     */
    @Override
    public ApplicationTenantConfiguration getDefaultApplicationTenantConfiguration() {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings();
        if(defaultReportingSystemSettings.isPresent()) {
            logger.info("Add Default defaultReportingSystemSettings");
            applicationTenantConfiguration.setReporting(defaultReportingSystemSettings.get());
        }

        // Get the Default dataSources
        applicationTenantConfiguration.setDataSources(getDefaultDataSources());

        // Get the AggregateReporting properties
        final Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties();
        if (aggregatePropertiesTenant.isPresent()) {
            logger.info("Add Default AggregateReportingProperties");
            applicationTenantConfiguration.setAggregateReportingPropertiesTenant(aggregatePropertiesTenant.get());
        }

        // Get the Archive Properties
        final Optional<ArchivePropertiesTenant> archivePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultArchivePropertiesTenant();
        if (archivePropertiesTenant.isPresent()) {
            logger.info("Add Default Reporting Archive Properties");
            applicationTenantConfiguration.setArchiveProperties(archivePropertiesTenant.get());
        }

        return applicationTenantConfiguration;
    }

    /**
     * @return the Default DataSources for this instance
     */
    private Map<String, DataSourceElementsTenant> getDefaultDataSources() {
        Map<String, DataSourceElementsTenant> defaultDataSources = new HashMap<>();
        final Optional<DataSourceElementsTenant> dataSourceReadOnly = rdwServiceConfigPropsAccessor.getDefaultReadOnlyDataSourceElements();
        if (dataSourceReadOnly.isPresent()) {
            logger.info("Add Default Reporting ReadOnly DataSource");
            defaultDataSources.put("reporting_ro", dataSourceReadOnly.get());
        }

        // Get the Writable Reporting DataSources
        final Optional<DataSourceElementsTenant> dataSourceWritable = rdwServiceConfigPropsAccessor.getDefaultWritableDataSourceElements();
        if (dataSourceWritable.isPresent()) {
            logger.info("Add Default Reporting Writable DataSource");
            defaultDataSources.put("reporting_rw", dataSourceWritable.get());
        }

        // Get the Olap DataSources
        final Optional<DataSourceElementsTenant> dataSourceOlap = rdwServiceConfigPropsAccessor.getDefaultOlapDataSourceElements();
        if (dataSourceOlap.isPresent()) {
            logger.info("Add Default Reporting OLAP DataSource");
            defaultDataSources.put("olap_ro", dataSourceOlap.get());
        }

        // get Default warehouseDataSetProperties DataSources
        final Optional<DataSourceElementsTenant> dataSourceWarehouse = rdwServiceConfigPropsAccessor.getDefaultWarehouseDataSourceElements();
        if (dataSourceWarehouse.isPresent()) {
            logger.info("Add Default Reporting Warehouse DataSource");
            defaultDataSources.put("warehouse_rw", dataSourceWarehouse.get());
        }
        return defaultDataSources;
    }

    @Override
    public ApplicationSandboxConfiguration getDefaultApplicationSandboxConfiguration() {
        ApplicationSandboxConfiguration applicationSandboxConfiguration = new ApplicationSandboxConfiguration();

        // Get the default reporting system settings
        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings();
        if(defaultReportingSystemSettings.isPresent()) {
            logger.info("Add Default defaultReportingSystemSettings");
            applicationSandboxConfiguration.setReporting(defaultReportingSystemSettings.get());
        }

        // Get the default AggregateReporting properties
        Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties();
        if (aggregatePropertiesTenant.isPresent()) {
            logger.info("Add Default AggregateReportingProperties");
            applicationSandboxConfiguration.setAggregateReportingPropertiesTenant(aggregatePropertiesTenant.get());
        }
        return applicationSandboxConfiguration;
    }

    @Override
    public ApplicationTenantConfiguration getTenantAppConfiguration(String key) {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();

        // tenant specific reporting system settings configured
        final Map<String, ReportingSystemPropertiesImpl> tenantReportingSystemSettings = rdwServiceConfigPropsAccessor.getTenantReportingSystemSettings();
        if(tenantReportingSystemSettings.containsKey(key)) {
            logger.info("Add tenant {}'s ReportingSystemSettings", key);
            applicationTenantConfiguration.setReporting(tenantReportingSystemSettings.get(key));
        } else {
            logger.warn("No ReportingSystemSettings found for tenant {}", key);
        }

        // Get the tenant specific dataSources configured
        applicationTenantConfiguration.setDataSources(getTenantDataSources(key));

        // Get the tenant specific archive properties configured
        final Map<String, ArchivePropertiesTenant> tenantsArchivePropertiesMap = rdwServiceConfigPropsAccessor.getTenantsArchiveProperties();
        if(tenantsArchivePropertiesMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting Archive Properties overrides", key);
            applicationTenantConfiguration.setArchiveProperties(tenantsArchivePropertiesMap.get(key));
        } else {
            logger.warn("No Reporting ArchiveProperties found for Tenant {}",key);
        }

        // Get the tenant specific aggregate reporting properties configured
        final Map<String, AggregateReportingPropertiesTenant> tenantsAggregateReportingPropertiesMap = rdwServiceConfigPropsAccessor.getTenantsAggregateReportingProperties();
        if(tenantsAggregateReportingPropertiesMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting AggregateReportingProperties overrides", key);
            applicationTenantConfiguration.setAggregateReportingPropertiesTenant(tenantsAggregateReportingPropertiesMap.get(key));
        } else {
            logger.warn("Found Reporting AggregateReportingProperties for Tenant {}",key);
        }

        return applicationTenantConfiguration;
    }

    /**
     * @return the Default DataSources for this instance
     */
    private Map<String, DataSourceElementsTenant> getTenantDataSources(String key) {
        Map<String, DataSourceElementsTenant> defaultDataSources = new HashMap<>();

        // Get the ReadOnly Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements();
        if (tenantsReadOnlyDataSourceMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting ReadOnly DataSource", key);
            defaultDataSources.put("reporting_ro", tenantsReadOnlyDataSourceMap.get(key));
        }

        // Get the Writable Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsWritableDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements();
        if (tenantsWritableDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Writable DataSource");
            defaultDataSources.put("reporting_rw", tenantsWritableDataSourceMap.get(key));
        }

        // Get the Olap DataSources
        final Map<String, DataSourceElementsTenant> tenantsOlapDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements();
        if (tenantsOlapDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting OLAP DataSource");
            defaultDataSources.put("olap_ro", tenantsOlapDataSourceMap.get(key));
        }

        // get Default warehouseDataSetProperties DataSources
        final Map<String, DataSourceElementsTenant> tenantsWarehouseDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements();
        if (tenantsWarehouseDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Warehouse DataSource");
            defaultDataSources.put("warehouse_rw", tenantsWarehouseDataSourceMap.get(key));
        }
        return defaultDataSources;
    }

}
