package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.admin.client.DefaultConfigServerClient;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.TenantConfigPropsService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Classes to return tenant and sandbox properties from the RDW Actuator endpoint calls
 * This is the service the tenant & sandbox service use to retrieve default and tenant specific properties & settings
 */
@Service
public class DefaultTenantConfigPropsService implements TenantConfigPropsService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantConfigPropsService.class);
    private static final int USERNAME_MAX_SIZE = 17;
    private static final String CIPHER = "{cipher}";

    private DefaultConfigServerClient defaultConfigServerClient;
    private TenantConfigurationLookupClient tenantConfigurationLookupClient;
    private DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor;
    private ObjectMapper mapper;

    @Autowired
    public DefaultTenantConfigPropsService(TenantConfigurationLookupClient tenantConfigurationLookupClient,
                                           DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor,
                                           DefaultConfigServerClient defaultConfigServerClient,
                                           ObjectMapper objectMapper) {
        this.tenantConfigurationLookupClient = tenantConfigurationLookupClient;
        this.rdwServiceConfigPropsAccessor = rdwServiceConfigPropsAccessor;
        this.defaultConfigServerClient = defaultConfigServerClient;
        this.mapper = objectMapper.copy();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void servicesPropertiesRefresh() {
        // getting /configProps
        List<String> configProps = tenantConfigurationLookupClient.getRawConfigurations();
        // getting props with actual unmasked passwords
        final String reportingROProps = defaultConfigServerClient.getActualReportingROPasswordProps();
        configProps.add(reportingROProps);
        final String reportingRWProps = defaultConfigServerClient.getActualReportingRWPasswordProps();
        configProps.add(reportingRWProps);
        final String olapProps = defaultConfigServerClient.getActualOlapROPasswordProps();
        configProps.add(olapProps);
        final String warehouseProps = defaultConfigServerClient.getActualWarehouseRWPasswordProps();
        configProps.add(warehouseProps);
        RdwServiceConfigProps rdwServiceConfigProps = new RdwServiceConfigProps();
        rdwServiceConfigProps.setConfigProps(configProps);

        rdwServiceConfigPropsAccessor = DefaultRdwServiceConfigPropsAccessor.wrap(rdwServiceConfigProps, mapper);
    }


    @Override
    public boolean archivePrefixExists(String prefix) {
        final Map<String, ArchivePropertiesTenant> tenantsArchiveProperties = rdwServiceConfigPropsAccessor.getTenantsArchiveProperties();
        for (Map.Entry<String, ArchivePropertiesTenant> archive : tenantsArchiveProperties.entrySet()) {
            if (archive.getValue().getPathPrefix().equals(prefix)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean dataSourceExists(String dataSource, String dataSourceDatabase) {
        // TODO Add the DBADmin checks to the Aurua db
        if (dataSource.equals(RDWDataSourceNames.REPORTING_RO.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements());
        }
        if (dataSource.equals(RDWDataSourceNames.REPORTING_RW.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements());
        }
        if (dataSource.equals(RDWDataSourceNames.WAREHOUSE_RW.getName())) {
            return databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements());
        }
        return false;
    }

    @Override
    public boolean dataSourceOlapExists(String dataSourceDatabase, String userName) {
        // check that the database exist
        // the database is the same as the default
        // and the username is unique
        // todo add redshift check
        boolean dbExists = databaseExists(dataSourceDatabase, rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements());
        boolean userNameExists = databaseUserNameExists(userName, rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements());
        // false means it's Ok to create, abd verify the userName length
        return userNameExists || !dbExists || userName.length() > USERNAME_MAX_SIZE ? false : true;
    }

    /**
     * TODO Add search on configured S3 settings
     *
     * @param userName                          the userName to search for
     * @param tenantsReadOnlyDataSourceElements Map of tenant specific dataSources to search
     * @return true if the userName of the database is found in the list of current tenants
     */
    private boolean databaseUserNameExists(final String userName, final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceElements) {
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantsReadOnlyDataSourceElements.entrySet()) {
            if (dataSource.getValue().getUsername().equals(userName)) {
                return true;
            }
        }
        return false;
    }

    /**
     * TODO Search databases
     *
     * @param dataSourceDatabase                the database to search for
     * @param tenantsReadOnlyDataSourceElements Map of dataSources to search
     * @return true if the dataSource database is found in the list of current tenants
     */
    private boolean databaseExists(final String dataSourceDatabase, final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceElements) {
        for (Map.Entry<String, DataSourceElementsTenant> dataSource : tenantsReadOnlyDataSourceElements.entrySet()) {
            if (dataSource.getValue().getUrlParts().getDatabase().equals(dataSourceDatabase)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Add getDefaultApplicationTenantConfiguration for this instance
     */
    @Override
    public TenantConfiguration getDefaultApplicationTenantConfiguration() {
        TenantConfiguration applicationTenantConfiguration = new TenantConfiguration();
        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings();
        if (defaultReportingSystemSettings.isPresent()) {
            logger.info("Add Default defaultReportingSystemSettings");
            applicationTenantConfiguration.setReporting(defaultReportingSystemSettings.get());
        }

        // Get the Default dataSources
        applicationTenantConfiguration.setDataSources(getDefaultDataSources());

        // Get the AggregateReporting properties
        final Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties();
        if (aggregatePropertiesTenant.isPresent()) {
            logger.info("Add Default AggregateReportingProperties");
            applicationTenantConfiguration.setAggregateReportingPropertiesTenant(aggregatePropertiesTenant.get());
        }

        // Get the Archive Properties
        final Optional<ArchivePropertiesTenant> archivePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultArchivePropertiesTenant();
        if (archivePropertiesTenant.isPresent()) {
            logger.info("Add Default Reporting Archive Properties");
            applicationTenantConfiguration.setArchiveProperties(archivePropertiesTenant.get());
        }

        return applicationTenantConfiguration;
    }

    private String getEncryptedPassword(final String password) {
        if (password != null) {
            String encrypted = defaultConfigServerClient.encryptPassword(password);
            return CIPHER + encrypted;
        }
        return null;
    }

    /**
     * @return the Default DataSources for this instance
     * This includes applying The default values for specific fields
     */
    private Map<String, DataSourceElementsTenant> getDefaultDataSources() {
        Map<String, DataSourceElementsTenant> defaultDataSources = new HashMap<>();
        final Optional<DataSourceElementsTenant> dataSourceReadOnly = rdwServiceConfigPropsAccessor.getDefaultReadOnlyDataSourceElements();
        if (dataSourceReadOnly.isPresent()) {
            logger.info("Add Default Reporting ReadOnly DataSource");
            applyDefaults(dataSourceReadOnly.get());
            defaultDataSources.put(RDWDataSourceNames.REPORTING_RO.getName(), dataSourceReadOnly.get());
        }

        // Get the Writable Reporting DataSources
        final Optional<DataSourceElementsTenant> dataSourceWritable = rdwServiceConfigPropsAccessor.getDefaultWritableDataSourceElements();
        if (dataSourceWritable.isPresent()) {
            logger.info("Add Default Reporting Writable DataSource");
            applyDefaults(dataSourceWritable.get());
            defaultDataSources.put(RDWDataSourceNames.REPORTING_RW.getName(), dataSourceWritable.get());
        }

        // Get the Olap DataSources
        final Optional<DataSourceElementsTenant> dataSourceOlap = rdwServiceConfigPropsAccessor.getDefaultOlapDataSourceElements();
        if (dataSourceOlap.isPresent()) {
            logger.info("Add Default Reporting OLAP DataSource");
            applyDefaults(dataSourceOlap.get());
            defaultDataSources.put(RDWDataSourceNames.OLAP_RO.getName(), dataSourceOlap.get());
        }

        // get Default warehouseDataSetProperties DataSources
        final Optional<DataSourceElementsTenant> dataSourceWarehouse = rdwServiceConfigPropsAccessor.getDefaultWarehouseDataSourceElements();
        if (dataSourceWarehouse.isPresent()) {
            logger.info("Add Default Reporting Warehouse DataSource");
            applyDefaults(dataSourceWarehouse.get());
            defaultDataSources.put(RDWDataSourceNames.WAREHOUSE_RW.getName(), dataSourceWarehouse.get());
        }
        return defaultDataSources;
    }

    /**
     * @param dataSourceElementsTenant to apply default settings
     * @return DataSourceElementsTenant with the default settings
     */
    private DataSourceElementsTenant applyDefaults(DataSourceElementsTenant dataSourceElementsTenant) {
        dataSourceElementsTenant.setSchemaSearchPath(null);
        dataSourceElementsTenant.setPassword(null);
        dataSourceElementsTenant.setUsername(null);
        dataSourceElementsTenant.getUrlParts().setDatabase(null);
        return dataSourceElementsTenant;
    }

    @Override
    //TODO this depends on parent tenant id
    public TenantConfiguration getDefaultApplicationSandboxConfiguration(String parentKey) {
        TenantConfiguration applicationSandboxConfiguration = new TenantConfiguration();

        // Get the default reporting system settings
        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings();
        if (defaultReportingSystemSettings.isPresent()) {
            logger.info("Add Default defaultReportingSystemSettings");
            applicationSandboxConfiguration.setReporting(defaultReportingSystemSettings.get());
        }

        // Get the default AggregateReporting properties
        Optional<AggregateReportingPropertiesTenant> aggregatePropertiesTenant = rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties();
        if (aggregatePropertiesTenant.isPresent()) {
            logger.info("Add Default AggregateReportingProperties");
            applicationSandboxConfiguration.setAggregateReportingPropertiesTenant(aggregatePropertiesTenant.get());
        }
        return applicationSandboxConfiguration;
    }

    @Override
    public TenantConfiguration getTenantAppConfiguration(String key) {
        TenantConfiguration applicationTenantConfiguration = new TenantConfiguration();

        // tenant specific reporting system settings configured
        final Map<String, ReportingSystemPropertiesImpl> tenantReportingSystemSettings = rdwServiceConfigPropsAccessor.getTenantReportingSystemSettings();
        if (tenantReportingSystemSettings.containsKey(key)) {
            logger.info("Add tenant {}'s ReportingSystemSettings", key);
            applicationTenantConfiguration.setReporting(tenantReportingSystemSettings.get(key));
        } else {
            logger.warn("No ReportingSystemSettings found for tenant {}", key);
        }

        // Get the tenant specific dataSources configured
        applicationTenantConfiguration.setDataSources(getTenantDataSources(key));

        // Get the tenant specific archive properties configured
        final Map<String, ArchivePropertiesTenant> tenantsArchivePropertiesMap = rdwServiceConfigPropsAccessor.getTenantsArchiveProperties();
        if (tenantsArchivePropertiesMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting Archive Properties overrides", key);
            applicationTenantConfiguration.setArchiveProperties(tenantsArchivePropertiesMap.get(key));
        } else {
            logger.warn("No Reporting ArchiveProperties found for Tenant {}", key);
        }

        // Get the tenant specific aggregate reporting properties configured
        final Map<String, AggregateReportingPropertiesTenant> tenantsAggregateReportingPropertiesMap = rdwServiceConfigPropsAccessor.getTenantsAggregateReportingProperties();
        if (tenantsAggregateReportingPropertiesMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting AggregateReportingProperties overrides", key);
            applicationTenantConfiguration.setAggregateReportingPropertiesTenant(tenantsAggregateReportingPropertiesMap.get(key));
        } else {
            logger.warn("Found Reporting AggregateReportingProperties for Tenant {}", key);
        }

        return applicationTenantConfiguration;
    }

    /**
     * @return the DataSource for the tenant specified by the key
     */
    public Map<String, DataSourceElementsTenant> getTenantDataSources(String key) {
        Map<String, DataSourceElementsTenant> defaultDataSources = new HashMap<>();

        // Get the ReadOnly Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsReadOnlyDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements();
        if (tenantsReadOnlyDataSourceMap.containsKey(key)) {
            logger.info("Add tenant {}'s Reporting ReadOnly DataSource", key);
            Optional<String> roPassword = rdwServiceConfigPropsAccessor.getActualReportingROPassword(key);
            tenantsReadOnlyDataSourceMap.get(key).setPassword(getEncryptedPassword(roPassword.orElse(null)));
            defaultDataSources.put("reporting_ro", tenantsReadOnlyDataSourceMap.get(key));
        }

        // Get the Writable Reporting DataSources
        final Map<String, DataSourceElementsTenant> tenantsWritableDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements();
        if (tenantsWritableDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Writable DataSource");
            Optional<String> roPassword = rdwServiceConfigPropsAccessor.getActualReportingRWPassword(key);
            tenantsWritableDataSourceMap.get(key).setPassword(getEncryptedPassword(roPassword.orElse(null)));
            defaultDataSources.put("reporting_rw", tenantsWritableDataSourceMap.get(key));
        }

        // Get the Olap DataSources
        final Map<String, DataSourceElementsTenant> tenantsOlapDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements();
        if (tenantsOlapDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting OLAP DataSource");
            Optional<String> olapPassword = rdwServiceConfigPropsAccessor.getActualOlapROPassword(key);
            tenantsOlapDataSourceMap.get(key).setPassword(getEncryptedPassword(olapPassword.orElse(null)));
            defaultDataSources.put("olap_ro", tenantsOlapDataSourceMap.get(key));
        }

        // get Default warehouseDataSetProperties DataSources
        final Map<String, DataSourceElementsTenant> tenantsWarehouseDataSourceMap = rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements();
        if (tenantsWarehouseDataSourceMap.containsKey(key)) {
            logger.info("Add Default Reporting Warehouse DataSource");
            Optional<String> whPassword = rdwServiceConfigPropsAccessor.getActualWarehouseRWPassword(key);
            tenantsWarehouseDataSourceMap.get(key).setPassword(getEncryptedPassword(whPassword.orElse(null)));
            defaultDataSources.put("warehouse_rw", tenantsWarehouseDataSourceMap.get(key));
        }
        return defaultDataSources;
    }
}
