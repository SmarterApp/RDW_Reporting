package org.opentestsystem.rdw.admin.multitenant.database.impl;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseAdminOrchestrationService;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import javax.sql.DataSource;
import java.util.Map;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;

/**
 * This test will only run against Aurora and S3
 *
 * <p>
 * This test will run only if the system property test-archive.root is set to s3://rdw-ci-archive
 * <p>
 * Additionally, AWS and Aurora credentials must be set:<ul>
 * <li>archive.s3-access-key</li>
 * <li>archive.s3-secret-key</li>
 * <li>spring.admin_datasource.username</li>
 * <li>spring.admin_datasource.password</li>
 * <li>spring.admin_olap_datasource.username</li>
 * <li>spring.admin_olap_datasource.password</li>
 * </ul>
 * For example,<pre>
 * java -Darchive.uri-root=s3://rdw-ci-archive
 *      -Darchive.s3-access-key=#####################
 *      -Darchive.s3-secret-key=#####################
 *      -Dspring.admin_reporting_datasource.url-parts.hosts=rdw-aurora-ci.cugsexobhx8t.us-west-2.rds.amazonaws.com:3306
 *      -Dspring.admin_reporting_datasource.url-parts.database=sandbox_it_warehouse_test
 *      -Dspring.admin_reporting_datasource.username=#####################
 *      -Dspring.admin_reporting_datasource.password=#####################
 *      -Dspring.admin_reporting_datasource.query-timeout=240
 *      -Dspring.admin_warehouse_datasource.url-parts.hosts=rdw-aurora-ci.cugsexobhx8t.us-west-2.rds.amazonaws.com:3306
 *      -Dspring.admin_warehouse_datasource.url-parts.database=sandbox_it_warehouse_test
 *      -Dspring.admin_warehouse_datasource.username=#####################
 *      -Dspring.admin_warehouse_datasource.password=#####################
 *      -Dspring.admin_warehouse_datasource.query-timeout=240
 *      -Dspring.admin_olap_datasource.url-parts.hosts=rdw-qa.cibkulpjrgtr.us-west-2.redshift.amazonaws.com:5439
 *      -Dspring.admin_olap_datasource.url-parts.database=ci
 *      -Dspring.admin_olap_datasource.username=###################
 *      -Dspring.admin_olap_datasource.password=###################
 *      -Dspring.admin_olap_datasource.query-timeout=240
 * </pre>
 */
@RunWith(SpringRunner.class)
@IfProfileValue(name = "archive.uri-root", value = "s3://rdw-ci-archive")
@RepositoryIT
@ContextConfiguration(classes = {
        JdbcMultitenantDatabaseAdmin.class,
        DefaultTenantDatabaseAdminOrchestrationService.class
})
public class DefaultTenantDatabaseAdminOrchestrationServiceIT {

    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantDatabaseAdminOrchestrationServiceIT.class);

    @Autowired
    TenantDatabaseAdminOrchestrationService tenantDatabaseAdminOrchestrationService;

    @Autowired
    private JdbcMultitenantDatabaseAdmin jdbcMultitenantDatabaseAdmin;

    @Autowired
    @Qualifier("adminReportingDataSource")
    private DataSource adminReportingDataSource;

    @Autowired
    @Qualifier("adminWarehouseDataSource")
    private DataSource adminWarehouseDataSource;

    @Autowired
    @Qualifier("adminReportingJdbcTemplate")
    private NamedParameterJdbcTemplate adminReportingJdbcTemplate;

    @Autowired
    @Qualifier("adminWarehouseJdbcTemplate")
    private NamedParameterJdbcTemplate adminWarehouseJdbcTemplate;

    @Autowired
    @Qualifier("adminOlapJdbcTemplate")
    private NamedParameterJdbcTemplate adminOlapJdbcTemplate;


    private TenantConfiguration sbxTenantConfiguration;
    private DataSourceElementsTenant olapRoSbx;
    private DataSourceElementsTenant olapRwSbx;
    private DataSourceElementsTenant reportingRoSbx;
    private DataSourceElementsTenant reportingRwSbx;
    private DataSourceElementsTenant warehouseRwSbx;
    private DataSourceElementsTenant warehouseRoSbx;
    private DataSourceElementsTenant migrateRwSbx;

    @Before
    public void setUp() throws Exception {

        final String olapUser = "ituxx01";
        final String olapPassword = createRandomPassword();
        logger.debug("olapUser: {} olapPassword {}", olapUser, olapPassword);
        olapRoSbx = generateDataSourceElementsTenant(olapUser, olapPassword, "reporting_sbx_xx", null);
        olapRwSbx = generateDataSourceElementsTenant(olapPassword, olapPassword, "reporting_sbx_xx", null);

        final String reportingUser = "ituxx02";
        final String reportingPassword = createRandomPassword();
        logger.debug("reportingUser: {} reportingPassword {}", reportingUser, reportingPassword);
        reportingRoSbx = generateDataSourceElementsTenant(reportingUser, reportingPassword, null, "reporting_sbx_xx");
        reportingRwSbx = generateDataSourceElementsTenant(reportingUser, reportingPassword, null, "reporting_sbx_xx");
        migrateRwSbx = generateDataSourceElementsTenant(reportingUser, reportingPassword, null, "migrate_sbx_xx");

        final String warehouseUser = "ituxx03";
        final String warehousePassword = createRandomPassword();
        logger.debug("warehouseUser: {} warehousePassword {}", warehouseUser, warehousePassword);
        warehouseRoSbx = generateDataSourceElementsTenant(warehouseUser, warehousePassword, null, "warehouse_sbx_xx");
        warehouseRwSbx = generateDataSourceElementsTenant(warehouseUser, warehousePassword, null, "warehouse_sbx_xx");

        Map<String, DataSourceElementsTenant> datasources =
                new ImmutableMap.Builder<String, DataSourceElementsTenant>()
                        .put("olap_ro", olapRoSbx)
                        .put("olap_rw", olapRwSbx)
                        .put("reporting_ro", reportingRoSbx)
                        .put("reporting_rw", reportingRwSbx)
                        .put("warehouse_ro", warehouseRoSbx)
                        .put("warehouse_rw", warehouseRwSbx)
                        .put("migrate_rw", migrateRwSbx)
                        .build();

        sbxTenantConfiguration = TenantConfiguration
                .builder()
                .tenant(Tenant.builder()
                        .id("SBX_XX")
                        .key("SBX_XX")
                        .name("IT Sandbox Test")
                        .sandboxDataset("test-dataset")
                        .build())
                .dataSources(datasources)
                .build();
    }

    private DataSourceElementsTenant generateDataSourceElementsTenant(String username,
                                                                      String password,
                                                                      String schemaSearchPath,
                                                                      String databaseName) {
        DataSourceElementsTenant dataSourceElementsTenant = new DataSourceElementsTenant();
        dataSourceElementsTenant.setUsername(username);
        dataSourceElementsTenant.setPassword(password);
        dataSourceElementsTenant.setSchemaSearchPath(schemaSearchPath);
        DataSourceUrlParts dataSourceUrlParts = new DataSourceUrlParts();
        dataSourceUrlParts.setDatabase(databaseName);
        dataSourceElementsTenant.setUrlParts(dataSourceUrlParts);
        return dataSourceElementsTenant;
    }


    private void deleteSandboxDatabasesAndUsers() {
        //Drop OLAP
        if (jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists(olapRoSbx.getUsername())) {
            jdbcMultitenantDatabaseAdmin.revokeOlapUser(olapRoSbx.getSchemaSearchPath(),
                    olapRoSbx.getUsername());
        }
        jdbcMultitenantDatabaseAdmin.dropSandboxOlapSchemaAndUser(olapRoSbx.getSchemaSearchPath(), olapRoSbx.getUsername());

        //Drop Reporting
        jdbcMultitenantDatabaseAdmin.dropSandboxDatabase(reportingRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.REPORTING);
        if (jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(reportingRoSbx.getUsername(), RdwDatabaseType.REPORTING)) {
            jdbcMultitenantDatabaseAdmin.dropSandboxUser(reportingRoSbx.getUsername(), RdwDatabaseType.REPORTING);
        }

        //Drop Migrate
        jdbcMultitenantDatabaseAdmin.dropSandboxDatabase(migrateRwSbx.getUrlParts().getDatabase(), RdwDatabaseType.MIGRATE_OLAP);
        if (jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(migrateRwSbx.getUsername(), RdwDatabaseType.MIGRATE_OLAP)) {
            jdbcMultitenantDatabaseAdmin.dropSandboxUser(migrateRwSbx.getUsername(), RdwDatabaseType.MIGRATE_OLAP);
        }

        //Drop Warehouse
        jdbcMultitenantDatabaseAdmin.dropSandboxDatabase(warehouseRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.WAREHOUSE);
        if (jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(warehouseRoSbx.getUsername(), RdwDatabaseType.WAREHOUSE)) {
            jdbcMultitenantDatabaseAdmin.dropSandboxUser(warehouseRoSbx.getUsername(), RdwDatabaseType.WAREHOUSE);
        }
    }

    @Test
    public void createSandboxDatabases() {
        //fresh state
        deleteSandboxDatabasesAndUsers();

        assertThat(jdbcMultitenantDatabaseAdmin.isOlapSchemaExists(olapRoSbx.getSchemaSearchPath()))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists(olapRoSbx.getUsername()))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(reportingRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.REPORTING))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(reportingRoSbx.getUsername(), RdwDatabaseType.REPORTING))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(migrateRwSbx.getUrlParts().getDatabase(), RdwDatabaseType.MIGRATE_OLAP))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(migrateRwSbx.getUsername(), RdwDatabaseType.MIGRATE_OLAP))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(warehouseRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.WAREHOUSE))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(warehouseRoSbx.getUsername(), RdwDatabaseType.WAREHOUSE))
                .isFalse();


        //TODO: assertions
        tenantDatabaseAdminOrchestrationService.createSandboxDatabases(sbxTenantConfiguration);

        assertThat(jdbcMultitenantDatabaseAdmin.isOlapSchemaExists(olapRoSbx.getSchemaSearchPath()))
                .isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists(olapRoSbx.getUsername()))
                .isTrue();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(reportingRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.REPORTING))
                .isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(reportingRoSbx.getUsername(), RdwDatabaseType.REPORTING))
                .isTrue();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(migrateRwSbx.getUrlParts().getDatabase(), RdwDatabaseType.MIGRATE_OLAP))
                .isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(migrateRwSbx.getUsername(), RdwDatabaseType.MIGRATE_OLAP))
                .isTrue();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(warehouseRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.WAREHOUSE))
                .isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(warehouseRoSbx.getUsername(), RdwDatabaseType.WAREHOUSE))
                .isTrue();

        //reset - doing this a second time because first pass was likely a no-op
        deleteSandboxDatabasesAndUsers();

        assertThat(jdbcMultitenantDatabaseAdmin.isOlapSchemaExists(olapRoSbx.getSchemaSearchPath()))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists(olapRoSbx.getUsername()))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(reportingRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.REPORTING))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(reportingRoSbx.getUsername(), RdwDatabaseType.REPORTING))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(migrateRwSbx.getUrlParts().getDatabase(), RdwDatabaseType.MIGRATE_OLAP))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(migrateRwSbx.getUsername(), RdwDatabaseType.MIGRATE_OLAP))
                .isFalse();

        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseExists(warehouseRoSbx.getUrlParts().getDatabase(), RdwDatabaseType.WAREHOUSE))
                .isFalse();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(warehouseRoSbx.getUsername(), RdwDatabaseType.WAREHOUSE))
                .isFalse();
    }

    private String createRandomPassword() {
        final String letters = RandomStringUtils.random(1, true, false).toUpperCase() +
                RandomStringUtils.random(5, true, false).toLowerCase();
        final String numbers = RandomStringUtils.random(2, false, true);
        return letters + numbers;
    }
}
