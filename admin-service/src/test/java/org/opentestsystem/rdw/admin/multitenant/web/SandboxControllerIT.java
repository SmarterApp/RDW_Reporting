package org.opentestsystem.rdw.admin.multitenant.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.service.TenantService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.time.Instant;
import java.util.HashSet;
import java.util.Set;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {SandboxController.class}, secure = false)
public class SandboxControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper.registerModule(new JavaTimeModule());
    }

    @Test
    public void itShouldReturnAllSandboxInformation() throws Exception {
        final Set<TenantConfiguration> sandboxConfigurations = ImmutableSet.of(getTenantConfig("CA_S001"));
        final String key = ((ImmutableSet<TenantConfiguration>) sandboxConfigurations).asList().get(0).getTenant().getKey();
        final String dataset = ((ImmutableSet<TenantConfiguration>) sandboxConfigurations).asList().get(0).getTenant().getSandboxDataset();
        when(service.getAll(TenantType.SANDBOX)).thenReturn(sandboxConfigurations);

        mvc.perform(get("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.[0].tenant.key").value(key))
                .andExpect(jsonPath("$.[0].tenant.sandboxDataset").value(dataset));

        verify(service).getAll(TenantType.SANDBOX);
    }

    @Test
    public void isShouldCreateSandbox() throws Exception {
        final TenantConfiguration tenantConfiguration = new TenantConfiguration();
        when(service.createTenant(any())).thenReturn(tenantConfiguration);

        mvc.perform(post("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isCreated());

        verify(service).createTenant(any(TenantConfiguration.class));
    }

    @Test
    public void isShouldUpdate() throws Exception {
        final TenantConfiguration tenantConfiguration = new TenantConfiguration();
        when(service.updateTenant(any(TenantConfiguration.class))).thenReturn(tenantConfiguration);

        mvc.perform(put("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isOk());

        verify(service).updateTenant(any(TenantConfiguration.class));
    }

    @Test
    public void itShouldDelete() throws Exception {
        // create tenantToDelete
        mvc.perform(delete(String.format("/sandboxes/%s", "XX"))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(service).deleteTenant("XX");
    }

    @Test
    public void itShouldRetrieveSandboxDataSets() throws Exception {
        when(service.getSandboxDataSets()).thenReturn(ImmutableList.copyOf(getDataSets()));

        // get the stub SandboxDataSets
        mvc.perform(get("/sandboxes/datasets")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(3)));

        verify(service).getSandboxDataSets();
    }

    /**
     * @return mock datasets
     */
    private static Set<DataSet> getDataSets() {
        final Set<DataSet> dataSets = new HashSet<>();
        DataSet dataSetCa = new DataSet();
        dataSetCa.setLabel("California Interim Data Set");
        dataSetCa.setId("ca_interim");
        dataSets.add(dataSetCa);

        DataSet dataSetMi = new DataSet();
        dataSetMi.setLabel("Michigan Summative Data Set");
        dataSetMi.setId("mi_summative");
        dataSets.add(dataSetMi);

        DataSet dataSetSbac = new DataSet();
        dataSetSbac.setLabel("SBAC Interim Data Set");
        dataSetSbac.setId("sbac_interim");
        dataSets.add(dataSetSbac);

        return dataSets;
    }

    /**
     * @param id indicates CA or NV tenant
     * @return mocked TenantConfiguration that can be used for testing
     */
    private TenantConfiguration getTenantConfig(final String id) {
        final AggregateReportingPropertiesTenant aggregatePropeties = new AggregateReportingPropertiesTenant();
        aggregatePropeties.setStatewideUserAssessmentTypes(ImmutableSet.of("icb"));
        return (TenantConfiguration.builder()
                .tenant(getTenant(id))
                .parentTenantKey(id.equals("CA_S001") ? "CA" : "NV")
                .administrationStatus(TenantAdministrationStatus.ACTIVE)
                .archiveProperties(null)
                .aggregateReportingProperties(aggregatePropeties)
                .dataSources(null)
                .build()
        );
    }

    /**
     * @param id indicates CA or NV tenant
     * @return the Tenant for the given id
     */
    private Tenant getTenant(final String id) {
        return Tenant.builder().name(id.equals("CA") ? "California Sandbox 01" : "Nevada sandbox 01")
                .sandbox(false)
                .description(id.equals("CA") ? "CA's  sandbox Description" : "Nevada's sandbox Description")
                .id(id)
                .key(id)
                .created(Instant.now())
                .sandboxDataset(id.equals("CA") ? "sbac_interim" : "mi_summative")
                .build();
    }

}