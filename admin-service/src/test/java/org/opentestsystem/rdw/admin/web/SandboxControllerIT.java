package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationStubs;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {SandboxController.class}, secure = false)
public class SandboxControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void itShouldReturnAllSandboxInformation() throws Exception {
        AllApplicationTenantConfiguration allApplicationTenantConfiguration = new AllApplicationTenantConfiguration();
        when(service.getAll(TenantService.TenantType.SANDBOX)).thenReturn(allApplicationTenantConfiguration);

        mvc.perform(get("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(service).getAll(TenantService.TenantType.SANDBOX);
    }

    @Test
    public void isShouldCreateSandbox() throws Exception {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        when(service.createTenant(any())).thenReturn(tenantConfiguration);

        mvc.perform(post("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isCreated());

        verify(service).createTenant(any(TenantConfiguration.class));
    }

    @Test
    public void isShouldUpdate() throws Exception {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        when(service.updateTenant(any(TenantConfiguration.class))).thenReturn(tenantConfiguration);

        mvc.perform(put("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isOk());

        verify(service).updateTenant(any(TenantConfiguration.class));
    }

    @Test
    public void itShouldDelete() throws Exception {
        // create tenantToDelete
        mvc.perform(delete(String.format("/sandboxes/%s", "XX"))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(service).deleteTenant(any(String.class));
    }

    @Test
    public void itShouldRetrieveSandboxDataSets() throws Exception {
        when(service.getSandboxDataSets()).thenReturn(ImmutableList.copyOf(SandboxConfigurationStubs.getDataSets()));

        // get the stub SandboxDataSets
        mvc.perform(get("/sandboxes/datasets")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(3)));

        verify(service).getSandboxDataSets();
    }

}