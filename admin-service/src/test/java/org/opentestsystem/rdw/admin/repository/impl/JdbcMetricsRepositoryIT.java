package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.TenantMetric;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcMetricsRepository.class})
@Sql(
        config = @SqlConfig(dataSource = "warehouseDatasource", transactionManager = "warehouseTxManager"),
        scripts = {"classpath:warehouse-metrics-setup.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcMetricsRepositoryIT {

    @Autowired
    JdbcMetricsRepository repository;

    @Test
    public void itShouldFindAll() {
        final List<TenantMetric> actual = repository.findAllMetrics();
        assertThat(actual.size()).isEqualTo(4);
        actual.stream()
                .filter(tenantMetric -> tenantMetric.getType().equals("Subjects"))
                .forEach(tenantMetric -> {
                    assertThat(tenantMetric.getCount()).isGreaterThan(0);
                });
        actual.stream()
                .filter(tenantMetric -> tenantMetric.getType().equals("Students"))
                .forEach(tenantMetric -> {
                    assertThat(tenantMetric.getCount()).isGreaterThan(0);
                });
        actual.stream()
                .filter(tenantMetric -> tenantMetric.getType().equals("Schools"))
                .forEach(tenantMetric -> {
                    assertThat(tenantMetric.getCount()).isGreaterThan(0);
                });
    }

}
