package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.model.PipelineTestResult;
import org.opentestsystem.rdw.admin.model.PipelineTestRun;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.script.util.ScriptError;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(PipelineController.class)
public class PipelineControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private PipelineService service;

    private final User user = User.builderExt()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void itShouldGet() throws Exception {

        final Pipeline pipeline = Pipeline.builder()
                .id(1)
                .code("pipey")
                .build();

        when(service.getPipelines()).thenReturn(newArrayList(
                pipeline
        ));

        mvc.perform(get("/pipelines").with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(pipeline.getId()))
                .andExpect(jsonPath("$[0].code").value(pipeline.getCode()));
    }

    @Test
    public void itShouldGetSinglePipeline() throws Exception {

        final Pipeline pipeline = Pipeline.builder()
                .id(1)
                .code("pipey")
                .build();

        when(service.getPipeline(pipeline.getId())).thenReturn(pipeline);

        mvc.perform(get("/pipelines/1").with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(pipeline.getId()))
                .andExpect(jsonPath("$.code").value(pipeline.getCode()));
    }

    @Test
    public void itShouldGetScripts() throws Exception {

        final PipelineScript script = PipelineScript.builder()
                .pipelineId(1)
                .id(2)
                .body("something")
                .updatedBy("somebody")
                .build();

        when(service.getScripts(1)).thenReturn(newArrayList(
                script
        ));

        mvc.perform(get("/pipelines/1/scripts").with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].pipelineId").value(script.getPipelineId()))
                .andExpect(jsonPath("$[0].id").value(script.getId()))
                .andExpect(jsonPath("$[0].body").value(script.getBody()))
                .andExpect(jsonPath("$[0].updatedBy").value(script.getUpdatedBy()))
        ;
    }

    @Test
    public void itShouldGetTests() throws Exception {

        final PipelineTest test = PipelineTest.builder()
                .pipelineId(1)
                .id(2)
                .name("name")
                .input("in")
                .output("out")
                .updatedBy("somebody")
                .build();

        when(service.getTests(1)).thenReturn(newArrayList(
                test
        ));

        mvc.perform(get("/pipelines/1/tests").with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].pipelineId").value(test.getPipelineId()))
                .andExpect(jsonPath("$[0].id").value(test.getId()))
                .andExpect(jsonPath("$[0].name").value(test.getName()))
                .andExpect(jsonPath("$[0].input").value(test.getInput()))
                .andExpect(jsonPath("$[0].output").value(test.getOutput()))
                .andExpect(jsonPath("$[0].updatedBy").value(test.getUpdatedBy()))
        ;
    }

    @Test
    public void itShouldCompile() throws Exception {

        final String script = "script";
        final ScriptError error = new ScriptError("message", 1, 2);
//                ScriptError.builder()
//                .row(1)
//                .column(2)
//                .message("message")
//                .build();

        when(service.compile(script)).thenReturn(newArrayList(
                error
        ));

        mvc.perform(
                post("/pipelines/compile")
                        .with(user(user))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(script)
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].row").value(error.getRow()))
                .andExpect(jsonPath("$[0].column").value(error.getColumn()))
                .andExpect(jsonPath("$[0].message").value(error.getMessage()))
        ;
    }

    @Test
    public void itShouldRunTests() throws Exception {

        final PipelineTestRun run = PipelineTestRun.builder()
                .test(
                        PipelineTest.builder()
                                .id(2)
                                .build()
                )
                .result(
                        PipelineTestResult.builder()
                                .passed(true)
                                .build()
                )
                .build();

        when(service.test(1, null)).thenReturn(newArrayList(
                run
        ));

        mvc.perform(
                post("/pipelines/1/test?testId")
                        .with(user(user))
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].test.id").value(run.getTest().getId()))
                .andExpect(jsonPath("$[0].result.passed").value(run.getResult().isPassed()))
        ;
    }

    @Test
    public void itShouldRunTest() throws Exception {

        final PipelineTestRun run = PipelineTestRun.builder()
                .test(
                        PipelineTest.builder()
                                .id(2)
                                .build()
                )
                .result(
                        PipelineTestResult.builder()
                                .passed(true)
                                .build()
                )
                .build();

        when(service.test(1, newArrayList(2))).thenReturn(newArrayList(
                run
        ));

        mvc.perform(
                post("/pipelines/1/test?testId=2")
                        .with(user(user))
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].test.id").value(run.getTest().getId()))
                .andExpect(jsonPath("$[0].result.passed").value(run.getResult().isPassed()))
        ;
    }

    @Test
    public void itShouldPublish() throws Exception {
        final int version = 1;

        when(service.publish(2)).thenReturn(version);

        mvc.perform(
                post("/pipelines/2/publish")
                        .with(user(user))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(Integer.toString(version))
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").value(version))
        ;
    }

}
