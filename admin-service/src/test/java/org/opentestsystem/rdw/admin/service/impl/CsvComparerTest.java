package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.service.Comparer;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class CsvComparerTest {

    private Comparer<String> comparer = new CsvComparer();

    @Test()
    public void itShouldReturnTrueWhenEqual() {
        final String input = "a,b,c\ne,f,g";
        assertThat(comparer.equals(input, input)).isTrue();
    }

    @Test()
    public void itShouldReturnFalseWhenInequal() {
        final String input = "a,b,c";
        assertThat(comparer.equals(input, "a,b,")).isFalse();
        assertThat(comparer.equals(input, "a,b")).isFalse();
        assertThat(comparer.equals(input, ",b,c")).isFalse();
    }

    @Test()
    public void itShouldReturnFalseWhenMissingLines() {
        final String input = "a,b,c\ne,f,g";
        assertThat(comparer.equals(input, "a,b,c")).isFalse();
        assertThat(comparer.equals(input, "e,f,g")).isFalse();
    }

    @Test()
    public void itShouldNotIgnoreWhitespace() {
        final String input = "a,b,c";
        assertThat(comparer.equals(input, " a,b,c")).isFalse();
        assertThat(comparer.equals(input, "a ,b,c")).isFalse();
        assertThat(comparer.equals(input, "a, b,c")).isFalse();
        assertThat(comparer.equals(input, "a,b ,c")).isFalse();
        assertThat(comparer.equals(input, "a,b, c")).isFalse();
        assertThat(comparer.equals(input, "a,b,c ")).isFalse();
    }

    @Test()
    public void itShouldIgnoreEmptyLines() {
        final String input = "a,b,c";
        assertThat(comparer.equals(input, "\n\na,b,c")).isTrue();
        assertThat(comparer.equals(input, "a,b,c\n\n")).isTrue();
    }

    @Test
    public void isBlankD() {
        assertThat(isBlank("\n")).isTrue();
    }

}
