package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.net.URL;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.stream.Stream;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.District;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.DistrictGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.SchoolGroup;
import static org.opentestsystem.rdw.reporting.common.model.OrganizationType.State;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districtGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.schoolGroups;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = JdbcInstructionalResourceRepository.class)
@Sql(
        config = @SqlConfig(dataSource = "reportingDatasource", transactionManager = "reportingTxManager"),
        scripts = {"classpath:instructional-resource-data.sql"}
)
@Transactional(transactionManager = "reportingTxManager")
public class JdbcInstructionalResourceRepositoryIT {

    @Autowired
    private JdbcInstructionalResourceRepository repository;

    @Autowired
    @Qualifier("reportingJdbcTemplate")
    private NamedParameterJdbcTemplate template;

    @Test
    public void itShouldRetrieveAllNonSystemInstructionalResourcesForAStatewideUser() {
        final Collection<InstructionalResource> resources = repository.findAll(statewide());
        assertThat(toResourceUrls(resources))
                .hasSize(9)
                .containsOnly(
                resourceUrl("ica1", State, 0, null),
                resourceUrl("ica1", State, 1, null),
                resourceUrl("iab1", DistrictGroup, 0, -10),
                resourceUrl("iab1", DistrictGroup, 1, -10),
                resourceUrl("iab1", DistrictGroup, 0, -20),
                resourceUrl("sum1", District, 0, -10),
                resourceUrl("sum1", District, 0, -20),
                resourceUrl("sum1", District, 0, -30),
                resourceUrl("sum2", SchoolGroup, 0, -10));
    }

    @Test
    public void itShouldRetrieveAllApplicableInstructionalResourcesForADistrictGroupUser() {
        assertThat(toResourceUrls(repository.findAll(districtGroups(-10L)))).containsOnly(
                resourceUrl("iab1", DistrictGroup, 0, -10),
                resourceUrl("iab1", DistrictGroup, 1, -10),
                resourceUrl("sum1", District, 0, -10),
                resourceUrl("sum2", SchoolGroup, 0, -10));

        assertThat(toResourceUrls(repository.findAll(districtGroups(-20L)))).containsOnly(
                resourceUrl("iab1", DistrictGroup, 0, -20),
                resourceUrl("sum1", District, 0, -20));
    }

    @Test
    public void itShouldRetrieveAllApplicableInstructionalResourcesForADistrictUser() {
        assertThat(toResourceUrls(repository.findAll(districts(-10L)))).containsOnly(
                resourceUrl("sum1", District, 0, -10),
                resourceUrl("sum2", SchoolGroup, 0, -10));

        assertThat(toResourceUrls(repository.findAll(districts(-20L)))).containsOnly(
                resourceUrl("sum1", District, 0, -20));
    }

    @Test
    public void itShouldRetrieveAllApplicableInstructionalResourcesForASchoolGroupUser() {
        assertThat(toResourceUrls(repository.findAll(schoolGroups(-10L)))).containsOnly(
                resourceUrl("sum2", SchoolGroup, 0, -10));

        assertThat(toResourceUrls(repository.findAll(schoolGroups(-20L)))).isEmpty();
    }

    @Test
    public void itShouldFindOneInstructionalResource() throws Exception {
        final InstructionalResource stateResourceSpecifier = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(0)
                .organizationType(State)
                .build();
        assertThat(repository.findOne(statewide(), stateResourceSpecifier))
                .isEqualToComparingFieldByFieldRecursively(InstructionalResource.builder()
                        .assessmentName("ica1")
                        .assessmentLabel("ica1, ica1 new label")
                        .assessmentType(AssessmentType.ICA)
                        .assessmentSubjectCode("Math")
                        .performanceLevel(0)
                        .organizationType(State)
                        .resource(new URL("http://State/ica1/0"))
                        .build());

        final InstructionalResource schoolGroupResourceSpecifier = InstructionalResource.builder()
                .assessmentName("sum2")
                .performanceLevel(0)
                .organizationType(SchoolGroup)
                .organizationId(-10)
                .build();
        assertThat(repository.findOne(districtGroups(-10L), schoolGroupResourceSpecifier))
                .isEqualToComparingFieldByFieldRecursively(InstructionalResource.builder()
                        .assessmentName("sum2")
                        .assessmentLabel("sum2")
                        .assessmentType(AssessmentType.SUMMATIVE)
                        .assessmentSubjectCode("ELA")
                        .performanceLevel(0)
                        .organizationType(SchoolGroup)
                        .organizationId(-10)
                        .organizationName("schoolgroup1")
                        .resource(new URL("http://SchoolGroup-10/sum2/0"))
                        .build());
    }

    @Test
    public void itShouldNotFindOneInstructionalResourceIfUserDoesNotHavePermissions() {
        final InstructionalResource stateResourceSpecifier = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(0)
                .organizationType(State)
                .build();
        assertThat(repository.findOne(districtGroups(-10L), stateResourceSpecifier))
                .isNull();

        final InstructionalResource schoolGroupResourceSpecifier = InstructionalResource.builder()
                .assessmentName("sum2")
                .performanceLevel(0)
                .organizationType(SchoolGroup)
                .organizationId(-10)
                .build();
        assertThat(repository.findOne(districtGroups(-20L), schoolGroupResourceSpecifier))
                .isNull();
    }

    @Test
    public void itShouldUpdateAnInstructionalResource() throws Exception {
        final InstructionalResource updated = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(0)
                .organizationType(State)
                .resource(new URL("http://my-new-resource/"))
                .build();
        repository.update(updated);

        assertThat(repository.findOne(statewide(), updated))
                .isEqualToComparingFieldByFieldRecursively(InstructionalResource.builder()
                        .assessmentName("ica1")
                        .assessmentLabel("ica1, ica1 new label")
                        .assessmentType(AssessmentType.ICA)
                        .assessmentSubjectCode("Math")
                        .performanceLevel(0)
                        .organizationType(State)
                        .resource(new URL("http://my-new-resource/"))
                        .build());
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateANonExistentInstructionalResource() throws Exception {
        final InstructionalResource updated = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(3)
                .organizationType(State)
                .resource(new URL("http://my-new-resource/"))
                .build();
        repository.update(updated);
    }

    @Test
    public void itShouldCreateANewInstructionalResource() throws Exception {
        final InstructionalResource newResource = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(3)
                .organizationType(District)
                .organizationId(-10)
                .resource(new URL("http://my-new-resource"))
                .build();
        repository.create(newResource);

        final InstructionalResource expectedResource = InstructionalResource.builder()
                .copy(newResource)
                .organizationName("district1")
                .assessmentLabel("ica1, ica1 new label")
                .assessmentType(AssessmentType.ICA)
                .assessmentSubjectCode("Math")
                .build();
        assertThat(repository.findOne(districts(-10L), newResource))
                .isEqualToComparingFieldByFieldRecursively(expectedResource);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotCreateADuplicateInstructionalResource() throws Exception {
        final InstructionalResource existing = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(0)
                .organizationType(State)
                .resource(new URL("http://my-new-resource/"))
                .build();
        repository.create(existing);
    }

    @Test
    public void itShouldDeleteAnInstructionalResource() {
        final InstructionalResource stateResourceSpecifier = InstructionalResource.builder()
                .assessmentName("ica1")
                .performanceLevel(0)
                .organizationType(State)
                .build();

        assertThat(repository.findOne(statewide(), stateResourceSpecifier)).isNotNull();
        repository.delete(stateResourceSpecifier);
        assertThat(repository.findOne(statewide(), stateResourceSpecifier)).isNull();

        //Since we're joining on the asmt table during the deletion, ensure the assessment is still present
        assertThat(template.queryForObject("SELECT id FROM asmt WHERE id = -1", new MapSqlParameterSource(), Integer.class))
                .isEqualTo(-1);
    }

    @Test
    public void itShouldNotComplainWhenDeletingANonExistentInstructionalResource() {
        final InstructionalResource districtSpecifier = InstructionalResource.builder()
                .assessmentName("iab1")
                .performanceLevel(0)
                .organizationType(District)
                .build();
        repository.delete(districtSpecifier);
    }

    private Stream<String> toResourceUrls(final Collection<InstructionalResource> instructionalResources) {
        return instructionalResources.stream()
                .map(resource -> resource.getResource().toString());
    }

    private String resourceUrl(final String asmtName,
                                  final OrganizationType organizationLevel,
                                  final int performanceLevel,
                                  final Integer organizationId) {
        final String orgId = organizationId == null ? EMPTY : organizationId.toString();
        return "http://" + organizationLevel + orgId + "/" + asmtName + "/" + performanceLevel;
    }
}