package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.base.Charsets;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.test.context.junit4.SpringRunner;

import org.opentestsystem.rdw.messaging.GroupMessage;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.reporting.common.security.User;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
public class DefaultGroupsSourceTest {

    private MessageChannel messageChannel;
    private DefaultGroupsSource groupsSource;

    @Before
    public void createGroupSource() {
        messageChannel = mock(MessageChannel.class);
        final Source source = mock(Source.class);
        when(source.output()).thenReturn(messageChannel);

        groupsSource = new DefaultGroupsSource(source);
    }

    @Test
    public void uploadGroupsShouldSetHeadersAndSendMessage() {
        final Long uploadId = 1L;
        final GroupMessage body = new GroupMessage.Builder()
                .digest("abcdef123456789")
                .uploadId(uploadId)
                .build();
        final User user = mock(User.class);
        when(user.getTenantId()).thenReturn("CA");

        groupsSource.send(body.toJson().getBytes(Charsets.UTF_8),
                MediaType.APPLICATION_JSON.toString(), uploadId, user);

        final ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
        verify(messageChannel).send(messageCaptor.capture());
        final Message message = messageCaptor.getValue();
        assertThat(message.getPayload()).isEqualTo(body.toJson().getBytes(Charsets.UTF_8));
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        assertThat(accessor.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
        assertThat(accessor.getImportId()).isEqualTo(uploadId);
        assertThat(accessor.getTenantId()).isEqualTo("CA");
    }
}
