package org.opentestsystem.rdw.admin.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.model.AssessmentQuery;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AssessmentQueryArgumentResolverTest {

    @Mock
    private MethodParameter methodParameter;

    @Mock
    private ModelAndViewContainer mavContainer;

    @Mock
    private NativeWebRequest webRequest;

    @Mock
    private WebDataBinderFactory binderFactory;

    private Map<String, String> parameters;

    private AssessmentQueryArgumentResolver resolver;

    @Before
    public void setup() {
        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> AssessmentQuery.class);

        parameters = new HashMap<>();
        when(webRequest.getParameter(anyString()))
                .thenAnswer(invocation -> parameters
                        .get(invocation.getArgument(0)));

        resolver = new AssessmentQueryArgumentResolver();
    }

    @Test
    public void itShouldResolveAssessmentQueryParameters() {
        assertThat(resolver.supportsParameter(methodParameter)).isTrue();

        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> Object.class);
        assertThat(resolver.supportsParameter(methodParameter)).isFalse();
    }

    @Test
    public void itShouldParseAnEmptyAssessmentQuery() throws Exception {
        final AssessmentQuery query = (AssessmentQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(query.getLimit()).isEqualTo(AssessmentQueryArgumentResolver.DefaultLimit);
        assertThat(query.getLabel()).isNull();
    }

    @Test
    public void itShouldParseAnAssessmentQuery() throws Exception {
        parameters.put("limit", "123");
        parameters.put("label", "some label");
        final AssessmentQuery query = (AssessmentQuery) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(query.getLimit()).isEqualTo(123);
        assertThat(query.getLabel()).isEqualTo("some label");
    }

}