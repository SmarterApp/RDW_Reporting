package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.admin.service.InstructionalResourceService;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URL;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.security.AdminPermission.InstructionalResourceWrite;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(InstructionalResourceController.class)
public class InstructionalResourceControllerIT {

    private final User user = User.builder()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .permissionsById(
                    ImmutableMap.of(
                            InstructionalResourceWrite, new Permission(InstructionalResourceWrite, statewide())
                    )
            )
            .build();
    @Autowired
    private MockMvc mvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private InstructionalResourceService service;
    @Captor
    private ArgumentCaptor<InstructionalResource> resourceCaptor;

    @Test
    public void itShouldRetrieveInstructionalResources() throws Exception {
        when(service.findAll(any(User.class))).thenReturn(ImmutableList.of(
                InstructionalResource.builder()
                        .assessmentName("Assessment A")
                        .assessmentLabel("Assessment Label A")
                        .organizationId(234)
                        .organizationName("Organization A")
                        .organizationType(OrganizationType.District)
                        .performanceLevel(0)
                        .resource(new URL("http://somewhere-a/"))
                        .build(),
                InstructionalResource.builder()
                        .assessmentName("Assessment B")
                        .assessmentLabel("Assessment Label B")
                        .organizationId(567)
                        .organizationName("Organization B")
                        .organizationType(OrganizationType.SchoolGroup)
                        .performanceLevel(1)
                        .resource(new URL("http://somewhere-b/"))
                        .build()
        ));

        mvc.perform(get("/instructional-resources")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$[0].assessmentName").value("Assessment A"))
                .andExpect(jsonPath("$[0].assessmentLabel").value("Assessment Label A"))
                .andExpect(jsonPath("$[0].organizationId").value(234))
                .andExpect(jsonPath("$[0].organizationName").value("Organization A"))
                .andExpect(jsonPath("$[0].organizationType").value("District"))
                .andExpect(jsonPath("$[0].performanceLevel").value(0))
                .andExpect(jsonPath("$[0].resource").value("http://somewhere-a/"))
                .andExpect(jsonPath("$[1].assessmentName").value("Assessment B"));
    }

    @Test
    public void itShouldReturnAnEmptyArrayForNoResults() throws Exception {
        when(service.findAll(any(User.class))).thenReturn(ImmutableList.of());

        mvc.perform(get("/instructional-resources")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(0)));
    }

    @Test
    public void itShouldCreateAnInstructionalResource() throws Exception {
        when(service.create(any(User.class), any(InstructionalResource.class)))
                .thenAnswer(invocation -> invocation.getArgumentAt(1, InstructionalResource.class));

        final InstructionalResource newResource = InstructionalResource.builder()
                .assessmentName("Assessment A")
                .organizationId(234)
                .organizationType(OrganizationType.District)
                .performanceLevel(0)
                .resource(new URL("http://somewhere-a/"))
                .build();

        mvc.perform(post("/instructional-resources")
                .with(user(user))
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(newResource)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.assessmentName").value("Assessment A"))
                .andExpect(jsonPath("$.organizationId").value(234))
                .andExpect(jsonPath("$.organizationType").value("District"))
                .andExpect(jsonPath("$.performanceLevel").value(0))
                .andExpect(jsonPath("$.resource").value("http://somewhere-a/"));
    }

    @Test
    public void itShouldUpdateAnInstructionalResource() throws Exception {
        when(service.update(any(User.class), any(InstructionalResource.class)))
                .thenAnswer(invocation -> invocation.getArgumentAt(1, InstructionalResource.class));

        final InstructionalResource updatedResource = InstructionalResource.builder()
                .assessmentName("Assessment A")
                .organizationId(234)
                .organizationType(OrganizationType.District)
                .performanceLevel(0)
                .resource(new URL("http://somewhere-a/"))
                .build();

        mvc.perform(put("/instructional-resources")
                .with(user(user))
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updatedResource)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assessmentName").value("Assessment A"))
                .andExpect(jsonPath("$.organizationId").value(234))
                .andExpect(jsonPath("$.organizationType").value("District"))
                .andExpect(jsonPath("$.performanceLevel").value(0))
                .andExpect(jsonPath("$.resource").value("http://somewhere-a/"));
    }

    @Test
    public void itShouldDeleteAnInstructionalResource() throws Exception {
        mvc.perform(delete("/instructional-resources?assessmentName=AssessmentA&organizationId=234&organizationType=District&performanceLevel=1")
                .with(user(user)))
                .andExpect(status().isNoContent());

        verify(service).delete(any(User.class), resourceCaptor.capture());
        final InstructionalResource deleted = resourceCaptor.getValue();
        assertThat(deleted.getAssessmentName()).isEqualTo("AssessmentA");
        assertThat(deleted.getOrganizationId()).isEqualTo(234);
        assertThat(deleted.getOrganizationType()).isEqualTo(OrganizationType.District);
        assertThat(deleted.getPerformanceLevel()).isEqualTo(1);
    }

    @Test
    public void itShouldDeleteAnInstructionalResourceWithoutAnOrganizationId() throws Exception {
        mvc.perform(delete("/instructional-resources?assessmentName=AssessmentA&organizationType=State&performanceLevel=1")
                .with(user(user)))
                .andExpect(status().isNoContent());

        verify(service).delete(any(User.class), resourceCaptor.capture());
        final InstructionalResource deleted = resourceCaptor.getValue();
        assertThat(deleted.getAssessmentName()).isEqualTo("AssessmentA");
        assertThat(deleted.getOrganizationType()).isEqualTo(OrganizationType.State);
        assertThat(deleted.getPerformanceLevel()).isEqualTo(1);
        assertThat(deleted.getOrganizationId()).isNull();
    }
}