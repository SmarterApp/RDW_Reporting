package org.opentestsystem.rdw.admin.service.impl;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PublishedPipeline;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.opentestsystem.rdw.admin.repository.PipelineScriptRepository;
import org.opentestsystem.rdw.admin.repository.PublishedPipelineRepository;

import java.io.IOException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultPipelineScriptServiceTest {

    @Mock
    private PipelineScriptRepository scriptRepository;

    @Mock
    private PipelineRepository pipelineRepository;

    @Mock
    private PublishedPipelineRepository publishedPipelineRepository;

    private DefaultPipelineScriptService service;

    private static final PipelineScript script = PipelineScript.builder()
            .pipelineId(1)
            .id(2)
            .body("body")
            .updatedBy("updater")
            .build();

    @Before
    public void before() {
        this.service = new DefaultPipelineScriptService(
                scriptRepository,
                pipelineRepository,
                publishedPipelineRepository
        );
    }

    @Test
    public void getShouldReturnTheSavedScriptIfPresent() {
        when(scriptRepository.findById(script.getId()))
                .thenReturn(script);

        assertThat(service.get(script.getPipelineId(), script.getId()))
                .isEqualToComparingFieldByFieldRecursively(script);
    }

    @Test
    @Ignore("for now")
    public void getShouldReturnThePublishedPipelinesScriptIfPresent() {

        final Pipeline pipeline = Pipeline.builder()
                .id(1)
                .code("code")
                .inputType("xml")
                .activeVersion(3)
                .build();

        final PublishedPipeline published = PublishedPipeline.builder()
                .pipelineId(1)
                .version(3)
                .publishedBy("updater")
                .userScripts(newArrayList(
                        script
                ))
                .build();

        when(scriptRepository.findById(script.getId()))
                .thenReturn(null);

        when(pipelineRepository.findById(pipeline.getId()))
                .thenReturn(pipeline);

        when(publishedPipelineRepository.findAllByCodeAndVersion(pipeline.getCode(), pipeline.getActiveVersion()))
                .thenReturn(newArrayList(published));

        assertThat(service.get(script.getPipelineId(), script.getId()))
                .isEqualToComparingFieldByFieldRecursively(published.getUserScripts().get(0));
    }

    @Test
    public void getShouldFallbackOnSampleScript() throws IOException {
        getShouldFallbackOnSampleScriptOfType(
                "xml", resourceAsString("pipeline-script-samples/xml.groovy"));
        getShouldFallbackOnSampleScriptOfType(
                "csv", resourceAsString("pipeline-script-samples/csv.groovy"));
    }

    @Test
    public void getShouldFallbackToEmptyScriptWhenSampleOfInputTypeIsAbsent() {
        getShouldFallbackOnSampleScriptOfType("unknown", "");
    }

    private String resourceAsString(final String path) throws IOException {
        return IOUtils.toString(
                getClass().getClassLoader().getResourceAsStream(path),
                "UTF-8"
        );
    }

    private void getShouldFallbackOnSampleScriptOfType(final String inputType, final String body) {
        final Pipeline pipeline = Pipeline.builder()
                .id(2)
                .code("code")
                .inputType(inputType)
                .build();

        when(pipelineRepository.findById(pipeline.getId()))
                .thenReturn(pipeline);

        assertThat(service.get(pipeline.getId(), script.getId()))
                .isNotNull()
                .isEqualToComparingFieldByFieldRecursively(
                        PipelineScript.builder()
                                .pipelineId(pipeline.getId())
                                .body(body)
                                .updatedBy("System")
                                .build()
                );
    }

}