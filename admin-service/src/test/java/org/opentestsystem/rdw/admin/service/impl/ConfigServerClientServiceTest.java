package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.admin.client.DefaultConfigServerClient;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;


import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class ConfigServerClientServiceTest {

    private DefaultConfigServerClient defaultConfigServerClient;
    private DefaultConfigServerClientService service;

    @Before
    public void setUp() {
        defaultConfigServerClient = mock(DefaultConfigServerClient.class);
        service = new DefaultConfigServerClientService(defaultConfigServerClient);
    }

    @Test
    public void
    itShouldDecryptSuccessfully() {
        final String encryptedPassword = "DEADBEEF";
        when(defaultConfigServerClient.decryptPassword(encryptedPassword)).thenReturn("decryptedResults");
        String decrypted = service.decrypt("{cipher}" + encryptedPassword);
        assertThat(decrypted).isNotNull().isEqualTo("decryptedResults");
        verify(defaultConfigServerClient).decryptPassword(any());
    }

    @Test
    public void
    itShouldDecryptSuccessfullyWithNoCipher() {
        final String encryptedPassword = "DEADBEEF";
        when(defaultConfigServerClient.decryptPassword(encryptedPassword)).thenReturn("decryptedResults");
        String decrypted = service.decrypt(encryptedPassword);
        assertThat(decrypted).isNotNull().isEqualTo("decryptedResults");
        verify(defaultConfigServerClient).decryptPassword(any());
    }
}
