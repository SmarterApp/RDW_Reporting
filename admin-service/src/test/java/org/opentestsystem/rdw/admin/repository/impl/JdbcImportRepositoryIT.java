package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.ImportRepository;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

import static com.google.common.collect.ImmutableMap.of;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcImportRepository.class})
@Sql(
        config = @SqlConfig(dataSource = "warehouseDatasource", transactionManager = "warehouseTxManager"),
        scripts = {"classpath:warehouse-integration-test-data.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcImportRepositoryIT {

    @Autowired
    public ImportRepository repository;

    @Autowired
    @Qualifier("warehouseJdbcTemplate")
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldCreateAnImport() {
        final long importId = repository.create(ImportContent.EMBARGO, "admin embargo modification", "digest", "batch");
        assertThat(template.queryForObject("SELECT status FROM import WHERE id=:id", of("id", importId), Integer.class))
                .isEqualTo(0);
    }

    @Test
    public void itShouldTriggerAnImport() {
        final long importId = repository.create(ImportContent.EMBARGO, "admin embargo modification", "digest", "batch");
        repository.setProcessed(importId);
        assertThat(template.queryForObject("SELECT status FROM import WHERE id=:id", of("id", importId), Integer.class))
                .isEqualTo(1);
    }

    @Test
    public void itShouldCreateGroupImport() {
        final long importId = repository.createGroupImport("text/csv", "digest", "test.csv", "user@example.com");

        final Map<String, Object> values = template.queryForMap("SELECT * from import where id=:id", of("id", importId));
        assertThat(values.get("id")).isEqualTo(importId);
        assertThat(values.get("status")).isEqualTo(0);
        assertThat(values.get("content")).isEqualTo(ImportContent.GROUPS.getValue());
        assertThat(values.get("contentType")).isEqualTo("text/csv");
        assertThat(values.get("digest")).isEqualTo("digest");
        assertThat(values.get("batch")).isEqualTo("test.csv");
        assertThat(values.get("creator")).isEqualTo("user@example.com");
        assertThat(values.get("message")).isNull();
    }

    @Test
    public void itShouldFindGroupImport() {
        final long importId = repository.createGroupImport("text/csv", "digest", "test.csv", "user@example.com");
        final StudentGroupBatch found = repository.findGroupById(importId);
        assertThat(found.getId()).isEqualTo(importId);
        assertThat(found.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(found.getDigest()).isEqualTo("digest");
        assertThat(found.getFilename()).isEqualTo("test.csv");
        assertThat(found.getCreator()).isEqualTo("user@example.com");
        assertThat(found.getMessage()).isNull();
    }

    @Test
    public void itShouldNotFindGroupImport() {
        assertThat(repository.findGroupById(-738438)).isNull();
    }

    @Test
    public void itShouldFindGroupByDigest() {
        final long importId = repository.createGroupImport("text/csv", "digest", "test.csv", "user@example.com");
        assertThat(repository.findGroupByDigest("digest").getId()).isEqualTo(importId);
    }

    @Test
    public void itShouldNotFindGroupByDigest() {
        assertThat(repository.findGroupByDigest("probablynotarealdigest")).isNull();
    }

    @Test
    public void itShouldFindGroupByCreator() {
        repository.createGroupImport("text/csv", "digest1", "test.csv", "user1@example.com");
        repository.createGroupImport("text/csv", "digest2", "test.csv", "user1@example.com");
        repository.createGroupImport("text/csv", "digest3", "test.csv", "user2@example.com");
        repository.createGroupImport("text/csv", "digest4", "test.csv", "user2@example.com");

        assertThat(repository.findGroupByCreator("user1@example.com").stream().map(StudentGroupBatch::getDigest))
                .containsOnly("digest1", "digest2");
        assertThat(repository.findGroupByCreator("user2@example.com").stream().map(StudentGroupBatch::getDigest))
                .containsOnly("digest3", "digest4");
        assertThat(repository.findGroupByCreator("user3@example.com")).isEmpty();
    }
}