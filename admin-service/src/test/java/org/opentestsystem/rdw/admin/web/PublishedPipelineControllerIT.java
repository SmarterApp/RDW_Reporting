package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.PublishedPipeline;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = PublishedPipelineController.class, secure = false)
public class PublishedPipelineControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private PipelineService service;

    @Autowired
    private ObjectMapper mapper;

    private static final PublishedPipeline pipeline = PublishedPipeline.builder()
            .id(1)
            .code("code")
            .inputType("xml")
            .version(2)
            .build();

    @Test
    public void itShouldGetPublishedPipelines() throws Exception {

        when(service.getPublishedPipelines(pipeline.getCode(), null)).thenReturn(newArrayList(
                pipeline
        ));

        mvc.perform(get("/publishedPipelines?pipelineCode=code"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].id").value(pipeline.getId()))
                .andExpect(jsonPath("$[0].code").value(pipeline.getCode()))
                .andExpect(jsonPath("$[0].inputType").value(pipeline.getInputType()))
                .andExpect(jsonPath("$[0].version").value(pipeline.getVersion()))
        ;
    }

    @Test
    public void itShouldActivate() throws Exception {
        mvc.perform(
                post("/publishedPipelines/activate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(pipeline))
        ).andExpect(status().isOk());

        verify(service).activate(pipeline.getId(), pipeline.getVersion());
    }

}
