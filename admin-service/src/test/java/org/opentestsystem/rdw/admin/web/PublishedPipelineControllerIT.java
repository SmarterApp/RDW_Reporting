package org.opentestsystem.rdw.admin.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.service.PipelineService;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = PublishedPipelineController.class, secure = false)
public class PublishedPipelineControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private PipelineService service;

    private static final PublishedPipeline pipeline = PublishedPipeline.builder()
            .pipelineCode("code")
            .version("2")
            .publishedBy("someone")
            .build();

    @Test
    public void itShouldGetPublishedPipelines() throws Exception {

        when(service.getPublishedPipelines(pipeline.getPipelineCode(), pipeline.getVersion()))
                .thenReturn(newArrayList(pipeline));

        mvc.perform(get("/publishedPipelines?pipelineCode=code&version=2"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].pipelineCode").value(pipeline.getPipelineCode()))
                .andExpect(jsonPath("$[0].version").value(pipeline.getVersion()))
                .andExpect(jsonPath("$[0].publishedBy").value(pipeline.getPublishedBy()))
        ;
    }

}
