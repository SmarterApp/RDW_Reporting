package org.opentestsystem.rdw.admin.multitenant.service.impl;


import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantValidationService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultTenantServiceTest {

    @Mock
    private TenantConfigurationViewService tenantConfigurationViewService;

    @Mock
    private SandboxDataSets sandboxDatasets;

    @Mock
    private TenantValidationService tenantValidationService;

    @Mock
    private TenantAdministrationRequestHandler tenantAdministrationRequestHandler;

    @Mock
    private TenantAdministrationStatusService tenantAdministrationStatusService;

    //class under test
    private DefaultTenantService defaultTenantService;

    private TenantConfiguration aa;
    private TenantConfiguration bb;
    private TenantConfiguration aaS001;
    private TenantConfiguration aaS002;

    private Map<String, TenantConfiguration> tenantConfigurations;
    private Map<String, TenantConfiguration> sandboxConfigurations;

    @Before
    public void setup() {
        defaultTenantService = new DefaultTenantService(
                sandboxDatasets,
                tenantConfigurationViewService,
                tenantValidationService,
                tenantAdministrationRequestHandler,
                tenantAdministrationStatusService
        );

        aa = generateTenantConfiguration("AA", false);
        bb = generateTenantConfiguration("BB", false);
        tenantConfigurations = ImmutableMap.of("AA", aa, "BB", bb);
        when(tenantConfigurationViewService.allTenantConfigurations(TenantType.TENANT)).thenReturn(tenantConfigurations);

        aaS001 = generateTenantConfiguration("AA_S001", true);
        aaS002 = generateTenantConfiguration("AA_S002", true);
        sandboxConfigurations = ImmutableMap.of("AA_S001", aaS001, "AA_S002", aaS002);
        when(tenantConfigurationViewService.allTenantConfigurations(TenantType.SANDBOX)).thenReturn(sandboxConfigurations);
    }

    @Test
    public void getAllShouldReturnValidResult() {
        Set<TenantConfiguration> result = defaultTenantService.getAll(TenantType.TENANT);
        assertThat(result).isNotEmpty();
        assertThat(result.size()).isEqualTo(2);
        assertThat(result).contains(aa);
        assertThat(result).contains(bb);
    }

    @Test
    public void createTenantShouldCreateTenantWithTranslationLocation() {
        TenantConfiguration xx = TenantConfiguration.builder()
                .copy(generateTenantConfiguration("XX", false))
                .localizaton("{\n" +
                        "  \"access-denied\" : {\n" +
                        "    \"logout\" : \"Logout!\"\n" +
                        "  }\n" +
                        "}")
                .build();
        defaultTenantService.createTenant("user", xx);
        ArgumentCaptor<TenantConfiguration> argument = ArgumentCaptor.forClass(TenantConfiguration.class);
        verify(tenantAdministrationRequestHandler).createTenant(argument.capture());
        assertThat(argument.getValue().getReporting().getTranslationLocation())
                .contains("binary-${spring.cloud.config.uri}/*/*/master/tenant-XX/");
    }

    @Test
    public void createTenantShouldGenerateTimestamps() {
        final String username = "user";
        final Tenant tenant = defaultTenantService.tenantConfigurationForCreate(
                username,
                generateTenantConfiguration("XX", false)
        ).getTenant();
        assertThat(tenant.getCreated()).isNotBlank();
        assertThat(tenant.getUpdated()).isNotBlank();
        assertThat(tenant.getCreatedBy()).isEqualTo(username);
        assertThat(tenant.getUpdatedBy()).isEqualTo(username);
    }

    @Test
    public void createSandboxShouldGenerateTimestamps() {
        final String username = "user";
        final Tenant tenant = defaultTenantService.sandboxConfigurationForCreate(
                username,
                generateTenantConfiguration("XX", true)
        ).getTenant();
        assertThat(tenant.getCreated()).isNotBlank();
        assertThat(tenant.getUpdated()).isNotBlank();
        assertThat(tenant.getCreatedBy()).isEqualTo(username);
        assertThat(tenant.getUpdatedBy()).isEqualTo(username);
    }

    @Test
    public void updateShouldUpdateTimestampsCorrectly() {

        final String username = "user";
        final TenantConfiguration original = generateTenantConfiguration("XX", false);

        when(tenantConfigurationViewService.findActiveTenantConfiguration("XX"))
                .thenReturn(Optional.of(original));

        final Tenant tenant = defaultTenantService.tenantSandboxConfigurationForUpdate(
                username,
                original
        ).getTenant();

        assertThat(tenant.getCreated()).isNullOrEmpty();
        assertThat(tenant.getUpdated()).isNotBlank().isNotEqualTo(original.getTenant().getUpdated());
        assertThat(tenant.getCreatedBy()).isNullOrEmpty();
        assertThat(tenant.getUpdatedBy()).isEqualTo(username);
    }

    @Test
    public void shouldHandleLocationPathForSandboxForCreate() {
        TenantConfiguration tenantConfiguration = defaultTenantService.sandboxConfigurationForCreate("user", aaS001);
        assertThat(tenantConfiguration.getReporting().getTranslationLocation().equals("binary-http://config-server:8888/*/*/master/i18n/tenant-AA"));

        // now test when there are no localization overrides
        TenantConfiguration aS001Updated = TenantConfiguration.builder().copy(aaS001).localizaton("").build();
        TenantConfiguration tenantConfiguration2 = defaultTenantService.sandboxConfigurationForCreate("user", aS001Updated);
        // the translation location should not change
        assertThat(tenantConfiguration2.getReporting().getTranslationLocation().equals(aaS001.getReporting().getTranslationLocation()));
    }

    @Test
    public void deleteTenantWithSandboxKeyShouldDeleteSandbox() {
        TenantConfiguration sandboxConfiguration = sandboxConfigurations.get("AA_S001");
        when(tenantConfigurationViewService.findActiveTenantConfiguration("AA_S001")).thenReturn(Optional.of(sandboxConfiguration));
        defaultTenantService.deleteTenant("AA_S001");
        verify(tenantAdministrationRequestHandler).deleteSandbox(sandboxConfiguration);
    }

    @Test
    public void deleteTenantWithNonSandboxKeyShouldDeleteTenant() {
        TenantConfiguration tenantConfiguration = tenantConfigurations.get("AA");
        when(tenantConfigurationViewService.findActiveTenantConfiguration("AA")).thenReturn(Optional.of(tenantConfiguration));
        defaultTenantService.deleteTenant("AA");
        verify(tenantAdministrationRequestHandler).deleteTenant(tenantConfiguration);
    }

    @Test
    public void updateTenantShouldUpdateTenant() {
        //TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration);
        //TODO: Implement
    }


    @Test
    public void getSandboxDataSetsShouldGetSandboxDatasets() {
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(null);
        List<DataSet> expectedEmpty = defaultTenantService.getSandboxDataSets();
        assertThat(expectedEmpty).isEmpty();

        reset(sandboxDatasets);
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(ImmutableList.of(new DataSet()));
        List<DataSet> expectedOne = defaultTenantService.getSandboxDataSets();
        assertThat(expectedOne.size()).isEqualTo(1);
    }

    /**
     * @param key       key of the new tenant or sandbox
     * @param isSandbox indicate if tenant or sandbox
     * @return TenantConfiguration with testable data for validation
     */
    private TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        return TenantConfiguration.builder()
                .tenant(Tenant.builder()
                        .id(key)
                        .key(key)
                        .name(key + "-name")
                        .sandbox(isSandbox)
                        .build())
                .parentTenantKey(isSandbox ? key.substring(0, 2) : null) // expects sandbox key's parent the 1st 2 chars
                .reporting(generateTestReporting())
                .localizaton("{\"someKey\" : \"is Changed here \" }") // if set, translationLocation is updated
                .build();
    }

    /**
     * @return a ReportingSystemPropertiesImpl that can be used for testing
     */
    private ReportingSystemPropertiesImpl generateTestReporting() {
        ReportingSystemPropertiesImpl reportingSystemProperties = new ReportingSystemPropertiesImpl();
        reportingSystemProperties.setUiLanguages(ImmutableList.of("en"));
        reportingSystemProperties.setTranslationLocation("binary-http://config-server:8888/*/*/master/i18n/");
        return reportingSystemProperties;
    }

    @Test
    public void itShouldGenerateAValidKey() {
        //existing sandboxes, non in process of build
        String caKey = defaultTenantService.nextSandboxKey("AA");
        assertThat(caKey).isEqualTo("AA_S003");

        //no sandbox case
        String nvKey = defaultTenantService.nextSandboxKey("CC");
        assertThat(nvKey).isEqualTo("CC_S001");
    }

}
