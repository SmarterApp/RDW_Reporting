package org.opentestsystem.rdw.admin.multitenant.service.impl;


import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantValidationService;
import org.opentestsystem.rdw.multitenant.Tenant;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.when;


public class DefaultTenantServiceTest {

    private TenantConfigurationViewService tenantConfigurationViewService;
    private SandboxDataSets sandboxDatasets;
    private TenantValidationService tenantValidationService;

    //class under test
    private DefaultTenantService defaultTenantService;

    private TenantConfiguration aa;
    private TenantConfiguration bb;

    private Map<String, TenantConfiguration> tenantConfigurations;

    @Before
    public void setup() {
        tenantConfigurationViewService = mock(TenantConfigurationViewService.class);
        sandboxDatasets = mock(SandboxDataSets.class);
        tenantValidationService = mock(TenantValidationService.class);
        defaultTenantService = new DefaultTenantService(tenantConfigurationViewService, sandboxDatasets, tenantValidationService);
        aa = generateTenantConfiguration("AA", false);
        bb = generateTenantConfiguration("BB", false);
        tenantConfigurations = ImmutableMap.of("AA", aa, "BB", bb);
        when(tenantConfigurationViewService.allTenantConfigurations(TenantType.TENANT)).thenReturn(tenantConfigurations);
    }

    @Test
    public void getAllShouldReturnValidResult() {
        Set<TenantConfiguration> result = defaultTenantService.getAll(TenantType.TENANT);
        assertThat(result).isNotEmpty();
        assertThat(result.size()).isEqualTo(2);
        assertThat(result).contains(aa);
        assertThat(result).contains(bb);
    }

    @Test
    public void createTenantShouldCreateTenant() {
        //TODO: Implement
        //TenantConfiguration createTenant(TenantConfiguration TenantConfiguration);
    }


    @Test
    public void deleteTenantShouldDeleteTenant() {
        //TODO: Implement
        //void deleteTenant(String tenantId);
    }

    @Test
    public void updateTenantShouldUpdateTenant() {
        //TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration);
        //TODO: Implement
    }


    @Test
    public void getSandboxDataSetsShouldGetSandboxDatasets() {
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(null);
        List<DataSet> expectedEmpty = defaultTenantService.getSandboxDataSets();
        assertThat(expectedEmpty).isEmpty();

        reset(sandboxDatasets);
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(ImmutableList.of(new DataSet()));
        List<DataSet> expectedOne = defaultTenantService.getSandboxDataSets();
        assertThat(expectedOne.size()).isEqualTo(1);
    }


    @Test
    public void getTenantDefaultsShouldGetDefaults() {
        //TODO: Implement
        //TenantConfiguration getTenantDefaults();
    }


    @Test
    public void getParentTenantDefaultShouldGetParentTenantDefaults() {
        //TenantConfiguration getParentTenantDefaults(String key)
        //TODO: Implement
    }

    TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        TenantConfiguration configuration = new TenantConfiguration();
        configuration.setTenant(Tenant.builder()
                .id(key)
                .key(key)
                .sandbox(isSandbox)
                .build());
        return configuration;
    }
}
