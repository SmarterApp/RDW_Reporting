package org.opentestsystem.rdw.admin.multitenant.service.impl;


import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantConfigurationViewService;
import org.opentestsystem.rdw.admin.multitenant.service.TenantValidationService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.when;


public class DefaultTenantServiceTest {

    private TenantConfigurationViewService tenantConfigurationViewService;
    private SandboxDataSets sandboxDatasets;
    private TenantValidationService tenantValidationService;
    private TenantAdministrationRequestHandler tenantAdministrationRequestHandler;

    //class under test
    private DefaultTenantService defaultTenantService;

    private TenantConfiguration aa;
    private TenantConfiguration bb;
    private TenantConfiguration aaS001;
    private TenantConfiguration aaS002;


    private Map<String, TenantConfiguration> tenantConfigurations;
    private Map<String, TenantConfiguration> sandboxConfigurations;

    @Before
    public void setup() {
        tenantConfigurationViewService = mock(TenantConfigurationViewService.class);
        sandboxDatasets = mock(SandboxDataSets.class);
        tenantValidationService = mock(TenantValidationService.class);
        tenantAdministrationRequestHandler = mock(TenantAdministrationRequestHandler.class);
        defaultTenantService = new DefaultTenantService(tenantConfigurationViewService, sandboxDatasets, tenantValidationService, tenantAdministrationRequestHandler);
        aa = generateTenantConfiguration("AA", false);
        bb = generateTenantConfiguration("BB", false);
        tenantConfigurations = ImmutableMap.of("AA", aa, "BB", bb);
        when(tenantConfigurationViewService.allTenantConfigurations(TenantType.TENANT)).thenReturn(tenantConfigurations);

        aaS001 = generateTenantConfiguration("AA_S001", true);
        aaS002 = generateTenantConfiguration("AA_S002", true);
        sandboxConfigurations = ImmutableMap.of("AA_S001", aaS001, "AA_S002", aaS002);
        when(tenantConfigurationViewService.allTenantConfigurations(TenantType.SANDBOX)).thenReturn(sandboxConfigurations);
    }

    @Test
    public void getAllShouldReturnValidResult() {
        Set<TenantConfiguration> result = defaultTenantService.getAll(TenantType.TENANT);
        assertThat(result).isNotEmpty();
        assertThat(result.size()).isEqualTo(2);
        assertThat(result).contains(aa);
        assertThat(result).contains(bb);
    }

    @Test
    public void createTenantShouldCreateTenant() {
        //TODO: Implement
        //TenantConfiguration createTenant(TenantConfiguration TenantConfiguration);

        defaultTenantService.generateSandboxTenantConfigurationForCreate(aaS001);
        //assertThat(result).("binary-http://config-server:8888/*/*/master/i18n/tenant-AA");

    }

    @Test
    public void shouldHandleLocationPathForSandboxForCreate() {
        TenantConfiguration tenantConfiguration = defaultTenantService.generateSandboxTenantConfigurationForCreate(aaS001);
        assertThat(tenantConfiguration.getReporting().getTranslationLocation().equals("binary-http://config-server:8888/*/*/master/i18n/tenant-AA"));

        // now test when there are no localization overrides
        TenantConfiguration aS001Updated = TenantConfiguration.builder().copy(aaS001).localizaton("").build();
        TenantConfiguration tenantConfiguration2 = defaultTenantService.generateSandboxTenantConfigurationForCreate(aS001Updated);
        // the translation location should not change
        assertThat(tenantConfiguration2.getReporting().getTranslationLocation().equals(aaS001.getReporting().getTranslationLocation()));
    }

    @Test
    public void deleteTenantShouldDeleteTenant() {
        //TODO: Implement
        //void deleteTenant(String tenantId);
    }

    @Test
    public void updateTenantShouldUpdateTenant() {
        //TenantConfiguration updateTenant(TenantConfiguration tenantConfiguration);
        //TODO: Implement
    }


    @Test
    public void getSandboxDataSetsShouldGetSandboxDatasets() {
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(null);
        List<DataSet> expectedEmpty = defaultTenantService.getSandboxDataSets();
        assertThat(expectedEmpty).isEmpty();

        reset(sandboxDatasets);
        when(sandboxDatasets.getSandboxDatasets()).thenReturn(ImmutableList.of(new DataSet()));
        List<DataSet> expectedOne = defaultTenantService.getSandboxDataSets();
        assertThat(expectedOne.size()).isEqualTo(1);
    }


    @Test
    public void getTenantDefaultsShouldGetDefaults() {
        //TODO: Implement
        //TenantConfiguration getTenantDefaults();
    }


    @Test
    public void getParentTenantDefaultShouldGetParentTenantDefaults() {
        //TenantConfiguration getParentTenantDefaults(String key)
        //TODO: Implement
    }

    /**
     * @param key       key of the new tenant or sandbox
     * @param isSandbox indicate if tenant or sandbox
     * @return TenantConfiguration with testable data for validation
     */
    private TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        return TenantConfiguration.builder()
                .tenant(Tenant.builder()
                        .id(key)
                        .key(key)
                        .name(key + "-name")
                        .sandbox(isSandbox)
                        .build())
                .parentTenantKey(isSandbox ? key.substring(0,2) : null) // expects sandbox key's parent the 1st 2 chars
                .reporting(generateTestReporting())
                .localizaton("{\"someKey\" : \"is Changed here \" }" ) // if set, translationLocation is updated
                .build();
    }

    /**
     * @return a ReportingSystemPropertiesImpl that can be used for testing
     */
    private ReportingSystemPropertiesImpl generateTestReporting() {
        ReportingSystemPropertiesImpl reportingSystemProperties = new ReportingSystemPropertiesImpl();
        reportingSystemProperties.setUiLanguages(ImmutableList.of("en"));
        reportingSystemProperties.setTranslationLocation("binary-http://config-server:8888/*/*/master/i18n/");
        return reportingSystemProperties;
    }

    @Test
    public void itShouldGenerateAValidKey() {
        //existing sandboxes, non in process of build
        String caKey = defaultTenantService.generateKey("AA");
        assertThat(caKey).isEqualTo("AA_S003");

        //no sandbox case
        String nvKey = defaultTenantService.generateKey("CC");
        assertThat(nvKey).isEqualTo("CC_S001");
    }

}

//@Ignore
//public class DefaultSandboxServiceTest {
//    private DefaultSandboxService service;
//    private InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository;
//    private ReportingTenantIdResolver reportingTenantIdResolver;
//    private DefaultTenantConfigurationViewService defaultTenantConfigPropsService;
//    private TenantProperties tenantProperties;
//    private SandboxDataSets sandboxDataSets;
//    private TenantAdministrationRequestHandler tenantAdministrationRequestHandler;
//    private TenantAdministrationStatusService tenantAdministrationStatusService;
//    private ConfigServerClient configServerClient;
//
//    @Before
//    public void setup() {
//        inMemorySandboxConfigurationRepository = mock(InMemorySandboxConfigurationRepository.class);
//        reportingTenantIdResolver = mock(ReportingTenantIdResolver.class);
//        defaultTenantConfigPropsService = mock(DefaultTenantConfigurationViewService.class);
//        tenantProperties = mock(TenantProperties.class);
//        tenantAdministrationRequestHandler = mock(TenantAdministrationRequestHandler.class);
//        sandboxDataSets = mock(SandboxDataSets.class);
//        tenantAdministrationStatusService = mock(TenantAdministrationStatusService.class);
//        configServerClient = mock(ConfigServerClient.class);
//
//        when(sandboxDataSets.getSandboxDatasets()).thenReturn(new ArrayList<>(SandboxConfigurationStubs.getDataSets()));
//        when(reportingTenantIdResolver.getTenantId()).thenReturn(
//                Optional.of(SandboxConfigurationStubs.getSandboxCAInfo().getKey()));
//        service = new DefaultSandboxService(inMemorySandboxConfigurationRepository, reportingTenantIdResolver, defaultTenantConfigPropsService, tenantProperties, sandboxDataSets, tenantAdministrationRequestHandler, tenantAdministrationStatusService, configServerClient);
//    }
//
//    @Test
//    public void itShouldRetrieveAllSandboxes() {
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
//        Set<SandboxConfiguration> sandboxConfigurations = ImmutableSet.of(sandboxConfigurationCa, sandboxConfigurationMi);
//        when(inMemorySandboxConfigurationRepository.getAll()).thenReturn(sandboxConfigurations);
//
////        when(defaultTenantConfigPropsService.getDefaultApplicationSandboxConfiguration())
////                .thenReturn(SandboxConfigurationStubs.getApplicationSandboxConfigurationDefault().getApplicationSandboxConfiguration());
//        when(tenantProperties.findTenantById(any())).thenReturn(Optional.of(TenantConfigurationStubs.getTenantCA()));
//        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(ImmutableMap.of());
//
//        ApplicationSandboxConfigurations applicationSandboxConfigurations = service.getAll();
//
//        verify(inMemorySandboxConfigurationRepository, times(2)).getAll();
////        verify(defaultTenantConfigPropsService).getDefaultApplicationSandboxConfiguration("CA");
//        verify(tenantProperties).findTenantById(any());
//        verify(sandboxDataSets).getSandboxDatasets();
//        verify(tenantAdministrationStatusService).allTenantStatusAsMap();
//
//        assertThat(applicationSandboxConfigurations).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage()).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxes()).isNotEmpty();
//        assertThat(applicationSandboxConfigurations.getSandboxes().size()).isEqualTo(2);
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage().getDataSets().size()).isEqualTo(SandboxConfigurationStubs.getDataSets().size());
//
//        Optional<SandboxConfiguration> sandboxCa = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationCa.getSandbox().getKey());
//        assertThat(sandboxCa).isPresent();
//        if (sandboxCa.isPresent()) {
//            verifySandboxes(sandboxCa.get(), sandboxConfigurationCa);
//        }
//
//        Optional<SandboxConfiguration> sandboxMi = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationMi.getSandbox().getKey());
//        assertThat(sandboxMi).isPresent();
//        if (sandboxMi.isPresent()) {
//            verifySandboxes(sandboxMi.get(), sandboxConfigurationMi);
//        }
//    }
//
//    @Test
//    public void itShouldIncludeSandboxesInCreateStatus() {
////        when(defaultTenantConfigPropsService.getDefaultApplicationSandboxConfiguration())
////                .thenReturn(SandboxConfigurationStubs.getApplicationSandboxConfigurationDefault().getApplicationSandboxConfiguration());
//
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        sandboxConfigurationCa.getSandbox().setCreated(Instant.now());
//        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
//        sandboxConfigurationMi.getSandbox().setCreated(null);
//        when(tenantProperties.findTenantById(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(Optional.of(TenantConfigurationStubs.getTenantCA()));
//        when(inMemorySandboxConfigurationRepository.getAll()).thenReturn(ImmutableSet.of(sandboxConfigurationCa, sandboxConfigurationMi));
//
//        TenantConfiguration mockTenantCa = service.sandboxConfigurationToTenantConfiguration.apply(sandboxConfigurationCa);
//        TenantConfiguration mockTenantMi = service.sandboxConfigurationToTenantConfiguration.apply(sandboxConfigurationMi);
//        Map<String, Tenant> tenants = new HashMap<>();
//        tenants.put(mockTenantCa.getTenant().getKey(), mockTenantCa.getTenant());
//        tenants.put(mockTenantMi.getTenant().getKey(), mockTenantMi.getTenant());
//        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(tenants));
//
//        Map<String, TenantAdministrationStatus> statusTenantMap = new HashMap<>();
//        statusTenantMap.put(sandboxConfigurationMi.getSandbox().getKey(), TenantAdministrationStatus.CREATING_DATABASES);
//
//        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(ImmutableMap.of());
//        when(tenantAdministrationStatusService.findStatus(sandboxConfigurationMi.getSandbox().getKey())).thenReturn(Optional.of(ImmutablePair.of(TenantAdministrationStatus.CREATING_DATABASES, mockTenantMi)));
//        when(defaultTenantConfigPropsService.tenantConfiguration(any())).thenReturn(new TenantConfiguration());
//        ApplicationSandboxConfigurations applicationSandboxConfigurations = service.getAll();
//
//        verify(inMemorySandboxConfigurationRepository, times(2)).getAll();
////        verify(defaultTenantConfigPropsService).getDefaultApplicationSandboxConfiguration(any());
//        verify(tenantProperties).findTenantById(any());
//        verify(sandboxDataSets).getSandboxDatasets();
//
//        verify(tenantAdministrationStatusService).allTenantStatusAsMap();
//
//        // make sure with nothing in status map - .findStatus() should not be called
//        verify(tenantAdministrationStatusService, times(0)).findStatus(mockTenantMi.getTenant().getKey());
//
//        assertThat(applicationSandboxConfigurations).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage()).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxes()).isNotEmpty();
//        assertThat(applicationSandboxConfigurations.getSandboxes().size()).isEqualTo(2);
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage().getDataSets().size()).isEqualTo(SandboxConfigurationStubs.getDataSets().size());
//
//        Optional<SandboxConfiguration> sandboxCa = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationCa.getSandbox().getKey());
//        assertThat(sandboxCa).isPresent();
//        if (sandboxCa.isPresent()) {
//            assertThat(sandboxCa.get().getSandbox().getKey()).isEqualTo(sandboxConfigurationCa.getSandbox().getKey());
//            assertThat(sandboxCa.get().getSandbox().getCreated()).isNotNull();
//        }
//
//        Optional<SandboxConfiguration> sandboxMi = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationMi.getSandbox().getKey());
//        assertThat(sandboxMi).isPresent();
//        if (sandboxMi.isPresent()) {
//            assertThat(sandboxMi.get().getSandbox().getKey()).isEqualTo(sandboxConfigurationMi.getSandbox().getKey());
//            assertThat(sandboxMi.get().getSandbox().getCreated()).isNull();
//        }
//    }
//
//    private Set<SandboxConfiguration> get2Sandboxes() {
//        return ImmutableSet.of(SandboxConfigurationStubs.getCaInterimSandboxConfiguration(),
//                SandboxConfigurationStubs.getMiInterimSandboxConfiguration());
//    }
//
//    @Test
//    public void itShouldRemoveSandboxesSuccessfullyCreated() {
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        sandboxConfigurationCa.getSandbox().setCreated(Instant.now());
//        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
//        sandboxConfigurationMi.getSandbox().setCreated(Instant.now());
//
//        Set<SandboxConfiguration> sandboxConfigurations = ImmutableSet.of(sandboxConfigurationCa, sandboxConfigurationMi);
//        when(inMemorySandboxConfigurationRepository.getAll()).thenReturn(sandboxConfigurations);
//
////        when(defaultTenantConfigPropsService.getDefaultApplicationSandboxConfiguration())
////                .thenReturn(SandboxConfigurationStubs.getApplicationSandboxConfigurationDefault().getApplicationSandboxConfiguration());
//        when(tenantProperties.findTenantById(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(Optional.of(TenantConfigurationStubs.getTenantCA()));
//
//        TenantConfiguration mockTenantCa = service.sandboxConfigurationToTenantConfiguration.apply(sandboxConfigurationCa);
//        TenantConfiguration mockTenantMi = service.sandboxConfigurationToTenantConfiguration.apply(sandboxConfigurationMi);
//        Map<String, Tenant> tenants = new HashMap<>();
//        tenants.put(mockTenantCa.getTenant().getKey(), mockTenantCa.getTenant());
//        tenants.put(mockTenantMi.getTenant().getKey(), mockTenantMi.getTenant());
//        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(tenants));
//
//        Map<String, TenantAdministrationStatus> statusTenantMap = new HashMap<>();
//        statusTenantMap.put(sandboxConfigurationMi.getSandbox().getKey(), TenantAdministrationStatus.CREATING_DATABASES);
//        //TODO: fixme
//        //when(tenantAdministrationStatusService.getTenants()).thenReturn(statusTenantMap);
//        when(tenantAdministrationStatusService.findStatus(sandboxConfigurationMi.getSandbox().getKey())).thenReturn(Optional.of(ImmutablePair.of(TenantAdministrationStatus.CREATING_DATABASES, mockTenantMi)));
//        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(ImmutableMap.of());
////        when(defaultTenantConfigPropsService.getTenantAppConfiguration(any())).thenReturn(new ApplicationTenantConfiguration());
//        ApplicationSandboxConfigurations applicationSandboxConfigurations = service.getAll();
//
//        verify(inMemorySandboxConfigurationRepository, times(2)).getAll();
////        verify(defaultTenantConfigPropsService).getDefaultApplicationSandboxConfiguration("CA");
//        verify(tenantProperties).findTenantById(any());
//        verify(sandboxDataSets).getSandboxDatasets();
//        //TODO: fixme
//        //verify(tenantAdministrationStatusService).getTenants();
//        verify(tenantAdministrationStatusService, times(0)).findStatus(mockTenantMi.getTenant().getKey());
//
//        assertThat(applicationSandboxConfigurations).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage()).isNotNull();
//        assertThat(applicationSandboxConfigurations.getSandboxes()).isNotEmpty();
//        assertThat(applicationSandboxConfigurations.getSandboxes().size()).isEqualTo(2);
//        assertThat(applicationSandboxConfigurations.getSandboxConfigurationPackage().getDataSets().size()).isEqualTo(SandboxConfigurationStubs.getDataSets().size());
//
//        Optional<SandboxConfiguration> sandboxCa = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationCa.getSandbox().getKey());
//        assertThat(sandboxCa).isPresent();
//        if (sandboxCa.isPresent()) {
//            assertThat(sandboxCa.get().getSandbox().getKey()).isEqualTo(sandboxConfigurationCa.getSandbox().getKey());
//            assertThat(sandboxCa.get().getSandbox().getCreated()).isNotNull();
//        }
//
//        Optional<SandboxConfiguration> sandboxMi = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationMi.getSandbox().getKey());
//        assertThat(sandboxMi).isPresent();
//        if (sandboxMi.isPresent()) {
//            assertThat(sandboxMi.get().getSandbox().getKey()).isEqualTo(sandboxConfigurationMi.getSandbox().getKey());
//            assertThat(sandboxMi.get().getSandbox().getCreated()).isNotNull();
//        }
//    }
//
//    @Test
//    public void itShouldCreateSandbox() {
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
//        SandboxConfiguration sandboxConfiguration = service.create(sandboxConfigurationCa);
//
//        verify(inMemorySandboxConfigurationRepository).create(sandboxConfigurationCa);
//        assertThat(sandboxConfiguration).isNotNull();
//        assertThat(sandboxConfiguration.getSandbox()).isNotNull();
//        verifySandboxes(sandboxConfiguration, sandboxConfigurationCa);
//    }
//
//    @Test
//    public void itShouldUpdateSandbox() {
//        String expectedDescription = "Sandbox's New description for Testing";
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        SandboxConfiguration updatedSandboxConfiguration = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        updatedSandboxConfiguration.getSandbox().setDescription(expectedDescription);
//        when(inMemorySandboxConfigurationRepository.update(sandboxConfigurationCa)).thenReturn(updatedSandboxConfiguration);
//        when(inMemorySandboxConfigurationRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(true);
//
//        SandboxConfiguration sandboxCfg = service.update(sandboxConfigurationCa);
//
//        verify(inMemorySandboxConfigurationRepository).update(sandboxConfigurationCa);
//        verifySandboxes(sandboxCfg, updatedSandboxConfiguration);
//    }
//
//    @Test
//    public void itShouldDeleteSandbox() {
//        String key = SandboxConfigurationStubs.getCaInterimSandboxConfiguration().getSandbox().getKey();
//        service.delete(key);
//        verify(inMemorySandboxConfigurationRepository).delete(key);
//    }
//
//    @Test
//    public void itShouldResetSandbox() {
//        String key = SandboxConfigurationStubs.getCaInterimSandboxConfiguration().getSandbox().getKey();
//        service.resetDataSet(key);
//        verify(inMemorySandboxConfigurationRepository).reset(key);
//    }
//
//    @Test(expected = IllegalArgumentException.class)
//    public void itShouldNotCreateSandbox() {
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
//        when(inMemorySandboxConfigurationRepository.exists(any())).thenReturn(true);
//        service.create(sandboxConfigurationCa);
//    }
//
//    @Test(expected = NoSuchElementException.class)
//    public void itShouldNotUpdateSandbox() {
//        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
//        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
//        when(inMemorySandboxConfigurationRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(false);
//        service.update(sandboxConfigurationCa);
//    }
//

//
//    @Test
//    public void itShouldGeneratValidDataSourceElements() {
//        final String key = "TX_S005";
//        final String password = "TstPwd1";
//        Map<String, DataSourceElementsTenant> map = service.generateDataSourceElementsMap(key, password);
//
//        assertThat(map.get("olap_ro").getSchemaSearchPath()).isEqualTo("reporting_tx_s005");
//        assertThat(map.get("olap_rw").getSchemaSearchPath()).isEqualTo("reporting_tx_s005");
//        assertThat(map.get("reporting_ro").getUrlParts().getDatabase()).isEqualTo("reporting_tx_s005");
//        assertThat(map.get("reporting_rw").getUrlParts().getDatabase()).isEqualTo("reporting_tx_s005");
//        assertThat(map.get("warehouse_ro").getUrlParts().getDatabase()).isEqualTo("warehouse_tx_s005");
//        assertThat(map.get("warehouse_rw").getUrlParts().getDatabase()).isEqualTo("warehouse_tx_s005");
//        assertThat(map.get("migrate_rw").getUrlParts().getDatabase()).isEqualTo("migrate_olap_tx_s005");
//
//        map.values().forEach(dataSourceElementsTenant -> {
//            assertThat(dataSourceElementsTenant.getUsername()).isEqualTo("txs005");
//            assertThat(dataSourceElementsTenant.getPassword()).isEqualTo(password);
//        });
//    }
//
//
//    private void verifySandboxes(final SandboxConfiguration sandboxConfiguration, final SandboxConfiguration expectedSandboxConfiguration) {
//        assertThat(sandboxConfiguration.getSandbox().getKey()).isEqualTo(expectedSandboxConfiguration.getSandbox().getKey());
//        assertThat(sandboxConfiguration.getSandbox().getId()).isEqualTo(expectedSandboxConfiguration.getSandbox().getId());
//        assertThat(sandboxConfiguration.getSandbox().getSandboxDataset()).isEqualTo(expectedSandboxConfiguration.getSandbox().getSandboxDataset());
//        assertThat(sandboxConfiguration.getSandbox().getDescription()).isEqualTo(expectedSandboxConfiguration.getSandbox().getDescription());
//        assertThat(sandboxConfiguration.getSandbox().getName()).isEqualTo(expectedSandboxConfiguration.getSandbox().getName());
//
//        verifyReporting(sandboxConfiguration.getApplicationSandboxConfiguration().getReporting(), expectedSandboxConfiguration.getApplicationSandboxConfiguration().getReporting());
//        verifyLocalization(sandboxConfiguration.getLocalization(), expectedSandboxConfiguration.getLocalization());
//
//        verifyAggregatorProperties(sandboxConfiguration.getApplicationSandboxConfiguration().getAggregateReportingPropertiesTenant(),
//                expectedSandboxConfiguration.getApplicationSandboxConfiguration().getAggregateReportingPropertiesTenant());
//    }
//
//    /**
//     * the aggregator property lists can be null
//     *
//     * @param aggregateProperties         retrieved properties
//     * @param expectedAggregateProperties expected properties
//     */
//    private void verifyAggregatorProperties(AggregateReportingPropertiesTenant aggregateProperties, AggregateReportingPropertiesTenant expectedAggregateProperties) {
//        assertThat(aggregateProperties.getAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getAssessmentTypes().size());
//        assertThat(aggregateProperties.getStateAggregateAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getStateAggregateAssessmentTypes().size());
//        assertThat(aggregateProperties.getStatewideUserAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getStatewideUserAssessmentTypes().size());
//    }
//
//    private void verifyLocalization(final String localization, final String expectedLocalization) {
//        assertThat(localization).isEqualTo(expectedLocalization);
//    }
//
//    private void verifyReporting(final ReportingSystemProperties reportingSystemSettings, final ReportingSystemProperties expectedReportingSystemSettings) {
//        assertThat(reportingSystemSettings.getAccessDeniedUrl()).isEqualTo(expectedReportingSystemSettings.getAccessDeniedUrl());
//        assertThat(reportingSystemSettings.getAnalyticsTrackingId()).isEqualTo(expectedReportingSystemSettings.getAnalyticsTrackingId());
//        assertThat(reportingSystemSettings.getInterpretiveGuideUrl()).isEqualTo(expectedReportingSystemSettings.getInterpretiveGuideUrl());
//        assertThat(reportingSystemSettings.getIrisVendorId()).isEqualTo(expectedReportingSystemSettings.getIrisVendorId());
//        assertThat(reportingSystemSettings.getLandingPageUrl()).isEqualTo(expectedReportingSystemSettings.getLandingPageUrl());
//        assertThat(reportingSystemSettings.getMinItemDataYear()).isEqualTo(expectedReportingSystemSettings.getMinItemDataYear());
//        assertThat(reportingSystemSettings.getSchoolYear()).isEqualTo(expectedReportingSystemSettings.getSchoolYear());
//        assertThat(reportingSystemSettings.getUserGuideUrl()).isEqualTo(expectedReportingSystemSettings.getUserGuideUrl());
//        assertThat(reportingSystemSettings.getTargetReport()).isEqualTo(expectedReportingSystemSettings.getTargetReport());
//        assertThat(reportingSystemSettings.getTranslationLocation()).isEqualTo(expectedReportingSystemSettings.getTranslationLocation());
//        assertThat(reportingSystemSettings.isPercentileDisplayEnabled()).isEqualTo(expectedReportingSystemSettings.isPercentileDisplayEnabled());
//        assertThat(reportingSystemSettings.isTransferAccessEnabled()).isEqualTo(expectedReportingSystemSettings.isTransferAccessEnabled());
//        assertThat(reportingSystemSettings.getState()).isNotNull();
//        assertThat(reportingSystemSettings.getState().getCode()).isEqualTo(expectedReportingSystemSettings.getState().getCode());
//        assertThat(reportingSystemSettings.getState().getName()).isEqualTo(expectedReportingSystemSettings.getState().getName());
//
//        assertThat(reportingSystemSettings.getReportLanguages().size()).isEqualTo(expectedReportingSystemSettings.getReportLanguages().size());
//        assertThat(reportingSystemSettings.getUiLanguages().size()).isEqualTo(expectedReportingSystemSettings.getUiLanguages().size());
//        assertThat(reportingSystemSettings.getEffectiveReportLanguages().size()).isEqualTo(expectedReportingSystemSettings.getEffectiveReportLanguages().size());
//
//    }
//
//    /**
//     * Lookup the given key in the ApplicationSandboxConfigurations sandbox list
//     *
//     * @param applicationSandboxConfigurations contains the list of sandboxes to look through
//     * @param key                              The key of the sandbox to find
//     * @return SandboxConfiguration if key is found
//     */
//    private Optional<SandboxConfiguration> getSandboxConfigurationFromKey(final ApplicationSandboxConfigurations applicationSandboxConfigurations, String key) {
//        return applicationSandboxConfigurations.getSandboxes().stream()
//                .filter(sandbox ->
//                        sandbox.getSandbox().getKey().equals(key)
//                ).findFirst();
//    }
//
//}
