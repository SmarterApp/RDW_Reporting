package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.model.EmbargoQuery;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.admin.repository.EmbargoAuditRepository;
import org.opentestsystem.rdw.admin.repository.EmbargoRepository;
import org.opentestsystem.rdw.admin.repository.ImportRepository;
import org.opentestsystem.rdw.admin.repository.SchoolYearRepository;
import org.opentestsystem.rdw.admin.repository.SubjectRepository;
import org.opentestsystem.rdw.reporting.common.configuration.EmbargoPropertiesResolver;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.repository.OrganizationRepository;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;

import java.util.Arrays;
import java.util.Date;
import java.util.Map;
import java.util.NoSuchElementException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.security.AdminPermission.TestDataLoadingWrite;
import static org.opentestsystem.rdw.admin.security.AdminPermission.TestDataReviewingWrite;

@RunWith(MockitoJUnitRunner.class)
public class DefaultEmbargoServiceTest {

    @Mock
    private EmbargoRepository repository;
    @Mock
    private EmbargoAuditRepository auditRepository;
    @Mock
    private OrganizationRepository organizationRepository;
    @Mock
    private ImportRepository importRepository;
    @Mock
    private SubjectRepository subjectRepository;
    @Mock
    private SchoolYearRepository groupRepository;
    @Mock
    private EmbargoPropertiesResolver embargoPropertiesResolver;
    @Mock
    public User user;

    public EmbargoQuery query;

    private static final int schoolYear = 2018;

    private DefaultEmbargoService service;

    @Before
    public void setup() {
        final ReportingSystemPropertiesImpl systemSettings = new ReportingSystemPropertiesImpl();
        systemSettings.getState().setCode("CA");
        systemSettings.getState().setName("California");
        systemSettings.setSchoolYear(schoolYear);

        Map<String, Permission> permissions = ImmutableMap.of(
            TestDataReviewingWrite,
            new Permission(TestDataReviewingWrite,
                PermissionScope.builder().statewide(true).addDistrictId(123L).build())
        );

        when(embargoPropertiesResolver.getAuditLogDays()).thenReturn(20);

        when(user.getPermissionsById()).thenReturn(permissions);
        query = EmbargoQuery.builder()
            .statuses(Arrays.asList(EmbargoStatus.Reviewing, EmbargoStatus.Released))
            .pageSize(50)
            .rowOffset(0)
            .build();

        service = new DefaultEmbargoService(
            repository,
            auditRepository,
            organizationRepository,
            importRepository,
            subjectRepository,
            groupRepository,
            embargoPropertiesResolver);
    }

    @Test
    public void findTestResultsShouldUseRepository() {
        service.findTestResults(query, user);
        verify(repository).findTestResultsAvailability(any(EmbargoQuery.class));
    }

    @Test(expected = NoSuchElementException.class)
    public void findTestResultsShouldCheckEmbargoWrite() {
        Map<String, Permission> permissions = ImmutableMap.of();
        when(user.getPermissionsById()).thenReturn(permissions);

        service.findTestResults(query, user);
    }

    @Test
    public void findAuditRecordsShouldUseRepository() {
        Map<String, Permission> permissions = ImmutableMap.of(
            TestDataLoadingWrite,
            new Permission(TestDataLoadingWrite, PermissionScope.builder().statewide(true).build()),
            TestDataReviewingWrite,
            new Permission(TestDataReviewingWrite,
                PermissionScope.builder().statewide(true).addDistrictId(123L).build())
        );

        when(user.getPermissionsById()).thenReturn(permissions);

        service.findAuditRecords(user);
        verify(auditRepository).findEmbargoAuditRecords(any(Date.class));
    }

    @Test(expected = NoSuchElementException.class)
    public void findAuditRecordsShouldCheckDataLoadingWrite() {
        service.findAuditRecords(user);
    }
}
