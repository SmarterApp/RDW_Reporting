package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.model.PipelineTest;
import org.opentestsystem.rdw.admin.repository.PipelineScriptRepository;
import org.opentestsystem.rdw.admin.repository.PipelineTestRepository;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.NoSuchElementException;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcPipelineTestRepository.class})
@Sql(
        config = @SqlConfig(dataSource = "warehouseDatasource", transactionManager = "warehouseTxManager"),
        scripts = {"classpath:warehouse-integration-test-data.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcPipelineTestRepositoryIT {

    @Autowired
    PipelineTestRepository repository;

    @Test
    public void itShouldFindAllByPipeline() {
        final List<PipelineTest> actual = repository.findAllByPipeline(1);
        assertThat(actual).hasSize(1);

        final PipelineTest first = actual.get(0);
        assertThat(first.getId()).isNotNull();
        assertThat(first.getPipelineId()).isEqualTo(1);
        assertThat(first.getName()).isNull();
        assertThat(first.getInput()).isNull();
        assertThat(first.getOutput()).isNull();
        assertThat(first.getCreated()).isNotNull();
        assertThat(first.getUpdated()).isNotNull();
        assertThat(first.getUpdatedBy()).isEqualTo("user1");
    }

    @Test
    public void itShouldNotFindAllByPipelineForMissingPipeline() {
        assertThat(repository.findAllByPipeline(-999)).isEmpty();
    }

    @Test
    public void itShouldFindByPipelineAndId() {
        final PipelineTest actual = repository.findById(-1);
        assertThat(actual.getId()).isEqualTo(-1);
        assertThat(actual.getPipelineId()).isEqualTo(1);
        assertThat(actual.getName()).isNull();
        assertThat(actual.getInput()).isEqualTo("in");
        assertThat(actual.getOutput()).isEqualTo("out");
        assertThat(actual.getCreated()).isNotNull();
        assertThat(actual.getUpdated()).isNotNull();
        assertThat(actual.getUpdatedBy()).isEqualTo("user1");
    }

    @Test
    public void itShouldNotFindByPipelineAndIdForMissingIds() {
        assertThat(repository.findById(-999)).isNull();
    }

    @Test
    public void itShouldCreate() {
        final PipelineTest value = PipelineTest.builder()
                .pipelineId(2)
                .name("test2")
                .input("in2")
                .output("out2")
                .updatedBy("user2")
                .build();
        final PipelineTest created = repository.create(value);
        assertThat(created.getId()).isGreaterThan(-1);
        assertThat(created.getPipelineId()).isEqualTo(value.getPipelineId());
        assertThat(created.getName()).isEqualTo(value.getName());
        assertThat(created.getInput()).isEqualTo(value.getInput());
        assertThat(created.getOutput()).isEqualTo(value.getOutput());
        assertThat(created.getCreated()).isNotNull();
        assertThat(created.getUpdated()).isNotNull();
        assertThat(created.getUpdatedBy()).isEqualTo(value.getUpdatedBy());
    }

    @Test
    public void itShouldUpdate() {
        final PipelineTest value = PipelineTest.builder()
                .id(-1)
                .pipelineId(1)
                .name("test2+")
                .input("in2+")
                .output("out2+")
                .updatedBy("user2")
                .build();
        final PipelineTest updated = repository.update(value);
        assertThat(updated.getId()).isEqualTo(value.getId());
        assertThat(updated.getPipelineId()).isEqualTo(value.getPipelineId());
        assertThat(updated.getName()).isEqualTo(value.getName());
        assertThat(updated.getInput()).isEqualTo(value.getInput());
        assertThat(updated.getOutput()).isEqualTo(value.getOutput());
        assertThat(updated.getCreated()).isNotNull();
        assertThat(updated.getUpdated()).isNotNull();
        assertThat(updated.getUpdatedBy()).isEqualTo(value.getUpdatedBy());
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateForMissingId() {
        repository.update(
                PipelineTest.builder()
                        .id(-999)
                        .name("test+")
                        .input("in+")
                        .updatedBy("out+")
                        .build()
        );
    }

    @Test
    public void itShouldDelete() {
        final PipelineTest value = PipelineTest.builder()
                .id(-1)
                .build();
        assertThat(repository.findById(value.getId())).isNotNull();
        repository.delete(value);
        assertThat(repository.findById(value.getId())).isNull();
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotDeleteForMissingId() {
        repository.delete(
                PipelineTest.builder()
                        .id(-999)
                        .build()
        );
    }

}