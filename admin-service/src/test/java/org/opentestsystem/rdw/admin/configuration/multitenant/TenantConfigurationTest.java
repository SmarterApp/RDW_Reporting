package org.opentestsystem.rdw.admin.configuration.multitenant;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.LinkedHashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;


public class TenantConfigurationTest {
    private static final Logger logger = LoggerFactory.getLogger(TenantConfigurationTest.class);

    @Test
    public void testTenant() {
        logger.info("testTenant");

        Tenant tenant = getTestTenant(tenantJson);
        assertThat(tenant).isNotNull();
        assertThat(tenant.getId()).isEqualTo("CA");
        assertThat(tenant.getKey()).isEqualTo("CA");
        assertThat(tenant.getDisplayName()).isEqualTo("California");
        assertThat(tenant.getDescription()).isEqualTo("This is a California's Tenant.");
    }

    @Test
    public void testTenantSrv() {
        logger.info("testTenantSrv");
        ObjectMapper mapper = new ObjectMapper();

        ServiceProperties services = getTestServiceProperties(tenantJSvcPropJson);
        assertThat(services).isNotNull();

        Map<String, Object> serviceProperties = services.getServiceProperties();
        // use new tenantProperties
        assertThat(serviceProperties.get("tenant")).isNotNull();
        Tenant tenant = mapper.convertValue(serviceProperties.get("tenant"), Tenant.class);
        logger.info("tenant.id={}",tenant.getId());
        assertThat(tenant.getId()).isEqualTo("CA");
        assertThat(tenant.getKey()).isEqualTo("CA");
        assertThat(tenant.getDisplayName()).isEqualTo("California");
        assertThat(tenant.getDescription()).isEqualTo("This is a California's Tenant.");
        serviceProperties.forEach((k,v) -> {
            logger.info("services={} and value = {}", k, v);
            System.out.println("Key : " + k + " Value : " + v);

        });

    }


    @Test
    public void testServiceProperties() {
        logger.info("testServiceProperties");
        ObjectMapper mapper = new ObjectMapper();

        ServiceProperties services = getTestServiceProperties(tenantConfigurationJson);
        assertThat(services).isNotNull();

        Map<String, Object> serviceProperties = services.getServiceProperties();
        assertThat(serviceProperties.get("rdw-reporting-webapp")).isNotNull();
        //ServiceProperty rdwReportingWebapp = mapper.convertValue(serviceProperties.get("rdw-reporting-webapp"), ServiceProperty.class);


        // use new tenantProperties
        assertThat(serviceProperties.get("tenant")).isNotNull();
        Tenant tenant = mapper.convertValue(serviceProperties.get("tenant"), Tenant.class);
        logger.info("tenant.id={}",tenant.getId());
        assertThat(tenant.getId()).isEqualTo("CA");
        assertThat(tenant.getKey()).isEqualTo("CA");
        assertThat(tenant.getDisplayName()).isEqualTo("California");
        assertThat(tenant.getDescription()).isEqualTo("This is a California's Tenant.");


        // use new tenantProperties
//        assertThat(serviceProperties.get("reporting")).isNotNull();
//        ReportingSystemSettings reportingSystemSettings = mapper.convertValue(serviceProperties.get("reporting"), ReportingSystemSettings.class);
//        logger.info("reportingSystemSettings.getSchoolYear={}",reportingSystemSettings.getSchoolYear());
//        assertThat(reportingSystemSettings.getSchoolYear()).isEqualTo("2018");


        // displaying overall
        serviceProperties.forEach((k,v) -> {
            logger.info("services={} and value = {}", k, v);
            System.out.println("Key : " + k + " Value : " + v);

        });

    }

    private ServiceProperties getTestServiceProperties(String testServices) {
        Gson gson = new GsonBuilder().create();
        return gson.fromJson(testServices, ServiceProperties.class);
    }

    private Tenant getTestTenant(String testTenant) {
        Gson gson = new GsonBuilder().create();
        return gson.fromJson(testTenant, Tenant.class);
    }

    private TenantConfiguration getTestTenantConfig(String tenantConfig) {
        Tenant tenant = getTestTenant(tenantJson);

        Gson gson = new GsonBuilder().create();
        return gson.fromJson(tenantConfig, TenantConfiguration.class);
    }

    private String tenantJson =
            " { \"id\": \"CA\", \"key\": \"CA\", \"displayName\": \"California\", \"description\": \"This is a California's Tenant.\" }";

    private String tenantJSvcPropJson = "{ " +
            "  \"serviceProperties\": {" +
            "       \"tenant\":{" +
            "          \"id\":\"CA\"," +
            "          \"key\":\"CA\"," +
            "          \"displayName\":\"California\"," +
            "          \"description\":\"This is a California's Tenant.\"" +
            "       }" +
            "   }" +
            "}";

    // update with ReportingSystemSettings * TenantProperties
    private  String tenantConfigurationJson = " {" +
            "  \"serviceProperties\": {" +
            "       \"tenant\":{" +
            "          \"id\":\"CA\"," +
            "          \"key\":\"CA\"," +
            "          \"displayName\":\"California\",\n" +
            "          \"description\":\"This is a California's Tenant.\"" +
            "       }," +
            "     \"rdw-reporting-webapp\": {" +
            "        \"dataSource\": { " +
            "           \"url-server\": \"rdw-aurora-\","+
            "           \"username\": \"sbac\"," +
            "           \"password\": \"****\"" +
            "         }," +
            "         \"reporting\": {" +
            "              \"school-year\": \"2018\"," +
            "              \"transfer-access-enabled\": \"true\"," +
            "              \"translation-location\": \"binary-\"," +
            "              \"analytics-tracking-id\": \"UA-102446884-4\"," +
            "              \"interpretive-guide-url\": \"https://portal.smarterbalanced.org/library/en/reporting-system-interpretive-guide.pdf\"," +
            "              \"user-guide-url\": \"https://portal.smarterbalanced.org/library/en/reporting-system-user-guide.pdf\"," +
            "              \"access-denied-url\": \"forward:/assets/public/access-denied.html\"," +
            "              \"landing-page-url\": \"forward:/landing.html\"," +
            "              \"percentile-display-enabled\": \"true\"," +
            "              \"report-languages\": \"es\"," +
            "              \"ui-languages\": \"es\"" +
            "          }, " +
            "          \"tenantOverrides\": {" +
            "              \"datasource\": {" +
            "                \"initialSize\": \"1\"," +
            "                \"maxActive\": \"2\"" +
            "              }," +
            "              \"reporting\": {" +
            "                \"percentile-display-enabled\": \"false\"" +
            "              }" +
            "            }" +
            "      }" +
            "   }" +
            "}";

}