package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;
import java.util.Set;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.service.TenantService.TenantType;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {TenantController.class}, secure = false)
public class TenantControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void itShouldReturnAllTenants() throws Exception {
        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(TenantConfigurationStubs.createMockTenantCA(),
                TenantConfigurationStubs.createMockTenantNV());

        when(service.getAll(TenantType.TENANT)).thenReturn(tenantConfigurationSet);

        mvc.perform(get("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(service).getAll(TenantType.TENANT);
    }

    @Test
    public void itShouldCreateTenant() throws Exception {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantNV();

        when(service.createTenant(tenantConfiguration)).thenReturn(tenantConfiguration);
        mvc.perform(post("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isCreated());

        verify(service).createTenant(any(TenantConfiguration.class));
    }

    @Ignore
    @Test //todo what needs to be returned
    public void itShouldFailToCreateTenantShouldThrowException() throws Exception {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantNV();

        when(service.createTenant(any(TenantConfiguration.class))).thenThrow(new NoSuchElementException());

        mvc.perform(post("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isBadRequest());

        verify(service).createTenant(any(TenantConfiguration.class));
    }

    @Test
    public void itShouldSaveTenantOverrideChanges() throws Exception {
        String expectedDescription = "Update NV Description";
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantNV();
        tenantConfiguration.getTenant().setDescription(expectedDescription);

        when(service.updateTenant(tenantConfiguration)).thenReturn(tenantConfiguration);

        mvc.perform(put("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration)))
                .andExpect(status().isOk());


        verify(service).updateTenant(any(TenantConfiguration.class));

    }

}