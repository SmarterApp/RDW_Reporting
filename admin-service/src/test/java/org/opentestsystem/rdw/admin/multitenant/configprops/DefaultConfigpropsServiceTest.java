package org.opentestsystem.rdw.admin.multitenant.configprops;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.javers.core.Javers;
import org.javers.core.JaversBuilder;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;

import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

public class DefaultConfigpropsServiceTest {

    DefaultConfigpropsService conversionService;
    private ObjectMapper objectMapper;
    private DefaultConfigpropsConsolidationService consolidationService;
    private TestFileBasedConfigpropsClient configpropsClient;
    private Javers javers;

    @Before
    public void setUp() {
        javers = JaversBuilder.javers().build();
        objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
        configpropsClient = new TestFileBasedConfigpropsClient();
        consolidationService = new DefaultConfigpropsConsolidationService(objectMapper, configpropsClient);
        conversionService = new DefaultConfigpropsService(consolidationService, objectMapper);
    }

    @Test
    public void defaultReportingSystemPropertiesShouldProduceValidResults() {
        Optional<ReportingSystemSettings> result = conversionService.defaultReportingSystemProperties();
        assertThat(result).isNotEmpty();
        assertThat(result.get().getTenants().size()).isEqualTo(2);
        assertThat(result.get().isTransferAccessEnabled()).isTrue();
    }

    @Test
    public void reportingSystemPropertiesShouldProduceValidResults() {
        Optional<ReportingSystemPropertiesImpl> result = conversionService.reportingSystemProperties("CA");
        assertThat(result).isNotEmpty();
    }

    @Test
    public void defaultArchivePropertiesShouldProduceValidResults() {
        Optional<ArchivePropertiesRoot> result = conversionService.defaultArchiveProperties();
        assertThat(result).isNotEmpty();
        assertThat(result.get().getUriRoot()).isNotNull();
    }

    @Test
    public void archivePropertiesShouldProduceValidResults() {
        Optional<ArchivePropertiesTenant> result = conversionService.archiveProperties("TS");
        assertThat(result).isNotEmpty();
        assertThat(result.get().getPathPrefix()).isEqualTo("TS");
        //negative test
        Optional<ArchivePropertiesTenant> shouldNotFind = conversionService.archiveProperties("XX");
        assertThat(shouldNotFind).isEmpty();
    }

    @Test
    public void defaultAggregateReportingPropertiesShouldProduceValidResults() {
        Optional<AggregateReportingPropertiesRoot> result = conversionService.defaultAggregateReportingProperties();
        assertThat(result).isNotEmpty();
        assertThat(result.get().getAssessmentTypes()).isNotEmpty();
    }

    @Test
    public void aggregateReportingPropertiesShouldProduceValidResults() {
        Optional<AggregateReportingPropertiesTenant> result = conversionService.aggregateReportingProperties("TS");
        //TODO: none set in our test dataset probably should add later
        assertThat(result).isEmpty();
    }

    @Test
    public void tenantPropertiesShouldProduceValidResults() {
        Optional<TenantProperties> result = conversionService.tenantProperties();
        assertThat(result).isNotEmpty();
        assertThat(result.get().findTenantById("CA")).isNotEmpty();
    }

    @Test
    public void defaultDataSourceElementsShouldProduceValidResults() {
        Map<String, DataSourceElementsProperties> result = conversionService.defaultDataSourceElements();
        assertThat(result).isNotEmpty();
    }

    @Test
    public void dataSourceElementsShouldProduceValidResults() {
        Map<String, DataSourceElementsTenant> result = conversionService.dataSourceElements("CA");
        assertThat(result).isNotEmpty();
    }

}
