package org.opentestsystem.rdw.admin.status;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatusIndicatorTest {

    private DatabaseStatusIndicator statusIndicator;
    private JdbcOperations jdbcOperations;

    @Before
    public void createStatusIndicator() {
        jdbcOperations = mock(JdbcOperations.class);
        final NamedParameterJdbcTemplate jdbcTemplate = mock(NamedParameterJdbcTemplate.class);
        when(jdbcTemplate.getJdbcOperations()).thenReturn(jdbcOperations);

        final TenantProperties tenantProperties = mock(TenantProperties.class);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.of(
                "CA", Tenant.builder()
                        .id("CA")
                        .key("CA")
                        .name("California")
                        .build(),
                "NV", Tenant.builder()
                        .id("NV")
                        .key("NV")
                        .name("Nevadata")
                        .build())
        );

        statusIndicator = new DatabaseStatusIndicator(jdbcTemplate, tenantProperties);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).isEqualTo("database");
    }

    @Test
    public void itShouldBeReadDatabaseLevel() {
        assertThat(statusIndicator.doLevelCheck(2)).isFalse();
        assertThat(statusIndicator.doLevelCheck(3)).isTrue();
    }

    @Ignore("TODO - broken, the mock return isn't working properly, can't figure out why")
    @Test
    public void itShouldReturnIdealStatus() {
        when(jdbcOperations.queryForList(anyString(), eq(String.class))).thenReturn(
                Arrays.stream(ImportStatus.values()).map(ImportStatus::name).collect(Collectors.toList()));
        final Status status = statusIndicator.status(3);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails()).hasSize(2);
        assertThat((List<Status>) status.getDetails().get("databaseOperations - CA")).isNotEmpty();
    }

    @Test
    public void itShouldReturnWarningStatusIfWrongNumberOfCodes() {
        when(jdbcOperations.queryForList(anyString(), eq(String.class))).thenReturn(newArrayList());
        final Status status = statusIndicator.status(3);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());
    }
}
