package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.admin.client.Tenants;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;

import org.springframework.util.ResourceUtils;

import java.io.File;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;


public class DefaultRdwServiceConfigPropsAccessorTest {

    private DefaultRdwServiceConfigPropsAccessor service;
    private ObjectMapper mapper = new ObjectMapper();
    private RdwServiceConfigProps configProps;


    @Before
    public void setUp() throws Exception {
        configProps = getGetRdwServiceConfigProps();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);

        service = new DefaultRdwServiceConfigPropsAccessor(configProps, mapper);
    }

    private static RdwServiceConfigProps getGetRdwServiceConfigProps() throws Exception {
        RdwServiceConfigProps rdwServiceConfigProps = new RdwServiceConfigProps();
        rdwServiceConfigProps.setConfigProps(TestConfigPropResources.getResponses());
        return rdwServiceConfigProps;
    }

    @Test
    public void shouldSuccessfullyReportingSystemSettings() throws Exception {
        final Optional<ReportingSystemSettings> reportingSystemSettings = getReportingSystemSetting();

        final Optional<ReportingSystemPropertiesImpl> defaultReportingSystemSettings = service.getDefaultReportingSystemSettings();
        assertThat(defaultReportingSystemSettings.isPresent()).isTrue();
        assertThat(defaultReportingSystemSettings.get().getSchoolYear())
                .isEqualTo(reportingSystemSettings.get().getSchoolYear());

        final Map<String, ReportingSystemPropertiesImpl> tenantsReadOnlyDataSourceElements = service.getTenantReportingSystemSettings();
        assertThat(tenantsReadOnlyDataSourceElements).isNotEmpty();
    }

    @Test
    public void shouldSuccessfullyReadWriteDataSources() throws Exception {

        final Optional<DataSourceElementsProperties> writableDataSources = getWritableDataSources();
        final Optional<DataSourceElementsTenant> defaultWritableDataSources = service.getDefaultWritableDataSourceElements();
        assertThat(defaultWritableDataSources.isPresent()).isTrue();
        assertThat(defaultWritableDataSources.get().getUsername()).isEqualTo(writableDataSources.get().getUsername());

        final Map<String, DataSourceElementsTenant> tenantsWritableDataSourceElements = service.getTenantsWritableDataSourceElements();
        assertThat(tenantsWritableDataSourceElements).isNotEmpty();
    }

    @Test
    public void shouldSuccessfullyOlapDataSources() throws Exception {
        final Optional<DataSourceElementsProperties> olapDataSources = getOlapDataSources();
        final Optional<DataSourceElementsTenant> defaultOlapDataSources = service.getDefaultOlapDataSourceElements();
        assertThat(defaultOlapDataSources.isPresent()).isTrue();
        assertThat(defaultOlapDataSources.get().getUsername()).isEqualTo(olapDataSources.get().getUsername());

        final Map<String, DataSourceElementsTenant> tenantsOlapDataSourceElements = service.getTenantsOlapDataSourceElements();
        assertThat(tenantsOlapDataSourceElements).isEmpty();
    }

    @Test
    public void shouldSuccessfullyWarehouseDataSources() throws Exception {
        Optional<DataSourceElementsProperties> warehouseDataSources = getWarehouseDataSources();
        final Optional<DataSourceElementsTenant> defaultWarehouseDataSources = service.getDefaultWarehouseDataSourceElements();
        assertThat(defaultWarehouseDataSources.isPresent()).isTrue();
        assertThat(defaultWarehouseDataSources.get().getUsername()).isEqualTo(warehouseDataSources.get().getUsername());

        final Map<String, DataSourceElementsTenant> tenantsWarehouseDataSourceElements = service.getTenantsWarehouseDataSourceElements();
        assertThat(tenantsWarehouseDataSourceElements).isNotEmpty();
        assertThat(tenantsWarehouseDataSourceElements.size()).isEqualTo(warehouseDataSources.get().getTenants().size());
    }

    @Test
    public void shouldSuccessfullyAggregateProperties() {
        Optional<AggregateReportingPropertiesRoot> aggregateReportingPropertiesRoot = TenantConfigurationStubs.getAggregateReportingPropertiesRoot();
        final Optional<AggregateReportingPropertiesTenant> aggregateReportingPropertiesTenant = service.getDefaultAggregateReportingProperties();
        assertThat(aggregateReportingPropertiesTenant.isPresent()).isTrue();

        final Map<String, AggregateReportingPropertiesTenant> tenantsAggregateReporting = service.getTenantsAggregateReportingProperties();
        assertThat(tenantsAggregateReporting).isEmpty();
    }

    @Test
    public void shouldSuccessfullyArchiveProperties() throws Exception {
        Optional<ArchivePropertiesRoot> archiveProperties = getArchiveProperties();

        final Optional<ArchivePropertiesTenant> archivePropertiesTenant = service.getDefaultArchivePropertiesTenant();
        assertThat(archivePropertiesTenant.isPresent()).isTrue();

        final Map<String, ArchivePropertiesTenant> tenantsArchiveProperties = service.getTenantsArchiveProperties();
        assertThat(tenantsArchiveProperties).isNotEmpty();
    }

    private Optional<ReportingSystemSettings> getReportingSystemSetting() throws Exception {
        File file = ResourceUtils.getFile("classpath:reportingAdminServiceReportingSystemSettings.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.reportingSystemSettings").path("properties");
        ReportingSystemSettings reportingSystemSettings = mapper.treeToValue(tenantPropertiesNode, ReportingSystemSettings.class);
        assertThat(reportingSystemSettings).isNotNull();
        assertThat(reportingSystemSettings.getTenants()).isNotEmpty().isNotEmpty();
        return Optional.of(reportingSystemSettings);
    }

    private Optional<ArchivePropertiesRoot> getArchiveProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:archiveProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("archivePropertiesRoot").path("properties");
        ArchivePropertiesRoot settings = mapper.treeToValue(tenantPropertiesNode, ArchivePropertiesRoot.class);
        assertThat(settings).isNotNull();
        assertThat(settings.getTenants()).isNotEmpty().isNotEmpty();
        return Optional.of(settings);
    }

    private Optional<AggregateReportingPropertiesTenant> getAggregateProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:aggregateReportingProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.aggregateReportingPropertiesRoot").path("properties");
        AggregateReportingPropertiesTenant settings = mapper.treeToValue(tenantPropertiesNode, AggregateReportingPropertiesTenant.class);
        assertThat(settings).isNotNull();
        return Optional.of(settings);
    }

    private Optional<DataSourceElementsProperties> getReadOnlyDataSources() throws Exception {
        File file = ResourceUtils.getFile("classpath:reportingAdminServiceReportingDataSourceElementsProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.reportingDataSourceElementsProperties").path("properties");
        DataSourceElementsProperties dataSourceElementsProperties = mapper.treeToValue(tenantPropertiesNode, DataSourceElementsProperties.class);
        assertThat(dataSourceElementsProperties).isNotNull();
        assertThat(dataSourceElementsProperties.getTenants()).isNotEmpty();
        return Optional.of(dataSourceElementsProperties);
    }

    private Optional<DataSourceElementsProperties> getWarehouseDataSources() throws Exception {

        File file = ResourceUtils.getFile("classpath:reportingAdminServiceWarehouseDataSourceElementProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.warehouseDataSourceElementsProperties").path("properties");
        DataSourceElementsProperties dataSourceElementsProperties = mapper.treeToValue(tenantPropertiesNode, DataSourceElementsProperties.class);
        assertThat(dataSourceElementsProperties).isNotNull();
        assertThat(dataSourceElementsProperties.getTenants()).isNotEmpty();
        return Optional.of(dataSourceElementsProperties);
    }

    private Optional<DataSourceElementsProperties> getWritableDataSources() throws Exception {

        File file = ResourceUtils.getFile("classpath:reportingServiceWritableDataSourceElementsProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.writableDataSourceElementsProperties").path("properties");
        DataSourceElementsProperties dataSourceElementsProperties = mapper.treeToValue(tenantPropertiesNode, DataSourceElementsProperties.class);
        assertThat(dataSourceElementsProperties).isNotNull();
        assertThat(dataSourceElementsProperties.getTenants()).isNotEmpty();
        return Optional.of(dataSourceElementsProperties);
    }

    private Optional<DataSourceElementsProperties> getOlapDataSources() throws Exception {

        File file = ResourceUtils.getFile("classpath:reportingOlapDatasource.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.olapDataSourceElementsProperties").path("properties");

        DataSourceElementsProperties dataSourceElementsProperties;
        if (!tenantPropertiesNode.isMissingNode()) {
            dataSourceElementsProperties = mapper.treeToValue(tenantPropertiesNode, DataSourceElementsProperties.class);
            assertThat(dataSourceElementsProperties).isNotNull();
            assertThat(dataSourceElementsProperties.getTenants()).isEmpty();
            return Optional.of(dataSourceElementsProperties);
        }
        return Optional.empty();
    }

    private Tenants getExpectedTenants() throws Exception {
        File file = ResourceUtils.getFile("classpath:reportingAdminServiceReportingSystemSettings.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.dataSourceElementsProperties").path("properties");
        Tenants tenants = mapper.treeToValue(tenantPropertiesNode, Tenants.class);
        assertThat(tenants).isNotNull();
        assertThat(tenants.getTenants()).isNotEmpty().isNotEmpty();
        return tenants;
    }

}