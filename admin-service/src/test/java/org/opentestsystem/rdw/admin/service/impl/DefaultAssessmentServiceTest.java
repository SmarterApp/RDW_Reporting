package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.model.AssessmentQuery;
import org.opentestsystem.rdw.admin.repository.AssessmentRepository;
import org.opentestsystem.rdw.reporting.common.model.Assessment;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.service.impl.DefaultAssessmentService.MaxResults;

@RunWith(MockitoJUnitRunner.class)
public class DefaultAssessmentServiceTest {

    @Mock
    private AssessmentRepository repository;

    @Captor
    private ArgumentCaptor<AssessmentQuery> queryCaptor;

    private DefaultAssessmentService service;

    @Before
    public void setup() {
        service = new DefaultAssessmentService(repository);
    }

    @Test
    public void itShouldDelegateToTheRepository() {
        final AssessmentQuery query = AssessmentQuery.builder()
                .limit(123)
                .label("Assessment")
                .build();
        final Assessment assessmentA = assessment(1, "Assessment A");
        final Assessment assessmentB = assessment(2, "Assessment B");

        when(repository.findAll(queryCaptor.capture())).thenReturn(of(assessmentA, assessmentB));

        assertThat(service.findAssessments(query))
                .containsOnly(assessmentA, assessmentB);
        assertThat(queryCaptor.getValue())
                .isEqualToComparingFieldByFieldRecursively(query);
    }

    @Test
    public void itShouldImposeAMaximumLimit() {
        final AssessmentQuery largeQuery = AssessmentQuery.builder()
                .limit(Integer.MAX_VALUE)
                .build();
        when(repository.findAll(queryCaptor.capture())).thenReturn(of());

        service.findAssessments(largeQuery);
        assertThat(queryCaptor.getValue().getLimit()).isEqualTo(MaxResults);
    }

    private Assessment assessment(final int id, final String name) {
        return Assessment.builder()
                .id(id)
                .name(name + " Name")
                .label(name + " Label")
                .claimCodes(of("code 1", "code 2", "code 3"))
                .gradeCode("g1")
                .schoolYear(2017)
                .subjectCode("Math")
                .build();
    }

}