package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupFilterOptions;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.service.GroupService;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.any;
import static org.mockito.Mockito.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(GroupController.class)
public class GroupControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupService service;

    private final User user = User.builderExt()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void itShouldGetGroupsBySingleSubjectId() throws Exception {
        when(service.getByQuery(any(User.class), refEq(
                GroupQuery
                        .builder()
                        .schoolId(1)
                        .schoolYear(2017)
                        .subjects(ImmutableSet.of("ELA"))
                        .build()))
        ).thenReturn(ImmutableSet.of(
                Group.builder()
                        .name("test1")
                        .schoolName("school1")
                        .schoolId(1)
                        .subjectCode("ELA")
                        .build()));

        mvc.perform(get("/groups?schoolId=1&subject=ELA&schoolYear=2017")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("test1"))
                .andExpect(jsonPath("$[0].schoolName").value("school1"))
                .andExpect(jsonPath("$[0].schoolId").value(1))
                .andExpect(jsonPath("$[0].subjectCode").value("ELA"));
    }

    @Test
    public void itShouldGetGroupsByMultipleSubjectIds() throws Exception {
        when(service.getByQuery(any(User.class), refEq(
                GroupQuery
                        .builder()
                        .schoolId(1)
                        .schoolYear(2017)
                        .subjects(ImmutableSet.of("ELA", "Math"))
                        .build()))
        ).thenReturn(ImmutableSet.of(Group.builder()
                .name("test1")
                .schoolName("school1")
                .schoolId(1)
                .subjectCode("Math")
                .build()));

        mvc.perform(get("/groups?schoolId=1&subject=ELA&subject=Math&schoolYear=2017")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("test1"))
                .andExpect(jsonPath("$[0].schoolName").value("school1"))
                .andExpect(jsonPath("$[0].schoolId").value(1))
                .andExpect(jsonPath("$[0].subjectCode").value("Math"));
    }

    @Test
    public void itShouldGetFilters() throws Exception {
        when(service.getFilterOptions(any(User.class)))
                .thenReturn(GroupFilterOptions.builder()
                        .schools(ImmutableSet.of(School.builder().id(1L).name("school 1").naturalId("school_1").build()))
                        .subjects(ImmutableSet.of("Math", "ELA"))
                        .schoolYears(ImmutableSet.of(2016, 2017, 2018))
                        .build());

        mvc.perform(get("/groups/filters")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.schools[0].name").value("school 1"))
                .andExpect(jsonPath("$.subjects[0]").value("Math"))
                .andExpect(jsonPath("$.subjects[1]").value("ELA"))
                .andExpect(jsonPath("$.schoolYears[0]").value("2016"))
                .andExpect(jsonPath("$.schoolYears[1]").value("2017"))
                .andExpect(jsonPath("$.schoolYears[2]").value("2018"));

    }
}
