package org.opentestsystem.rdw.admin.multitenant.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.time.Instant;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import static org.assertj.core.api.Assertions.fail;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.head;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {TenantController.class}, secure = false)
public class TenantControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper.registerModule(new JavaTimeModule());
    }

    @Test
    public void headShouldReturn200WhenResourceIsPresent() throws Exception {
        when(service.exists("a")).thenReturn(true);
        mvc.perform(head("/tenants/a"))
                .andExpect(status().isOk());
    }

    @Test
    public void headShouldReturn200WhenResourceIdIsPresent() throws Exception {
        when(service.existsId("a")).thenReturn(true);
        mvc.perform(head("/tenants/id/a"))
                .andExpect(status().isOk());
    }

    @Test
    public void headShouldReturn404WhenResourceIsAbsent() throws Exception {
        when(service.exists("a")).thenReturn(false);
        mvc.perform(head("/tenants/a"))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldReturnAllTenants() throws Exception {
        final Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(
                getTenantConfig("CA"), getTenantConfig("NV"));

        when(service.getAll(TenantType.TENANT)).thenReturn(tenantConfigurationSet);

        mvc.perform(get("/tenants?type=TENANT")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$.[0].tenant").exists())
                .andExpect(jsonPath("$.[0].tenant.id").value("CA"));


        verify(service).getAll(TenantType.TENANT);
    }

    @Test
    public void itShouldReturnOneTenant() throws Exception {
        when(service.findActiveTenantConfigurationByKey("CA")).thenReturn(Optional.of(getTenantConfig("CA")));

        mvc.perform(get("/tenants/CA")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.tenant.key").value("CA"));

        verify(service).findActiveTenantConfigurationByKey("CA");
    }

    @Test
    public void itShouldCreateTenant() throws Exception {
        TenantConfiguration tenantConfiguration = getTenantConfig("NV");

        mvc.perform(post("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isCreated());

        verify(service).createTenant(any(TenantConfiguration.class));
    }

    @Test
    public void isShouldUpdate() throws Exception {
        final TenantConfiguration tenantConfiguration = new TenantConfiguration();

        mvc.perform(put("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isOk());

        verify(service).updateTenant(any(TenantConfiguration.class));
    }

    @Test
    public void itShouldDelete() throws Exception {
        // create tenantToDelete
        mvc.perform(delete(String.format("/tenants/%s", "XX"))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(service).deleteTenant("XX");
    }
    @Ignore // for not
    @Test(expected = NoSuchElementException.class)
    public void itShouldFailToCreateTenantShouldThrowException() throws Exception {
        TenantConfiguration tenantConfiguration = getTenantConfig("NV");

        mvc.perform(post("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration))
        ).andExpect(status().isBadRequest());

        fail("Should never reach here");
    }

    @Test
    public void itShouldSaveTenantOverrideChanges() throws Exception {
        String expectedDescription = "Update NV Description";
        TenantConfiguration tenantConfiguration = getTenantConfig("NV");
        tenantConfiguration.getTenant().setDescription(expectedDescription);

        mvc.perform(put("/tenants")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration)))
                .andExpect(status().isOk());

        verify(service).updateTenant(any(TenantConfiguration.class));
        // todo test updated description
    }


    @Test
    public void isShouldUpdateStatus() throws Exception {
        final String key = "t1";
        final TenantAdministrationStatus status = TenantAdministrationStatus.ACTIVE;

        mvc.perform(put("/tenants/" + key + "/status")
                .contentType(MediaType.APPLICATION_JSON)
                .content(status.name())
        ).andExpect(status().isOk());

        verify(service).updateTenantStatus(key, status);
    }

    @Test
    public void isShouldDeleteStatus() throws Exception {
        final String key = "t1";

        mvc.perform(
                delete("/tenants/" + key + "/status")
        ).andExpect(status().isNoContent());

        verify(service).deleteTenantStatus(key);
    }

    /**
     * @param id indicates CA or NV tenant
     * @return mocked TenantConfiguration that can be used for testing
     */
    private TenantConfiguration getTenantConfig(final String id) {
        final ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix(id.equals("CA") ? "ca-test" : "nv-test");
        final AggregateReportingPropertiesTenant aggregatePropeties = new AggregateReportingPropertiesTenant();
        aggregatePropeties.setStatewideUserAssessmentTypes(ImmutableSet.of("icb"));
        return (TenantConfiguration.builder()
                .tenant(getTenant(id))
                .parentTenantKey(null)
                .administrationStatus(TenantAdministrationStatusContext.builder()
                        .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                        .build())
                .archiveProperties(archivePropertiesTenant)
                .aggregateReportingProperties(aggregatePropeties)
                .dataSources(ImmutableMap.of())
                .build()
        );
    }

    /**
     * @param id indicates CA or NV tenant
     * @return the Tenant for the given id
     */
    private Tenant getTenant(final String id) {
        return Tenant.builder().name(id.equals("CA") ? "California" : "Nevada")
                .sandbox(false)
                .description(id.equals("CA") ? "CA's Description" : "Nevada's Description")
                .id(id)
                .key(id)
                .created(Instant.now())
                .sandboxDataset(null)
                .build();
    }

}
