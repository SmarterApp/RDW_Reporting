package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


public class DefaultActuatorClientRdwServiceTest {

    private TenantConfigurationLookupClient tenantConfigurationLookupClient;

    private DefaultActuatorClientRdwService service;

    @Before
    public void Setup() {
        tenantConfigurationLookupClient = mock(TenantConfigurationLookupClient.class);
        service = new DefaultActuatorClientRdwService(tenantConfigurationLookupClient);
    }

    @Test
    public void shouldGetServiceConfigProps() throws Exception {
        when(tenantConfigurationLookupClient.getRawConfigurations()).thenReturn(getResponseEntities());
        final RdwServiceConfigProps rdwServiceConfigProps = service.getRdwServiceConfigProps();
        assertThat(rdwServiceConfigProps).isNotNull();
        assertThat(rdwServiceConfigProps.getConfigProps()).isNotEmpty();
        assertThat(rdwServiceConfigProps.getConfigProps().size()).isEqualTo(8);
        verify(tenantConfigurationLookupClient).getRawConfigurations();
    }


    private List<String> getResponseEntities() throws Exception {
        return TestConfigPropResources.getResponses();
    }

}
