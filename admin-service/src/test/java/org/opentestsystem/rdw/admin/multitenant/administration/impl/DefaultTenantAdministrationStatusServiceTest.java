package org.opentestsystem.rdw.admin.multitenant.administration.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.multitenant.Tenant;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

public class DefaultTenantAdministrationStatusServiceTest {

    private static final String TenantKey = "AA";
    private static final String TenantId = "BB";
    private DefaultTenantAdministrationStatusService statusService;
    private Tenant tenant;

    @Before
    public void setUp() {
        statusService = new DefaultTenantAdministrationStatusService();
        tenant = Tenant.builder().id(TenantId).build();
    }

    @Test
    public void interactsAsExpected() {
        statusService.putStatus(TenantKey, TenantAdministrationStatus.CREATE_STARTED, tenant);
        Optional<TenantAdministrationStatusContext> r1 = statusService.findStatus(TenantKey);
        assertThat(r1.isPresent()).isTrue();
        assertThat(statusService.checkId(TenantId)).isTrue();
        assertThat(r1.get().getTenantAdministrationStatus()).isEqualTo(TenantAdministrationStatus.CREATE_STARTED);
        statusService.updateStatus(TenantKey, TenantAdministrationStatus.CREATE_PERSISTING_CONFIGURATION);
        Optional<TenantAdministrationStatusContext> r2 = statusService.findStatus(TenantKey);
        assertThat(r2.get().getTenantAdministrationStatus()).isEqualTo(TenantAdministrationStatus.CREATE_PERSISTING_CONFIGURATION);
        statusService.remove(TenantKey);
        Optional<TenantAdministrationStatusContext> r3 = statusService.findStatus(TenantKey);
        assertThat(r3).isEmpty();
        assertThat(statusService.checkId(TenantId)).isFalse();
    }

}