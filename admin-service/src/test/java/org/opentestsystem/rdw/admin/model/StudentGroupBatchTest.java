package org.opentestsystem.rdw.admin.model;

import org.junit.Test;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.ImportStatus.ACCEPTED;
import static org.opentestsystem.rdw.common.model.ImportStatus.PROCESSED;

public class StudentGroupBatchTest {

    @Test
    public void itShouldRetainBuilderValues() {
        final StudentGroupBatch studentGroupBatch = StudentGroupBatch.builder()
                .status(ACCEPTED)
                .creator("creator")
                .digest("digest")
                .message("message")
                .build();
        assertThat(studentGroupBatch.getId()).isNull();
        assertThat(studentGroupBatch.getStatus()).isEqualTo(ACCEPTED);
        assertThat(studentGroupBatch.getCreator()).isEqualTo("creator");
        assertThat(studentGroupBatch.getDigest()).isEqualTo("digest");
        assertThat(studentGroupBatch.getMessage()).isEqualTo("message");
    }

    @Test
    public void itShouldNotDefaultACreatedOrUpdatedalue() {
        //we want to let DB manage the create/update times.
        final StudentGroupBatch studentGroupBatch = StudentGroupBatch.builder().build();
        assertThat(studentGroupBatch.getCreated()).isNull();
        assertThat(studentGroupBatch.getUpdated()).isNull();
    }

    @Test
    public void itShouldCopy() {
        final StudentGroupBatch src = StudentGroupBatch.builder()
                .id(123L)
                .status(ACCEPTED)
                .creator("creator")
                .created(Instant.now())
                .updated(Instant.now().plus(100, ChronoUnit.SECONDS))
                .message("message")
                .build();
        final StudentGroupBatch studentGroupBatch = src.copy().status(PROCESSED).build();
        assertThat(studentGroupBatch.getId()).isEqualTo(123);
        assertThat(studentGroupBatch.getStatus()).isEqualTo(PROCESSED);
        assertThat(studentGroupBatch.getCreator()).isEqualTo("creator");
        assertThat(studentGroupBatch.getCreated()).isEqualTo(src.getCreated());
        assertThat(studentGroupBatch.getUpdated()).isEqualTo(src.getUpdated());
        assertThat(studentGroupBatch.getMessage()).isEqualTo("message");
    }
}