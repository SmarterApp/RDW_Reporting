package org.opentestsystem.rdw.admin.multitenant.configserver;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import org.opentestsystem.rdw.admin.multitenant.model.ApplicationTenantConfigurationPersistence;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElements;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * This tests the reading of properties using the same object mapper as
 * DefaultConfigServerClient. It's easier to do this than to do a full-on IT.
 *
 * @see DefaultConfigServerClient
 */
public class ObjectMapperTest {

    private ObjectMapper ymlMapper;

    @Before
    public void createMapper() {
        // create the mapper the same way DefaultConfigServerClient does
        ymlMapper = new ObjectMapper(new YAMLFactory().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER));
        ymlMapper.findAndRegisterModules();
    }

    @Test
    public void itShouldReadTenantAZ() throws IOException {
        try (final InputStream is = this.getClass().getResourceAsStream("/application-relaxed.yml")) {
            final ApplicationTenantConfigurationPersistence yml =
                    ymlMapper.readValue(is, ApplicationTenantConfigurationPersistence.class);
            assertThat(yml).isNotNull();
            assertTenantProperties(yml.getTenantProperties().get("tenants"));
            assertReportingProperties(yml.getReporting().get("tenants"));
            assertDatasourceProperties(yml.getDatasources().get("reporting_ro").get("tenants"));
            assertArchiveProperties(yml.getArchive().get("tenants"));
        }
    }

    private void assertTenantProperties(final Map<String, Tenant> tenants) {
        // really we're just testing that "tenant-properties" was recognized
        assertThat(tenants.get("CAX").getId()).isEqualTo("CAX");
        assertThat(tenants.get("CAX").getKey()).isEqualTo("CAX");
    }

    private void assertReportingProperties(final Map<String, ? extends ReportingSystemProperties> tenants) {
        assertThat(tenants.get("AZX").isPercentileDisplayEnabled()).isFalse();
        assertThat(tenants.get("AZX").getReportLanguages()).containsExactly("en");
        assertThat(tenants.get("AZX").getSchoolYear()).isEqualTo(2019);
        assertThat(tenants.get("CAX").isPercentileDisplayEnabled()).isTrue();
        assertThat(tenants.get("CAX").getReportLanguages()).containsExactly("en", "sp");
        assertThat(tenants.get("CAX").getSchoolYear()).isEqualTo(2020);
        assertThat(tenants.get("NVX").isPercentileDisplayEnabled()).isTrue();
        assertThat(tenants.get("NVX").getReportLanguages()).containsExactly("sp");
        assertThat(tenants.get("NVX").getSchoolYear()).isEqualTo(2018);
    }

    private void assertDatasourceProperties(final Map<String, ? extends DataSourceElements> tenants) {
        assertThat(tenants.get("AZX").getInitialSize()).isEqualTo(4);
        assertThat(tenants.get("AZX").getSchemaSearchPath()).isEqualTo("azx");
        assertThat(tenants.get("CAX").getInitialSize()).isEqualTo(10);
        assertThat(tenants.get("CAX").getSchemaSearchPath()).isEqualTo("cax");
        assertThat(tenants.get("NVX").getInitialSize()).isEqualTo(5);
        assertThat(tenants.get("NVX").getSchemaSearchPath()).isEqualTo("nvx");
    }

    private void assertArchiveProperties(final Map<String, ? extends ArchiveProperties> tenants) {
        assertThat(tenants.get("AZX").getUriRoot()).isEqualTo("s3://rdw");
        assertThat(tenants.get("AZX").getPathPrefix()).isEqualTo("azx");
        assertThat(tenants.get("AZX").getS3Sse()).isNull();
        assertThat(tenants.get("CAX").getUriRoot()).isEqualTo("s3://tmp");
        assertThat(tenants.get("CAX").getPathPrefix()).isEqualTo("cax");
        assertThat(tenants.get("CAX").getS3Sse()).isEqualTo("SHA256");
        assertThat(tenants.get("NVX").getUriRoot()).isEqualTo("file://tmp");
        assertThat(tenants.get("NVX").getPathPrefix()).isEqualTo("nvx");
        assertThat(tenants.get("NVX").getS3Sse()).isNull();
    }

}
