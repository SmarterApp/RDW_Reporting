package org.opentestsystem.rdw.admin.multitenant.configserver;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import org.opentestsystem.rdw.admin.multitenant.model.ApplicationTenantConfigurationPersistence;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

// added this test to make testing a couple things easier
public class ObjectMapperTest {

    private ObjectMapper ymlMapper;

    @Before
    public void createMapper() {
        ymlMapper = new ObjectMapper(new YAMLFactory()
                .disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER)
        );
        ymlMapper.findAndRegisterModules();
        ymlMapper.addMixIn(ArchivePropertiesTenant.class, ArchivePropertiesTenantMixin.class);
    }

    @Test
    public void itShouldReadTenantAZ() {
        // get application-tenant_az.yml as input stream and load
        try (final InputStream is = this.getClass().getResourceAsStream("/application-relaxed.yml")) {
            final ApplicationTenantConfigurationPersistence yml =
                    ymlMapper.readValue(is, ApplicationTenantConfigurationPersistence.class);
            assertThat(yml).isNotNull();
            final Map<String, ArchivePropertiesTenant> tenants = yml.getArchive().get("tenants");
            assertThat(tenants.get("AZX").getUriRoot()).isEqualTo("s3://rdw");
            assertThat(tenants.get("AZX").getPathPrefix()).isEqualTo("azx");
            assertThat(tenants.get("CAX").getUriRoot()).isEqualTo("s3://tmp");
            assertThat(tenants.get("CAX").getPathPrefix()).isEqualTo("cax");
            assertThat(tenants.get("NVX").getUriRoot()).isEqualTo("file://tmp");
            assertThat(tenants.get("NVX").getPathPrefix()).isEqualTo("nvx");
        } catch (final IOException exception) {
            fail("failed to deserialize application-tenant_az.yml", exception);
        }
    }
}
