package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Optional;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;


public class InMemoryTenantRepositoryTest {

    @Autowired
    InMemoryTenantRepository inMemoryTenantRepository;

    @Before
    public void setUp() {
        //creating a new repo so the cache is empty at the start of the tests
        inMemoryTenantRepository = new InMemoryTenantRepository();
    }

    @Test
    public void shouldRetrieveTenantsSuccessfully() {
        TenantConfiguration expectedCATenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        inMemoryTenantRepository.add(expectedCATenantConfiguration);
        assertThat(inMemoryTenantRepository.tenantExists(expectedCATenantConfiguration.getTenant().getKey())).isTrue();
        assertThat(inMemoryTenantRepository.getAll()).isNotNull().isNotEmpty();
        assertThat(inMemoryTenantRepository.getAll().size()).isEqualTo(1);

        TenantConfiguration expectedNVTenantConfiguration = TenantConfigurationStubs.createMockTenantNV();
        inMemoryTenantRepository.add(expectedNVTenantConfiguration);
        assertThat(inMemoryTenantRepository.tenantExists(expectedNVTenantConfiguration.getTenant().getKey())).isTrue();
        assertThat(inMemoryTenantRepository.getAll()).isNotNull().isNotEmpty();
        assertThat(inMemoryTenantRepository.getAll().size()).isEqualTo(2);
    }

    @Test
    public void shouldAddToRepo() {
        // verify tenant repo is empty
        assertThat(inMemoryTenantRepository.getAll()).isEmpty();

        TenantConfiguration expectedTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        inMemoryTenantRepository.add(expectedTenantConfiguration);
        assertThat(inMemoryTenantRepository.tenantExists(expectedTenantConfiguration.getTenant().getKey())).isTrue();

        // go get the newly added tenant
        Set<TenantConfiguration> tenantConfigurationsSet = inMemoryTenantRepository.getAll();
        assertThat(tenantConfigurationsSet).isNotNull().isNotEmpty();
        assertThat(tenantConfigurationsSet.size()).isEqualTo(1);
        Optional<TenantConfiguration> tenant = getTenantConfigurationfromKey(tenantConfigurationsSet,expectedTenantConfiguration.getTenant().getKey());
        if(tenant.isPresent()) {
            validateTenantConfigurations(tenant.get(), expectedTenantConfiguration);
        }
    }

    @Test
    public void itShouldUpdateTheRepo() {
        // add tenant
        TenantConfiguration caTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        inMemoryTenantRepository.add(caTenantConfiguration);

        // Update the tenant
        TenantConfiguration updatedTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        updatedTenantConfiguration.getTenant().setDescription("This is TOTALLY Different");
        inMemoryTenantRepository.update(updatedTenantConfiguration);

        Set<TenantConfiguration> tenantConfigurationsSet = inMemoryTenantRepository.getAll();
        assertThat(tenantConfigurationsSet).isNotNull().isNotEmpty();
        assertThat(tenantConfigurationsSet.size()).isEqualTo(1);
        Optional<TenantConfiguration> tenant = getTenantConfigurationfromKey(tenantConfigurationsSet,updatedTenantConfiguration.getTenant().getKey());
        if(tenant.isPresent()) {
            validateTenantConfigurations(tenant.get(), updatedTenantConfiguration);
        }
    }

    @Test
    public void itShouldDeleteTheRepo() {
        // add tenant
        TenantConfiguration caTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        inMemoryTenantRepository.add(caTenantConfiguration);

        // Delete the tenant
        inMemoryTenantRepository.delete(caTenantConfiguration.getTenant().getKey());
        inMemoryTenantRepository.tenantExists(caTenantConfiguration.getTenant().getKey());
    }

    /**
     * Lookup the given key in the collection of tenants
     * @param tenantConfigurations collection of tenants
     * @param key The key of the tenant to find
     * @return tenantConfiguration if key is found
     */
    private Optional<TenantConfiguration> getTenantConfigurationfromKey(final  Set<TenantConfiguration> tenantConfigurations, String key) {
        return tenantConfigurations.stream()
                .filter(tenant ->
                        tenant.getTenant().getKey().equals(key)
                ).findFirst();
    }
    /**
     * validate the tenant Configurations value the same values
     * @param tenantConfiguration  return or read tenant data
     * @param expectedTenantConfiguration expected Tenant data to compare
     */
    private void validateTenantConfigurations(final TenantConfiguration tenantConfiguration, final TenantConfiguration expectedTenantConfiguration) {
        assertThat(tenantConfiguration.getTenant().getKey()).isEqualTo(expectedTenantConfiguration.getTenant().getKey());
        assertThat(tenantConfiguration.getTenant().getId()).isEqualTo(expectedTenantConfiguration.getTenant().getId());
        assertThat(tenantConfiguration.getTenant().getName()).isEqualTo(expectedTenantConfiguration.getTenant().getName());
        assertThat(tenantConfiguration.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                .isEqualTo(expectedTenantConfiguration.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
        assertThat(tenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                .isEqualTo(expectedTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
    }
}