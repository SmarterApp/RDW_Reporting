package org.opentestsystem.rdw.admin.multitenant.database.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.database.MultitenantDatabaseAdmin;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;

import javax.sql.DataSource;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.admin.multitenant.database.impl.RdwDatabaseType.MIGRATE_OLAP;
import static org.opentestsystem.rdw.admin.multitenant.database.impl.RdwDatabaseType.REPORTING;
import static org.opentestsystem.rdw.admin.multitenant.database.impl.RdwDatabaseType.REPORTING_OLAP;
import static org.opentestsystem.rdw.admin.multitenant.database.impl.RdwDatabaseType.WAREHOUSE;

public class DefaultTenantDatabaseCreationServiceTest {

    private MultitenantDatabaseAdmin mockMultitenantDatabaseAdmin;
    private DefaultTenantDatabaseCreationService defaultTenantDatabaseCreationService;

    private TenantConfiguration tenantConfiguration;

    private DataSourceElementsTenant olapRo;
    private DataSourceElementsTenant olapRw;
    private DataSourceElementsTenant reportingRo;
    private DataSourceElementsTenant reportingRw;
    private DataSourceElementsTenant warehouseRw;
    private DataSourceElementsTenant warehouseRo;
    private DataSourceElementsTenant migrateRw;

    @Before
    public void setUp() throws Exception {
        mockMultitenantDatabaseAdmin = mock(MultitenantDatabaseAdmin.class);
        defaultTenantDatabaseCreationService = new DefaultTenantDatabaseCreationService(mockMultitenantDatabaseAdmin,
                mock(DataSource.class),
                mock(DataSource.class),
                mock(DataSource.class));



        olapRo = generateDataSourceElementsTenant("ro_olap_user", "ropwd", "reporting_sbx_ca", null);
        olapRw = generateDataSourceElementsTenant("rw_olap_user", "rwpwd", "reporting_sbx_ca", null);
        //intentionally using same user for both reporting
        reportingRo = generateDataSourceElementsTenant("rwuser", "rwpwd", null, "reporting_sbx_ca");
        reportingRw = generateDataSourceElementsTenant("rwuser", "rwpwd", null, "reporting_sbx_ca");
        warehouseRo = generateDataSourceElementsTenant("rouser", "ropwd", null, "warehouse_sbx_ca");
        warehouseRw = generateDataSourceElementsTenant("rwuser", "rwpwd", null, "warehouse_sbx_ca");
        migrateRw = generateDataSourceElementsTenant("rwmigrateu", "rwmigratepwd", null, "migrate_sbx_ca");

        Map<String, DataSourceElementsTenant> datasources =
                new ImmutableMap.Builder<String, DataSourceElementsTenant>()
                        .put("olap_ro", olapRo)
                        .put("olap_rw", olapRw)
                        .put("reporting_ro", reportingRo)
                        .put("reporting_rw", reportingRw)
                        .put("warehouse_ro", warehouseRo)
                        .put("warehouse_rw", warehouseRw)
                        .put("migrate_rw", migrateRw)
                        .build();

        tenantConfiguration = TenantConfiguration
                .builder()
                .dataSources(datasources)
                .build();
    }

    private DataSourceElementsTenant generateDataSourceElementsTenant(String username,
                                                                      String password,
                                                                      String schemaSearchPath,
                                                                      String databaseName) {
        DataSourceElementsTenant dataSourceElementsTenant = new DataSourceElementsTenant();
        dataSourceElementsTenant.setUsername(username);
        dataSourceElementsTenant.setPassword(password);
        dataSourceElementsTenant.setSchemaSearchPath(schemaSearchPath);
        DataSourceUrlParts dataSourceUrlParts = new DataSourceUrlParts();
        dataSourceUrlParts.setDatabase(databaseName);
        dataSourceElementsTenant.setUrlParts(dataSourceUrlParts);
        return dataSourceElementsTenant;
    }

    @Test
    public void createDatabaseAndUsers() {
        Set<DefaultTenantDatabaseCreationService.DatabaseInformation> databaseInformationSet =
                defaultTenantDatabaseCreationService.gatherDatabaseInformation(tenantConfiguration);
        defaultTenantDatabaseCreationService.createDatabaseAndUsers(databaseInformationSet);

        verify(mockMultitenantDatabaseAdmin).createDatabase(eq(warehouseRo.getUrlParts().getDatabase()), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin).createDatabase(eq(reportingRo.getUrlParts().getDatabase()), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin).createDatabase(eq(migrateRw.getUrlParts().getDatabase()), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(4)).createDatabaseUser(anyString(), anyString(), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(4)).grantUserLoadFromS3(anyString(), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(4)).grantUserSelectIntoS3(anyString(), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(4)).grantUserOnSelectProc(anyString(), any(RdwDatabaseType.class));
        //would be 5 without deduplication
        verify(mockMultitenantDatabaseAdmin, times(4)).grantUserToDatabase(anyString(), anyString(), any(RdwDatabaseType.class));
    }

    @Test
    public void createOlapSchema() {
        Set<DefaultTenantDatabaseCreationService.DatabaseInformation> databaseInformationSet =
                defaultTenantDatabaseCreationService.gatherDatabaseInformation(tenantConfiguration);
        defaultTenantDatabaseCreationService.createOlapSchema(databaseInformationSet);

        verify(mockMultitenantDatabaseAdmin).createOlapSchema(olapRo.getSchemaSearchPath());
        verify(mockMultitenantDatabaseAdmin, times(1)).createOlapSchema(anyString());
    }


    @Test
    public void createOlapDatabaseAndUsers() {
        Set<DefaultTenantDatabaseCreationService.DatabaseInformation> databaseInformationSet =
                defaultTenantDatabaseCreationService.gatherDatabaseInformation(tenantConfiguration);
        defaultTenantDatabaseCreationService.createOlapUsersAndGrants(databaseInformationSet);

        verify(mockMultitenantDatabaseAdmin).createOlapDatabaseUser(olapRo.getUsername(), olapRo.getPassword());
        verify(mockMultitenantDatabaseAdmin).createOlapDatabaseUser(olapRw.getUsername(), olapRw.getPassword());
        verify(mockMultitenantDatabaseAdmin, times(2)).createOlapDatabaseUser(anyString(), anyString());

        verify(mockMultitenantDatabaseAdmin).grantAllOlapUserToSchema(olapRo.getSchemaSearchPath(), olapRo.getUsername());
        verify(mockMultitenantDatabaseAdmin).grantAllOlapUserToSchema(olapRo.getSchemaSearchPath(), olapRo.getUsername());
        verify(mockMultitenantDatabaseAdmin, times(2)).grantAllOlapUserToSchema(anyString(), anyString());
    }


    @Test
    public void preCheck() {
        reset(mockMultitenantDatabaseAdmin);
        Set<DefaultTenantDatabaseCreationService.DatabaseInformation> databaseInformationSet =
                defaultTenantDatabaseCreationService.gatherDatabaseInformation(tenantConfiguration);
        defaultTenantDatabaseCreationService.preCheck(databaseInformationSet);

        verify(mockMultitenantDatabaseAdmin).isOlapSchemaExists(olapRo.getSchemaSearchPath());
        verify(mockMultitenantDatabaseAdmin).isOlapDatabaseUserExists(olapRo.getUsername());
        verify(mockMultitenantDatabaseAdmin).isOlapDatabaseUserExists(olapRw.getUsername());
        verify(mockMultitenantDatabaseAdmin).isDatabaseExists(eq(reportingRo.getUrlParts().getDatabase()), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(2)).isDatabaseUserExists(eq(reportingRo.getUsername()), any(RdwDatabaseType.class));
        verify(mockMultitenantDatabaseAdmin, times(2)).isDatabaseUserExists(eq(reportingRw.getUsername()), any(RdwDatabaseType.class));
    }

    @Test
    public void dataSourceNameToRdwDatabaseType() {
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("olap_ro"))
                .isEqualTo(REPORTING_OLAP);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("olap_rw"))
                .isEqualTo(REPORTING_OLAP);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("reporting_ro"))
                .isEqualTo(REPORTING);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("reporting_rw"))
                .isEqualTo(REPORTING);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("warehouse_ro"))
                .isEqualTo(WAREHOUSE);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("warehouse_rw"))
                .isEqualTo(WAREHOUSE);
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("migrate_rw"))
                .isEqualTo(MIGRATE_OLAP);
    }

    @Test(expected = RuntimeException.class)
    public void dataSourceNameToRdwDatabaseTypeUnknown() {
        assertThat(defaultTenantDatabaseCreationService.dataSourceNameToRdwDatabaseType("foo"))
                .isEqualTo(REPORTING_OLAP);
    }

    @Test
    public void gatherDatabaseInformation() {
        Set<DefaultTenantDatabaseCreationService.DatabaseInformation> databaseInformationSet =
                defaultTenantDatabaseCreationService.gatherDatabaseInformation(tenantConfiguration);
        System.out.println(databaseInformationSet);
        assertThat(databaseInformationSet.size()).isEqualTo(7);
        databaseInformationSet.stream().filter(dis -> dis.getRdwDatabaseType().equals(REPORTING_OLAP)).forEach(dis -> {
            assertThat(dis.isOlap()).isTrue();
        });
        databaseInformationSet.stream().filter(dis -> !dis.getRdwDatabaseType().equals(REPORTING_OLAP)).forEach(dis -> {
            assertThat(dis.isOlap()).isFalse();
        });
    }
}