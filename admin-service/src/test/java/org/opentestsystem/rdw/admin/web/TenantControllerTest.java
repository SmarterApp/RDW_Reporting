package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.configuration.multitenant.TenantConfiguration;
import org.opentestsystem.rdw.admin.configuration.multitenant.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.configuration.multitenant.TenantOverride;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;
import java.util.NoSuchElementException;

import static org.mockito.ArgumentMatchers.any;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {TenantController.class}, secure = false)
public class TenantControllerTest {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void itShouldReturnAllTenants()  throws Exception  {
        List<TenantConfiguration> tenantConfigurationList = ImmutableList.of(TenantConfigurationStubs.createTenantWithMockDefaults(),
                TenantConfigurationStubs.createTenantWithMockDefaultsNV());
        when(service.getAll()).thenReturn(tenantConfigurationList);

        mvc.perform(
                get("/tenants/getall")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

        verify(service, times(1)).getAll();
    }

    @Test
    public void itShouldCreateTenant() throws Exception {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        tenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideNV());

        when(service.createTenant(tenantConfiguration.getTenantOverride())).thenReturn(tenantConfiguration);
        mvc.perform( post("/tenants/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration.getTenantOverride()))
        ).andExpect(status().isCreated());

        verify(service, times(1)).createTenant(any(TenantOverride.class));
    }

    //@Test //todo what needs to be returned
    public void itShouldFailToCreateTenantShouldThrowException() throws Exception {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        TenantOverride tenantOverride = TenantConfigurationStubs.getTenantOverrideNV();
        tenantOverride.getTenant().setId("AZ");
        tenantConfiguration.setTenantOverride(tenantOverride);
        when(service.createTenant(any(TenantOverride.class))).thenThrow(new NoSuchElementException());

        mvc.perform( post("/tenants/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration.getTenantOverride())))
                .andExpect(status().isBadRequest());

        verify(service, times(1)).createTenant(any(TenantOverride.class));
    }


    @Test
    public void itShouldDeleteTenant() throws Exception{
        // add tenantToDelete
        String id = TenantConfigurationStubs.createTenantWithMockDefaults().getTenant().getId();
        mvc.perform(delete("/tenants/delete")
                .param("tenantId", id)
        ).andExpect(status().isNoContent());

        verify(service, times(1)).deleteTenant(any(String.class));
    }


    @Test
    public void itShouldSaveTenantOverrideChanges() throws Exception {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        tenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideNV());

        when(service.updateTenant(tenantConfiguration.getTenantOverride())).thenReturn(tenantConfiguration);

        mvc.perform( put("/tenants/save")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(tenantConfiguration.getTenantOverride())))
                .andExpect(status().isOk());

        verify(service, times(1)).updateTenant(any(TenantOverride.class));

    }

}