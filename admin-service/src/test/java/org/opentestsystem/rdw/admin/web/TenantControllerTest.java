package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableList;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.configuration.multitenant.ServiceProperties;
import org.opentestsystem.rdw.admin.configuration.multitenant.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.TenantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.when;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {TenantController.class}, secure = false)
public class TenantControllerTest {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    private static final TenantConfiguration tenantConfiguration = TenantConfiguration.builder()
            .serviceProperties(createTestServiceProperties()).build();

    @Test
    public void getAllTenants()  throws Exception  {
        when(service.getAll()).thenReturn(ImmutableList.of(
                createTestTenantFromJson(tenantJson),
                createTestTenantFromJson(tenantJson1)));

        mvc.perform(
                get("/tenants/getall")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }

    @Test
    public void createTenant() throws Exception {

        when(service.createTenant(tenantConfiguration)).thenReturn(tenantConfiguration);

        mvc.perform( post("/tenants/create")
                .contentType(MediaType.APPLICATION_JSON).content(tenantJson1))
                .andExpect(status().isOk());
    }


   // @Test
    public void deleteTenant() throws Exception{
        //when(service.deleteTenant(tenantConfiguration.getTenantIdFromServiceProperties())).;

        mvc.perform( delete("/tenants/delete")
                .contentType(MediaType.APPLICATION_JSON).content(tenantConfiguration.getTenantIdFromServiceProperties()))
                .andExpect(status().isOk());
    }

    @Test
    public void saveTenant() throws Exception {
        when(service.updateTenant(tenantConfiguration)).thenReturn(tenantConfiguration);

        mvc.perform( put("/tenants/save")
                .contentType(MediaType.APPLICATION_JSON).content(tenantJson1))
                .andExpect(status().isOk());
    }

    private static ServiceProperties createTestServiceProperties() {
        return  getTestServiceProperties(tenantJson1);
    }
    private static TenantConfiguration createTestTenantFromJson(String tenantJson) {

        ServiceProperties serviceProperties = getTestServiceProperties(tenantJson);

        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        tenantConfiguration.setServiceProperties(serviceProperties);
        return tenantConfiguration;
    }

    private static ServiceProperties getTestServiceProperties(String testServices) {
        Gson gson = new GsonBuilder().create();
        return gson.fromJson(testServices, ServiceProperties.class);
    }

    private String tenantJson = "{ " +
            "  \"serviceProperties\": {" +
            "       \"tenant\":{" +
            "          \"id\":\"CA\"," +
            "          \"key\":\"CA\"," +
            "          \"displayName\":\"California\"," +
            "          \"description\":\"This is a California's Tenant.\"" +
            "       }" +
            "   }" +
            "}";

    private static String tenantJson1 = "{" +
            " \"serviceProperties\": {" +
            "     \"tenant\": {" +
            "        \"id\": \"NV\"," +
            "        \"key\": \"NV\"," +
            "        \"displayName\": \"Nevada\"," +
            "        \"description\": \"This is a Nevada's Tenant\"" +
            "      },"+
            "      \"rdw-reporting-webapp\": {" +
            "        \"datasource\": {" +
            "          \"url-server\": \"rdw-aurora-\"," +
            "          \"username\": \"sbac\"," +
            "          \"password\": \"****\"" +
            "        }" +
            "      }" +
            "   }" +
            "}";
}