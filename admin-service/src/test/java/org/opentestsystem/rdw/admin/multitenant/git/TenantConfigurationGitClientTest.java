package org.opentestsystem.rdw.admin.multitenant.git;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;

@Ignore //TODO: temporary
public class TenantConfigurationGitClientTest {

    private static final Logger logger = LoggerFactory.getLogger(TenantConfigurationGitClientTest.class);
    private TenantConfigurationGitClientProperties tenantConfigurationGitClientProperties;
    private TenantConfigurationGitClient tenantConfigurationGitClient;
    private File localRepositoryDirectory;

    @Before
    public void setup() {
        tenantConfigurationGitClientProperties = new TenantConfigurationGitClientProperties();
        tenantConfigurationGitClientProperties.setLocalRepositoryPath("/tmp/rdw_config");
        tenantConfigurationGitClientProperties.setRemoteRepositoryURI("https://github.com/ftdholbrook/rdw_config.git");
        //TODO: change username password
        tenantConfigurationGitClientProperties.setGitUsername("TODO: DRIVE FROM CONFIG");
        tenantConfigurationGitClientProperties.setGitPassword("TODO: DRIVE FROM CONFIG");
        tenantConfigurationGitClient = new TenantConfigurationGitClient(tenantConfigurationGitClientProperties);
        localRepositoryDirectory = new File(tenantConfigurationGitClientProperties.getLocalRepositoryPath());
    }

    @Test
    public void getWorkingShouldCreateDirectoryIfNoneExists() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationGitClient.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(tenantConfigurationGitClientProperties.getLocalRepositoryPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getWorkingShouldReturnDirectoryIfItExists() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationGitClient.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(tenantConfigurationGitClientProperties.getLocalRepositoryPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWorkWithMissingDirectory() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        tenantConfigurationGitClient.getLocalRepositoryToCleanState();
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWipeExistingDirectory() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        tenantConfigurationGitClient.getLocalRepositoryToCleanState();
        //try a clone second time, should not error
        tenantConfigurationGitClient.getLocalRepositoryToCleanState();
    }

    @Test
    public void testSaveFile() throws Exception {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setReportLanguages(Arrays.asList("en", "es"));
        reporting.setSchoolYear(2019);
        applicationTenantConfiguration.setReporting(reporting);
        logger.debug("localRepositoryDirectory {}", localRepositoryDirectory.getPath());
        tenantConfigurationGitClient.saveTenantConfiguration("CA", applicationTenantConfiguration);
    }

}
