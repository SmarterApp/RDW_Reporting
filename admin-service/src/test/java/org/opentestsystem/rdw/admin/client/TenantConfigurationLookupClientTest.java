package org.opentestsystem.rdw.admin.client;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.ResourceUtils;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

//this test only runs against a local docker instance
// set this property to run this test (or temporarily comment out this annotation)
// java -Dtenant-client.docker-it-enable=true
//@IfProfileValue(name = "tenant-client.docker-it-enable", value = "true")
@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles({"tenant_client_docker"})
@EnableConfigurationProperties
public class TenantConfigurationLookupClientTest {
    @Autowired
    TenantConfigurationLookupProperties tenantConfigurationLookupProperties;

    @Autowired
    TenantConfigurationLookupClient tenantConfigurationLookupClient;

    private static ObjectMapper mapper = new ObjectMapper();

    @Ignore
    @Test
    public void itShouldLoadConfig() {
        assertThat(tenantConfigurationLookupProperties)
                .isNotNull();
        assertThat(tenantConfigurationLookupProperties.getServices().size()).isEqualTo(3);
    }

    @Ignore
    @Test
    public void itShouldCallEndpoints() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        assertThat(responseEntities.size()).isEqualTo(3);
        //todo parse out get specific service expect an order?
        assertThat(responseEntities.get(0).getBody()).contains("scopedTarget.reportingSystemSettings");
        assertThat(responseEntities.get(0).getBody()).contains("scopedTarget.tenantProperties");

    }

    @Ignore
    @Test
    public void itShouldGetReporting() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<ReportingSystemSettings> reportingSystemSettings = tenantConfigurationLookupClient.getReportingSystemSetting(responseEntities);
        assertThat(reportingSystemSettings).isPresent();
        ReportingSystemSettings settings = reportingSystemSettings.get();
        //TODO: more tests
        assertThat(settings.getSchoolYear()).isEqualTo(2019);
    }

    @Ignore
    @Test
    public void itShouldGetDataSource() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> dataSourceSettings = tenantConfigurationLookupClient.getDataSources(responseEntities);
        assertThat(dataSourceSettings).isPresent();
        DataSourceElementsProperties settings = dataSourceSettings.get();
        //TODO: more tests
        assertThat(settings.getUsername()).isEqualTo("root");
    }

    @Ignore
    @Test
    public void itShouldGetWritableDataSource() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> dataSourceSettings = tenantConfigurationLookupClient.getWritableDataSources(responseEntities);
        assertThat(dataSourceSettings).isPresent();
        DataSourceElementsProperties settings = dataSourceSettings.get();
        //TODO: more tests
        assertThat(settings.getUsername()).isEqualTo("root");
    }

    @Ignore
    @Test
    public void itShouldGetWarehouseDataSource() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> dataSourceSettings = tenantConfigurationLookupClient.getWarehouseDataSources(responseEntities);
        assertThat(dataSourceSettings).isPresent();
        DataSourceElementsProperties settings = dataSourceSettings.get();
        //TODO: more tests
        assertThat(settings.getUsername()).isEqualTo("root");
    }

    @Ignore
    @Test
    public void itShouldFailGetOlapDataSource() {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<DataSourceElementsProperties> dataSourceSettings = tenantConfigurationLookupClient.getOlapDataSources(responseEntities);
        assertThat(dataSourceSettings.isPresent()).isFalse();
    }

    @Ignore
    @Test
    public void itShouldGetReportingAdminsReportingSystemSettings() {
        Map<String, ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurationsByService();
        Optional<ReportingSystemSettings> reportingSystemSettings = tenantConfigurationLookupClient.getAdminReportingSystemSetting(responseEntities);
        assertThat(reportingSystemSettings).isPresent();
        ReportingSystemSettings settings = reportingSystemSettings.get();
        //TODO: more tests
        assertThat(settings.getSchoolYear()).isEqualTo(2019);
    }

    @Ignore
    @Test
    public void itShouldGetReportingProcessorReportingSystemSettings() {
        Map<String, ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurationsByService();
        Optional<ReportingSystemSettings> reportingSystemSettings = tenantConfigurationLookupClient.getReportingProcessorReportingSystemSetting(responseEntities);
        assertThat(reportingSystemSettings).isPresent();
        ReportingSystemSettings settings = reportingSystemSettings.get();
        //TODO: more tests
        assertThat(settings.getSchoolYear()).isEqualTo(2019);
    }

    @Ignore
    @Test
    public void itShouldGetTenant() throws Exception {
        List<ResponseEntity<String>> responseEntities = tenantConfigurationLookupClient.getRawConfigurations();
        Optional<List<TenantProperties.Tenant>> tenantProperties = tenantConfigurationLookupClient.getTenantSetProperties(responseEntities);
        assertThat(tenantProperties).isPresent();

        List<TenantProperties.Tenant> tenants = tenantProperties.get();
        assertThat(tenants).isNotNull().isNotEmpty();
        assertThat(tenants.size()).isEqualTo(2);

        List<TenantProperties.Tenant> expectedTenants = getExpectedTenants();
        assertThat(tenants.size()).isEqualTo(expectedTenants.size());
    }

    private List<TenantProperties.Tenant> getExpectedTenants() throws Exception{
        File file = ResourceUtils.getFile("classpath:reportingAdminServiceTenantProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        JsonNode tenantPropertiesNode = rootNode.path("scopedTarget.tenantProperties").path("properties");
        Tenants tenantList = mapper.treeToValue(tenantPropertiesNode, Tenants.class);
        assertThat(tenantList).isNotNull();
        assertThat(tenantList.getTenants()).isNotEmpty().isNotEmpty();
        return tenantList.getTenants();
    }

    @Ignore
    @Configuration
    static class Config {

        @Bean
        @ConfigurationProperties("tenant-configuration-lookup-test") //using alternate root name
        TenantConfigurationLookupProperties tenantConfigurationLookupProperties() {
            return new TenantConfigurationLookupProperties();
        }

        @Bean
        TenantConfigurationLookupClient tenantConfigurationLookupClient() {
            return new TenantConfigurationLookupClient(tenantConfigurationLookupProperties());
        }

    }

}