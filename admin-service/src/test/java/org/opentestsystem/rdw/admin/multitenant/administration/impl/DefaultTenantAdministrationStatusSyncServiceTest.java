package org.opentestsystem.rdw.admin.multitenant.administration.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsService;
import org.opentestsystem.rdw.admin.multitenant.configserver.ConfigServerClient;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.time.Instant;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.withSettings;
import static org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus.ACTIVE;

public class DefaultTenantAdministrationStatusSyncServiceTest {

    private DefaultTenantAdministrationStatusSyncService defaultTenantAdministrationStatusSyncService;
    private static long minutesSinceUpdate = 0;

    private TenantAdministrationStatusService statusService;
    private ConfigpropsService configpropsService;
    private ConfigServerClient configServerClient;
    private Long createDelayMinutes;
    private Long updateDelayMinutes;
    private ImmutableMap<String, TenantAdministrationStatusContext> statusMap = ImmutableMap.of();
    private TenantProperties tenantProperties = new TenantProperties();

    @Before
    public void setUp() throws Exception {
        statusService = mock(TenantAdministrationStatusService.class, withSettings().verboseLogging());
        configpropsService = mock(ConfigpropsService.class, withSettings().verboseLogging());
        configServerClient = mock(ConfigServerClient.class, withSettings().verboseLogging());
        createDelayMinutes = 5L;
        updateDelayMinutes = 1L;

        defaultTenantAdministrationStatusSyncService = new DefaultTenantAdministrationStatusSyncServiceOverride(statusService,
                configpropsService,
                configServerClient,
                createDelayMinutes,
                updateDelayMinutes);
    }

    @Test
    public void syncNoOpAllActive() {
        final Tenant aa = generateTenant("AA", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(aa)
                                .build())
                .build();
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("AA", aa));

        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus("AA", ACTIVE, aa);

        //create
        verify(statusService, never()).updateStatus("AA", ACTIVE, aa, null, null);
        verify(configServerClient, never()).postMonitor();

        //update
        verify(statusService, never()).updateStatus("AA", ACTIVE, aa, null, null);

        //delete
        verify(statusService, never()).remove("AA");
    }

    @Test
    public void syncAddMissing() {
        final Tenant aa = generateTenant("AA", false);
        final Tenant bb = generateTenant("BB", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(aa)
                                .build())
                .build();
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("AA", aa, "BB", bb));
        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus("AA", ACTIVE, aa);
        verify(statusService).putStatus("BB", ACTIVE, bb);

        //create
        verify(statusService, never()).updateStatus(anyString(), any(), any(), any(Instant.class));
        verify(configServerClient, never()).postMonitor();

        //update
        verify(statusService, never()).updateStatus(anyString(), any(), any(), any(Instant.class));

        //delete
        verify(statusService, never()).remove(anyString());
    }

    @Test
    public void syncCreateTenantDelayShort() {
        final Tenant aa = generateTenant("AA", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.CREATE_PUBLISHING_CONFIGURATION_CHANGES)
                                .tenant(aa)
                                .updated(Instant.now())
                                .build())
                .build();
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("AA", aa));

        //4 minutes should be a no-op
        minutesSinceUpdate = 4L;

        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus(anyString(), any(), any());

        //create
        verify(statusService, never()).updateStatus(anyString(), any(), any(), any(Instant.class));
        verify(configServerClient, never()).postMonitor();

        //update
        verify(statusService, never()).updateStatus(anyString(), any(), any(), any(Instant.class));

        //delete
        verify(statusService, never()).remove(anyString());
    }

    @Test
    public void syncCreateTenantDelayLong() {
        final Tenant aa = generateTenant("AA", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.CREATE_PUBLISHING_CONFIGURATION_CHANGES)
                                .tenant(aa)
                                .updated(Instant.now())
                                .build())
                .build();
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("AA", aa));

        //6 minutes should fire
        minutesSinceUpdate = 6L;

        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus(anyString(), any(), any());

        //create
        verify(statusService).updateStatus(eq("AA"), eq(ACTIVE), eq(aa), any(Instant.class));
        verify(configServerClient).postMonitor();

        //delete
        verify(statusService, never()).remove(anyString());
    }

    @Test
    public void syncUpdateTenantDelayLong() {
        final Tenant aa = generateTenant("AA", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.UPDATE_PUBLISHING_CONFIGURATION_CHANGES)
                                .tenant(aa)
                                .updated(Instant.now())
                                .build())
                .build();
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("AA", aa));

        //2 minutes should fire
        minutesSinceUpdate = 2L;

        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus(anyString(), any(), any());

        //create
        verify(configServerClient, never()).postMonitor();

        //update
        verify(statusService).updateStatus(eq("AA"), eq(ACTIVE), eq(aa), any(Instant.class));

        //delete
        verify(statusService, never()).remove(anyString());
    }

    @Test
    public void syncDelete() {
        final Tenant aa = generateTenant("AA", false);
        statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.DELETE_PUBLISHING_CONFIGURATION_CHANGES)
                                .tenant(aa)
                                .updated(Instant.now())
                                .build())
                .build();
        tenantProperties = new TenantProperties();

        //2 minutes should fire
        minutesSinceUpdate = 2L;

        when(statusService.allTenantStatusAsMap()).thenReturn(statusMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(tenantProperties));

        defaultTenantAdministrationStatusSyncService.sync();

        //add missing
        verify(statusService, never()).putStatus(anyString(), any(), any());

        //create
        verify(configServerClient, never()).postMonitor();

        //update
        verify(statusService, never()).updateStatus(anyString(), any(), any(), any(Instant.class));

        //delete
        verify(statusService).remove("AA");
    }

    private static class DefaultTenantAdministrationStatusSyncServiceOverride extends DefaultTenantAdministrationStatusSyncService {
        public DefaultTenantAdministrationStatusSyncServiceOverride(TenantAdministrationStatusService statusService,
                                                                    ConfigpropsService configpropsService,
                                                                    ConfigServerClient configServerClient,
                                                                    Long createDelayMinutes,
                                                                    Long updateDelayMinutes) {
            super(statusService, configpropsService, configServerClient, createDelayMinutes, updateDelayMinutes);
        }

        @Override
        protected long getMinutesSinceUpdate(TenantAdministrationStatusContext statusContext) {
            return minutesSinceUpdate;
        }
    }

    private Tenant generateTenant(String key, boolean isSandbox) {
        return Tenant.builder()
                .id(key)
                .key(key)
                .sandbox(isSandbox)
                .build();
    }

}
