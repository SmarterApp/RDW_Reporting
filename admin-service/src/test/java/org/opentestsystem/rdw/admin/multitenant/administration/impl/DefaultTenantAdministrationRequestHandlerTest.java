package org.opentestsystem.rdw.admin.multitenant.administration.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.client.ConfigServerClient;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationProcessor;
import org.opentestsystem.rdw.admin.multitenant.administration.impl.DefaultTenantAdministrationRequestHandler;
import org.opentestsystem.rdw.admin.multitenant.administration.impl.GuavaCacheTenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseCreationService;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.security.UserTenant;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.GenericMessage;
import org.springframework.messaging.support.MessageBuilder;

import java.util.HashMap;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.withSettings;

public class DefaultTenantAdministrationRequestHandlerTest {

    private DefaultTenantAdministrationRequestHandler defaultTenantAdministrationRequestHandler;

    private MessageSecurityService messageSecurityService;
    private TenantAdministrationProcessor tenantAdministrationProcessor;
    private TenantDatabaseCreationService tenantDatabaseCreationService;
    private TenantConfigurationPersistenceService tenantConfigurationPersistenceService;
    private ConfigServerClient configServerClient;
    private MessageChannel mockTenantCreation;
    private MessageChannel mockTenantCreationResponse;
    private MessageChannel mockSandboxCreationRequest;
    private MessageChannel mockSandboxCreationResponse;

    @Before
    public void setUp() {
        messageSecurityService = mock(MessageSecurityService.class);
        mockTenantCreation = mock(MessageChannel.class, withSettings().verboseLogging());
        mockTenantCreationResponse = mock(MessageChannel.class, withSettings().verboseLogging());
        mockSandboxCreationRequest = mock(MessageChannel.class, withSettings().verboseLogging());
        mockSandboxCreationResponse = mock(MessageChannel.class, withSettings().verboseLogging());

        tenantAdministrationProcessor = new TenantAdministrationProcessor() {
            @Override
            public MessageChannel tenantCreationRequest() {
                return mockTenantCreation;
            }

            @Override
            public MessageChannel tenantCreationResponse() {
                return mockTenantCreationResponse;
            }

            @Override
            public MessageChannel sandboxCreationRequest() {
                return mockSandboxCreationRequest;
            }

            @Override
            public MessageChannel sandboxCreationResponse() {
                return mockSandboxCreationResponse;

            }
        };
        tenantDatabaseCreationService = mock(TenantDatabaseCreationService.class, withSettings().verboseLogging());
        tenantConfigurationPersistenceService = mock(TenantConfigurationPersistenceService.class, withSettings().verboseLogging());
        configServerClient = mock(ConfigServerClient.class, withSettings().verboseLogging());
        defaultTenantAdministrationRequestHandler = new DefaultTenantAdministrationRequestHandler(
                messageSecurityService,
                tenantAdministrationProcessor,
                tenantDatabaseCreationService,
                tenantConfigurationPersistenceService,
                configServerClient,
                new GuavaCacheTenantAdministrationStatusService(1000, 7)
        ) {
            @Override
            User getCurrentUser() {
                return User.builderExt()
                        .id("test")
                        .username("test")
                        .tenant(UserTenant.builder()
                                .sandbox(false)
                                .id("XX")
                                .build())
                        .build();
            }
        };
        Message<Object> message = MessageBuilder.createMessage(new TenantConfiguration(), new MessageHeaders(new HashMap<>()));
        when(messageSecurityService.withUser(any(), any())).thenReturn(message);
    }

    @Test
    public void createTenant() {
        defaultTenantAdministrationRequestHandler.createTenant(new TenantConfiguration());
        verify(mockTenantCreation).send(isA(GenericMessage.class));
    }

    @Test
    public void createTenantAsync() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        tenantConfiguration.setTenant(Tenant.builder().id("XX").key("XX").build());
        defaultTenantAdministrationRequestHandler.createTenantAsync(MessageBuilder.createMessage(tenantConfiguration,new MessageHeaders(new HashMap<>())));
        verify(tenantDatabaseCreationService).createTenantDatabases(any());
        verify(tenantConfigurationPersistenceService).saveTenantConfiguration(any());
        verify(configServerClient).postMonitor();
    }

    @Test
    public void createSandbox() {
        defaultTenantAdministrationRequestHandler.createSandbox(new TenantConfiguration());
        verify(mockSandboxCreationRequest).send(isA(GenericMessage.class));
    }

    @Test
    public void createSandboxAsync() {
        TenantConfiguration tenantConfiguration = new TenantConfiguration();
        tenantConfiguration.setTenant(Tenant.builder().id("XX").key("XX").build());
        defaultTenantAdministrationRequestHandler.createSandboxAsync(MessageBuilder.createMessage(tenantConfiguration,new MessageHeaders(new HashMap<>())));
        verify(tenantDatabaseCreationService).createSandboxDatabases(any());
        verify(tenantConfigurationPersistenceService).saveTenantConfiguration(any());
        verify(configServerClient).postMonitor();
    }

}
