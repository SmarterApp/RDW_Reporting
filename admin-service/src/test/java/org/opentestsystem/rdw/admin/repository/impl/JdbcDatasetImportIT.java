package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.schema.SchemaMigration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import javax.sql.DataSource;

import static org.opentestsystem.rdw.schema.SchemaMigration.Migration;

/**
 * This test will only run against Aurora, it requires access to S3 in AWS
 * <p>
 * This approach isn't very flexible but it allows CI to run this ...<br>
 * This test will run only if the system property test-archive.root is set to s3://rdw-ci-archive.
 * Additionally, AWS credentials must be specified:<ul>
 * <li>test-archive.cloud.aws.credentials.accessKey</li>
 * <li>test-archive.cloud.aws.credentials.secretKey</li>
 * </ul>
 * For example,<pre>
 * java -Darchive.uri-root=s3://rdw-ci-archive \
 *      -Darchive.s3-access-key=MyAccessKey \
 *      -Darchive.s3-secret-key=MySecretKey
 * </pre>
 */
//@RunWith(SpringRunner.class)
//@EnableConfigurationProperties
//@SpringBootTest(classes = {TestConfiguration.class})
//@ActiveProfiles(profiles = {"prefix"})
@RunWith(SpringRunner.class)
//@IfProfileValue(name = "archive.uri-root", value = "s3://rdw-ci-archive")
//todo check datasource also
@RepositoryIT
@ContextConfiguration(classes = {
        JdbcDatasetImport.class
})
@Sql(config = @SqlConfig(dataSource = "warehouseDatasource",
        transactionManager = "warehouseTxManager"),
        scripts = {"classpath:embargo-test-data.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcDatasetImportIT {

    @Autowired
    JdbcDatasetImport jdbcDatasetImport;

    @Autowired
    @Qualifier("warehouseDatasource")
    DataSource warehouseDataSource;

    SchemaMigration warehouseMigration;

    @Before
    public void setUp() {
        warehouseMigration = new SchemaMigration(warehouseDataSource, "sandbox_it_warehouse_test", Migration.Warehouse);
    }

    @Test
    public void testLoad() {
        //warehouseMigration.clean();
        jdbcDatasetImport.loadDataset("test-dataset");
    }

}
