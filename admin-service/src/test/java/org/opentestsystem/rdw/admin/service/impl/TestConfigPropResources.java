package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.util.ResourceUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Support class that creates a list of configProps strings (of json results)
 * from calls to configserver endpoints and service actuator endpoints
 * These results are on .json files, so as they change, the one corresponding file can be updated
 */
public class TestConfigPropResources {

    private static ObjectMapper mapper = new ObjectMapper();

    public static List<String> getResponses() throws Exception {
        List<String> responses = new ArrayList<>();
        responses.add(getConfigServerReportingAdminServiceProperties());
        responses.add(getConfigServerReportingServiceProperties());
        responses.add(getConfigServerReportingProcessorProperties());
        responses.add(getConfigServerAggregateServicerProperties());
        responses.add(getActuatorReportingAdminProperties());
        responses.add(getActuatorReportingServiceProperties());
        responses.add(getActuatorReportingProcessorProperties());
        responses.add(getActuatorReportingAggregateServiceProperties());
        return responses;
    }

    /**
     * @return the results configServerReportingAdminServiceProperties.json file.
     *         Contains results from a call to http://localhost:8888/rdw-reporting-admin-service/* (plus some extra data for testing)
     * @throws Exception From getFile or mapper
     */
    private static String getConfigServerReportingAdminServiceProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:configServerReportingAdminServiceProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results configServerReportingServiceProperties.json file.
     *         Contains results from a call to http://localhost:8888/rdw-reporting-aggregate-service/* (plus some extra data for testing)
     * @throws Exception From getFile or mapper
     */
    private static String getConfigServerReportingServiceProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:configServerReportingServiceProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results configServerReportingProcessorProperties.json file.
     *         Contains results from a call to http://localhost:8888/rdw-reporting-report-processor/* (plus some extra data for testing)
     * @throws Exception From getFile or mapper
     */
    private static String getConfigServerReportingProcessorProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:configServerReportingProcessorProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results configServerAggregateServiceProperties.json file.
     *         Contains results from a call to http://localhost:8888/rdw-reporting-service/* (plus some extra data for testing)
     * @throws Exception From getFile or mapper
     */
    private static String getConfigServerAggregateServicerProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:configServerAggregateServiceProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results actuatorReportingAdminProperties.json file.
     *         Contains results from a call to http://localhost:8208/configprops
     * @throws Exception From getFile or mapper
     */
    private static String getActuatorReportingAdminProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:actuatorReportingAdminProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results actuatorReportingServiceProperties.json file.
     *         Contains results from a call to http://localhost:8108/configprops
     * @throws Exception From getFile or mapper
     */
    private static String getActuatorReportingServiceProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:actuatorReportingServiceProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results actuatorReportingProcessorProperties.json file.
     *         Contains results from a call to http://localhost:8086/configprops
     * @throws Exception From getFile or mapper
     */
    private static String getActuatorReportingProcessorProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:actuatorReportingProcessorProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }

    /**
     * @return the results actuatorReportingAggregateProperties.json file.
     *         Contains results from a call to http://localhost:8308/configprops
     * @throws Exception From getFile or mapper
     */
    private static String getActuatorReportingAggregateServiceProperties() throws Exception {
        File file = ResourceUtils.getFile("classpath:actuatorReportingAggregateProperties.json");
        JsonNode rootNode = mapper.readTree(file);
        return rootNode.toString();
    }
}
