package org.opentestsystem.rdw.admin.service.impl;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.client.DefaultConfigServerClient;
import org.opentestsystem.rdw.admin.client.TenantConfigurationLookupClient;
import org.opentestsystem.rdw.admin.model.RdwServiceConfigProps;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

// TODO add the Redhift check
public class DefaultTenantConfigPropsServiceTest {

    DefaultTenantConfigPropsService service;
    private TenantConfigurationLookupClient tenantConfigurationLookupClient;
    private DefaultRdwServiceConfigPropsAccessor rdwServiceConfigPropsAccessor;
    private DefaultConfigServerClient defaultConfigServerClient;
    private ObjectMapper mapper = new ObjectMapper();

    @Before
    public void setUp() {
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);

        tenantConfigurationLookupClient = mock(TenantConfigurationLookupClient.class);
        rdwServiceConfigPropsAccessor = mock(DefaultRdwServiceConfigPropsAccessor.class);
        defaultConfigServerClient = mock(DefaultConfigServerClient.class);
        service = new DefaultTenantConfigPropsService(tenantConfigurationLookupClient, rdwServiceConfigPropsAccessor, defaultConfigServerClient, mapper);
    }

    @Test
    public void servicesPropertiesRefresh() throws Exception {
        when(tenantConfigurationLookupClient.getRawConfigurations()).thenReturn(getResponses());
        service.servicesPropertiesRefresh();
        verify(tenantConfigurationLookupClient).getRawConfigurations();
    }

    private RdwServiceConfigProps getRdwServiceConfigProps() throws Exception {
        RdwServiceConfigProps rdwServiceConfigProps = new RdwServiceConfigProps();
        rdwServiceConfigProps.setConfigProps(getResponses());
        return rdwServiceConfigProps;
    }

    @Test
    public void shouldSuccessfullyCallServiceRefresh() throws Exception {
        when(tenantConfigurationLookupClient.getRawConfigurations()).thenReturn(getResponses());
        service.servicesPropertiesRefresh();
        verify(tenantConfigurationLookupClient).getRawConfigurations();
    }

    @Test
    public void shouldSuccessfullyRetrieveDefaultApplicationTenantConfiguration() {
        final ReportingSystemPropertiesImpl reporting = TenantConfigurationStubs.getReporting();
        when(rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings()).thenReturn(Optional.of(reporting));
        when(rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties()).thenReturn(Optional.of(TenantConfigurationStubs.getAggregrateReportingProperties()));

        final ArchivePropertiesTenant archivePropertiesTenant = TenantConfigurationStubs.getArchivePropertiesTenant();
        when(rdwServiceConfigPropsAccessor.getDefaultArchivePropertiesTenant()).thenReturn(Optional.of(archivePropertiesTenant));
        when(rdwServiceConfigPropsAccessor.getDefaultReadOnlyDataSourceElements()).thenReturn(Optional.of(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName())));
        when(rdwServiceConfigPropsAccessor.getDefaultWritableDataSourceElements()).thenReturn(Optional.of(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName())));
        when(rdwServiceConfigPropsAccessor.getDefaultWarehouseDataSourceElements()).thenReturn(Optional.of(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get(RDWDataSourceNames.WAREHOUSE_RW.getName())));
        when(rdwServiceConfigPropsAccessor.getDefaultOlapDataSourceElements()).thenReturn(Optional.of(TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get(RDWDataSourceNames.OLAP_RO.getName())));

        final TenantConfiguration defaultApplicationTenantConfiguration = service.getDefaultApplicationTenantConfiguration();

        assertThat(defaultApplicationTenantConfiguration).isNotNull();
        assertThat(defaultApplicationTenantConfiguration.getReporting().getSchoolYear()).isEqualTo(reporting.getSchoolYear());
        assertThat(defaultApplicationTenantConfiguration.getAggregateReportingPropertiesTenant().getAssessmentTypes().size()).isEqualTo(TenantConfigurationStubs.getAggregrateReportingProperties().getAssessmentTypes().size());
        assertThat(defaultApplicationTenantConfiguration.getArchiveProperties().getUriRoot()).isEqualTo(archivePropertiesTenant.getUriRoot());
        assertThat(defaultApplicationTenantConfiguration.getDataSources().size()).isEqualTo(4);
        // passwords for the default settings are null
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).getPassword()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName()).getPassword()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.WAREHOUSE_RW.getName()).getPassword()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.OLAP_RO.getName()).getPassword()).isNull();

        // usernames for the default settings are null
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).getUsername()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName()).getUsername()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.WAREHOUSE_RW.getName()).getUsername()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.OLAP_RO.getName()).getUsername()).isNull();

        // schemaSearchPath for the default settings are null
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).getSchemaSearchPath()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName()).getSchemaSearchPath()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.WAREHOUSE_RW.getName()).getSchemaSearchPath()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.OLAP_RO.getName()).getSchemaSearchPath()).isNull();

        // databases for the default settings are null
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).getUrlParts().getDatabase()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName()).getUrlParts().getDatabase()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.WAREHOUSE_RW.getName()).getUrlParts().getDatabase()).isNull();
        assertThat(defaultApplicationTenantConfiguration.getDataSources().get(RDWDataSourceNames.OLAP_RO.getName()).getUrlParts().getDatabase()).isNull();

        verify(rdwServiceConfigPropsAccessor).getDefaultReportingSystemSettings();
        verify(rdwServiceConfigPropsAccessor).getDefaultAggregateReportingProperties();
        verify(rdwServiceConfigPropsAccessor).getDefaultArchivePropertiesTenant();
        verify(rdwServiceConfigPropsAccessor).getDefaultReadOnlyDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getDefaultWritableDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getDefaultWarehouseDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getDefaultOlapDataSourceElements();
    }

    @Test
    public void shouldSuccessfullyRetrieveDefaultApplicationSandboxConfiguration() {
        when(rdwServiceConfigPropsAccessor.getDefaultReportingSystemSettings()).thenReturn(Optional.of(TenantConfigurationStubs.getReporting()));
        when(rdwServiceConfigPropsAccessor.getDefaultAggregateReportingProperties()).thenReturn(Optional.of(TenantConfigurationStubs.getAggregrateReportingProperties()));

        final TenantConfiguration defaultApplicationSandboxConfiguration = service.getDefaultApplicationSandboxConfiguration("CA");

        assertThat(defaultApplicationSandboxConfiguration).isNotNull();
        assertThat(defaultApplicationSandboxConfiguration.getReporting().getSchoolYear()).isEqualTo(TenantConfigurationStubs.getReporting().getSchoolYear());
        assertThat(defaultApplicationSandboxConfiguration.getAggregateReportingPropertiesTenant().getAssessmentTypes().size()).isEqualTo(TenantConfigurationStubs.getAggregrateReportingProperties().getAssessmentTypes().size());

        verify(rdwServiceConfigPropsAccessor).getDefaultReportingSystemSettings();
        verify(rdwServiceConfigPropsAccessor).getDefaultAggregateReportingProperties();
    }

    @Test
    public void shouldSuccessfullyRetrieveTenantsApplicationTenantConfiguration() {
        when(rdwServiceConfigPropsAccessor.getTenantReportingSystemSettings()).thenReturn(TenantConfigurationStubs.getReportingSystemSettings());
        when(rdwServiceConfigPropsAccessor.getTenantsAggregateReportingProperties()).thenReturn(TenantConfigurationStubs.getAggregateReportingPropertiesRoot().get().getTenants());
        when(rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsReadOnlyDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsWritableDataSources());

        final String key = "CA";
        final String roPassword = "sb1234-09";
        final String encryptedRoPassword = "15da6cdc6e519f259bd2cfde75696912de56fe4e815fbca9d30abf446d930587";
        when(defaultConfigServerClient.encryptPassword(roPassword)).thenReturn(encryptedRoPassword);
        when(rdwServiceConfigPropsAccessor.getActualReportingROPassword(key)).thenReturn(Optional.of(roPassword));
        final String rwPassword = "ca1234-09";
        final String encryptedRwPassword = "6d824665265f5f62f17ea0d3863ca9a6b28d04ded6d9c629c59873a91f40fe8";
        when(defaultConfigServerClient.encryptPassword(rwPassword)).thenReturn(encryptedRwPassword);
        when(rdwServiceConfigPropsAccessor.getActualReportingRWPassword(key)).thenReturn(Optional.of(rwPassword));

        final TenantConfiguration tenantAppConfiguration = service.getTenantAppConfiguration(TenantConfigurationStubs.createMockTenantCA().getTenant().getKey());

        assertThat(tenantAppConfiguration).isNotNull();
        assertThat(tenantAppConfiguration.getReporting().getSchoolYear()).isEqualTo(TenantConfigurationStubs.getReporting().getSchoolYear());
        assertThat(tenantAppConfiguration.getAggregateReportingPropertiesTenant().getAssessmentTypes().size()).isEqualTo(TenantConfigurationStubs.getCAAggregateReportingProperties().getAssessmentTypes().size());
        assertThat(tenantAppConfiguration.getDataSources().size()).isEqualTo(2);
        assertThat(tenantAppConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).getPassword()).isEqualTo("{cipher}" + encryptedRoPassword);
        assertThat(tenantAppConfiguration.getDataSources().get(RDWDataSourceNames.REPORTING_RW.getName()).getPassword()).isEqualTo("{cipher}" + encryptedRwPassword);

        verify(defaultConfigServerClient).encryptPassword(roPassword);
        verify(defaultConfigServerClient).encryptPassword(rwPassword);
        verify(rdwServiceConfigPropsAccessor).getActualReportingROPassword(key);
        verify(rdwServiceConfigPropsAccessor).getActualReportingRWPassword(key);
        verify(rdwServiceConfigPropsAccessor).getTenantReportingSystemSettings();
        verify(rdwServiceConfigPropsAccessor).getTenantsAggregateReportingProperties();
        verify(rdwServiceConfigPropsAccessor).getTenantsWritableDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getTenantsReadOnlyDataSourceElements();
    }

    private List<String> getResponses() throws Exception {
        return TestConfigPropResources.getResponses();
    }

    @Test
    public void itShouldReturnTrueWhenEachDataSourceIsFound() {
        when(rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsReadOnlyDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsWritableDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsWritableDataSources());

        // verify it finds the database for each DataSource
        assertThat(service.dataSourceExists(RDWDataSourceNames.REPORTING_RO.getName(),
                TenantConfigurationStubs.getTenantsReadOnlyDataSources().get("CA").getUrlParts().getDatabase())).isTrue();
        assertThat(service.dataSourceExists(RDWDataSourceNames.REPORTING_RW.getName(),
                TenantConfigurationStubs.getTenantsWritableDataSources().get("CA").getUrlParts().getDatabase())).isTrue();
        assertThat(service.dataSourceExists(RDWDataSourceNames.WAREHOUSE_RW.getName(),
                TenantConfigurationStubs.getTenantsWritableDataSources().get("CA").getUrlParts().getDatabase())).isTrue();

        // olap isn't tested in dataSourceExists
        verify(rdwServiceConfigPropsAccessor).getTenantsReadOnlyDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getTenantsWritableDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getTenantsWarehouseDataSourceElements();
    }

    @Test
    public void itShouldFailToFindFindEachDataSource() {
        when(rdwServiceConfigPropsAccessor.getTenantsReadOnlyDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsReadOnlyDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsWritableDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsWritableDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsWarehouseDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsWritableDataSources());
        when(rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsOlapDataSources());

        // verify it finds the database for each DataSource
        assertThat(service.dataSourceExists(RDWDataSourceNames.REPORTING_RO.getName(), "BadDatabase")).isFalse();
        assertThat(service.dataSourceExists(RDWDataSourceNames.REPORTING_RW.getName(), "BadDatabase")).isFalse();
        assertThat(service.dataSourceExists(RDWDataSourceNames.WAREHOUSE_RW.getName(), "BadDatabase")).isFalse();
        // olap isn't checking dataSourceExists - checking it should just return false regardless
        assertThat(service.dataSourceExists(RDWDataSourceNames.OLAP_RO.getName(),
                TenantConfigurationStubs.getTenantsReadOnlyDataSources().get("CA").getUrlParts().getDatabase())).isFalse();
        assertThat(service.dataSourceExists(RDWDataSourceNames.OLAP_RO.getName(), "BadDatabase")).isFalse();

        verify(rdwServiceConfigPropsAccessor).getTenantsReadOnlyDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getTenantsWritableDataSourceElements();
        verify(rdwServiceConfigPropsAccessor).getTenantsWarehouseDataSourceElements();
        verify(rdwServiceConfigPropsAccessor, times(0)).getTenantsOlapDataSourceElements();

    }

    @Test
    public void itShouldReturnTrueWhenOlapUserNameExists() {
        when(rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsOlapDataSources());
        // It returns False if the DB is not the default db and the username is NOT unique
        assertThat(service.dataSourceOlapExists(
                TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get("olap_ro").getUrlParts().getDatabase(),
                TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get("olap_ro").getUsername())).isTrue();
        verify(rdwServiceConfigPropsAccessor, times(2)).getTenantsOlapDataSourceElements();

    }

    @Test
    public void itShouldReturnFalseWhenOlapDatabaseIsNotfound() {
        when(rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsOlapDataSources());
        // It returns False if the DB is not the default db and the username is NOT unique
        assertThat(service.dataSourceOlapExists("newOlapDb",
                TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get("olap_ro").getUsername())).isFalse();
        verify(rdwServiceConfigPropsAccessor, times(2)).getTenantsOlapDataSourceElements();
    }

    @Test
    public void itShouldReturnFalseWhenOlapUsernameIsTooLong() {
        when(rdwServiceConfigPropsAccessor.getTenantsOlapDataSourceElements()).thenReturn(TenantConfigurationStubs.getTenantsOlapDataSources());
        // It returns False if the DB is not the default db and the username is NOT unique
        assertThat(service.dataSourceOlapExists("newOlapDbVeryLongName",
                TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration().getDataSources().get("olap_ro").getUsername())).isFalse();
        verify(rdwServiceConfigPropsAccessor, times(2)).getTenantsOlapDataSourceElements();
    }

    @Test
    public void itShouldBeTrueWhenArchivePrefixIsFound() {
        when(rdwServiceConfigPropsAccessor.getTenantsArchiveProperties()).thenReturn(TenantConfigurationStubs.getTenantsArchiveProperties());
        final String expectedPrefix = TenantConfigurationStubs.getTenantsArchiveProperties().get("CA").getPathPrefix();
        assertThat(service.archivePrefixExists(expectedPrefix)).isTrue();
        verify(rdwServiceConfigPropsAccessor).getTenantsArchiveProperties();

        final String expectedNvPrefix = TenantConfigurationStubs.getTenantsArchiveProperties().get("NV").getPathPrefix();
        assertThat(service.archivePrefixExists(expectedNvPrefix)).isTrue();
        verify(rdwServiceConfigPropsAccessor, times(2)).getTenantsArchiveProperties();
    }

    @Test
    public void itShouldBeFalseWhenArchivePrefixIsNotFound() {
        when(rdwServiceConfigPropsAccessor.getTenantsArchiveProperties()).thenReturn(TenantConfigurationStubs.getTenantsArchiveProperties());
        assertThat(service.archivePrefixExists("NewPrefix")).isFalse();
        verify(rdwServiceConfigPropsAccessor).getTenantsArchiveProperties();
    }

}