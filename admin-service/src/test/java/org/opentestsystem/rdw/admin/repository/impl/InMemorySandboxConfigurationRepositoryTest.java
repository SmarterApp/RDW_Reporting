package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationStubs;

import static org.assertj.core.api.Assertions.assertThat;

public class InMemorySandboxConfigurationRepositoryTest {
    private InMemorySandboxConfigurationRepository inMemorySandboxRepository;

    @Before
    public void setup() {
        // creating a new repo so the map is empty at the start of the tests
        inMemorySandboxRepository = new InMemorySandboxConfigurationRepository();
    }

    @Test
    public void isShouldRetrieveSandboxesSuccessfully() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxCfg = inMemorySandboxRepository.create(sandboxConfigurationCa);
        assertThat(inMemorySandboxRepository.exists(sandboxCfg.getSandbox().getKey())).isTrue();
        verifySandboxes(sandboxCfg, sandboxConfigurationCa);

        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
        SandboxConfiguration sandboxMiCfg = inMemorySandboxRepository.create(sandboxConfigurationMi);
        assertThat(inMemorySandboxRepository.exists(sandboxMiCfg.getSandbox().getKey())).isTrue();
        verifySandboxes(sandboxMiCfg, sandboxConfigurationMi);
        assertThat(inMemorySandboxRepository.getAll()).isNotNull().isNotEmpty();
        assertThat(inMemorySandboxRepository.getAll().size()).isEqualTo(2);
        verifySandboxes(sandboxMiCfg, sandboxConfigurationMi);
    }

    @Test
    public void isShouldAddtoRepoSuccessfully() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxCfg = inMemorySandboxRepository.create(sandboxConfigurationCa);
        assertThat(inMemorySandboxRepository.exists(sandboxCfg.getSandbox().getKey())).isTrue();
        verifySandboxes(sandboxCfg, sandboxConfigurationCa);
    }

    @Test
    public void isShouldUpdateRepoSuccessfully() {
        // create tenant to update
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        inMemorySandboxRepository.create(sandboxConfigurationCa);
        assertThat(inMemorySandboxRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).isTrue();

        //updating the description
        sandboxConfigurationCa.getSandbox().setDescription("Updating to something Different");
        SandboxConfiguration updatedSandboxCfg = inMemorySandboxRepository.update(sandboxConfigurationCa);
        assertThat(updatedSandboxCfg.getSandbox().getDescription()).isEqualTo(sandboxConfigurationCa.getSandbox().getDescription());
    }

    @Test
    public void isShouldDeleteFromRepoSuccessfully() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxCfg = inMemorySandboxRepository.create(sandboxConfigurationCa);
        assertThat(inMemorySandboxRepository.exists(sandboxCfg.getSandbox().getKey())).isTrue();

        inMemorySandboxRepository.delete(sandboxConfigurationCa.getSandbox().getKey());
        assertThat(inMemorySandboxRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).isFalse();
    }

    @Test
    public void isShouldCallResetSuccessfully() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxCfg = inMemorySandboxRepository.create(sandboxConfigurationCa);
        assertThat(inMemorySandboxRepository.exists(sandboxCfg.getSandbox().getKey())).isTrue();

        inMemorySandboxRepository.reset(sandboxConfigurationCa.getSandbox().getKey());
        assertThat(inMemorySandboxRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).isTrue();
    }

    private void verifySandboxes(final SandboxConfiguration sandboxConfiguration, final SandboxConfiguration expectedSandboxConfiguration) {
        assertThat(sandboxConfiguration.getSandbox().getKey()).isEqualTo(expectedSandboxConfiguration.getSandbox().getKey());
        assertThat(sandboxConfiguration.getSandbox().getId()).isEqualTo(expectedSandboxConfiguration.getSandbox().getId());
        assertThat(sandboxConfiguration.getSandbox().getDataSetId()).isEqualTo(expectedSandboxConfiguration.getSandbox().getDataSetId());
        assertThat(sandboxConfiguration.getSandbox().getTenantKey()).isEqualTo(expectedSandboxConfiguration.getSandbox().getTenantKey());
        assertThat(sandboxConfiguration.getSandbox().getDescription()).isEqualTo(expectedSandboxConfiguration.getSandbox().getDescription());
        assertThat(sandboxConfiguration.getSandbox().getName()).isEqualTo(expectedSandboxConfiguration.getSandbox().getName());
    }

}
