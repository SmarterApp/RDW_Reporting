package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.opentestsystem.rdw.admin.model.AssessmentQuery;
import org.opentestsystem.rdw.admin.service.AssessmentService;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.Subject;
import org.opentestsystem.rdw.reporting.common.model.Assessment;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.security.AdminPermission.InstructionalResourceWrite;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.permissions;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.statewide;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(AssessmentController.class)
public class AssessmentControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private AssessmentService service;

    @Captor
    private ArgumentCaptor<AssessmentQuery> queryCaptor;

    private final User user = User.builder()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .permissionsById(permissions(new Permission(InstructionalResourceWrite, statewide())))
            .build();

    @Test
    public void itShouldGetAssessments() throws Exception {
        final Assessment assessmentA = assessment(1, "Assessment A");
        final Assessment assessmentB = assessment(2, "Assessment B");
        when(service.findAssessments(queryCaptor.capture()))
                .thenReturn(ImmutableList.of(assessmentA, assessmentB));

        mvc.perform(get("/assessments?limit=21&label=label")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.*", hasSize(2)))
                .andExpect(jsonPath("$[0].name").value("Assessment A Name"))
                .andExpect(jsonPath("$[0].label").value("Assessment A Label"))
                .andExpect(jsonPath("$[0].gradeCode").value("g1"))
                .andExpect(jsonPath("$[0].schoolYear").value(2017))
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[0].typeCode").value("iab"))
                .andExpect(jsonPath("$[0].subjectCode").value("Math"))
                .andExpect(jsonPath("$[0].claimCodes.*", hasSize(3)))
                .andExpect(jsonPath("$[1].id").value(2));

        assertThat(queryCaptor.getValue().getLimit()).isEqualTo(21);
        assertThat(queryCaptor.getValue().getLabel()).isEqualTo("label");
    }

    private Assessment assessment(final int id, final String name) {
        return Assessment.builder()
                .id(id)
                .name(name + " Name")
                .label(name + " Label")
                .claimCodes(of("code 1", "code 2", "code 3"))
                .gradeCode("g1")
                .schoolYear(2017)
                .subject(Subject.MATH)
                .type(AssessmentType.IAB)
                .build();
    }

}