package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.admin.model.Embargo;
import org.opentestsystem.rdw.admin.model.EmbargoQuery;
import org.opentestsystem.rdw.admin.model.EmbargoReportType;
import org.opentestsystem.rdw.admin.model.EmbargoUpdate;
import org.opentestsystem.rdw.admin.service.EmbargoService;
import org.opentestsystem.rdw.reporting.common.model.EmbargoStatus;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.opentestsystem.rdw.reporting.common.web.ExceptionHandlerControllerAdvice;
import org.opentestsystem.rdw.security.Permission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.security.AdminPermission.EmbargoWrite;
import static org.opentestsystem.rdw.reporting.common.test.support.PermissionScopes.districts;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.opentestsystem.rdw.admin.model.EmbargoStatus.Loading;
import static org.opentestsystem.rdw.admin.model.EmbargoStatus.Reviewing;

@RunWith(SpringRunner.class)
@WebMvcTest(EmbargoController.class)
@Import(ExceptionHandlerControllerAdvice.class)
public class EmbargoControllerIT {
    // TODO: add tests for test data results (new embargo implementation.

    @Autowired
    private MockMvc mvc;

    @MockBean
    private EmbargoService service;

    private final User user = User.builderExt()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .permissionsById(ImmutableMap.of(EmbargoWrite, new Permission(EmbargoWrite, districts(123L))))
            .build();

    @Test
    public void itShouldGetEmbargoesForUser() throws Exception {
        when(service.findEmbargoes(any(EmbargoQuery.class), eq(user))).thenReturn(ImmutableList.of(
                Embargo.builder()
                        .districtId(1L)
                        .districtName("district1")
                        .schoolYear(1999)
                        .subjectId(1L)
                        .subjectCode("ELA")
                        .reportType(EmbargoReportType.Individual)
                        .individualStatus(EmbargoStatus.Reviewing)
                        .examCount(100)
                        .build(),
                Embargo.builder()
                        .districtId(2L)
                        .districtName("district2")
                        .schoolYear(1999)
                        .subjectId(1L)
                        .subjectCode("ELA")
                        .reportType(EmbargoReportType.Individual)
                        .individualStatus(EmbargoStatus.Released)
                        .examCount(200)
                        .build()
        ));

        mvc.perform(post("/embargoes")
                .with(user(user))
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}".getBytes()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].districtName").value("district1"))
                .andExpect(jsonPath("$[0].subjectCode").value("ELA"))
                .andExpect(jsonPath("$[0].schoolYear").value(1999))
                .andExpect(jsonPath("$[0].status").value("Reviewing"))
                .andExpect(jsonPath("$[1].districtName").value("district2"))
                .andExpect(jsonPath("$[1].subjectCode").value("ELA"))
                .andExpect(jsonPath("$[1].schoolYear").value(1999))
                .andExpect(jsonPath("$[1].status").value("Released"));
    }



    @Test
    public void itShouldSaveStatusUpdates() throws Exception {
        mvc.perform(put("/embargoes")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"schoolYear\": 1999, \"status\": \"Loading\", \"newStatus\": \"Reviewing\"}")
                .with(user(user)))
                .andExpect(status().isOk());

        final ArgumentCaptor<EmbargoUpdate> embargoCaptor = ArgumentCaptor.forClass(EmbargoUpdate.class);
        verify(service).saveStatusChanges(eq(user), embargoCaptor.capture());
        final EmbargoUpdate update = embargoCaptor.getValue();
        assertThat(update.getSchoolYear()).isEqualTo(1999);
        assertThat(update.getStatus().name()).isEqualTo(Loading.name());
        assertThat(update.getNewStatus().name()).isEqualTo(Reviewing.name());
    }

    @Test
    public void putRequiresPermissions() throws Exception {
        doThrow(NoSuchElementException.class).when(service).saveStatusChanges(eq(user), any(EmbargoUpdate.class));

        mvc.perform(put("/embargoes")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"schoolYear\": 1999, \"status\": \"Loading\", \"newStatus\": \"Reviewing\"}")
                .with(user(user)))
                .andExpect(status().isNotFound());
    }


    @Test
    public void putRequiresValidRequest() throws Exception {
        mvc.perform(put("/embargoes")
                .contentType(MediaType.APPLICATION_JSON)
                .content("bogus request")
                .with(user(user)))
                .andExpect(status().isBadRequest());
    }
}
