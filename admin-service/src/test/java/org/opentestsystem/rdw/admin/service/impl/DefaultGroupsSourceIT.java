package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.base.Charsets;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.messaging.GroupMessage;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@SpringBootTest
public class DefaultGroupsSourceIT {

    @Autowired
    private Source source;

    @Autowired
    private MessageCollector messageCollector;

    private DefaultGroupsSource groupsSource;


    @Before
    public void createGroupSource() {
        groupsSource = new DefaultGroupsSource(source);
    }

    @Test
    public void uploadGroupsShouldSetHeadersAndSendMessage() {

        Long uploadId = 1L;
        final GroupMessage body = new GroupMessage.Builder()
                .digest("abcdef123456789")
                .uploadId(uploadId)
                .build();
        groupsSource.send(body.toJson().getBytes(Charsets.UTF_8),
                MediaType.APPLICATION_JSON.toString(),
                uploadId
        );

        final Message actual = messageCollector.forChannel(source.output()).poll();
        assertThat(actual).isNotNull();
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(actual);
        assertThat(actual.getPayload()).isEqualTo(body.toJson().getBytes(Charsets.UTF_8));
        assertThat(accessor.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
        assertThat(accessor.getImportId()).isEqualTo(uploadId);

    }
}