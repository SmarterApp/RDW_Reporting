package org.opentestsystem.rdw.admin.multitenant.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.junit.Before;
import org.junit.Test;
import org.springframework.util.ResourceUtils;

import org.opentestsystem.rdw.admin.multitenant.configserver.ConfigServerClient;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsService;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;

import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTenantConfigurationViewServiceTest {

    //dependencies
    private ObjectMapper mapper;
    private ConfigpropsService configpropsService;
    private TenantAdministrationStatusService tenantAdministrationStatusService;

    //class under test
    private DefaultTenantConfigurationViewService defaultTenantConfigurationViewService;

    //stubs
    private Map<String, Tenant> activeTenantMap;
    private TenantProperties activeTenantProperties;
    private ConfigServerClient configServerClient;
    private String tenantCA_en_json;

    @Before
    public void setUp() throws Exception {
        tenantCA_en_json = FileUtils
                .readFileToString(ResourceUtils.getFile("classpath:en-ca.json"), StandardCharsets.UTF_8);

        mapper = new ObjectMapper();
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        mapper.registerModule(javaTimeModule);
        configpropsService = mock(ConfigpropsService.class);
        configServerClient = mock(ConfigServerClient.class);
        tenantAdministrationStatusService = mock(TenantAdministrationStatusService.class);
        defaultTenantConfigurationViewService = new DefaultTenantConfigurationViewService(mapper,
                configpropsService,
                tenantAdministrationStatusService,
                configServerClient);

        activeTenantMap = ImmutableMap
                .of("AA_S001", Tenant.builder()
                                .id("AA_S001")
                                .key("AA_S001")
                                .sandbox(true)
                                .build(),
                        "AA", Tenant.builder()
                                .id("AA")
                                .key("AA")
                                .sandbox(false)
                                .build(),
                        "BB_S001", Tenant.builder()
                                .id("BB_S001")
                                .key("BB_S001")
                                .sandbox(true)
                                .build(),
                        "BB", Tenant.builder()
                                .id("BB")
                                .key("BB")
                                .sandbox(false)
                                .build()
                );
        activeTenantProperties = new TenantProperties();
        activeTenantProperties.setTenants(activeTenantMap);
        when(configpropsService.tenantProperties()).thenReturn(Optional.of(activeTenantProperties));


        when(configpropsService.aggregateReportingProperties(any()))
                .thenReturn(Optional.of(mock(AggregateReportingPropertiesTenant.class)));
        when(configpropsService.archiveProperties(any()))
                .thenReturn(Optional.of(mock(ArchivePropertiesTenant.class)));
        when(configpropsService.dataSourceElements(any()))
                .thenReturn((Map<String, DataSourceElementsTenant>) mock(Map.class));
        when(configpropsService.reportingSystemProperties(any()))
                .thenReturn(Optional.of(mock(ReportingSystemPropertiesImpl.class)));

        when(configpropsService.defaultAggregateReportingProperties())
                .thenReturn(Optional.of(new AggregateReportingPropertiesRoot()));
        when(configpropsService.defaultArchiveProperties())
                .thenReturn(Optional.of(new ArchivePropertiesRoot()));
        when(configpropsService.defaultDataSourceElements())
                .thenReturn(Maps.newHashMap());
        when(configpropsService.defaultReportingSystemProperties())
                .thenReturn(Optional.of(new ReportingSystemSettings()));

        when(configServerClient.getLocalization(any(), any()))
                .thenReturn(Optional.of(tenantCA_en_json));

        //AA exists in both
        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(
                ImmutableMap.of(
                        "CC",
                        ImmutablePair.of(
                                TenantAdministrationStatus.CREATING_DATABASES,
                                generateTenantConfiguration("CC", false)),
                        "CC_S001",
                        ImmutablePair.of(
                                TenantAdministrationStatus.CREATING_DATABASES,
                                generateTenantConfiguration("CC_S001", true)),
                        "AA",
                        ImmutablePair.of(
                                TenantAdministrationStatus.PERSISTING_CONFIGURATION,
                                generateTenantConfiguration("AA", false)),
                        "DD",
                        ImmutablePair.of(
                                TenantAdministrationStatus.PERSISTING_CONFIGURATION,
                                generateTenantConfiguration("DD", false))
                )
        );

    }


    @Test
    public void defaultTenantConfigurationShouldReturnDefaultTenant() {
        TenantConfiguration tenantConfiguration = defaultTenantConfigurationViewService.defaultTenantConfiguration();
        assertThat(tenantConfiguration.getDataSources()).isNotNull();
        assertThat(tenantConfiguration.getTenant()).isNull();
    }

    @Test
    public void initialSandboxConfigurationShouldReturnInitialSandbox() {
        TenantConfiguration tenantConfiguration =
                defaultTenantConfigurationViewService.initialSandboxTenantConfiguration("AA");
        assertThat(tenantConfiguration.getParentTenantKey()).isEqualTo("AA");
    }

    @Test
    public void allTenantConfigurationsShouldReturnAll() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantConfigurationViewService.allTenantConfigurations(TenantType.TENANT);
        assertThat(tenantConfigurationMap.size()).isEqualTo(4);
        assertThat(tenantConfigurationMap).containsKey("AA");
        assertThat(tenantConfigurationMap).containsKey("BB");
        assertThat(tenantConfigurationMap).containsKey("CC");
        assertThat(tenantConfigurationMap).containsKey("DD");

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantConfigurationViewService.allTenantConfigurations(TenantType.SANDBOX);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(3);
        assertThat(sandboxConfigurationMap).containsKey("AA_S001");
        assertThat(sandboxConfigurationMap).containsKey("BB_S001");
        assertThat(sandboxConfigurationMap).containsKey("CC_S001");
    }

    @Test
    public void inProcessTenantConfigurationsByTypeShouldReturnInProcess() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantConfigurationViewService.inProcessTenantConfigurationsByType(TenantType.TENANT);

        assertThat(tenantConfigurationMap.size()).isEqualTo(2);
        assertThat(tenantConfigurationMap).containsKey("CC");
        assertThat(tenantConfigurationMap).containsKey("DD");

        //AA is duplicated, verify removed
        verify(tenantAdministrationStatusService).remove("AA");

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantConfigurationViewService.inProcessTenantConfigurationsByType(TenantType.SANDBOX);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(1);
        assertThat(sandboxConfigurationMap).containsKey("CC_S001");
    }

    @Test
    public void activeTenantConfigurationsByTypeShouldReturnActiveConfigurationsByType() {
        Map<String, TenantConfiguration> activeTenantConfigurations =
                defaultTenantConfigurationViewService.activeTenantConfigurationsByType(TenantType.TENANT);
        assertThat(activeTenantConfigurations).containsKey("AA");
        assertThat(activeTenantConfigurations).doesNotContainKey("AA_S001");

        Map<String, TenantConfiguration> activeSandboxTenantConfigurations =
                defaultTenantConfigurationViewService.activeTenantConfigurationsByType(TenantType.SANDBOX);
        assertThat(activeSandboxTenantConfigurations).containsKey("AA_S001");
        assertThat(activeSandboxTenantConfigurations).doesNotContainKey("AA");
    }

    @Test(expected = java.lang.IllegalArgumentException.class)
    public void activeTenantConfigurationFailure() {
        TenantConfiguration xx = defaultTenantConfigurationViewService.activeTenantConfiguration("XX");
    }

    @Test
    public void activeTenantConfigurationShouldReturnActiveTenantConfiguration() {
        TenantConfiguration aa = defaultTenantConfigurationViewService.activeTenantConfiguration("AA");
        assertThat(aa).isNotNull();
        assertThat(aa.getTenant().getKey()).isEqualTo("AA");
        assertThat((aa.getLocalization())).isNotNull().isEqualTo(tenantCA_en_json);
    }

    @Test
    public void activeTenantsByTypeShouldReturnProperActiveTenants() {
        Map<String, Tenant> activeTenants = defaultTenantConfigurationViewService.activeTenantsByType(TenantType.TENANT);
        assertThat(activeTenants).containsKey("AA");
        assertThat(activeTenants).doesNotContainKey("AA_S001");

        Map<String, Tenant> sandboxTenants = defaultTenantConfigurationViewService.activeTenantsByType(TenantType.SANDBOX);
        assertThat(sandboxTenants).containsKey("AA_S001");
        assertThat(sandboxTenants).doesNotContainKey("AA");
    }

    @Test
    public void activeTenantsShouldReturnAllActiveTenants() {
        Map<String, Tenant> active = defaultTenantConfigurationViewService.activeTenants();
        assertThat(active).containsKey("AA");
        assertThat(active).containsKey("AA_S001");
    }

    @Test
    public void parentTenantKeyShouldParseParent() {
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("AA_S001"))
                .isEqualTo("AA");
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("BB_S999"))
                .isEqualTo("BB");
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("CC"))
                .isNull();
    }

    private TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        TenantConfiguration configuration = new TenantConfiguration();
        if (activeTenantMap.containsKey(key)) {
            configuration.setTenant(activeTenantMap.get(key));
        } else {
            configuration.setTenant(Tenant.builder()
                    .id(key)
                    .key(key)
                    .sandbox(isSandbox)
                    .build());
        }
        return configuration;
    }


}