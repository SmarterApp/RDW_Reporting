package org.opentestsystem.rdw.admin.multitenant.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.multitenant.configprops.ConfigpropsService;
import org.opentestsystem.rdw.admin.multitenant.configserver.ConfigServerClient;
import org.opentestsystem.rdw.admin.multitenant.model.ApplicationTenantConfigurationPersistence;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.archive.ArchivePropertiesRoot;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesRoot;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;
import org.springframework.util.ResourceUtils;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.withSettings;

public class DefaultTenantConfigurationViewServiceTest {

    //dependencies
    private ObjectMapper mapper;
    private ConfigpropsService configpropsService;
    private TenantAdministrationStatusService tenantAdministrationStatusService;
    private ConfigServerClient configServerClient;

    //class under test
    private DefaultTenantConfigurationViewService defaultTenantConfigurationViewService;

    //stubs
    private String tenantCA_en_json;

    @Before
    public void setUp() throws Exception {
        tenantCA_en_json = FileUtils
                .readFileToString(ResourceUtils.getFile("classpath:en-ca.json"), StandardCharsets.UTF_8);

        mapper = new ObjectMapper();
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        mapper.registerModule(javaTimeModule);
        configpropsService = mock(ConfigpropsService.class);
        configServerClient = mock(ConfigServerClient.class, withSettings().verboseLogging());
        tenantAdministrationStatusService = mock(TenantAdministrationStatusService.class);
        defaultTenantConfigurationViewService = new DefaultTenantConfigurationViewService(mapper,
                configpropsService,
                tenantAdministrationStatusService,
                configServerClient);

        when(configpropsService.aggregateReportingProperties(any()))
                .thenReturn(Optional.of(mock(AggregateReportingPropertiesTenant.class)));
        when(configpropsService.archiveProperties(any()))
                .thenReturn(Optional.of(mock(ArchivePropertiesTenant.class)));
        when(configpropsService.dataSourceElements(any()))
                .thenReturn((Map<String, DataSourceElementsTenant>) mock(Map.class));
        when(configpropsService.reportingSystemProperties(any()))
                .thenReturn(Optional.of(mock(ReportingSystemPropertiesImpl.class)));

        when(configpropsService.defaultAggregateReportingProperties())
                .thenReturn(Optional.of(new AggregateReportingPropertiesRoot()));
        when(configpropsService.defaultArchiveProperties())
                .thenReturn(Optional.of(new ArchivePropertiesRoot()));
        when(configpropsService.defaultDataSourceElements())
                .thenReturn(Maps.newHashMap());
        when(configpropsService.defaultReportingSystemProperties())
                .thenReturn(Optional.of(new ReportingSystemSettings()));

        when(configServerClient.getLocalization(any(), any()))
                .thenReturn(Optional.of(tenantCA_en_json));
        when(configServerClient.findApplicationTenantConfigurationPersistence("AA")).thenReturn(
                Optional.of(new ApplicationTenantConfigurationPersistence(generateTenantConfiguration("AA", false)))
        );
        when(configServerClient.findApplicationTenantConfigurationPersistence("BB")).thenReturn(
                Optional.of(new ApplicationTenantConfigurationPersistence(generateTenantConfiguration("BB", false)))
        );
        when(configServerClient.findApplicationTenantConfigurationPersistence("AA_S001")).thenReturn(
                Optional.of(new ApplicationTenantConfigurationPersistence(generateTenantConfiguration("AA_S001", true)))
        );
        when(configServerClient.findApplicationTenantConfigurationPersistence("BB_S001")).thenReturn(
                Optional.of(new ApplicationTenantConfigurationPersistence(generateTenantConfiguration("BB_S001", true)))
        );


        final ImmutableMap<String, TenantAdministrationStatusContext> statusMap = new ImmutableMap.Builder<String, TenantAdministrationStatusContext>()
                .put("AA",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("AA", false))
                                .build())
                .put("BB",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("AA", false))
                                .build())
                .put("CC",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("AA", false))
                                .build())
                .put("DD",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.CREATE_PERSISTING_CONFIGURATION)
                                .tenant(generateTenant("AA", false))
                                .build())
                .put("AA_S001",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("AA_S001", true))
                                .build())
                .put("BB_S001",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("BB_S001", true))
                                .build())
                .put("CC_S001",
                        TenantAdministrationStatusContext.builder()
                                .tenantAdministrationStatus(TenantAdministrationStatus.ACTIVE)
                                .tenant(generateTenant("CC_S001", true))
                                .build())
                .build();

        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(statusMap);
    }


    @Test
    public void defaultTenantConfigurationShouldReturnDefaultTenant() {
        TenantConfiguration tenantConfiguration = defaultTenantConfigurationViewService.defaultTenantConfiguration();
        assertThat(tenantConfiguration.getDataSources()).isNotNull();
        assertThat(tenantConfiguration.getTenant()).isNull();
    }

    @Test
    public void allTenantConfigurationsShouldReturnAll() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantConfigurationViewService.allTenantConfigurations(TenantType.TENANT);
        assertThat(tenantConfigurationMap.size()).isEqualTo(4);
        assertThat(tenantConfigurationMap).containsKey("AA");
        assertThat(tenantConfigurationMap).containsKey("BB");
        assertThat(tenantConfigurationMap).containsKey("CC");
        assertThat(tenantConfigurationMap).containsKey("DD");

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantConfigurationViewService.allTenantConfigurations(TenantType.SANDBOX);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(3);
        assertThat(sandboxConfigurationMap).containsKey("AA_S001");
        assertThat(sandboxConfigurationMap).containsKey("BB_S001");
        assertThat(sandboxConfigurationMap).containsKey("CC_S001");
    }

    @Test
    public void parentTenantKeyShouldParseParent() {
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("AA_S001"))
                .isEqualTo("AA");
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("BB_S999"))
                .isEqualTo("BB");
        assertThat(defaultTenantConfigurationViewService.parentTenantKey("CC"))
                .isNull();
    }

    private Tenant generateTenant(String key, boolean isSandbox) {
        return Tenant.builder()
                .id(key)
                .key(key)
                .sandbox(isSandbox)
                .build();
    }

    private TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        TenantConfiguration.Builder configurationBuilder = TenantConfiguration.builder();
        configurationBuilder.aggregateReportingProperties(new AggregateReportingPropertiesRoot());
        configurationBuilder.reporting(new ReportingSystemPropertiesImpl());
        configurationBuilder.archiveProperties(new ArchivePropertiesTenant());
        configurationBuilder.dataSources(new HashMap<>());
        configurationBuilder.tenant(generateTenant(key, isSandbox));
        return configurationBuilder.build();
    }
}