package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfigurations;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationStubs;
import org.opentestsystem.rdw.admin.service.SandboxService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Set;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {SandboxController.class}, secure = false)
public class SandboxControllerTest {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private SandboxService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void itShouldReturnAllSandboxInformation() throws Exception{
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
        Set<SandboxConfiguration> sandboxConfigurations = ImmutableSet.of(sandboxConfigurationCa, sandboxConfigurationMi);
        ApplicationSandboxConfigurations applicationSandboxConfigurations = new ApplicationSandboxConfigurations();
        applicationSandboxConfigurations.setSandboxes(sandboxConfigurations);
        applicationSandboxConfigurations.setSandboxConfigurationPackage(SandboxConfigurationStubs.getApplicationSandboxConfigurationDefault());

        when(service.getAll()).thenReturn(applicationSandboxConfigurations);

        mvc.perform( get("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.sandboxConfigurationPackage.tenant.id")
                    .value(applicationSandboxConfigurations.getSandboxConfigurationPackage().getTenant().getId()))
                .andExpect(jsonPath("$.sandboxConfigurationPackage.applicationSandboxConfiguration.reporting.schoolYear")
                    .value(applicationSandboxConfigurations.getSandboxConfigurationPackage().getApplicationSandboxConfiguration().getReporting().getSchoolYear()));

        verify(service).getAll();
    }

    @Test
    public void isShouldCreateSandbox() throws Exception {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        when(service.create(any(SandboxConfiguration.class))).thenReturn(sandboxConfigurationCa);
        mvc.perform( post("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(sandboxConfigurationCa))
        ).andExpect(status().isCreated())
         .andExpect(jsonPath("$.sandbox.id").value(sandboxConfigurationCa.getSandbox().getId()))
 //        .andExpect(jsonPath("$.localization").value(sandboxConfigurationCa.getLocalization()))
         .andExpect(jsonPath("$.applicationSandboxConfiguration.reporting.schoolYear")
                 .value(sandboxConfigurationCa.getApplicationSandboxConfiguration().getReporting().getSchoolYear()));

        verify(service).create(any(SandboxConfiguration.class));
    }

    @Test
    public void itShouldResetDataSet() throws Exception {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();

        mvc.perform(
                put(String.format("/sandboxes/%s/reset", sandboxConfigurationCa.getSandbox().getKey()))
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(service).resetDataSet(sandboxConfigurationCa.getSandbox().getKey());
    }

    @Test
    public void isShouldUpdate() throws Exception{
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        when(service.update(any(SandboxConfiguration.class))).thenReturn(sandboxConfigurationCa);

        mvc.perform( put("/sandboxes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(sandboxConfigurationCa))
        ).andExpect(status().isOk())
                .andExpect(jsonPath("$.sandbox.id").value(sandboxConfigurationCa.getSandbox().getId()))
    //            .andExpect(jsonPath("$.localization").value(sandboxConfigurationCa.getLocalization()))
                .andExpect(jsonPath("$.applicationSandboxConfiguration.reporting.schoolYear")
                        .value(sandboxConfigurationCa.getApplicationSandboxConfiguration().getReporting().getSchoolYear()));

        verify(service).update(any(SandboxConfiguration.class));
    }

    @Test
    public void itShouldDelete() throws  Exception{
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();

        // create tenantToDelete
        mvc.perform( delete(String.format("/sandboxes/%s", sandboxConfigurationCa.getSandbox().getKey()))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(service).delete(any(String.class));
    }

}
