package org.opentestsystem.rdw.admin.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.PipelineScript;
import org.opentestsystem.rdw.admin.service.PipelineScriptService;
import org.opentestsystem.rdw.reporting.common.security.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(PipelineScriptController.class)
public class PipelineScriptControllerIT {

    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;

    @MockBean
    private PipelineScriptService service;

    private final User user = User.builderExt()
            .id("user")
            .username("username")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    private final PipelineScript script = PipelineScript.builder()
            .pipelineId(1)
            .id(2)
            .body("something")
            .updatedBy("somebody")
            .build();

    @Test
    public void itShouldGet() throws Exception {
        when(service.get(script.getPipelineId(), script.getId())).thenReturn(script);

        mvc.perform(get("/pipelines/1/scripts/2").with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pipelineId").value(script.getPipelineId()))
                .andExpect(jsonPath("$.id").value(script.getId()))
                .andExpect(jsonPath("$.body").value(script.getBody()))
                .andExpect(jsonPath("$.updatedBy").value(script.getUpdatedBy()))
        ;
    }

    @Test
    public void itShouldPost() throws Exception {
        when(service.create(refEq(user.getUsername()), refEq(script))).thenReturn(script);

        mvc.perform(post("/pipelines/1/scripts")
                .with(user(user))
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(script))
        )
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.pipelineId").value(script.getPipelineId()))
                .andExpect(jsonPath("$.id").value(script.getId()))
                .andExpect(jsonPath("$.body").value(script.getBody()))
                .andExpect(jsonPath("$.updatedBy").value(script.getUpdatedBy()))
        ;
    }

    @Test
    public void itShouldPut() throws Exception {
        when(service.update(refEq(user.getUsername()), refEq(script))).thenReturn(script);

        mvc.perform(put("/pipelines/1/scripts")
                .with(user(user))
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(script))
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.pipelineId").value(script.getPipelineId()))
                .andExpect(jsonPath("$.id").value(script.getId()))
                .andExpect(jsonPath("$.body").value(script.getBody()))
                .andExpect(jsonPath("$.updatedBy").value(script.getUpdatedBy()))
        ;
    }

}
