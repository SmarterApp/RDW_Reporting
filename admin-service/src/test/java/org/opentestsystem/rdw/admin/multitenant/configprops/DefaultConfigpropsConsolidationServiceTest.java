package org.opentestsystem.rdw.admin.multitenant.configprops;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.Before;
import org.junit.Test;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class DefaultConfigpropsConsolidationServiceTest {

    private TestFileBasedConfigpropsClient configpropsClient;
    private ObjectMapper objectMapper;
    private DefaultConfigpropsConsolidationService defaultConfigpropsService;

    @Before
    public void setUp() {
        configpropsClient = new TestFileBasedConfigpropsClient();

        objectMapper = new ObjectMapper();
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        objectMapper .registerModule(javaTimeModule);
        defaultConfigpropsService = new DefaultConfigpropsConsolidationService(objectMapper, configpropsClient);
    }

    @Test
    public void extractServicePrefixPropertiesForAll() {
        Map<String, Map<String, JsonNode>> result = defaultConfigpropsService.extractServicePrefixProperties();
        assertThat(result.size()).isGreaterThan(0);
        // Verify all of the services are read in, with a spot check, since each service gets its own test
        assertThat(result).containsKey("admin-service");
        assertThat(result.get("admin-service")).containsKey("archive");

        assertThat(result).containsKey("aggregate-service");
        assertThat(result.get("aggregate-service")).containsKey("datasources.olap_ro");

        assertThat(result).containsKey("reporting-service");
        assertThat(result.get("reporting-service")).containsKey("reporting");

        assertThat(result).containsKey("reporting-webapp");
        assertThat(result.get("reporting-webapp")).containsKey("reporting");

        assertThat(result).containsKey("report-processor");
        assertThat(result.get("report-processor")).containsKey("archive");

        assertThat(result).containsKey("rdw-ingest-task-service");
        assertThat(result.get("rdw-ingest-task-service")).containsKey("datasources.warehouse_rw");

        assertThat(result).containsKey("rdw-ingest-group-processor");
        assertThat(result.get("rdw-ingest-group-processor")).containsKey("datasources.warehouse_rw");

        assertThat(result).containsKey("rdw-ingest-package-processor");
        assertThat(result.get("rdw-ingest-package-processor")).containsKey("datasources.warehouse_rw");

        assertThat(result).containsKey("rdw-ingest-migrate-reporting");
        assertThat(result.get("rdw-ingest-migrate-reporting")).containsKey("datasources.warehouse_rw");
        assertThat(result.get("rdw-ingest-migrate-reporting")).containsKey("datasources.reporting_rw");

        assertThat(result).containsKey("rdw-ingest-migrate-olap");
        assertThat(result.get("rdw-ingest-migrate-olap")).containsKey("datasources.migrate_rw");
        assertThat(result.get("rdw-ingest-migrate-olap")).containsKey("datasources.olap_rw");

        assertThat(result).containsKey("rdw-ingest-exam-processor");
        assertThat(result.get("rdw-ingest-exam-processor")).containsKey("datasources.warehouse_rw");

        assertThat(result).containsKey("rdw-ingest-import-service");
        assertThat(result.get("rdw-ingest-import-service")).containsKey("datasources.warehouse_rw");
    }

    @Test
    public void extractPrefixPropertiesForAdmin() {
        String json = configpropsClient.getRawServiceConfigurations().get("admin-service");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.reporting_ro");
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).containsKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForReportingAggregate() {
        String json = configpropsClient.getRawServiceConfigurations().get("aggregate-service");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.olap_ro");
        assertThat(map).containsKey("archive");
        assertThat(map).containsKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForReportingService() {
        String json = configpropsClient.getRawServiceConfigurations().get("reporting-service");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.reporting_ro");
        assertThat(map).doesNotContainKey("archive");
        assertThat(map).containsKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForReportingProcessor() {
        String json = configpropsClient.getRawServiceConfigurations().get("report-processor");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.reporting_ro");
        assertThat(map).containsKey("archive");
        assertThat(map).containsKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForReportingWebapp() {
        String json = configpropsClient.getRawServiceConfigurations().get("reporting-webapp");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.reporting_ro");
        assertThat(map).doesNotContainKey("archive");
        assertThat(map).containsKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForIngestExamProcessor() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-exam-processor");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
        assertThat(map).containsKey("validation");
    }

    @Test
    public void extractPrefixPropertiesForIngestMigrateReporting() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-migrate-reporting");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.reporting_rw");
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).doesNotContainKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }


    @Test
    public void extractPrefixPropertiesForIngestMigrateOlap() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-migrate-olap");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.migrate_rw");
        assertThat(map).containsKey("datasources.olap_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForIngestImportService() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-import-service");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForIngestTaskService() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-task-service");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).doesNotContainKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForIngestGroupProcessor() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-group-processor");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }

    @Test
    public void extractPrefixPropertiesForIngestPackageProcessor() {
        String json = configpropsClient.getRawServiceConfigurations().get("rdw-ingest-package-processor");
        Map<String, JsonNode> map = defaultConfigpropsService.extractPrefixProperties(json);
        assertThat(map.size()).isGreaterThan(0);
        assertThat(map).containsKey("datasources.warehouse_rw");
        assertThat(map).containsKey("archive");
        assertThat(map).doesNotContainKey("reporting");
        assertThat(map).containsKey("tenantProperties");
    }
}