package org.opentestsystem.rdw.admin.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Pipeline;
import org.opentestsystem.rdw.admin.repository.PipelineRepository;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcPipelineRepository.class})
@Sql(
        config = @SqlConfig(dataSource = "warehouseDatasource", transactionManager = "warehouseTxManager"),
        scripts = {"classpath:warehouse-integration-test-data.sql"}
)
@Transactional(transactionManager = "warehouseTxManager")
public class JdbcPipelineRepositoryIT {

    @Autowired
    PipelineRepository repository;

    @Test
    public void itShouldFindAll() {
        assertThat(repository.findAll())
                .usingRecursiveFieldByFieldElementComparator()
                .containsExactly(
                        Pipeline.builder()
                                .id(1)
                                .code("exam")
                                .inputType("xml")
                                .build(),
                        Pipeline.builder()
                                .id(2)
                                .code("group")
                                .inputType("csv")
                                .build(),
                        Pipeline.builder()
                                .id(3)
                                .code("assessment")
                                .inputType("csv")
                                .build()
                );
    }

    @Test
    public void itShouldFindById() {
        assertThat(repository.findById(1))
                .isEqualToComparingFieldByFieldRecursively(
                        Pipeline.builder()
                                .id(1)
                                .code("exam")
                                .inputType("xml")
                                .build()
                );
    }

    @Test
    public void itShouldNotFindByMissingId() {
        assertThat(repository.findById(-1)).isNull();
    }

}