package org.opentestsystem.rdw.admin.multitenant.git;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.io.FileUtils;
import org.eclipse.jgit.api.Git;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.opentestsystem.rdw.admin.multitenant.configserver.ConfigServerClient;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.service.impl.RDWDataSourceNames;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceUrlParts;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.File;
import java.net.URL;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("git")
public class GitTenantConfigurationPersistenceServiceIT {

    private static final Logger logger = LoggerFactory.getLogger(GitTenantConfigurationPersistenceServiceIT.class);

    @Autowired
    private TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties;

    @Autowired
    private GitTenantConfigurationPersistenceService tenantConfigurationPersistenceService;

    //Dependencies
    private ConfigServerClient configServerClient;


    private File localRepositoryDirectory;
    private File remoteRepositoryDirectoryBare;
    private File remoteRepositoryDirectoryWorking;
    private Git remoteGit;
    private final String encryptedPassword = "AE0983AZJD0019";
    private final String testPassword = "testPassword1";

    @Before
    public void setup() throws Exception {
        configServerClient = mock(ConfigServerClient.class);
        when(configServerClient.encryptPassword(testPassword)).thenReturn(encryptedPassword);
        String remoteURI = tenantConfigurationPersistenceProperties.getRemoteRepositoryUri();
        if (remoteURI == null || !remoteURI.startsWith("file:")) {
            throw new IllegalStateException("This test is designed to simulate a remote repository locally, invalid remote repository uri " + remoteURI);
        }
        URL remoteRepositoryURL = new URL(tenantConfigurationPersistenceProperties.getRemoteRepositoryUri());
        remoteRepositoryDirectoryBare = FileUtils.toFile(remoteRepositoryURL);
        remoteRepositoryDirectoryWorking = FileUtils.getFile(remoteRepositoryDirectoryBare.getPath() + "_working");
        //set up bare empty repository to simulate remote
        FileUtils.deleteDirectory(remoteRepositoryDirectoryBare);
        remoteGit = Git.init().setDirectory(remoteRepositoryDirectoryBare).setBare(true).call();

        URL localRepositoryUrl = new URL(tenantConfigurationPersistenceProperties.getLocalRepositoryUri());
        localRepositoryDirectory = FileUtils.toFile(localRepositoryUrl);
        FileUtils.deleteDirectory(localRepositoryDirectory);
    }

    @Test
    public void getWorkingShouldCreateDirectoryIfNoneExists() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationPersistenceService.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(localRepositoryDirectory.getPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getWorkingShouldReturnDirectoryIfItExists() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationPersistenceService.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(localRepositoryDirectory.getPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWorkWithMissingDirectory() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        tenantConfigurationPersistenceService.forceLocalRepositoryToCleanState();
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWipeExistingDirectory() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        tenantConfigurationPersistenceService.forceLocalRepositoryToCleanState();
        //try a clone second time, should not error
        tenantConfigurationPersistenceService.forceLocalRepositoryToCleanState();
    }

    @Test
    public void testSaveFile() throws Exception {
        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setReportLanguages(Collections.singletonList("en"));
        reporting.setSchoolYear(2019);

        DataSourceElementsTenant dataSourceElements = new DataSourceElementsTenant();
        DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setHosts("catesthost");
        urlParts.setDatabase("catestdb");
        dataSourceElements.setUrlParts(urlParts);
        dataSourceElements.setPassword(testPassword);

        ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setPathPrefix("/CA");
        archivePropertiesTenant.setUriRoot("s3://ca-archive");

        Tenant tenant = Tenant.builder()
                .id("CAX")
                .key("CAX")
                .name("California Test")
                .build();

        TenantConfiguration.Builder tenantConfigurationBuilder = TenantConfiguration.builder();
        tenantConfigurationBuilder.tenant(tenant);
        tenantConfigurationBuilder.reporting(reporting);
        tenantConfigurationBuilder.dataSources(ImmutableMap.of(RDWDataSourceNames.REPORTING_RO.getName(), dataSourceElements));
        tenantConfigurationBuilder.archiveProperties(archivePropertiesTenant);
        tenantConfigurationBuilder.localizaton("{\"test\":\"value\"}");

        logger.debug("localRepositoryDirectory {}", localRepositoryDirectory.getPath());
        tenantConfigurationPersistenceService.saveTenantConfiguration(tenantConfigurationBuilder.build());
        cloneRemoteStateToWorking();

        File expectedApplicationYml = new File(remoteRepositoryDirectoryWorking.getPath() +
                File.separator +
                "tenant-" + tenant.getKey() +
                File.separator +
                "application.yml");

        File expectedLocalization = new File(remoteRepositoryDirectoryWorking.getPath() +
                File.separator +
                "tenant-" + tenant.getKey() +
                File.separator +
                "en.json");

        assertThat(expectedApplicationYml.exists()).isTrue();
        String appYmlExpected = FileUtils.readFileToString(expectedApplicationYml, "UTF-8");
        assertThat(appYmlExpected).contains("California Test");

        assertThat(expectedLocalization.exists()).isTrue();
        String localizationExpected = FileUtils.readFileToString(expectedLocalization, "UTF-8");
        assertThat(localizationExpected).contains("value");
    }

    @Test
    public void writeLocalizationFileShouldWriteAFile() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        FileUtils.forceMkdir(localRepositoryDirectory);
        Tenant tenant = Tenant.builder()
                .id("CAX")
                .key("CAX")
                .name("California Test")
                .build();
        tenantConfigurationPersistenceService.writeLocalization("{\"test\":\"value\"}", tenant);
        File expectedFile = new File(localRepositoryDirectory.getPath() +
                File.separator +
                "tenant-" + tenant.getKey() +
                File.separator +
                "en.json");
        assertThat(expectedFile.exists()).isTrue();
        String readExpected = FileUtils.readFileToString(expectedFile, "UTF-8");
        assertThat(readExpected).contains("value");
    }

    private void cloneRemoteStateToWorking() throws Exception {
        FileUtils.forceMkdir(remoteRepositoryDirectoryWorking);
        FileUtils.cleanDirectory(remoteRepositoryDirectoryWorking);
        Git.cloneRepository()
                .setURI(tenantConfigurationPersistenceProperties.getRemoteRepositoryUri())
                .setDirectory(remoteRepositoryDirectoryWorking)
                .call();
    }
}
