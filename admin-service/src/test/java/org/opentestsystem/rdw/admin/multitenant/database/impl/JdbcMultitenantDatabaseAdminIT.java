package org.opentestsystem.rdw.admin.multitenant.database.impl;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.opentestsystem.rdw.schema.SchemaMigration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.junit4.SpringRunner;

import javax.sql.DataSource;
import java.sql.Array;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.schema.SchemaMigration.Migration;

/**
 * This test will only run against Aurora and S3
 *
 * <p>
 * This test will run only if the system property test-archive.root is set to s3://rdw-ci-archive
 * <p>
 * Additionally, AWS and Aurora credentials must be set:<ul>
 * <li>archive.s3-access-key</li>
 * <li>archive.s3-secret-key</li>
 * <li>spring.admin_datasource.username</li>
 * <li>spring.admin_datasource.password</li>
 * <li>spring.admin_olap_datasource.username</li>
 * <li>spring.admin_olap_datasource.password</li>
 * </ul>
 * For example,<pre>
 * java -Darchive.uri-root=s3://rdw-ci-archive
 *      -Darchive.s3-access-key=#####################
 *      -Darchive.s3-secret-key=#####################
 *      -Dspring.admin_datasource.url-parts.hosts=rdw-aurora-ci.cugsexobhx8t.us-west-2.rds.amazonaws.com:3306
 *      -Dspring.admin_datasource.url-parts.database=sandbox_it_warehouse_test
 *      -Dspring.admin_datasource.username=###################
 *      -Dspring.admin_datasource.password=###################
 *      -Dspring.admin_olap_datasource.url-parts.hosts=rdw-qa.cibkulpjrgtr.us-west-2.redshift.amazonaws.com:5439
 *      -Dspring.admin_olap_datasource.url-parts.database=ci
 *      -Dspring.admin_olap_datasource.username=###################
 *      -Dspring.admin_olap_datasource.password=###################
 *      -Dspring.admin_olap_datasource.query-timeout=240
 * </pre>
 */
@RunWith(SpringRunner.class)
@IfProfileValue(name = "archive.uri-root", value = "s3://rdw-ci-archive")
@RepositoryIT
@ContextConfiguration(classes = {
        JdbcMultitenantDatabaseAdmin.class
})
public class JdbcMultitenantDatabaseAdminIT {

    private final String targetDatabase = "sandbox_it_warehouse_test";
    private final String importDatabase = "warehouse";
    private final String datasetName = "demo-dataset";
    private final String createTargetDatabase = targetDatabase + "_create_test";
    private final String createDatabaseUserUsername = "it_creat_u_test";
    private final String testCreateOlapUser = "sbx_it_user";
    private final String targetOlapSchema = "sbx_reporting_it_test";

    @Autowired
    private JdbcMultitenantDatabaseAdmin jdbcMultitenantDatabaseAdmin;

    @Autowired
    @Qualifier("adminReportingDataSource")
    private DataSource adminReportingDataSource;

    @Autowired
    @Qualifier("adminWarehouseDataSource")
    private DataSource adminWarehouseDataSource;

    @Autowired
    @Qualifier("adminReportingJdbcTemplate")
    private NamedParameterJdbcTemplate adminReportingJdbcTemplate;

    @Autowired
    @Qualifier("adminWarehouseJdbcTemplate")
    private NamedParameterJdbcTemplate adminWarehouseJdbcTemplate;

    @Autowired
    @Qualifier("adminOlapJdbcTemplate")
    private NamedParameterJdbcTemplate adminOlapJdbcTemplate;


    private SchemaMigration warehouseMigration;

    @Before
    public void setUp() {
        warehouseMigration = new SchemaMigration(adminReportingDataSource, targetDatabase, Migration.Warehouse);
    }

    @Test
    public void testLoad() throws Exception {
        warehouseMigration.clean();
        warehouseMigration.migrate();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseEmpty(targetDatabase, importDatabase, RdwDatabaseType.WAREHOUSE)).isTrue();
        jdbcMultitenantDatabaseAdmin.loadDataset(targetDatabase, datasetName, importDatabase, RdwDatabaseType.WAREHOUSE);
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseEmpty(targetDatabase, importDatabase, RdwDatabaseType.WAREHOUSE)).isFalse();
    }

    @Test
    public void manifestShouldLoadFromS3() {
        List<String> tables = jdbcMultitenantDatabaseAdmin.manifest(datasetName, importDatabase);
        assertThat(tables.size()).isGreaterThan(0);
        assertThat(tables.stream().filter(f -> f.contains("exam.txt")).findFirst())
                .isNotEmpty();
    }

    @Test
    public void isDatabaseExistsShouldReturnValidResult() {
        boolean isReporting = jdbcMultitenantDatabaseAdmin.isDatabaseExists("reporting", RdwDatabaseType.REPORTING);
        assertThat(isReporting).isTrue();
        boolean isFoo = jdbcMultitenantDatabaseAdmin.isDatabaseExists("foo", RdwDatabaseType.REPORTING);
        assertThat(isFoo).isFalse();
    }


    @Test
    @Sql(statements = "DROP DATABASE IF EXISTS " + createTargetDatabase,
            config = @SqlConfig(dataSource = "adminWarehouseDataSource"))
    public void createDatabaseShouldCreateADatabase() {
        jdbcMultitenantDatabaseAdmin.createDatabase(createTargetDatabase, RdwDatabaseType.WAREHOUSE);
        boolean isWarehouseCreateTest = jdbcMultitenantDatabaseAdmin.isDatabaseExists(createTargetDatabase, RdwDatabaseType.WAREHOUSE);
        assertThat(isWarehouseCreateTest).isTrue();
    }

    @Test
    public void isDatabaseUserExistsShouldBeValid() {
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists("sbac", RdwDatabaseType.WAREHOUSE)).isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists("foo", RdwDatabaseType.WAREHOUSE)).isFalse();
    }

    @Test
    @Sql(statements = {"GRANT USAGE ON *.* TO " + createDatabaseUserUsername + "@'%' IDENTIFIED BY 'verytmppwd1'",
            "DROP USER " + createDatabaseUserUsername},
            config = @SqlConfig(dataSource = "adminWarehouseDataSource"))
    public void createDatabaseUserShouldCreateADatabaseUser() {
        jdbcMultitenantDatabaseAdmin.createDatabaseUser(createDatabaseUserUsername,
                RandomStringUtils.random(8, true, true), RdwDatabaseType.WAREHOUSE);
        assertThat(jdbcMultitenantDatabaseAdmin.isDatabaseUserExists(createDatabaseUserUsername, RdwDatabaseType.WAREHOUSE)).isTrue();
    }

    @Test
    @Sql(statements = {"DROP DATABASE IF EXISTS " + createTargetDatabase,
            "GRANT USAGE ON *.* TO " + createDatabaseUserUsername + "@'%' IDENTIFIED BY 'verytmppwd1'",
            "DROP USER " + createDatabaseUserUsername},
            config = @SqlConfig(dataSource = "adminWarehouseDataSource"))
    public void grantsShouldBeAppliedToUser() {
        jdbcMultitenantDatabaseAdmin.createDatabase(createTargetDatabase, RdwDatabaseType.WAREHOUSE);
        jdbcMultitenantDatabaseAdmin.createDatabaseUser(createDatabaseUserUsername,
                RandomStringUtils.random(8, true, true), RdwDatabaseType.WAREHOUSE);

        jdbcMultitenantDatabaseAdmin.grantUserToDatabase(createDatabaseUserUsername, createTargetDatabase, RdwDatabaseType.WAREHOUSE);
        jdbcMultitenantDatabaseAdmin.grantUserOnSelectProc(createDatabaseUserUsername, RdwDatabaseType.WAREHOUSE);
        jdbcMultitenantDatabaseAdmin.grantUserLoadFromS3(createDatabaseUserUsername, RdwDatabaseType.WAREHOUSE);
        jdbcMultitenantDatabaseAdmin.grantUserSelectIntoS3(createDatabaseUserUsername, RdwDatabaseType.WAREHOUSE);

        List<String> grants = adminWarehouseJdbcTemplate.queryForList("SHOW GRANTS FOR :username",
                new MapSqlParameterSource()
                        .addValue("username", createDatabaseUserUsername),
                String.class);

        assertThat(grants.stream()
                .filter(g -> g.contains(createTargetDatabase)).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("`mysql`.`proc`")).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("LOAD FROM S3")).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("SELECT INTO S3")).findFirst())
                .isNotEmpty();
    }

    @Test
    @Sql(statements = {"DROP DATABASE IF EXISTS " + createTargetDatabase,
            "GRANT USAGE ON *.* TO " + createDatabaseUserUsername + "@'%' IDENTIFIED BY 'verytmppwd1'",
            "DROP USER " + createDatabaseUserUsername},
            config = @SqlConfig(dataSource = "adminWarehouseDataSource"))
    public void grantsShouldBeAppliedToUserAsOneStatement() {
        jdbcMultitenantDatabaseAdmin.createDatabase(createTargetDatabase, RdwDatabaseType.WAREHOUSE);
        jdbcMultitenantDatabaseAdmin.createDatabaseUser(createDatabaseUserUsername,
                RandomStringUtils.random(8, true, true), RdwDatabaseType.WAREHOUSE);

        jdbcMultitenantDatabaseAdmin.grantAllBasicPermissions(createDatabaseUserUsername, createTargetDatabase, RdwDatabaseType.WAREHOUSE);

        List<String> grants = adminWarehouseJdbcTemplate.queryForList("SHOW GRANTS FOR :username",
                new MapSqlParameterSource()
                        .addValue("username", createDatabaseUserUsername),
                String.class);

        assertThat(grants.stream()
                .filter(g -> g.contains(createTargetDatabase)).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("`mysql`.`proc`")).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("LOAD FROM S3")).findFirst())
                .isNotEmpty();

        assertThat(grants.stream()
                .filter(g -> g.contains("SELECT INTO S3")).findFirst())
                .isNotEmpty();
    }

    @Test
    public void isOlapDatabaseUserExistsShouldBeValid() {
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists("sbac")).isTrue();
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists("foo")).isFalse();
    }

    @Test
    @Sql(statements = {"DROP USER IF EXISTS " + testCreateOlapUser},
            config = @SqlConfig(dataSource = "adminOlapDataSource"))
    public void createOlapDatabaseUserShouldCreateADatabaseUser() {
        jdbcMultitenantDatabaseAdmin.createOlapDatabaseUser(testCreateOlapUser,
                RandomStringUtils.random(6, true, false) + RandomStringUtils.random(2, false, true));
        assertThat(jdbcMultitenantDatabaseAdmin.isOlapDatabaseUserExists(testCreateOlapUser)).isTrue();
    }

    @Test
    public void isOlapSchemaExistsShouldReturnValidResult() {
        boolean isReporting = jdbcMultitenantDatabaseAdmin.isOlapSchemaExists("reporting_test");
        assertThat(isReporting).isTrue();
        boolean isFoo = jdbcMultitenantDatabaseAdmin.isOlapSchemaExists("foo");
        assertThat(isFoo).isFalse();
    }

    @Test
    @Sql(statements = "DROP SCHEMA IF EXISTS " + targetOlapSchema,
            config = @SqlConfig(dataSource = "adminOlapDataSource"))
    public void createOlapSchemaShouldCreateASchema() {
        jdbcMultitenantDatabaseAdmin.createOlapSchema(targetOlapSchema);
        boolean isWarehouseCreateTest = jdbcMultitenantDatabaseAdmin.isOlapSchemaExists(targetOlapSchema);
        assertThat(isWarehouseCreateTest).isTrue();
    }

    @Test
    @Ignore
    //TODO: pg_catalog.pg_user useconfig is type text[] can't find a way to get value form result set looks fine queried by hand
    public void modifyUserToUseOlapGrants() throws Exception {
        //setup
        if (jdbcMultitenantDatabaseAdmin.isOlapSchemaExists(targetOlapSchema)) {
            adminOlapJdbcTemplate.getJdbcOperations()
                    .execute("REVOKE ALL ON SCHEMA " + targetOlapSchema + " FROM " + testCreateOlapUser);
        }
        adminOlapJdbcTemplate.getJdbcOperations()
                .execute("DROP USER IF EXISTS " + testCreateOlapUser);
        adminOlapJdbcTemplate.getJdbcOperations()
                .execute("DROP SCHEMA IF EXISTS " + targetOlapSchema);
        jdbcMultitenantDatabaseAdmin.createOlapDatabaseUser(testCreateOlapUser, createRandomPassword());
        jdbcMultitenantDatabaseAdmin.createOlapSchema(targetOlapSchema);

        //do grants
        jdbcMultitenantDatabaseAdmin.grantAllOlapUserToSchema(targetOlapSchema, testCreateOlapUser);
        jdbcMultitenantDatabaseAdmin.grantAllOlapUserToSchemaTables(targetOlapSchema, testCreateOlapUser);
        jdbcMultitenantDatabaseAdmin.searchPathOlapUserToSchema(targetOlapSchema, testCreateOlapUser);

        List<Array> useconfigResults = adminOlapJdbcTemplate.getJdbcOperations()
                .query(
                        "SELECT useconfig " +
                                "FROM pg_catalog.pg_user " +
                                "WHERE usename='" + createDatabaseUserUsername + "'",
                        (row, index) -> row.getArray("useconfig"));

        assertThat(useconfigResults.size()).isEqualTo(1);
        //TODO: this is always null
        String[] results = (String[]) useconfigResults.get(0).getArray();
        assertThat(Arrays.asList(results)
                .stream()
                .filter(s -> s.contains("search_path=" + createTargetDatabase))
                .findFirst())
                .isNotEmpty();
    }

    private String createRandomPassword() {
        final String letters = RandomStringUtils.random(1, true, false).toUpperCase() +
                RandomStringUtils.random(5, true, false).toLowerCase();
        final String numbers = RandomStringUtils.random(2, false, true);
        return letters + numbers;
    }
}
