package org.opentestsystem.rdw.admin.multitenant.web;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.admin.multitenant.TenantType;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusContext;
import org.opentestsystem.rdw.admin.multitenant.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.service.TenantService;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.time.Instant;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.fail;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(controllers = {SandboxDataSetController.class}, secure = false)
public class SandboxDataSetControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private TenantService service;

    @Autowired
    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper.registerModule(new JavaTimeModule());
    }

    @Test
    public void itShouldReturnAllDataSets() throws Exception {
        when(service.getSandboxDataSets()).thenReturn(ImmutableList.copyOf(getDataSets()));

        // get the stub SandboxDataSets
        mvc.perform(get("/sandboxDataSets")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(3)));

        verify(service).getSandboxDataSets();
    }

    /**
     * @return mock datasets
     */
    private static Set<DataSet> getDataSets() {
        final DataSet CA = new DataSet();
        CA.setLabel("California Interim Data Set");
        CA.setId("ca_interim");

        final DataSet MI = new DataSet();
        MI.setLabel("Michigan Summative Data Set");
        MI.setId("mi_summative");

        final DataSet SBAC = new DataSet();
        SBAC.setLabel("SBAC Interim Data Set");
        SBAC.setId("sbac_interim");

        return newHashSet(
                CA,
                MI,
                SBAC
        );
    }

}
