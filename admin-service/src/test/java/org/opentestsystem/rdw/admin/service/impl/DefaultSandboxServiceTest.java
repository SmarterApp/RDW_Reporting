package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.ApplicationSandboxConfigurations;
import org.opentestsystem.rdw.admin.model.SandboxConfiguration;
import org.opentestsystem.rdw.admin.model.SandboxConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemorySandboxConfigurationRepository;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemProperties;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultSandboxServiceTest {
    private DefaultSandboxService service;

    private InMemorySandboxConfigurationRepository inMemorySandboxConfigurationRepository;

    @Before
    public void setup() {
        inMemorySandboxConfigurationRepository = mock(InMemorySandboxConfigurationRepository.class);
        service = new DefaultSandboxService(inMemorySandboxConfigurationRepository);
    }

    @Test
    public void itShouldRetrieveAllSandboxes(){
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration sandboxConfigurationMi = SandboxConfigurationStubs.getMiInterimSandboxConfiguration();
        Set<SandboxConfiguration> sandboxConfigurations = ImmutableSet.of(sandboxConfigurationCa, sandboxConfigurationMi);
        when(inMemorySandboxConfigurationRepository.getAll()).thenReturn(sandboxConfigurations);

        ApplicationSandboxConfigurations applicationSandboxConfigurations = service.getAll();

        verify(inMemorySandboxConfigurationRepository).getAll();

        assertThat(applicationSandboxConfigurations).isNotNull();
        assertThat(applicationSandboxConfigurations.getApplicationSandboxConfiguration()).isNotNull();
        assertThat(applicationSandboxConfigurations.getSandboxes()).isNotEmpty();
        assertThat(applicationSandboxConfigurations.getSandboxes().size()).isEqualTo(2);

        Optional<SandboxConfiguration> sandboxCa = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationCa.getSandbox().getKey());
        assertThat(sandboxCa).isPresent();
        if(sandboxCa.isPresent()) {
            verifySandboxes(sandboxCa.get(), sandboxConfigurationCa);
        }

        Optional<SandboxConfiguration> sandboxMi = getSandboxConfigurationFromKey(applicationSandboxConfigurations, sandboxConfigurationMi.getSandbox().getKey());
        assertThat(sandboxMi).isPresent();
        if(sandboxMi.isPresent()) {
            verifySandboxes(sandboxMi.get(), sandboxConfigurationMi);
        }
    }

    @Test
    public void itShouldCreateSandbox() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
        SandboxConfiguration sandboxConfiguration = service.create(sandboxConfigurationCa);

        verify(inMemorySandboxConfigurationRepository).create(sandboxConfigurationCa);
        assertThat(sandboxConfiguration).isNotNull();
        assertThat(sandboxConfiguration.getSandbox()).isNotNull();
        verifySandboxes(sandboxConfiguration, sandboxConfigurationCa);
    }

    @Test
    public void itShouldUpdateSandbox() {
        String expectedDescription = "Sandbox's New description for Testing";
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        SandboxConfiguration updatedSandboxConfiguration = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        updatedSandboxConfiguration.getSandbox().setDescription(expectedDescription);
        when(inMemorySandboxConfigurationRepository.update(sandboxConfigurationCa)).thenReturn(updatedSandboxConfiguration);
        when(inMemorySandboxConfigurationRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(true);

        SandboxConfiguration sandboxCfg = service.update(sandboxConfigurationCa);

        verify(inMemorySandboxConfigurationRepository).update(sandboxConfigurationCa);
        verifySandboxes(sandboxCfg, updatedSandboxConfiguration);
    }

    @Test
    public void itShouldDeleteSandbox() {
        String key = SandboxConfigurationStubs.getCaInterimSandboxConfiguration().getSandbox().getKey();
        service.delete(key);
        verify(inMemorySandboxConfigurationRepository).delete(key);
    }

    @Test
    public void itShouldResetSandbox() {
        String key = SandboxConfigurationStubs.getCaInterimSandboxConfiguration().getSandbox().getKey();
        service.resetDataSet(key);
        verify(inMemorySandboxConfigurationRepository).reset(key);
    }

    @Test (expected = IllegalArgumentException.class)
    public void itShouldNotCreateSandbox() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
        when(inMemorySandboxConfigurationRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(true);
        service.create(sandboxConfigurationCa);
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateSandbox() {
        SandboxConfiguration sandboxConfigurationCa = SandboxConfigurationStubs.getCaInterimSandboxConfiguration();
        when(inMemorySandboxConfigurationRepository.create(sandboxConfigurationCa)).thenReturn(sandboxConfigurationCa);
        when(inMemorySandboxConfigurationRepository.exists(sandboxConfigurationCa.getSandbox().getKey())).thenReturn(false);
        service.update(sandboxConfigurationCa);
    }

    private void verifySandboxes(final SandboxConfiguration sandboxConfiguration, final SandboxConfiguration expectedSandboxConfiguration) {
        assertThat(sandboxConfiguration.getSandbox().getKey()).isEqualTo(expectedSandboxConfiguration.getSandbox().getKey());
        assertThat(sandboxConfiguration.getSandbox().getId()).isEqualTo(expectedSandboxConfiguration.getSandbox().getId());
        assertThat(sandboxConfiguration.getSandbox().getDataSetId()).isEqualTo(expectedSandboxConfiguration.getSandbox().getDataSetId());
        assertThat(sandboxConfiguration.getSandbox().getTenantKey()).isEqualTo(expectedSandboxConfiguration.getSandbox().getTenantKey());
        assertThat(sandboxConfiguration.getSandbox().getDescription()).isEqualTo(expectedSandboxConfiguration.getSandbox().getDescription());
        assertThat(sandboxConfiguration.getSandbox().getName()).isEqualTo(expectedSandboxConfiguration.getSandbox().getName());

        verifyReporting(sandboxConfiguration.getReporting(), expectedSandboxConfiguration.getReporting());
        verifyLocalization(sandboxConfiguration.getLocalization(), expectedSandboxConfiguration.getLocalization());

        verifyAggregatorProperties(sandboxConfiguration.getAggregateReportingPropertiesTenant(), expectedSandboxConfiguration.getAggregateReportingPropertiesTenant());
    }

    /**
     * the aggregator property list can be null
     * @param aggregateProperties retrieved properties
     * @param expectedAggregateProperties exprected properties
     */
    private void verifyAggregatorProperties(AggregateReportingPropertiesTenant aggregateProperties, AggregateReportingPropertiesTenant expectedAggregateProperties) {
        assertThat(aggregateProperties.getAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getAssessmentTypes().size());
        assertThat(aggregateProperties.getStateAggregateAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getStateAggregateAssessmentTypes().size());
        assertThat(aggregateProperties.getStatewideUserAssessmentTypes().size()).isEqualTo(expectedAggregateProperties.getStatewideUserAssessmentTypes().size());
    }
    private void verifyLocalization(final Map<String, String> localization, final Map<String, String> expectedLocalization) {
        assertThat(localization.size()).isEqualTo(expectedLocalization.size());
    }

    private void verifyReporting(final ReportingSystemProperties reportingSystemSettings, final ReportingSystemProperties expectedReportingSystemSettings) {
        assertThat(reportingSystemSettings.getAccessDeniedUrl()).isEqualTo(expectedReportingSystemSettings.getAccessDeniedUrl());
        assertThat(reportingSystemSettings.getAnalyticsTrackingId()).isEqualTo(expectedReportingSystemSettings.getAnalyticsTrackingId());
        assertThat(reportingSystemSettings.getInterpretiveGuideUrl()).isEqualTo(expectedReportingSystemSettings.getInterpretiveGuideUrl());
        assertThat(reportingSystemSettings.getIrisVendorId()).isEqualTo(expectedReportingSystemSettings.getIrisVendorId());
        assertThat(reportingSystemSettings.getLandingPageUrl()).isEqualTo(expectedReportingSystemSettings.getLandingPageUrl());
        assertThat(reportingSystemSettings.getMinItemDataYear()).isEqualTo(expectedReportingSystemSettings.getMinItemDataYear());
        assertThat(reportingSystemSettings.getSchoolYear()).isEqualTo(expectedReportingSystemSettings.getSchoolYear());
        assertThat(reportingSystemSettings.getUserGuideUrl()).isEqualTo(expectedReportingSystemSettings.getUserGuideUrl());
        assertThat(reportingSystemSettings.getTargetReport()).isEqualTo(expectedReportingSystemSettings.getTargetReport());
        assertThat(reportingSystemSettings.getTranslationLocation()).isEqualTo(expectedReportingSystemSettings.getTranslationLocation());
        assertThat(reportingSystemSettings.isPercentileDisplayEnabled()).isEqualTo(expectedReportingSystemSettings.isPercentileDisplayEnabled());
        assertThat(reportingSystemSettings.isTransferAccessEnabled()).isEqualTo(expectedReportingSystemSettings.isTransferAccessEnabled());
        assertThat(reportingSystemSettings.getState()).isNotNull();
        assertThat(reportingSystemSettings.getState().getCode()).isEqualTo(expectedReportingSystemSettings.getState().getCode());
        assertThat(reportingSystemSettings.getState().getName()).isEqualTo(expectedReportingSystemSettings.getState().getName());

        assertThat(reportingSystemSettings.getReportLanguages().size()).isEqualTo(expectedReportingSystemSettings.getReportLanguages().size());
        assertThat(reportingSystemSettings.getUiLanguages().size()).isEqualTo(expectedReportingSystemSettings.getUiLanguages().size());
        assertThat(reportingSystemSettings.getEffectiveReportLanguages().size()).isEqualTo(expectedReportingSystemSettings.getEffectiveReportLanguages().size());

    }

    /**
     * Lookup the given key in the ApplicationSandboxConfigurations sandbox list
     * @param applicationSandboxConfigurations contains the list of sandboxes to look through
     * @param key The key of the sandbox to find
     * @return SandboxConfiguration if key is found
     */
    private Optional<SandboxConfiguration> getSandboxConfigurationFromKey(final ApplicationSandboxConfigurations applicationSandboxConfigurations, String key) {
        return applicationSandboxConfigurations.getSandboxes().stream()
                .filter(sandbox ->
                        sandbox.getSandbox().getKey().equals(key)
                ).findFirst();
    }

}
