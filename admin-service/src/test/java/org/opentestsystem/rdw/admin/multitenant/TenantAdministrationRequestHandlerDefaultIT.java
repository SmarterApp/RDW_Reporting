package org.opentestsystem.rdw.admin.multitenant;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.client.ConfigServerClient;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.database.TenantDatabaseCreationService;
import org.opentestsystem.rdw.admin.multitenant.git.TenantConfigurationPersistenceService;
import org.opentestsystem.rdw.reporting.common.security.CommonTestUserDetailsService;
import org.opentestsystem.rdw.reporting.common.stream.DefaultMessageSecurityService;
import org.opentestsystem.rdw.reporting.common.stream.MessageSecurityService;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtSecurityConfiguration;
import org.opentestsystem.rdw.reporting.common.web.security.jwt.JwtService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.cloud.stream.test.binder.MessageCollectorAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        classes = {TenantAdministrationRequestHandlerDefault.class,
                TenantAdministrationProcessor.class,
                MessageCollectorAutoConfiguration.class,
                JwtSecurityConfiguration.class,
                JacksonAutoConfiguration.class})
@EnableBinding(TenantAdministrationProcessor.class)
public class TenantAdministrationRequestHandlerDefaultIT {

    @Autowired
    private MessageCollector messageCollector;

    @MockBean
    TenantDatabaseCreationService tenantDatabaseCreationService;

    @MockBean
    TenantConfigurationPersistenceService tenantConfigurationPersistenceService;

    @MockBean
    ConfigServerClient configServerClient;

    @Autowired
    TenantAdministrationRequestHandlerDefault tenantAdministrationRequestHandler;

    @TestConfiguration
    static class TenantAdministrationRequestHandlerDefaultConfiguration {

        @Bean
        public MessageSecurityService messageSecurityService(final JwtService jwtService) {
            return new DefaultMessageSecurityService(jwtService);
        }

        @Bean
        public TenantAdministrationRequestHandlerDefault tenantAdministrationRequestHandler(MessageSecurityService messageSecurityService,
                                                                                            TenantAdministrationProcessor tenantAdministrationProcessor,
                                                                                            TenantDatabaseCreationService tenantDatabaseCreationService,
                                                                                            TenantConfigurationPersistenceService tenantConfigurationPersistenceService,
                                                                                            ConfigServerClient configServerClient) {
            return new TenantAdministrationRequestHandlerDefault(messageSecurityService,
                    tenantAdministrationProcessor,
                    tenantDatabaseCreationService,
                    tenantConfigurationPersistenceService,
                    configServerClient);
        }

        @Bean
        public CommonTestUserDetailsService commonTestUserDetailsService() {
            return new CommonTestUserDetailsService();
        }

    }

    @Test
    @WithUserDetails
    public void createTenant() {
        tenantAdministrationRequestHandler.createTenant(new TenantConfiguration());
    }

}
