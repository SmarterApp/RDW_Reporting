package org.opentestsystem.rdw.admin.multitenant.configprops;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

// TODO RP-394 Move some integration test (IT) to End to End tests (ETE) and configure to run in CI
//this test only runs against a local docker instances AND it expect all 4 services to be running in docker
// set this property to run this test (or temporarily comment out this annotation)
// java -Dtenant-client.docker-it-enable=true
@IfProfileValue(name = "tenant-client.docker-it-enable", value = "true")
@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles({"tenant_client_docker"})
@EnableConfigurationProperties
public class HttpConfigpropsClientETE {
    @Autowired
    TenantConfigurationLookupProperties tenantConfigurationLookupProperties;

    @Autowired
    HttpConfigpropsClient configpropsClient;

    private static ObjectMapper mapper = new ObjectMapper();

    @Ignore
    @Test
    public void itShouldLoadConfig() {
        assertThat(tenantConfigurationLookupProperties)
                .isNotNull();
        // count is expected docker-compose used - main rdw-reporting services running
        // the size changes if the RDW_Ingest services are configured in the list of tenantConfigurationLookupProperties
        int serviceCount = 4; // set to how it's configured
        assertThat(tenantConfigurationLookupProperties.getServices().size()).isEqualTo(serviceCount);
        assertThat(tenantConfigurationLookupProperties.getServices().get("aggregate-service")).isEqualTo("http://localhost:8308");
        assertThat(tenantConfigurationLookupProperties.getServices().get("report-processor")).isEqualTo("http://localhost:8086");
        assertThat(tenantConfigurationLookupProperties.getServices().get("reporting-service")).isEqualTo("http://localhost:8108");
        assertThat(tenantConfigurationLookupProperties.getServices().get("admin-service")).isEqualTo("http://localhost:8208");

        // Testing ingest - Note only works when these services are running locally at these specified ports (post changed not to conflict with the
        // RDW_Reporting services
        // Note these are commented out unless they are setup locally to run
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-migrate-olap")).isEqualTo("http://localhost:8091");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-migrate-reporting")).isEqualTo("http://localhost:8088");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-task-service")).isEqualTo("http://localhost:8084");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-package-processor")).isEqualTo("http://localhost:8083");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-group-processor")).isEqualTo("http://localhost:8087");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-exam-processor")).isEqualTo("http://localhost:8090");
//        assertThat(tenantConfigurationLookupProperties.getServices().get("rdw-ingest-import-service")).isEqualTo("http://localhost:8089");
    }

    @Ignore
    @Test
    public void itShouldCallEndpoints() {
        List<String> responseEntities = configpropsClient.getRawConfigurations();
        assertThat(responseEntities.size()).isEqualTo(9);
        assertThat(responseEntities.get(0)).contains("scopedTarget.reportingSystemSettings");
        assertThat(responseEntities.get(0)).contains("scopedTarget.tenantProperties");
        assertThat(responseEntities.get(0)).contains("archivePropertiesRoot");
        // need to look for entity with aggregrate
        //assertThat(responseEntities.get(0)).contains("scopedTarget.aggregateReportingPropertiesRoot");
    }

    @Test
    public void getRawServiceConfigurationsLoads() {
        Map<String, String> result = configpropsClient.getRawServiceConfigurations();
        assertThat(result.size()).isGreaterThan(0);
        assertThat(result).containsKey("admin-service");
        assertThat(result.get("admin-service")).contains("scopedTarget.tenantProperties");
        assertThat(result).containsKey("aggregate-service");
        assertThat(result.get("aggregate-service")).contains("scopedTarget.tenantProperties");
        assertThat(result).containsKey("report-processor");
        assertThat(result.get("report-processor")).contains("scopedTarget.tenantProperties");
        assertThat(result).containsKey("reporting-service");
        assertThat(result.get("reporting-service")).contains("scopedTarget.tenantProperties");
        assertThat(result).containsKey("reporting-webapp");
        assertThat(result.get("reporting-webapp")).contains("scopedTarget.tenantProperties");
    }

    @Configuration
    static class Config {

        @Bean
        @ConfigurationProperties("tenant-configuration-lookup")
            //using alternate root name
        TenantConfigurationLookupProperties tenantConfigurationLookupProperties() {
            return new TenantConfigurationLookupProperties();
        }

        @Bean
        HttpConfigpropsClient configpropsClient(TenantConfigurationLookupProperties tenantConfigurationLookupProperties,
                                                RestTemplate configpropsRestTemplate) {
            return new HttpConfigpropsClient(tenantConfigurationLookupProperties, configpropsRestTemplate);
        }

        @Bean
        public RestTemplateBuilder restTemplateBuilder() {
            return new RestTemplateBuilder();
        }

        @Bean
        public RestTemplate configpropsRestTemplate(RestTemplateBuilder restTemplateBuilder) {
            return restTemplateBuilder
                    .setConnectTimeout(1000)
                    .setReadTimeout(3000)
                    .build();
        }

    }

}