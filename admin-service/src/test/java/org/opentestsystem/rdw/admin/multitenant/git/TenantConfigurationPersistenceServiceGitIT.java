package org.opentestsystem.rdw.admin.multitenant.git;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.File;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

// we don't currently have a git integration test server setup
// to run this test set tenant-configuration-persistence.enable=true
// also need to set remote repository uri, username, and password
//  java -Dtenant-configuration-persistence.enable=true \
//       -Dtenant-configuration-persistence.remote-repository-uri=https://github.com/example/rdw_config.git
//       -Dtenant-configuration-persistence.git-username=exampleuser
//       -Dtenant-configuration-persistence.git-password=examplepwd
@IfProfileValue(name = "tenant-configuration-persistence.enable", value = "true")
@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("git")
public class TenantConfigurationPersistenceServiceGitIT {

    private static final Logger logger = LoggerFactory.getLogger(TenantConfigurationPersistenceServiceGitIT.class);

    @Autowired
    private TenantConfigurationPersistenceProperties tenantConfigurationPersistenceProperties;

    @Autowired
    private TenantConfigurationPersistenceServiceGit tenantConfigurationPersistenceServiceGit;

    private File localRepositoryDirectory;

    @Before
    public void setup() {
        localRepositoryDirectory = new File(tenantConfigurationPersistenceProperties.getLocalRepositoryPath());
    }

    @Test
    public void getWorkingShouldCreateDirectoryIfNoneExists() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationPersistenceServiceGit.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(tenantConfigurationPersistenceProperties.getLocalRepositoryPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getWorkingShouldReturnDirectoryIfItExists() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        File workingDirectory = tenantConfigurationPersistenceServiceGit.getWorkingDirectory();
        assertThat(workingDirectory.getPath()).isEqualTo(tenantConfigurationPersistenceProperties.getLocalRepositoryPath());
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWorkWithMissingDirectory() throws Exception {
        FileUtils.deleteDirectory(localRepositoryDirectory);
        tenantConfigurationPersistenceServiceGit.forceLocalRepositoryToCleanState();
        assertThat(localRepositoryDirectory.exists()).isTrue();
    }

    @Test
    public void getLocalRepositoryToCleanStateShouldWipeExistingDirectory() throws Exception {
        FileUtils.forceMkdir(localRepositoryDirectory);
        tenantConfigurationPersistenceServiceGit.forceLocalRepositoryToCleanState();
        //try a clone second time, should not error
        tenantConfigurationPersistenceServiceGit.forceLocalRepositoryToCleanState();
    }

    @Test
    public void testSaveFile() throws Exception {
        ApplicationTenantConfiguration applicationTenantConfiguration = new ApplicationTenantConfiguration();
        ReportingSystemPropertiesImpl reporting = new ReportingSystemPropertiesImpl();
        reporting.setReportLanguages(Collections.singletonList("en"));
        reporting.setSchoolYear(2019);
        applicationTenantConfiguration.setReporting(reporting);
        logger.debug("localRepositoryDirectory {}", localRepositoryDirectory.getPath());
        tenantConfigurationPersistenceServiceGit.saveTenantConfiguration("CA", applicationTenantConfiguration);
    }

}
