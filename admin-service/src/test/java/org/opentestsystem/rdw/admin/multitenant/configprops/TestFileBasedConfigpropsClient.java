package org.opentestsystem.rdw.admin.multitenant.configprops;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.io.FileUtils;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;

import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

/**
 * Loads configprops from file system instead of live for testing
 */
public class TestFileBasedConfigpropsClient implements ConfigpropsClient {

    private String adminServiceConfigpropsJson;
    private String reportingAggregateServiceConfigpropsJson;
    private String reportingReportProcessorConfigpropsJson;
    private String reportingServiceConfigprops;
    private String reportingWebappConfigprops;

    public TestFileBasedConfigpropsClient() {
        try {
            adminServiceConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/admin-service-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingAggregateServiceConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/reporting-aggregate-service-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingReportProcessorConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/reporting-report-processor-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingServiceConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/reporting-service-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingWebappConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/reporting-webapp-configprops.json"),
                            StandardCharsets.UTF_8);
        } catch (Exception e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public List<String> getRawConfigurations() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Map<String, String> getRawServiceConfigurations() {
        return ImmutableMap.of("admin-service", adminServiceConfigpropsJson,
                "aggregate-service", reportingAggregateServiceConfigpropsJson,
                "report-processor", reportingReportProcessorConfigpropsJson,
                "reporting-service", reportingServiceConfigprops,
                "reporting-webapp", reportingWebappConfigprops);
    }

    @Override
    public Map<String, ResponseEntity<String>> getRawConfigurationsByService() {
        throw new UnsupportedOperationException();
    }
}
