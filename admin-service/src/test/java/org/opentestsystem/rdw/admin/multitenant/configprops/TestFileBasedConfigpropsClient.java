package org.opentestsystem.rdw.admin.multitenant.configprops;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.io.FileUtils;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;

import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

/**
 * Loads configprops from file system instead of live for testing
 */
public class TestFileBasedConfigpropsClient implements ConfigpropsClient {

    private String adminServiceConfigpropsJson;
    private String reportingAggregateServiceConfigpropsJson;
    private String reportingReportProcessorConfigpropsJson;
    private String reportingServiceConfigprops;
    private String reportingWebappConfigprops;
    private String ingestExamProcessorConfigprops;
    private String ingestGroupProcessorConfigprops;
    private String ingestMigrateOlapConfigprops;
    private String ingestMigrateReportingConfigprops;
    private String ingestTaskServiceConfigprops;
    private String ingestPackageProcessorConfigprops;
    private String ingestImportServiceConfigprops;

    public TestFileBasedConfigpropsClient() {
        try {
            adminServiceConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-reporting-admin-service-configprops.json"),
                            StandardCharsets.UTF_8);
            reportingAggregateServiceConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-reporting-aggregate-service-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingReportProcessorConfigpropsJson = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-reporting-report-processor-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingServiceConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-reporting-service-configprops.json"),
                            StandardCharsets.UTF_8);

            reportingWebappConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-reporting-webapp-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestExamProcessorConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-exam-processor-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestGroupProcessorConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-group-processor-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestMigrateOlapConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-migrate-olap-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestMigrateReportingConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-migrate-reporting-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestTaskServiceConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-task-service-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestPackageProcessorConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-package-processor-configprops.json"),
                            StandardCharsets.UTF_8);

            ingestImportServiceConfigprops = FileUtils
                    .readFileToString(ResourceUtils.getFile("classpath:configprops/rdw-ingest-import-service-configprops.json"),
                            StandardCharsets.UTF_8);

        } catch (Exception e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public List<String> getRawConfigurations() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Map<String, String> getRawServiceConfigurations() {
        return ImmutableMap.<String,String>builder()
                .put("admin-service", adminServiceConfigpropsJson)
                .put("aggregate-service", reportingAggregateServiceConfigpropsJson)
                .put("report-processor", reportingReportProcessorConfigpropsJson)
                .put("reporting-service", reportingServiceConfigprops)
                .put("reporting-webapp", reportingWebappConfigprops)
                .put("rdw-ingest-exam-processor", ingestExamProcessorConfigprops)
                .put("rdw-ingest-group-processor", ingestGroupProcessorConfigprops)
                .put("rdw-ingest-migrate-olap", ingestMigrateOlapConfigprops)
                .put("rdw-ingest-migrate-reporting", ingestMigrateReportingConfigprops)
                .put("rdw-ingest-task-service", ingestTaskServiceConfigprops)
                .put("rdw-ingest-package-processor", ingestPackageProcessorConfigprops)
                .put("rdw-ingest-import-service", ingestImportServiceConfigprops)
                .build();
    }

    @Override
    public Map<String, ResponseEntity<String>> getRawConfigurationsByService() {
        throw new UnsupportedOperationException();
    }
}
