package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.SchoolRepository;
import org.opentestsystem.rdw.admin.repository.SchoolYearRepository;
import org.opentestsystem.rdw.admin.repository.StudentGroupBatchRepository;
import org.opentestsystem.rdw.admin.service.CsvValidationService;
import org.opentestsystem.rdw.admin.service.GroupsSource;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.reporting.common.model.Organization;
import org.opentestsystem.rdw.reporting.common.model.School;
import org.opentestsystem.rdw.reporting.common.web.security.User;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

/**
 * Tests for student group files from the wild. Set up to quickly test basic validation.
 */
@RunWith(MockitoJUnitRunner.class)
public class StudentGroupFileTest {

    @Mock
    private StudentGroupBatchRepository repository;
    @Mock
    private ArchiveService archiveService;
    @Mock
    private SchoolRepository schoolRepository;
    @Mock
    private SchoolYearRepository schoolYearRepository;
    @Mock
    private GroupsSource source;
    private final User user = User.builder()
            .id("user")
            .username("test")
            .password("password")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .permissionsById(ImmutableMap.of("GROUP_WRITE", new Permission("GROUP_WRITE", PermissionScope.STATEWIDE)))
            .build();

    private DefaultStudentGroupBatchService service;

    @Before
    public void createService() {
        when(repository.create(any(StudentGroupBatch.class))).thenAnswer((Answer<StudentGroupBatch>) invocation ->
                (StudentGroupBatch) invocation.getArguments()[0]);
        final CsvValidationService validationService = new DefaultCsvValidationService(schoolRepository, schoolYearRepository);
        service = new DefaultStudentGroupBatchService(repository, archiveService, validationService, source);
    }

    @Test
    public void mespi() throws IOException {
        final StudentGroupBatch batch = runUploadTest("kenastondone7.csv", "19647336108641", 2018);
        assertThat(batch.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
    }

    private StudentGroupBatch runUploadTest(final String resource, final String schoolId, final int schoolYear) throws IOException {
        final Organization school = School.builder().id(1L).name("School").naturalId(schoolId).build();
        when(schoolRepository.findAll(any(PermissionScope.class))).thenReturn(Collections.singletonList(school));
        when(schoolYearRepository.findAll()).thenReturn(Collections.singletonList(schoolYear));

        final byte[] content = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/" + resource));
        final MultipartFile file = new MockMultipartFile(resource, resource, "text/csv", content);
        return service.upload(user, file);
    }

}
