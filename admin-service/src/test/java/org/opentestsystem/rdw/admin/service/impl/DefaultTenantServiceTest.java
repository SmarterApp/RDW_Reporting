package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableMap;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.multitenant.SandboxDataSets;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.administration.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.service.TenantConfigPropsService;
import org.opentestsystem.rdw.admin.service.TenantValidationService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.admin.service.TenantService.TenantType.SANDBOX;
import static org.opentestsystem.rdw.admin.service.TenantService.TenantType.TENANT;

public class DefaultTenantServiceTest {

    private TenantProperties tenantProperties;
    private TenantConfigPropsService tenantConfigPropsService;
    private TenantAdministrationStatusService tenantAdministrationStatusService;
    private SandboxDataSets sandboxDatasets;
    private TenantValidationService tenantValidationService;

    //class under test
    private DefaultTenantService defaultTenantService;

    //stubs
    private ImmutableMap<String, Tenant> tenantMap;
    private ApplicationTenantConfiguration aa;
    private ApplicationTenantConfiguration bb;

    private ApplicationTenantConfiguration aaS001;
    private ApplicationTenantConfiguration bbS001;

    private ApplicationTenantConfiguration cc;
    private ApplicationTenantConfiguration ccS001;

    @Before
    public void setup() {
        tenantProperties = mock(TenantProperties.class);
        tenantConfigPropsService = mock(TenantConfigPropsService.class);
        tenantAdministrationStatusService = mock(TenantAdministrationStatusService.class);
        sandboxDatasets = mock(SandboxDataSets.class);
        tenantValidationService = mock(TenantValidationService.class);
        defaultTenantService = new DefaultTenantService(tenantProperties,
                tenantConfigPropsService,
                tenantAdministrationStatusService,
                sandboxDatasets,
                tenantValidationService);

        tenantMap = ImmutableMap
                .of("AA_S001", Tenant.builder()
                                .id("AA_S001")
                                .key("AA_S001")
                                .sandbox(true)
                                .build(),
                        "AA", Tenant.builder()
                                .id("AA")
                                .key("AA")
                                .sandbox(false)
                                .build(),
                        "BB_S001", Tenant.builder()
                                .id("BB_S001")
                                .key("BB_S001")
                                .sandbox(true)
                                .build(),
                        "BB", Tenant.builder()
                                .id("BB")
                                .key("BB")
                                .sandbox(false)
                                .build()
                );

        when(tenantProperties.getTenants()).thenReturn(tenantMap);

        aa = mock(ApplicationTenantConfiguration.class);
        bb = mock(ApplicationTenantConfiguration.class);
        cc = mock(ApplicationTenantConfiguration.class);
        aaS001 = mock(ApplicationTenantConfiguration.class);
        bbS001 = mock(ApplicationTenantConfiguration.class);
        ccS001 = mock(ApplicationTenantConfiguration.class);

        when(tenantConfigPropsService.getTenantAppConfiguration("AA")).thenReturn(aa);
        when(tenantConfigPropsService.getTenantAppConfiguration("BB")).thenReturn(bb);
        when(tenantConfigPropsService.getTenantAppConfiguration("AA_S001")).thenReturn(aaS001);
        when(tenantConfigPropsService.getTenantAppConfiguration("BB_S001")).thenReturn(bbS001);

        //AA exists in both
        when(tenantAdministrationStatusService.allTenantStatusAsMap()).thenReturn(
                ImmutableMap.of(
                        "CC",
                        ImmutablePair.of(
                                TenantAdministrationStatus.CREATING_DATABASES,
                                generateTenantConfiguration("CC", false)),
                        "CC_S001",
                        ImmutablePair.of(
                                TenantAdministrationStatus.CREATING_DATABASES,
                                generateTenantConfiguration("CC_S001", true)),
                        "AA",
                        ImmutablePair.of(
                                TenantAdministrationStatus.PERSISTING_CONFIGURATION,
                                generateTenantConfiguration("AA", false)),
                        "DD",
                        ImmutablePair.of(
                                TenantAdministrationStatus.PERSISTING_CONFIGURATION,
                                generateTenantConfiguration("DD", false))
                )
        );
    }

    @Test
    public void getAllShouldReturnAll() {
        Set<TenantConfiguration> all = defaultTenantService.getAll(TENANT);
        assertThat(all.size()).isEqualTo(4);

        Set<TenantConfiguration> allSandbox = defaultTenantService.getAll(SANDBOX);
        assertThat(allSandbox.size()).isEqualTo(3);
    }

    @Test
    public void getTenantConfigurationsShouldReturnAll() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantService.getTenantConfigurations(TENANT);
        assertThat(tenantConfigurationMap.size()).isEqualTo(4);
        assertThat(tenantConfigurationMap).containsKey("AA");
        assertThat(tenantConfigurationMap).containsKey("BB");
        assertThat(tenantConfigurationMap).containsKey("CC");
        assertThat(tenantConfigurationMap).containsKey("DD");

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantService.getTenantConfigurations(SANDBOX);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(3);
        assertThat(sandboxConfigurationMap).containsKey("AA_S001");
        assertThat(sandboxConfigurationMap).containsKey("BB_S001");
        assertThat(sandboxConfigurationMap).containsKey("CC_S001");
    }

    @Test
    public void fetchInProcessTenantConfigurationsReturnsCorrectConfigurations() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantService.fetchInProcessTenantConfigurations(TENANT);
        assertThat(tenantConfigurationMap.size()).isEqualTo(2);
        assertThat(tenantConfigurationMap).containsKey("CC");
        assertThat(tenantConfigurationMap).containsKey("DD");

        //AA is duplicated, verify removed
        verify(tenantAdministrationStatusService).remove("AA");

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantService.fetchInProcessTenantConfigurations(SANDBOX);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(1);
        assertThat(sandboxConfigurationMap).containsKey("CC_S001");
    }

    @Test
    public void fetchActiveTenantConfigurationsReturnsCorrectConfigurations() {
        Map<String, TenantConfiguration> tenantConfigurationMap =
                defaultTenantService.fetchActiveTenantConfigurations(SANDBOX);
        assertThat(tenantConfigurationMap.size()).isEqualTo(2);
        assertThat(tenantConfigurationMap.containsKey("AA_S001")).isTrue();
        assertThat(tenantConfigurationMap.containsKey("AA")).isFalse();
        assertThat(tenantConfigurationMap.containsKey("BB_S001")).isTrue();
        assertThat(tenantConfigurationMap.containsKey("BB")).isFalse();

        Map<String, TenantConfiguration> sandboxConfigurationMap =
                defaultTenantService.fetchActiveTenantConfigurations(TENANT);
        assertThat(sandboxConfigurationMap.size()).isEqualTo(2);
        assertThat(sandboxConfigurationMap.containsKey("AA_S001")).isFalse();
        assertThat(sandboxConfigurationMap.containsKey("AA")).isTrue();
        assertThat(sandboxConfigurationMap.containsKey("BB_S001")).isFalse();
        assertThat(sandboxConfigurationMap.containsKey("BB")).isTrue();
    }

    @Test
    public void filterTenantsByTypeShouldFilter() {
        final Map<String, Tenant> sandboxMap =
                defaultTenantService.filterTenantsByType(SANDBOX);
        assertThat(sandboxMap.size())
                .isEqualTo(2);
        assertThat(sandboxMap.values())
                .contains(this.tenantMap.get("AA_S001"));

        final Map<String, Tenant> tenantMap =
                defaultTenantService.filterTenantsByType(TENANT);
        assertThat(tenantMap.size())
                .isEqualTo(2);
        assertThat(tenantMap.values())
                .contains(this.tenantMap.get("BB"));
    }

    @Test
    public void parentTenantKeyShouldParseParent() {
        assertThat(defaultTenantService.parentTenantKey("AA_S001"))
                .isEqualTo("AA");
        assertThat(defaultTenantService.parentTenantKey("BB_S999"))
                .isEqualTo("BB");
        assertThat(defaultTenantService.parentTenantKey("CC"))
                .isNull();
    }

    TenantConfiguration generateTenantConfiguration(String key, boolean isSandbox) {
        TenantConfiguration configuration = new TenantConfiguration();
        configuration.setTenant(Tenant.builder()
                .id(key)
                .key(key)
                .sandbox(isSandbox)
                .build());
        return configuration;
    }
}
