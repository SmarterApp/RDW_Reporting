package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.opentestsystem.rdw.reporting.common.configuration.AggregateReportingPropertiesTenant;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemPropertiesImpl;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;

import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTenantServiceTest {

    private TenantProperties tenantProperties;
    private InMemoryTenantRepository inMemoryTenantRepository;
    private ReportingTenantIdResolver reportingTenantIdResolver;
    private DefaultTenantConfigPropsService defaultTenantConfigPropsService;

    private DefaultTenantService service;

    @Before
    public void setUp() {

        tenantProperties = mock(TenantProperties.class);
        inMemoryTenantRepository = mock(InMemoryTenantRepository.class);
        reportingTenantIdResolver = mock(ReportingTenantIdResolver.class);
        defaultTenantConfigPropsService = mock(DefaultTenantConfigPropsService.class);

        service = new DefaultTenantService(tenantProperties, inMemoryTenantRepository, reportingTenantIdResolver, defaultTenantConfigPropsService);
    }

    @Test
    public void itShouldRetrieveAllTenants() {
        // return a set of tenantConfigurations
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA, mockTenantNV);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(get2tenants()));

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);

        verify(inMemoryTenantRepository, times(2)).getAll();
        verify(tenantProperties).getTenants();
        verify(defaultTenantConfigPropsService, times(2)).getTenantAppConfiguration(any());


        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent() ) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getId()).isEqualTo(mockTenantCA.getTenant().getId());
            assertThat(tenantCACfg.get().getTenant().getName()).isEqualTo(mockTenantCA.getTenant().getName());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent() ) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            assertThat(tenantNVCfg.get().getTenant().getId()).isEqualTo(mockTenantNV.getTenant().getId());
            assertThat(tenantNVCfg.get().getTenant().getName()).isEqualTo(mockTenantNV.getTenant().getName());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

    }

    /**
     * Lookup the given key in the AllApplicationConfiguration tenant list
     * @param allApplicationTenantConfiguration conatains the tenant list to look through
     * @param key The key of the tenant to find
     * @return tenantConfiguration if key is found
     */
    private Optional<TenantConfiguration> getTenantConfigurationFromKey(final AllApplicationTenantConfiguration allApplicationTenantConfiguration, String key) {
        return allApplicationTenantConfiguration.getTenants().stream()
                .filter(tenant ->
                        tenant.getTenant().getKey().equals(key)
                ).findFirst();
    }

    @Test
    public void ifShouldCreateTenant() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceExists(any(),any())).thenReturn(false);

        // Add new tenantConfiguration
        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository).add(tenantConfigurationNV);
        verify(inMemoryTenantRepository).tenantExists(tenantConfigurationNV.getTenant().getKey());
    }

    @Test (expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantTenantExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository,times(0)).add(tenantConfigurationNV);
    }

    @Test (expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantArchiveExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);
    }

    @Test (expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantDatabaseExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceExists(any(),any())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);
    }

    @Test
    public void itShouldDeleteTenant() {
        // create a tenantConfiguration to test delete
        String id = TenantConfigurationStubs.createMockTenantCA().getTenant().getId();

        // now ok to delete
        service.deleteTenant(id);

        // verify tenant was removed from list
        verify(inMemoryTenantRepository).delete(id);
    }


    @Test
    public void itShouldUpdateTenant() {
        String expectedDescription = "Updating description from the test";
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        TenantConfiguration tenantConfigurationUpdated = TenantConfigurationStubs.createMockTenantCA();
        tenantConfigurationUpdated.getTenant().setDescription(expectedDescription);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(get2tenants()));
        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(true);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfigurationUpdated);

        TenantConfiguration tenantCfg = service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
        assertThat(tenantCfg).isNotNull();
        assertThat(tenantCfg.getTenant().getDescription()).isEqualTo(tenantConfigurationUpdated.getTenant().getDescription());
    }
    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateTenant() {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();

        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.of(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.getTenantNV()));
        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(false);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfiguration);

        service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
    }

    private Map<String, Tenant> get2tenants() {
        Map<String, Tenant> tenants = new HashMap<>();
        tenants.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.getTenantCA());
        tenants.put(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.getTenantNV());
        return tenants;
    }

    private Map<String, ReportingSystemPropertiesImpl> getTenantReportingSystemSettings() {
        Map<String, ReportingSystemPropertiesImpl> reportingMap = new HashMap<>();
        reportingMap.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.createMockTenantCA().getApplicationTenantConfiguration().getReporting());
        reportingMap.put(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getReporting());
        return reportingMap;
    }

    private Map<String, ArchivePropertiesTenant> getTenantArchivePropertiesMap() {
        Map<String, ArchivePropertiesTenant> reportingMap = new HashMap<>();
        reportingMap.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.createMockTenantCA().getApplicationTenantConfiguration().getArchiveProperties());
        reportingMap.put(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getArchiveProperties());
        return reportingMap;
    }

    private Map<String, AggregateReportingPropertiesTenant> getTenantAggregateReportingMap() {
        Map<String, AggregateReportingPropertiesTenant> reportingMap = new HashMap<>();
        reportingMap.put(TenantConfigurationStubs.getTenantCA().getKey(),
                TenantConfigurationStubs.createMockTenantCA().getApplicationTenantConfiguration().getAggregateReportingPropertiesTenant());
        reportingMap.put(TenantConfigurationStubs.getTenantNV().getKey(),
                TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getAggregateReportingPropertiesTenant());
        return reportingMap;
    }

    private Map<String, DataSourceElementsTenant> getTenantDataSources(String dataSourceName) {
        Map<String, DataSourceElementsTenant> dataSourceMap = new HashMap<>();
        dataSourceMap.put(TenantConfigurationStubs.getTenantCA().getKey(),
                TenantConfigurationStubs.createMockTenantCA().getApplicationTenantConfiguration().getDataSources().get(dataSourceName));
        dataSourceMap.put(TenantConfigurationStubs.getTenantNV().getKey(),
                TenantConfigurationStubs.createMockTenantNV().getApplicationTenantConfiguration().getDataSources().get(dataSourceName));
        return dataSourceMap;
    }


}
