package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_az"})
@EnableConfigurationProperties
public class DefaultTenantServiceTest {

    @Autowired
    private TenantProperties tenantProperties;

    private InMemoryTenantRepository inMemoryTenantRepository;

    private DefaultTenantService service;

    @Before
    public void setUp() {
        //creating a new repo so the cache is empty at the start of the tests
        inMemoryTenantRepository = new InMemoryTenantRepository();
        service = new DefaultTenantService(tenantProperties, inMemoryTenantRepository);
        // todo remove once mock is gone
        inMemoryTenantRepository.clearTenants();  // atm service is automatically populating Mock data
    }

    @Test
    public void itShouldRetrieveAllTenants() {
        // Add a couple of tenantConfiguration to test
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        service.addTenantConfiguration(tenantConfiguration);

        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        service.addTenantConfiguration(tenantConfigurationNV);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationfromKey(allApplicationTenantConfiguration, tenantConfiguration.getTenant().getKey());
        if (tenantCACfg.isPresent() ) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(tenantConfiguration.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getId()).isEqualTo(tenantConfiguration.getTenant().getId());
            assertThat(tenantCACfg.get().getTenant().getName()).isEqualTo(tenantConfiguration.getTenant().getName());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(tenantConfiguration.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(tenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationfromKey(allApplicationTenantConfiguration, tenantConfigurationNV.getTenant().getKey());
        if (tenantNVCfg.isPresent() ) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(tenantConfigurationNV.getTenant().getKey());
            assertThat(tenantNVCfg.get().getTenant().getId()).isEqualTo(tenantConfigurationNV.getTenant().getId());
            assertThat(tenantNVCfg.get().getTenant().getName()).isEqualTo(tenantConfigurationNV.getTenant().getName());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(tenantConfigurationNV.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(tenantConfigurationNV.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

    }

    /**
     * Lookup the given key in the AllApplicationConfiguration tenant list
     * @param allApplicationTenantConfiguration conatains the tenant list to look through
     * @param key The key of the tenant to find
     * @return tenantConfiguration if key is found
     */
    private Optional<TenantConfiguration> getTenantConfigurationfromKey(final AllApplicationTenantConfiguration allApplicationTenantConfiguration, String key) {
        return allApplicationTenantConfiguration.getTenants().stream()
                .filter(tenant ->
                        tenant.getTenant().getKey().equals(key)
                ).findFirst();
    }

    @Test
    public void ifShouldCreateTenant() {
        // create default tenant
        TenantConfiguration defaultTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        service.addTenantConfiguration(defaultTenantConfiguration);

        // Add new tenantConfiguration
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        service.createTenant(tenantConfigurationNV);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();
        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);
    }

    @Test
    public void itShouldDeleteTenant() {
        // create a tenantConfiguration to test delete
        // Add a couple of tenantConfiguration to test
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        service.addTenantConfiguration(tenantConfiguration);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();
        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(1);

        // now ok to delete
        service.deleteTenant(tenantConfiguration.getTenant().getId());

        // verify tenant was removed from list
        AllApplicationTenantConfiguration allApplicationTenantConfigurationDel = service.getAll();
        assertThat(allApplicationTenantConfigurationDel.getTenants()).isEmpty();
        assertThat(allApplicationTenantConfigurationDel.getTenants().size()).isEqualTo(0);
    }


    @Test
    public void itShouldUpdateTenant() {
        String expectedDescription = "Changing the Description";
        // create  tenant to update
        TenantConfiguration defaultTenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        service.addTenantConfiguration(defaultTenantConfiguration);

        // create a tenantConfiguration to test
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();

        Tenant tenant = tenantConfiguration.getTenant();
        tenant.setDescription(expectedDescription);
        tenantConfiguration.setTenant(tenant);

        service.updateTenant(tenantConfiguration);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();
        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(1);
        Optional<TenantConfiguration> updatedTenant = getTenantConfigurationfromKey(allApplicationTenantConfiguration, tenantConfiguration.getTenant().getKey());
        updatedTenant.ifPresent(tenantConfiguration1 -> assertThat(tenantConfiguration1.getTenant().getDescription()).isEqualTo(expectedDescription));
    }


    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }
    }
}
