package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.junit.Before;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import org.opentestsystem.rdw.admin.exception.DuplicateTenantException;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationStatus;
import org.opentestsystem.rdw.admin.multitenant.TenantAdministrationStatusService;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.reporting.common.multitenant.ReportingTenantIdResolver;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTenantServiceTest {

    private TenantProperties tenantProperties;
    private InMemoryTenantRepository inMemoryTenantRepository;
    private DefaultTenantConfigPropsService defaultTenantConfigPropsService;
    private TenantAdministrationStatusService tenantAdministrationStatusService;

    private DefaultTenantService service;

    @Before
    public void createService() {

        tenantProperties = mock(TenantProperties.class);
        inMemoryTenantRepository = mock(InMemoryTenantRepository.class);
        final ReportingTenantIdResolver reportingTenantIdResolver = mock(ReportingTenantIdResolver.class);
        defaultTenantConfigPropsService = mock(DefaultTenantConfigPropsService.class);
        tenantAdministrationStatusService = mock(TenantAdministrationStatusService.class);

        service = new DefaultTenantService(tenantProperties, inMemoryTenantRepository, reportingTenantIdResolver, defaultTenantConfigPropsService, tenantAdministrationStatusService);
    }

    @Test
    public void itShouldRetrieveAllTenants() {
        // return a set of tenantConfigurations
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA, mockTenantNV);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(get2tenants()));
        //TODO: Fixme
        //when(tenantAdministrationStatusService.getTenants()).thenReturn(new HashMap<>());

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);

        verify(inMemoryTenantRepository, times(2)).getAll();
        verify(tenantProperties).getTenants();
        verify(defaultTenantConfigPropsService, times(2)).getTenantAppConfiguration(any());
        //TODO: Fixme
        //verify(tenantAdministrationStatusService).getTenants();

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent()) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getId()).isEqualTo(mockTenantCA.getTenant().getId());
            assertThat(tenantCACfg.get().getTenant().getName()).isEqualTo(mockTenantCA.getTenant().getName());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent()) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            assertThat(tenantNVCfg.get().getTenant().getId()).isEqualTo(mockTenantNV.getTenant().getId());
            assertThat(tenantNVCfg.get().getTenant().getName()).isEqualTo(mockTenantNV.getTenant().getName());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }
    }

    @Test
    public void itShouldRetrieveAllTenantsIncludingTenantBeingCreated() {
        // return the only tenant - CA
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        Map<String, Tenant> tenants = new HashMap<>();
        tenants.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.getTenantCA());
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(tenants));

        // create tenant in a create state
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        mockTenantNV.getTenant().setCreated(null);
        Map<String, TenantAdministrationStatus> statusTenantMap = new HashMap<>();
        statusTenantMap.put(mockTenantNV.getTenant().getKey(), TenantAdministrationStatus.CREATING_DATABASES);
        //TODO: Fixme
        //when(tenantAdministrationStatusService.getTenants()).thenReturn(statusTenantMap);
        when(tenantAdministrationStatusService.findStatus(mockTenantNV.getTenant().getKey())).thenReturn(Optional.of(ImmutablePair.of(TenantAdministrationStatus.CREATING_DATABASES, mockTenantNV)));

        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA, mockTenantNV);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);

        verify(inMemoryTenantRepository, times(2)).getAll();
        verify(tenantProperties).getTenants();
        verify(defaultTenantConfigPropsService, times(2)).getTenantAppConfiguration(any());
        //TODO: Fixme
        //verify(tenantAdministrationStatusService).getTenants();
        verify(tenantAdministrationStatusService, times(0)).remove(mockTenantNV.getTenant().getKey());
        verify(tenantAdministrationStatusService).findStatus(mockTenantNV.getTenant().getKey());

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent()) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getCreated()).isNotNull();
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent()) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            // expecting no create date
            assertThat(tenantNVCfg.get().getTenant().getCreated()).isNull();
        }
    }

    @Test
    public void itShouldRemoveTenantSuccessfullyCreated() {
        // return a set of tenantConfigurations
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(get2tenants()));

        // create tenant in a create state
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        Map<String, TenantAdministrationStatus> statusTenantMap = new HashMap<>();
        statusTenantMap.put(mockTenantNV.getTenant().getKey(), TenantAdministrationStatus.CREATING_DATABASES);
        //TODO: Fixme
        //when(tenantAdministrationStatusService.getTenants()).thenReturn(statusTenantMap);

        // return list of both
        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA, mockTenantNV);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);

        verify(inMemoryTenantRepository, times(2)).getAll();
        verify(tenantProperties).getTenants();
        verify(defaultTenantConfigPropsService, times(2)).getTenantAppConfiguration(any());
        //TODO: Fixme
        //verify(tenantAdministrationStatusService).getTenants();
        // make sure remove is called
        verify(tenantAdministrationStatusService).remove(mockTenantNV.getTenant().getKey());
        // make sure with nothing in status map - .findStatus() should not be called
        verify(tenantAdministrationStatusService, times(0)).findStatus(mockTenantNV.getTenant().getKey());

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent()) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getCreated()).isNotNull();
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent()) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            assertThat(tenantNVCfg.get().getTenant().getCreated()).isNotNull();
        }
    }

    @Test
    public void itShouldRetrieveAllTenantsWithSandboxesBeingCreated() {
        // return the only tenant - CA
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        Map<String, Tenant> tenants = new HashMap<>();
        tenants.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.getTenantCA());
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(tenants));

        // create sandbox in a create state
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        mockTenantNV.getTenant().setSandbox(true);
        mockTenantNV.getTenant().setCreated(null);
        Map<String, TenantAdministrationStatus> statusTenantMap = new HashMap<>();
        statusTenantMap.put(mockTenantNV.getTenant().getKey(), TenantAdministrationStatus.CREATING_DATABASES);
        //TODO: Fixme
        //when(tenantAdministrationStatusService.getTenants()).thenReturn(statusTenantMap);
        when(tenantAdministrationStatusService.findStatus(mockTenantNV.getTenant().getKey())).thenReturn(Optional.of(ImmutablePair.of(TenantAdministrationStatus.CREATING_DATABASES, mockTenantNV)));

        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);

        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(1);

        verify(inMemoryTenantRepository, times(2)).getAll();
        verify(tenantProperties).getTenants();
        verify(defaultTenantConfigPropsService, times(1)).getTenantAppConfiguration(any());
        //TODO: Fixme
        //verify(tenantAdministrationStatusService).getTenants();
        verify(tenantAdministrationStatusService, times(0)).remove(mockTenantNV.getTenant().getKey());
        verify(tenantAdministrationStatusService).findStatus(mockTenantNV.getTenant().getKey());

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent()) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getCreated()).isNotNull();
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationFromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent()) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            // expecting no create date
            assertThat(tenantNVCfg.get().getTenant().getCreated()).isNull();
        }
    }


    /**
     * Lookup the given key in the AllApplicationConfiguration tenant list
     *
     * @param allApplicationTenantConfiguration contains the tenant list to look through
     * @param key                               The key of the tenant to find
     * @return tenantConfiguration if key is found
     */
    private Optional<TenantConfiguration> getTenantConfigurationFromKey(final AllApplicationTenantConfiguration allApplicationTenantConfiguration, String key) {
        return allApplicationTenantConfiguration.getTenants().stream()
                .filter(tenant ->
                        tenant.getTenant().getKey().equals(key)
                ).findFirst();
    }

    @Test
    public void ifShouldCreateTenant() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceExists(any(), any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceOlapExists(any(), any())).thenReturn(false);

        // Add new tenantConfiguration
        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository).add(tenantConfigurationNV);
        verify(inMemoryTenantRepository).tenantExists(tenantConfigurationNV.getTenant().getKey());
    }


    @Test(expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantMisConfiguredDataSource() {
        // Create tenantConfiguration to return
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        tenantConfigurationNV.getApplicationTenantConfiguration().getDataSources().get(RDWDataSourceNames.REPORTING_RO.getName()).setUrlParts(null);
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);

        service.createTenant(tenantConfigurationNV);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantOlapDataSourceExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceExists(any(), any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceOlapExists(any(), any())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository, times(0)).add(tenantConfigurationNV);
    }

    @Test(expected = DuplicateTenantException.class)
    public void ifShouldNotCreateTenantTenantExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository, times(0)).add(tenantConfigurationNV);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantArchiveExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ifShouldNotCreateTenantDatabaseExists() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();
        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);
        when(defaultTenantConfigPropsService.archivePrefixExists(any())).thenReturn(false);
        when(defaultTenantConfigPropsService.dataSourceExists(any(), any())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);
    }

    @Test
    public void itShouldDeleteTenant() {
        // create a tenantConfiguration to test delete
        String id = TenantConfigurationStubs.createMockTenantCA().getTenant().getId();

        // now ok to delete
        service.deleteTenant(id);

        // verify tenant was removed from list
        verify(inMemoryTenantRepository).delete(id);
    }

    @Test
    public void itShouldUpdateTenant() {
        String expectedDescription = "Updating description from the test";
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();
        TenantConfiguration tenantConfigurationUpdated = TenantConfigurationStubs.createMockTenantCA();
        tenantConfigurationUpdated.getTenant().setDescription(expectedDescription);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.copyOf(get2tenants()));
        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(true);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfigurationUpdated);

        TenantConfiguration tenantCfg = service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
        assertThat(tenantCfg).isNotNull();
        assertThat(tenantCfg.getTenant().getDescription()).isEqualTo(tenantConfigurationUpdated.getTenant().getDescription());
    }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateTenant() {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();

        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.of(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.getTenantNV()));
        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(false);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfiguration);

        service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
    }

    private Map<String, Tenant> get2tenants() {
        Map<String, Tenant> tenants = new HashMap<>();
        tenants.put(TenantConfigurationStubs.getTenantCA().getKey(), TenantConfigurationStubs.getTenantCA());
        tenants.put(TenantConfigurationStubs.getTenantNV().getKey(), TenantConfigurationStubs.getTenantNV());
        return tenants;
    }
}
