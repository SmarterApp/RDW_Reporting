package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.opentestsystem.rdw.admin.model.AllApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.ApplicationTenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfiguration;
import org.opentestsystem.rdw.admin.model.TenantConfigurationStubs;
import org.opentestsystem.rdw.admin.repository.impl.InMemoryTenantRepository;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsTenant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collections;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant"})
@EnableConfigurationProperties
public class DefaultTenantServiceTest {

    @Autowired
    private TenantProperties tenantProperties;

    @Mock
    private InMemoryTenantRepository inMemoryTenantRepository;

    private DefaultTenantService service;

    @Mock
    private  DefaultTenantPropertiesService defaultTenantPropertiesService;


    @Before
    public void setUp() {
        service = new DefaultTenantService(tenantProperties, inMemoryTenantRepository, defaultTenantPropertiesService);
    }

    @Test
    public void itShouldRetrieveAllTenants() {
        // return a set of tenantConfigurations
        TenantConfiguration mockTenantCA = TenantConfigurationStubs.createMockTenantCA();
        TenantConfiguration mockTenantNV = TenantConfigurationStubs.createMockTenantNV();
        Set<TenantConfiguration> tenantConfigurationSet = ImmutableSet.of(mockTenantCA, mockTenantNV);
        when(inMemoryTenantRepository.getAll()).thenReturn(tenantConfigurationSet);


        // test get all
        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(2);
        verify(inMemoryTenantRepository).getAll();

        Optional<TenantConfiguration> tenantCACfg = getTenantConfigurationfromKey(allApplicationTenantConfiguration, mockTenantCA.getTenant().getKey());
        if (tenantCACfg.isPresent() ) {
            assertThat(tenantCACfg.get().getTenant().getKey()).isEqualTo(mockTenantCA.getTenant().getKey());
            assertThat(tenantCACfg.get().getTenant().getId()).isEqualTo(mockTenantCA.getTenant().getId());
            assertThat(tenantCACfg.get().getTenant().getName()).isEqualTo(mockTenantCA.getTenant().getName());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantCACfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantCA.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }

        Optional<TenantConfiguration> tenantNVCfg = getTenantConfigurationfromKey(allApplicationTenantConfiguration, mockTenantNV.getTenant().getKey());
        if (tenantNVCfg.isPresent() ) {
            assertThat(tenantNVCfg.get().getTenant().getKey()).isEqualTo(mockTenantNV.getTenant().getKey());
            assertThat(tenantNVCfg.get().getTenant().getId()).isEqualTo(mockTenantNV.getTenant().getId());
            assertThat(tenantNVCfg.get().getTenant().getName()).isEqualTo(mockTenantNV.getTenant().getName());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl());
            assertThat(tenantNVCfg.get().getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                    .isEqualTo(mockTenantNV.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot());
        }
    }

    @Test
    public void itShouldRetrieveDefaultsAndEmptyTenants() {
        // return no tenants
        when(inMemoryTenantRepository.getAll()).thenReturn(Collections.emptySet());
        // get the expected defaults
        ApplicationTenantConfiguration expectedDefaultProperties
                = TenantConfigurationStubs.getMockDefaultApplicationTenantConfiguration();


        AllApplicationTenantConfiguration allApplicationTenantConfiguration = service.getAll();

        assertThat(allApplicationTenantConfiguration.getTenants()).isEmpty();
        assertThat(allApplicationTenantConfiguration.getTenants().size()).isEqualTo(0);
        // check ArchiveProperties
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getUriRoot())
                .isEqualTo(expectedDefaultProperties.getArchiveProperties().getUriRoot());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getPathPrefix())
                .isEqualTo(expectedDefaultProperties.getArchiveProperties().getPathPrefix());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getS3AccessKey())
                .isEqualTo(expectedDefaultProperties.getArchiveProperties().getS3AccessKey());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getS3RegionStatic())
                .isEqualTo(expectedDefaultProperties.getArchiveProperties().getS3RegionStatic());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getArchiveProperties().getS3SecretKey())
                .isEqualTo(expectedDefaultProperties.getArchiveProperties().getS3SecretKey());
        // Check Reporting Properties
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getAccessDeniedUrl())
                .isEqualTo(expectedDefaultProperties.getReporting().getAccessDeniedUrl());

        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getState())
                .isEqualToIgnoringNullFields(expectedDefaultProperties.getReporting().getState());

        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getAnalyticsTrackingId())
                .isEqualTo(expectedDefaultProperties.getReporting().getAnalyticsTrackingId());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getInterpretiveGuideUrl())
                .isEqualTo(expectedDefaultProperties.getReporting().getInterpretiveGuideUrl());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getIrisVendorId())
                .isEqualTo(expectedDefaultProperties.getReporting().getIrisVendorId());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getLandingPageUrl())
                .isEqualTo(expectedDefaultProperties.getReporting().getLandingPageUrl());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getMinItemDataYear())
                .isEqualTo(expectedDefaultProperties.getReporting().getMinItemDataYear());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getSchoolYear())
                .isEqualTo(expectedDefaultProperties.getReporting().getSchoolYear());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getTranslationLocation())
                .isEqualTo(expectedDefaultProperties.getReporting().getTranslationLocation());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getUserGuideUrl())
                .isEqualTo(expectedDefaultProperties.getReporting().getUserGuideUrl());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getState()).isNotNull();
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getState().getName())
                .isEqualTo(expectedDefaultProperties.getReporting().getState().getName());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getState().getCode())
                .isEqualTo(expectedDefaultProperties.getReporting().getState().getCode());
        //assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getReportLanguages()).isNotEmpty();
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getReportLanguages())
                .isEqualTo(expectedDefaultProperties.getReporting().getReportLanguages());
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getReporting().getTargetReport())
                .isEqualToIgnoringNullFields(expectedDefaultProperties.getReporting().getTargetReport());

        //Check Datasources
        assertThat(allApplicationTenantConfiguration.getApplicationTenantConfiguration().getDataSources()).isNotNull();
        allApplicationTenantConfiguration.getApplicationTenantConfiguration().getDataSources().forEach( (k,v) -> {
            DataSourceElementsTenant dataSource = v;
            DataSourceElementsTenant expectedDataSource = expectedDefaultProperties.getDataSources().get(k);
            assertThat(dataSource.getPassword()).isEqualTo(expectedDataSource.getPassword());
            assertThat(dataSource.getUrl()).isEqualTo(expectedDataSource.getUrl());
            assertThat(dataSource.getUsername()).isEqualTo(expectedDataSource.getUsername());
            assertThat(dataSource.getInitialSize()).isEqualTo(expectedDataSource.getInitialSize());
            assertThat(dataSource.getMaxActive()).isEqualTo(expectedDataSource.getMaxActive());
            assertThat(dataSource.getMaxIdle()).isEqualTo(expectedDataSource.getMaxIdle());
            assertThat(dataSource.getMinIdle()).isEqualTo(expectedDataSource.getMinIdle());
            assertThat(dataSource.getJdbcInterceptors()).isEqualTo(expectedDataSource.getJdbcInterceptors());
            assertThat(dataSource.getDriverClassName()).isEqualTo(expectedDataSource.getDriverClassName());
            assertThat(dataSource.getRemoveAbandonedTimeout()).isEqualTo(expectedDataSource.getRemoveAbandonedTimeout());
            assertThat(dataSource.isRemoveAbandoned()).isEqualTo(expectedDataSource.isRemoveAbandoned());
            assertThat(dataSource.isLogAbandoned()).isEqualTo(expectedDataSource.isLogAbandoned());
            assertThat(dataSource.getTestWhileIdle()).isEqualTo(expectedDataSource.getTestWhileIdle());
        });

    }


    /**
     * Lookup the given key in the AllApplicationConfiguration tenant list
     * @param allApplicationTenantConfiguration conatains the tenant list to look through
     * @param key The key of the tenant to find
     * @return tenantConfiguration if key is found
     */
    private Optional<TenantConfiguration> getTenantConfigurationfromKey(final AllApplicationTenantConfiguration allApplicationTenantConfiguration, String key) {
        return allApplicationTenantConfiguration.getTenants().stream()
                .filter(tenant ->
                        tenant.getTenant().getKey().equals(key)
                ).findFirst();
    }

    @Test
    public void ifShouldCreateTenant() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();

        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(false);

        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository).add(tenantConfigurationNV);
    }

    @Test (expected = NoSuchElementException.class)
    public void ifShouldNotCreateTenant() {
        // Create tenantConfiguration to add
        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createMockTenantNV();

        when(inMemoryTenantRepository.add(tenantConfigurationNV)).thenReturn(tenantConfigurationNV);
        when(inMemoryTenantRepository.tenantExists(tenantConfigurationNV.getTenant().getKey())).thenReturn(true);

        service.createTenant(tenantConfigurationNV);

        verify(inMemoryTenantRepository,times(0)).add(tenantConfigurationNV);
    }

    @Test
    public void itShouldDeleteTenant() {
        // create a tenantConfiguration to test delete
        String id = TenantConfigurationStubs.createMockTenantCA().getTenant().getId();

        // now ok to delete
        service.deleteTenant(id);

        // verify tenant was removed from list
        verify(inMemoryTenantRepository).delete(id);

    }


    @Test
    public void itShouldUpdateTenant() {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();

        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(true);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfiguration);

        service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
   }

    @Test(expected = NoSuchElementException.class)
    public void itShouldNotUpdateTenant() {
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createMockTenantCA();

        when(inMemoryTenantRepository.tenantExists(tenantConfiguration.getTenant().getKey())).thenReturn(false);
        when(inMemoryTenantRepository.update(tenantConfiguration)).thenReturn(tenantConfiguration);

        service.updateTenant(tenantConfiguration);

        verify(inMemoryTenantRepository).update(tenantConfiguration);
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenant-properties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }
    }
}