package org.opentestsystem.rdw.admin.service.impl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.configuration.multitenant.*;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class DefaultTenantServiceTest {
    private static final Logger logger = LoggerFactory.getLogger(DefaultTenantServiceTest.class);

    private TenantProperties tenantProperties;

    //private HashMap<String, TenantConfiguration> tenantConfigurationMap = new HashMap<>();
    private DefaultTenantService service;

    @Before
    public void setUp() {
        //creating a new service so the cache is empty at the start of the tests
        service = new DefaultTenantService(tenantProperties);
    }

    @Test
    public void itShouldRetrieveAllTenants() {
        logger.info("TenantService getAll Test");

        // Add a couple of tenantConfiguration to test
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaults();
        tenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideCA());
        service.addTenantConfiguration(tenantConfiguration);

        TenantConfiguration tenantConfigurationNV = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        tenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideNV());
        service.addTenantConfiguration(tenantConfigurationNV);

        List<TenantConfiguration> tenantList = service.getAll();
        verifyTenantList(tenantList, 2);

        // visual dump of tenants
        tenantList.forEach(tenant -> {
            logger.info("Tenant id = {}", tenant.getTenant().getId());
            logger.info("Tenant Description = {}", tenant.getTenant().getDescription());
        });

    }

    @Test
    public void ifSHouldCreateTenant() {
        logger.info("TenantService createTenant Test");
        // create default tenant
        TenantConfiguration defaultTenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaults();
        defaultTenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideCA());
        service.addTenantConfiguration(defaultTenantConfiguration);

        // Add new tenantOverride
        TenantOverride tenantOverride = TenantConfigurationStubs.getTenantOverrideNV();
        service.createTenant(tenantOverride);

        List<TenantConfiguration> tenantList = service.getAll();
        verifyTenantList(tenantList, 2, tenantOverride);
    }

    @Test
    public void itShouldDeleteTenant() {
        // create a tenantConfiguration to test delete
        // Add a couple of tenantConfiguration to test
        TenantConfiguration tenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaults();
        tenantConfiguration.setTenantOverride(TenantConfigurationStubs.getTenantOverrideCA());
        service.addTenantConfiguration(tenantConfiguration);

        // verify AZ tenant is created
        List<TenantConfiguration> tenantList = service.getAll();
        verifyTenantList(tenantList, 1, tenantConfiguration.getTenantOverride());

        // now ok to delete
        service.deleteTenant(tenantConfiguration.getTenant().getId());

        // verify tenant was removed from list
        tenantList.clear();
        tenantList = service.getAll();
        assertThat(tenantList).isNotNull();
        assertThat(tenantList).isEmpty();
    }


    @Test
    public void itShouldUpdateTenant() {
        logger.info("TenantService updateTenant Test");
        // create  tenant to update
        TenantConfiguration defaultTenantConfiguration = TenantConfigurationStubs.createTenantWithMockDefaultsNV();
        TenantOverride tenantOverride = TenantConfigurationStubs.getTenantOverrideNV();
        defaultTenantConfiguration.setTenantOverride(tenantOverride);
        service.addTenantConfiguration(defaultTenantConfiguration);

        // create a tenantConfiguration to test
        TenantProperties.Tenant tenant = tenantOverride.getTenant();
        tenant.setDescription("Changing the Description");
        tenantOverride.setTenant(tenant);

        service.updateTenant(tenantOverride);

        List<TenantConfiguration> tenantList = service.getAll();
        verifyTenantList(tenantList, 1, tenantOverride);
    }

    /**
     * Verify the list Basics
     * @param tenantList list of current Tenants
     * @param expectedSize how many tenants are expected in the list
     */
    private void verifyTenantList(List<TenantConfiguration> tenantList, int expectedSize) {
        assertThat(tenantList).isNotNull();
        assertThat(tenantList).isNotEmpty();
        logger.info("TenantListSize = {}", tenantList.size());
        assertThat(tenantList.size()).isEqualTo(expectedSize);
    }

    /**
     * Verify a specific tenant in the list returned from getAll
     * @param tenantList list of current Tenants
     * @param expectedSize how many tenants are expected in the list
     * @param expectedTenantOverride the tenantConfiguration to validate against same tenantId in list
     */
    private void verifyTenantList(List<TenantConfiguration> tenantList, int expectedSize, TenantOverride expectedTenantOverride) {
        verifyTenantList(tenantList, expectedSize);

        tenantList.forEach(tenant -> verifyTenant(tenant.getTenantOverride(), expectedTenantOverride));
    }

    /**
     * Validate the two given tenants are equal
     * todo improve the validation
     * @param tenantOverride the tenantConfiguration to test
     * @param expectedTenantOverride the tenant used to create or update the tenant config
     */
    private void verifyTenant(TenantOverride tenantOverride, TenantOverride expectedTenantOverride) {

        // only verify if the tenantId is found in the list
        if(tenantOverride.getTenant().getId().equals(expectedTenantOverride.getTenant().getId()) ) {
            assertThat(tenantOverride.getTenant().getId()).isEqualTo(expectedTenantOverride.getTenant().getId());
            logger.info("Verified Tenant id = {}", tenantOverride.getTenant().getId());

            String description = tenantOverride.getTenant().getDescription();
            assertThat(description).isEqualTo(expectedTenantOverride.getTenant().getDescription());
            logger.info("Verified Tenant Description = {}", description);

            // TODO test each level
        }
    }

}