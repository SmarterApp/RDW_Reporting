package org.opentestsystem.rdw.admin.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.ReportTemplateInfo;
import org.opentestsystem.rdw.admin.repository.ReportTemplateInfoRepository;
import org.opentestsystem.rdw.reporting.common.repository.ReportTemplateRepository;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Properties;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultReportTemplateServiceTest {

    private DefaultReportTemplateService service;
    private ReportTemplateInfoRepository infoRepository;
    private ReportTemplateRepository templateRepository;

    @Before
    public void createService() {
        infoRepository = mock(ReportTemplateInfoRepository.class);
        templateRepository = mock(ReportTemplateRepository.class);

        service = new DefaultReportTemplateService(infoRepository, templateRepository);
    }

    @Test
    public void itShouldUseRepositoriesToList() {
        final List<String> existingTemplates = newArrayList("Science_sum.html");
        final Properties scienceProperties = new Properties();
        scienceProperties.put("Content-Type", "text/html");
        scienceProperties.put("Content-Length", 123L);
        scienceProperties.put("Last-Modified", new Date());
        when(templateRepository.findAllTemplateNames()).thenReturn(existingTemplates);
        when(templateRepository.getProperties("Science_sum.html")).thenReturn(Optional.of(scienceProperties));

        final List<ReportTemplateInfo> allTemplates = newArrayList(
          ReportTemplateInfo.builder().subjectCode("ELA").assessmentType("sum").printedReport(true).build(),
          ReportTemplateInfo.builder().subjectCode("Math").assessmentType("sum").printedReport(true).build(),
          ReportTemplateInfo.builder().subjectCode("Science").assessmentType("sum").printedReport(true).build()
        );
        when(infoRepository.findAll()).thenReturn(allTemplates);

        final List<ReportTemplateInfo> list = service.getTemplateInfo();
        assertThat(list).hasSize(allTemplates.size());
        assertThat(list.get(0)).usingRecursiveComparison().isEqualTo(allTemplates.get(0));
        assertThat(list.get(1)).usingRecursiveComparison().isEqualTo(allTemplates.get(1));
        assertThat(list.get(2)).usingRecursiveComparison().isNotEqualTo(allTemplates.get(2));
        assertThat(list.get(2).getContentLength()).isEqualTo(scienceProperties.get("Content-Length"));
        assertThat(list.get(2).getLastModified()).isEqualTo(((Date)scienceProperties.get("Last-Modified")).toInstant());
    }

    @Test
    public void itShouldUseRepositoryToDownload() {
        final OutputStream os = mock(OutputStream.class);
        service.download("Science", "sum", os);
        verify(templateRepository).read("Science_sum.html", os);
    }

    @Test
    public void itShouldUseRepositoryToUpload() {
        final InputStream is = mock(InputStream.class);
        service.upload("Science", "sum", is);
        verify(templateRepository).write("Science_sum.html", is);
    }

    @Test
    public void itShouldUseRepositoryToDelete() {
        service.delete("Science", "sum");
        verify(templateRepository).delete("Science_sum.html");
    }
}
