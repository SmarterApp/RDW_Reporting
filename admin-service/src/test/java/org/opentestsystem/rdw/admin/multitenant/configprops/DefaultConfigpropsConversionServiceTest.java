package org.opentestsystem.rdw.admin.multitenant.configprops;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import org.javers.core.Javers;
import org.javers.core.JaversBuilder;
import org.javers.core.diff.Diff;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.rdw.reporting.common.configuration.ReportingSystemSettings;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

public class DefaultConfigpropsConversionServiceTest {

    DefaultConfigpropsConversionService conversionService;
    private ObjectMapper objectMapper;
    private DefaultConfigpropsConsolidationService consolidationService;
    private TestFileBasedConfigpropsClient configpropsClient;
    private Javers javers;

    @Before
    public void setUp() {
        javers = JaversBuilder.javers().build();
        objectMapper = new ObjectMapper();
        consolidationService = new DefaultConfigpropsConsolidationService(objectMapper);
        configpropsClient = new TestFileBasedConfigpropsClient();
        conversionService = new DefaultConfigpropsConversionService(configpropsClient, consolidationService, objectMapper);
    }

    @Test
    public void defaultReportingSystemPropertiesShouldProduceValidResults() {
        Optional<ReportingSystemSettings> result = conversionService.defaultReportingSystemProperties();
        assertThat(result).isNotEmpty();
    }

    @Test
    @Ignore
    //Broken until https://jira.fairwaytech.com/browse/RP-548
    public void shouldBeNoDuplicateConfigs() {
        Map<String, JsonNode> result = conversionService.findJsonByKey("reporting");
        assertThat(result).isNotEmpty();
        List<ReportingSystemSettings> list =
                result.values()
                        .stream()
                        .map(node -> conversionService.treeToValue(node, ReportingSystemSettings.class).get())
                        .collect(Collectors.toList());
        HashSet<ReportingSystemSettings> set = Sets.newHashSet(list);
        List<ReportingSystemSettings> dedupList = Lists.newArrayList(set);
        Diff diff = javers.compare(dedupList.get(0), dedupList.get(1));
        Diff diff2 = javers.compare(dedupList.get(1), dedupList.get(2));
        assertThat(diff.getChanges().size()).isEqualTo(0);
        assertThat(set.size()).isEqualTo(1);
    }


}
