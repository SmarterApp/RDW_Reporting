package org.opentestsystem.rdw.admin.client;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;


// TODO RP-394 Move some integration test (IT) to End to End tests (ETE) and configure to run in CI
//this test only runs against a local docker instance
// set this property to run this test (or temporarily comment out this annotation)
// java -Dtenant-client.docker-it-enable=true
@Ignore
@IfProfileValue(name = "tenant-client.docker-it-enable", value = "true")
@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles({"spring.cloud.config"})
@EnableConfigurationProperties
public class DefaultConfigServerClientTest {

    private RestTemplate restTemplate = new RestTemplate();
    private DefaultConfigServerClient defaultConfigServerClient;
    @Value("${spring.cloud.config.uri}")
    private String configServerUri;
    private String password = "thepassword";

    @Before
    public void setup() {
        defaultConfigServerClient = new DefaultConfigServerClient(configServerUri);
    }

    @Ignore
    @Test
    public void itShouldLoadConfig() {
        assertThat(configServerUri).isNotNull();
    }

    @Ignore
    @Test
    public void itShouldEncryptPasswordAndSuccessfullyDecryptIt() {
        // the encryption returns a different cipher on each request - all decrypt to the expected password
        final Optional<String> encrypted = defaultConfigServerClient.encryptedPassword(password);
        assertThat(encrypted).isPresent();
        final Optional<String> decryptedPassword = defaultConfigServerClient.decryptedPassword(encrypted.get());
        assertThat(decryptedPassword).isPresent();
        assertThat(decryptedPassword.get()).isEqualTo(password);
    }

    @Ignore
    @Test
    public void itShouldPostMonitor() {
        defaultConfigServerClient.postMonitor();
    }


    @Ignore
    @Test
    public void itShouldCallConfigServerEndpointForRealPassword() {
        final Optional<String> reporting_ro_json = defaultConfigServerClient.getActualServicePassword("rdw-reporting-service", "reporting_ro");
        assertThat(reporting_ro_json).isPresent();
    }

}