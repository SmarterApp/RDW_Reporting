package org.opentestsystem.rdw.admin.model;


import java.time.Instant;
import java.util.HashSet;
import java.util.Set;
import org.opentestsystem.rdw.admin.multitenant.DataSet;
import org.opentestsystem.rdw.multitenant.Tenant;


/**
 * SandboxConfigurationPackage and Sandbox configurations used for testing
 * And to serve up mock data
 * TODO This will be moved to test once full sandbox configurations are managed
 */
public class SandboxConfigurationStubs {
    // Default Tenant will be California
    public static SandboxConfigurationPackage getApplicationSandboxConfigurationDefault() {
        SandboxConfigurationPackage sandboxConfigurationPackage = new SandboxConfigurationPackage();
        sandboxConfigurationPackage.setTenant(TenantConfigurationStubs.getTenantCA());
        sandboxConfigurationPackage.setDataSets(getDataSets());
        sandboxConfigurationPackage.setApplicationSandboxConfiguration(getApplicationSandboxConfiguration());
        return sandboxConfigurationPackage;
    }

    public static Set<DataSet> getDataSets() {
        Set<DataSet> dataSets = new HashSet<>();
        DataSet dataSetCa = new DataSet();
        dataSetCa.setLabel("California Interim Data Set");
        dataSetCa.setId("ca_interim");
        dataSets.add(dataSetCa);

        DataSet dataSetMi = new DataSet();
        dataSetMi.setLabel("Michigan Summative Data Set");
        dataSetMi.setId("mi_summative");
        dataSets.add(dataSetMi);

        DataSet dataSetSbac = new DataSet();
        dataSetSbac.setLabel("SBAC Interim Data Set");
        dataSetSbac.setId("sbac_interim");
        dataSets.add(dataSetSbac);

        return dataSets;
    }

    public static SandboxConfiguration getCaInterimSandboxConfiguration() {
        SandboxConfiguration sandboxConfiguration = new SandboxConfiguration();
        sandboxConfiguration.setSandbox(getSandboxCAInfo());
        sandboxConfiguration.setApplicationSandboxConfiguration(getApplicationSandboxConfiguration());
        sandboxConfiguration.setLocalization(getCaLocalization());
        return sandboxConfiguration;
    }

    private static ApplicationSandboxConfiguration getApplicationSandboxConfiguration() {
        ApplicationSandboxConfiguration applicationSandboxConfiguration = new ApplicationSandboxConfiguration();
        applicationSandboxConfiguration.setReporting(TenantConfigurationStubs.getReporting());
        applicationSandboxConfiguration.setAggregateReportingPropertiesTenant(TenantConfigurationStubs.getAggregrateReportingProperties());
        return applicationSandboxConfiguration;
    }

    public static SandboxConfiguration getMiInterimSandboxConfiguration() {
        SandboxConfiguration sandboxConfiguration = new SandboxConfiguration();
        sandboxConfiguration.setSandbox(getSandboxMIInfo());
        sandboxConfiguration.setApplicationSandboxConfiguration(getApplicationSandboxConfiguration());
        sandboxConfiguration.setLocalization(getMiLocalization());
        return sandboxConfiguration;
    }

    public static Tenant getSandboxCAInfo() {
        Tenant sandbox = new Tenant();
        sandbox.setSandboxDataset("sbac_interim");
        sandbox.setDescription("A sandbox for CA using sbac_interim dataset");
        sandbox.setId("CA");
        sandbox.setKey("CA");
        sandbox.setName("California");
        return sandbox;
    }

    private static Tenant getSandboxMIInfo() {
        Tenant sandbox = new Tenant();
        sandbox.setSandboxDataset("mi_summative");
        sandbox.setDescription("A sandbox for MI using sbac_interim dataset");
        sandbox.setId("MI");
        sandbox.setKey("MI");
        sandbox.setName("Michigan");
        return sandbox;
    }

    private static String getCaLocalization() {
        return "{" +
                "  \"common\" : {" +
                "    \"ethnicity\": {" +
                "      \"AmericanIndianOrAlaskaNative\": \"American Indian or Alaska Native\"," +
                "      \"Asian\": \"Asian\"," +
                "      \"NativeHawaiianOrOtherPacificIslander\": \"Native Hawaiian or Pacific Islander\"," +
                "      \"White\": \"White\"" +
                "    }," +
                "    \"gender\": {" +
                "      \"Nonbinary\": \"Non Binary\"" +
                "    }" +
                "  }" +
                "}";
    }

    private static String getMiLocalization() {
        return "{" +
                "  \"common\" : {" +
                "    \"military-connected-code\": {" +
                "      \"NotMilitaryConnected\": \"No Military Connection\"" +
                "     } " +
                "   }" +
                "}";
    }
}
