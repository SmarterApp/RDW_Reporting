package org.opentestsystem.rdw.admin.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.admin.model.InstructionalResource;
import org.opentestsystem.rdw.reporting.common.model.OrganizationType;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class InstructionalResourceArgumentResolverTest {

    @Mock
    private MethodParameter methodParameter;

    @Mock
    private ModelAndViewContainer mavContainer;

    @Mock
    private NativeWebRequest webRequest;

    @Mock
    private WebDataBinderFactory binderFactory;

    private Map<String, String> parameters;

    private InstructionalResourceArgumentResolver resolver;

    @Before
    public void setup() {
        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> InstructionalResource.class);

        parameters = new HashMap<>();
        when(webRequest.getParameter(anyString()))
                .thenAnswer(invocation -> parameters
                        .get(invocation.getArgument(0)));

        resolver = new InstructionalResourceArgumentResolver();
    }

    @Test
    public void itShouldResolveInstructionalResourceParameters() {
        assertThat(resolver.supportsParameter(methodParameter)).isTrue();

        when(methodParameter.getParameterType())
                .thenAnswer(invocation -> Object.class);
        assertThat(resolver.supportsParameter(methodParameter)).isFalse();
    }

    @Test
    public void itShouldParseAnInstructionalResource() throws Exception {
        parameters.put("assessmentName", "Assessment A");
        parameters.put("organizationType", "district");
        parameters.put("organizationId", "234");
        parameters.put("performanceLevel", "1");
        final InstructionalResource resource = (InstructionalResource) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(resource.getAssessmentName()).isEqualTo("Assessment A");
        assertThat(resource.getOrganizationType()).isEqualTo(OrganizationType.District);
        assertThat(resource.getOrganizationId()).isEqualTo(234);
        assertThat(resource.getPerformanceLevel()).isEqualTo(1);
    }

    @Test
    public void itShouldParseAnInstructionalResourceWithoutAnOrganizationId() throws Exception {
        parameters.put("assessmentName", "Assessment A");
        parameters.put("organizationType", "state");
        parameters.put("performanceLevel", "1");
        final InstructionalResource resource = (InstructionalResource) resolver.resolveArgument(methodParameter, mavContainer, webRequest, binderFactory);
        assertThat(resource.getAssessmentName()).isEqualTo("Assessment A");
        assertThat(resource.getOrganizationType()).isEqualTo(OrganizationType.State);
        assertThat(resource.getOrganizationId()).isNull();
        assertThat(resource.getPerformanceLevel()).isEqualTo(1);
    }
}