{
  "endpoints-org.springframework.boot.actuate.endpoint.EndpointProperties": {
    "prefix": "endpoints",
    "properties": {
      "enabled": true,
      "sensitive": null
    }
  },
  "parent": {
    "spring.cloud.config.retry-org.springframework.cloud.config.client.RetryProperties": {
      "prefix": "spring.cloud.config.retry",
      "properties": {
        "maxAttempts": 6,
        "initialInterval": 2000,
        "maxInterval": 3000,
        "multiplier": 1.1
      }
    },
    "configClientProperties": {
      "prefix": "spring.cloud.config",
      "properties": {
        "headers": {},
        "profile": "awsqa",
        "label": "develop,master",
        "uri": "http://configuration-service",
        "enabled": true,
        "failFast": true,
        "token": null,
        "authorization": null,
        "password": null,
        "discovery": {
          "enabled": false,
          "serviceId": "configserver"
        },
        "name": "rdw-ingest-migrate-olap",
        "username": "user"
      }
    },
    "spring.cloud.config-org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties": {
      "prefix": "spring.cloud.config",
      "properties": {
        "overrideSystemProperties": true,
        "overrideNone": false,
        "allowOverride": true
      }
    },
    "encrypt-org.springframework.cloud.bootstrap.encrypt.KeyProperties": {
      "prefix": "encrypt",
      "properties": {
        "failOnError": true,
        "key": null,
        "keyStore": {
          "location": null,
          "password": null,
          "alias": null,
          "secret": null
        }
      }
    }
  },
  "management.info-org.springframework.boot.actuate.autoconfigure.InfoContributorProperties": {
    "prefix": "management.info",
    "properties": {
      "git": {
        "mode": "SIMPLE"
      }
    }
  },
  "metricsEndpoint": {
    "prefix": "endpoints.metrics",
    "properties": {
      "id": "metrics",
      "sensitive": true,
      "enabled": true
    }
  },
  "inetUtilsProperties": {
    "prefix": "spring.cloud.inetutils",
    "properties": {
      "ignoredInterfaces": [],
      "preferredNetworks": [],
      "defaultIpAddress": "127.0.0.1",
      "timeoutSeconds": 1,
      "defaultHostname": "localhost",
      "useOnlySiteLocalInterfaces": false
    }
  },
  "featuresEndpoint": {
    "prefix": "endpoints.features",
    "properties": {
      "id": "features",
      "sensitive": false,
      "enabled": true
    }
  },
  "environmentEndpoint": {
    "prefix": "endpoints.env",
    "properties": {
      "id": "env",
      "sensitive": true,
      "enabled": true
    }
  },
  "migrateMvcEndpoint": {
    "prefix": "endpoints.migrate",
    "properties": {
      "path": "/migrate"
    }
  },
  "migrateStagingToReportingSqlConfiguration": {
    "prefix": "sql.migrate",
    "properties": {
      "entities": {
        "subject_asmt_type": {
          "sql": {
            "deleteAsPartOfParentUpdate": "DELETE FROM subject_asmt_type\n  USING staging_subject ss\nWHERE ss.id = subject_asmt_type.subject_id AND\n  NOT EXISTS(SELECT 1 FROM staging_subject_asmt_type ssat WHERE ssat.asmt_type_id = subject_asmt_type.asmt_type_id and ssat.subject_id = subject_asmt_type.subject_id)",
            "insert": "INSERT INTO subject_asmt_type (asmt_type_id, subject_id, performance_level_count, performance_level_standard_cutoff, alt_score_performance_level_count, claim_score_performance_level_count, target_report)\n  SELECT DISTINCT\n    ssat.asmt_type_id,\n    ssat.subject_id,\n    ssas1.performance_level_count,\n    ssas1.performance_level_standard_cutoff,\n    ssas2.performance_level_count AS alt_score_performance_level_count,\n    ssas3.performance_level_count AS claim_score_performance_level_count,\n    ssat.target_report\n  FROM staging_subject_asmt_type ssat\n    LEFT JOIN staging_subject_asmt_scoring ssas1 ON ssas1.subject_id = ssat.subject_id AND ssas1.asmt_type_id = ssat.asmt_type_id AND ssas1.score_type_id=1\n    LEFT JOIN staging_subject_asmt_scoring ssas2 ON ssas2.subject_id = ssat.subject_id AND ssas2.asmt_type_id = ssat.asmt_type_id AND ssas2.score_type_id=2\n    LEFT JOIN staging_subject_asmt_scoring ssas3 ON ssas3.subject_id = ssat.subject_id AND ssas3.asmt_type_id = ssat.asmt_type_id AND ssas3.score_type_id=3\n    LEFT JOIN subject_asmt_type rsat ON rsat.subject_id = ssat.subject_id AND rsat.asmt_type_id = ssat.asmt_type_id\n  WHERE rsat.asmt_type_id IS NULL;",
            "update": "UPDATE subject_asmt_type SET\n  performance_level_count  = ssas1.performance_level_count,\n  performance_level_standard_cutoff = ssas1.performance_level_standard_cutoff,\n  alt_score_performance_level_count = ssas2.performance_level_count,\n  claim_score_performance_level_count = ssas3.performance_level_count,\n  target_report = ssat.target_report\nFROM staging_subject_asmt_type ssat\n  LEFT JOIN staging_subject_asmt_scoring ssas1 ON ssas1.subject_id = ssat.subject_id AND ssas1.asmt_type_id = ssat.asmt_type_id AND ssas1.score_type_id=1\n  LEFT JOIN staging_subject_asmt_scoring ssas2 ON ssas2.subject_id = ssat.subject_id AND ssas2.asmt_type_id = ssat.asmt_type_id AND ssas2.score_type_id=2\n  LEFT JOIN staging_subject_asmt_scoring ssas3 ON ssas3.subject_id = ssat.subject_id AND ssas3.asmt_type_id = ssat.asmt_type_id AND ssas3.score_type_id=3\n  JOIN subject_asmt_type rsat ON rsat.subject_id = ssat.subject_id AND rsat.asmt_type_id = ssat.asmt_type_id;"
          }
        },
        "military_connected": {
          "sql": {
            "update": "UPDATE military_connected SET\n  code = smc.code\nFROM staging_military_connected smc where smc.id = military_connected.id;",
            "delete": "DELETE FROM military_connected\n  WHERE NOT EXISTS(SELECT smc.id FROM staging_military_connected smc WHERE smc.id = military_connected.id);",
            "insert": "INSERT INTO military_connected (id, code)\n  SELECT\n    smc.id,\n    smc.code\n  FROM staging_military_connected smc\n    LEFT JOIN military_connected rmc ON rmc.id = smc.id\n  WHERE rmc.id IS NULL;"
          }
        },
        "school_year": {
          "sql": {
            "insert": "INSERT INTO school_year (year)\n  SELECT\n    sy.year\n  FROM staging_school_year sy\n    LEFT JOIN school_year ry ON ry.year = sy.year\n  WHERE ry.year IS NULL;",
            "update": "SELECT 1;",
            "delete": "DELETE FROM school_year\n  WHERE NOT EXISTS(SELECT sy.year FROM staging_school_year sy WHERE sy.year = school_year.year);"
          }
        },
        "district": {
          "sql": {
            "insert": "INSERT INTO district (id, name, natural_id, external_id, migrate_id)\n  SELECT DISTINCT\n    sd.id,\n    sd.name,\n    sd.natural_id,\n    sd.external_id,\n    sd.migrate_id\n  FROM staging_district sd\n    LEFT JOIN district rd ON rd.id = sd.id\n  WHERE rd.id IS NULL;",
            "update": "UPDATE district SET\n  name  = sd.name,\n  natural_id  = sd.natural_id,\n  external_id  = sd.external_id,\n  migrate_id  = sd.migrate_id\nFROM staging_district sd WHERE sd.id = district.id;",
            "delete": "DELETE FROM district\n  WHERE district.id IN (SELECT district_id from staging_school WHERE deleted = 1) AND\n    NOT EXISTS(SELECT rs.id from school rs WHERE rs.district_id = district.id);"
          }
        },
        "exam": {
          "sql": {
            "insert": "INSERT INTO exam (\n  id,\n  school_id,\n  student_id,\n  asmt_id,\n  grade_id,\n  school_year,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  updated,\n  update_import_id,\n  migrate_id\n)\n  SELECT DISTINCT\n    se.id,\n    se.school_id,\n    se.student_id,\n    se.asmt_id,\n    se.grade_id,\n    se.school_year,\n    CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n    CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n    CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n    COALESCE(se.elas_id, 1),\n    COALESCE(se.language_id, 0),\n    se.completeness_id,\n    se.administration_condition_id,\n    COALESCE(se.military_connected_id, 1),\n    se.scale_score,\n    se.performance_level,\n    se.completed_at,\n    se.updated,\n    se.update_import_id,\n    se.migrate_id\n  FROM staging_exam se\n    LEFT JOIN exam e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\n  WHERE se.type_id IN (1, 3) AND se.latest = true AND e.id IS NULL;",
            "update": "UPDATE exam SET\n  id                          = se.id,\n  school_id                   = se.school_id,\n  grade_id                    = se.grade_id,\n  iep                         = CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n  lep                         = CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n  section504                  = CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n  economic_disadvantage       = CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n  migrant_status              = CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n  elas_id                     = COALESCE(se.elas_id, 1),\n  language_id                 = COALESCE(se.language_id, 0),\n  completeness_id             = se.completeness_id,\n  administration_condition_id = se.administration_condition_id,\n  military_connected_id       = COALESCE(se.military_connected_id, 1),\n  scale_score                 = se.scale_score,\n  performance_level           = se.performance_level,\n  completed_at                = se.completed_at,\n  updated                     = se.updated,\n  update_import_id            = se.update_import_id,\n  migrate_id                  = se.migrate_id\n FROM staging_exam se\n  JOIN exam e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\nWHERE se.type_id IN (1, 3) AND se.latest = true AND (se.completed_at > e.completed_at OR se.id = e.id)",
            "updateStagingLatestExam": "UPDATE staging_exam\n  SET latest = true\nFROM (\n       SELECT id, rank() OVER (PARTITION BY student_id, asmt_id, school_year ORDER BY completed_at DESC, id)\n        FROM staging_exam where deleted = false\n     ) t\n  JOIN staging_exam e ON e.id = t.id\nWHERE t.rank = 1;",
            "delete": "DELETE FROM exam\n  USING staging_exam se\nWHERE se.id = exam.id and se.deleted = 1;"
          }
        },
        "asmt_target": {
          "sql": {
            "deleteAsPartOfParentUpdate": "DELETE FROM asmt_target\n    USING staging_asmt sa\n  WHERE sa.id = asmt_target.asmt_id AND sa.deleted = 0;",
            "insertIncluded": "INSERT INTO asmt_target (asmt_id, target_id, include_in_report)\n  SELECT DISTINCT\n    sat.asmt_id,\n    sat.target_id,\n    1\n  FROM staging_asmt_target sat\n    LEFT JOIN asmt_target rat ON rat.asmt_id = sat.asmt_id AND rat.target_id = sat.target_id\n  WHERE rat.asmt_id IS NULL\n    AND NOT EXISTS(SELECT 1 from staging_asmt_target_exclusion sate WHERE sate.asmt_id = sat.asmt_id AND sate.target_id = sat.target_id);",
            "delete": "DELETE FROM asmt_target\n  USING staging_asmt sa\nWHERE sa.id = asmt_target.asmt_id AND sa.deleted = 1;",
            "insert": "INSERT INTO asmt_target (asmt_id, target_id, include_in_report)\n  SELECT DISTINCT\n    sate.asmt_id,\n    sate.target_id,\n    0\n  FROM staging_asmt_target_exclusion sate\n    LEFT JOIN asmt_target rat ON rat.asmt_id = sate.asmt_id AND rat.target_id = sate.target_id\n  WHERE rat.asmt_id IS NULL;"
          }
        },
        "target": {
          "sql": {
            "deleteAsPartOfParentUpdate": "DELETE FROM target\n  USING staging_subject ss\nWHERE ss.id = target.subject_id AND\n  NOT EXISTS(SELECT 1 FROM staging_target st WHERE st.id = target.id AND st.subject_id = ss.id)",
            "insert": "INSERT INTO target (id, subject_id, natural_id, claim_code)\n  SELECT DISTINCT\n    st.id,\n    st.subject_id,\n    st.natural_id,\n    st.claim_code\n  FROM staging_target st\n    LEFT JOIN target rt ON rt.id= st.id\n  WHERE rt.id IS NULL;"
          }
        },
        "exam_longitudinal": {
          "sql": {
            "updateStagingExamWithAsmtData": "UPDATE staging_exam\n  SET\n    asmt_grade_id = a.grade_id,\n    subject_id = a.subject_id,\n    asmt_grade_code = g.code\n  FROM asmt a JOIN staging_exam se ON se.asmt_id = a.id JOIN grade g ON g.id = a.grade_id\n  WHERE se.type_id = 3;",
            "updateStagingLatestExam": "UPDATE staging_exam\n  SET latest = true\nFROM (\n  SELECT se.id, rank() OVER (PARTITION BY se.student_id, se.subject_id, se.asmt_grade_id ORDER BY se.completed_at DESC, se.id)\n    FROM staging_exam se WHERE se.deleted = false AND se.type_id = 3 AND se.asmt_grade_id = se.grade_id\n  ) t\n  JOIN staging_exam e ON e.id = t.id\nWHERE t.rank = 1;",
            "delete": "DELETE FROM exam_longitudinal\n  USING staging_exam se\nWHERE se.id = exam_longitudinal.id and se.deleted = 1;",
            "insert": "INSERT INTO exam_longitudinal (\n  id,\n  school_id,\n  student_id,\n  asmt_id,\n  subject_id,\n  asmt_grade_id,\n  school_year_asmt_grade_code,\n  grade_id,\n  school_year,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  updated,\n  update_import_id,\n  migrate_id\n)\n  SELECT DISTINCT\n    se.id,\n    se.school_id,\n    se.student_id,\n    se.asmt_id,\n    se.subject_id,\n    se.asmt_grade_id,\n    CONCAT(se.school_year::VARCHAR(4), CONCAT(',', se.asmt_grade_code::VARCHAR(2))),\n    se.grade_id,\n    se.school_year,\n    CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n    CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n    CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n    COALESCE(se.elas_id, 1),\n    COALESCE(se.language_id, 0),\n    se.completeness_id,\n    se.administration_condition_id,\n    COALESCE(se.military_connected_id, 1),\n    se.scale_score,\n    se.performance_level,\n    se.completed_at,\n    se.updated,\n    se.update_import_id,\n    se.migrate_id\n  FROM staging_exam se\n    LEFT JOIN exam_longitudinal e ON e.student_id = se.student_id AND e.asmt_grade_id = se.asmt_grade_id AND e.subject_id = se.subject_id\n  WHERE se.type_id = 3 AND se.latest = true AND e.id IS NULL;",
            "resetStagingLatestExam": "UPDATE staging_exam SET latest = false",
            "update": "UPDATE exam_longitudinal SET\n  id                          = se.id,\n  school_id                   = se.school_id,\n  asmt_id                     = se.asmt_id,\n  school_year_asmt_grade_code = CONCAT(se.school_year::VARCHAR(4), CONCAT(',', se.asmt_grade_code::VARCHAR(2))),\n  grade_id                    = se.grade_id,\n  school_year                 = se.school_year,\n  iep                         = CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n  lep                         = CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n  section504                  = CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n  economic_disadvantage       = CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n  migrant_status              = CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n  elas_id                     = COALESCE(se.elas_id, 1),\n  language_id                 = COALESCE(se.language_id, 0),\n  completeness_id             = se.completeness_id,\n  administration_condition_id = se.administration_condition_id,\n  military_connected_id       = COALESCE(se.military_connected_id, 1),\n  scale_score                 = se.scale_score,\n  performance_level           = se.performance_level,\n  completed_at                = se.completed_at,\n  updated                     = se.updated,\n  update_import_id            = se.update_import_id,\n  migrate_id                  = se.migrate_id\n FROM staging_exam se\n   JOIN exam_longitudinal e ON e.student_id = se.student_id AND e.asmt_grade_id = se.asmt_grade_id AND e.subject_id = se.subject_id\nWHERE se.type_id = 3 AND se.latest = true AND (se.completed_at > e.completed_at OR se.id = e.id)"
          }
        },
        "iab_exam": {
          "sql": {
            "delete": "DELETE FROM iab_exam\n  USING staging_exam se\nWHERE se.id = iab_exam.id and se.deleted = 1;",
            "insert": "INSERT INTO iab_exam (\n  id,\n  school_id,\n  student_id,\n  asmt_id,\n  grade_id,\n  school_year,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  updated,\n  update_import_id,\n  migrate_id\n)\n  SELECT DISTINCT\n    se.id,\n    se.school_id,\n    se.student_id,\n    se.asmt_id,\n    se.grade_id,\n    se.school_year,\n    CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n    CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n    CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n    CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n    COALESCE(se.elas_id, 1),\n    COALESCE(se.language_id, 0),\n    se.completeness_id,\n    se.administration_condition_id,\n    COALESCE(se.military_connected_id, 1),\n    se.scale_score,\n    se.performance_level,\n    se.completed_at,\n    se.updated,\n    se.update_import_id,\n    se.migrate_id\n  FROM staging_exam se\n    LEFT JOIN iab_exam e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\n  WHERE se.type_id = 2 AND se.latest = true AND e.id IS NULL;",
            "update": "UPDATE iab_exam SET\n  id                          = se.id,\n  school_id                   = se.school_id,\n  grade_id                    = se.grade_id,\n  iep                         = CASE WHEN se.iep = true THEN 1 WHEN se.iep = false THEN 0 ELSE 2 END,\n  lep                         = CASE WHEN se.lep = true THEN 1 WHEN se.lep = false THEN 0 ELSE 2 END,\n  section504                  = CASE WHEN se.section504 = true THEN 1 WHEN se.section504 = false THEN 0 ELSE 2 END,\n  economic_disadvantage       = CASE WHEN se.economic_disadvantage = true THEN 1 WHEN se.economic_disadvantage = false THEN 0 ELSE 2 END,\n  migrant_status              = CASE WHEN se.migrant_status = true THEN 1 WHEN se.migrant_status = false THEN 0 ELSE 2 END,\n  elas_id                     = COALESCE(se.elas_id, 1),\n  language_id                 = COALESCE(se.language_id, 0),\n  completeness_id             = se.completeness_id,\n  administration_condition_id = se.administration_condition_id,\n  military_connected_id       = COALESCE(se.military_connected_id, 1),\n  scale_score                 = se.scale_score,\n  performance_level           = se.performance_level,\n  completed_at                = se.completed_at,\n  updated                     = se.updated,\n  update_import_id            = se.update_import_id,\n  migrate_id                  = se.migrate_id\n FROM staging_exam se\n  JOIN iab_exam e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\nWHERE se.type_id = 2 AND se.latest = true AND (se.completed_at > e.completed_at OR se.id = e.id)"
          }
        },
        "exam_target_score": {
          "sql": {
            "insert": "INSERT INTO exam_target_score (\n  id,\n  exam_id,\n  target_id,\n  asmt_id,\n  student_id,\n  school_year,\n  student_relative_residual_score,\n  standard_met_relative_residual_score,\n  completed_at,\n  updated,\n  update_import_id,\n  migrate_id\n  )\n  SELECT DISTINCT\n    sts.id,\n    sts.exam_id,\n    sts.target_id,\n    se.asmt_id,\n    se.student_id,\n    se.school_year,\n    sts.student_relative_residual_score,\n    sts.standard_met_relative_residual_score,\n    se.completed_at,\n    se.updated,\n    se.update_import_id,\n    se.migrate_id\n  FROM staging_exam_target_score sts\n    JOIN staging_exam se ON se.id = sts.exam_id\n    LEFT JOIN exam_target_score e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\n  WHERE se.latest = true AND e.exam_id IS NULL;",
            "deleteAsPartOfParentUpdate": "DELETE FROM exam_target_score\n  USING staging_exam se\nWHERE exam_target_score.student_id = se.student_id and exam_target_score.asmt_id = se.asmt_id and exam_target_score.school_year = se.school_year\n      AND se.latest = true AND (se.completed_at > exam_target_score.completed_at OR se.id = exam_target_score.exam_id);",
            "delete": "DELETE FROM exam_target_score\n  USING staging_exam se\nWHERE se.id = exam_id and se.deleted = true;"
          }
        },
        "school": {
          "sql": {
            "delete": "DELETE FROM school\n  USING staging_school ss\nWHERE ss.id = school.id AND ss.deleted = 1;",
            "insert": "INSERT INTO school (id, district_id, name, natural_id, external_id, school_group_id, district_group_id, embargo_enabled, updated, update_import_id, migrate_id)\n  SELECT DISTINCT\n    ss.id,\n    ss.district_id,\n    ss.name,\n    ss.natural_id,\n    ss.external_id,\n    ss.school_group_id,\n    ss.district_group_id,\n    1,\n    ss.updated,\n    ss.update_import_id,\n    ss.migrate_id\n  FROM staging_school ss\n    LEFT JOIN school rs ON rs.id = ss.id\n  WHERE rs.id IS NULL and ss.deleted = 0;",
            "update": "UPDATE school SET\n  district_id  = ss.district_id,\n  name  = ss.name,\n  natural_id  = ss.natural_id,\n  external_id  = ss.external_id,\n  school_group_id  = ss.school_group_id,\n  district_group_id  = ss.district_group_id,\n  updated = ss.updated,\n  update_import_id = ss.update_import_id,\n  migrate_id = ss.migrate_id\nFROM staging_school ss WHERE ss.id = school.id;"
          }
        },
        "asmt": {
          "sql": {
            "update": "UPDATE asmt SET\n  grade_id  = sa.grade_id,\n  school_year = sa.school_year,\n  subject_id = sa.subject_id,\n  name = sa.name,\n  label = sa.label,\n  cut_point_1 = sa.cut_point_1,\n  cut_point_2 = sa.cut_point_2,\n  cut_point_3 = sa.cut_point_3,\n  cut_point_4 = sa.cut_point_4,\n  cut_point_5 = sa.cut_point_5,\n  min_score = sa.min_score,\n  max_score = sa.max_score,\n  updated = sa.updated,\n  update_import_id = sa.update_import_id,\n  migrate_id = sa.migrate_id\nFROM staging_asmt sa WHERE sa.id = asmt.id;",
            "delete": "DELETE FROM asmt\n  USING staging_asmt sa\nWHERE sa.id = asmt.id AND sa.deleted = 1;",
            "insert": "INSERT INTO asmt (id, grade_id, school_year, subject_id, name, label, cut_point_1, cut_point_2, cut_point_3, cut_point_4, cut_point_5, min_score, max_score, type_id, updated, update_import_id, migrate_id)\n  SELECT DISTINCT\n    sa.id,\n    sa.grade_id,\n    sa.school_year,\n    sa.subject_id,\n    sa.name,\n    sa.label,\n    sa.cut_point_1,\n    sa.cut_point_2,\n    sa.cut_point_3,\n    sa.cut_point_4,\n    sa.cut_point_5,\n    sa.min_score,\n    sa.max_score,\n    sa.type_id,\n    sa.updated,\n    sa.update_import_id,\n    sa.migrate_id\n  FROM staging_asmt sa\n    LEFT JOIN asmt ra ON ra.id = sa.id\n  WHERE ra.id IS NULL and sa.deleted = 0;"
          }
        },
        "subject_score": {
          "sql": {
            "deleteAsPartOfParentUpdate": "DELETE FROM subject_score\n  USING staging_subject ss\nWHERE ss.id = subject_score.subject_id AND\n  NOT EXISTS(SELECT 1 FROM staging_subject_score sscs WHERE sscs.id = subject_score.id AND sscs.subject_id = ss.id)",
            "insert": "INSERT INTO subject_score (id, subject_id, asmt_type_id, score_type_id, code)\n  SELECT DISTINCT\n    sscs.id,\n    sscs.subject_id,\n    sscs.asmt_type_id,\n    sscs.score_type_id,\n    sscs.code\n  FROM staging_subject_score sscs\n    LEFT JOIN subject_score rscs ON rscs.id = sscs.id\n  WHERE rscs.id IS NULL;"
          }
        },
        "language": {
          "sql": {
            "delete": "DELETE FROM language\n  WHERE NOT EXISTS(SELECT sl.id FROM staging_language sl WHERE sl.id = language.id);",
            "insert": "INSERT INTO language (id, code)\n  SELECT\n    sl.id,\n    sl.code\n  FROM staging_language sl\n    LEFT JOIN language rl ON rl.id = sl.id\n  WHERE rl.id IS NULL;",
            "update": "UPDATE language\n  SET\n    code = sl.code\n  FROM staging_language sl where sl.id = language.id;"
          }
        },
        "state_embargo": {
          "sql": {
            "insert": "INSERT INTO state_embargo (aggregate, migrate_id)\n  SELECT\n    sse.aggregate,\n    sse.migrate_id\n  FROM staging_state_embargo sse;",
            "delete": "DELETE FROM state_embargo;"
          }
        },
        "administration_condition": {
          "sql": {
            "delete": "DELETE FROM administration_condition\n  WHERE NOT EXISTS(SELECT sac.id FROM staging_administration_condition sac WHERE sac.id = administration_condition.id);",
            "insert": "INSERT INTO administration_condition (id, code)\n  SELECT\n    sac.id,\n    sac.code\n  FROM staging_administration_condition sac\n    LEFT JOIN administration_condition rac ON rac.id = sac.id\n  WHERE rac.id IS NULL;",
            "update": "UPDATE administration_condition SET\n  code = sac.code\nFROM staging_administration_condition sac where sac.id = administration_condition.id;"
          }
        },
        "elas": {
          "sql": {
            "insert": "INSERT INTO elas (id, code)\n  SELECT\n    se.id,\n    se.code\n  FROM staging_elas se\n    LEFT JOIN elas re ON re.id = se.id\n  WHERE re.id IS NULL;",
            "update": "UPDATE elas\n  SET\n    code = se.code\n  FROM staging_elas se where se.id = elas.id;",
            "delete": "DELETE FROM elas\n  WHERE NOT EXISTS(SELECT se.id FROM staging_elas se WHERE se.id = elas.id);"
          }
        },
        "asmt_active_year": {
          "sql": {
            "insert": "INSERT INTO asmt_active_year (asmt_id, school_year)\n  SELECT asmt_id, school_year\n  FROM\n    ( SELECT DISTINCT f.asmt_id as asmt_id, f.school_year FROM exam f\n      UNION\n      SELECT DISTINCT f.asmt_id as asmt_id, f.school_year FROM iab_exam f\n      UNION\n      SELECT a.id AS asmt_id, a.school_year FROM asmt a\n    ) t;",
            "delete": "DELETE FROM asmt_active_year;"
          }
        },
        "student": {
          "sql": {
            "delete": "DELETE FROM student\n  USING staging_student ss\nWHERE ss.id = student.id AND ss.deleted = 1;",
            "insert": "INSERT INTO student (id,  gender_id, updated, update_import_id, migrate_id)\n  SELECT DISTINCT\n    ss.id,\n    rg.id,\n    ss.updated,\n    ss.update_import_id,\n    ss.migrate_id\n  FROM staging_student ss\n    LEFT JOIN student rs ON rs.id = ss.id\n    LEFT JOIN gender rg ON ss.gender_id = rg.id\n  WHERE rs.id IS NULL and ss.deleted = 0;",
            "update": "UPDATE student SET\n  gender_id  = ss.gender_id,\n  updated = ss.updated,\n  update_import_id = ss.update_import_id,\n  migrate_id = ss.migrate_id\nFROM staging_student ss\n  JOIN gender rg ON ss.gender_id = rg.id\nWHERE ss.id = student.id;"
          }
        },
        "school_group": {
          "sql": {
            "delete": "DELETE FROM school_group\n  WHERE\n      school_group.id in (SELECT ss.school_group_id from staging_school ss WHERE ss.deleted = 1)\n      AND NOT EXISTS(SELECT rs.id from school rs WHERE rs.school_group_id = school_group.id);",
            "insert": "INSERT INTO school_group(id, natural_id, name, external_id, migrate_id)\n  SELECT DISTINCT\n    ssg.id,\n    ssg.natural_id,\n    ssg.name,\n    ssg.external_id,\n    ssg.migrate_id\n    FROM staging_school_group ssg\n      LEFT JOIN school_group rsg ON rsg.id = ssg.id\n    WHERE rsg.id IS NULL;",
            "update": "UPDATE school_group\n  SET\n    name = ssg.name,\n    external_id = ssg.external_id,\n    migrate_id = ssg.migrate_id\n  FROM staging_school_group ssg\n  WHERE ssg.id = school_group.id;"
          }
        },
        "completeness": {
          "sql": {
            "insert": "INSERT INTO completeness (id, code)\n  SELECT\n    sc.id,\n    sc.code\n  FROM staging_completeness sc\n    LEFT JOIN completeness rc ON rc.id = sc.id\n  WHERE rc.id IS NULL;",
            "update": "UPDATE completeness\n  SET\n    code = sc.code\nFROM staging_completeness sc where sc.id = completeness.id;",
            "delete": "DELETE FROM completeness\n  WHERE NOT EXISTS(SELECT sc.id FROM staging_completeness sc WHERE sc.id = completeness.id);"
          }
        },
        "school_embargo": {
          "sql": {
            "update": "UPDATE school\n  SET\n    embargo_enabled = sde.aggregate,\n    migrate_id = sde.migrate_id\n  FROM school rs\n    JOIN staging_district_embargo sde ON sde.district_id = rs.district_id AND rs.embargo_enabled <> sde.aggregate;"
          }
        },
        "ethnicity": {
          "sql": {
            "insert": "INSERT INTO ethnicity (id, code)\n  SELECT\n    se.id,\n    se.code\n    FROM staging_ethnicity se\n      LEFT JOIN ethnicity re ON se.id = re.id\n    WHERE re.id IS NULL;",
            "update": "UPDATE ethnicity\n  SET\n    code = se.code\n FROM staging_ethnicity se where ethnicity.id = se.id;",
            "delete": "DELETE FROM ethnicity\n WHERE NOT EXISTS(SELECT se.id FROM staging_ethnicity se WHERE ethnicity.id = se.id);"
          }
        },
        "exam_claim_score": {
          "sql": {
            "insert": "INSERT INTO exam_claim_score (id, exam_id, subject_claim_score_id, asmt_id, student_id, school_year, category, completed_at, updated, update_import_id, migrate_id)\n  SELECT DISTINCT scs.id, scs.exam_id, scs.subject_score_id AS subject_claim_score_id, se.asmt_id, se.student_id, se.school_year, scs.performance_level AS category, se.completed_at, se.updated, se.update_import_id, se.migrate_id\n  FROM staging_exam_score scs\n    JOIN subject_score ss ON ss.id = scs.subject_score_id AND ss.score_type_id = 3\n    JOIN staging_exam se ON se.id = scs.exam_id\n    LEFT JOIN exam_claim_score e ON e.student_id = se.student_id and e.asmt_id = se.asmt_id and e.school_year = se.school_year\n  WHERE se.type_id IN (1, 3) AND se.latest = true AND e.exam_id IS NULL;",
            "deleteAsPartOfParentUpdate": "DELETE FROM exam_claim_score\n  USING staging_exam se\nWHERE se.type_id IN (1, 3) AND exam_claim_score.student_id = se.student_id and exam_claim_score.asmt_id = se.asmt_id and exam_claim_score.school_year = se.school_year\n      AND se.latest = true AND (se.completed_at > exam_claim_score.completed_at OR se.id = exam_claim_score.exam_id);",
            "delete": "DELETE FROM exam_claim_score\n  USING staging_exam se\nWHERE se.id = exam_id and se.deleted = true;"
          }
        },
        "district_group": {
          "sql": {
            "delete": "DELETE FROM district_group\n  WHERE district_group.id in (SELECT ss.district_group_id from staging_school ss WHERE ss.deleted = 1) AND\n    NOT EXISTS(SELECT rs.id from school rs WHERE rs.district_group_id = district_group.id);",
            "insert": "INSERT INTO district_group(id, natural_id, name, external_id, migrate_id)\n  SELECT DISTINCT\n    sdg.id,\n    sdg.natural_id,\n    sdg.name,\n    sdg.external_id,\n    sdg.migrate_id\n  FROM staging_district_group sdg\n    LEFT JOIN district_group rdg ON rdg.id = sdg.id\nWHERE rdg.id IS NULL;",
            "update": "UPDATE district_group\n  SET\n    name = sdg.name,\n    external_id = sdg.external_id,\n    migrate_id = sdg.migrate_id\n  FROM staging_district_group sdg\n  WHERE  sdg.id = district_group.id;"
          }
        },
        "grade": {
          "sql": {
            "delete": "DELETE FROM grade\n  WHERE NOT EXISTS(SELECT sg.id FROM staging_grade sg WHERE sg.id = grade.id);",
            "insert": "INSERT INTO grade (id, code, sequence)\n  SELECT\n    sg.id,\n    sg.code,\n    sg.sequence\n  FROM staging_grade sg\n    LEFT JOIN grade rg ON rg.id = sg.id\n  WHERE rg.id IS NULL;",
            "update": "UPDATE grade\n  SET\n    code = sg.code,\n    sequence = sg.sequence\n  FROM staging_grade sg where sg.id = grade.id;"
          }
        },
        "gender": {
          "sql": {
            "delete": "DELETE FROM gender\n  WHERE NOT EXISTS(SELECT sg.id FROM staging_gender sg WHERE sg.id = gender.id);",
            "insert": "INSERT INTO gender (id, code)\n  SELECT\n    sg.id,\n    sg.code\n  FROM staging_gender sg LEFT JOIN gender rg ON rg.id = sg.id\n    WHERE rg.id IS NULL;",
            "update": "UPDATE gender SET\n  code = sg.code FROM staging_gender sg where sg.id = gender.id;"
          }
        },
        "student_ethnicity": {
          "sql": {
            "delete": "DELETE FROM student_ethnicity\n  USING staging_student ss\nWHERE ss.id = student_ethnicity.student_id AND ss.deleted = 1;",
            "deleteAsPartOfParentUpdate": "DELETE FROM student_ethnicity\n  USING staging_student ss\nWHERE ss.id = student_ethnicity.student_id AND ss.deleted = 0 AND\n  NOT EXISTS(SELECT sse.student_id FROM staging_student_ethnicity sse WHERE sse.student_id = student_ethnicity.student_id AND sse.ethnicity_id = student_ethnicity.ethnicity_id)",
            "insert": "INSERT INTO student_ethnicity (student_id, ethnicity_id)\n  SELECT DISTINCT\n    sue.student_id,\n    sue.ethnicity_id\n  FROM staging_student_ethnicity sue\n    LEFT JOIN student_ethnicity rse ON (rse.student_id = sue.student_id AND rse.ethnicity_id = sue.ethnicity_id)\n  WHERE rse.student_id IS NULL;"
          }
        },
        "subject": {
          "sql": {
            "insert": "INSERT INTO subject (id,  code, updated, update_import_id, migrate_id)\n  SELECT DISTINCT\n    ss.id,\n    ss.code,\n    ss.updated,\n    ss.update_import_id,\n    ss.migrate_id\n  FROM staging_subject ss\n    LEFT JOIN subject rs ON rs.id = ss.id\n  WHERE rs.id IS NULL;",
            "update": "UPDATE subject SET\n  updated = ss.updated,\n  update_import_id = ss.update_import_id,\n  migrate_id = ss.migrate_id\nFROM staging_subject ss WHERE ss.id = subject.id;"
          }
        }
      },
      "finalizeList": [
        "ANALYZE"
      ]
    }
  },
  "configClientHealthProperties": {
    "prefix": "health.config",
    "properties": {
      "timeToLive": 300000,
      "enabled": false
    }
  },
  "spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties": {
    "prefix": "spring.cloud.service-registry.auto-registration",
    "properties": {
      "enabled": true,
      "registerManagement": true,
      "failFast": false
    }
  },
  "healthMvcEndpoint": {
    "prefix": "endpoints.health",
    "properties": {
      "path": "/health"
    }
  },
  "scopedTarget.olapDataSourceElementsProperties": {
    "prefix": "datasources.olap_rw",
    "properties": {
      "schemaSearchPath": null,
      "urlParts": {
        "protocol": "jdbc:redshift:",
        "hosts": "rdw-qa.cibkulpjrgtr.us-west-2.redshift.amazonaws.com:5439",
        "database": "qa",
        "properties": "ApplicationName=rdw-ingest-migrate-olap&loginTimeout=10&socketTimeout=0"
      },
      "tenants": {
        "CA_S001": {
          "url": null,
          "urlParts": null,
          "username": "cas001",
          "password": "******",
          "schemaSearchPath": "reporting_ca_s001",
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA_S002": {
          "url": null,
          "urlParts": null,
          "username": "cas002",
          "password": "******",
          "schemaSearchPath": "reporting_ca_s002",
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA": {
          "url": null,
          "urlParts": null,
          "username": "awsqa",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "TS": {
          "url": null,
          "urlParts": null,
          "username": "awsqa_ts",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        }
      },
      "minIdle": null,
      "validationQuery": "SELECT 1",
      "initialSize": null,
      "url": "jdbc:redshift://rdw-qa.cibkulpjrgtr.us-west-2.redshift.amazonaws.com:5439/qa?ApplicationName=rdw-ingest-migrate-olap&loginTimeout=10&socketTimeout=0",
      "logAbandoned": null,
      "password": "******",
      "testWhileIdle": true,
      "maxIdle": null,
      "removeAbandoned": null,
      "driverClassName": "com.amazon.redshift.jdbc42.Driver",
      "removeAbandonedTimeout": null,
      "username": "root",
      "validationInterval": 30000,
      "maxActive": null
    }
  },
  "serverProperties": {
    "prefix": "server",
    "properties": {
      "contextParameters": {},
      "address": null,
      "maxHttpPostSize": 0,
      "undertow": {
        "maxHttpPostSize": -1,
        "bufferSize": null,
        "buffersPerRegion": null,
        "ioThreads": null,
        "workerThreads": null,
        "directBuffers": null,
        "accesslog": {
          "enabled": null,
          "pattern": "common",
          "prefix": "access_log.",
          "suffix": "log",
          "dir": "/logs",
          "rotate": true
        }
      },
      "tomcat": {
        "accesslog": {
          "enabled": false,
          "pattern": "common",
          "directory": "logs",
          "prefix": "access_log",
          "suffix": ".log",
          "rotate": true,
          "renameOnRotate": false,
          "fileDateFormat": ".yyyy-MM-dd",
          "requestAttributesEnabled": false,
          "buffered": true
        },
        "internalProxies": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}|0:0:0:0:0:0:0:1|::1",
        "protocolHeader": null,
        "protocolHeaderHttpsValue": "https",
        "portHeader": "X-Forwarded-Port",
        "remoteIpHeader": null,
        "basedir": null,
        "backgroundProcessorDelay": 10,
        "maxThreads": 2,
        "minSpareThreads": 10,
        "maxHttpPostSize": 2097152,
        "redirectContextRoot": true,
        "uriEncoding": "UTF-8",
        "maxConnections": 2,
        "acceptCount": 100,
        "additionalTldSkipPatterns": []
      },
      "displayName": "application",
      "session": {
        "timeout": null,
        "trackingModes": null,
        "persistent": false,
        "storeDir": null,
        "cookie": {
          "name": null,
          "domain": null,
          "path": null,
          "comment": null,
          "httpOnly": null,
          "secure": null,
          "maxAge": null
        }
      },
      "contextPath": null,
      "error": {
        "path": "/error",
        "includeStacktrace": "NEVER"
      },
      "ssl": null,
      "serverHeader": null,
      "useForwardHeaders": null,
      "port": 8008,
      "maxHttpHeaderSize": 131072,
      "servletPath": "/",
      "jspServlet": null,
      "jetty": {
        "maxHttpPostSize": 200000,
        "acceptors": -1,
        "selectors": -1
      },
      "connectionTimeout": null
    }
  },
  "spring.metrics.export-org.springframework.boot.actuate.metrics.export.MetricExportProperties": {
    "prefix": "spring.metrics.export",
    "properties": {
      "excludes": null,
      "statsd": {
        "host": null,
        "port": 8125,
        "prefix": null
      },
      "includes": null,
      "triggers": {},
      "enabled": true,
      "redis": {
        "prefix": "spring.metrics.rdw-ingest-migrate-olap.be64ab8796654dc3d4509172271c789d",
        "key": "******"
      },
      "aggregate": {
        "prefix": "rdw-ingest-migrate-olap.be64ab8796654dc3d4509172271c789d",
        "keyPattern": "k.d"
      }
    }
  },
  "configurationPropertiesReportEndpoint": {
    "prefix": "endpoints.configprops",
    "properties": {
      "id": "configprops",
      "sensitive": true,
      "enabled": true
    }
  },
  "scopedTarget.warehouseDataSourceElementsProperties": {
    "prefix": "datasources.warehouse_rw",
    "properties": {
      "schemaSearchPath": null,
      "urlParts": {
        "protocol": "jdbc:mysql:",
        "hosts": "rdw-aurora-qa-cluster.cluster-cugsexobhx8t.us-west-2.rds.amazonaws.com:3306",
        "database": "warehouse",
        "properties": "useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&connectTimeout=10000&socketTimeout=0"
      },
      "tenants": {
        "CA_S001": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "warehouse_ca_s001",
            "properties": null
          },
          "username": "cas001",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA_S002": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "warehouse_ca_s002",
            "properties": null
          },
          "username": "cas002",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "warehouse",
            "properties": null
          },
          "username": "sbac",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "TS": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "ts_warehouse",
            "properties": null
          },
          "username": "sbac",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        }
      },
      "minIdle": 4,
      "validationQuery": "SELECT 1",
      "initialSize": 4,
      "url": "jdbc:mysql://rdw-aurora-qa-cluster.cluster-cugsexobhx8t.us-west-2.rds.amazonaws.com:3306/warehouse?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&connectTimeout=10000&socketTimeout=0",
      "logAbandoned": false,
      "password": "******",
      "testWhileIdle": true,
      "maxIdle": 10,
      "removeAbandoned": false,
      "driverClassName": "com.mysql.jdbc.Driver",
      "removeAbandonedTimeout": 60,
      "username": "root",
      "validationInterval": 10000,
      "maxActive": 10
    }
  },
  "loggersMvcEndpoint": {
    "prefix": "endpoints.loggers",
    "properties": {
      "path": "/loggers"
    }
  },
  "loggersEndpoint": {
    "prefix": "endpoints.loggers",
    "properties": {
      "id": "loggers",
      "sensitive": true,
      "enabled": true
    }
  },
  "migrateEndpoint": {
    "prefix": "endpoints.migrate",
    "properties": {
      "id": "migrate",
      "sensitive": true,
      "enabled": true
    }
  },
  "spring.batch-org.springframework.boot.autoconfigure.batch.BatchProperties": {
    "prefix": "spring.batch",
    "properties": {
      "schema": "classpath:org/springframework/batch/core/schema-@@platform@@.sql",
      "job": {
        "names": ""
      },
      "tablePrefix": null,
      "initializer": {
        "enabled": false
      }
    }
  },
  "endpoints.jmx-org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties": {
    "prefix": "endpoints.jmx",
    "properties": {
      "uniqueNames": false,
      "staticNames": {},
      "enabled": true,
      "domain": ""
    }
  },
  "restartEndpointWithoutIntegration": {
    "prefix": "endpoints.restart",
    "properties": {
      "id": "restart",
      "sensitive": true,
      "pauseEndpoint": {
        "id": "pause",
        "sensitive": true,
        "enabled": true
      },
      "resumeEndpoint": {
        "id": "resume",
        "sensitive": true,
        "enabled": true
      },
      "enabled": true,
      "timeout": 0
    }
  },
  "spring.http.encoding-org.springframework.boot.autoconfigure.web.HttpEncodingProperties": {
    "prefix": "spring.http.encoding",
    "properties": {
      "charset": "UTF-8",
      "force": false,
      "mapping": null,
      "forceRequest": false,
      "forceResponse": false
    }
  },
  "shutdownEndpoint": {
    "prefix": "endpoints.shutdown",
    "properties": {
      "id": "shutdown",
      "sensitive": true,
      "enabled": false
    }
  },
  "beansEndpoint": {
    "prefix": "endpoints.beans",
    "properties": {
      "id": "beans",
      "sensitive": true,
      "enabled": true
    }
  },
  "requestMappingEndpoint": {
    "prefix": "endpoints.mappings",
    "properties": {
      "id": "mappings",
      "sensitive": true,
      "enabled": true
    }
  },
  "scopedTarget.archivePropertiesRoot": {
    "prefix": "archive",
    "properties": {
      "tenants": {
        "CA_S001": {
          "uriRoot": null,
          "pathPrefix": "ca_s001",
          "s3AccessKey": null,
          "s3SecretKey": null,
          "s3RegionStatic": null,
          "s3Sse": null
        },
        "CA_S002": {
          "uriRoot": null,
          "pathPrefix": "CA_S002",
          "s3AccessKey": null,
          "s3SecretKey": null,
          "s3RegionStatic": null,
          "s3Sse": null
        },
        "TS": {
          "uriRoot": null,
          "pathPrefix": "TS",
          "s3AccessKey": null,
          "s3SecretKey": null,
          "s3RegionStatic": null,
          "s3Sse": null
        }
      },
      "s3SecretKey": "******",
      "s3AccessKey": "******",
      "s3Sse": null,
      "s3RegionStatic": "us-west-2",
      "uriRoot": "s3://rdw-qa-archive",
      "pathPrefix": null
    }
  },
  "refreshEndpoint": {
    "prefix": "endpoints.refresh",
    "properties": {
      "id": "refresh",
      "sensitive": true,
      "enabled": true
    }
  },
  "spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties": {
    "prefix": "spring.transaction",
    "properties": {
      "rollbackOnCommitFailure": null,
      "defaultTimeout": null
    }
  },
  "statusEndpoint": {
    "prefix": "endpoints.status",
    "properties": {
      "id": "status",
      "sensitive": true,
      "enabled": true
    }
  },
  "migrateWarehouseToStagingSqlConfiguration": {
    "prefix": "sql.warehouseToStage",
    "properties": {
      "truncateStageList": [
        "delete from staging_administration_condition",
        "delete from staging_completeness",
        "delete from staging_elas",
        "delete from staging_ethnicity",
        "delete from staging_gender",
        "delete from staging_grade",
        "delete from staging_language",
        "delete from staging_military_connected",
        "delete from staging_school_year",
        "delete from staging_subject",
        "delete from staging_subject_score",
        "delete from staging_subject_asmt_type",
        "delete from staging_subject_asmt_scoring",
        "delete from staging_target",
        "delete from staging_school",
        "delete from staging_district",
        "delete from staging_district_group",
        "delete from staging_school_group",
        "delete from staging_district_embargo",
        "delete from staging_state_embargo",
        "delete from staging_student",
        "delete from staging_student_ethnicity",
        "delete from staging_asmt",
        "delete from staging_asmt_target",
        "delete from staging_asmt_target_exclusion",
        "delete from staging_exam",
        "delete from staging_exam_score",
        "delete from staging_exam_target_score"
      ],
      "entities": {
        "school_group": {
          "sql": {
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM school_group wsg\n WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND school_group_id = wsg.id)\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/schgroup' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_school_group(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/schgroup.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "district": {
          "sql": {
            "stagingInsert": "COPY staging_district(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/district.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM district wd WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND district_id = wd.id) INTO OUTFILE S3 '$[migrateLocationPlaceholder]/district' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "completeness": {
          "sql": {
            "warehouseRead": "SELECT\n  id,\n  code\nFROM completeness INTO OUTFILE S3 '$[migrateLocationPlaceholder]/completeness' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_completeness (id, code)\n  FROM '$[migrateLocationPlaceholder]/completeness.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "district_embargo": {
          "sql": {
            "stagingInsert": "COPY staging_district_embargo ( district_id, aggregate, migrate_id) FROM '$[migrateLocationPlaceholder]/embargo.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT e.district_id, e.aggregate, ? as migrate_id FROM (SELECT d.id as district_id, IF(se.individual = 0 OR de.individual = 0 OR (se.individual IS NULL and de.individual IS NULL), 0, 1) AS individual, IF(se.aggregate = 0 OR de.aggregate = 0, 0, 1) AS aggregate FROM district d LEFT JOIN district_embargo de ON de.district_id = d.id AND de.school_year = 2019 LEFT JOIN state_embargo se ON se.school_year = 2019) e INTO OUTFILE S3 '$[migrateLocationPlaceholder]/embargo' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "district_update": {
          "sql": {
            "stagingInsert": "COPY staging_district(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/district_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM district wd WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND district_id = wd.id) INTO OUTFILE S3 '$[migrateLocationPlaceholder]/district_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "student_update": {
          "sql": {
            "stagingInsert": "COPY staging_student(\n  id,\n  gender_id,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/student_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  gender_id,\n  deleted,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM student ws WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/student_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "subject": {
          "sql": {
            "stagingInsert": "COPY staging_subject(\n  id,\n  code,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/subject.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM subject ws\n  WHERE ws.created > ? AND ws.created <= ?\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "ethnicity": {
          "sql": {
            "stagingInsert": "COPY staging_ethnicity (id, code)\n  FROM '$[migrateLocationPlaceholder]/ethnicity.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM ethnicity INTO OUTFILE S3 '$[migrateLocationPlaceholder]/ethnicity' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "subject_update": {
          "sql": {
            "warehouseRead": "SELECT\n  id,\n  code,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM subject ws WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_subject(\n  id,\n  code,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/subject_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "exam_score": {
          "sql": {
            "stagingInsert": "COPY staging_exam_score(\n  id,\n  exam_id,\n  subject_score_id,\n  performance_level,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam_score.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  ecs.id,\n  ecs.exam_id,\n  ecs.subject_score_id,\n  ecs.performance_level,\n  ? as migrate_id\nFROM exam_score ecs\n  JOIN exam we ON we.id = ecs.exam_id\n WHERE we.created > ? AND we.deleted = 0 AND we.created <= ?\n  AND we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL AND ecs.performance_level IS NOT NULL\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam_score' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "district_group": {
          "sql": {
            "stagingInsert": "COPY staging_district_group(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/dstrgroup.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM district_group wdg\n  WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND district_group_id = wdg.id)\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/dstrgroup' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'"
          }
        },
        "student_ethnicity_update": {
          "sql": {
            "stagingInsert": "COPY staging_student_ethnicity (\n  ethnicity_id,\n  student_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/student_ethnicity_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  ethnicity_id,\n  student_id,\n  ? as migrate_id\nFROM student_ethnicity\n  JOIN student ws ON ws.id = student_ethnicity.student_id\nWHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created AND ws.deleted = 0\n  INTO OUTFILE S3 '$[migrateLocationPlaceholder]/student_ethnicity_update'\nFIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'"
          }
        },
        "exam_target_score": {
          "sql": {
            "stagingInsert": "COPY staging_exam_target_score(\n  id,\n  exam_id,\n  target_id,\n  student_relative_residual_score,\n  standard_met_relative_residual_score,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam_target_score.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wets.id,\n  wets.exam_id,\n  wets.target_id,\n  wets.student_relative_residual_score,\n  wets.standard_met_relative_residual_score,\n  ? as migrate_id\nFROM exam_target_score wets\n  JOIN exam we ON wets.exam_id = we.id\n  JOIN target wt ON wt.id = wets.target_id\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\nWHERE we.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n    we.created > ? AND we.deleted = 0 AND we.created <= ? AND\n    we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL AND\n    wets.standard_met_relative_residual_score IS NOT NULL AND wets.student_relative_residual_score IS NOT NULL\n  INTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam_target_score'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'"
          }
        },
        "subject_score_update": {
          "sql": {
            "stagingInsert": "COPY staging_subject_score (id, subject_id, asmt_type_id, score_type_id, code, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_score_update.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT wss.id, wss.subject_id, wss.asmt_type_id, wss.score_type_id, wss.code, ? as migrate_id FROM subject_score wss\n  JOIN subject ws ON ws.id = wss.subject_id\nWHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_score_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "language": {
          "sql": {
            "stagingInsert": "COPY staging_language (id, code)\n  FROM '$[migrateLocationPlaceholder]/language.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM language INTO OUTFILE S3 '$[migrateLocationPlaceholder]/language' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "subject_asmt_scoring": {
          "sql": {
            "stagingInsert": "COPY staging_subject_asmt_scoring (subject_id, asmt_type_id, score_type_id, min_score, max_score, performance_level_count, performance_level_standard_cutoff, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_asmt_scoring.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT wsas.subject_id, wsas.asmt_type_id, wsas.score_type_id, wsas.min_score, wsas.max_score, wsas.performance_level_count, wsas.performance_level_standard_cutoff, ? as migrate_id FROM subject_asmt_scoring wsas\n  JOIN subject ws ON ws.id = wsas.subject_id\nWHERE ws.created > ? AND ws.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_asmt_scoring' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "district_group_update": {
          "sql": {
            "stagingInsert": "COPY staging_district_group(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/dstrgroup_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM district_group wdg\n WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND district_group_id = wdg.id)\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/dstrgroup_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'"
          }
        },
        "gender": {
          "sql": {
            "stagingInsert": "COPY staging_gender (id, code)\n  FROM '$[migrateLocationPlaceholder]/gender.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM gender INTO OUTFILE S3 '$[migrateLocationPlaceholder]/gender' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "exam": {
          "sql": {
            "stagingInsert": "COPY staging_exam(\n  id,\n  student_id,\n  grade_id,\n  school_id,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  type_id,\n  school_year,\n  asmt_id,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  student_id,\n  grade_id,\n  school_id,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  type_id,\n  school_year,\n  asmt_id,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  deleted,\n  updated,\n  update_import_id,\n ? as migrate_id\nFROM exam we\n  WHERE we.created > ? AND we.created <= ? AND we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "exam_score_update": {
          "sql": {
            "stagingInsert": "COPY staging_exam_score(\n  id,\n  exam_id,\n  subject_score_id,\n  performance_level,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam_score_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  ecs.id,\n  ecs.exam_id,\n  ecs.subject_score_id,\n  ecs.performance_level,\n  ? as migrate_id\nFROM exam_score ecs\n  JOIN exam we ON we.id = ecs.exam_id\nWHERE we.updated > ? AND we.deleted = 0 AND we.updated <= ? AND we.updated <> we.created\n  AND we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL AND ecs.performance_level IS NOT NULL\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam_score_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "subject_asmt_type": {
          "sql": {
            "stagingInsert": "COPY staging_subject_asmt_type (subject_id, asmt_type_id, target_report, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_asmt_type.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT wsat.subject_id, wsat.asmt_type_id, wsat.target_report, ? as migrate_id FROM subject_asmt_type wsat\n  JOIN subject ws ON ws.id = wsat.subject_id\nWHERE ws.created > ? AND ws.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_asmt_type' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "administration_condition": {
          "sql": {
            "stagingInsert": "COPY staging_administration_condition (id, code)\n  FROM '$[migrateLocationPlaceholder]/administration_condition.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM administration_condition INTO OUTFILE S3 '$[migrateLocationPlaceholder]/administration_condition' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "student": {
          "sql": {
            "warehouseRead": "SELECT\n  id,\n  gender_id,\n  deleted,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM student ws\n  WHERE ws.created > ? AND ws.created <= ?\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/student' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_student(\n  id,\n  gender_id,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/student.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "target_update": {
          "sql": {
            "warehouseRead": "SELECT wt.id, ws.id, wt.natural_id, wc.code, ? as migrate_id FROM target wt\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\nWHERE ( ws.code <> 'Math' OR wc.code='1' ) AND ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/target_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_target (id, subject_id, natural_id, claim_code, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/target_update.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "asmt_target_exclusion_update": {
          "sql": {
            "stagingInsert": "COPY staging_asmt_target_exclusion(\n  asmt_id,\n  target_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exclusion_asmt_target_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wats.asmt_id,\n  wats.target_id,\n  ? as migrate_id\nFROM asmt_target_exclusion wats\n   JOIN asmt wa ON wa.id = wats.asmt_id\n    JOIN target wt ON wt.id = wats.target_id\n    JOIN claim wc ON wc.id = wt.claim_id\n    JOIN subject ws ON ws.id = wc.subject_id\n  WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n        wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created AND wa.deleted = 0\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exclusion_asmt_target_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "asmt_target": {
          "sql": {
            "warehouseRead": "SELECT DISTINCT\n  wi.asmt_id,\n  wi.target_id,\n  ? as migrate_id\nFROM item wi JOIN asmt wa ON wa.id = wi.asmt_id\n    JOIN target wt ON wt.id = wi.target_id\n    JOIN claim wc ON wc.id = wt.claim_id\n    JOIN subject ws ON ws.id = wc.subject_id\n  WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n        wa.created > ? AND wa.created <= ? AND wa.deleted = 0\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/asmt_target' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_asmt_target(\n  asmt_id,\n  target_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/asmt_target.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "asmt": {
          "sql": {
            "stagingInsert": "COPY staging_asmt(\n  id,\n  grade_id,\n  type_id,\n  school_year,\n  subject_id,\n  name,\n  label,\n  cut_point_1,\n  cut_point_2,\n  cut_point_3,\n  cut_point_4,\n  cut_point_5,\n  min_score,\n  max_score,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/asmt.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wa.id,\n  wa.grade_id,\n  wa.type_id,\n  wa.school_year,\n  wa.subject_id,\n  wa.name,\n  wa.label,\n  round(was.cut_point_1) AS cut_point_1,\n  round(was.cut_point_2) AS cut_point_2,\n  round(was.cut_point_3) AS cut_point_3,\n  round(was.cut_point_4) AS cut_point_4,\n  round(was.cut_point_5) AS cut_point_5,\n  round(was.min_score) AS min_score,\n  round(was.max_score) AS max_score,\n  wa.deleted,\n  wa.updated,\n  wa.update_import_id,\n  ? as migrate_id\nFROM asmt wa JOIN asmt_score was ON wa.id = was.asmt_id AND was.subject_score_id IS NULL WHERE wa.created > ? AND wa.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/asmt' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "asmt_update": {
          "sql": {
            "stagingInsert": "COPY staging_asmt(\n  id,\n  grade_id,\n  type_id,\n  school_year,\n  subject_id,\n  name,\n  label,\n  cut_point_1,\n  cut_point_2,\n  cut_point_3,\n  cut_point_4,\n  cut_point_5,\n  min_score,\n  max_score,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/asmt_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wa.id,\n  wa.grade_id,\n  wa.type_id,\n  wa.school_year,\n  wa.subject_id,\n  wa.name,\n  wa.label,\n  round(was.cut_point_1) AS cut_point_1,\n  round(was.cut_point_2) AS cut_point_2,\n  round(was.cut_point_3) AS cut_point_3,\n  round(was.cut_point_4) AS cut_point_4,\n  round(was.cut_point_5) AS cut_point_5,\n  round(was.min_score) AS min_score,\n  round(was.max_score) AS max_score,\n  wa.deleted,\n  wa.updated,\n  wa.update_import_id,\n  ? as migrate_id\nFROM asmt wa JOIN asmt_score was ON wa.id = was.asmt_id AND was.subject_score_id IS NULL WHERE wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/asmt_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "school_group_update": {
          "sql": {
            "stagingInsert": "COPY staging_school_group(\n  id,\n  name,\n  natural_id,\n  external_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/schgroup_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  name,\n  natural_id,\n  external_id,\n  ? as migrate_id\nFROM school_group wdg\n WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND school_group_id = wdg.id)\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/schgroup_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'"
          }
        },
        "asmt_target_exclusion": {
          "sql": {
            "stagingInsert": "COPY staging_asmt_target_exclusion(\n  asmt_id,\n  target_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exclusion_asmt_target.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wats.asmt_id,\n  wats.target_id,\n  ? as migrate_id\nFROM asmt_target_exclusion wats\n  JOIN asmt wa ON wa.id = wats.asmt_id\n  JOIN target wt ON wt.id = wats.target_id\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\nWHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n   wa.created > ? AND wa.created <= ? AND wa.deleted = 0\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exclusion_asmt_target' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "target": {
          "sql": {
            "stagingInsert": "COPY staging_target (id, subject_id, natural_id, claim_code, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/target.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT wt.id, ws.id, wt.natural_id, wc.code, ? as migrate_id FROM target wt\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\nWHERE ( ws.code <> 'Math' OR wc.code='1' ) AND  ws.created > ? AND ws.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/target' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "subject_asmt_scoring_update": {
          "sql": {
            "warehouseRead": "SELECT wsas.subject_id, wsas.asmt_type_id, wsas.score_type_id, wsas.min_score, wsas.max_score, wsas.performance_level_count, wsas.performance_level_standard_cutoff, ? as migrate_id FROM subject_asmt_scoring wsas\n  JOIN subject ws ON ws.id = wsas.subject_id\nWHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_asmt_scoring_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_subject_asmt_scoring (subject_id, asmt_type_id, score_type_id, min_score, max_score, performance_level_count, performance_level_standard_cutoff, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_asmt_scoring_update.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "exam_target_score_update": {
          "sql": {
            "stagingInsert": "COPY staging_exam_target_score(\n  id,\n  exam_id,\n  target_id,\n  student_relative_residual_score,\n  standard_met_relative_residual_score,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam_target_score_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  wets.id,\n  wets.exam_id,\n  wets.target_id,\n  wets.student_relative_residual_score,\n  wets.standard_met_relative_residual_score,\n  ? as migrate_id\nFROM exam_target_score wets\n  JOIN exam we ON wets.exam_id = we.id\n  JOIN target wt ON wt.id = wets.target_id\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\nWHERE we.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n  we.updated > ? AND we.deleted = 0 AND we.updated <= ? AND we.updated <> we.created AND\n  we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL AND\n  wets.standard_met_relative_residual_score IS NOT NULL AND wets.student_relative_residual_score IS NOT NULL\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam_target_score_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "exam_update": {
          "sql": {
            "stagingInsert": "COPY staging_exam(\n  id,\n  student_id,\n  grade_id,\n  school_id,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  type_id,\n  school_year,\n  asmt_id,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/exam_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  student_id,\n  grade_id,\n  school_id,\n  iep,\n  lep,\n  section504,\n  economic_disadvantage,\n  migrant_status,\n  type_id,\n  school_year,\n  asmt_id,\n  elas_id,\n  language_id,\n  completeness_id,\n  administration_condition_id,\n  military_connected_id,\n  scale_score,\n  performance_level,\n  completed_at,\n  deleted,\n  updated,\n  update_import_id,\n ? as migrate_id\nFROM exam we WHERE we.updated > ? AND we.updated <= ? AND we.updated <> we.created AND we.scale_score IS NOT NULL AND we.performance_level IS NOT NULL INTO OUTFILE S3 '$[migrateLocationPlaceholder]/exam_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "school_update": {
          "sql": {
            "warehouseRead": "SELECT\n  id,\n  district_id,\n  name,\n  natural_id,\n  external_id,\n  school_group_id,\n  district_group_id,\n  deleted,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM school ws WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/school_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_school(\n  id,\n  district_id,\n  name,\n  natural_id,\n  external_id,\n  school_group_id,\n  district_group_id,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/school_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "school_year": {
          "sql": {
            "stagingInsert": "COPY staging_school_year (year)\n  FROM '$[migrateLocationPlaceholder]/year.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  year\nFROM school_year INTO OUTFILE S3 '$[migrateLocationPlaceholder]/year' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "state_embargo": {
          "sql": {
            "stagingInsert": "COPY staging_state_embargo ( aggregate, migrate_id) FROM '$[migrateLocationPlaceholder]/state_embargo.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT IF(aggregate = 0, 0, 1) AS aggregate, ? as migrate_id FROM state_embargo WHERE school_year = 2019 INTO OUTFILE S3 '$[migrateLocationPlaceholder]/state_embargo' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "asmt_target_update": {
          "sql": {
            "stagingInsert": "COPY staging_asmt_target(\n  asmt_id,\n  target_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/asmt_target_update.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT DISTINCT\n  wi.asmt_id,\n  wi.target_id,\n  ? as migrate_id\nFROM item wi JOIN asmt wa ON wa.id = wi.asmt_id\n  JOIN target wt ON wt.id = wi.target_id\n  JOIN claim wc ON wc.id = wt.claim_id\n  JOIN subject ws ON ws.id = wc.subject_id\n  WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND\n    wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created AND wa.deleted = 0\nINTO OUTFILE S3 '$[migrateLocationPlaceholder]/asmt_target_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "subject_asmt_type_update": {
          "sql": {
            "warehouseRead": "SELECT wsat.subject_id, wsat.asmt_type_id, wsat.target_report, ? as migrate_id FROM subject_asmt_type wsat\n  JOIN subject ws ON ws.id = wsat.subject_id\nWHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_asmt_type_update' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_subject_asmt_type (subject_id, asmt_type_id, target_report, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_asmt_type_update.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "school": {
          "sql": {
            "stagingInsert": "COPY staging_school(\n  id,\n  district_id,\n  name,\n  natural_id,\n  external_id,\n  school_group_id,\n  district_group_id,\n  deleted,\n  updated,\n  update_import_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/school.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV TIMEFORMAT 'auto' DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  district_id,\n  name,\n  natural_id,\n  external_id,\n  school_group_id,\n  district_group_id,\n  deleted,\n  updated,\n  update_import_id,\n  ? as migrate_id\nFROM school ws WHERE ws.created > ? AND ws.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/school' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n               LINES TERMINATED BY '\\n'"
          }
        },
        "elas": {
          "sql": {
            "stagingInsert": "COPY staging_elas (id, code)\n  FROM '$[migrateLocationPlaceholder]/elas.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM elas INTO OUTFILE S3 '$[migrateLocationPlaceholder]/elas' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "military_connected": {
          "sql": {
            "stagingInsert": "COPY staging_military_connected (id, code)\n  FROM '$[migrateLocationPlaceholder]/military_connected.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code\nFROM military_connected INTO OUTFILE S3 '$[migrateLocationPlaceholder]/military_connected' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        },
        "subject_score": {
          "sql": {
            "warehouseRead": "SELECT wss.id, wss.subject_id, wss.asmt_type_id, wss.score_type_id, wss.code, ? as migrate_id FROM subject_score wss\n  JOIN subject ws ON ws.id = wss.subject_id\nWHERE ws.created > ? AND ws.created <= ? INTO OUTFILE S3 '$[migrateLocationPlaceholder]/subject_score' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_subject_score (id, subject_id, asmt_type_id, score_type_id, code, migrate_id)\n  FROM '$[migrateLocationPlaceholder]/subject_score.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "student_ethnicity": {
          "sql": {
            "warehouseRead": "SELECT\n  ethnicity_id,\n  student_id,\n  ? as migrate_id\nFROM student_ethnicity\n  JOIN student ws ON ws.id = student_ethnicity.student_id\nWHERE ws.created > ? AND ws.created <= ? AND ws.deleted = 0\n  INTO OUTFILE S3 '$[migrateLocationPlaceholder]/student_ethnicity'\nFIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n                LINES TERMINATED BY '\\n'",
            "stagingInsert": "COPY staging_student_ethnicity(\n  ethnicity_id,\n  student_id,\n  migrate_id)\nFROM '$[migrateLocationPlaceholder]/student_ethnicity.part_00000' CREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF"
          }
        },
        "grade": {
          "sql": {
            "stagingInsert": "COPY staging_grade (id, code, sequence)\n  FROM '$[migrateLocationPlaceholder]/grade.part_00000'\nCREDENTIALS 'aws_iam_role=arn:aws:iam::269146879732:role/rdw-redshift' FORMAT AS CSV DELIMITER ',' COMPUPDATE OFF",
            "warehouseRead": "SELECT\n  id,\n  code,\n  sequence\nFROM grade INTO OUTFILE S3 '$[migrateLocationPlaceholder]/grade' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'"
          }
        }
      }
    }
  },
  "spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties": {
    "prefix": "spring.jackson",
    "properties": {
      "serialization": {
        "WRITE_DATES_AS_TIMESTAMPS": false
      },
      "propertyNamingStrategy": null,
      "defaultPropertyInclusion": "NON_NULL",
      "parser": {},
      "dateFormat": null,
      "deserialization": {},
      "generator": {},
      "timeZone": null,
      "mapper": {},
      "locale": null,
      "jodaDateTimeFormat": null
    }
  },
  "heapdumpMvcEndpoint": {
    "prefix": "endpoints.heapdump",
    "properties": {
      "path": "/heapdump",
      "sensitive": true,
      "enabled": true
    }
  },
  "endpoints.cors-org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties": {
    "prefix": "endpoints.cors",
    "properties": {
      "allowedOrigins": [],
      "maxAge": 1800,
      "exposedHeaders": [],
      "allowedHeaders": [],
      "allowedMethods": [],
      "allowCredentials": null
    }
  },
  "environmentMvcEndpoint": {
    "prefix": "endpoints.env",
    "properties": {
      "path": "/env"
    }
  },
  "spring.http.multipart-org.springframework.boot.autoconfigure.web.MultipartProperties": {
    "prefix": "spring.http.multipart",
    "properties": {
      "maxRequestSize": "10MB",
      "fileSizeThreshold": "0",
      "location": null,
      "maxFileSize": "1MB",
      "enabled": true,
      "resolveLazily": false
    }
  },
  "resumeEndpoint": {
    "prefix": "endpoints.resume",
    "properties": {
      "id": "resume",
      "sensitive": true,
      "enabled": true
    }
  },
  "spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties": {
    "prefix": "spring.info",
    "properties": {
      "build": {
        "location": {}
      },
      "git": {
        "location": {}
      }
    }
  },
  "scopedTarget.migrateDataSourceElementsProperties": {
    "prefix": "datasources.migrate_rw",
    "properties": {
      "schemaSearchPath": null,
      "urlParts": {
        "protocol": "jdbc:mysql:",
        "hosts": "rdw-aurora-qa-cluster.cluster-cugsexobhx8t.us-west-2.rds.amazonaws.com:3306",
        "database": "migrate_olap",
        "properties": "useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&connectTimeout=10000&socketTimeout=0"
      },
      "tenants": {
        "CA_S001": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "migrate_ca_s001",
            "properties": null
          },
          "username": "cas001",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA_S002": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "migrate_olap_ca_s002",
            "properties": null
          },
          "username": "cas002",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "CA": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "migrate_olap",
            "properties": null
          },
          "username": "sbac",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        },
        "TS": {
          "url": null,
          "urlParts": {
            "protocol": null,
            "hosts": null,
            "database": "ts_migrate_olap",
            "properties": null
          },
          "username": "sbac",
          "password": "******",
          "schemaSearchPath": null,
          "testWhileIdle": null,
          "validationQuery": null,
          "validationInterval": null,
          "driverClassName": null,
          "initialSize": null,
          "maxActive": null,
          "minIdle": null,
          "maxIdle": null,
          "removeAbandoned": null,
          "removeAbandonedTimeout": null,
          "logAbandoned": null
        }
      },
      "minIdle": 4,
      "validationQuery": "SELECT 1",
      "initialSize": 4,
      "url": "jdbc:mysql://rdw-aurora-qa-cluster.cluster-cugsexobhx8t.us-west-2.rds.amazonaws.com:3306/migrate_olap?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&connectTimeout=10000&socketTimeout=0",
      "logAbandoned": false,
      "password": "******",
      "testWhileIdle": true,
      "maxIdle": 10,
      "removeAbandoned": false,
      "driverClassName": "com.mysql.jdbc.Driver",
      "removeAbandonedTimeout": 60,
      "username": "root",
      "validationInterval": 10000,
      "maxActive": 10
    }
  },
  "spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties": {
    "prefix": "spring.datasource",
    "properties": {
      "schema": null,
      "dataPassword": null,
      "data": null,
      "dataUsername": null,
      "generateUniqueName": false,
      "xa": {
        "dataSourceClassName": null,
        "properties": {}
      },
      "type": null,
      "separator": ";",
      "url": null,
      "platform": "all",
      "continueOnError": false,
      "jndiName": null,
      "sqlScriptEncoding": null,
      "password": null,
      "schemaPassword": null,
      "name": "testdb",
      "driverClassName": null,
      "initialize": true,
      "schemaUsername": null,
      "username": null
    }
  },
  "traceEndpoint": {
    "prefix": "endpoints.trace",
    "properties": {
      "id": "trace",
      "sensitive": true,
      "enabled": true
    }
  },
  "metricsMvcEndpoint": {
    "prefix": "endpoints.metrics",
    "properties": {
      "path": "/metrics"
    }
  },
  "infoEndpoint": {
    "prefix": "endpoints.info",
    "properties": {
      "id": "info",
      "sensitive": false,
      "enabled": true
    }
  },
  "auditEventMvcEndpoint": {
    "prefix": "endpoints.auditevents",
    "properties": {
      "path": "/auditevents",
      "sensitive": true,
      "enabled": true
    }
  },
  "management.trace-org.springframework.boot.actuate.trace.TraceProperties": {
    "prefix": "management.trace",
    "properties": {
      "include": [
        "RESPONSE_HEADERS",
        "COOKIES",
        "ERRORS",
        "REQUEST_HEADERS",
        "TIME_TAKEN"
      ]
    }
  },
  "spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties": {
    "prefix": "spring.resources",
    "properties": {
      "cachePeriod": null,
      "addMappings": true,
      "chain": {
        "cache": true,
        "htmlApplicationCache": false,
        "gzipped": false,
        "strategy": {
          "fixed": {
            "enabled": false,
            "paths": [
              "/**"
            ],
            "version": null
          },
          "content": {
            "enabled": false,
            "paths": [
              "/**"
            ]
          }
        }
      },
      "staticLocations": [
        "/",
        "classpath:/META-INF/resources/",
        "classpath:/resources/",
        "classpath:/static/",
        "classpath:/public/"
      ]
    }
  },
  "management.health.status-org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties": {
    "prefix": "management.health.status",
    "properties": {
      "order": null
    }
  },
  "healthEndpoint": {
    "prefix": "endpoints.health",
    "properties": {
      "timeToLive": 1000,
      "id": "health",
      "sensitive": false,
      "enabled": true
    }
  },
  "scopedTarget.tenantProperties": {
    "prefix": "tenantProperties",
    "properties": {
      "tenants": {
        "CA_S001": {
          "id": "CA_S001",
          "key": "******",
          "name": "California Sandbox 001",
          "description": null,
          "sandbox": true,
          "sandboxDataset": "demo-dataset"
        },
        "CA_S002": {
          "id": "CA_S002",
          "key": "******",
          "name": "California Sandbox 002",
          "description": null,
          "sandbox": true,
          "sandboxDataset": "sbac-dataset"
        },
        "CA": {
          "id": "CA",
          "key": "******",
          "name": "California",
          "description": null,
          "sandbox": false,
          "sandboxDataset": null
        },
        "TS": {
          "id": "TS",
          "key": "******",
          "name": "Test State Tenant",
          "description": null,
          "sandbox": false,
          "sandboxDataset": null
        }
      },
      "status": {
        "tenantKeys": [
          "CA_S001",
          "CA_S002",
          "CA",
          "TS"
        ]
      }
    }
  },
  "configClientProperties": {
    "prefix": "spring.cloud.config",
    "properties": {
      "headers": {},
      "profile": "awsqa",
      "label": "develop,master",
      "uri": "http://configuration-service",
      "enabled": true,
      "failFast": true,
      "token": null,
      "authorization": null,
      "password": null,
      "discovery": {
        "enabled": false,
        "serviceId": "configserver"
      },
      "name": "rdw-ingest-migrate-olap",
      "username": "user"
    }
  },
  "endpoints.metrics.filter-org.springframework.boot.actuate.autoconfigure.MetricFilterProperties": {
    "prefix": "endpoints.metrics.filter",
    "properties": {
      "counterSubmissions": [
        "MERGED"
      ],
      "gaugeSubmissions": [
        "MERGED"
      ]
    }
  },
  "dumpEndpoint": {
    "prefix": "endpoints.dump",
    "properties": {
      "id": "dump",
      "sensitive": true,
      "enabled": true
    }
  },
  "autoConfigurationReportEndpoint": {
    "prefix": "endpoints.autoconfig",
    "properties": {
      "id": "autoconfig",
      "sensitive": true,
      "enabled": true
    }
  },
  "pauseEndpoint": {
    "prefix": "endpoints.pause",
    "properties": {
      "id": "pause",
      "sensitive": true,
      "enabled": true
    }
  },
  "managementServerProperties": {
    "prefix": "management",
    "properties": {
      "security": {
        "enabled": false,
        "roles": [
          "ACTUATOR"
        ],
        "sessions": "STATELESS"
      },
      "address": null,
      "port": null,
      "addApplicationContextHeader": true,
      "contextPath": "",
      "ssl": null
    }
  },
  "endpoints.health-org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties": {
    "prefix": "endpoints.health",
    "properties": {
      "mapping": {}
    }
  },
  "simpleDiscoveryProperties": {
    "prefix": "spring.cloud.discovery.client.simple",
    "properties": {
      "instances": {},
      "local": {
        "uri": "http://migrate-olap-deployment-5df8d8f6c8-w944l:0",
        "metadata": {},
        "serviceId": "rdw-ingest-migrate-olap"
      }
    }
  },
  "spring.mvc-org.springframework.boot.autoconfigure.web.WebMvcProperties": {
    "prefix": "spring.mvc",
    "properties": {
      "dateFormat": null,
      "servlet": {
        "loadOnStartup": -1
      },
      "staticPathPattern": "/**",
      "dispatchOptionsRequest": true,
      "dispatchTraceRequest": false,
      "locale": null,
      "ignoreDefaultModelOnRedirect": true,
      "logResolvedException": false,
      "async": {
        "requestTimeout": null
      },
      "messageCodesResolverFormat": null,
      "mediaTypes": {},
      "view": {
        "prefix": null,
        "suffix": null
      },
      "localeResolver": "ACCEPT_HEADER",
      "throwExceptionIfNoHandlerFound": false
    }
  },
  "diskSpaceHealthIndicatorProperties": {
    "prefix": "management.health.diskspace",
    "properties": {
      "path": "/.",
      "threshold": 10485760
    }
  }
}
